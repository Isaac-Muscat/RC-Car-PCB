
RC-Car-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015c90  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08015f30  08015f30  00016f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080163a0  080163a0  000173a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080163a8  080163a8  000173a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080163ac  080163ac  000173ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000015c  24000000  080163b0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000b88c  2400015c  0801650c  0001815c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2400b9e8  0801650c  000189e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001815c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002cdaa  00000000  00000000  0001818a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000052d4  00000000  00000000  00044f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002118  00000000  00000000  0004a208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000019d9  00000000  00000000  0004c320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cd5e  00000000  00000000  0004dcf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002fb48  00000000  00000000  0008aa57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00170d61  00000000  00000000  000ba59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022b300  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009398  00000000  00000000  0022b344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  002346dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400015c 	.word	0x2400015c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015f18 	.word	0x08015f18

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000160 	.word	0x24000160
 80002dc:	08015f18 	.word	0x08015f18

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006c2:	f000 ff97 	bl	80015f4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f001 fe3d 	bl	8002344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f8e5 	bl	8000898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f000 fce3 	bl	8001098 <MX_GPIO_Init>
  MX_DMA_Init();
 80006d2:	f000 fca1 	bl	8001018 <MX_DMA_Init>
  MX_MDMA_Init();
 80006d6:	f000 fcbf 	bl	8001058 <MX_MDMA_Init>
  MX_USART1_UART_Init();
 80006da:	f000 fc4f 	bl	8000f7c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80006de:	f014 fa21 	bl	8014b24 <MX_USB_DEVICE_Init>
  MX_DCMI_Init();
 80006e2:	f000 f953 	bl	800098c <MX_DCMI_Init>
  MX_I2C2_Init();
 80006e6:	f000 f989 	bl	80009fc <MX_I2C2_Init>
  MX_TIM14_Init();
 80006ea:	f000 fbfb 	bl	8000ee4 <MX_TIM14_Init>
  MX_TIM2_Init();
 80006ee:	f000 fabd 	bl	8000c6c <MX_TIM2_Init>
  MX_TIM4_Init();
 80006f2:	f000 fb91 	bl	8000e18 <MX_TIM4_Init>
  MX_TIM1_Init();
 80006f6:	f000 fa2b 	bl	8000b50 <MX_TIM1_Init>
  MX_TIM3_Init();
 80006fa:	f000 fb27 	bl	8000d4c <MX_TIM3_Init>
  MX_JPEG_Init();
 80006fe:	f000 f9bd 	bl	8000a7c <MX_JPEG_Init>
  MX_SPI2_Init();
 8000702:	f000 f9cf 	bl	8000aa4 <MX_SPI2_Init>

	// ------------------------------------------------------------ SETUP USB MESSAGING -- //
	//uint8_t usb_msg[100] = {0};	// Reserve 100 bytes for USB Debug messages

	// ------------------------------------------------------------ SETUP CAMERA INTERFACE -- //
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// XCLK - Start the camera's core clock
 8000706:	2100      	movs	r1, #0
 8000708:	4854      	ldr	r0, [pc, #336]	@ (800085c <main+0x1a0>)
 800070a:	f00e fd29 	bl	800f160 <HAL_TIM_PWM_Start>
	// X 		  COM15 [6] = 1 (Data range [00-FF])
	// X 		  COM15 [5] = 0 (RGB 565)
	// X 		  COM15 [4] = 1 (RGB 565)
	uint8_t cam_regCache;

	cam_regCache = 0b00001000;
 800070e:	2308      	movs	r3, #8
 8000710:	737b      	strb	r3, [r7, #13]
	while (CAM_SetRegister(0x0C, cam_regCache, 0)) {}
 8000712:	bf00      	nop
 8000714:	7b7b      	ldrb	r3, [r7, #13]
 8000716:	2200      	movs	r2, #0
 8000718:	4619      	mov	r1, r3
 800071a:	200c      	movs	r0, #12
 800071c:	f000 fe62 	bl	80013e4 <CAM_SetRegister>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1f6      	bne.n	8000714 <main+0x58>

	cam_regCache = 0b00010000;
 8000726:	2310      	movs	r3, #16
 8000728:	737b      	strb	r3, [r7, #13]
	while (CAM_SetRegister(0x12, cam_regCache, 0)) {}
 800072a:	bf00      	nop
 800072c:	7b7b      	ldrb	r3, [r7, #13]
 800072e:	2200      	movs	r2, #0
 8000730:	4619      	mov	r1, r3
 8000732:	2012      	movs	r0, #18
 8000734:	f000 fe56 	bl	80013e4 <CAM_SetRegister>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1f6      	bne.n	800072c <main+0x70>

	cam_regCache = 0b10000110;
 800073e:	2386      	movs	r3, #134	@ 0x86
 8000740:	737b      	strb	r3, [r7, #13]
	while (CAM_SetRegister(0x32, cam_regCache, 0)) {}
 8000742:	bf00      	nop
 8000744:	7b7b      	ldrb	r3, [r7, #13]
 8000746:	2200      	movs	r2, #0
 8000748:	4619      	mov	r1, r3
 800074a:	2032      	movs	r0, #50	@ 0x32
 800074c:	f000 fe4a 	bl	80013e4 <CAM_SetRegister>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d1f6      	bne.n	8000744 <main+0x88>
	//while (CAM_SetRegister(0x40, cam_regCache, 0)) {}

	// ------------------------------------------------------------ SETUP JPEG ENCODING -- //
	// Set the CONFIG
	JPEG_ConfTypeDef* jpeg_config;
	jpeg_config->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
	//jpeg_config->ColorSpace = JPEG_YCBCR_COLORSPACE;
	//jpeg_config->ChromaSubsampling = JPEG_422_SUBSAMPLING;
	jpeg_config->ImageWidth = JPEG_MCU_WIDTH*8;
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	2278      	movs	r2, #120	@ 0x78
 8000760:	60da      	str	r2, [r3, #12]
	jpeg_config->ImageHeight = JPEG_MCU_HEIGHT*8;
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	2278      	movs	r2, #120	@ 0x78
 8000766:	609a      	str	r2, [r3, #8]
	jpeg_config->ImageQuality = JPEG_QUALITY;
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	2214      	movs	r2, #20
 800076c:	611a      	str	r2, [r3, #16]
	HAL_JPEG_ConfigEncoding(&hjpeg, jpeg_config);
 800076e:	68b9      	ldr	r1, [r7, #8]
 8000770:	483b      	ldr	r0, [pc, #236]	@ (8000860 <main+0x1a4>)
 8000772:	f007 fd2f 	bl	80081d4 <HAL_JPEG_ConfigEncoding>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// Take a snapshot
		camera_state = 1;	// Flag Camera as DMA Queued
 8000776:	4b3b      	ldr	r3, [pc, #236]	@ (8000864 <main+0x1a8>)
 8000778:	2201      	movs	r2, #1
 800077a:	701a      	strb	r2, [r3, #0]
		HAL_StatusTypeDef ovStat = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, camera_mem, CAM_GRAYSIZE / 4);
 800077c:	4a3a      	ldr	r2, [pc, #232]	@ (8000868 <main+0x1ac>)
 800077e:	f241 23ab 	movw	r3, #4779	@ 0x12ab
 8000782:	2102      	movs	r1, #2
 8000784:	4839      	ldr	r0, [pc, #228]	@ (800086c <main+0x1b0>)
 8000786:	f002 f8a1 	bl	80028cc <HAL_DCMI_Start_DMA>
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
		if (ovStat) {
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d011      	beq.n	80007b8 <main+0xfc>
			//while (1) {
			sprintf(usb_msg, "DCMI/DMA ERROR - Code 0x%X\r\n", ovStat);
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	461a      	mov	r2, r3
 8000798:	4935      	ldr	r1, [pc, #212]	@ (8000870 <main+0x1b4>)
 800079a:	4836      	ldr	r0, [pc, #216]	@ (8000874 <main+0x1b8>)
 800079c:	f014 ff1c 	bl	80155d8 <siprintf>
			CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80007a0:	4834      	ldr	r0, [pc, #208]	@ (8000874 <main+0x1b8>)
 80007a2:	f7ff fd9d 	bl	80002e0 <strlen>
 80007a6:	4603      	mov	r3, r0
 80007a8:	4619      	mov	r1, r3
 80007aa:	4832      	ldr	r0, [pc, #200]	@ (8000874 <main+0x1b8>)
 80007ac:	f014 fa94 	bl	8014cd8 <CDC_Transmit_FS>
			HAL_Delay(1000);
 80007b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007b4:	f001 fe58 	bl	8002468 <HAL_Delay>
			//}
		}

		// Wait until the camera is idle again
		while (camera_state) { }
 80007b8:	bf00      	nop
 80007ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000864 <main+0x1a8>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1fa      	bne.n	80007ba <main+0xfe>

		// Start the JPEG Encode
		jpeg_ready = 0;
 80007c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000878 <main+0x1bc>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
		jpeg_block = 0;
 80007ca:	4b2c      	ldr	r3, [pc, #176]	@ (800087c <main+0x1c0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
		jpeg_size = 0;
 80007d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000880 <main+0x1c4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]

		GenerateJPEGMCUBlock();
 80007d6:	f000 feab 	bl	8001530 <GenerateJPEGMCUBlock>
		HAL_JPEG_Encode_DMA(&hjpeg, jpeg_mcu, 64, jpeg_out, JPEG_OUTBUF_SIZE);
 80007da:	2340      	movs	r3, #64	@ 0x40
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	4b29      	ldr	r3, [pc, #164]	@ (8000884 <main+0x1c8>)
 80007e0:	2240      	movs	r2, #64	@ 0x40
 80007e2:	4929      	ldr	r1, [pc, #164]	@ (8000888 <main+0x1cc>)
 80007e4:	481e      	ldr	r0, [pc, #120]	@ (8000860 <main+0x1a4>)
 80007e6:	f007 ff2d 	bl	8008644 <HAL_JPEG_Encode_DMA>

		// Wait until the JPEG is done frying
		while (!jpeg_ready) { }
 80007ea:	bf00      	nop
 80007ec:	4b22      	ldr	r3, [pc, #136]	@ (8000878 <main+0x1bc>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d0fa      	beq.n	80007ec <main+0x130>

//		sprintf(usb_msg, "Begin Transmission\r\n");
//		CDC_Transmit_FS(usb_msg, strlen(usb_msg));

		// Transmit the camera data
		for (uint16_t i = 0; i < ((jpeg_size - JPEG_HEADERSIZE) / UART_TXSIZE) + 1; i++) {
 80007f6:	2300      	movs	r3, #0
 80007f8:	81fb      	strh	r3, [r7, #14]
 80007fa:	e024      	b.n	8000846 <main+0x18a>
			uart_txRaw_buffer[0] = 0b10101010;
 80007fc:	4b23      	ldr	r3, [pc, #140]	@ (800088c <main+0x1d0>)
 80007fe:	22aa      	movs	r2, #170	@ 0xaa
 8000800:	701a      	strb	r2, [r3, #0]
			uart_txRaw_buffer[1] = i >> 8;	// Store MSB of idx in header
 8000802:	89fb      	ldrh	r3, [r7, #14]
 8000804:	0a1b      	lsrs	r3, r3, #8
 8000806:	b29b      	uxth	r3, r3
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b20      	ldr	r3, [pc, #128]	@ (800088c <main+0x1d0>)
 800080c:	705a      	strb	r2, [r3, #1]
			uart_txRaw_buffer[2] = i & 0x00FF;	// Store LSB of idx in header
 800080e:	89fb      	ldrh	r3, [r7, #14]
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b1e      	ldr	r3, [pc, #120]	@ (800088c <main+0x1d0>)
 8000814:	709a      	strb	r2, [r3, #2]
			memcpy(uart_tx_buffer, jpeg_out + i*UART_TXSIZE + JPEG_HEADERSIZE, UART_TXSIZE);	// Copy jpeg vram into the TX buffer data segment
 8000816:	4b1e      	ldr	r3, [pc, #120]	@ (8000890 <main+0x1d4>)
 8000818:	6818      	ldr	r0, [r3, #0]
 800081a:	89fb      	ldrh	r3, [r7, #14]
 800081c:	019b      	lsls	r3, r3, #6
 800081e:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 8000822:	4a18      	ldr	r2, [pc, #96]	@ (8000884 <main+0x1c8>)
 8000824:	4413      	add	r3, r2
 8000826:	2240      	movs	r2, #64	@ 0x40
 8000828:	4619      	mov	r1, r3
 800082a:	f014 ff2b 	bl	8015684 <memcpy>
			HAL_UART_Transmit(&huart1, uart_txRaw_buffer, UART_TXSIZE + 3, 20);	// Transmit the buffer
 800082e:	2314      	movs	r3, #20
 8000830:	2243      	movs	r2, #67	@ 0x43
 8000832:	4916      	ldr	r1, [pc, #88]	@ (800088c <main+0x1d0>)
 8000834:	4817      	ldr	r0, [pc, #92]	@ (8000894 <main+0x1d8>)
 8000836:	f00f fd05 	bl	8010244 <HAL_UART_Transmit>
			// Debug
//			if (i % 10 == 0) {
//				sprintf(usb_msg, "0x%X\r\n", i);
//				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
//			}
			HAL_Delay(5);
 800083a:	2005      	movs	r0, #5
 800083c:	f001 fe14 	bl	8002468 <HAL_Delay>
		for (uint16_t i = 0; i < ((jpeg_size - JPEG_HEADERSIZE) / UART_TXSIZE) + 1; i++) {
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	3301      	adds	r3, #1
 8000844:	81fb      	strh	r3, [r7, #14]
 8000846:	89fa      	ldrh	r2, [r7, #14]
 8000848:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <main+0x1c4>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 8000850:	099b      	lsrs	r3, r3, #6
 8000852:	3301      	adds	r3, #1
 8000854:	429a      	cmp	r2, r3
 8000856:	d3d1      	bcc.n	80007fc <main+0x140>
	{
 8000858:	e78d      	b.n	8000776 <main+0xba>
 800085a:	bf00      	nop
 800085c:	2400057c 	.word	0x2400057c
 8000860:	24000294 	.word	0x24000294
 8000864:	24005172 	.word	0x24005172
 8000868:	240006c4 	.word	0x240006c4
 800086c:	24000178 	.word	0x24000178
 8000870:	08015f30 	.word	0x08015f30
 8000874:	2400065c 	.word	0x2400065c
 8000878:	24000000 	.word	0x24000000
 800087c:	240051b4 	.word	0x240051b4
 8000880:	24009c68 	.word	0x24009c68
 8000884:	240051b8 	.word	0x240051b8
 8000888:	24005174 	.word	0x24005174
 800088c:	24009c6c 	.word	0x24009c6c
 8000890:	24000004 	.word	0x24000004
 8000894:	240005c8 	.word	0x240005c8

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b09c      	sub	sp, #112	@ 0x70
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a2:	224c      	movs	r2, #76	@ 0x4c
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f014 feb8 	bl	801561c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2220      	movs	r2, #32
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f014 feb2 	bl	801561c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008b8:	2002      	movs	r0, #2
 80008ba:	f00b fc07 	bl	800c0cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4b30      	ldr	r3, [pc, #192]	@ (8000984 <SystemClock_Config+0xec>)
 80008c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008c6:	4a2f      	ldr	r2, [pc, #188]	@ (8000984 <SystemClock_Config+0xec>)
 80008c8:	f023 0301 	bic.w	r3, r3, #1
 80008cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000984 <SystemClock_Config+0xec>)
 80008d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000988 <SystemClock_Config+0xf0>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a2a      	ldr	r2, [pc, #168]	@ (8000988 <SystemClock_Config+0xf0>)
 80008de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b28      	ldr	r3, [pc, #160]	@ (8000988 <SystemClock_Config+0xf0>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008f0:	bf00      	nop
 80008f2:	4b25      	ldr	r3, [pc, #148]	@ (8000988 <SystemClock_Config+0xf0>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008fe:	d1f8      	bne.n	80008f2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000900:	2301      	movs	r3, #1
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000904:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090a:	2302      	movs	r3, #2
 800090c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090e:	2302      	movs	r3, #2
 8000910:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000912:	2302      	movs	r3, #2
 8000914:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000916:	2318      	movs	r3, #24
 8000918:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800091a:	2302      	movs	r3, #2
 800091c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800091e:	2306      	movs	r3, #6
 8000920:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000922:	2302      	movs	r3, #2
 8000924:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000926:	230c      	movs	r3, #12
 8000928:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800092a:	2300      	movs	r3, #0
 800092c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000936:	4618      	mov	r0, r3
 8000938:	f00b fc12 	bl	800c160 <HAL_RCC_OscConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000942:	f000 fe83 	bl	800164c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000946:	233f      	movs	r3, #63	@ 0x3f
 8000948:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094a:	2303      	movs	r3, #3
 800094c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000956:	2340      	movs	r3, #64	@ 0x40
 8000958:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800095a:	2340      	movs	r3, #64	@ 0x40
 800095c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800095e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000962:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000964:	2340      	movs	r3, #64	@ 0x40
 8000966:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2102      	movs	r1, #2
 800096c:	4618      	mov	r0, r3
 800096e:	f00c f851 	bl	800ca14 <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000978:	f000 fe68 	bl	800164c <Error_Handler>
  }
}
 800097c:	bf00      	nop
 800097e:	3770      	adds	r7, #112	@ 0x70
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	58000400 	.word	0x58000400
 8000988:	58024800 	.word	0x58024800

0800098c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000990:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <MX_DCMI_Init+0x68>)
 8000992:	4a19      	ldr	r2, [pc, #100]	@ (80009f8 <MX_DCMI_Init+0x6c>)
 8000994:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000996:	4b17      	ldr	r3, [pc, #92]	@ (80009f4 <MX_DCMI_Init+0x68>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800099c:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <MX_DCMI_Init+0x68>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80009a2:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <MX_DCMI_Init+0x68>)
 80009a4:	2280      	movs	r2, #128	@ 0x80
 80009a6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80009a8:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <MX_DCMI_Init+0x68>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80009ae:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <MX_DCMI_Init+0x68>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <MX_DCMI_Init+0x68>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <MX_DCMI_Init+0x68>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALTERNATE_4;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <MX_DCMI_Init+0x68>)
 80009c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80009c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_EVEN;
 80009c8:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <MX_DCMI_Init+0x68>)
 80009ca:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALTERNATE_2;
 80009d0:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <MX_DCMI_Init+0x68>)
 80009d2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80009d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80009d8:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <MX_DCMI_Init+0x68>)
 80009da:	2200      	movs	r2, #0
 80009dc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <MX_DCMI_Init+0x68>)
 80009e0:	f001 fefa 	bl	80027d8 <HAL_DCMI_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_DCMI_Init+0x62>
  {
    Error_Handler();
 80009ea:	f000 fe2f 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	24000178 	.word	0x24000178
 80009f8:	48020000 	.word	0x48020000

080009fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <MX_I2C2_Init+0x74>)
 8000a02:	4a1c      	ldr	r2, [pc, #112]	@ (8000a74 <MX_I2C2_Init+0x78>)
 8000a04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <MX_I2C2_Init+0x74>)
 8000a08:	4a1b      	ldr	r2, [pc, #108]	@ (8000a78 <MX_I2C2_Init+0x7c>)
 8000a0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <MX_I2C2_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a12:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <MX_I2C2_Init+0x74>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <MX_I2C2_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <MX_I2C2_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <MX_I2C2_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <MX_I2C2_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <MX_I2C2_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a36:	480e      	ldr	r0, [pc, #56]	@ (8000a70 <MX_I2C2_Init+0x74>)
 8000a38:	f005 fe7e 	bl	8006738 <HAL_I2C_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a42:	f000 fe03 	bl	800164c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4809      	ldr	r0, [pc, #36]	@ (8000a70 <MX_I2C2_Init+0x74>)
 8000a4a:	f007 faa9 	bl	8007fa0 <HAL_I2CEx_ConfigAnalogFilter>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a54:	f000 fdfa 	bl	800164c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <MX_I2C2_Init+0x74>)
 8000a5c:	f007 faeb 	bl	8008036 <HAL_I2CEx_ConfigDigitalFilter>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a66:	f000 fdf1 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	24000240 	.word	0x24000240
 8000a74:	40005800 	.word	0x40005800
 8000a78:	00c0eaff 	.word	0x00c0eaff

08000a7c <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <MX_JPEG_Init+0x20>)
 8000a82:	4a07      	ldr	r2, [pc, #28]	@ (8000aa0 <MX_JPEG_Init+0x24>)
 8000a84:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <MX_JPEG_Init+0x20>)
 8000a88:	f007 fb22 	bl	80080d0 <HAL_JPEG_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000a92:	f000 fddb 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	24000294 	.word	0x24000294
 8000aa0:	52003000 	.word	0x52003000

08000aa4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000aa8:	4b27      	ldr	r3, [pc, #156]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000aaa:	4a28      	ldr	r2, [pc, #160]	@ (8000b4c <MX_SPI2_Init+0xa8>)
 8000aac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000aae:	4b26      	ldr	r3, [pc, #152]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000ab0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ab4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab6:	4b24      	ldr	r3, [pc, #144]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000abc:	4b22      	ldr	r3, [pc, #136]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000abe:	2203      	movs	r2, #3
 8000ac0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ace:	4b1e      	ldr	r3, [pc, #120]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000ad0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ad4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae8:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000aee:	4b16      	ldr	r3, [pc, #88]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000af4:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000af6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000afa:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b20:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <MX_SPI2_Init+0xa4>)
 8000b34:	f00e f926 	bl	800ed84 <HAL_SPI_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000b3e:	f000 fd85 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	240003c4 	.word	0x240003c4
 8000b4c:	40003800 	.word	0x40003800

08000b50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b096      	sub	sp, #88	@ 0x58
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b56:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b62:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]
 8000b72:	615a      	str	r2, [r3, #20]
 8000b74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	222c      	movs	r2, #44	@ 0x2c
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f014 fd4d 	bl	801561c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b82:	4b38      	ldr	r3, [pc, #224]	@ (8000c64 <MX_TIM1_Init+0x114>)
 8000b84:	4a38      	ldr	r2, [pc, #224]	@ (8000c68 <MX_TIM1_Init+0x118>)
 8000b86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b88:	4b36      	ldr	r3, [pc, #216]	@ (8000c64 <MX_TIM1_Init+0x114>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8e:	4b35      	ldr	r3, [pc, #212]	@ (8000c64 <MX_TIM1_Init+0x114>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000b94:	4b33      	ldr	r3, [pc, #204]	@ (8000c64 <MX_TIM1_Init+0x114>)
 8000b96:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000b9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9c:	4b31      	ldr	r3, [pc, #196]	@ (8000c64 <MX_TIM1_Init+0x114>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ba2:	4b30      	ldr	r3, [pc, #192]	@ (8000c64 <MX_TIM1_Init+0x114>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba8:	4b2e      	ldr	r3, [pc, #184]	@ (8000c64 <MX_TIM1_Init+0x114>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bae:	482d      	ldr	r0, [pc, #180]	@ (8000c64 <MX_TIM1_Init+0x114>)
 8000bb0:	f00e fa7e 	bl	800f0b0 <HAL_TIM_PWM_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000bba:	f000 fd47 	bl	800164c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4824      	ldr	r0, [pc, #144]	@ (8000c64 <MX_TIM1_Init+0x114>)
 8000bd2:	f00f f9bd 	bl	800ff50 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000bdc:	f000 fd36 	bl	800164c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be0:	2360      	movs	r3, #96	@ 0x60
 8000be2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be8:	2300      	movs	r3, #0
 8000bea:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bf8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bfc:	220c      	movs	r2, #12
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4818      	ldr	r0, [pc, #96]	@ (8000c64 <MX_TIM1_Init+0x114>)
 8000c02:	f00e fcc3 	bl	800f58c <HAL_TIM_PWM_ConfigChannel>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000c0c:	f000 fd1e 	bl	800164c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c28:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	4619      	mov	r1, r3
 8000c44:	4807      	ldr	r0, [pc, #28]	@ (8000c64 <MX_TIM1_Init+0x114>)
 8000c46:	f00f fa11 	bl	801006c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000c50:	f000 fcfc 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c54:	4803      	ldr	r0, [pc, #12]	@ (8000c64 <MX_TIM1_Init+0x114>)
 8000c56:	f001 f893 	bl	8001d80 <HAL_TIM_MspPostInit>

}
 8000c5a:	bf00      	nop
 8000c5c:	3758      	adds	r7, #88	@ 0x58
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2400044c 	.word	0x2400044c
 8000c68:	40010000 	.word	0x40010000

08000c6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	@ 0x28
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c7e:	463b      	mov	r3, r7
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
 8000c8c:	615a      	str	r2, [r3, #20]
 8000c8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c90:	4b2d      	ldr	r3, [pc, #180]	@ (8000d48 <MX_TIM2_Init+0xdc>)
 8000c92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c98:	4b2b      	ldr	r3, [pc, #172]	@ (8000d48 <MX_TIM2_Init+0xdc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d48 <MX_TIM2_Init+0xdc>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000ca4:	4b28      	ldr	r3, [pc, #160]	@ (8000d48 <MX_TIM2_Init+0xdc>)
 8000ca6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000caa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cac:	4b26      	ldr	r3, [pc, #152]	@ (8000d48 <MX_TIM2_Init+0xdc>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb2:	4b25      	ldr	r3, [pc, #148]	@ (8000d48 <MX_TIM2_Init+0xdc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cb8:	4823      	ldr	r0, [pc, #140]	@ (8000d48 <MX_TIM2_Init+0xdc>)
 8000cba:	f00e f9f9 	bl	800f0b0 <HAL_TIM_PWM_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000cc4:	f000 fcc2 	bl	800164c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	481c      	ldr	r0, [pc, #112]	@ (8000d48 <MX_TIM2_Init+0xdc>)
 8000cd8:	f00f f93a 	bl	800ff50 <HAL_TIMEx_MasterConfigSynchronization>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000ce2:	f000 fcb3 	bl	800164c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce6:	2360      	movs	r3, #96	@ 0x60
 8000ce8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4812      	ldr	r0, [pc, #72]	@ (8000d48 <MX_TIM2_Init+0xdc>)
 8000cfe:	f00e fc45 	bl	800f58c <HAL_TIM_PWM_ConfigChannel>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000d08:	f000 fca0 	bl	800164c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	2204      	movs	r2, #4
 8000d10:	4619      	mov	r1, r3
 8000d12:	480d      	ldr	r0, [pc, #52]	@ (8000d48 <MX_TIM2_Init+0xdc>)
 8000d14:	f00e fc3a 	bl	800f58c <HAL_TIM_PWM_ConfigChannel>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000d1e:	f000 fc95 	bl	800164c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d22:	463b      	mov	r3, r7
 8000d24:	2208      	movs	r2, #8
 8000d26:	4619      	mov	r1, r3
 8000d28:	4807      	ldr	r0, [pc, #28]	@ (8000d48 <MX_TIM2_Init+0xdc>)
 8000d2a:	f00e fc2f 	bl	800f58c <HAL_TIM_PWM_ConfigChannel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000d34:	f000 fc8a 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d38:	4803      	ldr	r0, [pc, #12]	@ (8000d48 <MX_TIM2_Init+0xdc>)
 8000d3a:	f001 f821 	bl	8001d80 <HAL_TIM_MspPostInit>

}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	@ 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	24000498 	.word	0x24000498

08000d4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	@ 0x28
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d5e:	463b      	mov	r3, r7
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
 8000d6c:	615a      	str	r2, [r3, #20]
 8000d6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d70:	4b27      	ldr	r3, [pc, #156]	@ (8000e10 <MX_TIM3_Init+0xc4>)
 8000d72:	4a28      	ldr	r2, [pc, #160]	@ (8000e14 <MX_TIM3_Init+0xc8>)
 8000d74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d76:	4b26      	ldr	r3, [pc, #152]	@ (8000e10 <MX_TIM3_Init+0xc4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7c:	4b24      	ldr	r3, [pc, #144]	@ (8000e10 <MX_TIM3_Init+0xc4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000d82:	4b23      	ldr	r3, [pc, #140]	@ (8000e10 <MX_TIM3_Init+0xc4>)
 8000d84:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8a:	4b21      	ldr	r3, [pc, #132]	@ (8000e10 <MX_TIM3_Init+0xc4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d90:	4b1f      	ldr	r3, [pc, #124]	@ (8000e10 <MX_TIM3_Init+0xc4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d96:	481e      	ldr	r0, [pc, #120]	@ (8000e10 <MX_TIM3_Init+0xc4>)
 8000d98:	f00e f98a 	bl	800f0b0 <HAL_TIM_PWM_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000da2:	f000 fc53 	bl	800164c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4619      	mov	r1, r3
 8000db4:	4816      	ldr	r0, [pc, #88]	@ (8000e10 <MX_TIM3_Init+0xc4>)
 8000db6:	f00f f8cb 	bl	800ff50 <HAL_TIMEx_MasterConfigSynchronization>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000dc0:	f000 fc44 	bl	800164c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc4:	2360      	movs	r3, #96	@ 0x60
 8000dc6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	2208      	movs	r2, #8
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480d      	ldr	r0, [pc, #52]	@ (8000e10 <MX_TIM3_Init+0xc4>)
 8000ddc:	f00e fbd6 	bl	800f58c <HAL_TIM_PWM_ConfigChannel>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000de6:	f000 fc31 	bl	800164c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dea:	463b      	mov	r3, r7
 8000dec:	220c      	movs	r2, #12
 8000dee:	4619      	mov	r1, r3
 8000df0:	4807      	ldr	r0, [pc, #28]	@ (8000e10 <MX_TIM3_Init+0xc4>)
 8000df2:	f00e fbcb 	bl	800f58c <HAL_TIM_PWM_ConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000dfc:	f000 fc26 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e00:	4803      	ldr	r0, [pc, #12]	@ (8000e10 <MX_TIM3_Init+0xc4>)
 8000e02:	f000 ffbd 	bl	8001d80 <HAL_TIM_MspPostInit>

}
 8000e06:	bf00      	nop
 8000e08:	3728      	adds	r7, #40	@ 0x28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	240004e4 	.word	0x240004e4
 8000e14:	40000400 	.word	0x40000400

08000e18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	@ 0x28
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
 8000e38:	615a      	str	r2, [r3, #20]
 8000e3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e3c:	4b27      	ldr	r3, [pc, #156]	@ (8000edc <MX_TIM4_Init+0xc4>)
 8000e3e:	4a28      	ldr	r2, [pc, #160]	@ (8000ee0 <MX_TIM4_Init+0xc8>)
 8000e40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e42:	4b26      	ldr	r3, [pc, #152]	@ (8000edc <MX_TIM4_Init+0xc4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e48:	4b24      	ldr	r3, [pc, #144]	@ (8000edc <MX_TIM4_Init+0xc4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000e4e:	4b23      	ldr	r3, [pc, #140]	@ (8000edc <MX_TIM4_Init+0xc4>)
 8000e50:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e54:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e56:	4b21      	ldr	r3, [pc, #132]	@ (8000edc <MX_TIM4_Init+0xc4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000edc <MX_TIM4_Init+0xc4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e62:	481e      	ldr	r0, [pc, #120]	@ (8000edc <MX_TIM4_Init+0xc4>)
 8000e64:	f00e f924 	bl	800f0b0 <HAL_TIM_PWM_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000e6e:	f000 fbed 	bl	800164c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4816      	ldr	r0, [pc, #88]	@ (8000edc <MX_TIM4_Init+0xc4>)
 8000e82:	f00f f865 	bl	800ff50 <HAL_TIMEx_MasterConfigSynchronization>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000e8c:	f000 fbde 	bl	800164c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e90:	2360      	movs	r3, #96	@ 0x60
 8000e92:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	2208      	movs	r2, #8
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480d      	ldr	r0, [pc, #52]	@ (8000edc <MX_TIM4_Init+0xc4>)
 8000ea8:	f00e fb70 	bl	800f58c <HAL_TIM_PWM_ConfigChannel>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000eb2:	f000 fbcb 	bl	800164c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	220c      	movs	r2, #12
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4807      	ldr	r0, [pc, #28]	@ (8000edc <MX_TIM4_Init+0xc4>)
 8000ebe:	f00e fb65 	bl	800f58c <HAL_TIM_PWM_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000ec8:	f000 fbc0 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ecc:	4803      	ldr	r0, [pc, #12]	@ (8000edc <MX_TIM4_Init+0xc4>)
 8000ece:	f000 ff57 	bl	8001d80 <HAL_TIM_MspPostInit>

}
 8000ed2:	bf00      	nop
 8000ed4:	3728      	adds	r7, #40	@ 0x28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	24000530 	.word	0x24000530
 8000ee0:	40000800 	.word	0x40000800

08000ee4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
 8000ef8:	615a      	str	r2, [r3, #20]
 8000efa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000efc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f74 <MX_TIM14_Init+0x90>)
 8000efe:	4a1e      	ldr	r2, [pc, #120]	@ (8000f78 <MX_TIM14_Init+0x94>)
 8000f00:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	@ (8000f74 <MX_TIM14_Init+0x90>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f08:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <MX_TIM14_Init+0x90>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5;
 8000f0e:	4b19      	ldr	r3, [pc, #100]	@ (8000f74 <MX_TIM14_Init+0x90>)
 8000f10:	2205      	movs	r2, #5
 8000f12:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f14:	4b17      	ldr	r3, [pc, #92]	@ (8000f74 <MX_TIM14_Init+0x90>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f1a:	4b16      	ldr	r3, [pc, #88]	@ (8000f74 <MX_TIM14_Init+0x90>)
 8000f1c:	2280      	movs	r2, #128	@ 0x80
 8000f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f20:	4814      	ldr	r0, [pc, #80]	@ (8000f74 <MX_TIM14_Init+0x90>)
 8000f22:	f00e f86e 	bl	800f002 <HAL_TIM_Base_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8000f2c:	f000 fb8e 	bl	800164c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000f30:	4810      	ldr	r0, [pc, #64]	@ (8000f74 <MX_TIM14_Init+0x90>)
 8000f32:	f00e f8bd 	bl	800f0b0 <HAL_TIM_PWM_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8000f3c:	f000 fb86 	bl	800164c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f40:	2360      	movs	r3, #96	@ 0x60
 8000f42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3;
 8000f44:	2303      	movs	r3, #3
 8000f46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2200      	movs	r2, #0
 8000f54:	4619      	mov	r1, r3
 8000f56:	4807      	ldr	r0, [pc, #28]	@ (8000f74 <MX_TIM14_Init+0x90>)
 8000f58:	f00e fb18 	bl	800f58c <HAL_TIM_PWM_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 8000f62:	f000 fb73 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000f66:	4803      	ldr	r0, [pc, #12]	@ (8000f74 <MX_TIM14_Init+0x90>)
 8000f68:	f000 ff0a 	bl	8001d80 <HAL_TIM_MspPostInit>

}
 8000f6c:	bf00      	nop
 8000f6e:	3720      	adds	r7, #32
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2400057c 	.word	0x2400057c
 8000f78:	40002000 	.word	0x40002000

08000f7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f80:	4b22      	ldr	r3, [pc, #136]	@ (800100c <MX_USART1_UART_Init+0x90>)
 8000f82:	4a23      	ldr	r2, [pc, #140]	@ (8001010 <MX_USART1_UART_Init+0x94>)
 8000f84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 111111;
 8000f86:	4b21      	ldr	r3, [pc, #132]	@ (800100c <MX_USART1_UART_Init+0x90>)
 8000f88:	4a22      	ldr	r2, [pc, #136]	@ (8001014 <MX_USART1_UART_Init+0x98>)
 8000f8a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <MX_USART1_UART_Init+0x90>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f92:	4b1e      	ldr	r3, [pc, #120]	@ (800100c <MX_USART1_UART_Init+0x90>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	@ (800100c <MX_USART1_UART_Init+0x90>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800100c <MX_USART1_UART_Init+0x90>)
 8000fa0:	220c      	movs	r2, #12
 8000fa2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa4:	4b19      	ldr	r3, [pc, #100]	@ (800100c <MX_USART1_UART_Init+0x90>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000faa:	4b18      	ldr	r3, [pc, #96]	@ (800100c <MX_USART1_UART_Init+0x90>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	@ (800100c <MX_USART1_UART_Init+0x90>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fb6:	4b15      	ldr	r3, [pc, #84]	@ (800100c <MX_USART1_UART_Init+0x90>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fbc:	4b13      	ldr	r3, [pc, #76]	@ (800100c <MX_USART1_UART_Init+0x90>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fc2:	4812      	ldr	r0, [pc, #72]	@ (800100c <MX_USART1_UART_Init+0x90>)
 8000fc4:	f00f f8ee 	bl	80101a4 <HAL_UART_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000fce:	f000 fb3d 	bl	800164c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	480d      	ldr	r0, [pc, #52]	@ (800100c <MX_USART1_UART_Init+0x90>)
 8000fd6:	f010 f986 	bl	80112e6 <HAL_UARTEx_SetTxFifoThreshold>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8000fe0:	f000 fb34 	bl	800164c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4809      	ldr	r0, [pc, #36]	@ (800100c <MX_USART1_UART_Init+0x90>)
 8000fe8:	f010 f9bb 	bl	8011362 <HAL_UARTEx_SetRxFifoThreshold>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000ff2:	f000 fb2b 	bl	800164c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000ff6:	4805      	ldr	r0, [pc, #20]	@ (800100c <MX_USART1_UART_Init+0x90>)
 8000ff8:	f010 f93a 	bl	8011270 <HAL_UARTEx_EnableFifoMode>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001002:	f000 fb23 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	240005c8 	.word	0x240005c8
 8001010:	40011000 	.word	0x40011000
 8001014:	0001b207 	.word	0x0001b207

08001018 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800101e:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <MX_DMA_Init+0x3c>)
 8001020:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001024:	4a0b      	ldr	r2, [pc, #44]	@ (8001054 <MX_DMA_Init+0x3c>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <MX_DMA_Init+0x3c>)
 8001030:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	2100      	movs	r1, #0
 8001040:	200b      	movs	r0, #11
 8001042:	f001 fb1c 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001046:	200b      	movs	r0, #11
 8001048:	f001 fb33 	bl	80026b2 <HAL_NVIC_EnableIRQ>

}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	58024400 	.word	0x58024400

08001058 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 800105e:	4b0d      	ldr	r3, [pc, #52]	@ (8001094 <MX_MDMA_Init+0x3c>)
 8001060:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001064:	4a0b      	ldr	r2, [pc, #44]	@ (8001094 <MX_MDMA_Init+0x3c>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800106e:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <MX_MDMA_Init+0x3c>)
 8001070:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2100      	movs	r1, #0
 8001080:	207a      	movs	r0, #122	@ 0x7a
 8001082:	f001 fafc 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001086:	207a      	movs	r0, #122	@ 0x7a
 8001088:	f001 fb13 	bl	80026b2 <HAL_NVIC_EnableIRQ>

}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	58024400 	.word	0x58024400

08001098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08c      	sub	sp, #48	@ 0x30
 800109c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ae:	4b52      	ldr	r3, [pc, #328]	@ (80011f8 <MX_GPIO_Init+0x160>)
 80010b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b4:	4a50      	ldr	r2, [pc, #320]	@ (80011f8 <MX_GPIO_Init+0x160>)
 80010b6:	f043 0310 	orr.w	r3, r3, #16
 80010ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010be:	4b4e      	ldr	r3, [pc, #312]	@ (80011f8 <MX_GPIO_Init+0x160>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c4:	f003 0310 	and.w	r3, r3, #16
 80010c8:	61bb      	str	r3, [r7, #24]
 80010ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010cc:	4b4a      	ldr	r3, [pc, #296]	@ (80011f8 <MX_GPIO_Init+0x160>)
 80010ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d2:	4a49      	ldr	r2, [pc, #292]	@ (80011f8 <MX_GPIO_Init+0x160>)
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010dc:	4b46      	ldr	r3, [pc, #280]	@ (80011f8 <MX_GPIO_Init+0x160>)
 80010de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ea:	4b43      	ldr	r3, [pc, #268]	@ (80011f8 <MX_GPIO_Init+0x160>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f0:	4a41      	ldr	r2, [pc, #260]	@ (80011f8 <MX_GPIO_Init+0x160>)
 80010f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010fa:	4b3f      	ldr	r3, [pc, #252]	@ (80011f8 <MX_GPIO_Init+0x160>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001108:	4b3b      	ldr	r3, [pc, #236]	@ (80011f8 <MX_GPIO_Init+0x160>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110e:	4a3a      	ldr	r2, [pc, #232]	@ (80011f8 <MX_GPIO_Init+0x160>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001118:	4b37      	ldr	r3, [pc, #220]	@ (80011f8 <MX_GPIO_Init+0x160>)
 800111a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	4b34      	ldr	r3, [pc, #208]	@ (80011f8 <MX_GPIO_Init+0x160>)
 8001128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800112c:	4a32      	ldr	r2, [pc, #200]	@ (80011f8 <MX_GPIO_Init+0x160>)
 800112e:	f043 0302 	orr.w	r3, r3, #2
 8001132:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001136:	4b30      	ldr	r3, [pc, #192]	@ (80011f8 <MX_GPIO_Init+0x160>)
 8001138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001144:	4b2c      	ldr	r3, [pc, #176]	@ (80011f8 <MX_GPIO_Init+0x160>)
 8001146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800114a:	4a2b      	ldr	r2, [pc, #172]	@ (80011f8 <MX_GPIO_Init+0x160>)
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001154:	4b28      	ldr	r3, [pc, #160]	@ (80011f8 <MX_GPIO_Init+0x160>)
 8001156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001168:	4824      	ldr	r0, [pc, #144]	@ (80011fc <MX_GPIO_Init+0x164>)
 800116a:	f005 facb 	bl	8006704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800116e:	2201      	movs	r2, #1
 8001170:	2108      	movs	r1, #8
 8001172:	4823      	ldr	r0, [pc, #140]	@ (8001200 <MX_GPIO_Init+0x168>)
 8001174:	f005 fac6 	bl	8006704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	2101      	movs	r1, #1
 800117c:	4821      	ldr	r0, [pc, #132]	@ (8001204 <MX_GPIO_Init+0x16c>)
 800117e:	f005 fac1 	bl	8006704 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001182:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	4818      	ldr	r0, [pc, #96]	@ (80011fc <MX_GPIO_Init+0x164>)
 800119c:	f005 f902 	bl	80063a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011a0:	2301      	movs	r3, #1
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4619      	mov	r1, r3
 80011b2:	4812      	ldr	r0, [pc, #72]	@ (80011fc <MX_GPIO_Init+0x164>)
 80011b4:	f005 f8f6 	bl	80063a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011b8:	2308      	movs	r3, #8
 80011ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	2301      	movs	r3, #1
 80011be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	480c      	ldr	r0, [pc, #48]	@ (8001200 <MX_GPIO_Init+0x168>)
 80011d0:	f005 f8e8 	bl	80063a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011d4:	2301      	movs	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	@ (8001204 <MX_GPIO_Init+0x16c>)
 80011ec:	f005 f8da 	bl	80063a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011f0:	bf00      	nop
 80011f2:	3730      	adds	r7, #48	@ 0x30
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	58024400 	.word	0x58024400
 80011fc:	58020800 	.word	0x58020800
 8001200:	58020000 	.word	0x58020000
 8001204:	58020c00 	.word	0x58020c00

08001208 <HAL_DCMI_VsyncEventCallback>:

/* USER CODE BEGIN 4 */

// ------------------------------------------------------------ OVERRIDE CALLBACKS -- //
// Frame captured event, called when the DMA buffer is full of new frame data
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	if (!camera_state) return;	// Do nothing if the camera is IDLE
 8001210:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <HAL_DCMI_VsyncEventCallback+0x44>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d014      	beq.n	8001244 <HAL_DCMI_VsyncEventCallback+0x3c>

	if (camera_state == 1) {	// Transition flag to CAPTURING
 800121a:	4b0c      	ldr	r3, [pc, #48]	@ (800124c <HAL_DCMI_VsyncEventCallback+0x44>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b01      	cmp	r3, #1
 8001222:	d103      	bne.n	800122c <HAL_DCMI_VsyncEventCallback+0x24>
		camera_state = 2;
 8001224:	4b09      	ldr	r3, [pc, #36]	@ (800124c <HAL_DCMI_VsyncEventCallback+0x44>)
 8001226:	2202      	movs	r2, #2
 8001228:	701a      	strb	r2, [r3, #0]
		return;
 800122a:	e00c      	b.n	8001246 <HAL_DCMI_VsyncEventCallback+0x3e>
	}

	if (camera_state == 2) {	// Transition flag to IDLE
 800122c:	4b07      	ldr	r3, [pc, #28]	@ (800124c <HAL_DCMI_VsyncEventCallback+0x44>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d107      	bne.n	8001246 <HAL_DCMI_VsyncEventCallback+0x3e>
		HAL_DCMI_Stop(hdcmi);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f001 fc0a 	bl	8002a50 <HAL_DCMI_Stop>
		camera_state = 0;
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <HAL_DCMI_VsyncEventCallback+0x44>)
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
		return;
 8001242:	e000      	b.n	8001246 <HAL_DCMI_VsyncEventCallback+0x3e>
	if (!camera_state) return;	// Do nothing if the camera is IDLE
 8001244:	bf00      	nop
	}
}
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	24005172 	.word	0x24005172

08001250 <HAL_JPEG_GetDataCallback>:

// JPEG hardware is requesting the next MCU block
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
	//		sprintf(usb_msg, "JPEG: Block: %d\r\n", jpeg_block);
	//		CDC_Transmit_FS(usb_msg, strlen(usb_msg));
	//	}

	// Restock the input buffer with new MCU
	if (GenerateJPEGMCUBlock()) {
 800125a:	f000 f969 	bl	8001530 <GenerateJPEGMCUBlock>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <HAL_JPEG_GetDataCallback+0x22>
		// ERROR while generating MCU, probable memory leak - recover JPEG peripheral by restarting
		// Reset JPEG variables
		jpeg_ready = 1;
 8001264:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <HAL_JPEG_GetDataCallback+0x34>)
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
		jpeg_block = 0;
 800126a:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <HAL_JPEG_GetDataCallback+0x38>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
	}
	else {
		// Configure the buffer to be the same as before, it's contents have changed
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
	}
}
 8001270:	e004      	b.n	800127c <HAL_JPEG_GetDataCallback+0x2c>
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
 8001272:	2240      	movs	r2, #64	@ 0x40
 8001274:	4905      	ldr	r1, [pc, #20]	@ (800128c <HAL_JPEG_GetDataCallback+0x3c>)
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f007 faac 	bl	80087d4 <HAL_JPEG_ConfigInputBuffer>
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	24000000 	.word	0x24000000
 8001288:	240051b4 	.word	0x240051b4
 800128c:	24005174 	.word	0x24005174

08001290 <HAL_JPEG_DataReadyCallback>:

// JPEG hardware is requesting a larger output buffer.
// This is done to manage JPEG output size, give it a buffer only as large as required
void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
	// Setup new output buffer location (part of contiguous super-buffer)
	jpeg_size += JPEG_OUTBUF_SIZE;
 800129c:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <HAL_JPEG_DataReadyCallback+0x30>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3340      	adds	r3, #64	@ 0x40
 80012a2:	4a07      	ldr	r2, [pc, #28]	@ (80012c0 <HAL_JPEG_DataReadyCallback+0x30>)
 80012a4:	6013      	str	r3, [r2, #0]
	HAL_JPEG_ConfigOutputBuffer(hjpeg, jpeg_out + jpeg_size, JPEG_OUTBUF_SIZE);
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_JPEG_DataReadyCallback+0x30>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a06      	ldr	r2, [pc, #24]	@ (80012c4 <HAL_JPEG_DataReadyCallback+0x34>)
 80012ac:	4413      	add	r3, r2
 80012ae:	2240      	movs	r2, #64	@ 0x40
 80012b0:	4619      	mov	r1, r3
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f007 faa0 	bl	80087f8 <HAL_JPEG_ConfigOutputBuffer>
	// Debug MSG
	//	sprintf(usb_msg, "JPEG: DataReady - output: %d\r\n", jpeg_size);
	//	CDC_Transmit_FS(usb_msg, strlen(usb_msg));
}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	24009c68 	.word	0x24009c68
 80012c4:	240051b8 	.word	0x240051b8

080012c8 <HAL_JPEG_EncodeCpltCallback>:

// JPEG hardware has completed the current image
void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg) {
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	// Reset JPEG variables
	jpeg_ready = 1;
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <HAL_JPEG_EncodeCpltCallback+0x20>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	701a      	strb	r2, [r3, #0]
	jpeg_block = 0;
 80012d6:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <HAL_JPEG_EncodeCpltCallback+0x24>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
	// Debug MSG
	//	sprintf(usb_msg, "JPEG: Finished encode\r\n");
	//	CDC_Transmit_FS(usb_msg, strlen(usb_msg));
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	24000000 	.word	0x24000000
 80012ec:	240051b4 	.word	0x240051b4

080012f0 <CAM_GetRegister>:
// Transmit wrapper, this is for continuity across Controller project which debugs by printing to OLEDs
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
	CDC_Transmit_FS(str_ptr, str_len);
}

HAL_StatusTypeDef CAM_GetRegister(uint8_t addr, uint8_t* pData, uint8_t haltOnError) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b09e      	sub	sp, #120	@ 0x78
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
 80012fc:	4613      	mov	r3, r2
 80012fe:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ov_result;
	uint8_t usb_msg[100] = {0};
 8001300:	f107 0308 	add.w	r3, r7, #8
 8001304:	2264      	movs	r2, #100	@ 0x64
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f014 f987 	bl	801561c <memset>

	ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_READ, &addr, 1, 100);
 800130e:	1dfa      	adds	r2, r7, #7
 8001310:	2364      	movs	r3, #100	@ 0x64
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	2143      	movs	r1, #67	@ 0x43
 8001318:	482f      	ldr	r0, [pc, #188]	@ (80013d8 <CAM_GetRegister+0xe8>)
 800131a:	f005 faa9 	bl	8006870 <HAL_I2C_Master_Transmit>
 800131e:	4603      	mov	r3, r0
 8001320:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (ov_result) {
 8001324:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001328:	2b00      	cmp	r3, #0
 800132a:	d020      	beq.n	800136e <CAM_GetRegister+0x7e>
		if (haltOnError) {
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d01a      	beq.n	8001368 <CAM_GetRegister+0x78>
			sprintf(usb_msg, "TX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	461a      	mov	r2, r3
 8001336:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800133a:	f107 0008 	add.w	r0, r7, #8
 800133e:	4927      	ldr	r1, [pc, #156]	@ (80013dc <CAM_GetRegister+0xec>)
 8001340:	f014 f94a 	bl	80155d8 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	4618      	mov	r0, r3
 800134a:	f7fe ffc9 	bl	80002e0 <strlen>
 800134e:	4602      	mov	r2, r0
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f013 fcbe 	bl	8014cd8 <CDC_Transmit_FS>
				HAL_Delay(1000);
 800135c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001360:	f001 f882 	bl	8002468 <HAL_Delay>
			while (1) {
 8001364:	bf00      	nop
 8001366:	e7ed      	b.n	8001344 <CAM_GetRegister+0x54>
			}
		}
		return ov_result;
 8001368:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800136c:	e030      	b.n	80013d0 <CAM_GetRegister+0xe0>
	}


	ov_result = HAL_I2C_Master_Receive(&hi2c2, OV7670_ADDR_READ, pData, 1, 100);
 800136e:	2364      	movs	r3, #100	@ 0x64
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2301      	movs	r3, #1
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	2143      	movs	r1, #67	@ 0x43
 8001378:	4817      	ldr	r0, [pc, #92]	@ (80013d8 <CAM_GetRegister+0xe8>)
 800137a:	f005 fb91 	bl	8006aa0 <HAL_I2C_Master_Receive>
 800137e:	4603      	mov	r3, r0
 8001380:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (ov_result) {
 8001384:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001388:	2b00      	cmp	r3, #0
 800138a:	d020      	beq.n	80013ce <CAM_GetRegister+0xde>
		if (haltOnError) {
 800138c:	79bb      	ldrb	r3, [r7, #6]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d01a      	beq.n	80013c8 <CAM_GetRegister+0xd8>
			sprintf(usb_msg, "RX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	461a      	mov	r2, r3
 8001396:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800139a:	f107 0008 	add.w	r0, r7, #8
 800139e:	4910      	ldr	r1, [pc, #64]	@ (80013e0 <CAM_GetRegister+0xf0>)
 80013a0:	f014 f91a 	bl	80155d8 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7fe ff99 	bl	80002e0 <strlen>
 80013ae:	4602      	mov	r2, r0
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	4611      	mov	r1, r2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f013 fc8e 	bl	8014cd8 <CDC_Transmit_FS>
				HAL_Delay(1000);
 80013bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013c0:	f001 f852 	bl	8002468 <HAL_Delay>
			while (1) {
 80013c4:	bf00      	nop
 80013c6:	e7ed      	b.n	80013a4 <CAM_GetRegister+0xb4>
			}
		}
		return ov_result;
 80013c8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80013cc:	e000      	b.n	80013d0 <CAM_GetRegister+0xe0>
	}


	return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3770      	adds	r7, #112	@ 0x70
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	24000240 	.word	0x24000240
 80013dc:	08015f50 	.word	0x08015f50
 80013e0:	08015f8c 	.word	0x08015f8c

080013e4 <CAM_SetRegister>:

HAL_StatusTypeDef CAM_SetRegister(uint8_t addr, uint8_t data, uint8_t haltOnError) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0a0      	sub	sp, #128	@ 0x80
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
 80013ee:	460b      	mov	r3, r1
 80013f0:	71bb      	strb	r3, [r7, #6]
 80013f2:	4613      	mov	r3, r2
 80013f4:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef ov_result;
	uint8_t usb_msg[100] = {0};
 80013f6:	f107 0310 	add.w	r3, r7, #16
 80013fa:	2264      	movs	r2, #100	@ 0x64
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f014 f90c 	bl	801561c <memset>

	uint8_t reg_set[2] = {addr, data};
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	733b      	strb	r3, [r7, #12]
 8001408:	79bb      	ldrb	r3, [r7, #6]
 800140a:	737b      	strb	r3, [r7, #13]

	ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_WRITE, reg_set, 2, 100);
 800140c:	f107 020c 	add.w	r2, r7, #12
 8001410:	2364      	movs	r3, #100	@ 0x64
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2302      	movs	r3, #2
 8001416:	2142      	movs	r1, #66	@ 0x42
 8001418:	4841      	ldr	r0, [pc, #260]	@ (8001520 <CAM_SetRegister+0x13c>)
 800141a:	f005 fa29 	bl	8006870 <HAL_I2C_Master_Transmit>
 800141e:	4603      	mov	r3, r0
 8001420:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (ov_result) {
 8001424:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001428:	2b00      	cmp	r3, #0
 800142a:	d01f      	beq.n	800146c <CAM_SetRegister+0x88>
		if (haltOnError) {
 800142c:	797b      	ldrb	r3, [r7, #5]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d019      	beq.n	8001466 <CAM_SetRegister+0x82>
			sprintf(usb_msg, "TX ERROR: Cannot write camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8001432:	79fa      	ldrb	r2, [r7, #7]
 8001434:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001438:	f107 0010 	add.w	r0, r7, #16
 800143c:	4939      	ldr	r1, [pc, #228]	@ (8001524 <CAM_SetRegister+0x140>)
 800143e:	f014 f8cb 	bl	80155d8 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	4618      	mov	r0, r3
 8001448:	f7fe ff4a 	bl	80002e0 <strlen>
 800144c:	4602      	mov	r2, r0
 800144e:	f107 0310 	add.w	r3, r7, #16
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f013 fc3f 	bl	8014cd8 <CDC_Transmit_FS>
				HAL_Delay(1000);
 800145a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800145e:	f001 f803 	bl	8002468 <HAL_Delay>
			while (1) {
 8001462:	bf00      	nop
 8001464:	e7ed      	b.n	8001442 <CAM_SetRegister+0x5e>
			}
		}
		return ov_result;
 8001466:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800146a:	e054      	b.n	8001516 <CAM_SetRegister+0x132>
	}

	// Confirm write
	uint8_t reg_get = 0x00;
 800146c:	2300      	movs	r3, #0
 800146e:	72fb      	strb	r3, [r7, #11]
	ov_result = CAM_GetRegister(addr, &reg_get, 1);
 8001470:	f107 010b 	add.w	r1, r7, #11
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	2201      	movs	r2, #1
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff39 	bl	80012f0 <CAM_GetRegister>
 800147e:	4603      	mov	r3, r0
 8001480:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (ov_result) {
 8001484:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001488:	2b00      	cmp	r3, #0
 800148a:	d01f      	beq.n	80014cc <CAM_SetRegister+0xe8>
		if (haltOnError) {
 800148c:	797b      	ldrb	r3, [r7, #5]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d019      	beq.n	80014c6 <CAM_SetRegister+0xe2>
			sprintf(usb_msg, "CF ERROR: Cannot confirm camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8001492:	79fa      	ldrb	r2, [r7, #7]
 8001494:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001498:	f107 0010 	add.w	r0, r7, #16
 800149c:	4922      	ldr	r1, [pc, #136]	@ (8001528 <CAM_SetRegister+0x144>)
 800149e:	f014 f89b 	bl	80155d8 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7fe ff1a 	bl	80002e0 <strlen>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f013 fc0f 	bl	8014cd8 <CDC_Transmit_FS>
				HAL_Delay(1000);
 80014ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014be:	f000 ffd3 	bl	8002468 <HAL_Delay>
			while (1) {
 80014c2:	bf00      	nop
 80014c4:	e7ed      	b.n	80014a2 <CAM_SetRegister+0xbe>
			}
		}
		else {
			return ov_result;
 80014c6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80014ca:	e024      	b.n	8001516 <CAM_SetRegister+0x132>
		}
	}

	if (reg_get != data) {
 80014cc:	7afb      	ldrb	r3, [r7, #11]
 80014ce:	79ba      	ldrb	r2, [r7, #6]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d01f      	beq.n	8001514 <CAM_SetRegister+0x130>
		// Error, bad write
		if (haltOnError) {
 80014d4:	797b      	ldrb	r3, [r7, #5]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d01a      	beq.n	8001510 <CAM_SetRegister+0x12c>
			sprintf(usb_msg, "CF ERROR: Bad write to register 0x%X - EXPECTED 0x%X, GOT 0x%X\r\n", addr, data, reg_get);
 80014da:	79fa      	ldrb	r2, [r7, #7]
 80014dc:	79bb      	ldrb	r3, [r7, #6]
 80014de:	7af9      	ldrb	r1, [r7, #11]
 80014e0:	f107 0010 	add.w	r0, r7, #16
 80014e4:	9100      	str	r1, [sp, #0]
 80014e6:	4911      	ldr	r1, [pc, #68]	@ (800152c <CAM_SetRegister+0x148>)
 80014e8:	f014 f876 	bl	80155d8 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80014ec:	f107 0310 	add.w	r3, r7, #16
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7fe fef5 	bl	80002e0 <strlen>
 80014f6:	4602      	mov	r2, r0
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f013 fbea 	bl	8014cd8 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8001504:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001508:	f000 ffae 	bl	8002468 <HAL_Delay>
			while (1) {
 800150c:	bf00      	nop
 800150e:	e7ed      	b.n	80014ec <CAM_SetRegister+0x108>
			}
		}
		return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e000      	b.n	8001516 <CAM_SetRegister+0x132>
	}

	return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3778      	adds	r7, #120	@ 0x78
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	24000240 	.word	0x24000240
 8001524:	08015fc8 	.word	0x08015fc8
 8001528:	08016004 	.word	0x08016004
 800152c:	08016040 	.word	0x08016040

08001530 <GenerateJPEGMCUBlock>:

// GENERATE JPEG MCU BLOCK
uint8_t GenerateJPEGMCUBlock() {
 8001530:	b480      	push	{r7}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
	if (jpeg_block >= JPEG_MCU_WIDTH*JPEG_MCU_HEIGHT) { return 1; }
 8001536:	4b2b      	ldr	r3, [pc, #172]	@ (80015e4 <GenerateJPEGMCUBlock+0xb4>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2be0      	cmp	r3, #224	@ 0xe0
 800153c:	d901      	bls.n	8001542 <GenerateJPEGMCUBlock+0x12>
 800153e:	2301      	movs	r3, #1
 8001540:	e04a      	b.n	80015d8 <GenerateJPEGMCUBlock+0xa8>
	int xStart = (jpeg_block % JPEG_MCU_WIDTH) * 8;
 8001542:	4b28      	ldr	r3, [pc, #160]	@ (80015e4 <GenerateJPEGMCUBlock+0xb4>)
 8001544:	6819      	ldr	r1, [r3, #0]
 8001546:	4b28      	ldr	r3, [pc, #160]	@ (80015e8 <GenerateJPEGMCUBlock+0xb8>)
 8001548:	fba3 2301 	umull	r2, r3, r3, r1
 800154c:	08da      	lsrs	r2, r3, #3
 800154e:	4613      	mov	r3, r2
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	1a9b      	subs	r3, r3, r2
 8001554:	1aca      	subs	r2, r1, r3
 8001556:	00d3      	lsls	r3, r2, #3
 8001558:	60bb      	str	r3, [r7, #8]
	int yStart = (jpeg_block / JPEG_MCU_WIDTH) * 8;
 800155a:	4b22      	ldr	r3, [pc, #136]	@ (80015e4 <GenerateJPEGMCUBlock+0xb4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a22      	ldr	r2, [pc, #136]	@ (80015e8 <GenerateJPEGMCUBlock+0xb8>)
 8001560:	fba2 2303 	umull	r2, r3, r2, r3
 8001564:	08db      	lsrs	r3, r3, #3
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	607b      	str	r3, [r7, #4]
	int i = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
	for (int y = yStart; y < yStart + 8; y++) {
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	e026      	b.n	80015c2 <GenerateJPEGMCUBlock+0x92>
		for (int x = xStart; x < xStart + 8; x++) {
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	e01b      	b.n	80015b2 <GenerateJPEGMCUBlock+0x82>
			// Pad to 8x8
			if (x >= CAM_WIDTH) {
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2b9d      	cmp	r3, #157	@ 0x9d
 800157e:	dd05      	ble.n	800158c <GenerateJPEGMCUBlock+0x5c>
				jpeg_mcu[i] = 0x00;
 8001580:	4a1a      	ldr	r2, [pc, #104]	@ (80015ec <GenerateJPEGMCUBlock+0xbc>)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	4413      	add	r3, r2
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	e00c      	b.n	80015a6 <GenerateJPEGMCUBlock+0x76>
			} else {
				jpeg_mcu[i] = camera_mem[x + y * CAM_WIDTH];
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	229e      	movs	r2, #158	@ 0x9e
 8001590:	fb03 f202 	mul.w	r2, r3, r2
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	4a15      	ldr	r2, [pc, #84]	@ (80015f0 <GenerateJPEGMCUBlock+0xc0>)
 800159a:	5cd1      	ldrb	r1, [r2, r3]
 800159c:	4a13      	ldr	r2, [pc, #76]	@ (80015ec <GenerateJPEGMCUBlock+0xbc>)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	4413      	add	r3, r2
 80015a2:	460a      	mov	r2, r1
 80015a4:	701a      	strb	r2, [r3, #0]
			}
			i++;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3301      	adds	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
		for (int x = xStart; x < xStart + 8; x++) {
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3301      	adds	r3, #1
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	3307      	adds	r3, #7
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	ddde      	ble.n	800157a <GenerateJPEGMCUBlock+0x4a>
	for (int y = yStart; y < yStart + 8; y++) {
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	3301      	adds	r3, #1
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3307      	adds	r3, #7
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	ddd3      	ble.n	8001574 <GenerateJPEGMCUBlock+0x44>
		}
	}
	jpeg_block++;
 80015cc:	4b05      	ldr	r3, [pc, #20]	@ (80015e4 <GenerateJPEGMCUBlock+0xb4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	3301      	adds	r3, #1
 80015d2:	4a04      	ldr	r2, [pc, #16]	@ (80015e4 <GenerateJPEGMCUBlock+0xb4>)
 80015d4:	6013      	str	r3, [r2, #0]
	return 0;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	240051b4 	.word	0x240051b4
 80015e8:	88888889 	.word	0x88888889
 80015ec:	24005174 	.word	0x24005174
 80015f0:	240006c4 	.word	0x240006c4

080015f4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80015fa:	463b      	mov	r3, r7
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001606:	f001 f86f 	bl	80026e8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800160a:	2301      	movs	r3, #1
 800160c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800160e:	2300      	movs	r3, #0
 8001610:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001616:	231f      	movs	r3, #31
 8001618:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800161a:	2387      	movs	r3, #135	@ 0x87
 800161c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800161e:	2300      	movs	r3, #0
 8001620:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001622:	2300      	movs	r3, #0
 8001624:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001626:	2301      	movs	r3, #1
 8001628:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800162a:	2301      	movs	r3, #1
 800162c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001636:	463b      	mov	r3, r7
 8001638:	4618      	mov	r0, r3
 800163a:	f001 f88d 	bl	8002758 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800163e:	2004      	movs	r0, #4
 8001640:	f001 f86a 	bl	8002718 <HAL_MPU_Enable>

}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001650:	b672      	cpsid	i
}
 8001652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <Error_Handler+0x8>

08001658 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165e:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <HAL_MspInit+0x30>)
 8001660:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001664:	4a08      	ldr	r2, [pc, #32]	@ (8001688 <HAL_MspInit+0x30>)
 8001666:	f043 0302 	orr.w	r3, r3, #2
 800166a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800166e:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <HAL_MspInit+0x30>)
 8001670:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	58024400 	.word	0x58024400

0800168c <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08e      	sub	sp, #56	@ 0x38
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a79      	ldr	r2, [pc, #484]	@ (8001890 <HAL_DCMI_MspInit+0x204>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	f040 80ec 	bne.w	8001888 <HAL_DCMI_MspInit+0x1fc>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80016b0:	4b78      	ldr	r3, [pc, #480]	@ (8001894 <HAL_DCMI_MspInit+0x208>)
 80016b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80016b6:	4a77      	ldr	r2, [pc, #476]	@ (8001894 <HAL_DCMI_MspInit+0x208>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80016c0:	4b74      	ldr	r3, [pc, #464]	@ (8001894 <HAL_DCMI_MspInit+0x208>)
 80016c2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	623b      	str	r3, [r7, #32]
 80016cc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ce:	4b71      	ldr	r3, [pc, #452]	@ (8001894 <HAL_DCMI_MspInit+0x208>)
 80016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d4:	4a6f      	ldr	r2, [pc, #444]	@ (8001894 <HAL_DCMI_MspInit+0x208>)
 80016d6:	f043 0310 	orr.w	r3, r3, #16
 80016da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016de:	4b6d      	ldr	r3, [pc, #436]	@ (8001894 <HAL_DCMI_MspInit+0x208>)
 80016e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b69      	ldr	r3, [pc, #420]	@ (8001894 <HAL_DCMI_MspInit+0x208>)
 80016ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f2:	4a68      	ldr	r2, [pc, #416]	@ (8001894 <HAL_DCMI_MspInit+0x208>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016fc:	4b65      	ldr	r3, [pc, #404]	@ (8001894 <HAL_DCMI_MspInit+0x208>)
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	61bb      	str	r3, [r7, #24]
 8001708:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170a:	4b62      	ldr	r3, [pc, #392]	@ (8001894 <HAL_DCMI_MspInit+0x208>)
 800170c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001710:	4a60      	ldr	r2, [pc, #384]	@ (8001894 <HAL_DCMI_MspInit+0x208>)
 8001712:	f043 0304 	orr.w	r3, r3, #4
 8001716:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800171a:	4b5e      	ldr	r3, [pc, #376]	@ (8001894 <HAL_DCMI_MspInit+0x208>)
 800171c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001728:	4b5a      	ldr	r3, [pc, #360]	@ (8001894 <HAL_DCMI_MspInit+0x208>)
 800172a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800172e:	4a59      	ldr	r2, [pc, #356]	@ (8001894 <HAL_DCMI_MspInit+0x208>)
 8001730:	f043 0308 	orr.w	r3, r3, #8
 8001734:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001738:	4b56      	ldr	r3, [pc, #344]	@ (8001894 <HAL_DCMI_MspInit+0x208>)
 800173a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001746:	4b53      	ldr	r3, [pc, #332]	@ (8001894 <HAL_DCMI_MspInit+0x208>)
 8001748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800174c:	4a51      	ldr	r2, [pc, #324]	@ (8001894 <HAL_DCMI_MspInit+0x208>)
 800174e:	f043 0302 	orr.w	r3, r3, #2
 8001752:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001756:	4b4f      	ldr	r3, [pc, #316]	@ (8001894 <HAL_DCMI_MspInit+0x208>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 8001764:	2373      	movs	r3, #115	@ 0x73
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001774:	230d      	movs	r3, #13
 8001776:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001778:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800177c:	4619      	mov	r1, r3
 800177e:	4846      	ldr	r0, [pc, #280]	@ (8001898 <HAL_DCMI_MspInit+0x20c>)
 8001780:	f004 fe10 	bl	80063a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001784:	2350      	movs	r3, #80	@ 0x50
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001794:	230d      	movs	r3, #13
 8001796:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800179c:	4619      	mov	r1, r3
 800179e:	483f      	ldr	r0, [pc, #252]	@ (800189c <HAL_DCMI_MspInit+0x210>)
 80017a0:	f004 fe00 	bl	80063a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017a4:	23c0      	movs	r3, #192	@ 0xc0
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80017b4:	230d      	movs	r3, #13
 80017b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017bc:	4619      	mov	r1, r3
 80017be:	4838      	ldr	r0, [pc, #224]	@ (80018a0 <HAL_DCMI_MspInit+0x214>)
 80017c0:	f004 fdf0 	bl	80063a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017c4:	2308      	movs	r3, #8
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80017d4:	230d      	movs	r3, #13
 80017d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017dc:	4619      	mov	r1, r3
 80017de:	4831      	ldr	r0, [pc, #196]	@ (80018a4 <HAL_DCMI_MspInit+0x218>)
 80017e0:	f004 fde0 	bl	80063a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017e4:	2380      	movs	r3, #128	@ 0x80
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80017f4:	230d      	movs	r3, #13
 80017f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017fc:	4619      	mov	r1, r3
 80017fe:	482a      	ldr	r0, [pc, #168]	@ (80018a8 <HAL_DCMI_MspInit+0x21c>)
 8001800:	f004 fdd0 	bl	80063a4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8001804:	4b29      	ldr	r3, [pc, #164]	@ (80018ac <HAL_DCMI_MspInit+0x220>)
 8001806:	4a2a      	ldr	r2, [pc, #168]	@ (80018b0 <HAL_DCMI_MspInit+0x224>)
 8001808:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 800180a:	4b28      	ldr	r3, [pc, #160]	@ (80018ac <HAL_DCMI_MspInit+0x220>)
 800180c:	224b      	movs	r2, #75	@ 0x4b
 800180e:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001810:	4b26      	ldr	r3, [pc, #152]	@ (80018ac <HAL_DCMI_MspInit+0x220>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001816:	4b25      	ldr	r3, [pc, #148]	@ (80018ac <HAL_DCMI_MspInit+0x220>)
 8001818:	2200      	movs	r2, #0
 800181a:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800181c:	4b23      	ldr	r3, [pc, #140]	@ (80018ac <HAL_DCMI_MspInit+0x220>)
 800181e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001822:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001824:	4b21      	ldr	r3, [pc, #132]	@ (80018ac <HAL_DCMI_MspInit+0x220>)
 8001826:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800182a:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800182c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ac <HAL_DCMI_MspInit+0x220>)
 800182e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001832:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8001834:	4b1d      	ldr	r3, [pc, #116]	@ (80018ac <HAL_DCMI_MspInit+0x220>)
 8001836:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800183a:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <HAL_DCMI_MspInit+0x220>)
 800183e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001842:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001844:	4b19      	ldr	r3, [pc, #100]	@ (80018ac <HAL_DCMI_MspInit+0x220>)
 8001846:	2204      	movs	r2, #4
 8001848:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800184a:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <HAL_DCMI_MspInit+0x220>)
 800184c:	2203      	movs	r2, #3
 800184e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001850:	4b16      	ldr	r3, [pc, #88]	@ (80018ac <HAL_DCMI_MspInit+0x220>)
 8001852:	2200      	movs	r2, #0
 8001854:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001856:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <HAL_DCMI_MspInit+0x220>)
 8001858:	2200      	movs	r2, #0
 800185a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800185c:	4813      	ldr	r0, [pc, #76]	@ (80018ac <HAL_DCMI_MspInit+0x220>)
 800185e:	f001 faa7 	bl	8002db0 <HAL_DMA_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <HAL_DCMI_MspInit+0x1e0>
    {
      Error_Handler();
 8001868:	f7ff fef0 	bl	800164c <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a0f      	ldr	r2, [pc, #60]	@ (80018ac <HAL_DCMI_MspInit+0x220>)
 8001870:	649a      	str	r2, [r3, #72]	@ 0x48
 8001872:	4a0e      	ldr	r2, [pc, #56]	@ (80018ac <HAL_DCMI_MspInit+0x220>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	204e      	movs	r0, #78	@ 0x4e
 800187e:	f000 fefe 	bl	800267e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001882:	204e      	movs	r0, #78	@ 0x4e
 8001884:	f000 ff15 	bl	80026b2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8001888:	bf00      	nop
 800188a:	3738      	adds	r7, #56	@ 0x38
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	48020000 	.word	0x48020000
 8001894:	58024400 	.word	0x58024400
 8001898:	58021000 	.word	0x58021000
 800189c:	58020000 	.word	0x58020000
 80018a0:	58020800 	.word	0x58020800
 80018a4:	58020c00 	.word	0x58020c00
 80018a8:	58020400 	.word	0x58020400
 80018ac:	240001c8 	.word	0x240001c8
 80018b0:	40020010 	.word	0x40020010

080018b4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b0ba      	sub	sp, #232	@ 0xe8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	22c0      	movs	r2, #192	@ 0xc0
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f013 fea1 	bl	801561c <memset>
  if(hi2c->Instance==I2C2)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a38      	ldr	r2, [pc, #224]	@ (80019c0 <HAL_I2C_MspInit+0x10c>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d169      	bne.n	80019b8 <HAL_I2C_MspInit+0x104>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80018e4:	f04f 0208 	mov.w	r2, #8
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 80018f0:	2302      	movs	r3, #2
 80018f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 12;
 80018f4:	230c      	movs	r3, #12
 80018f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80018f8:	2302      	movs	r3, #2
 80018fa:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80018fc:	2302      	movs	r3, #2
 80018fe:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 8001900:	2303      	movs	r3, #3
 8001902:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001904:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001908:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800190a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800190e:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8001914:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001918:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	4618      	mov	r0, r3
 8001922:	f00b fc03 	bl	800d12c <HAL_RCCEx_PeriphCLKConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_I2C_MspInit+0x7c>
    {
      Error_Handler();
 800192c:	f7ff fe8e 	bl	800164c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001930:	4b24      	ldr	r3, [pc, #144]	@ (80019c4 <HAL_I2C_MspInit+0x110>)
 8001932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001936:	4a23      	ldr	r2, [pc, #140]	@ (80019c4 <HAL_I2C_MspInit+0x110>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001940:	4b20      	ldr	r3, [pc, #128]	@ (80019c4 <HAL_I2C_MspInit+0x110>)
 8001942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800194e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001952:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001956:	2312      	movs	r3, #18
 8001958:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800195c:	2301      	movs	r3, #1
 800195e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001968:	2304      	movs	r3, #4
 800196a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001972:	4619      	mov	r1, r3
 8001974:	4814      	ldr	r0, [pc, #80]	@ (80019c8 <HAL_I2C_MspInit+0x114>)
 8001976:	f004 fd15 	bl	80063a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800197a:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <HAL_I2C_MspInit+0x110>)
 800197c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001980:	4a10      	ldr	r2, [pc, #64]	@ (80019c4 <HAL_I2C_MspInit+0x110>)
 8001982:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001986:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800198a:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <HAL_I2C_MspInit+0x110>)
 800198c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001990:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	2100      	movs	r1, #0
 800199c:	2021      	movs	r0, #33	@ 0x21
 800199e:	f000 fe6e 	bl	800267e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80019a2:	2021      	movs	r0, #33	@ 0x21
 80019a4:	f000 fe85 	bl	80026b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2100      	movs	r1, #0
 80019ac:	2022      	movs	r0, #34	@ 0x22
 80019ae:	f000 fe66 	bl	800267e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80019b2:	2022      	movs	r0, #34	@ 0x22
 80019b4:	f000 fe7d 	bl	80026b2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80019b8:	bf00      	nop
 80019ba:	37e8      	adds	r7, #232	@ 0xe8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40005800 	.word	0x40005800
 80019c4:	58024400 	.word	0x58024400
 80019c8:	58020400 	.word	0x58020400

080019cc <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a55      	ldr	r2, [pc, #340]	@ (8001b30 <HAL_JPEG_MspInit+0x164>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	f040 80a3 	bne.w	8001b26 <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80019e0:	4b54      	ldr	r3, [pc, #336]	@ (8001b34 <HAL_JPEG_MspInit+0x168>)
 80019e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019e6:	4a53      	ldr	r2, [pc, #332]	@ (8001b34 <HAL_JPEG_MspInit+0x168>)
 80019e8:	f043 0320 	orr.w	r3, r3, #32
 80019ec:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80019f0:	4b50      	ldr	r3, [pc, #320]	@ (8001b34 <HAL_JPEG_MspInit+0x168>)
 80019f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019f6:	f003 0320 	and.w	r3, r3, #32
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 80019fe:	4b4e      	ldr	r3, [pc, #312]	@ (8001b38 <HAL_JPEG_MspInit+0x16c>)
 8001a00:	4a4e      	ldr	r2, [pc, #312]	@ (8001b3c <HAL_JPEG_MspInit+0x170>)
 8001a02:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001a04:	4b4c      	ldr	r3, [pc, #304]	@ (8001b38 <HAL_JPEG_MspInit+0x16c>)
 8001a06:	2211      	movs	r2, #17
 8001a08:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001a0a:	4b4b      	ldr	r3, [pc, #300]	@ (8001b38 <HAL_JPEG_MspInit+0x16c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001a10:	4b49      	ldr	r3, [pc, #292]	@ (8001b38 <HAL_JPEG_MspInit+0x16c>)
 8001a12:	2240      	movs	r2, #64	@ 0x40
 8001a14:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001a16:	4b48      	ldr	r3, [pc, #288]	@ (8001b38 <HAL_JPEG_MspInit+0x16c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8001a1c:	4b46      	ldr	r3, [pc, #280]	@ (8001b38 <HAL_JPEG_MspInit+0x16c>)
 8001a1e:	2202      	movs	r2, #2
 8001a20:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8001a22:	4b45      	ldr	r3, [pc, #276]	@ (8001b38 <HAL_JPEG_MspInit+0x16c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8001a28:	4b43      	ldr	r3, [pc, #268]	@ (8001b38 <HAL_JPEG_MspInit+0x16c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001a2e:	4b42      	ldr	r3, [pc, #264]	@ (8001b38 <HAL_JPEG_MspInit+0x16c>)
 8001a30:	2280      	movs	r2, #128	@ 0x80
 8001a32:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001a34:	4b40      	ldr	r3, [pc, #256]	@ (8001b38 <HAL_JPEG_MspInit+0x16c>)
 8001a36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001a3c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b38 <HAL_JPEG_MspInit+0x16c>)
 8001a3e:	2220      	movs	r2, #32
 8001a40:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001a42:	4b3d      	ldr	r3, [pc, #244]	@ (8001b38 <HAL_JPEG_MspInit+0x16c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001a48:	4b3b      	ldr	r3, [pc, #236]	@ (8001b38 <HAL_JPEG_MspInit+0x16c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 8001a4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b38 <HAL_JPEG_MspInit+0x16c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8001a54:	4b38      	ldr	r3, [pc, #224]	@ (8001b38 <HAL_JPEG_MspInit+0x16c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001a5a:	4837      	ldr	r0, [pc, #220]	@ (8001b38 <HAL_JPEG_MspInit+0x16c>)
 8001a5c:	f008 fcf4 	bl	800a448 <HAL_MDMA_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 8001a66:	f7ff fdf1 	bl	800164c <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4832      	ldr	r0, [pc, #200]	@ (8001b38 <HAL_JPEG_MspInit+0x16c>)
 8001a70:	f008 fd36 	bl	800a4e0 <HAL_MDMA_ConfigPostRequestMask>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 8001a7a:	f7ff fde7 	bl	800164c <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a2d      	ldr	r2, [pc, #180]	@ (8001b38 <HAL_JPEG_MspInit+0x16c>)
 8001a82:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a84:	4a2c      	ldr	r2, [pc, #176]	@ (8001b38 <HAL_JPEG_MspInit+0x16c>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 8001a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b40 <HAL_JPEG_MspInit+0x174>)
 8001a8c:	4a2d      	ldr	r2, [pc, #180]	@ (8001b44 <HAL_JPEG_MspInit+0x178>)
 8001a8e:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 8001a90:	4b2b      	ldr	r3, [pc, #172]	@ (8001b40 <HAL_JPEG_MspInit+0x174>)
 8001a92:	2214      	movs	r2, #20
 8001a94:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001a96:	4b2a      	ldr	r3, [pc, #168]	@ (8001b40 <HAL_JPEG_MspInit+0x174>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001a9c:	4b28      	ldr	r3, [pc, #160]	@ (8001b40 <HAL_JPEG_MspInit+0x174>)
 8001a9e:	2240      	movs	r2, #64	@ 0x40
 8001aa0:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001aa2:	4b27      	ldr	r3, [pc, #156]	@ (8001b40 <HAL_JPEG_MspInit+0x174>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001aa8:	4b25      	ldr	r3, [pc, #148]	@ (8001b40 <HAL_JPEG_MspInit+0x174>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8001aae:	4b24      	ldr	r3, [pc, #144]	@ (8001b40 <HAL_JPEG_MspInit+0x174>)
 8001ab0:	2208      	movs	r2, #8
 8001ab2:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001ab4:	4b22      	ldr	r3, [pc, #136]	@ (8001b40 <HAL_JPEG_MspInit+0x174>)
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8001aba:	4b21      	ldr	r3, [pc, #132]	@ (8001b40 <HAL_JPEG_MspInit+0x174>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b40 <HAL_JPEG_MspInit+0x174>)
 8001ac2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ac6:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b40 <HAL_JPEG_MspInit+0x174>)
 8001aca:	2204      	movs	r2, #4
 8001acc:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001ace:	4b1c      	ldr	r3, [pc, #112]	@ (8001b40 <HAL_JPEG_MspInit+0x174>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <HAL_JPEG_MspInit+0x174>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 8001ada:	4b19      	ldr	r3, [pc, #100]	@ (8001b40 <HAL_JPEG_MspInit+0x174>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 8001ae0:	4b17      	ldr	r3, [pc, #92]	@ (8001b40 <HAL_JPEG_MspInit+0x174>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 8001ae6:	4816      	ldr	r0, [pc, #88]	@ (8001b40 <HAL_JPEG_MspInit+0x174>)
 8001ae8:	f008 fcae 	bl	800a448 <HAL_MDMA_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 8001af2:	f7ff fdab 	bl	800164c <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	4811      	ldr	r0, [pc, #68]	@ (8001b40 <HAL_JPEG_MspInit+0x174>)
 8001afc:	f008 fcf0 	bl	800a4e0 <HAL_MDMA_ConfigPostRequestMask>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 8001b06:	f7ff fda1 	bl	800164c <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b40 <HAL_JPEG_MspInit+0x174>)
 8001b0e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b10:	4a0b      	ldr	r2, [pc, #44]	@ (8001b40 <HAL_JPEG_MspInit+0x174>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	2079      	movs	r0, #121	@ 0x79
 8001b1c:	f000 fdaf 	bl	800267e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001b20:	2079      	movs	r0, #121	@ 0x79
 8001b22:	f000 fdc6 	bl	80026b2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	52003000 	.word	0x52003000
 8001b34:	58024400 	.word	0x58024400
 8001b38:	240002ec 	.word	0x240002ec
 8001b3c:	52000040 	.word	0x52000040
 8001b40:	24000358 	.word	0x24000358
 8001b44:	52000080 	.word	0x52000080

08001b48 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b0bc      	sub	sp, #240	@ 0xf0
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b60:	f107 0318 	add.w	r3, r7, #24
 8001b64:	22c0      	movs	r2, #192	@ 0xc0
 8001b66:	2100      	movs	r1, #0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f013 fd57 	bl	801561c <memset>
  if(hspi->Instance==SPI2)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a38      	ldr	r2, [pc, #224]	@ (8001c54 <HAL_SPI_MspInit+0x10c>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d169      	bne.n	8001c4c <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001b78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b88:	f107 0318 	add.w	r3, r7, #24
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f00b facd 	bl	800d12c <HAL_RCCEx_PeriphCLKConfig>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001b98:	f7ff fd58 	bl	800164c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001c58 <HAL_SPI_MspInit+0x110>)
 8001b9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8001c58 <HAL_SPI_MspInit+0x110>)
 8001ba4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bac:	4b2a      	ldr	r3, [pc, #168]	@ (8001c58 <HAL_SPI_MspInit+0x110>)
 8001bae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bba:	4b27      	ldr	r3, [pc, #156]	@ (8001c58 <HAL_SPI_MspInit+0x110>)
 8001bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bc0:	4a25      	ldr	r2, [pc, #148]	@ (8001c58 <HAL_SPI_MspInit+0x110>)
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bca:	4b23      	ldr	r3, [pc, #140]	@ (8001c58 <HAL_SPI_MspInit+0x110>)
 8001bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c58 <HAL_SPI_MspInit+0x110>)
 8001bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bde:	4a1e      	ldr	r2, [pc, #120]	@ (8001c58 <HAL_SPI_MspInit+0x110>)
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001be8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c58 <HAL_SPI_MspInit+0x110>)
 8001bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001bf6:	2306      	movs	r3, #6
 8001bf8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c0e:	2305      	movs	r3, #5
 8001c10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c14:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4810      	ldr	r0, [pc, #64]	@ (8001c5c <HAL_SPI_MspInit+0x114>)
 8001c1c:	f004 fbc2 	bl	80063a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c3a:	2305      	movs	r3, #5
 8001c3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c40:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c44:	4619      	mov	r1, r3
 8001c46:	4806      	ldr	r0, [pc, #24]	@ (8001c60 <HAL_SPI_MspInit+0x118>)
 8001c48:	f004 fbac 	bl	80063a4 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001c4c:	bf00      	nop
 8001c4e:	37f0      	adds	r7, #240	@ 0xf0
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40003800 	.word	0x40003800
 8001c58:	58024400 	.word	0x58024400
 8001c5c:	58020800 	.word	0x58020800
 8001c60:	58020400 	.word	0x58020400

08001c64 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b087      	sub	sp, #28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a2b      	ldr	r2, [pc, #172]	@ (8001d20 <HAL_TIM_PWM_MspInit+0xbc>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d10f      	bne.n	8001c96 <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c76:	4b2b      	ldr	r3, [pc, #172]	@ (8001d24 <HAL_TIM_PWM_MspInit+0xc0>)
 8001c78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c7c:	4a29      	ldr	r2, [pc, #164]	@ (8001d24 <HAL_TIM_PWM_MspInit+0xc0>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c86:	4b27      	ldr	r3, [pc, #156]	@ (8001d24 <HAL_TIM_PWM_MspInit+0xc0>)
 8001c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c94:	e03d      	b.n	8001d12 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c9e:	d10f      	bne.n	8001cc0 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ca0:	4b20      	ldr	r3, [pc, #128]	@ (8001d24 <HAL_TIM_PWM_MspInit+0xc0>)
 8001ca2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8001d24 <HAL_TIM_PWM_MspInit+0xc0>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d24 <HAL_TIM_PWM_MspInit+0xc0>)
 8001cb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	693b      	ldr	r3, [r7, #16]
}
 8001cbe:	e028      	b.n	8001d12 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a18      	ldr	r2, [pc, #96]	@ (8001d28 <HAL_TIM_PWM_MspInit+0xc4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d10f      	bne.n	8001cea <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cca:	4b16      	ldr	r3, [pc, #88]	@ (8001d24 <HAL_TIM_PWM_MspInit+0xc0>)
 8001ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cd0:	4a14      	ldr	r2, [pc, #80]	@ (8001d24 <HAL_TIM_PWM_MspInit+0xc0>)
 8001cd2:	f043 0302 	orr.w	r3, r3, #2
 8001cd6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cda:	4b12      	ldr	r3, [pc, #72]	@ (8001d24 <HAL_TIM_PWM_MspInit+0xc0>)
 8001cdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
}
 8001ce8:	e013      	b.n	8001d12 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a0f      	ldr	r2, [pc, #60]	@ (8001d2c <HAL_TIM_PWM_MspInit+0xc8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d10e      	bne.n	8001d12 <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <HAL_TIM_PWM_MspInit+0xc0>)
 8001cf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001d24 <HAL_TIM_PWM_MspInit+0xc0>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d04:	4b07      	ldr	r3, [pc, #28]	@ (8001d24 <HAL_TIM_PWM_MspInit+0xc0>)
 8001d06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
}
 8001d12:	bf00      	nop
 8001d14:	371c      	adds	r7, #28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40010000 	.word	0x40010000
 8001d24:	58024400 	.word	0x58024400
 8001d28:	40000400 	.word	0x40000400
 8001d2c:	40000800 	.word	0x40000800

08001d30 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0e      	ldr	r2, [pc, #56]	@ (8001d78 <HAL_TIM_Base_MspInit+0x48>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d116      	bne.n	8001d70 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001d42:	4b0e      	ldr	r3, [pc, #56]	@ (8001d7c <HAL_TIM_Base_MspInit+0x4c>)
 8001d44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d48:	4a0c      	ldr	r2, [pc, #48]	@ (8001d7c <HAL_TIM_Base_MspInit+0x4c>)
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d4e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d52:	4b0a      	ldr	r3, [pc, #40]	@ (8001d7c <HAL_TIM_Base_MspInit+0x4c>)
 8001d54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	2100      	movs	r1, #0
 8001d64:	202d      	movs	r0, #45	@ 0x2d
 8001d66:	f000 fc8a 	bl	800267e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001d6a:	202d      	movs	r0, #45	@ 0x2d
 8001d6c:	f000 fca1 	bl	80026b2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40002000 	.word	0x40002000
 8001d7c:	58024400 	.word	0x58024400

08001d80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08c      	sub	sp, #48	@ 0x30
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 031c 	add.w	r3, r7, #28
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a5d      	ldr	r2, [pc, #372]	@ (8001f14 <HAL_TIM_MspPostInit+0x194>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d120      	bne.n	8001de4 <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001da2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f18 <HAL_TIM_MspPostInit+0x198>)
 8001da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da8:	4a5b      	ldr	r2, [pc, #364]	@ (8001f18 <HAL_TIM_MspPostInit+0x198>)
 8001daa:	f043 0310 	orr.w	r3, r3, #16
 8001dae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001db2:	4b59      	ldr	r3, [pc, #356]	@ (8001f18 <HAL_TIM_MspPostInit+0x198>)
 8001db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001dc0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dd6:	f107 031c 	add.w	r3, r7, #28
 8001dda:	4619      	mov	r1, r3
 8001ddc:	484f      	ldr	r0, [pc, #316]	@ (8001f1c <HAL_TIM_MspPostInit+0x19c>)
 8001dde:	f004 fae1 	bl	80063a4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001de2:	e093      	b.n	8001f0c <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM2)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dec:	d11f      	bne.n	8001e2e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dee:	4b4a      	ldr	r3, [pc, #296]	@ (8001f18 <HAL_TIM_MspPostInit+0x198>)
 8001df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df4:	4a48      	ldr	r2, [pc, #288]	@ (8001f18 <HAL_TIM_MspPostInit+0x198>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dfe:	4b46      	ldr	r3, [pc, #280]	@ (8001f18 <HAL_TIM_MspPostInit+0x198>)
 8001e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e0c:	2307      	movs	r3, #7
 8001e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	f107 031c 	add.w	r3, r7, #28
 8001e24:	4619      	mov	r1, r3
 8001e26:	483e      	ldr	r0, [pc, #248]	@ (8001f20 <HAL_TIM_MspPostInit+0x1a0>)
 8001e28:	f004 fabc 	bl	80063a4 <HAL_GPIO_Init>
}
 8001e2c:	e06e      	b.n	8001f0c <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM3)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a3c      	ldr	r2, [pc, #240]	@ (8001f24 <HAL_TIM_MspPostInit+0x1a4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d11f      	bne.n	8001e78 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e38:	4b37      	ldr	r3, [pc, #220]	@ (8001f18 <HAL_TIM_MspPostInit+0x198>)
 8001e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e3e:	4a36      	ldr	r2, [pc, #216]	@ (8001f18 <HAL_TIM_MspPostInit+0x198>)
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e48:	4b33      	ldr	r3, [pc, #204]	@ (8001f18 <HAL_TIM_MspPostInit+0x198>)
 8001e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e56:	2303      	movs	r3, #3
 8001e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2300      	movs	r3, #0
 8001e64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e66:	2302      	movs	r3, #2
 8001e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6a:	f107 031c 	add.w	r3, r7, #28
 8001e6e:	4619      	mov	r1, r3
 8001e70:	482d      	ldr	r0, [pc, #180]	@ (8001f28 <HAL_TIM_MspPostInit+0x1a8>)
 8001e72:	f004 fa97 	bl	80063a4 <HAL_GPIO_Init>
}
 8001e76:	e049      	b.n	8001f0c <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM4)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8001f2c <HAL_TIM_MspPostInit+0x1ac>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d120      	bne.n	8001ec4 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e82:	4b25      	ldr	r3, [pc, #148]	@ (8001f18 <HAL_TIM_MspPostInit+0x198>)
 8001e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e88:	4a23      	ldr	r2, [pc, #140]	@ (8001f18 <HAL_TIM_MspPostInit+0x198>)
 8001e8a:	f043 0302 	orr.w	r3, r3, #2
 8001e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e92:	4b21      	ldr	r3, [pc, #132]	@ (8001f18 <HAL_TIM_MspPostInit+0x198>)
 8001e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ea0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	4619      	mov	r1, r3
 8001ebc:	481a      	ldr	r0, [pc, #104]	@ (8001f28 <HAL_TIM_MspPostInit+0x1a8>)
 8001ebe:	f004 fa71 	bl	80063a4 <HAL_GPIO_Init>
}
 8001ec2:	e023      	b.n	8001f0c <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM14)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a19      	ldr	r2, [pc, #100]	@ (8001f30 <HAL_TIM_MspPostInit+0x1b0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d11e      	bne.n	8001f0c <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ece:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <HAL_TIM_MspPostInit+0x198>)
 8001ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed4:	4a10      	ldr	r2, [pc, #64]	@ (8001f18 <HAL_TIM_MspPostInit+0x198>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ede:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <HAL_TIM_MspPostInit+0x198>)
 8001ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001eec:	2380      	movs	r3, #128	@ 0x80
 8001eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001efc:	2309      	movs	r3, #9
 8001efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	4619      	mov	r1, r3
 8001f06:	4806      	ldr	r0, [pc, #24]	@ (8001f20 <HAL_TIM_MspPostInit+0x1a0>)
 8001f08:	f004 fa4c 	bl	80063a4 <HAL_GPIO_Init>
}
 8001f0c:	bf00      	nop
 8001f0e:	3730      	adds	r7, #48	@ 0x30
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40010000 	.word	0x40010000
 8001f18:	58024400 	.word	0x58024400
 8001f1c:	58021000 	.word	0x58021000
 8001f20:	58020000 	.word	0x58020000
 8001f24:	40000400 	.word	0x40000400
 8001f28:	58020400 	.word	0x58020400
 8001f2c:	40000800 	.word	0x40000800
 8001f30:	40002000 	.word	0x40002000

08001f34 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b0ba      	sub	sp, #232	@ 0xe8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	22c0      	movs	r2, #192	@ 0xc0
 8001f52:	2100      	movs	r1, #0
 8001f54:	4618      	mov	r0, r3
 8001f56:	f013 fb61 	bl	801561c <memset>
  if(huart->Instance==USART1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a27      	ldr	r2, [pc, #156]	@ (8001ffc <HAL_UART_MspInit+0xc8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d146      	bne.n	8001ff2 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f64:	f04f 0201 	mov.w	r2, #1
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f76:	f107 0310 	add.w	r3, r7, #16
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f00b f8d6 	bl	800d12c <HAL_RCCEx_PeriphCLKConfig>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001f86:	f7ff fb61 	bl	800164c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <HAL_UART_MspInit+0xcc>)
 8001f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f90:	4a1b      	ldr	r2, [pc, #108]	@ (8002000 <HAL_UART_MspInit+0xcc>)
 8001f92:	f043 0310 	orr.w	r3, r3, #16
 8001f96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f9a:	4b19      	ldr	r3, [pc, #100]	@ (8002000 <HAL_UART_MspInit+0xcc>)
 8001f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa8:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <HAL_UART_MspInit+0xcc>)
 8001faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fae:	4a14      	ldr	r2, [pc, #80]	@ (8002000 <HAL_UART_MspInit+0xcc>)
 8001fb0:	f043 0302 	orr.w	r3, r3, #2
 8001fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fb8:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <HAL_UART_MspInit+0xcc>)
 8001fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001fc6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001fca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001fea:	4619      	mov	r1, r3
 8001fec:	4805      	ldr	r0, [pc, #20]	@ (8002004 <HAL_UART_MspInit+0xd0>)
 8001fee:	f004 f9d9 	bl	80063a4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ff2:	bf00      	nop
 8001ff4:	37e8      	adds	r7, #232	@ 0xe8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40011000 	.word	0x40011000
 8002000:	58024400 	.word	0x58024400
 8002004:	58020400 	.word	0x58020400

08002008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <NMI_Handler+0x4>

08002010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <HardFault_Handler+0x4>

08002018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <MemManage_Handler+0x4>

08002020 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <BusFault_Handler+0x4>

08002028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <UsageFault_Handler+0x4>

08002030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800205e:	f000 f9e3 	bl	8002428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800206c:	4802      	ldr	r0, [pc, #8]	@ (8002078 <DMA1_Stream0_IRQHandler+0x10>)
 800206e:	f002 f9c9 	bl	8004404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	240001c8 	.word	0x240001c8

0800207c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002080:	4802      	ldr	r0, [pc, #8]	@ (800208c <I2C2_EV_IRQHandler+0x10>)
 8002082:	f004 fe03 	bl	8006c8c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	24000240 	.word	0x24000240

08002090 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002094:	4802      	ldr	r0, [pc, #8]	@ (80020a0 <I2C2_ER_IRQHandler+0x10>)
 8002096:	f004 fe13 	bl	8006cc0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	24000240 	.word	0x24000240

080020a4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80020a8:	4802      	ldr	r0, [pc, #8]	@ (80020b4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80020aa:	f00d f967 	bl	800f37c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	2400057c 	.word	0x2400057c

080020b8 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80020bc:	4802      	ldr	r0, [pc, #8]	@ (80020c8 <DCMI_IRQHandler+0x10>)
 80020be:	f000 fd27 	bl	8002b10 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	24000178 	.word	0x24000178

080020cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80020d0:	4802      	ldr	r0, [pc, #8]	@ (80020dc <OTG_FS_IRQHandler+0x10>)
 80020d2:	f008 fe9c 	bl	800ae0e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	2400b19c 	.word	0x2400b19c

080020e0 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 80020e4:	4802      	ldr	r0, [pc, #8]	@ (80020f0 <JPEG_IRQHandler+0x10>)
 80020e6:	f006 fbb8 	bl	800885a <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	24000294 	.word	0x24000294

080020f4 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 80020f8:	4803      	ldr	r0, [pc, #12]	@ (8002108 <MDMA_IRQHandler+0x14>)
 80020fa:	f008 faeb 	bl	800a6d4 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 80020fe:	4803      	ldr	r0, [pc, #12]	@ (800210c <MDMA_IRQHandler+0x18>)
 8002100:	f008 fae8 	bl	800a6d4 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	240002ec 	.word	0x240002ec
 800210c:	24000358 	.word	0x24000358

08002110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002118:	4a14      	ldr	r2, [pc, #80]	@ (800216c <_sbrk+0x5c>)
 800211a:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <_sbrk+0x60>)
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002124:	4b13      	ldr	r3, [pc, #76]	@ (8002174 <_sbrk+0x64>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d102      	bne.n	8002132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800212c:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <_sbrk+0x64>)
 800212e:	4a12      	ldr	r2, [pc, #72]	@ (8002178 <_sbrk+0x68>)
 8002130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002132:	4b10      	ldr	r3, [pc, #64]	@ (8002174 <_sbrk+0x64>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	429a      	cmp	r2, r3
 800213e:	d207      	bcs.n	8002150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002140:	f013 fa74 	bl	801562c <__errno>
 8002144:	4603      	mov	r3, r0
 8002146:	220c      	movs	r2, #12
 8002148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800214a:	f04f 33ff 	mov.w	r3, #4294967295
 800214e:	e009      	b.n	8002164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002150:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <_sbrk+0x64>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002156:	4b07      	ldr	r3, [pc, #28]	@ (8002174 <_sbrk+0x64>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	4a05      	ldr	r2, [pc, #20]	@ (8002174 <_sbrk+0x64>)
 8002160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002162:	68fb      	ldr	r3, [r7, #12]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	24080000 	.word	0x24080000
 8002170:	00000400 	.word	0x00000400
 8002174:	24009cb0 	.word	0x24009cb0
 8002178:	2400b9e8 	.word	0x2400b9e8

0800217c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002180:	4b43      	ldr	r3, [pc, #268]	@ (8002290 <SystemInit+0x114>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002186:	4a42      	ldr	r2, [pc, #264]	@ (8002290 <SystemInit+0x114>)
 8002188:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800218c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002190:	4b40      	ldr	r3, [pc, #256]	@ (8002294 <SystemInit+0x118>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	2b06      	cmp	r3, #6
 800219a:	d807      	bhi.n	80021ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800219c:	4b3d      	ldr	r3, [pc, #244]	@ (8002294 <SystemInit+0x118>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f023 030f 	bic.w	r3, r3, #15
 80021a4:	4a3b      	ldr	r2, [pc, #236]	@ (8002294 <SystemInit+0x118>)
 80021a6:	f043 0307 	orr.w	r3, r3, #7
 80021aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80021ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002298 <SystemInit+0x11c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a39      	ldr	r2, [pc, #228]	@ (8002298 <SystemInit+0x11c>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021b8:	4b37      	ldr	r3, [pc, #220]	@ (8002298 <SystemInit+0x11c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80021be:	4b36      	ldr	r3, [pc, #216]	@ (8002298 <SystemInit+0x11c>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	4935      	ldr	r1, [pc, #212]	@ (8002298 <SystemInit+0x11c>)
 80021c4:	4b35      	ldr	r3, [pc, #212]	@ (800229c <SystemInit+0x120>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021ca:	4b32      	ldr	r3, [pc, #200]	@ (8002294 <SystemInit+0x118>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d007      	beq.n	80021e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80021d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002294 <SystemInit+0x118>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 030f 	bic.w	r3, r3, #15
 80021de:	4a2d      	ldr	r2, [pc, #180]	@ (8002294 <SystemInit+0x118>)
 80021e0:	f043 0307 	orr.w	r3, r3, #7
 80021e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80021e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002298 <SystemInit+0x11c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80021ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002298 <SystemInit+0x11c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80021f2:	4b29      	ldr	r3, [pc, #164]	@ (8002298 <SystemInit+0x11c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80021f8:	4b27      	ldr	r3, [pc, #156]	@ (8002298 <SystemInit+0x11c>)
 80021fa:	4a29      	ldr	r2, [pc, #164]	@ (80022a0 <SystemInit+0x124>)
 80021fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80021fe:	4b26      	ldr	r3, [pc, #152]	@ (8002298 <SystemInit+0x11c>)
 8002200:	4a28      	ldr	r2, [pc, #160]	@ (80022a4 <SystemInit+0x128>)
 8002202:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002204:	4b24      	ldr	r3, [pc, #144]	@ (8002298 <SystemInit+0x11c>)
 8002206:	4a28      	ldr	r2, [pc, #160]	@ (80022a8 <SystemInit+0x12c>)
 8002208:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800220a:	4b23      	ldr	r3, [pc, #140]	@ (8002298 <SystemInit+0x11c>)
 800220c:	2200      	movs	r2, #0
 800220e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002210:	4b21      	ldr	r3, [pc, #132]	@ (8002298 <SystemInit+0x11c>)
 8002212:	4a25      	ldr	r2, [pc, #148]	@ (80022a8 <SystemInit+0x12c>)
 8002214:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002216:	4b20      	ldr	r3, [pc, #128]	@ (8002298 <SystemInit+0x11c>)
 8002218:	2200      	movs	r2, #0
 800221a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800221c:	4b1e      	ldr	r3, [pc, #120]	@ (8002298 <SystemInit+0x11c>)
 800221e:	4a22      	ldr	r2, [pc, #136]	@ (80022a8 <SystemInit+0x12c>)
 8002220:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002222:	4b1d      	ldr	r3, [pc, #116]	@ (8002298 <SystemInit+0x11c>)
 8002224:	2200      	movs	r2, #0
 8002226:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002228:	4b1b      	ldr	r3, [pc, #108]	@ (8002298 <SystemInit+0x11c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a1a      	ldr	r2, [pc, #104]	@ (8002298 <SystemInit+0x11c>)
 800222e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002232:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002234:	4b18      	ldr	r3, [pc, #96]	@ (8002298 <SystemInit+0x11c>)
 8002236:	2200      	movs	r2, #0
 8002238:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800223a:	4b1c      	ldr	r3, [pc, #112]	@ (80022ac <SystemInit+0x130>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	4b1c      	ldr	r3, [pc, #112]	@ (80022b0 <SystemInit+0x134>)
 8002240:	4013      	ands	r3, r2
 8002242:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002246:	d202      	bcs.n	800224e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002248:	4b1a      	ldr	r3, [pc, #104]	@ (80022b4 <SystemInit+0x138>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800224e:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <SystemInit+0x11c>)
 8002250:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002254:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d113      	bne.n	8002284 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800225c:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <SystemInit+0x11c>)
 800225e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002262:	4a0d      	ldr	r2, [pc, #52]	@ (8002298 <SystemInit+0x11c>)
 8002264:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002268:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800226c:	4b12      	ldr	r3, [pc, #72]	@ (80022b8 <SystemInit+0x13c>)
 800226e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002272:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002274:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <SystemInit+0x11c>)
 8002276:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800227a:	4a07      	ldr	r2, [pc, #28]	@ (8002298 <SystemInit+0x11c>)
 800227c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002280:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	e000ed00 	.word	0xe000ed00
 8002294:	52002000 	.word	0x52002000
 8002298:	58024400 	.word	0x58024400
 800229c:	eaf6ed7f 	.word	0xeaf6ed7f
 80022a0:	02020200 	.word	0x02020200
 80022a4:	01ff0000 	.word	0x01ff0000
 80022a8:	01010280 	.word	0x01010280
 80022ac:	5c001000 	.word	0x5c001000
 80022b0:	ffff0000 	.word	0xffff0000
 80022b4:	51008108 	.word	0x51008108
 80022b8:	52004000 	.word	0x52004000

080022bc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80022c0:	4b09      	ldr	r3, [pc, #36]	@ (80022e8 <ExitRun0Mode+0x2c>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	4a08      	ldr	r2, [pc, #32]	@ (80022e8 <ExitRun0Mode+0x2c>)
 80022c6:	f043 0302 	orr.w	r3, r3, #2
 80022ca:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80022cc:	bf00      	nop
 80022ce:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <ExitRun0Mode+0x2c>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f9      	beq.n	80022ce <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80022da:	bf00      	nop
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	58024800 	.word	0x58024800

080022ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80022ec:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002328 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80022f0:	f7ff ffe4 	bl	80022bc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80022f4:	f7ff ff42 	bl	800217c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022f8:	480c      	ldr	r0, [pc, #48]	@ (800232c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022fa:	490d      	ldr	r1, [pc, #52]	@ (8002330 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002334 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002300:	e002      	b.n	8002308 <LoopCopyDataInit>

08002302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002306:	3304      	adds	r3, #4

08002308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800230a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800230c:	d3f9      	bcc.n	8002302 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800230e:	4a0a      	ldr	r2, [pc, #40]	@ (8002338 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002310:	4c0a      	ldr	r4, [pc, #40]	@ (800233c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002314:	e001      	b.n	800231a <LoopFillZerobss>

08002316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002318:	3204      	adds	r2, #4

0800231a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800231a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800231c:	d3fb      	bcc.n	8002316 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800231e:	f013 f98b 	bl	8015638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002322:	f7fe f9cb 	bl	80006bc <main>
  bx  lr
 8002326:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002328:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800232c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002330:	2400015c 	.word	0x2400015c
  ldr r2, =_sidata
 8002334:	080163b0 	.word	0x080163b0
  ldr r2, =_sbss
 8002338:	2400015c 	.word	0x2400015c
  ldr r4, =_ebss
 800233c:	2400b9e8 	.word	0x2400b9e8

08002340 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002340:	e7fe      	b.n	8002340 <ADC3_IRQHandler>
	...

08002344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800234a:	2003      	movs	r0, #3
 800234c:	f000 f98c 	bl	8002668 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002350:	f00a fd16 	bl	800cd80 <HAL_RCC_GetSysClockFreq>
 8002354:	4602      	mov	r2, r0
 8002356:	4b15      	ldr	r3, [pc, #84]	@ (80023ac <HAL_Init+0x68>)
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	0a1b      	lsrs	r3, r3, #8
 800235c:	f003 030f 	and.w	r3, r3, #15
 8002360:	4913      	ldr	r1, [pc, #76]	@ (80023b0 <HAL_Init+0x6c>)
 8002362:	5ccb      	ldrb	r3, [r1, r3]
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
 800236c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800236e:	4b0f      	ldr	r3, [pc, #60]	@ (80023ac <HAL_Init+0x68>)
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	4a0e      	ldr	r2, [pc, #56]	@ (80023b0 <HAL_Init+0x6c>)
 8002378:	5cd3      	ldrb	r3, [r2, r3]
 800237a:	f003 031f 	and.w	r3, r3, #31
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
 8002384:	4a0b      	ldr	r2, [pc, #44]	@ (80023b4 <HAL_Init+0x70>)
 8002386:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002388:	4a0b      	ldr	r2, [pc, #44]	@ (80023b8 <HAL_Init+0x74>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800238e:	200f      	movs	r0, #15
 8002390:	f000 f814 	bl	80023bc <HAL_InitTick>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e002      	b.n	80023a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800239e:	f7ff f95b 	bl	8001658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	58024400 	.word	0x58024400
 80023b0:	080160cc 	.word	0x080160cc
 80023b4:	2400000c 	.word	0x2400000c
 80023b8:	24000008 	.word	0x24000008

080023bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80023c4:	4b15      	ldr	r3, [pc, #84]	@ (800241c <HAL_InitTick+0x60>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e021      	b.n	8002414 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80023d0:	4b13      	ldr	r3, [pc, #76]	@ (8002420 <HAL_InitTick+0x64>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	4b11      	ldr	r3, [pc, #68]	@ (800241c <HAL_InitTick+0x60>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	4619      	mov	r1, r3
 80023da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023de:	fbb3 f3f1 	udiv	r3, r3, r1
 80023e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f971 	bl	80026ce <HAL_SYSTICK_Config>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00e      	b.n	8002414 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b0f      	cmp	r3, #15
 80023fa:	d80a      	bhi.n	8002412 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023fc:	2200      	movs	r2, #0
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	f04f 30ff 	mov.w	r0, #4294967295
 8002404:	f000 f93b 	bl	800267e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002408:	4a06      	ldr	r2, [pc, #24]	@ (8002424 <HAL_InitTick+0x68>)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	e000      	b.n	8002414 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	24000014 	.word	0x24000014
 8002420:	24000008 	.word	0x24000008
 8002424:	24000010 	.word	0x24000010

08002428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800242c:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <HAL_IncTick+0x20>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	4b06      	ldr	r3, [pc, #24]	@ (800244c <HAL_IncTick+0x24>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4413      	add	r3, r2
 8002438:	4a04      	ldr	r2, [pc, #16]	@ (800244c <HAL_IncTick+0x24>)
 800243a:	6013      	str	r3, [r2, #0]
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	24000014 	.word	0x24000014
 800244c:	24009cb4 	.word	0x24009cb4

08002450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return uwTick;
 8002454:	4b03      	ldr	r3, [pc, #12]	@ (8002464 <HAL_GetTick+0x14>)
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	24009cb4 	.word	0x24009cb4

08002468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002470:	f7ff ffee 	bl	8002450 <HAL_GetTick>
 8002474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002480:	d005      	beq.n	800248e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002482:	4b0a      	ldr	r3, [pc, #40]	@ (80024ac <HAL_Delay+0x44>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4413      	add	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800248e:	bf00      	nop
 8002490:	f7ff ffde 	bl	8002450 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	429a      	cmp	r2, r3
 800249e:	d8f7      	bhi.n	8002490 <HAL_Delay+0x28>
  {
  }
}
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	24000014 	.word	0x24000014

080024b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80024b4:	4b03      	ldr	r3, [pc, #12]	@ (80024c4 <HAL_GetREVID+0x14>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	0c1b      	lsrs	r3, r3, #16
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	5c001000 	.word	0x5c001000

080024c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <__NVIC_SetPriorityGrouping+0x40>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024e4:	4013      	ands	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024f0:	4b06      	ldr	r3, [pc, #24]	@ (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024f6:	4a04      	ldr	r2, [pc, #16]	@ (8002508 <__NVIC_SetPriorityGrouping+0x40>)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	60d3      	str	r3, [r2, #12]
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000ed00 	.word	0xe000ed00
 800250c:	05fa0000 	.word	0x05fa0000

08002510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002514:	4b04      	ldr	r3, [pc, #16]	@ (8002528 <__NVIC_GetPriorityGrouping+0x18>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	f003 0307 	and.w	r3, r3, #7
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800253a:	2b00      	cmp	r3, #0
 800253c:	db0b      	blt.n	8002556 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	4907      	ldr	r1, [pc, #28]	@ (8002564 <__NVIC_EnableIRQ+0x38>)
 8002546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	2001      	movs	r0, #1
 800254e:	fa00 f202 	lsl.w	r2, r0, r2
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000e100 	.word	0xe000e100

08002568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	6039      	str	r1, [r7, #0]
 8002572:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002574:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002578:	2b00      	cmp	r3, #0
 800257a:	db0a      	blt.n	8002592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	490c      	ldr	r1, [pc, #48]	@ (80025b4 <__NVIC_SetPriority+0x4c>)
 8002582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002586:	0112      	lsls	r2, r2, #4
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	440b      	add	r3, r1
 800258c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002590:	e00a      	b.n	80025a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4908      	ldr	r1, [pc, #32]	@ (80025b8 <__NVIC_SetPriority+0x50>)
 8002598:	88fb      	ldrh	r3, [r7, #6]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	3b04      	subs	r3, #4
 80025a0:	0112      	lsls	r2, r2, #4
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	440b      	add	r3, r1
 80025a6:	761a      	strb	r2, [r3, #24]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000e100 	.word	0xe000e100
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	@ 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f1c3 0307 	rsb	r3, r3, #7
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	bf28      	it	cs
 80025da:	2304      	movcs	r3, #4
 80025dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3304      	adds	r3, #4
 80025e2:	2b06      	cmp	r3, #6
 80025e4:	d902      	bls.n	80025ec <NVIC_EncodePriority+0x30>
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3b03      	subs	r3, #3
 80025ea:	e000      	b.n	80025ee <NVIC_EncodePriority+0x32>
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	401a      	ands	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002604:	f04f 31ff 	mov.w	r1, #4294967295
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	43d9      	mvns	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	4313      	orrs	r3, r2
         );
}
 8002616:	4618      	mov	r0, r3
 8002618:	3724      	adds	r7, #36	@ 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3b01      	subs	r3, #1
 8002630:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002634:	d301      	bcc.n	800263a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002636:	2301      	movs	r3, #1
 8002638:	e00f      	b.n	800265a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800263a:	4a0a      	ldr	r2, [pc, #40]	@ (8002664 <SysTick_Config+0x40>)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002642:	210f      	movs	r1, #15
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	f7ff ff8e 	bl	8002568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800264c:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <SysTick_Config+0x40>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002652:	4b04      	ldr	r3, [pc, #16]	@ (8002664 <SysTick_Config+0x40>)
 8002654:	2207      	movs	r2, #7
 8002656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	e000e010 	.word	0xe000e010

08002668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff ff29 	bl	80024c8 <__NVIC_SetPriorityGrouping>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	4603      	mov	r3, r0
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800268c:	f7ff ff40 	bl	8002510 <__NVIC_GetPriorityGrouping>
 8002690:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	6978      	ldr	r0, [r7, #20]
 8002698:	f7ff ff90 	bl	80025bc <NVIC_EncodePriority>
 800269c:	4602      	mov	r2, r0
 800269e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff5f 	bl	8002568 <__NVIC_SetPriority>
}
 80026aa:	bf00      	nop
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff33 	bl	800252c <__NVIC_EnableIRQ>
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff ffa4 	bl	8002624 <SysTick_Config>
 80026dc:	4603      	mov	r3, r0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80026ec:	f3bf 8f5f 	dmb	sy
}
 80026f0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80026f2:	4b07      	ldr	r3, [pc, #28]	@ (8002710 <HAL_MPU_Disable+0x28>)
 80026f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f6:	4a06      	ldr	r2, [pc, #24]	@ (8002710 <HAL_MPU_Disable+0x28>)
 80026f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026fc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80026fe:	4b05      	ldr	r3, [pc, #20]	@ (8002714 <HAL_MPU_Disable+0x2c>)
 8002700:	2200      	movs	r2, #0
 8002702:	605a      	str	r2, [r3, #4]
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e000ed00 	.word	0xe000ed00
 8002714:	e000ed90 	.word	0xe000ed90

08002718 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002720:	4a0b      	ldr	r2, [pc, #44]	@ (8002750 <HAL_MPU_Enable+0x38>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800272a:	4b0a      	ldr	r3, [pc, #40]	@ (8002754 <HAL_MPU_Enable+0x3c>)
 800272c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272e:	4a09      	ldr	r2, [pc, #36]	@ (8002754 <HAL_MPU_Enable+0x3c>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002734:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002736:	f3bf 8f4f 	dsb	sy
}
 800273a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800273c:	f3bf 8f6f 	isb	sy
}
 8002740:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e000ed90 	.word	0xe000ed90
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	785a      	ldrb	r2, [r3, #1]
 8002764:	4b1b      	ldr	r3, [pc, #108]	@ (80027d4 <HAL_MPU_ConfigRegion+0x7c>)
 8002766:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002768:	4b1a      	ldr	r3, [pc, #104]	@ (80027d4 <HAL_MPU_ConfigRegion+0x7c>)
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	4a19      	ldr	r2, [pc, #100]	@ (80027d4 <HAL_MPU_ConfigRegion+0x7c>)
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002774:	4a17      	ldr	r2, [pc, #92]	@ (80027d4 <HAL_MPU_ConfigRegion+0x7c>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	7b1b      	ldrb	r3, [r3, #12]
 8002780:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	7adb      	ldrb	r3, [r3, #11]
 8002786:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002788:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	7a9b      	ldrb	r3, [r3, #10]
 800278e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002790:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	7b5b      	ldrb	r3, [r3, #13]
 8002796:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002798:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	7b9b      	ldrb	r3, [r3, #14]
 800279e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80027a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	7bdb      	ldrb	r3, [r3, #15]
 80027a6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80027a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	7a5b      	ldrb	r3, [r3, #9]
 80027ae:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80027b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	7a1b      	ldrb	r3, [r3, #8]
 80027b6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80027b8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	7812      	ldrb	r2, [r2, #0]
 80027be:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027c0:	4a04      	ldr	r2, [pc, #16]	@ (80027d4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80027c2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027c4:	6113      	str	r3, [r2, #16]
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	e000ed90 	.word	0xe000ed90

080027d8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e069      	b.n	80028be <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d102      	bne.n	80027fc <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fe ff48 	bl	800168c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6819      	ldr	r1, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b2a      	ldr	r3, [pc, #168]	@ (80028c8 <HAL_DCMI_Init+0xf0>)
 800281e:	400b      	ands	r3, r1
 8002820:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6819      	ldr	r1, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002836:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002842:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800284e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002854:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800285a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002860:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002866:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b10      	cmp	r3, #16
 8002876:	d112      	bne.n	800289e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	7f1b      	ldrb	r3, [r3, #28]
 800287c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	7f5b      	ldrb	r3, [r3, #29]
 8002882:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002884:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	7f9b      	ldrb	r3, [r3, #30]
 800288a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800288c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	7fdb      	ldrb	r3, [r3, #31]
 8002894:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800289a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800289c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 021e 	orr.w	r2, r2, #30
 80028ac:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	ffe0f007 	.word	0xffe0f007

080028cc <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_DCMI_Start_DMA+0x1c>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e0ab      	b.n	8002a40 <HAL_DCMI_Start_DMA+0x174>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002906:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0202 	bic.w	r2, r2, #2
 8002916:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6819      	ldr	r1, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800292c:	4a46      	ldr	r2, [pc, #280]	@ (8002a48 <HAL_DCMI_Start_DMA+0x17c>)
 800292e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002934:	4a45      	ldr	r2, [pc, #276]	@ (8002a4c <HAL_DCMI_Start_DMA+0x180>)
 8002936:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800293c:	2200      	movs	r2, #0
 800293e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800295e:	d219      	bcs.n	8002994 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3328      	adds	r3, #40	@ 0x28
 800296a:	4619      	mov	r1, r3
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	f000 fd7a 	bl	8003468 <HAL_DMA_Start_IT>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d055      	beq.n	8002a26 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2240      	movs	r2, #64	@ 0x40
 800297e:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e055      	b.n	8002a40 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002998:	4a2b      	ldr	r2, [pc, #172]	@ (8002a48 <HAL_DCMI_Start_DMA+0x17c>)
 800299a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2201      	movs	r2, #1
 80029a0:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 80029ae:	e009      	b.n	80029c4 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b4:	085a      	lsrs	r2, r3, #1
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029be:	005a      	lsls	r2, r3, #1
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029cc:	d2f0      	bcs.n	80029b0 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d2:	1e9a      	subs	r2, r3, #2
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	4413      	add	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3328      	adds	r3, #40	@ 0x28
 80029f6:	4619      	mov	r1, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	f003 f81f 	bl	8005a44 <HAL_DMAEx_MultiBufferStart_IT>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00c      	beq.n	8002a26 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2240      	movs	r2, #64	@ 0x40
 8002a10:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e00c      	b.n	8002a40 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 0201 	orr.w	r2, r2, #1
 8002a34:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	08002c51 	.word	0x08002c51
 8002a4c:	08002d77 	.word	0x08002d77

08002a50 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8002a58:	4b2b      	ldr	r3, [pc, #172]	@ (8002b08 <HAL_DCMI_Stop+0xb8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a2b      	ldr	r2, [pc, #172]	@ (8002b0c <HAL_DCMI_Stop+0xbc>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	0a5b      	lsrs	r3, r3, #9
 8002a64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a68:	fb02 f303 	mul.w	r3, r2, r3
 8002a6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_DCMI_Stop+0x30>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e03f      	b.n	8002b00 <HAL_DCMI_Stop+0xb0>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d108      	bne.n	8002abe <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	72fb      	strb	r3, [r7, #11]
      break;
 8002abc:	e006      	b.n	8002acc <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1e9      	bne.n	8002aa0 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ada:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 ff2b 	bl	800393c <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 8002afe:	7afb      	ldrb	r3, [r7, #11]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	24000008 	.word	0x24000008
 8002b0c:	10624dd3 	.word	0x10624dd3

08002b10 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d016      	beq.n	8002b58 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2204      	movs	r2, #4
 8002b30:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b36:	f043 0202 	orr.w	r2, r3, #2
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2204      	movs	r2, #4
 8002b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b4a:	4a31      	ldr	r2, [pc, #196]	@ (8002c10 <HAL_DCMI_IRQHandler+0x100>)
 8002b4c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b52:	4618      	mov	r0, r3
 8002b54:	f001 fa10 	bl	8003f78 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d016      	beq.n	8002b90 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2202      	movs	r2, #2
 8002b68:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6e:	f043 0201 	orr.w	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2204      	movs	r2, #4
 8002b7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b82:	4a23      	ldr	r2, [pc, #140]	@ (8002c10 <HAL_DCMI_IRQHandler+0x100>)
 8002b84:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f001 f9f4 	bl	8003f78 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d006      	beq.n	8002ba8 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2210      	movs	r2, #16
 8002ba0:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f840 	bl	8002c28 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d006      	beq.n	8002bc0 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2208      	movs	r2, #8
 8002bb8:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fe fb24 	bl	8001208 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d01d      	beq.n	8002c06 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d107      	bne.n	8002be8 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 021e 	bic.w	r2, r2, #30
 8002be6:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0201 	bic.w	r2, r2, #1
 8002bf6:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f81b 	bl	8002c3c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8002c06:	bf00      	nop
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	08002d77 	.word	0x08002d77

08002c14 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5c:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d043      	beq.n	8002cee <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c72:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d118      	bne.n	8002cb2 <DCMI_DMAXferCplt+0x62>
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d015      	beq.n	8002cb2 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c98:	00da      	lsls	r2, r3, #3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f003 fa2d 	bl	8006100 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002caa:	1e5a      	subs	r2, r3, #1
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	639a      	str	r2, [r3, #56]	@ 0x38
 8002cb0:	e044      	b.n	8002d3c <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d13c      	bne.n	8002d3c <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd4:	00da      	lsls	r2, r3, #3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	4413      	add	r3, r2
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f003 fa0f 	bl	8006100 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce6:	1e5a      	subs	r2, r3, #1
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	639a      	str	r2, [r3, #56]	@ 0x38
 8002cec:	e026      	b.n	8002d3c <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d006      	beq.n	8002d0c <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	e017      	b.n	8002d3c <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10f      	bne.n	8002d3c <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d20:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d26:	0099      	lsls	r1, r3, #2
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	440a      	add	r2, r1
 8002d32:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d112      	bne.n	8002d6e <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0201 	orr.w	r2, r2, #1
 8002d56:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d103      	bne.n	8002d6e <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8002d6e:	bf00      	nop
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d82:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d009      	beq.n	8002da2 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d9a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f7ff ff36 	bl	8002c14 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8002da8:	bf00      	nop
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002db8:	f7ff fb4a 	bl	8002450 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e316      	b.n	80033f6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a66      	ldr	r2, [pc, #408]	@ (8002f68 <HAL_DMA_Init+0x1b8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d04a      	beq.n	8002e68 <HAL_DMA_Init+0xb8>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a65      	ldr	r2, [pc, #404]	@ (8002f6c <HAL_DMA_Init+0x1bc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d045      	beq.n	8002e68 <HAL_DMA_Init+0xb8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a63      	ldr	r2, [pc, #396]	@ (8002f70 <HAL_DMA_Init+0x1c0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d040      	beq.n	8002e68 <HAL_DMA_Init+0xb8>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a62      	ldr	r2, [pc, #392]	@ (8002f74 <HAL_DMA_Init+0x1c4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d03b      	beq.n	8002e68 <HAL_DMA_Init+0xb8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a60      	ldr	r2, [pc, #384]	@ (8002f78 <HAL_DMA_Init+0x1c8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d036      	beq.n	8002e68 <HAL_DMA_Init+0xb8>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a5f      	ldr	r2, [pc, #380]	@ (8002f7c <HAL_DMA_Init+0x1cc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d031      	beq.n	8002e68 <HAL_DMA_Init+0xb8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a5d      	ldr	r2, [pc, #372]	@ (8002f80 <HAL_DMA_Init+0x1d0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d02c      	beq.n	8002e68 <HAL_DMA_Init+0xb8>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a5c      	ldr	r2, [pc, #368]	@ (8002f84 <HAL_DMA_Init+0x1d4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d027      	beq.n	8002e68 <HAL_DMA_Init+0xb8>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a5a      	ldr	r2, [pc, #360]	@ (8002f88 <HAL_DMA_Init+0x1d8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d022      	beq.n	8002e68 <HAL_DMA_Init+0xb8>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a59      	ldr	r2, [pc, #356]	@ (8002f8c <HAL_DMA_Init+0x1dc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d01d      	beq.n	8002e68 <HAL_DMA_Init+0xb8>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a57      	ldr	r2, [pc, #348]	@ (8002f90 <HAL_DMA_Init+0x1e0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d018      	beq.n	8002e68 <HAL_DMA_Init+0xb8>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a56      	ldr	r2, [pc, #344]	@ (8002f94 <HAL_DMA_Init+0x1e4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d013      	beq.n	8002e68 <HAL_DMA_Init+0xb8>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a54      	ldr	r2, [pc, #336]	@ (8002f98 <HAL_DMA_Init+0x1e8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00e      	beq.n	8002e68 <HAL_DMA_Init+0xb8>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a53      	ldr	r2, [pc, #332]	@ (8002f9c <HAL_DMA_Init+0x1ec>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d009      	beq.n	8002e68 <HAL_DMA_Init+0xb8>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a51      	ldr	r2, [pc, #324]	@ (8002fa0 <HAL_DMA_Init+0x1f0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d004      	beq.n	8002e68 <HAL_DMA_Init+0xb8>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a50      	ldr	r2, [pc, #320]	@ (8002fa4 <HAL_DMA_Init+0x1f4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d101      	bne.n	8002e6c <HAL_DMA_Init+0xbc>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <HAL_DMA_Init+0xbe>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 813b 	beq.w	80030ea <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a37      	ldr	r2, [pc, #220]	@ (8002f68 <HAL_DMA_Init+0x1b8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d04a      	beq.n	8002f24 <HAL_DMA_Init+0x174>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a36      	ldr	r2, [pc, #216]	@ (8002f6c <HAL_DMA_Init+0x1bc>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d045      	beq.n	8002f24 <HAL_DMA_Init+0x174>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a34      	ldr	r2, [pc, #208]	@ (8002f70 <HAL_DMA_Init+0x1c0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d040      	beq.n	8002f24 <HAL_DMA_Init+0x174>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a33      	ldr	r2, [pc, #204]	@ (8002f74 <HAL_DMA_Init+0x1c4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d03b      	beq.n	8002f24 <HAL_DMA_Init+0x174>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a31      	ldr	r2, [pc, #196]	@ (8002f78 <HAL_DMA_Init+0x1c8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d036      	beq.n	8002f24 <HAL_DMA_Init+0x174>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a30      	ldr	r2, [pc, #192]	@ (8002f7c <HAL_DMA_Init+0x1cc>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d031      	beq.n	8002f24 <HAL_DMA_Init+0x174>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a2e      	ldr	r2, [pc, #184]	@ (8002f80 <HAL_DMA_Init+0x1d0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d02c      	beq.n	8002f24 <HAL_DMA_Init+0x174>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a2d      	ldr	r2, [pc, #180]	@ (8002f84 <HAL_DMA_Init+0x1d4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d027      	beq.n	8002f24 <HAL_DMA_Init+0x174>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a2b      	ldr	r2, [pc, #172]	@ (8002f88 <HAL_DMA_Init+0x1d8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d022      	beq.n	8002f24 <HAL_DMA_Init+0x174>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8002f8c <HAL_DMA_Init+0x1dc>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d01d      	beq.n	8002f24 <HAL_DMA_Init+0x174>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a28      	ldr	r2, [pc, #160]	@ (8002f90 <HAL_DMA_Init+0x1e0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d018      	beq.n	8002f24 <HAL_DMA_Init+0x174>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a27      	ldr	r2, [pc, #156]	@ (8002f94 <HAL_DMA_Init+0x1e4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d013      	beq.n	8002f24 <HAL_DMA_Init+0x174>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a25      	ldr	r2, [pc, #148]	@ (8002f98 <HAL_DMA_Init+0x1e8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00e      	beq.n	8002f24 <HAL_DMA_Init+0x174>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a24      	ldr	r2, [pc, #144]	@ (8002f9c <HAL_DMA_Init+0x1ec>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d009      	beq.n	8002f24 <HAL_DMA_Init+0x174>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a22      	ldr	r2, [pc, #136]	@ (8002fa0 <HAL_DMA_Init+0x1f0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d004      	beq.n	8002f24 <HAL_DMA_Init+0x174>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a21      	ldr	r2, [pc, #132]	@ (8002fa4 <HAL_DMA_Init+0x1f4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d108      	bne.n	8002f36 <HAL_DMA_Init+0x186>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0201 	bic.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	e007      	b.n	8002f46 <HAL_DMA_Init+0x196>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0201 	bic.w	r2, r2, #1
 8002f44:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f46:	e02f      	b.n	8002fa8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f48:	f7ff fa82 	bl	8002450 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b05      	cmp	r3, #5
 8002f54:	d928      	bls.n	8002fa8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2203      	movs	r2, #3
 8002f60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e246      	b.n	80033f6 <HAL_DMA_Init+0x646>
 8002f68:	40020010 	.word	0x40020010
 8002f6c:	40020028 	.word	0x40020028
 8002f70:	40020040 	.word	0x40020040
 8002f74:	40020058 	.word	0x40020058
 8002f78:	40020070 	.word	0x40020070
 8002f7c:	40020088 	.word	0x40020088
 8002f80:	400200a0 	.word	0x400200a0
 8002f84:	400200b8 	.word	0x400200b8
 8002f88:	40020410 	.word	0x40020410
 8002f8c:	40020428 	.word	0x40020428
 8002f90:	40020440 	.word	0x40020440
 8002f94:	40020458 	.word	0x40020458
 8002f98:	40020470 	.word	0x40020470
 8002f9c:	40020488 	.word	0x40020488
 8002fa0:	400204a0 	.word	0x400204a0
 8002fa4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1c8      	bne.n	8002f48 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4b83      	ldr	r3, [pc, #524]	@ (80031d0 <HAL_DMA_Init+0x420>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002fce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fda:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d107      	bne.n	800300c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003004:	4313      	orrs	r3, r2
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800300c:	4b71      	ldr	r3, [pc, #452]	@ (80031d4 <HAL_DMA_Init+0x424>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4b71      	ldr	r3, [pc, #452]	@ (80031d8 <HAL_DMA_Init+0x428>)
 8003012:	4013      	ands	r3, r2
 8003014:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003018:	d328      	bcc.n	800306c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b28      	cmp	r3, #40	@ 0x28
 8003020:	d903      	bls.n	800302a <HAL_DMA_Init+0x27a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b2e      	cmp	r3, #46	@ 0x2e
 8003028:	d917      	bls.n	800305a <HAL_DMA_Init+0x2aa>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003030:	d903      	bls.n	800303a <HAL_DMA_Init+0x28a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b42      	cmp	r3, #66	@ 0x42
 8003038:	d90f      	bls.n	800305a <HAL_DMA_Init+0x2aa>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b46      	cmp	r3, #70	@ 0x46
 8003040:	d903      	bls.n	800304a <HAL_DMA_Init+0x29a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b48      	cmp	r3, #72	@ 0x48
 8003048:	d907      	bls.n	800305a <HAL_DMA_Init+0x2aa>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003050:	d905      	bls.n	800305e <HAL_DMA_Init+0x2ae>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b52      	cmp	r3, #82	@ 0x52
 8003058:	d801      	bhi.n	800305e <HAL_DMA_Init+0x2ae>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <HAL_DMA_Init+0x2b0>
 800305e:	2300      	movs	r3, #0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800306a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f023 0307 	bic.w	r3, r3, #7
 8003082:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003092:	2b04      	cmp	r3, #4
 8003094:	d117      	bne.n	80030c6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00e      	beq.n	80030c6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f002 fb41 	bl	8005730 <DMA_CheckFifoParam>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2240      	movs	r2, #64	@ 0x40
 80030b8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e197      	b.n	80033f6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f002 fa7c 	bl	80055cc <DMA_CalcBaseAndBitshift>
 80030d4:	4603      	mov	r3, r0
 80030d6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	223f      	movs	r2, #63	@ 0x3f
 80030e2:	409a      	lsls	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	e0cd      	b.n	8003286 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a3b      	ldr	r2, [pc, #236]	@ (80031dc <HAL_DMA_Init+0x42c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d022      	beq.n	800313a <HAL_DMA_Init+0x38a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a39      	ldr	r2, [pc, #228]	@ (80031e0 <HAL_DMA_Init+0x430>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d01d      	beq.n	800313a <HAL_DMA_Init+0x38a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a38      	ldr	r2, [pc, #224]	@ (80031e4 <HAL_DMA_Init+0x434>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d018      	beq.n	800313a <HAL_DMA_Init+0x38a>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a36      	ldr	r2, [pc, #216]	@ (80031e8 <HAL_DMA_Init+0x438>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d013      	beq.n	800313a <HAL_DMA_Init+0x38a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a35      	ldr	r2, [pc, #212]	@ (80031ec <HAL_DMA_Init+0x43c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d00e      	beq.n	800313a <HAL_DMA_Init+0x38a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a33      	ldr	r2, [pc, #204]	@ (80031f0 <HAL_DMA_Init+0x440>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d009      	beq.n	800313a <HAL_DMA_Init+0x38a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a32      	ldr	r2, [pc, #200]	@ (80031f4 <HAL_DMA_Init+0x444>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d004      	beq.n	800313a <HAL_DMA_Init+0x38a>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a30      	ldr	r2, [pc, #192]	@ (80031f8 <HAL_DMA_Init+0x448>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d101      	bne.n	800313e <HAL_DMA_Init+0x38e>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <HAL_DMA_Init+0x390>
 800313e:	2300      	movs	r3, #0
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8097 	beq.w	8003274 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a24      	ldr	r2, [pc, #144]	@ (80031dc <HAL_DMA_Init+0x42c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d021      	beq.n	8003194 <HAL_DMA_Init+0x3e4>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a22      	ldr	r2, [pc, #136]	@ (80031e0 <HAL_DMA_Init+0x430>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d01c      	beq.n	8003194 <HAL_DMA_Init+0x3e4>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a21      	ldr	r2, [pc, #132]	@ (80031e4 <HAL_DMA_Init+0x434>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d017      	beq.n	8003194 <HAL_DMA_Init+0x3e4>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1f      	ldr	r2, [pc, #124]	@ (80031e8 <HAL_DMA_Init+0x438>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d012      	beq.n	8003194 <HAL_DMA_Init+0x3e4>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1e      	ldr	r2, [pc, #120]	@ (80031ec <HAL_DMA_Init+0x43c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00d      	beq.n	8003194 <HAL_DMA_Init+0x3e4>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a1c      	ldr	r2, [pc, #112]	@ (80031f0 <HAL_DMA_Init+0x440>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d008      	beq.n	8003194 <HAL_DMA_Init+0x3e4>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a1b      	ldr	r2, [pc, #108]	@ (80031f4 <HAL_DMA_Init+0x444>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d003      	beq.n	8003194 <HAL_DMA_Init+0x3e4>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a19      	ldr	r2, [pc, #100]	@ (80031f8 <HAL_DMA_Init+0x448>)
 8003192:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	4b13      	ldr	r3, [pc, #76]	@ (80031fc <HAL_DMA_Init+0x44c>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b40      	cmp	r3, #64	@ 0x40
 80031ba:	d021      	beq.n	8003200 <HAL_DMA_Init+0x450>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b80      	cmp	r3, #128	@ 0x80
 80031c2:	d102      	bne.n	80031ca <HAL_DMA_Init+0x41a>
 80031c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80031c8:	e01b      	b.n	8003202 <HAL_DMA_Init+0x452>
 80031ca:	2300      	movs	r3, #0
 80031cc:	e019      	b.n	8003202 <HAL_DMA_Init+0x452>
 80031ce:	bf00      	nop
 80031d0:	fe10803f 	.word	0xfe10803f
 80031d4:	5c001000 	.word	0x5c001000
 80031d8:	ffff0000 	.word	0xffff0000
 80031dc:	58025408 	.word	0x58025408
 80031e0:	5802541c 	.word	0x5802541c
 80031e4:	58025430 	.word	0x58025430
 80031e8:	58025444 	.word	0x58025444
 80031ec:	58025458 	.word	0x58025458
 80031f0:	5802546c 	.word	0x5802546c
 80031f4:	58025480 	.word	0x58025480
 80031f8:	58025494 	.word	0x58025494
 80031fc:	fffe000f 	.word	0xfffe000f
 8003200:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68d2      	ldr	r2, [r2, #12]
 8003206:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003208:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003210:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003218:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003220:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003228:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003230:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4313      	orrs	r3, r2
 8003236:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	4b6e      	ldr	r3, [pc, #440]	@ (8003400 <HAL_DMA_Init+0x650>)
 8003248:	4413      	add	r3, r2
 800324a:	4a6e      	ldr	r2, [pc, #440]	@ (8003404 <HAL_DMA_Init+0x654>)
 800324c:	fba2 2303 	umull	r2, r3, r2, r3
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	009a      	lsls	r2, r3, #2
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f002 f9b7 	bl	80055cc <DMA_CalcBaseAndBitshift>
 800325e:	4603      	mov	r3, r0
 8003260:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	2201      	movs	r2, #1
 800326c:	409a      	lsls	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	e008      	b.n	8003286 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2240      	movs	r2, #64	@ 0x40
 8003278:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2203      	movs	r2, #3
 800327e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e0b7      	b.n	80033f6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a5f      	ldr	r2, [pc, #380]	@ (8003408 <HAL_DMA_Init+0x658>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d072      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a5d      	ldr	r2, [pc, #372]	@ (800340c <HAL_DMA_Init+0x65c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d06d      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a5c      	ldr	r2, [pc, #368]	@ (8003410 <HAL_DMA_Init+0x660>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d068      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a5a      	ldr	r2, [pc, #360]	@ (8003414 <HAL_DMA_Init+0x664>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d063      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a59      	ldr	r2, [pc, #356]	@ (8003418 <HAL_DMA_Init+0x668>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d05e      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a57      	ldr	r2, [pc, #348]	@ (800341c <HAL_DMA_Init+0x66c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d059      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a56      	ldr	r2, [pc, #344]	@ (8003420 <HAL_DMA_Init+0x670>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d054      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a54      	ldr	r2, [pc, #336]	@ (8003424 <HAL_DMA_Init+0x674>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d04f      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a53      	ldr	r2, [pc, #332]	@ (8003428 <HAL_DMA_Init+0x678>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d04a      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a51      	ldr	r2, [pc, #324]	@ (800342c <HAL_DMA_Init+0x67c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d045      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a50      	ldr	r2, [pc, #320]	@ (8003430 <HAL_DMA_Init+0x680>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d040      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a4e      	ldr	r2, [pc, #312]	@ (8003434 <HAL_DMA_Init+0x684>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d03b      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a4d      	ldr	r2, [pc, #308]	@ (8003438 <HAL_DMA_Init+0x688>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d036      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a4b      	ldr	r2, [pc, #300]	@ (800343c <HAL_DMA_Init+0x68c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d031      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a4a      	ldr	r2, [pc, #296]	@ (8003440 <HAL_DMA_Init+0x690>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d02c      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a48      	ldr	r2, [pc, #288]	@ (8003444 <HAL_DMA_Init+0x694>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d027      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a47      	ldr	r2, [pc, #284]	@ (8003448 <HAL_DMA_Init+0x698>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d022      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a45      	ldr	r2, [pc, #276]	@ (800344c <HAL_DMA_Init+0x69c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d01d      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a44      	ldr	r2, [pc, #272]	@ (8003450 <HAL_DMA_Init+0x6a0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d018      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a42      	ldr	r2, [pc, #264]	@ (8003454 <HAL_DMA_Init+0x6a4>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d013      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a41      	ldr	r2, [pc, #260]	@ (8003458 <HAL_DMA_Init+0x6a8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d00e      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a3f      	ldr	r2, [pc, #252]	@ (800345c <HAL_DMA_Init+0x6ac>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d009      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a3e      	ldr	r2, [pc, #248]	@ (8003460 <HAL_DMA_Init+0x6b0>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d004      	beq.n	8003376 <HAL_DMA_Init+0x5c6>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a3c      	ldr	r2, [pc, #240]	@ (8003464 <HAL_DMA_Init+0x6b4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d101      	bne.n	800337a <HAL_DMA_Init+0x5ca>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <HAL_DMA_Init+0x5cc>
 800337a:	2300      	movs	r3, #0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d032      	beq.n	80033e6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f002 fa51 	bl	8005828 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b80      	cmp	r3, #128	@ 0x80
 800338c:	d102      	bne.n	8003394 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80033a8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d010      	beq.n	80033d4 <HAL_DMA_Init+0x624>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d80c      	bhi.n	80033d4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f002 face 	bl	800595c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	e008      	b.n	80033e6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	a7fdabf8 	.word	0xa7fdabf8
 8003404:	cccccccd 	.word	0xcccccccd
 8003408:	40020010 	.word	0x40020010
 800340c:	40020028 	.word	0x40020028
 8003410:	40020040 	.word	0x40020040
 8003414:	40020058 	.word	0x40020058
 8003418:	40020070 	.word	0x40020070
 800341c:	40020088 	.word	0x40020088
 8003420:	400200a0 	.word	0x400200a0
 8003424:	400200b8 	.word	0x400200b8
 8003428:	40020410 	.word	0x40020410
 800342c:	40020428 	.word	0x40020428
 8003430:	40020440 	.word	0x40020440
 8003434:	40020458 	.word	0x40020458
 8003438:	40020470 	.word	0x40020470
 800343c:	40020488 	.word	0x40020488
 8003440:	400204a0 	.word	0x400204a0
 8003444:	400204b8 	.word	0x400204b8
 8003448:	58025408 	.word	0x58025408
 800344c:	5802541c 	.word	0x5802541c
 8003450:	58025430 	.word	0x58025430
 8003454:	58025444 	.word	0x58025444
 8003458:	58025458 	.word	0x58025458
 800345c:	5802546c 	.word	0x5802546c
 8003460:	58025480 	.word	0x58025480
 8003464:	58025494 	.word	0x58025494

08003468 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e226      	b.n	80038d2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_DMA_Start_IT+0x2a>
 800348e:	2302      	movs	r3, #2
 8003490:	e21f      	b.n	80038d2 <HAL_DMA_Start_IT+0x46a>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	f040 820a 	bne.w	80038bc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a68      	ldr	r2, [pc, #416]	@ (800365c <HAL_DMA_Start_IT+0x1f4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d04a      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a66      	ldr	r2, [pc, #408]	@ (8003660 <HAL_DMA_Start_IT+0x1f8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d045      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a65      	ldr	r2, [pc, #404]	@ (8003664 <HAL_DMA_Start_IT+0x1fc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d040      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a63      	ldr	r2, [pc, #396]	@ (8003668 <HAL_DMA_Start_IT+0x200>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d03b      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a62      	ldr	r2, [pc, #392]	@ (800366c <HAL_DMA_Start_IT+0x204>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d036      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a60      	ldr	r2, [pc, #384]	@ (8003670 <HAL_DMA_Start_IT+0x208>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d031      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a5f      	ldr	r2, [pc, #380]	@ (8003674 <HAL_DMA_Start_IT+0x20c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d02c      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a5d      	ldr	r2, [pc, #372]	@ (8003678 <HAL_DMA_Start_IT+0x210>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d027      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a5c      	ldr	r2, [pc, #368]	@ (800367c <HAL_DMA_Start_IT+0x214>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d022      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a5a      	ldr	r2, [pc, #360]	@ (8003680 <HAL_DMA_Start_IT+0x218>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d01d      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a59      	ldr	r2, [pc, #356]	@ (8003684 <HAL_DMA_Start_IT+0x21c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d018      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a57      	ldr	r2, [pc, #348]	@ (8003688 <HAL_DMA_Start_IT+0x220>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d013      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a56      	ldr	r2, [pc, #344]	@ (800368c <HAL_DMA_Start_IT+0x224>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d00e      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a54      	ldr	r2, [pc, #336]	@ (8003690 <HAL_DMA_Start_IT+0x228>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d009      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a53      	ldr	r2, [pc, #332]	@ (8003694 <HAL_DMA_Start_IT+0x22c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d004      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a51      	ldr	r2, [pc, #324]	@ (8003698 <HAL_DMA_Start_IT+0x230>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d108      	bne.n	8003568 <HAL_DMA_Start_IT+0x100>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0201 	bic.w	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	e007      	b.n	8003578 <HAL_DMA_Start_IT+0x110>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f001 fe78 	bl	8005274 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a34      	ldr	r2, [pc, #208]	@ (800365c <HAL_DMA_Start_IT+0x1f4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d04a      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a33      	ldr	r2, [pc, #204]	@ (8003660 <HAL_DMA_Start_IT+0x1f8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d045      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a31      	ldr	r2, [pc, #196]	@ (8003664 <HAL_DMA_Start_IT+0x1fc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d040      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a30      	ldr	r2, [pc, #192]	@ (8003668 <HAL_DMA_Start_IT+0x200>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d03b      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a2e      	ldr	r2, [pc, #184]	@ (800366c <HAL_DMA_Start_IT+0x204>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d036      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a2d      	ldr	r2, [pc, #180]	@ (8003670 <HAL_DMA_Start_IT+0x208>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d031      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003674 <HAL_DMA_Start_IT+0x20c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d02c      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a2a      	ldr	r2, [pc, #168]	@ (8003678 <HAL_DMA_Start_IT+0x210>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d027      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a28      	ldr	r2, [pc, #160]	@ (800367c <HAL_DMA_Start_IT+0x214>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d022      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a27      	ldr	r2, [pc, #156]	@ (8003680 <HAL_DMA_Start_IT+0x218>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d01d      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a25      	ldr	r2, [pc, #148]	@ (8003684 <HAL_DMA_Start_IT+0x21c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d018      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a24      	ldr	r2, [pc, #144]	@ (8003688 <HAL_DMA_Start_IT+0x220>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d013      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a22      	ldr	r2, [pc, #136]	@ (800368c <HAL_DMA_Start_IT+0x224>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00e      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a21      	ldr	r2, [pc, #132]	@ (8003690 <HAL_DMA_Start_IT+0x228>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d009      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1f      	ldr	r2, [pc, #124]	@ (8003694 <HAL_DMA_Start_IT+0x22c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d004      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a1e      	ldr	r2, [pc, #120]	@ (8003698 <HAL_DMA_Start_IT+0x230>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d101      	bne.n	8003628 <HAL_DMA_Start_IT+0x1c0>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <HAL_DMA_Start_IT+0x1c2>
 8003628:	2300      	movs	r3, #0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d036      	beq.n	800369c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f023 021e 	bic.w	r2, r3, #30
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0216 	orr.w	r2, r2, #22
 8003640:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d03e      	beq.n	80036c8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0208 	orr.w	r2, r2, #8
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	e035      	b.n	80036c8 <HAL_DMA_Start_IT+0x260>
 800365c:	40020010 	.word	0x40020010
 8003660:	40020028 	.word	0x40020028
 8003664:	40020040 	.word	0x40020040
 8003668:	40020058 	.word	0x40020058
 800366c:	40020070 	.word	0x40020070
 8003670:	40020088 	.word	0x40020088
 8003674:	400200a0 	.word	0x400200a0
 8003678:	400200b8 	.word	0x400200b8
 800367c:	40020410 	.word	0x40020410
 8003680:	40020428 	.word	0x40020428
 8003684:	40020440 	.word	0x40020440
 8003688:	40020458 	.word	0x40020458
 800368c:	40020470 	.word	0x40020470
 8003690:	40020488 	.word	0x40020488
 8003694:	400204a0 	.word	0x400204a0
 8003698:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 020e 	bic.w	r2, r3, #14
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 020a 	orr.w	r2, r2, #10
 80036ae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d007      	beq.n	80036c8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0204 	orr.w	r2, r2, #4
 80036c6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a83      	ldr	r2, [pc, #524]	@ (80038dc <HAL_DMA_Start_IT+0x474>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d072      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a82      	ldr	r2, [pc, #520]	@ (80038e0 <HAL_DMA_Start_IT+0x478>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d06d      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a80      	ldr	r2, [pc, #512]	@ (80038e4 <HAL_DMA_Start_IT+0x47c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d068      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a7f      	ldr	r2, [pc, #508]	@ (80038e8 <HAL_DMA_Start_IT+0x480>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d063      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a7d      	ldr	r2, [pc, #500]	@ (80038ec <HAL_DMA_Start_IT+0x484>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d05e      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a7c      	ldr	r2, [pc, #496]	@ (80038f0 <HAL_DMA_Start_IT+0x488>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d059      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a7a      	ldr	r2, [pc, #488]	@ (80038f4 <HAL_DMA_Start_IT+0x48c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d054      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a79      	ldr	r2, [pc, #484]	@ (80038f8 <HAL_DMA_Start_IT+0x490>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d04f      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a77      	ldr	r2, [pc, #476]	@ (80038fc <HAL_DMA_Start_IT+0x494>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d04a      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a76      	ldr	r2, [pc, #472]	@ (8003900 <HAL_DMA_Start_IT+0x498>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d045      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a74      	ldr	r2, [pc, #464]	@ (8003904 <HAL_DMA_Start_IT+0x49c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d040      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a73      	ldr	r2, [pc, #460]	@ (8003908 <HAL_DMA_Start_IT+0x4a0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d03b      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a71      	ldr	r2, [pc, #452]	@ (800390c <HAL_DMA_Start_IT+0x4a4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d036      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a70      	ldr	r2, [pc, #448]	@ (8003910 <HAL_DMA_Start_IT+0x4a8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d031      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a6e      	ldr	r2, [pc, #440]	@ (8003914 <HAL_DMA_Start_IT+0x4ac>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d02c      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a6d      	ldr	r2, [pc, #436]	@ (8003918 <HAL_DMA_Start_IT+0x4b0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d027      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a6b      	ldr	r2, [pc, #428]	@ (800391c <HAL_DMA_Start_IT+0x4b4>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d022      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a6a      	ldr	r2, [pc, #424]	@ (8003920 <HAL_DMA_Start_IT+0x4b8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d01d      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a68      	ldr	r2, [pc, #416]	@ (8003924 <HAL_DMA_Start_IT+0x4bc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d018      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a67      	ldr	r2, [pc, #412]	@ (8003928 <HAL_DMA_Start_IT+0x4c0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d013      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a65      	ldr	r2, [pc, #404]	@ (800392c <HAL_DMA_Start_IT+0x4c4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00e      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a64      	ldr	r2, [pc, #400]	@ (8003930 <HAL_DMA_Start_IT+0x4c8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d009      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a62      	ldr	r2, [pc, #392]	@ (8003934 <HAL_DMA_Start_IT+0x4cc>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d004      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a61      	ldr	r2, [pc, #388]	@ (8003938 <HAL_DMA_Start_IT+0x4d0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d101      	bne.n	80037bc <HAL_DMA_Start_IT+0x354>
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <HAL_DMA_Start_IT+0x356>
 80037bc:	2300      	movs	r3, #0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d01a      	beq.n	80037f8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037de:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d007      	beq.n	80037f8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037f6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a37      	ldr	r2, [pc, #220]	@ (80038dc <HAL_DMA_Start_IT+0x474>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d04a      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a36      	ldr	r2, [pc, #216]	@ (80038e0 <HAL_DMA_Start_IT+0x478>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d045      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a34      	ldr	r2, [pc, #208]	@ (80038e4 <HAL_DMA_Start_IT+0x47c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d040      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a33      	ldr	r2, [pc, #204]	@ (80038e8 <HAL_DMA_Start_IT+0x480>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d03b      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a31      	ldr	r2, [pc, #196]	@ (80038ec <HAL_DMA_Start_IT+0x484>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d036      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a30      	ldr	r2, [pc, #192]	@ (80038f0 <HAL_DMA_Start_IT+0x488>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d031      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a2e      	ldr	r2, [pc, #184]	@ (80038f4 <HAL_DMA_Start_IT+0x48c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d02c      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a2d      	ldr	r2, [pc, #180]	@ (80038f8 <HAL_DMA_Start_IT+0x490>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d027      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a2b      	ldr	r2, [pc, #172]	@ (80038fc <HAL_DMA_Start_IT+0x494>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d022      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a2a      	ldr	r2, [pc, #168]	@ (8003900 <HAL_DMA_Start_IT+0x498>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d01d      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a28      	ldr	r2, [pc, #160]	@ (8003904 <HAL_DMA_Start_IT+0x49c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d018      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a27      	ldr	r2, [pc, #156]	@ (8003908 <HAL_DMA_Start_IT+0x4a0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d013      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a25      	ldr	r2, [pc, #148]	@ (800390c <HAL_DMA_Start_IT+0x4a4>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00e      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a24      	ldr	r2, [pc, #144]	@ (8003910 <HAL_DMA_Start_IT+0x4a8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d009      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a22      	ldr	r2, [pc, #136]	@ (8003914 <HAL_DMA_Start_IT+0x4ac>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d004      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a21      	ldr	r2, [pc, #132]	@ (8003918 <HAL_DMA_Start_IT+0x4b0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d108      	bne.n	80038aa <HAL_DMA_Start_IT+0x442>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	e012      	b.n	80038d0 <HAL_DMA_Start_IT+0x468>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0201 	orr.w	r2, r2, #1
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e009      	b.n	80038d0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80038d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40020010 	.word	0x40020010
 80038e0:	40020028 	.word	0x40020028
 80038e4:	40020040 	.word	0x40020040
 80038e8:	40020058 	.word	0x40020058
 80038ec:	40020070 	.word	0x40020070
 80038f0:	40020088 	.word	0x40020088
 80038f4:	400200a0 	.word	0x400200a0
 80038f8:	400200b8 	.word	0x400200b8
 80038fc:	40020410 	.word	0x40020410
 8003900:	40020428 	.word	0x40020428
 8003904:	40020440 	.word	0x40020440
 8003908:	40020458 	.word	0x40020458
 800390c:	40020470 	.word	0x40020470
 8003910:	40020488 	.word	0x40020488
 8003914:	400204a0 	.word	0x400204a0
 8003918:	400204b8 	.word	0x400204b8
 800391c:	58025408 	.word	0x58025408
 8003920:	5802541c 	.word	0x5802541c
 8003924:	58025430 	.word	0x58025430
 8003928:	58025444 	.word	0x58025444
 800392c:	58025458 	.word	0x58025458
 8003930:	5802546c 	.word	0x5802546c
 8003934:	58025480 	.word	0x58025480
 8003938:	58025494 	.word	0x58025494

0800393c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003944:	f7fe fd84 	bl	8002450 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e2dc      	b.n	8003f0e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d008      	beq.n	8003972 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2280      	movs	r2, #128	@ 0x80
 8003964:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e2cd      	b.n	8003f0e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a76      	ldr	r2, [pc, #472]	@ (8003b50 <HAL_DMA_Abort+0x214>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d04a      	beq.n	8003a12 <HAL_DMA_Abort+0xd6>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a74      	ldr	r2, [pc, #464]	@ (8003b54 <HAL_DMA_Abort+0x218>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d045      	beq.n	8003a12 <HAL_DMA_Abort+0xd6>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a73      	ldr	r2, [pc, #460]	@ (8003b58 <HAL_DMA_Abort+0x21c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d040      	beq.n	8003a12 <HAL_DMA_Abort+0xd6>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a71      	ldr	r2, [pc, #452]	@ (8003b5c <HAL_DMA_Abort+0x220>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d03b      	beq.n	8003a12 <HAL_DMA_Abort+0xd6>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a70      	ldr	r2, [pc, #448]	@ (8003b60 <HAL_DMA_Abort+0x224>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d036      	beq.n	8003a12 <HAL_DMA_Abort+0xd6>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a6e      	ldr	r2, [pc, #440]	@ (8003b64 <HAL_DMA_Abort+0x228>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d031      	beq.n	8003a12 <HAL_DMA_Abort+0xd6>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a6d      	ldr	r2, [pc, #436]	@ (8003b68 <HAL_DMA_Abort+0x22c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d02c      	beq.n	8003a12 <HAL_DMA_Abort+0xd6>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a6b      	ldr	r2, [pc, #428]	@ (8003b6c <HAL_DMA_Abort+0x230>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d027      	beq.n	8003a12 <HAL_DMA_Abort+0xd6>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a6a      	ldr	r2, [pc, #424]	@ (8003b70 <HAL_DMA_Abort+0x234>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d022      	beq.n	8003a12 <HAL_DMA_Abort+0xd6>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a68      	ldr	r2, [pc, #416]	@ (8003b74 <HAL_DMA_Abort+0x238>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d01d      	beq.n	8003a12 <HAL_DMA_Abort+0xd6>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a67      	ldr	r2, [pc, #412]	@ (8003b78 <HAL_DMA_Abort+0x23c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d018      	beq.n	8003a12 <HAL_DMA_Abort+0xd6>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a65      	ldr	r2, [pc, #404]	@ (8003b7c <HAL_DMA_Abort+0x240>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <HAL_DMA_Abort+0xd6>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a64      	ldr	r2, [pc, #400]	@ (8003b80 <HAL_DMA_Abort+0x244>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d00e      	beq.n	8003a12 <HAL_DMA_Abort+0xd6>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a62      	ldr	r2, [pc, #392]	@ (8003b84 <HAL_DMA_Abort+0x248>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d009      	beq.n	8003a12 <HAL_DMA_Abort+0xd6>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a61      	ldr	r2, [pc, #388]	@ (8003b88 <HAL_DMA_Abort+0x24c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d004      	beq.n	8003a12 <HAL_DMA_Abort+0xd6>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a5f      	ldr	r2, [pc, #380]	@ (8003b8c <HAL_DMA_Abort+0x250>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d101      	bne.n	8003a16 <HAL_DMA_Abort+0xda>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <HAL_DMA_Abort+0xdc>
 8003a16:	2300      	movs	r3, #0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d013      	beq.n	8003a44 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 021e 	bic.w	r2, r2, #30
 8003a2a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a3a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	617b      	str	r3, [r7, #20]
 8003a42:	e00a      	b.n	8003a5a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 020e 	bic.w	r2, r2, #14
 8003a52:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a3c      	ldr	r2, [pc, #240]	@ (8003b50 <HAL_DMA_Abort+0x214>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d072      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a3a      	ldr	r2, [pc, #232]	@ (8003b54 <HAL_DMA_Abort+0x218>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d06d      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a39      	ldr	r2, [pc, #228]	@ (8003b58 <HAL_DMA_Abort+0x21c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d068      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a37      	ldr	r2, [pc, #220]	@ (8003b5c <HAL_DMA_Abort+0x220>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d063      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a36      	ldr	r2, [pc, #216]	@ (8003b60 <HAL_DMA_Abort+0x224>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d05e      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a34      	ldr	r2, [pc, #208]	@ (8003b64 <HAL_DMA_Abort+0x228>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d059      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a33      	ldr	r2, [pc, #204]	@ (8003b68 <HAL_DMA_Abort+0x22c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d054      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a31      	ldr	r2, [pc, #196]	@ (8003b6c <HAL_DMA_Abort+0x230>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d04f      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a30      	ldr	r2, [pc, #192]	@ (8003b70 <HAL_DMA_Abort+0x234>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d04a      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a2e      	ldr	r2, [pc, #184]	@ (8003b74 <HAL_DMA_Abort+0x238>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d045      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a2d      	ldr	r2, [pc, #180]	@ (8003b78 <HAL_DMA_Abort+0x23c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d040      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2b      	ldr	r2, [pc, #172]	@ (8003b7c <HAL_DMA_Abort+0x240>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d03b      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8003b80 <HAL_DMA_Abort+0x244>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d036      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a28      	ldr	r2, [pc, #160]	@ (8003b84 <HAL_DMA_Abort+0x248>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d031      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a27      	ldr	r2, [pc, #156]	@ (8003b88 <HAL_DMA_Abort+0x24c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d02c      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a25      	ldr	r2, [pc, #148]	@ (8003b8c <HAL_DMA_Abort+0x250>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d027      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a24      	ldr	r2, [pc, #144]	@ (8003b90 <HAL_DMA_Abort+0x254>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d022      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a22      	ldr	r2, [pc, #136]	@ (8003b94 <HAL_DMA_Abort+0x258>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d01d      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a21      	ldr	r2, [pc, #132]	@ (8003b98 <HAL_DMA_Abort+0x25c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d018      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8003b9c <HAL_DMA_Abort+0x260>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d013      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba0 <HAL_DMA_Abort+0x264>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00e      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba4 <HAL_DMA_Abort+0x268>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d009      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba8 <HAL_DMA_Abort+0x26c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d004      	beq.n	8003b4a <HAL_DMA_Abort+0x20e>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a19      	ldr	r2, [pc, #100]	@ (8003bac <HAL_DMA_Abort+0x270>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d132      	bne.n	8003bb0 <HAL_DMA_Abort+0x274>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e031      	b.n	8003bb2 <HAL_DMA_Abort+0x276>
 8003b4e:	bf00      	nop
 8003b50:	40020010 	.word	0x40020010
 8003b54:	40020028 	.word	0x40020028
 8003b58:	40020040 	.word	0x40020040
 8003b5c:	40020058 	.word	0x40020058
 8003b60:	40020070 	.word	0x40020070
 8003b64:	40020088 	.word	0x40020088
 8003b68:	400200a0 	.word	0x400200a0
 8003b6c:	400200b8 	.word	0x400200b8
 8003b70:	40020410 	.word	0x40020410
 8003b74:	40020428 	.word	0x40020428
 8003b78:	40020440 	.word	0x40020440
 8003b7c:	40020458 	.word	0x40020458
 8003b80:	40020470 	.word	0x40020470
 8003b84:	40020488 	.word	0x40020488
 8003b88:	400204a0 	.word	0x400204a0
 8003b8c:	400204b8 	.word	0x400204b8
 8003b90:	58025408 	.word	0x58025408
 8003b94:	5802541c 	.word	0x5802541c
 8003b98:	58025430 	.word	0x58025430
 8003b9c:	58025444 	.word	0x58025444
 8003ba0:	58025458 	.word	0x58025458
 8003ba4:	5802546c 	.word	0x5802546c
 8003ba8:	58025480 	.word	0x58025480
 8003bac:	58025494 	.word	0x58025494
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d007      	beq.n	8003bc6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a6d      	ldr	r2, [pc, #436]	@ (8003d80 <HAL_DMA_Abort+0x444>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d04a      	beq.n	8003c66 <HAL_DMA_Abort+0x32a>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a6b      	ldr	r2, [pc, #428]	@ (8003d84 <HAL_DMA_Abort+0x448>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d045      	beq.n	8003c66 <HAL_DMA_Abort+0x32a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a6a      	ldr	r2, [pc, #424]	@ (8003d88 <HAL_DMA_Abort+0x44c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d040      	beq.n	8003c66 <HAL_DMA_Abort+0x32a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a68      	ldr	r2, [pc, #416]	@ (8003d8c <HAL_DMA_Abort+0x450>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d03b      	beq.n	8003c66 <HAL_DMA_Abort+0x32a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a67      	ldr	r2, [pc, #412]	@ (8003d90 <HAL_DMA_Abort+0x454>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d036      	beq.n	8003c66 <HAL_DMA_Abort+0x32a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a65      	ldr	r2, [pc, #404]	@ (8003d94 <HAL_DMA_Abort+0x458>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d031      	beq.n	8003c66 <HAL_DMA_Abort+0x32a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a64      	ldr	r2, [pc, #400]	@ (8003d98 <HAL_DMA_Abort+0x45c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d02c      	beq.n	8003c66 <HAL_DMA_Abort+0x32a>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a62      	ldr	r2, [pc, #392]	@ (8003d9c <HAL_DMA_Abort+0x460>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d027      	beq.n	8003c66 <HAL_DMA_Abort+0x32a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a61      	ldr	r2, [pc, #388]	@ (8003da0 <HAL_DMA_Abort+0x464>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d022      	beq.n	8003c66 <HAL_DMA_Abort+0x32a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a5f      	ldr	r2, [pc, #380]	@ (8003da4 <HAL_DMA_Abort+0x468>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d01d      	beq.n	8003c66 <HAL_DMA_Abort+0x32a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a5e      	ldr	r2, [pc, #376]	@ (8003da8 <HAL_DMA_Abort+0x46c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d018      	beq.n	8003c66 <HAL_DMA_Abort+0x32a>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a5c      	ldr	r2, [pc, #368]	@ (8003dac <HAL_DMA_Abort+0x470>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d013      	beq.n	8003c66 <HAL_DMA_Abort+0x32a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a5b      	ldr	r2, [pc, #364]	@ (8003db0 <HAL_DMA_Abort+0x474>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00e      	beq.n	8003c66 <HAL_DMA_Abort+0x32a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a59      	ldr	r2, [pc, #356]	@ (8003db4 <HAL_DMA_Abort+0x478>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d009      	beq.n	8003c66 <HAL_DMA_Abort+0x32a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a58      	ldr	r2, [pc, #352]	@ (8003db8 <HAL_DMA_Abort+0x47c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d004      	beq.n	8003c66 <HAL_DMA_Abort+0x32a>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a56      	ldr	r2, [pc, #344]	@ (8003dbc <HAL_DMA_Abort+0x480>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d108      	bne.n	8003c78 <HAL_DMA_Abort+0x33c>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0201 	bic.w	r2, r2, #1
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	e007      	b.n	8003c88 <HAL_DMA_Abort+0x34c>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0201 	bic.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003c88:	e013      	b.n	8003cb2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c8a:	f7fe fbe1 	bl	8002450 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b05      	cmp	r3, #5
 8003c96:	d90c      	bls.n	8003cb2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e12d      	b.n	8003f0e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1e5      	bne.n	8003c8a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a2f      	ldr	r2, [pc, #188]	@ (8003d80 <HAL_DMA_Abort+0x444>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d04a      	beq.n	8003d5e <HAL_DMA_Abort+0x422>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a2d      	ldr	r2, [pc, #180]	@ (8003d84 <HAL_DMA_Abort+0x448>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d045      	beq.n	8003d5e <HAL_DMA_Abort+0x422>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a2c      	ldr	r2, [pc, #176]	@ (8003d88 <HAL_DMA_Abort+0x44c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d040      	beq.n	8003d5e <HAL_DMA_Abort+0x422>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a2a      	ldr	r2, [pc, #168]	@ (8003d8c <HAL_DMA_Abort+0x450>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d03b      	beq.n	8003d5e <HAL_DMA_Abort+0x422>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a29      	ldr	r2, [pc, #164]	@ (8003d90 <HAL_DMA_Abort+0x454>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d036      	beq.n	8003d5e <HAL_DMA_Abort+0x422>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a27      	ldr	r2, [pc, #156]	@ (8003d94 <HAL_DMA_Abort+0x458>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d031      	beq.n	8003d5e <HAL_DMA_Abort+0x422>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a26      	ldr	r2, [pc, #152]	@ (8003d98 <HAL_DMA_Abort+0x45c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d02c      	beq.n	8003d5e <HAL_DMA_Abort+0x422>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a24      	ldr	r2, [pc, #144]	@ (8003d9c <HAL_DMA_Abort+0x460>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d027      	beq.n	8003d5e <HAL_DMA_Abort+0x422>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a23      	ldr	r2, [pc, #140]	@ (8003da0 <HAL_DMA_Abort+0x464>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d022      	beq.n	8003d5e <HAL_DMA_Abort+0x422>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a21      	ldr	r2, [pc, #132]	@ (8003da4 <HAL_DMA_Abort+0x468>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d01d      	beq.n	8003d5e <HAL_DMA_Abort+0x422>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a20      	ldr	r2, [pc, #128]	@ (8003da8 <HAL_DMA_Abort+0x46c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d018      	beq.n	8003d5e <HAL_DMA_Abort+0x422>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a1e      	ldr	r2, [pc, #120]	@ (8003dac <HAL_DMA_Abort+0x470>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d013      	beq.n	8003d5e <HAL_DMA_Abort+0x422>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a1d      	ldr	r2, [pc, #116]	@ (8003db0 <HAL_DMA_Abort+0x474>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d00e      	beq.n	8003d5e <HAL_DMA_Abort+0x422>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1b      	ldr	r2, [pc, #108]	@ (8003db4 <HAL_DMA_Abort+0x478>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d009      	beq.n	8003d5e <HAL_DMA_Abort+0x422>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1a      	ldr	r2, [pc, #104]	@ (8003db8 <HAL_DMA_Abort+0x47c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d004      	beq.n	8003d5e <HAL_DMA_Abort+0x422>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a18      	ldr	r2, [pc, #96]	@ (8003dbc <HAL_DMA_Abort+0x480>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d101      	bne.n	8003d62 <HAL_DMA_Abort+0x426>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <HAL_DMA_Abort+0x428>
 8003d62:	2300      	movs	r3, #0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d02b      	beq.n	8003dc0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d72:	f003 031f 	and.w	r3, r3, #31
 8003d76:	223f      	movs	r2, #63	@ 0x3f
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	609a      	str	r2, [r3, #8]
 8003d7e:	e02a      	b.n	8003dd6 <HAL_DMA_Abort+0x49a>
 8003d80:	40020010 	.word	0x40020010
 8003d84:	40020028 	.word	0x40020028
 8003d88:	40020040 	.word	0x40020040
 8003d8c:	40020058 	.word	0x40020058
 8003d90:	40020070 	.word	0x40020070
 8003d94:	40020088 	.word	0x40020088
 8003d98:	400200a0 	.word	0x400200a0
 8003d9c:	400200b8 	.word	0x400200b8
 8003da0:	40020410 	.word	0x40020410
 8003da4:	40020428 	.word	0x40020428
 8003da8:	40020440 	.word	0x40020440
 8003dac:	40020458 	.word	0x40020458
 8003db0:	40020470 	.word	0x40020470
 8003db4:	40020488 	.word	0x40020488
 8003db8:	400204a0 	.word	0x400204a0
 8003dbc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dca:	f003 031f 	and.w	r3, r3, #31
 8003dce:	2201      	movs	r2, #1
 8003dd0:	409a      	lsls	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a4f      	ldr	r2, [pc, #316]	@ (8003f18 <HAL_DMA_Abort+0x5dc>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d072      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a4d      	ldr	r2, [pc, #308]	@ (8003f1c <HAL_DMA_Abort+0x5e0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d06d      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a4c      	ldr	r2, [pc, #304]	@ (8003f20 <HAL_DMA_Abort+0x5e4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d068      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a4a      	ldr	r2, [pc, #296]	@ (8003f24 <HAL_DMA_Abort+0x5e8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d063      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a49      	ldr	r2, [pc, #292]	@ (8003f28 <HAL_DMA_Abort+0x5ec>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d05e      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a47      	ldr	r2, [pc, #284]	@ (8003f2c <HAL_DMA_Abort+0x5f0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d059      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a46      	ldr	r2, [pc, #280]	@ (8003f30 <HAL_DMA_Abort+0x5f4>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d054      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a44      	ldr	r2, [pc, #272]	@ (8003f34 <HAL_DMA_Abort+0x5f8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d04f      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a43      	ldr	r2, [pc, #268]	@ (8003f38 <HAL_DMA_Abort+0x5fc>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d04a      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a41      	ldr	r2, [pc, #260]	@ (8003f3c <HAL_DMA_Abort+0x600>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d045      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a40      	ldr	r2, [pc, #256]	@ (8003f40 <HAL_DMA_Abort+0x604>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d040      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a3e      	ldr	r2, [pc, #248]	@ (8003f44 <HAL_DMA_Abort+0x608>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d03b      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a3d      	ldr	r2, [pc, #244]	@ (8003f48 <HAL_DMA_Abort+0x60c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d036      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a3b      	ldr	r2, [pc, #236]	@ (8003f4c <HAL_DMA_Abort+0x610>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d031      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a3a      	ldr	r2, [pc, #232]	@ (8003f50 <HAL_DMA_Abort+0x614>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d02c      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a38      	ldr	r2, [pc, #224]	@ (8003f54 <HAL_DMA_Abort+0x618>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d027      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a37      	ldr	r2, [pc, #220]	@ (8003f58 <HAL_DMA_Abort+0x61c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d022      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a35      	ldr	r2, [pc, #212]	@ (8003f5c <HAL_DMA_Abort+0x620>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01d      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a34      	ldr	r2, [pc, #208]	@ (8003f60 <HAL_DMA_Abort+0x624>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d018      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a32      	ldr	r2, [pc, #200]	@ (8003f64 <HAL_DMA_Abort+0x628>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d013      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a31      	ldr	r2, [pc, #196]	@ (8003f68 <HAL_DMA_Abort+0x62c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00e      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a2f      	ldr	r2, [pc, #188]	@ (8003f6c <HAL_DMA_Abort+0x630>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d009      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a2e      	ldr	r2, [pc, #184]	@ (8003f70 <HAL_DMA_Abort+0x634>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d004      	beq.n	8003ec6 <HAL_DMA_Abort+0x58a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a2c      	ldr	r2, [pc, #176]	@ (8003f74 <HAL_DMA_Abort+0x638>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d101      	bne.n	8003eca <HAL_DMA_Abort+0x58e>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <HAL_DMA_Abort+0x590>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d015      	beq.n	8003efc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ed8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00c      	beq.n	8003efc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ef0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003efa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40020010 	.word	0x40020010
 8003f1c:	40020028 	.word	0x40020028
 8003f20:	40020040 	.word	0x40020040
 8003f24:	40020058 	.word	0x40020058
 8003f28:	40020070 	.word	0x40020070
 8003f2c:	40020088 	.word	0x40020088
 8003f30:	400200a0 	.word	0x400200a0
 8003f34:	400200b8 	.word	0x400200b8
 8003f38:	40020410 	.word	0x40020410
 8003f3c:	40020428 	.word	0x40020428
 8003f40:	40020440 	.word	0x40020440
 8003f44:	40020458 	.word	0x40020458
 8003f48:	40020470 	.word	0x40020470
 8003f4c:	40020488 	.word	0x40020488
 8003f50:	400204a0 	.word	0x400204a0
 8003f54:	400204b8 	.word	0x400204b8
 8003f58:	58025408 	.word	0x58025408
 8003f5c:	5802541c 	.word	0x5802541c
 8003f60:	58025430 	.word	0x58025430
 8003f64:	58025444 	.word	0x58025444
 8003f68:	58025458 	.word	0x58025458
 8003f6c:	5802546c 	.word	0x5802546c
 8003f70:	58025480 	.word	0x58025480
 8003f74:	58025494 	.word	0x58025494

08003f78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e237      	b.n	80043fa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d004      	beq.n	8003fa0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2280      	movs	r2, #128	@ 0x80
 8003f9a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e22c      	b.n	80043fa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a5c      	ldr	r2, [pc, #368]	@ (8004118 <HAL_DMA_Abort_IT+0x1a0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d04a      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a5b      	ldr	r2, [pc, #364]	@ (800411c <HAL_DMA_Abort_IT+0x1a4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d045      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a59      	ldr	r2, [pc, #356]	@ (8004120 <HAL_DMA_Abort_IT+0x1a8>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d040      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a58      	ldr	r2, [pc, #352]	@ (8004124 <HAL_DMA_Abort_IT+0x1ac>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d03b      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a56      	ldr	r2, [pc, #344]	@ (8004128 <HAL_DMA_Abort_IT+0x1b0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d036      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a55      	ldr	r2, [pc, #340]	@ (800412c <HAL_DMA_Abort_IT+0x1b4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d031      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a53      	ldr	r2, [pc, #332]	@ (8004130 <HAL_DMA_Abort_IT+0x1b8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d02c      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a52      	ldr	r2, [pc, #328]	@ (8004134 <HAL_DMA_Abort_IT+0x1bc>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d027      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a50      	ldr	r2, [pc, #320]	@ (8004138 <HAL_DMA_Abort_IT+0x1c0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d022      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a4f      	ldr	r2, [pc, #316]	@ (800413c <HAL_DMA_Abort_IT+0x1c4>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d01d      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a4d      	ldr	r2, [pc, #308]	@ (8004140 <HAL_DMA_Abort_IT+0x1c8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d018      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a4c      	ldr	r2, [pc, #304]	@ (8004144 <HAL_DMA_Abort_IT+0x1cc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d013      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a4a      	ldr	r2, [pc, #296]	@ (8004148 <HAL_DMA_Abort_IT+0x1d0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00e      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a49      	ldr	r2, [pc, #292]	@ (800414c <HAL_DMA_Abort_IT+0x1d4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d009      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a47      	ldr	r2, [pc, #284]	@ (8004150 <HAL_DMA_Abort_IT+0x1d8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d004      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a46      	ldr	r2, [pc, #280]	@ (8004154 <HAL_DMA_Abort_IT+0x1dc>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d101      	bne.n	8004044 <HAL_DMA_Abort_IT+0xcc>
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <HAL_DMA_Abort_IT+0xce>
 8004044:	2300      	movs	r3, #0
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 8086 	beq.w	8004158 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2204      	movs	r2, #4
 8004050:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a2f      	ldr	r2, [pc, #188]	@ (8004118 <HAL_DMA_Abort_IT+0x1a0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d04a      	beq.n	80040f4 <HAL_DMA_Abort_IT+0x17c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a2e      	ldr	r2, [pc, #184]	@ (800411c <HAL_DMA_Abort_IT+0x1a4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d045      	beq.n	80040f4 <HAL_DMA_Abort_IT+0x17c>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a2c      	ldr	r2, [pc, #176]	@ (8004120 <HAL_DMA_Abort_IT+0x1a8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d040      	beq.n	80040f4 <HAL_DMA_Abort_IT+0x17c>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a2b      	ldr	r2, [pc, #172]	@ (8004124 <HAL_DMA_Abort_IT+0x1ac>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d03b      	beq.n	80040f4 <HAL_DMA_Abort_IT+0x17c>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a29      	ldr	r2, [pc, #164]	@ (8004128 <HAL_DMA_Abort_IT+0x1b0>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d036      	beq.n	80040f4 <HAL_DMA_Abort_IT+0x17c>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a28      	ldr	r2, [pc, #160]	@ (800412c <HAL_DMA_Abort_IT+0x1b4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d031      	beq.n	80040f4 <HAL_DMA_Abort_IT+0x17c>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a26      	ldr	r2, [pc, #152]	@ (8004130 <HAL_DMA_Abort_IT+0x1b8>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d02c      	beq.n	80040f4 <HAL_DMA_Abort_IT+0x17c>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a25      	ldr	r2, [pc, #148]	@ (8004134 <HAL_DMA_Abort_IT+0x1bc>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d027      	beq.n	80040f4 <HAL_DMA_Abort_IT+0x17c>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a23      	ldr	r2, [pc, #140]	@ (8004138 <HAL_DMA_Abort_IT+0x1c0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d022      	beq.n	80040f4 <HAL_DMA_Abort_IT+0x17c>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a22      	ldr	r2, [pc, #136]	@ (800413c <HAL_DMA_Abort_IT+0x1c4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d01d      	beq.n	80040f4 <HAL_DMA_Abort_IT+0x17c>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a20      	ldr	r2, [pc, #128]	@ (8004140 <HAL_DMA_Abort_IT+0x1c8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d018      	beq.n	80040f4 <HAL_DMA_Abort_IT+0x17c>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004144 <HAL_DMA_Abort_IT+0x1cc>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d013      	beq.n	80040f4 <HAL_DMA_Abort_IT+0x17c>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004148 <HAL_DMA_Abort_IT+0x1d0>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00e      	beq.n	80040f4 <HAL_DMA_Abort_IT+0x17c>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a1c      	ldr	r2, [pc, #112]	@ (800414c <HAL_DMA_Abort_IT+0x1d4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d009      	beq.n	80040f4 <HAL_DMA_Abort_IT+0x17c>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004150 <HAL_DMA_Abort_IT+0x1d8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d004      	beq.n	80040f4 <HAL_DMA_Abort_IT+0x17c>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a19      	ldr	r2, [pc, #100]	@ (8004154 <HAL_DMA_Abort_IT+0x1dc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d108      	bne.n	8004106 <HAL_DMA_Abort_IT+0x18e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0201 	bic.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	e178      	b.n	80043f8 <HAL_DMA_Abort_IT+0x480>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0201 	bic.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	e16f      	b.n	80043f8 <HAL_DMA_Abort_IT+0x480>
 8004118:	40020010 	.word	0x40020010
 800411c:	40020028 	.word	0x40020028
 8004120:	40020040 	.word	0x40020040
 8004124:	40020058 	.word	0x40020058
 8004128:	40020070 	.word	0x40020070
 800412c:	40020088 	.word	0x40020088
 8004130:	400200a0 	.word	0x400200a0
 8004134:	400200b8 	.word	0x400200b8
 8004138:	40020410 	.word	0x40020410
 800413c:	40020428 	.word	0x40020428
 8004140:	40020440 	.word	0x40020440
 8004144:	40020458 	.word	0x40020458
 8004148:	40020470 	.word	0x40020470
 800414c:	40020488 	.word	0x40020488
 8004150:	400204a0 	.word	0x400204a0
 8004154:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 020e 	bic.w	r2, r2, #14
 8004166:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a6c      	ldr	r2, [pc, #432]	@ (8004320 <HAL_DMA_Abort_IT+0x3a8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d04a      	beq.n	8004208 <HAL_DMA_Abort_IT+0x290>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a6b      	ldr	r2, [pc, #428]	@ (8004324 <HAL_DMA_Abort_IT+0x3ac>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d045      	beq.n	8004208 <HAL_DMA_Abort_IT+0x290>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a69      	ldr	r2, [pc, #420]	@ (8004328 <HAL_DMA_Abort_IT+0x3b0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d040      	beq.n	8004208 <HAL_DMA_Abort_IT+0x290>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a68      	ldr	r2, [pc, #416]	@ (800432c <HAL_DMA_Abort_IT+0x3b4>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d03b      	beq.n	8004208 <HAL_DMA_Abort_IT+0x290>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a66      	ldr	r2, [pc, #408]	@ (8004330 <HAL_DMA_Abort_IT+0x3b8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d036      	beq.n	8004208 <HAL_DMA_Abort_IT+0x290>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a65      	ldr	r2, [pc, #404]	@ (8004334 <HAL_DMA_Abort_IT+0x3bc>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d031      	beq.n	8004208 <HAL_DMA_Abort_IT+0x290>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a63      	ldr	r2, [pc, #396]	@ (8004338 <HAL_DMA_Abort_IT+0x3c0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d02c      	beq.n	8004208 <HAL_DMA_Abort_IT+0x290>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a62      	ldr	r2, [pc, #392]	@ (800433c <HAL_DMA_Abort_IT+0x3c4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d027      	beq.n	8004208 <HAL_DMA_Abort_IT+0x290>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a60      	ldr	r2, [pc, #384]	@ (8004340 <HAL_DMA_Abort_IT+0x3c8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d022      	beq.n	8004208 <HAL_DMA_Abort_IT+0x290>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a5f      	ldr	r2, [pc, #380]	@ (8004344 <HAL_DMA_Abort_IT+0x3cc>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d01d      	beq.n	8004208 <HAL_DMA_Abort_IT+0x290>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a5d      	ldr	r2, [pc, #372]	@ (8004348 <HAL_DMA_Abort_IT+0x3d0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d018      	beq.n	8004208 <HAL_DMA_Abort_IT+0x290>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a5c      	ldr	r2, [pc, #368]	@ (800434c <HAL_DMA_Abort_IT+0x3d4>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d013      	beq.n	8004208 <HAL_DMA_Abort_IT+0x290>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a5a      	ldr	r2, [pc, #360]	@ (8004350 <HAL_DMA_Abort_IT+0x3d8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00e      	beq.n	8004208 <HAL_DMA_Abort_IT+0x290>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a59      	ldr	r2, [pc, #356]	@ (8004354 <HAL_DMA_Abort_IT+0x3dc>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d009      	beq.n	8004208 <HAL_DMA_Abort_IT+0x290>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a57      	ldr	r2, [pc, #348]	@ (8004358 <HAL_DMA_Abort_IT+0x3e0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d004      	beq.n	8004208 <HAL_DMA_Abort_IT+0x290>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a56      	ldr	r2, [pc, #344]	@ (800435c <HAL_DMA_Abort_IT+0x3e4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d108      	bne.n	800421a <HAL_DMA_Abort_IT+0x2a2>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	e007      	b.n	800422a <HAL_DMA_Abort_IT+0x2b2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0201 	bic.w	r2, r2, #1
 8004228:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a3c      	ldr	r2, [pc, #240]	@ (8004320 <HAL_DMA_Abort_IT+0x3a8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d072      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a3a      	ldr	r2, [pc, #232]	@ (8004324 <HAL_DMA_Abort_IT+0x3ac>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d06d      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a39      	ldr	r2, [pc, #228]	@ (8004328 <HAL_DMA_Abort_IT+0x3b0>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d068      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a37      	ldr	r2, [pc, #220]	@ (800432c <HAL_DMA_Abort_IT+0x3b4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d063      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a36      	ldr	r2, [pc, #216]	@ (8004330 <HAL_DMA_Abort_IT+0x3b8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d05e      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a34      	ldr	r2, [pc, #208]	@ (8004334 <HAL_DMA_Abort_IT+0x3bc>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d059      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a33      	ldr	r2, [pc, #204]	@ (8004338 <HAL_DMA_Abort_IT+0x3c0>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d054      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a31      	ldr	r2, [pc, #196]	@ (800433c <HAL_DMA_Abort_IT+0x3c4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d04f      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a30      	ldr	r2, [pc, #192]	@ (8004340 <HAL_DMA_Abort_IT+0x3c8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d04a      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a2e      	ldr	r2, [pc, #184]	@ (8004344 <HAL_DMA_Abort_IT+0x3cc>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d045      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a2d      	ldr	r2, [pc, #180]	@ (8004348 <HAL_DMA_Abort_IT+0x3d0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d040      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a2b      	ldr	r2, [pc, #172]	@ (800434c <HAL_DMA_Abort_IT+0x3d4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d03b      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a2a      	ldr	r2, [pc, #168]	@ (8004350 <HAL_DMA_Abort_IT+0x3d8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d036      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a28      	ldr	r2, [pc, #160]	@ (8004354 <HAL_DMA_Abort_IT+0x3dc>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d031      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a27      	ldr	r2, [pc, #156]	@ (8004358 <HAL_DMA_Abort_IT+0x3e0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d02c      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a25      	ldr	r2, [pc, #148]	@ (800435c <HAL_DMA_Abort_IT+0x3e4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d027      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a24      	ldr	r2, [pc, #144]	@ (8004360 <HAL_DMA_Abort_IT+0x3e8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d022      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a22      	ldr	r2, [pc, #136]	@ (8004364 <HAL_DMA_Abort_IT+0x3ec>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d01d      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a21      	ldr	r2, [pc, #132]	@ (8004368 <HAL_DMA_Abort_IT+0x3f0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d018      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a1f      	ldr	r2, [pc, #124]	@ (800436c <HAL_DMA_Abort_IT+0x3f4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d013      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004370 <HAL_DMA_Abort_IT+0x3f8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00e      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a1c      	ldr	r2, [pc, #112]	@ (8004374 <HAL_DMA_Abort_IT+0x3fc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d009      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a1b      	ldr	r2, [pc, #108]	@ (8004378 <HAL_DMA_Abort_IT+0x400>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d004      	beq.n	800431a <HAL_DMA_Abort_IT+0x3a2>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a19      	ldr	r2, [pc, #100]	@ (800437c <HAL_DMA_Abort_IT+0x404>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d132      	bne.n	8004380 <HAL_DMA_Abort_IT+0x408>
 800431a:	2301      	movs	r3, #1
 800431c:	e031      	b.n	8004382 <HAL_DMA_Abort_IT+0x40a>
 800431e:	bf00      	nop
 8004320:	40020010 	.word	0x40020010
 8004324:	40020028 	.word	0x40020028
 8004328:	40020040 	.word	0x40020040
 800432c:	40020058 	.word	0x40020058
 8004330:	40020070 	.word	0x40020070
 8004334:	40020088 	.word	0x40020088
 8004338:	400200a0 	.word	0x400200a0
 800433c:	400200b8 	.word	0x400200b8
 8004340:	40020410 	.word	0x40020410
 8004344:	40020428 	.word	0x40020428
 8004348:	40020440 	.word	0x40020440
 800434c:	40020458 	.word	0x40020458
 8004350:	40020470 	.word	0x40020470
 8004354:	40020488 	.word	0x40020488
 8004358:	400204a0 	.word	0x400204a0
 800435c:	400204b8 	.word	0x400204b8
 8004360:	58025408 	.word	0x58025408
 8004364:	5802541c 	.word	0x5802541c
 8004368:	58025430 	.word	0x58025430
 800436c:	58025444 	.word	0x58025444
 8004370:	58025458 	.word	0x58025458
 8004374:	5802546c 	.word	0x5802546c
 8004378:	58025480 	.word	0x58025480
 800437c:	58025494 	.word	0x58025494
 8004380:	2300      	movs	r3, #0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d028      	beq.n	80043d8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004390:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004394:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800439a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a0:	f003 031f 	and.w	r3, r3, #31
 80043a4:	2201      	movs	r2, #1
 80043a6:	409a      	lsls	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80043b4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00c      	beq.n	80043d8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043cc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80043d6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop

08004404 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08a      	sub	sp, #40	@ 0x28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004410:	4b67      	ldr	r3, [pc, #412]	@ (80045b0 <HAL_DMA_IRQHandler+0x1ac>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a67      	ldr	r2, [pc, #412]	@ (80045b4 <HAL_DMA_IRQHandler+0x1b0>)
 8004416:	fba2 2303 	umull	r2, r3, r2, r3
 800441a:	0a9b      	lsrs	r3, r3, #10
 800441c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004422:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004428:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a5f      	ldr	r2, [pc, #380]	@ (80045b8 <HAL_DMA_IRQHandler+0x1b4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d04a      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xd2>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a5d      	ldr	r2, [pc, #372]	@ (80045bc <HAL_DMA_IRQHandler+0x1b8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d045      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xd2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a5c      	ldr	r2, [pc, #368]	@ (80045c0 <HAL_DMA_IRQHandler+0x1bc>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d040      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xd2>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a5a      	ldr	r2, [pc, #360]	@ (80045c4 <HAL_DMA_IRQHandler+0x1c0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d03b      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xd2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a59      	ldr	r2, [pc, #356]	@ (80045c8 <HAL_DMA_IRQHandler+0x1c4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d036      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xd2>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a57      	ldr	r2, [pc, #348]	@ (80045cc <HAL_DMA_IRQHandler+0x1c8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d031      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xd2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a56      	ldr	r2, [pc, #344]	@ (80045d0 <HAL_DMA_IRQHandler+0x1cc>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d02c      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xd2>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a54      	ldr	r2, [pc, #336]	@ (80045d4 <HAL_DMA_IRQHandler+0x1d0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d027      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xd2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a53      	ldr	r2, [pc, #332]	@ (80045d8 <HAL_DMA_IRQHandler+0x1d4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d022      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xd2>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a51      	ldr	r2, [pc, #324]	@ (80045dc <HAL_DMA_IRQHandler+0x1d8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d01d      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xd2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a50      	ldr	r2, [pc, #320]	@ (80045e0 <HAL_DMA_IRQHandler+0x1dc>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d018      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xd2>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a4e      	ldr	r2, [pc, #312]	@ (80045e4 <HAL_DMA_IRQHandler+0x1e0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xd2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a4d      	ldr	r2, [pc, #308]	@ (80045e8 <HAL_DMA_IRQHandler+0x1e4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00e      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xd2>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a4b      	ldr	r2, [pc, #300]	@ (80045ec <HAL_DMA_IRQHandler+0x1e8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d009      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xd2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a4a      	ldr	r2, [pc, #296]	@ (80045f0 <HAL_DMA_IRQHandler+0x1ec>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d004      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xd2>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a48      	ldr	r2, [pc, #288]	@ (80045f4 <HAL_DMA_IRQHandler+0x1f0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d101      	bne.n	80044da <HAL_DMA_IRQHandler+0xd6>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <HAL_DMA_IRQHandler+0xd8>
 80044da:	2300      	movs	r3, #0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 842b 	beq.w	8004d38 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	2208      	movs	r2, #8
 80044ec:	409a      	lsls	r2, r3
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	4013      	ands	r3, r2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 80a2 	beq.w	800463c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a2e      	ldr	r2, [pc, #184]	@ (80045b8 <HAL_DMA_IRQHandler+0x1b4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d04a      	beq.n	8004598 <HAL_DMA_IRQHandler+0x194>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a2d      	ldr	r2, [pc, #180]	@ (80045bc <HAL_DMA_IRQHandler+0x1b8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d045      	beq.n	8004598 <HAL_DMA_IRQHandler+0x194>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a2b      	ldr	r2, [pc, #172]	@ (80045c0 <HAL_DMA_IRQHandler+0x1bc>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d040      	beq.n	8004598 <HAL_DMA_IRQHandler+0x194>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a2a      	ldr	r2, [pc, #168]	@ (80045c4 <HAL_DMA_IRQHandler+0x1c0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d03b      	beq.n	8004598 <HAL_DMA_IRQHandler+0x194>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a28      	ldr	r2, [pc, #160]	@ (80045c8 <HAL_DMA_IRQHandler+0x1c4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d036      	beq.n	8004598 <HAL_DMA_IRQHandler+0x194>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a27      	ldr	r2, [pc, #156]	@ (80045cc <HAL_DMA_IRQHandler+0x1c8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d031      	beq.n	8004598 <HAL_DMA_IRQHandler+0x194>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a25      	ldr	r2, [pc, #148]	@ (80045d0 <HAL_DMA_IRQHandler+0x1cc>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d02c      	beq.n	8004598 <HAL_DMA_IRQHandler+0x194>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a24      	ldr	r2, [pc, #144]	@ (80045d4 <HAL_DMA_IRQHandler+0x1d0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d027      	beq.n	8004598 <HAL_DMA_IRQHandler+0x194>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a22      	ldr	r2, [pc, #136]	@ (80045d8 <HAL_DMA_IRQHandler+0x1d4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d022      	beq.n	8004598 <HAL_DMA_IRQHandler+0x194>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a21      	ldr	r2, [pc, #132]	@ (80045dc <HAL_DMA_IRQHandler+0x1d8>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d01d      	beq.n	8004598 <HAL_DMA_IRQHandler+0x194>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1f      	ldr	r2, [pc, #124]	@ (80045e0 <HAL_DMA_IRQHandler+0x1dc>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d018      	beq.n	8004598 <HAL_DMA_IRQHandler+0x194>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a1e      	ldr	r2, [pc, #120]	@ (80045e4 <HAL_DMA_IRQHandler+0x1e0>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d013      	beq.n	8004598 <HAL_DMA_IRQHandler+0x194>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a1c      	ldr	r2, [pc, #112]	@ (80045e8 <HAL_DMA_IRQHandler+0x1e4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00e      	beq.n	8004598 <HAL_DMA_IRQHandler+0x194>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a1b      	ldr	r2, [pc, #108]	@ (80045ec <HAL_DMA_IRQHandler+0x1e8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d009      	beq.n	8004598 <HAL_DMA_IRQHandler+0x194>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a19      	ldr	r2, [pc, #100]	@ (80045f0 <HAL_DMA_IRQHandler+0x1ec>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d004      	beq.n	8004598 <HAL_DMA_IRQHandler+0x194>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a18      	ldr	r2, [pc, #96]	@ (80045f4 <HAL_DMA_IRQHandler+0x1f0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d12f      	bne.n	80045f8 <HAL_DMA_IRQHandler+0x1f4>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0304 	and.w	r3, r3, #4
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	bf14      	ite	ne
 80045a6:	2301      	movne	r3, #1
 80045a8:	2300      	moveq	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	e02e      	b.n	800460c <HAL_DMA_IRQHandler+0x208>
 80045ae:	bf00      	nop
 80045b0:	24000008 	.word	0x24000008
 80045b4:	1b4e81b5 	.word	0x1b4e81b5
 80045b8:	40020010 	.word	0x40020010
 80045bc:	40020028 	.word	0x40020028
 80045c0:	40020040 	.word	0x40020040
 80045c4:	40020058 	.word	0x40020058
 80045c8:	40020070 	.word	0x40020070
 80045cc:	40020088 	.word	0x40020088
 80045d0:	400200a0 	.word	0x400200a0
 80045d4:	400200b8 	.word	0x400200b8
 80045d8:	40020410 	.word	0x40020410
 80045dc:	40020428 	.word	0x40020428
 80045e0:	40020440 	.word	0x40020440
 80045e4:	40020458 	.word	0x40020458
 80045e8:	40020470 	.word	0x40020470
 80045ec:	40020488 	.word	0x40020488
 80045f0:	400204a0 	.word	0x400204a0
 80045f4:	400204b8 	.word	0x400204b8
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b00      	cmp	r3, #0
 8004604:	bf14      	ite	ne
 8004606:	2301      	movne	r3, #1
 8004608:	2300      	moveq	r3, #0
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d015      	beq.n	800463c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0204 	bic.w	r2, r2, #4
 800461e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	2208      	movs	r2, #8
 800462a:	409a      	lsls	r2, r3
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004634:	f043 0201 	orr.w	r2, r3, #1
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004640:	f003 031f 	and.w	r3, r3, #31
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	fa22 f303 	lsr.w	r3, r2, r3
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d06e      	beq.n	8004730 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a69      	ldr	r2, [pc, #420]	@ (80047fc <HAL_DMA_IRQHandler+0x3f8>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d04a      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x2ee>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a67      	ldr	r2, [pc, #412]	@ (8004800 <HAL_DMA_IRQHandler+0x3fc>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d045      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x2ee>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a66      	ldr	r2, [pc, #408]	@ (8004804 <HAL_DMA_IRQHandler+0x400>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d040      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x2ee>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a64      	ldr	r2, [pc, #400]	@ (8004808 <HAL_DMA_IRQHandler+0x404>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d03b      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x2ee>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a63      	ldr	r2, [pc, #396]	@ (800480c <HAL_DMA_IRQHandler+0x408>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d036      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x2ee>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a61      	ldr	r2, [pc, #388]	@ (8004810 <HAL_DMA_IRQHandler+0x40c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d031      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x2ee>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a60      	ldr	r2, [pc, #384]	@ (8004814 <HAL_DMA_IRQHandler+0x410>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d02c      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x2ee>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a5e      	ldr	r2, [pc, #376]	@ (8004818 <HAL_DMA_IRQHandler+0x414>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d027      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x2ee>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a5d      	ldr	r2, [pc, #372]	@ (800481c <HAL_DMA_IRQHandler+0x418>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d022      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x2ee>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a5b      	ldr	r2, [pc, #364]	@ (8004820 <HAL_DMA_IRQHandler+0x41c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d01d      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x2ee>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a5a      	ldr	r2, [pc, #360]	@ (8004824 <HAL_DMA_IRQHandler+0x420>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d018      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x2ee>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a58      	ldr	r2, [pc, #352]	@ (8004828 <HAL_DMA_IRQHandler+0x424>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d013      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x2ee>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a57      	ldr	r2, [pc, #348]	@ (800482c <HAL_DMA_IRQHandler+0x428>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d00e      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x2ee>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a55      	ldr	r2, [pc, #340]	@ (8004830 <HAL_DMA_IRQHandler+0x42c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d009      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x2ee>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a54      	ldr	r2, [pc, #336]	@ (8004834 <HAL_DMA_IRQHandler+0x430>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d004      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x2ee>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a52      	ldr	r2, [pc, #328]	@ (8004838 <HAL_DMA_IRQHandler+0x434>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d10a      	bne.n	8004708 <HAL_DMA_IRQHandler+0x304>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	bf14      	ite	ne
 8004700:	2301      	movne	r3, #1
 8004702:	2300      	moveq	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	e003      	b.n	8004710 <HAL_DMA_IRQHandler+0x30c>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2300      	movs	r3, #0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00d      	beq.n	8004730 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004718:	f003 031f 	and.w	r3, r3, #31
 800471c:	2201      	movs	r2, #1
 800471e:	409a      	lsls	r2, r3
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004728:	f043 0202 	orr.w	r2, r3, #2
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004734:	f003 031f 	and.w	r3, r3, #31
 8004738:	2204      	movs	r2, #4
 800473a:	409a      	lsls	r2, r3
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	4013      	ands	r3, r2
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 808f 	beq.w	8004864 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a2c      	ldr	r2, [pc, #176]	@ (80047fc <HAL_DMA_IRQHandler+0x3f8>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d04a      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x3e2>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a2a      	ldr	r2, [pc, #168]	@ (8004800 <HAL_DMA_IRQHandler+0x3fc>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d045      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x3e2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a29      	ldr	r2, [pc, #164]	@ (8004804 <HAL_DMA_IRQHandler+0x400>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d040      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x3e2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a27      	ldr	r2, [pc, #156]	@ (8004808 <HAL_DMA_IRQHandler+0x404>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d03b      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x3e2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a26      	ldr	r2, [pc, #152]	@ (800480c <HAL_DMA_IRQHandler+0x408>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d036      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x3e2>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a24      	ldr	r2, [pc, #144]	@ (8004810 <HAL_DMA_IRQHandler+0x40c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d031      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x3e2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a23      	ldr	r2, [pc, #140]	@ (8004814 <HAL_DMA_IRQHandler+0x410>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d02c      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x3e2>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a21      	ldr	r2, [pc, #132]	@ (8004818 <HAL_DMA_IRQHandler+0x414>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d027      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x3e2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a20      	ldr	r2, [pc, #128]	@ (800481c <HAL_DMA_IRQHandler+0x418>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d022      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x3e2>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1e      	ldr	r2, [pc, #120]	@ (8004820 <HAL_DMA_IRQHandler+0x41c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d01d      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x3e2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004824 <HAL_DMA_IRQHandler+0x420>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d018      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x3e2>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004828 <HAL_DMA_IRQHandler+0x424>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d013      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x3e2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a1a      	ldr	r2, [pc, #104]	@ (800482c <HAL_DMA_IRQHandler+0x428>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00e      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x3e2>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a18      	ldr	r2, [pc, #96]	@ (8004830 <HAL_DMA_IRQHandler+0x42c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d009      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x3e2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a17      	ldr	r2, [pc, #92]	@ (8004834 <HAL_DMA_IRQHandler+0x430>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d004      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x3e2>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a15      	ldr	r2, [pc, #84]	@ (8004838 <HAL_DMA_IRQHandler+0x434>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d12a      	bne.n	800483c <HAL_DMA_IRQHandler+0x438>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	bf14      	ite	ne
 80047f4:	2301      	movne	r3, #1
 80047f6:	2300      	moveq	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	e023      	b.n	8004844 <HAL_DMA_IRQHandler+0x440>
 80047fc:	40020010 	.word	0x40020010
 8004800:	40020028 	.word	0x40020028
 8004804:	40020040 	.word	0x40020040
 8004808:	40020058 	.word	0x40020058
 800480c:	40020070 	.word	0x40020070
 8004810:	40020088 	.word	0x40020088
 8004814:	400200a0 	.word	0x400200a0
 8004818:	400200b8 	.word	0x400200b8
 800481c:	40020410 	.word	0x40020410
 8004820:	40020428 	.word	0x40020428
 8004824:	40020440 	.word	0x40020440
 8004828:	40020458 	.word	0x40020458
 800482c:	40020470 	.word	0x40020470
 8004830:	40020488 	.word	0x40020488
 8004834:	400204a0 	.word	0x400204a0
 8004838:	400204b8 	.word	0x400204b8
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2300      	movs	r3, #0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00d      	beq.n	8004864 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800484c:	f003 031f 	and.w	r3, r3, #31
 8004850:	2204      	movs	r2, #4
 8004852:	409a      	lsls	r2, r3
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485c:	f043 0204 	orr.w	r2, r3, #4
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004868:	f003 031f 	and.w	r3, r3, #31
 800486c:	2210      	movs	r2, #16
 800486e:	409a      	lsls	r2, r3
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	4013      	ands	r3, r2
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 80a6 	beq.w	80049c6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a85      	ldr	r2, [pc, #532]	@ (8004a94 <HAL_DMA_IRQHandler+0x690>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d04a      	beq.n	800491a <HAL_DMA_IRQHandler+0x516>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a83      	ldr	r2, [pc, #524]	@ (8004a98 <HAL_DMA_IRQHandler+0x694>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d045      	beq.n	800491a <HAL_DMA_IRQHandler+0x516>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a82      	ldr	r2, [pc, #520]	@ (8004a9c <HAL_DMA_IRQHandler+0x698>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d040      	beq.n	800491a <HAL_DMA_IRQHandler+0x516>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a80      	ldr	r2, [pc, #512]	@ (8004aa0 <HAL_DMA_IRQHandler+0x69c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d03b      	beq.n	800491a <HAL_DMA_IRQHandler+0x516>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a7f      	ldr	r2, [pc, #508]	@ (8004aa4 <HAL_DMA_IRQHandler+0x6a0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d036      	beq.n	800491a <HAL_DMA_IRQHandler+0x516>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a7d      	ldr	r2, [pc, #500]	@ (8004aa8 <HAL_DMA_IRQHandler+0x6a4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d031      	beq.n	800491a <HAL_DMA_IRQHandler+0x516>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a7c      	ldr	r2, [pc, #496]	@ (8004aac <HAL_DMA_IRQHandler+0x6a8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d02c      	beq.n	800491a <HAL_DMA_IRQHandler+0x516>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a7a      	ldr	r2, [pc, #488]	@ (8004ab0 <HAL_DMA_IRQHandler+0x6ac>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d027      	beq.n	800491a <HAL_DMA_IRQHandler+0x516>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a79      	ldr	r2, [pc, #484]	@ (8004ab4 <HAL_DMA_IRQHandler+0x6b0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d022      	beq.n	800491a <HAL_DMA_IRQHandler+0x516>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a77      	ldr	r2, [pc, #476]	@ (8004ab8 <HAL_DMA_IRQHandler+0x6b4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d01d      	beq.n	800491a <HAL_DMA_IRQHandler+0x516>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a76      	ldr	r2, [pc, #472]	@ (8004abc <HAL_DMA_IRQHandler+0x6b8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d018      	beq.n	800491a <HAL_DMA_IRQHandler+0x516>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a74      	ldr	r2, [pc, #464]	@ (8004ac0 <HAL_DMA_IRQHandler+0x6bc>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <HAL_DMA_IRQHandler+0x516>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a73      	ldr	r2, [pc, #460]	@ (8004ac4 <HAL_DMA_IRQHandler+0x6c0>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00e      	beq.n	800491a <HAL_DMA_IRQHandler+0x516>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a71      	ldr	r2, [pc, #452]	@ (8004ac8 <HAL_DMA_IRQHandler+0x6c4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d009      	beq.n	800491a <HAL_DMA_IRQHandler+0x516>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a70      	ldr	r2, [pc, #448]	@ (8004acc <HAL_DMA_IRQHandler+0x6c8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d004      	beq.n	800491a <HAL_DMA_IRQHandler+0x516>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a6e      	ldr	r2, [pc, #440]	@ (8004ad0 <HAL_DMA_IRQHandler+0x6cc>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d10a      	bne.n	8004930 <HAL_DMA_IRQHandler+0x52c>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b00      	cmp	r3, #0
 8004926:	bf14      	ite	ne
 8004928:	2301      	movne	r3, #1
 800492a:	2300      	moveq	r3, #0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	e009      	b.n	8004944 <HAL_DMA_IRQHandler+0x540>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	2b00      	cmp	r3, #0
 800493c:	bf14      	ite	ne
 800493e:	2301      	movne	r3, #1
 8004940:	2300      	moveq	r3, #0
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d03e      	beq.n	80049c6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800494c:	f003 031f 	and.w	r3, r3, #31
 8004950:	2210      	movs	r2, #16
 8004952:	409a      	lsls	r2, r3
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d018      	beq.n	8004998 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d108      	bne.n	8004986 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004978:	2b00      	cmp	r3, #0
 800497a:	d024      	beq.n	80049c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	4798      	blx	r3
 8004984:	e01f      	b.n	80049c6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800498a:	2b00      	cmp	r3, #0
 800498c:	d01b      	beq.n	80049c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	4798      	blx	r3
 8004996:	e016      	b.n	80049c6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d107      	bne.n	80049b6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0208 	bic.w	r2, r2, #8
 80049b4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ca:	f003 031f 	and.w	r3, r3, #31
 80049ce:	2220      	movs	r2, #32
 80049d0:	409a      	lsls	r2, r3
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 8110 	beq.w	8004bfc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a2c      	ldr	r2, [pc, #176]	@ (8004a94 <HAL_DMA_IRQHandler+0x690>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d04a      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x678>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a2b      	ldr	r2, [pc, #172]	@ (8004a98 <HAL_DMA_IRQHandler+0x694>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d045      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x678>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a29      	ldr	r2, [pc, #164]	@ (8004a9c <HAL_DMA_IRQHandler+0x698>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d040      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x678>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a28      	ldr	r2, [pc, #160]	@ (8004aa0 <HAL_DMA_IRQHandler+0x69c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d03b      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x678>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a26      	ldr	r2, [pc, #152]	@ (8004aa4 <HAL_DMA_IRQHandler+0x6a0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d036      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x678>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a25      	ldr	r2, [pc, #148]	@ (8004aa8 <HAL_DMA_IRQHandler+0x6a4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d031      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x678>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a23      	ldr	r2, [pc, #140]	@ (8004aac <HAL_DMA_IRQHandler+0x6a8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d02c      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x678>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a22      	ldr	r2, [pc, #136]	@ (8004ab0 <HAL_DMA_IRQHandler+0x6ac>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d027      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x678>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a20      	ldr	r2, [pc, #128]	@ (8004ab4 <HAL_DMA_IRQHandler+0x6b0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d022      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x678>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ab8 <HAL_DMA_IRQHandler+0x6b4>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d01d      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x678>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1d      	ldr	r2, [pc, #116]	@ (8004abc <HAL_DMA_IRQHandler+0x6b8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d018      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x678>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac0 <HAL_DMA_IRQHandler+0x6bc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d013      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x678>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a1a      	ldr	r2, [pc, #104]	@ (8004ac4 <HAL_DMA_IRQHandler+0x6c0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00e      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x678>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a19      	ldr	r2, [pc, #100]	@ (8004ac8 <HAL_DMA_IRQHandler+0x6c4>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d009      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x678>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a17      	ldr	r2, [pc, #92]	@ (8004acc <HAL_DMA_IRQHandler+0x6c8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d004      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x678>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a16      	ldr	r2, [pc, #88]	@ (8004ad0 <HAL_DMA_IRQHandler+0x6cc>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d12b      	bne.n	8004ad4 <HAL_DMA_IRQHandler+0x6d0>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0310 	and.w	r3, r3, #16
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	bf14      	ite	ne
 8004a8a:	2301      	movne	r3, #1
 8004a8c:	2300      	moveq	r3, #0
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	e02a      	b.n	8004ae8 <HAL_DMA_IRQHandler+0x6e4>
 8004a92:	bf00      	nop
 8004a94:	40020010 	.word	0x40020010
 8004a98:	40020028 	.word	0x40020028
 8004a9c:	40020040 	.word	0x40020040
 8004aa0:	40020058 	.word	0x40020058
 8004aa4:	40020070 	.word	0x40020070
 8004aa8:	40020088 	.word	0x40020088
 8004aac:	400200a0 	.word	0x400200a0
 8004ab0:	400200b8 	.word	0x400200b8
 8004ab4:	40020410 	.word	0x40020410
 8004ab8:	40020428 	.word	0x40020428
 8004abc:	40020440 	.word	0x40020440
 8004ac0:	40020458 	.word	0x40020458
 8004ac4:	40020470 	.word	0x40020470
 8004ac8:	40020488 	.word	0x40020488
 8004acc:	400204a0 	.word	0x400204a0
 8004ad0:	400204b8 	.word	0x400204b8
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	bf14      	ite	ne
 8004ae2:	2301      	movne	r3, #1
 8004ae4:	2300      	moveq	r3, #0
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 8087 	beq.w	8004bfc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af2:	f003 031f 	and.w	r3, r3, #31
 8004af6:	2220      	movs	r2, #32
 8004af8:	409a      	lsls	r2, r3
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d139      	bne.n	8004b7e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0216 	bic.w	r2, r2, #22
 8004b18:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695a      	ldr	r2, [r3, #20]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b28:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d103      	bne.n	8004b3a <HAL_DMA_IRQHandler+0x736>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d007      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0208 	bic.w	r2, r2, #8
 8004b48:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b4e:	f003 031f 	and.w	r3, r3, #31
 8004b52:	223f      	movs	r2, #63	@ 0x3f
 8004b54:	409a      	lsls	r2, r3
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 834a 	beq.w	8005208 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	4798      	blx	r3
          }
          return;
 8004b7c:	e344      	b.n	8005208 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d018      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d108      	bne.n	8004bac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d02c      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	4798      	blx	r3
 8004baa:	e027      	b.n	8004bfc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d023      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	4798      	blx	r3
 8004bbc:	e01e      	b.n	8004bfc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10f      	bne.n	8004bec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0210 	bic.w	r2, r2, #16
 8004bda:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8306 	beq.w	8005212 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 8088 	beq.w	8004d24 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2204      	movs	r2, #4
 8004c18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a7a      	ldr	r2, [pc, #488]	@ (8004e0c <HAL_DMA_IRQHandler+0xa08>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d04a      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x8b8>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a79      	ldr	r2, [pc, #484]	@ (8004e10 <HAL_DMA_IRQHandler+0xa0c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d045      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x8b8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a77      	ldr	r2, [pc, #476]	@ (8004e14 <HAL_DMA_IRQHandler+0xa10>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d040      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x8b8>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a76      	ldr	r2, [pc, #472]	@ (8004e18 <HAL_DMA_IRQHandler+0xa14>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d03b      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x8b8>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a74      	ldr	r2, [pc, #464]	@ (8004e1c <HAL_DMA_IRQHandler+0xa18>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d036      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x8b8>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a73      	ldr	r2, [pc, #460]	@ (8004e20 <HAL_DMA_IRQHandler+0xa1c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d031      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x8b8>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a71      	ldr	r2, [pc, #452]	@ (8004e24 <HAL_DMA_IRQHandler+0xa20>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d02c      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x8b8>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a70      	ldr	r2, [pc, #448]	@ (8004e28 <HAL_DMA_IRQHandler+0xa24>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d027      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x8b8>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a6e      	ldr	r2, [pc, #440]	@ (8004e2c <HAL_DMA_IRQHandler+0xa28>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d022      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x8b8>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a6d      	ldr	r2, [pc, #436]	@ (8004e30 <HAL_DMA_IRQHandler+0xa2c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d01d      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x8b8>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a6b      	ldr	r2, [pc, #428]	@ (8004e34 <HAL_DMA_IRQHandler+0xa30>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d018      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x8b8>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a6a      	ldr	r2, [pc, #424]	@ (8004e38 <HAL_DMA_IRQHandler+0xa34>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d013      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x8b8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a68      	ldr	r2, [pc, #416]	@ (8004e3c <HAL_DMA_IRQHandler+0xa38>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00e      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x8b8>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a67      	ldr	r2, [pc, #412]	@ (8004e40 <HAL_DMA_IRQHandler+0xa3c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d009      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x8b8>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a65      	ldr	r2, [pc, #404]	@ (8004e44 <HAL_DMA_IRQHandler+0xa40>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d004      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x8b8>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a64      	ldr	r2, [pc, #400]	@ (8004e48 <HAL_DMA_IRQHandler+0xa44>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d108      	bne.n	8004cce <HAL_DMA_IRQHandler+0x8ca>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0201 	bic.w	r2, r2, #1
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	e007      	b.n	8004cde <HAL_DMA_IRQHandler+0x8da>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0201 	bic.w	r2, r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d307      	bcc.n	8004cfa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1f2      	bne.n	8004cde <HAL_DMA_IRQHandler+0x8da>
 8004cf8:	e000      	b.n	8004cfc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004cfa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d004      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004d12:	e003      	b.n	8004d1c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8272 	beq.w	8005212 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	4798      	blx	r3
 8004d36:	e26c      	b.n	8005212 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a43      	ldr	r2, [pc, #268]	@ (8004e4c <HAL_DMA_IRQHandler+0xa48>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d022      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x984>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a42      	ldr	r2, [pc, #264]	@ (8004e50 <HAL_DMA_IRQHandler+0xa4c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d01d      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x984>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a40      	ldr	r2, [pc, #256]	@ (8004e54 <HAL_DMA_IRQHandler+0xa50>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d018      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x984>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a3f      	ldr	r2, [pc, #252]	@ (8004e58 <HAL_DMA_IRQHandler+0xa54>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d013      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x984>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a3d      	ldr	r2, [pc, #244]	@ (8004e5c <HAL_DMA_IRQHandler+0xa58>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00e      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x984>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a3c      	ldr	r2, [pc, #240]	@ (8004e60 <HAL_DMA_IRQHandler+0xa5c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d009      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x984>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a3a      	ldr	r2, [pc, #232]	@ (8004e64 <HAL_DMA_IRQHandler+0xa60>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d004      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x984>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a39      	ldr	r2, [pc, #228]	@ (8004e68 <HAL_DMA_IRQHandler+0xa64>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d101      	bne.n	8004d8c <HAL_DMA_IRQHandler+0x988>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e000      	b.n	8004d8e <HAL_DMA_IRQHandler+0x98a>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 823f 	beq.w	8005212 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004da0:	f003 031f 	and.w	r3, r3, #31
 8004da4:	2204      	movs	r2, #4
 8004da6:	409a      	lsls	r2, r3
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	4013      	ands	r3, r2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80cd 	beq.w	8004f4c <HAL_DMA_IRQHandler+0xb48>
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 80c7 	beq.w	8004f4c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc2:	f003 031f 	and.w	r3, r3, #31
 8004dc6:	2204      	movs	r2, #4
 8004dc8:	409a      	lsls	r2, r3
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d049      	beq.n	8004e6c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d109      	bne.n	8004df6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 8210 	beq.w	800520c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004df4:	e20a      	b.n	800520c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 8206 	beq.w	800520c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e08:	e200      	b.n	800520c <HAL_DMA_IRQHandler+0xe08>
 8004e0a:	bf00      	nop
 8004e0c:	40020010 	.word	0x40020010
 8004e10:	40020028 	.word	0x40020028
 8004e14:	40020040 	.word	0x40020040
 8004e18:	40020058 	.word	0x40020058
 8004e1c:	40020070 	.word	0x40020070
 8004e20:	40020088 	.word	0x40020088
 8004e24:	400200a0 	.word	0x400200a0
 8004e28:	400200b8 	.word	0x400200b8
 8004e2c:	40020410 	.word	0x40020410
 8004e30:	40020428 	.word	0x40020428
 8004e34:	40020440 	.word	0x40020440
 8004e38:	40020458 	.word	0x40020458
 8004e3c:	40020470 	.word	0x40020470
 8004e40:	40020488 	.word	0x40020488
 8004e44:	400204a0 	.word	0x400204a0
 8004e48:	400204b8 	.word	0x400204b8
 8004e4c:	58025408 	.word	0x58025408
 8004e50:	5802541c 	.word	0x5802541c
 8004e54:	58025430 	.word	0x58025430
 8004e58:	58025444 	.word	0x58025444
 8004e5c:	58025458 	.word	0x58025458
 8004e60:	5802546c 	.word	0x5802546c
 8004e64:	58025480 	.word	0x58025480
 8004e68:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d160      	bne.n	8004f38 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a7f      	ldr	r2, [pc, #508]	@ (8005078 <HAL_DMA_IRQHandler+0xc74>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d04a      	beq.n	8004f16 <HAL_DMA_IRQHandler+0xb12>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a7d      	ldr	r2, [pc, #500]	@ (800507c <HAL_DMA_IRQHandler+0xc78>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d045      	beq.n	8004f16 <HAL_DMA_IRQHandler+0xb12>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a7c      	ldr	r2, [pc, #496]	@ (8005080 <HAL_DMA_IRQHandler+0xc7c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d040      	beq.n	8004f16 <HAL_DMA_IRQHandler+0xb12>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a7a      	ldr	r2, [pc, #488]	@ (8005084 <HAL_DMA_IRQHandler+0xc80>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d03b      	beq.n	8004f16 <HAL_DMA_IRQHandler+0xb12>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a79      	ldr	r2, [pc, #484]	@ (8005088 <HAL_DMA_IRQHandler+0xc84>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d036      	beq.n	8004f16 <HAL_DMA_IRQHandler+0xb12>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a77      	ldr	r2, [pc, #476]	@ (800508c <HAL_DMA_IRQHandler+0xc88>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d031      	beq.n	8004f16 <HAL_DMA_IRQHandler+0xb12>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a76      	ldr	r2, [pc, #472]	@ (8005090 <HAL_DMA_IRQHandler+0xc8c>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d02c      	beq.n	8004f16 <HAL_DMA_IRQHandler+0xb12>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a74      	ldr	r2, [pc, #464]	@ (8005094 <HAL_DMA_IRQHandler+0xc90>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d027      	beq.n	8004f16 <HAL_DMA_IRQHandler+0xb12>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a73      	ldr	r2, [pc, #460]	@ (8005098 <HAL_DMA_IRQHandler+0xc94>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d022      	beq.n	8004f16 <HAL_DMA_IRQHandler+0xb12>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a71      	ldr	r2, [pc, #452]	@ (800509c <HAL_DMA_IRQHandler+0xc98>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d01d      	beq.n	8004f16 <HAL_DMA_IRQHandler+0xb12>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a70      	ldr	r2, [pc, #448]	@ (80050a0 <HAL_DMA_IRQHandler+0xc9c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d018      	beq.n	8004f16 <HAL_DMA_IRQHandler+0xb12>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a6e      	ldr	r2, [pc, #440]	@ (80050a4 <HAL_DMA_IRQHandler+0xca0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d013      	beq.n	8004f16 <HAL_DMA_IRQHandler+0xb12>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a6d      	ldr	r2, [pc, #436]	@ (80050a8 <HAL_DMA_IRQHandler+0xca4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d00e      	beq.n	8004f16 <HAL_DMA_IRQHandler+0xb12>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a6b      	ldr	r2, [pc, #428]	@ (80050ac <HAL_DMA_IRQHandler+0xca8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d009      	beq.n	8004f16 <HAL_DMA_IRQHandler+0xb12>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a6a      	ldr	r2, [pc, #424]	@ (80050b0 <HAL_DMA_IRQHandler+0xcac>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d004      	beq.n	8004f16 <HAL_DMA_IRQHandler+0xb12>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a68      	ldr	r2, [pc, #416]	@ (80050b4 <HAL_DMA_IRQHandler+0xcb0>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d108      	bne.n	8004f28 <HAL_DMA_IRQHandler+0xb24>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0208 	bic.w	r2, r2, #8
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	e007      	b.n	8004f38 <HAL_DMA_IRQHandler+0xb34>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0204 	bic.w	r2, r2, #4
 8004f36:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 8165 	beq.w	800520c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f4a:	e15f      	b.n	800520c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f50:	f003 031f 	and.w	r3, r3, #31
 8004f54:	2202      	movs	r2, #2
 8004f56:	409a      	lsls	r2, r3
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 80c5 	beq.w	80050ec <HAL_DMA_IRQHandler+0xce8>
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 80bf 	beq.w	80050ec <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f72:	f003 031f 	and.w	r3, r3, #31
 8004f76:	2202      	movs	r2, #2
 8004f78:	409a      	lsls	r2, r3
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d018      	beq.n	8004fba <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d109      	bne.n	8004fa6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 813a 	beq.w	8005210 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fa4:	e134      	b.n	8005210 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 8130 	beq.w	8005210 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fb8:	e12a      	b.n	8005210 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f003 0320 	and.w	r3, r3, #32
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f040 8089 	bne.w	80050d8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a2b      	ldr	r2, [pc, #172]	@ (8005078 <HAL_DMA_IRQHandler+0xc74>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d04a      	beq.n	8005066 <HAL_DMA_IRQHandler+0xc62>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a29      	ldr	r2, [pc, #164]	@ (800507c <HAL_DMA_IRQHandler+0xc78>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d045      	beq.n	8005066 <HAL_DMA_IRQHandler+0xc62>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a28      	ldr	r2, [pc, #160]	@ (8005080 <HAL_DMA_IRQHandler+0xc7c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d040      	beq.n	8005066 <HAL_DMA_IRQHandler+0xc62>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a26      	ldr	r2, [pc, #152]	@ (8005084 <HAL_DMA_IRQHandler+0xc80>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d03b      	beq.n	8005066 <HAL_DMA_IRQHandler+0xc62>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a25      	ldr	r2, [pc, #148]	@ (8005088 <HAL_DMA_IRQHandler+0xc84>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d036      	beq.n	8005066 <HAL_DMA_IRQHandler+0xc62>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a23      	ldr	r2, [pc, #140]	@ (800508c <HAL_DMA_IRQHandler+0xc88>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d031      	beq.n	8005066 <HAL_DMA_IRQHandler+0xc62>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a22      	ldr	r2, [pc, #136]	@ (8005090 <HAL_DMA_IRQHandler+0xc8c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d02c      	beq.n	8005066 <HAL_DMA_IRQHandler+0xc62>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a20      	ldr	r2, [pc, #128]	@ (8005094 <HAL_DMA_IRQHandler+0xc90>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d027      	beq.n	8005066 <HAL_DMA_IRQHandler+0xc62>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a1f      	ldr	r2, [pc, #124]	@ (8005098 <HAL_DMA_IRQHandler+0xc94>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d022      	beq.n	8005066 <HAL_DMA_IRQHandler+0xc62>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1d      	ldr	r2, [pc, #116]	@ (800509c <HAL_DMA_IRQHandler+0xc98>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d01d      	beq.n	8005066 <HAL_DMA_IRQHandler+0xc62>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1c      	ldr	r2, [pc, #112]	@ (80050a0 <HAL_DMA_IRQHandler+0xc9c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d018      	beq.n	8005066 <HAL_DMA_IRQHandler+0xc62>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1a      	ldr	r2, [pc, #104]	@ (80050a4 <HAL_DMA_IRQHandler+0xca0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d013      	beq.n	8005066 <HAL_DMA_IRQHandler+0xc62>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a19      	ldr	r2, [pc, #100]	@ (80050a8 <HAL_DMA_IRQHandler+0xca4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00e      	beq.n	8005066 <HAL_DMA_IRQHandler+0xc62>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a17      	ldr	r2, [pc, #92]	@ (80050ac <HAL_DMA_IRQHandler+0xca8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d009      	beq.n	8005066 <HAL_DMA_IRQHandler+0xc62>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a16      	ldr	r2, [pc, #88]	@ (80050b0 <HAL_DMA_IRQHandler+0xcac>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d004      	beq.n	8005066 <HAL_DMA_IRQHandler+0xc62>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a14      	ldr	r2, [pc, #80]	@ (80050b4 <HAL_DMA_IRQHandler+0xcb0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d128      	bne.n	80050b8 <HAL_DMA_IRQHandler+0xcb4>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0214 	bic.w	r2, r2, #20
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	e027      	b.n	80050c8 <HAL_DMA_IRQHandler+0xcc4>
 8005078:	40020010 	.word	0x40020010
 800507c:	40020028 	.word	0x40020028
 8005080:	40020040 	.word	0x40020040
 8005084:	40020058 	.word	0x40020058
 8005088:	40020070 	.word	0x40020070
 800508c:	40020088 	.word	0x40020088
 8005090:	400200a0 	.word	0x400200a0
 8005094:	400200b8 	.word	0x400200b8
 8005098:	40020410 	.word	0x40020410
 800509c:	40020428 	.word	0x40020428
 80050a0:	40020440 	.word	0x40020440
 80050a4:	40020458 	.word	0x40020458
 80050a8:	40020470 	.word	0x40020470
 80050ac:	40020488 	.word	0x40020488
 80050b0:	400204a0 	.word	0x400204a0
 80050b4:	400204b8 	.word	0x400204b8
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 020a 	bic.w	r2, r2, #10
 80050c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 8097 	beq.w	8005210 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050ea:	e091      	b.n	8005210 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f0:	f003 031f 	and.w	r3, r3, #31
 80050f4:	2208      	movs	r2, #8
 80050f6:	409a      	lsls	r2, r3
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	4013      	ands	r3, r2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 8088 	beq.w	8005212 <HAL_DMA_IRQHandler+0xe0e>
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 8082 	beq.w	8005212 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a41      	ldr	r2, [pc, #260]	@ (8005218 <HAL_DMA_IRQHandler+0xe14>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d04a      	beq.n	80051ae <HAL_DMA_IRQHandler+0xdaa>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a3f      	ldr	r2, [pc, #252]	@ (800521c <HAL_DMA_IRQHandler+0xe18>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d045      	beq.n	80051ae <HAL_DMA_IRQHandler+0xdaa>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a3e      	ldr	r2, [pc, #248]	@ (8005220 <HAL_DMA_IRQHandler+0xe1c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d040      	beq.n	80051ae <HAL_DMA_IRQHandler+0xdaa>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a3c      	ldr	r2, [pc, #240]	@ (8005224 <HAL_DMA_IRQHandler+0xe20>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d03b      	beq.n	80051ae <HAL_DMA_IRQHandler+0xdaa>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a3b      	ldr	r2, [pc, #236]	@ (8005228 <HAL_DMA_IRQHandler+0xe24>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d036      	beq.n	80051ae <HAL_DMA_IRQHandler+0xdaa>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a39      	ldr	r2, [pc, #228]	@ (800522c <HAL_DMA_IRQHandler+0xe28>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d031      	beq.n	80051ae <HAL_DMA_IRQHandler+0xdaa>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a38      	ldr	r2, [pc, #224]	@ (8005230 <HAL_DMA_IRQHandler+0xe2c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d02c      	beq.n	80051ae <HAL_DMA_IRQHandler+0xdaa>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a36      	ldr	r2, [pc, #216]	@ (8005234 <HAL_DMA_IRQHandler+0xe30>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d027      	beq.n	80051ae <HAL_DMA_IRQHandler+0xdaa>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a35      	ldr	r2, [pc, #212]	@ (8005238 <HAL_DMA_IRQHandler+0xe34>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d022      	beq.n	80051ae <HAL_DMA_IRQHandler+0xdaa>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a33      	ldr	r2, [pc, #204]	@ (800523c <HAL_DMA_IRQHandler+0xe38>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d01d      	beq.n	80051ae <HAL_DMA_IRQHandler+0xdaa>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a32      	ldr	r2, [pc, #200]	@ (8005240 <HAL_DMA_IRQHandler+0xe3c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d018      	beq.n	80051ae <HAL_DMA_IRQHandler+0xdaa>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a30      	ldr	r2, [pc, #192]	@ (8005244 <HAL_DMA_IRQHandler+0xe40>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d013      	beq.n	80051ae <HAL_DMA_IRQHandler+0xdaa>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a2f      	ldr	r2, [pc, #188]	@ (8005248 <HAL_DMA_IRQHandler+0xe44>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d00e      	beq.n	80051ae <HAL_DMA_IRQHandler+0xdaa>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a2d      	ldr	r2, [pc, #180]	@ (800524c <HAL_DMA_IRQHandler+0xe48>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d009      	beq.n	80051ae <HAL_DMA_IRQHandler+0xdaa>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a2c      	ldr	r2, [pc, #176]	@ (8005250 <HAL_DMA_IRQHandler+0xe4c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d004      	beq.n	80051ae <HAL_DMA_IRQHandler+0xdaa>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a2a      	ldr	r2, [pc, #168]	@ (8005254 <HAL_DMA_IRQHandler+0xe50>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d108      	bne.n	80051c0 <HAL_DMA_IRQHandler+0xdbc>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 021c 	bic.w	r2, r2, #28
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	e007      	b.n	80051d0 <HAL_DMA_IRQHandler+0xdcc>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 020e 	bic.w	r2, r2, #14
 80051ce:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d4:	f003 031f 	and.w	r3, r3, #31
 80051d8:	2201      	movs	r2, #1
 80051da:	409a      	lsls	r2, r3
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d009      	beq.n	8005212 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	4798      	blx	r3
 8005206:	e004      	b.n	8005212 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005208:	bf00      	nop
 800520a:	e002      	b.n	8005212 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800520c:	bf00      	nop
 800520e:	e000      	b.n	8005212 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005210:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005212:	3728      	adds	r7, #40	@ 0x28
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40020010 	.word	0x40020010
 800521c:	40020028 	.word	0x40020028
 8005220:	40020040 	.word	0x40020040
 8005224:	40020058 	.word	0x40020058
 8005228:	40020070 	.word	0x40020070
 800522c:	40020088 	.word	0x40020088
 8005230:	400200a0 	.word	0x400200a0
 8005234:	400200b8 	.word	0x400200b8
 8005238:	40020410 	.word	0x40020410
 800523c:	40020428 	.word	0x40020428
 8005240:	40020440 	.word	0x40020440
 8005244:	40020458 	.word	0x40020458
 8005248:	40020470 	.word	0x40020470
 800524c:	40020488 	.word	0x40020488
 8005250:	400204a0 	.word	0x400204a0
 8005254:	400204b8 	.word	0x400204b8

08005258 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005266:	b2db      	uxtb	r3, r3
}
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005286:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800528c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a7f      	ldr	r2, [pc, #508]	@ (8005490 <DMA_SetConfig+0x21c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d072      	beq.n	800537e <DMA_SetConfig+0x10a>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a7d      	ldr	r2, [pc, #500]	@ (8005494 <DMA_SetConfig+0x220>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d06d      	beq.n	800537e <DMA_SetConfig+0x10a>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a7c      	ldr	r2, [pc, #496]	@ (8005498 <DMA_SetConfig+0x224>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d068      	beq.n	800537e <DMA_SetConfig+0x10a>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a7a      	ldr	r2, [pc, #488]	@ (800549c <DMA_SetConfig+0x228>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d063      	beq.n	800537e <DMA_SetConfig+0x10a>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a79      	ldr	r2, [pc, #484]	@ (80054a0 <DMA_SetConfig+0x22c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d05e      	beq.n	800537e <DMA_SetConfig+0x10a>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a77      	ldr	r2, [pc, #476]	@ (80054a4 <DMA_SetConfig+0x230>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d059      	beq.n	800537e <DMA_SetConfig+0x10a>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a76      	ldr	r2, [pc, #472]	@ (80054a8 <DMA_SetConfig+0x234>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d054      	beq.n	800537e <DMA_SetConfig+0x10a>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a74      	ldr	r2, [pc, #464]	@ (80054ac <DMA_SetConfig+0x238>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d04f      	beq.n	800537e <DMA_SetConfig+0x10a>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a73      	ldr	r2, [pc, #460]	@ (80054b0 <DMA_SetConfig+0x23c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d04a      	beq.n	800537e <DMA_SetConfig+0x10a>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a71      	ldr	r2, [pc, #452]	@ (80054b4 <DMA_SetConfig+0x240>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d045      	beq.n	800537e <DMA_SetConfig+0x10a>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a70      	ldr	r2, [pc, #448]	@ (80054b8 <DMA_SetConfig+0x244>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d040      	beq.n	800537e <DMA_SetConfig+0x10a>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a6e      	ldr	r2, [pc, #440]	@ (80054bc <DMA_SetConfig+0x248>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d03b      	beq.n	800537e <DMA_SetConfig+0x10a>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a6d      	ldr	r2, [pc, #436]	@ (80054c0 <DMA_SetConfig+0x24c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d036      	beq.n	800537e <DMA_SetConfig+0x10a>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a6b      	ldr	r2, [pc, #428]	@ (80054c4 <DMA_SetConfig+0x250>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d031      	beq.n	800537e <DMA_SetConfig+0x10a>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a6a      	ldr	r2, [pc, #424]	@ (80054c8 <DMA_SetConfig+0x254>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d02c      	beq.n	800537e <DMA_SetConfig+0x10a>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a68      	ldr	r2, [pc, #416]	@ (80054cc <DMA_SetConfig+0x258>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d027      	beq.n	800537e <DMA_SetConfig+0x10a>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a67      	ldr	r2, [pc, #412]	@ (80054d0 <DMA_SetConfig+0x25c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d022      	beq.n	800537e <DMA_SetConfig+0x10a>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a65      	ldr	r2, [pc, #404]	@ (80054d4 <DMA_SetConfig+0x260>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d01d      	beq.n	800537e <DMA_SetConfig+0x10a>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a64      	ldr	r2, [pc, #400]	@ (80054d8 <DMA_SetConfig+0x264>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d018      	beq.n	800537e <DMA_SetConfig+0x10a>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a62      	ldr	r2, [pc, #392]	@ (80054dc <DMA_SetConfig+0x268>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <DMA_SetConfig+0x10a>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a61      	ldr	r2, [pc, #388]	@ (80054e0 <DMA_SetConfig+0x26c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00e      	beq.n	800537e <DMA_SetConfig+0x10a>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a5f      	ldr	r2, [pc, #380]	@ (80054e4 <DMA_SetConfig+0x270>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d009      	beq.n	800537e <DMA_SetConfig+0x10a>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a5e      	ldr	r2, [pc, #376]	@ (80054e8 <DMA_SetConfig+0x274>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d004      	beq.n	800537e <DMA_SetConfig+0x10a>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a5c      	ldr	r2, [pc, #368]	@ (80054ec <DMA_SetConfig+0x278>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d101      	bne.n	8005382 <DMA_SetConfig+0x10e>
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <DMA_SetConfig+0x110>
 8005382:	2300      	movs	r3, #0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00d      	beq.n	80053a4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005390:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005396:	2b00      	cmp	r3, #0
 8005398:	d004      	beq.n	80053a4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80053a2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a39      	ldr	r2, [pc, #228]	@ (8005490 <DMA_SetConfig+0x21c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d04a      	beq.n	8005444 <DMA_SetConfig+0x1d0>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a38      	ldr	r2, [pc, #224]	@ (8005494 <DMA_SetConfig+0x220>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d045      	beq.n	8005444 <DMA_SetConfig+0x1d0>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a36      	ldr	r2, [pc, #216]	@ (8005498 <DMA_SetConfig+0x224>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d040      	beq.n	8005444 <DMA_SetConfig+0x1d0>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a35      	ldr	r2, [pc, #212]	@ (800549c <DMA_SetConfig+0x228>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d03b      	beq.n	8005444 <DMA_SetConfig+0x1d0>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a33      	ldr	r2, [pc, #204]	@ (80054a0 <DMA_SetConfig+0x22c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d036      	beq.n	8005444 <DMA_SetConfig+0x1d0>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a32      	ldr	r2, [pc, #200]	@ (80054a4 <DMA_SetConfig+0x230>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d031      	beq.n	8005444 <DMA_SetConfig+0x1d0>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a30      	ldr	r2, [pc, #192]	@ (80054a8 <DMA_SetConfig+0x234>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d02c      	beq.n	8005444 <DMA_SetConfig+0x1d0>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a2f      	ldr	r2, [pc, #188]	@ (80054ac <DMA_SetConfig+0x238>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d027      	beq.n	8005444 <DMA_SetConfig+0x1d0>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a2d      	ldr	r2, [pc, #180]	@ (80054b0 <DMA_SetConfig+0x23c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d022      	beq.n	8005444 <DMA_SetConfig+0x1d0>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a2c      	ldr	r2, [pc, #176]	@ (80054b4 <DMA_SetConfig+0x240>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d01d      	beq.n	8005444 <DMA_SetConfig+0x1d0>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a2a      	ldr	r2, [pc, #168]	@ (80054b8 <DMA_SetConfig+0x244>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d018      	beq.n	8005444 <DMA_SetConfig+0x1d0>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a29      	ldr	r2, [pc, #164]	@ (80054bc <DMA_SetConfig+0x248>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d013      	beq.n	8005444 <DMA_SetConfig+0x1d0>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a27      	ldr	r2, [pc, #156]	@ (80054c0 <DMA_SetConfig+0x24c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d00e      	beq.n	8005444 <DMA_SetConfig+0x1d0>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a26      	ldr	r2, [pc, #152]	@ (80054c4 <DMA_SetConfig+0x250>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d009      	beq.n	8005444 <DMA_SetConfig+0x1d0>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a24      	ldr	r2, [pc, #144]	@ (80054c8 <DMA_SetConfig+0x254>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d004      	beq.n	8005444 <DMA_SetConfig+0x1d0>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a23      	ldr	r2, [pc, #140]	@ (80054cc <DMA_SetConfig+0x258>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d101      	bne.n	8005448 <DMA_SetConfig+0x1d4>
 8005444:	2301      	movs	r3, #1
 8005446:	e000      	b.n	800544a <DMA_SetConfig+0x1d6>
 8005448:	2300      	movs	r3, #0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d059      	beq.n	8005502 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005452:	f003 031f 	and.w	r3, r3, #31
 8005456:	223f      	movs	r2, #63	@ 0x3f
 8005458:	409a      	lsls	r2, r3
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800546c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	2b40      	cmp	r3, #64	@ 0x40
 800547c:	d138      	bne.n	80054f0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800548e:	e086      	b.n	800559e <DMA_SetConfig+0x32a>
 8005490:	40020010 	.word	0x40020010
 8005494:	40020028 	.word	0x40020028
 8005498:	40020040 	.word	0x40020040
 800549c:	40020058 	.word	0x40020058
 80054a0:	40020070 	.word	0x40020070
 80054a4:	40020088 	.word	0x40020088
 80054a8:	400200a0 	.word	0x400200a0
 80054ac:	400200b8 	.word	0x400200b8
 80054b0:	40020410 	.word	0x40020410
 80054b4:	40020428 	.word	0x40020428
 80054b8:	40020440 	.word	0x40020440
 80054bc:	40020458 	.word	0x40020458
 80054c0:	40020470 	.word	0x40020470
 80054c4:	40020488 	.word	0x40020488
 80054c8:	400204a0 	.word	0x400204a0
 80054cc:	400204b8 	.word	0x400204b8
 80054d0:	58025408 	.word	0x58025408
 80054d4:	5802541c 	.word	0x5802541c
 80054d8:	58025430 	.word	0x58025430
 80054dc:	58025444 	.word	0x58025444
 80054e0:	58025458 	.word	0x58025458
 80054e4:	5802546c 	.word	0x5802546c
 80054e8:	58025480 	.word	0x58025480
 80054ec:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	60da      	str	r2, [r3, #12]
}
 8005500:	e04d      	b.n	800559e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a29      	ldr	r2, [pc, #164]	@ (80055ac <DMA_SetConfig+0x338>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d022      	beq.n	8005552 <DMA_SetConfig+0x2de>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a27      	ldr	r2, [pc, #156]	@ (80055b0 <DMA_SetConfig+0x33c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d01d      	beq.n	8005552 <DMA_SetConfig+0x2de>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a26      	ldr	r2, [pc, #152]	@ (80055b4 <DMA_SetConfig+0x340>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d018      	beq.n	8005552 <DMA_SetConfig+0x2de>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a24      	ldr	r2, [pc, #144]	@ (80055b8 <DMA_SetConfig+0x344>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d013      	beq.n	8005552 <DMA_SetConfig+0x2de>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a23      	ldr	r2, [pc, #140]	@ (80055bc <DMA_SetConfig+0x348>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00e      	beq.n	8005552 <DMA_SetConfig+0x2de>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a21      	ldr	r2, [pc, #132]	@ (80055c0 <DMA_SetConfig+0x34c>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d009      	beq.n	8005552 <DMA_SetConfig+0x2de>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a20      	ldr	r2, [pc, #128]	@ (80055c4 <DMA_SetConfig+0x350>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d004      	beq.n	8005552 <DMA_SetConfig+0x2de>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a1e      	ldr	r2, [pc, #120]	@ (80055c8 <DMA_SetConfig+0x354>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d101      	bne.n	8005556 <DMA_SetConfig+0x2e2>
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <DMA_SetConfig+0x2e4>
 8005556:	2300      	movs	r3, #0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d020      	beq.n	800559e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005560:	f003 031f 	and.w	r3, r3, #31
 8005564:	2201      	movs	r2, #1
 8005566:	409a      	lsls	r2, r3
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	2b40      	cmp	r3, #64	@ 0x40
 800557a:	d108      	bne.n	800558e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	60da      	str	r2, [r3, #12]
}
 800558c:	e007      	b.n	800559e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	60da      	str	r2, [r3, #12]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	58025408 	.word	0x58025408
 80055b0:	5802541c 	.word	0x5802541c
 80055b4:	58025430 	.word	0x58025430
 80055b8:	58025444 	.word	0x58025444
 80055bc:	58025458 	.word	0x58025458
 80055c0:	5802546c 	.word	0x5802546c
 80055c4:	58025480 	.word	0x58025480
 80055c8:	58025494 	.word	0x58025494

080055cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a42      	ldr	r2, [pc, #264]	@ (80056e4 <DMA_CalcBaseAndBitshift+0x118>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d04a      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a41      	ldr	r2, [pc, #260]	@ (80056e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d045      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a3f      	ldr	r2, [pc, #252]	@ (80056ec <DMA_CalcBaseAndBitshift+0x120>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d040      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a3e      	ldr	r2, [pc, #248]	@ (80056f0 <DMA_CalcBaseAndBitshift+0x124>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d03b      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a3c      	ldr	r2, [pc, #240]	@ (80056f4 <DMA_CalcBaseAndBitshift+0x128>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d036      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a3b      	ldr	r2, [pc, #236]	@ (80056f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d031      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a39      	ldr	r2, [pc, #228]	@ (80056fc <DMA_CalcBaseAndBitshift+0x130>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d02c      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a38      	ldr	r2, [pc, #224]	@ (8005700 <DMA_CalcBaseAndBitshift+0x134>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d027      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a36      	ldr	r2, [pc, #216]	@ (8005704 <DMA_CalcBaseAndBitshift+0x138>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d022      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a35      	ldr	r2, [pc, #212]	@ (8005708 <DMA_CalcBaseAndBitshift+0x13c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d01d      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a33      	ldr	r2, [pc, #204]	@ (800570c <DMA_CalcBaseAndBitshift+0x140>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d018      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a32      	ldr	r2, [pc, #200]	@ (8005710 <DMA_CalcBaseAndBitshift+0x144>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d013      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a30      	ldr	r2, [pc, #192]	@ (8005714 <DMA_CalcBaseAndBitshift+0x148>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00e      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a2f      	ldr	r2, [pc, #188]	@ (8005718 <DMA_CalcBaseAndBitshift+0x14c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d009      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a2d      	ldr	r2, [pc, #180]	@ (800571c <DMA_CalcBaseAndBitshift+0x150>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d004      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a2c      	ldr	r2, [pc, #176]	@ (8005720 <DMA_CalcBaseAndBitshift+0x154>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d101      	bne.n	8005678 <DMA_CalcBaseAndBitshift+0xac>
 8005674:	2301      	movs	r3, #1
 8005676:	e000      	b.n	800567a <DMA_CalcBaseAndBitshift+0xae>
 8005678:	2300      	movs	r3, #0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d024      	beq.n	80056c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	3b10      	subs	r3, #16
 8005686:	4a27      	ldr	r2, [pc, #156]	@ (8005724 <DMA_CalcBaseAndBitshift+0x158>)
 8005688:	fba2 2303 	umull	r2, r3, r2, r3
 800568c:	091b      	lsrs	r3, r3, #4
 800568e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	4a24      	ldr	r2, [pc, #144]	@ (8005728 <DMA_CalcBaseAndBitshift+0x15c>)
 8005698:	5cd3      	ldrb	r3, [r2, r3]
 800569a:	461a      	mov	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	d908      	bls.n	80056b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	4b1f      	ldr	r3, [pc, #124]	@ (800572c <DMA_CalcBaseAndBitshift+0x160>)
 80056ae:	4013      	ands	r3, r2
 80056b0:	1d1a      	adds	r2, r3, #4
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80056b6:	e00d      	b.n	80056d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
 80056be:	4b1b      	ldr	r3, [pc, #108]	@ (800572c <DMA_CalcBaseAndBitshift+0x160>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80056c6:	e005      	b.n	80056d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	40020010 	.word	0x40020010
 80056e8:	40020028 	.word	0x40020028
 80056ec:	40020040 	.word	0x40020040
 80056f0:	40020058 	.word	0x40020058
 80056f4:	40020070 	.word	0x40020070
 80056f8:	40020088 	.word	0x40020088
 80056fc:	400200a0 	.word	0x400200a0
 8005700:	400200b8 	.word	0x400200b8
 8005704:	40020410 	.word	0x40020410
 8005708:	40020428 	.word	0x40020428
 800570c:	40020440 	.word	0x40020440
 8005710:	40020458 	.word	0x40020458
 8005714:	40020470 	.word	0x40020470
 8005718:	40020488 	.word	0x40020488
 800571c:	400204a0 	.word	0x400204a0
 8005720:	400204b8 	.word	0x400204b8
 8005724:	aaaaaaab 	.word	0xaaaaaaab
 8005728:	080160dc 	.word	0x080160dc
 800572c:	fffffc00 	.word	0xfffffc00

08005730 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d120      	bne.n	8005786 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005748:	2b03      	cmp	r3, #3
 800574a:	d858      	bhi.n	80057fe <DMA_CheckFifoParam+0xce>
 800574c:	a201      	add	r2, pc, #4	@ (adr r2, 8005754 <DMA_CheckFifoParam+0x24>)
 800574e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005752:	bf00      	nop
 8005754:	08005765 	.word	0x08005765
 8005758:	08005777 	.word	0x08005777
 800575c:	08005765 	.word	0x08005765
 8005760:	080057ff 	.word	0x080057ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005768:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d048      	beq.n	8005802 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005774:	e045      	b.n	8005802 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800577e:	d142      	bne.n	8005806 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005784:	e03f      	b.n	8005806 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800578e:	d123      	bne.n	80057d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005794:	2b03      	cmp	r3, #3
 8005796:	d838      	bhi.n	800580a <DMA_CheckFifoParam+0xda>
 8005798:	a201      	add	r2, pc, #4	@ (adr r2, 80057a0 <DMA_CheckFifoParam+0x70>)
 800579a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579e:	bf00      	nop
 80057a0:	080057b1 	.word	0x080057b1
 80057a4:	080057b7 	.word	0x080057b7
 80057a8:	080057b1 	.word	0x080057b1
 80057ac:	080057c9 	.word	0x080057c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	73fb      	strb	r3, [r7, #15]
        break;
 80057b4:	e030      	b.n	8005818 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d025      	beq.n	800580e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057c6:	e022      	b.n	800580e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057d0:	d11f      	bne.n	8005812 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057d6:	e01c      	b.n	8005812 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d902      	bls.n	80057e6 <DMA_CheckFifoParam+0xb6>
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d003      	beq.n	80057ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80057e4:	e018      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	73fb      	strb	r3, [r7, #15]
        break;
 80057ea:	e015      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00e      	beq.n	8005816 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	73fb      	strb	r3, [r7, #15]
    break;
 80057fc:	e00b      	b.n	8005816 <DMA_CheckFifoParam+0xe6>
        break;
 80057fe:	bf00      	nop
 8005800:	e00a      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
        break;
 8005802:	bf00      	nop
 8005804:	e008      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
        break;
 8005806:	bf00      	nop
 8005808:	e006      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
        break;
 800580a:	bf00      	nop
 800580c:	e004      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
        break;
 800580e:	bf00      	nop
 8005810:	e002      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
        break;
 8005812:	bf00      	nop
 8005814:	e000      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
    break;
 8005816:	bf00      	nop
    }
  }

  return status;
 8005818:	7bfb      	ldrb	r3, [r7, #15]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop

08005828 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a38      	ldr	r2, [pc, #224]	@ (800591c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d022      	beq.n	8005886 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a36      	ldr	r2, [pc, #216]	@ (8005920 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d01d      	beq.n	8005886 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a35      	ldr	r2, [pc, #212]	@ (8005924 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d018      	beq.n	8005886 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a33      	ldr	r2, [pc, #204]	@ (8005928 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d013      	beq.n	8005886 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a32      	ldr	r2, [pc, #200]	@ (800592c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00e      	beq.n	8005886 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a30      	ldr	r2, [pc, #192]	@ (8005930 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d009      	beq.n	8005886 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a2f      	ldr	r2, [pc, #188]	@ (8005934 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d004      	beq.n	8005886 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a2d      	ldr	r2, [pc, #180]	@ (8005938 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d101      	bne.n	800588a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800588a:	2300      	movs	r3, #0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d01a      	beq.n	80058c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	3b08      	subs	r3, #8
 8005898:	4a28      	ldr	r2, [pc, #160]	@ (800593c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800589a:	fba2 2303 	umull	r2, r3, r2, r3
 800589e:	091b      	lsrs	r3, r3, #4
 80058a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4b26      	ldr	r3, [pc, #152]	@ (8005940 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	461a      	mov	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a24      	ldr	r2, [pc, #144]	@ (8005944 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80058b4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f003 031f 	and.w	r3, r3, #31
 80058bc:	2201      	movs	r2, #1
 80058be:	409a      	lsls	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80058c4:	e024      	b.n	8005910 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	3b10      	subs	r3, #16
 80058ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005948 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80058d0:	fba2 2303 	umull	r2, r3, r2, r3
 80058d4:	091b      	lsrs	r3, r3, #4
 80058d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	4a1c      	ldr	r2, [pc, #112]	@ (800594c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d806      	bhi.n	80058ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005950 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d902      	bls.n	80058ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3308      	adds	r3, #8
 80058ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4b18      	ldr	r3, [pc, #96]	@ (8005954 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	461a      	mov	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a16      	ldr	r2, [pc, #88]	@ (8005958 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005900:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f003 031f 	and.w	r3, r3, #31
 8005908:	2201      	movs	r2, #1
 800590a:	409a      	lsls	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005910:	bf00      	nop
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	58025408 	.word	0x58025408
 8005920:	5802541c 	.word	0x5802541c
 8005924:	58025430 	.word	0x58025430
 8005928:	58025444 	.word	0x58025444
 800592c:	58025458 	.word	0x58025458
 8005930:	5802546c 	.word	0x5802546c
 8005934:	58025480 	.word	0x58025480
 8005938:	58025494 	.word	0x58025494
 800593c:	cccccccd 	.word	0xcccccccd
 8005940:	16009600 	.word	0x16009600
 8005944:	58025880 	.word	0x58025880
 8005948:	aaaaaaab 	.word	0xaaaaaaab
 800594c:	400204b8 	.word	0x400204b8
 8005950:	4002040f 	.word	0x4002040f
 8005954:	10008200 	.word	0x10008200
 8005958:	40020880 	.word	0x40020880

0800595c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	b2db      	uxtb	r3, r3
 800596a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d04a      	beq.n	8005a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2b08      	cmp	r3, #8
 8005976:	d847      	bhi.n	8005a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a25      	ldr	r2, [pc, #148]	@ (8005a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d022      	beq.n	80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a24      	ldr	r2, [pc, #144]	@ (8005a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d01d      	beq.n	80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a22      	ldr	r2, [pc, #136]	@ (8005a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d018      	beq.n	80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a21      	ldr	r2, [pc, #132]	@ (8005a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d013      	beq.n	80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00e      	beq.n	80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d009      	beq.n	80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a1c      	ldr	r2, [pc, #112]	@ (8005a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d004      	beq.n	80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d101      	bne.n	80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80059cc:	2300      	movs	r3, #0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4b17      	ldr	r3, [pc, #92]	@ (8005a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80059d6:	4413      	add	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	461a      	mov	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a15      	ldr	r2, [pc, #84]	@ (8005a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80059e4:	671a      	str	r2, [r3, #112]	@ 0x70
 80059e6:	e009      	b.n	80059fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	4b14      	ldr	r3, [pc, #80]	@ (8005a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80059ec:	4413      	add	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	461a      	mov	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a11      	ldr	r2, [pc, #68]	@ (8005a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80059fa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	2201      	movs	r2, #1
 8005a02:	409a      	lsls	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005a08:	bf00      	nop
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	58025408 	.word	0x58025408
 8005a18:	5802541c 	.word	0x5802541c
 8005a1c:	58025430 	.word	0x58025430
 8005a20:	58025444 	.word	0x58025444
 8005a24:	58025458 	.word	0x58025458
 8005a28:	5802546c 	.word	0x5802546c
 8005a2c:	58025480 	.word	0x58025480
 8005a30:	58025494 	.word	0x58025494
 8005a34:	1600963f 	.word	0x1600963f
 8005a38:	58025940 	.word	0x58025940
 8005a3c:	1000823f 	.word	0x1000823f
 8005a40:	40020940 	.word	0x40020940

08005a44 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	2b80      	cmp	r3, #128	@ 0x80
 8005a5c:	d105      	bne.n	8005a6a <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a64:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e315      	b.n	8006096 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e30e      	b.n	8006096 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	f040 82fd 	bne.w	8006088 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2202      	movs	r2, #2
 8005a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a82      	ldr	r2, [pc, #520]	@ (8005cac <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d04a      	beq.n	8005b3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a81      	ldr	r2, [pc, #516]	@ (8005cb0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d045      	beq.n	8005b3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a7f      	ldr	r2, [pc, #508]	@ (8005cb4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d040      	beq.n	8005b3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a7e      	ldr	r2, [pc, #504]	@ (8005cb8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d03b      	beq.n	8005b3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a7c      	ldr	r2, [pc, #496]	@ (8005cbc <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d036      	beq.n	8005b3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a7b      	ldr	r2, [pc, #492]	@ (8005cc0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d031      	beq.n	8005b3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a79      	ldr	r2, [pc, #484]	@ (8005cc4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d02c      	beq.n	8005b3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a78      	ldr	r2, [pc, #480]	@ (8005cc8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d027      	beq.n	8005b3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a76      	ldr	r2, [pc, #472]	@ (8005ccc <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d022      	beq.n	8005b3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a75      	ldr	r2, [pc, #468]	@ (8005cd0 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d01d      	beq.n	8005b3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a73      	ldr	r2, [pc, #460]	@ (8005cd4 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d018      	beq.n	8005b3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a72      	ldr	r2, [pc, #456]	@ (8005cd8 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d013      	beq.n	8005b3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a70      	ldr	r2, [pc, #448]	@ (8005cdc <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d00e      	beq.n	8005b3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a6f      	ldr	r2, [pc, #444]	@ (8005ce0 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d009      	beq.n	8005b3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a6d      	ldr	r2, [pc, #436]	@ (8005ce4 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d004      	beq.n	8005b3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a6c      	ldr	r2, [pc, #432]	@ (8005ce8 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d101      	bne.n	8005b40 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e000      	b.n	8005b42 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8005b40:	2300      	movs	r3, #0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d018      	beq.n	8005b78 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005b54:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b62:	3308      	adds	r3, #8
 8005b64:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b6a:	f003 031f 	and.w	r3, r3, #31
 8005b6e:	223f      	movs	r2, #63	@ 0x3f
 8005b70:	409a      	lsls	r2, r3
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	e018      	b.n	8005baa <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6819      	ldr	r1, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	f248 0320 	movw	r3, #32800	@ 0x8020
 8005b86:	430b      	orrs	r3, r1
 8005b88:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b96:	3304      	adds	r3, #4
 8005b98:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b9e:	f003 031f 	and.w	r3, r3, #31
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	409a      	lsls	r2, r3
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	68b9      	ldr	r1, [r7, #8]
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 fb41 	bl	8006238 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a3c      	ldr	r2, [pc, #240]	@ (8005cac <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d072      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a3a      	ldr	r2, [pc, #232]	@ (8005cb0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d06d      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a39      	ldr	r2, [pc, #228]	@ (8005cb4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d068      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a37      	ldr	r2, [pc, #220]	@ (8005cb8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d063      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a36      	ldr	r2, [pc, #216]	@ (8005cbc <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d05e      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a34      	ldr	r2, [pc, #208]	@ (8005cc0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d059      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a33      	ldr	r2, [pc, #204]	@ (8005cc4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d054      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a31      	ldr	r2, [pc, #196]	@ (8005cc8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d04f      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a30      	ldr	r2, [pc, #192]	@ (8005ccc <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d04a      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a2e      	ldr	r2, [pc, #184]	@ (8005cd0 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d045      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8005cd4 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d040      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a2b      	ldr	r2, [pc, #172]	@ (8005cd8 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d03b      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a2a      	ldr	r2, [pc, #168]	@ (8005cdc <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d036      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a28      	ldr	r2, [pc, #160]	@ (8005ce0 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d031      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a27      	ldr	r2, [pc, #156]	@ (8005ce4 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d02c      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a25      	ldr	r2, [pc, #148]	@ (8005ce8 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d027      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a24      	ldr	r2, [pc, #144]	@ (8005cec <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d022      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a22      	ldr	r2, [pc, #136]	@ (8005cf0 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d01d      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a21      	ldr	r2, [pc, #132]	@ (8005cf4 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d018      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a1f      	ldr	r2, [pc, #124]	@ (8005cf8 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d013      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a1e      	ldr	r2, [pc, #120]	@ (8005cfc <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00e      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8005d00 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d009      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a1b      	ldr	r2, [pc, #108]	@ (8005d04 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d004      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a19      	ldr	r2, [pc, #100]	@ (8005d08 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d132      	bne.n	8005d0c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e031      	b.n	8005d0e <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8005caa:	bf00      	nop
 8005cac:	40020010 	.word	0x40020010
 8005cb0:	40020028 	.word	0x40020028
 8005cb4:	40020040 	.word	0x40020040
 8005cb8:	40020058 	.word	0x40020058
 8005cbc:	40020070 	.word	0x40020070
 8005cc0:	40020088 	.word	0x40020088
 8005cc4:	400200a0 	.word	0x400200a0
 8005cc8:	400200b8 	.word	0x400200b8
 8005ccc:	40020410 	.word	0x40020410
 8005cd0:	40020428 	.word	0x40020428
 8005cd4:	40020440 	.word	0x40020440
 8005cd8:	40020458 	.word	0x40020458
 8005cdc:	40020470 	.word	0x40020470
 8005ce0:	40020488 	.word	0x40020488
 8005ce4:	400204a0 	.word	0x400204a0
 8005ce8:	400204b8 	.word	0x400204b8
 8005cec:	58025408 	.word	0x58025408
 8005cf0:	5802541c 	.word	0x5802541c
 8005cf4:	58025430 	.word	0x58025430
 8005cf8:	58025444 	.word	0x58025444
 8005cfc:	58025458 	.word	0x58025458
 8005d00:	5802546c 	.word	0x5802546c
 8005d04:	58025480 	.word	0x58025480
 8005d08:	58025494 	.word	0x58025494
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00d      	beq.n	8005d2e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005d1a:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d004      	beq.n	8005d2e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005d2c:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a3b      	ldr	r2, [pc, #236]	@ (8005e20 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d04a      	beq.n	8005dce <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a39      	ldr	r2, [pc, #228]	@ (8005e24 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d045      	beq.n	8005dce <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a38      	ldr	r2, [pc, #224]	@ (8005e28 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d040      	beq.n	8005dce <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a36      	ldr	r2, [pc, #216]	@ (8005e2c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d03b      	beq.n	8005dce <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a35      	ldr	r2, [pc, #212]	@ (8005e30 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d036      	beq.n	8005dce <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a33      	ldr	r2, [pc, #204]	@ (8005e34 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d031      	beq.n	8005dce <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a32      	ldr	r2, [pc, #200]	@ (8005e38 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d02c      	beq.n	8005dce <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a30      	ldr	r2, [pc, #192]	@ (8005e3c <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d027      	beq.n	8005dce <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a2f      	ldr	r2, [pc, #188]	@ (8005e40 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d022      	beq.n	8005dce <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a2d      	ldr	r2, [pc, #180]	@ (8005e44 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d01d      	beq.n	8005dce <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a2c      	ldr	r2, [pc, #176]	@ (8005e48 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d018      	beq.n	8005dce <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a2a      	ldr	r2, [pc, #168]	@ (8005e4c <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d013      	beq.n	8005dce <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a29      	ldr	r2, [pc, #164]	@ (8005e50 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00e      	beq.n	8005dce <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a27      	ldr	r2, [pc, #156]	@ (8005e54 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d009      	beq.n	8005dce <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a26      	ldr	r2, [pc, #152]	@ (8005e58 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d004      	beq.n	8005dce <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a24      	ldr	r2, [pc, #144]	@ (8005e5c <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d101      	bne.n	8005dd2 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e000      	b.n	8005dd4 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d043      	beq.n	8005e60 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f023 021e 	bic.w	r2, r3, #30
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f042 0216 	orr.w	r2, r2, #22
 8005dea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695a      	ldr	r2, [r3, #20]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005dfa:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d103      	bne.n	8005e0c <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d043      	beq.n	8005e94 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0208 	orr.w	r2, r2, #8
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	e03a      	b.n	8005e94 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8005e1e:	bf00      	nop
 8005e20:	40020010 	.word	0x40020010
 8005e24:	40020028 	.word	0x40020028
 8005e28:	40020040 	.word	0x40020040
 8005e2c:	40020058 	.word	0x40020058
 8005e30:	40020070 	.word	0x40020070
 8005e34:	40020088 	.word	0x40020088
 8005e38:	400200a0 	.word	0x400200a0
 8005e3c:	400200b8 	.word	0x400200b8
 8005e40:	40020410 	.word	0x40020410
 8005e44:	40020428 	.word	0x40020428
 8005e48:	40020440 	.word	0x40020440
 8005e4c:	40020458 	.word	0x40020458
 8005e50:	40020470 	.word	0x40020470
 8005e54:	40020488 	.word	0x40020488
 8005e58:	400204a0 	.word	0x400204a0
 8005e5c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f023 020e 	bic.w	r2, r3, #14
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 020a 	orr.w	r2, r2, #10
 8005e72:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d103      	bne.n	8005e84 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d007      	beq.n	8005e94 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0204 	orr.w	r2, r2, #4
 8005e92:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a81      	ldr	r2, [pc, #516]	@ (80060a0 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d072      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a80      	ldr	r2, [pc, #512]	@ (80060a4 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d06d      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a7e      	ldr	r2, [pc, #504]	@ (80060a8 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d068      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a7d      	ldr	r2, [pc, #500]	@ (80060ac <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d063      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a7b      	ldr	r2, [pc, #492]	@ (80060b0 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d05e      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a7a      	ldr	r2, [pc, #488]	@ (80060b4 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d059      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a78      	ldr	r2, [pc, #480]	@ (80060b8 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d054      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a77      	ldr	r2, [pc, #476]	@ (80060bc <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d04f      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a75      	ldr	r2, [pc, #468]	@ (80060c0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d04a      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a74      	ldr	r2, [pc, #464]	@ (80060c4 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d045      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a72      	ldr	r2, [pc, #456]	@ (80060c8 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d040      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a71      	ldr	r2, [pc, #452]	@ (80060cc <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d03b      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a6f      	ldr	r2, [pc, #444]	@ (80060d0 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d036      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a6e      	ldr	r2, [pc, #440]	@ (80060d4 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d031      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a6c      	ldr	r2, [pc, #432]	@ (80060d8 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d02c      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a6b      	ldr	r2, [pc, #428]	@ (80060dc <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d027      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a69      	ldr	r2, [pc, #420]	@ (80060e0 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d022      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a68      	ldr	r2, [pc, #416]	@ (80060e4 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d01d      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a66      	ldr	r2, [pc, #408]	@ (80060e8 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d018      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a65      	ldr	r2, [pc, #404]	@ (80060ec <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d013      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a63      	ldr	r2, [pc, #396]	@ (80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00e      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a62      	ldr	r2, [pc, #392]	@ (80060f4 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d009      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a60      	ldr	r2, [pc, #384]	@ (80060f8 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d004      	beq.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a5f      	ldr	r2, [pc, #380]	@ (80060fc <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d101      	bne.n	8005f88 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8005f84:	2301      	movs	r3, #1
 8005f86:	e000      	b.n	8005f8a <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d01a      	beq.n	8005fc4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d007      	beq.n	8005fac <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fa6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005faa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d007      	beq.n	8005fc4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fc2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a35      	ldr	r2, [pc, #212]	@ (80060a0 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d04a      	beq.n	8006064 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a34      	ldr	r2, [pc, #208]	@ (80060a4 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d045      	beq.n	8006064 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a32      	ldr	r2, [pc, #200]	@ (80060a8 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d040      	beq.n	8006064 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a31      	ldr	r2, [pc, #196]	@ (80060ac <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d03b      	beq.n	8006064 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a2f      	ldr	r2, [pc, #188]	@ (80060b0 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d036      	beq.n	8006064 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a2e      	ldr	r2, [pc, #184]	@ (80060b4 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d031      	beq.n	8006064 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a2c      	ldr	r2, [pc, #176]	@ (80060b8 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d02c      	beq.n	8006064 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a2b      	ldr	r2, [pc, #172]	@ (80060bc <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d027      	beq.n	8006064 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a29      	ldr	r2, [pc, #164]	@ (80060c0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d022      	beq.n	8006064 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a28      	ldr	r2, [pc, #160]	@ (80060c4 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d01d      	beq.n	8006064 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a26      	ldr	r2, [pc, #152]	@ (80060c8 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d018      	beq.n	8006064 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a25      	ldr	r2, [pc, #148]	@ (80060cc <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d013      	beq.n	8006064 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a23      	ldr	r2, [pc, #140]	@ (80060d0 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00e      	beq.n	8006064 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a22      	ldr	r2, [pc, #136]	@ (80060d4 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d009      	beq.n	8006064 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a20      	ldr	r2, [pc, #128]	@ (80060d8 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d004      	beq.n	8006064 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a1f      	ldr	r2, [pc, #124]	@ (80060dc <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d108      	bne.n	8006076 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0201 	orr.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	e00e      	b.n	8006094 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f042 0201 	orr.w	r2, r2, #1
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	e005      	b.n	8006094 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800608e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006094:	7dfb      	ldrb	r3, [r7, #23]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	40020010 	.word	0x40020010
 80060a4:	40020028 	.word	0x40020028
 80060a8:	40020040 	.word	0x40020040
 80060ac:	40020058 	.word	0x40020058
 80060b0:	40020070 	.word	0x40020070
 80060b4:	40020088 	.word	0x40020088
 80060b8:	400200a0 	.word	0x400200a0
 80060bc:	400200b8 	.word	0x400200b8
 80060c0:	40020410 	.word	0x40020410
 80060c4:	40020428 	.word	0x40020428
 80060c8:	40020440 	.word	0x40020440
 80060cc:	40020458 	.word	0x40020458
 80060d0:	40020470 	.word	0x40020470
 80060d4:	40020488 	.word	0x40020488
 80060d8:	400204a0 	.word	0x400204a0
 80060dc:	400204b8 	.word	0x400204b8
 80060e0:	58025408 	.word	0x58025408
 80060e4:	5802541c 	.word	0x5802541c
 80060e8:	58025430 	.word	0x58025430
 80060ec:	58025444 	.word	0x58025444
 80060f0:	58025458 	.word	0x58025458
 80060f4:	5802546c 	.word	0x5802546c
 80060f8:	58025480 	.word	0x58025480
 80060fc:	58025494 	.word	0x58025494

08006100 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	4613      	mov	r3, r2
 800610c:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a39      	ldr	r2, [pc, #228]	@ (80061f8 <HAL_DMAEx_ChangeMemory+0xf8>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d04a      	beq.n	80061ae <HAL_DMAEx_ChangeMemory+0xae>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a37      	ldr	r2, [pc, #220]	@ (80061fc <HAL_DMAEx_ChangeMemory+0xfc>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d045      	beq.n	80061ae <HAL_DMAEx_ChangeMemory+0xae>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a36      	ldr	r2, [pc, #216]	@ (8006200 <HAL_DMAEx_ChangeMemory+0x100>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d040      	beq.n	80061ae <HAL_DMAEx_ChangeMemory+0xae>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a34      	ldr	r2, [pc, #208]	@ (8006204 <HAL_DMAEx_ChangeMemory+0x104>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d03b      	beq.n	80061ae <HAL_DMAEx_ChangeMemory+0xae>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a33      	ldr	r2, [pc, #204]	@ (8006208 <HAL_DMAEx_ChangeMemory+0x108>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d036      	beq.n	80061ae <HAL_DMAEx_ChangeMemory+0xae>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a31      	ldr	r2, [pc, #196]	@ (800620c <HAL_DMAEx_ChangeMemory+0x10c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d031      	beq.n	80061ae <HAL_DMAEx_ChangeMemory+0xae>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a30      	ldr	r2, [pc, #192]	@ (8006210 <HAL_DMAEx_ChangeMemory+0x110>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d02c      	beq.n	80061ae <HAL_DMAEx_ChangeMemory+0xae>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a2e      	ldr	r2, [pc, #184]	@ (8006214 <HAL_DMAEx_ChangeMemory+0x114>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d027      	beq.n	80061ae <HAL_DMAEx_ChangeMemory+0xae>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a2d      	ldr	r2, [pc, #180]	@ (8006218 <HAL_DMAEx_ChangeMemory+0x118>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d022      	beq.n	80061ae <HAL_DMAEx_ChangeMemory+0xae>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a2b      	ldr	r2, [pc, #172]	@ (800621c <HAL_DMAEx_ChangeMemory+0x11c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d01d      	beq.n	80061ae <HAL_DMAEx_ChangeMemory+0xae>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a2a      	ldr	r2, [pc, #168]	@ (8006220 <HAL_DMAEx_ChangeMemory+0x120>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d018      	beq.n	80061ae <HAL_DMAEx_ChangeMemory+0xae>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a28      	ldr	r2, [pc, #160]	@ (8006224 <HAL_DMAEx_ChangeMemory+0x124>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d013      	beq.n	80061ae <HAL_DMAEx_ChangeMemory+0xae>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a27      	ldr	r2, [pc, #156]	@ (8006228 <HAL_DMAEx_ChangeMemory+0x128>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00e      	beq.n	80061ae <HAL_DMAEx_ChangeMemory+0xae>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a25      	ldr	r2, [pc, #148]	@ (800622c <HAL_DMAEx_ChangeMemory+0x12c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d009      	beq.n	80061ae <HAL_DMAEx_ChangeMemory+0xae>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a24      	ldr	r2, [pc, #144]	@ (8006230 <HAL_DMAEx_ChangeMemory+0x130>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d004      	beq.n	80061ae <HAL_DMAEx_ChangeMemory+0xae>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a22      	ldr	r2, [pc, #136]	@ (8006234 <HAL_DMAEx_ChangeMemory+0x134>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d101      	bne.n	80061b2 <HAL_DMAEx_ChangeMemory+0xb2>
 80061ae:	2301      	movs	r3, #1
 80061b0:	e000      	b.n	80061b4 <HAL_DMAEx_ChangeMemory+0xb4>
 80061b2:	2300      	movs	r3, #0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00c      	beq.n	80061d2 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 80061b8:	79fb      	ldrb	r3, [r7, #7]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d104      	bne.n	80061c8 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	60da      	str	r2, [r3, #12]
 80061c6:	e010      	b.n	80061ea <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	611a      	str	r2, [r3, #16]
 80061d0:	e00b      	b.n	80061ea <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 80061d2:	79fb      	ldrb	r3, [r7, #7]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d104      	bne.n	80061e2 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	60da      	str	r2, [r3, #12]
 80061e0:	e003      	b.n	80061ea <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr
 80061f8:	40020010 	.word	0x40020010
 80061fc:	40020028 	.word	0x40020028
 8006200:	40020040 	.word	0x40020040
 8006204:	40020058 	.word	0x40020058
 8006208:	40020070 	.word	0x40020070
 800620c:	40020088 	.word	0x40020088
 8006210:	400200a0 	.word	0x400200a0
 8006214:	400200b8 	.word	0x400200b8
 8006218:	40020410 	.word	0x40020410
 800621c:	40020428 	.word	0x40020428
 8006220:	40020440 	.word	0x40020440
 8006224:	40020458 	.word	0x40020458
 8006228:	40020470 	.word	0x40020470
 800622c:	40020488 	.word	0x40020488
 8006230:	400204a0 	.word	0x400204a0
 8006234:	400204b8 	.word	0x400204b8

08006238 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a46      	ldr	r2, [pc, #280]	@ (8006364 <DMA_MultiBufferSetConfig+0x12c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d04a      	beq.n	80062e6 <DMA_MultiBufferSetConfig+0xae>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a44      	ldr	r2, [pc, #272]	@ (8006368 <DMA_MultiBufferSetConfig+0x130>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d045      	beq.n	80062e6 <DMA_MultiBufferSetConfig+0xae>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a43      	ldr	r2, [pc, #268]	@ (800636c <DMA_MultiBufferSetConfig+0x134>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d040      	beq.n	80062e6 <DMA_MultiBufferSetConfig+0xae>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a41      	ldr	r2, [pc, #260]	@ (8006370 <DMA_MultiBufferSetConfig+0x138>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d03b      	beq.n	80062e6 <DMA_MultiBufferSetConfig+0xae>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a40      	ldr	r2, [pc, #256]	@ (8006374 <DMA_MultiBufferSetConfig+0x13c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d036      	beq.n	80062e6 <DMA_MultiBufferSetConfig+0xae>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a3e      	ldr	r2, [pc, #248]	@ (8006378 <DMA_MultiBufferSetConfig+0x140>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d031      	beq.n	80062e6 <DMA_MultiBufferSetConfig+0xae>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a3d      	ldr	r2, [pc, #244]	@ (800637c <DMA_MultiBufferSetConfig+0x144>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d02c      	beq.n	80062e6 <DMA_MultiBufferSetConfig+0xae>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a3b      	ldr	r2, [pc, #236]	@ (8006380 <DMA_MultiBufferSetConfig+0x148>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d027      	beq.n	80062e6 <DMA_MultiBufferSetConfig+0xae>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a3a      	ldr	r2, [pc, #232]	@ (8006384 <DMA_MultiBufferSetConfig+0x14c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d022      	beq.n	80062e6 <DMA_MultiBufferSetConfig+0xae>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a38      	ldr	r2, [pc, #224]	@ (8006388 <DMA_MultiBufferSetConfig+0x150>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d01d      	beq.n	80062e6 <DMA_MultiBufferSetConfig+0xae>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a37      	ldr	r2, [pc, #220]	@ (800638c <DMA_MultiBufferSetConfig+0x154>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d018      	beq.n	80062e6 <DMA_MultiBufferSetConfig+0xae>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a35      	ldr	r2, [pc, #212]	@ (8006390 <DMA_MultiBufferSetConfig+0x158>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d013      	beq.n	80062e6 <DMA_MultiBufferSetConfig+0xae>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a34      	ldr	r2, [pc, #208]	@ (8006394 <DMA_MultiBufferSetConfig+0x15c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d00e      	beq.n	80062e6 <DMA_MultiBufferSetConfig+0xae>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a32      	ldr	r2, [pc, #200]	@ (8006398 <DMA_MultiBufferSetConfig+0x160>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d009      	beq.n	80062e6 <DMA_MultiBufferSetConfig+0xae>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a31      	ldr	r2, [pc, #196]	@ (800639c <DMA_MultiBufferSetConfig+0x164>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d004      	beq.n	80062e6 <DMA_MultiBufferSetConfig+0xae>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a2f      	ldr	r2, [pc, #188]	@ (80063a0 <DMA_MultiBufferSetConfig+0x168>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d101      	bne.n	80062ea <DMA_MultiBufferSetConfig+0xb2>
 80062e6:	2301      	movs	r3, #1
 80062e8:	e000      	b.n	80062ec <DMA_MultiBufferSetConfig+0xb4>
 80062ea:	2300      	movs	r3, #0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d019      	beq.n	8006324 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	2b40      	cmp	r3, #64	@ 0x40
 80062fe:	d108      	bne.n	8006312 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8006310:	e021      	b.n	8006356 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	60da      	str	r2, [r3, #12]
}
 8006322:	e018      	b.n	8006356 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	2b40      	cmp	r3, #64	@ 0x40
 8006332:	d108      	bne.n	8006346 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	60da      	str	r2, [r3, #12]
}
 8006344:	e007      	b.n	8006356 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	60da      	str	r2, [r3, #12]
}
 8006356:	bf00      	nop
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	40020010 	.word	0x40020010
 8006368:	40020028 	.word	0x40020028
 800636c:	40020040 	.word	0x40020040
 8006370:	40020058 	.word	0x40020058
 8006374:	40020070 	.word	0x40020070
 8006378:	40020088 	.word	0x40020088
 800637c:	400200a0 	.word	0x400200a0
 8006380:	400200b8 	.word	0x400200b8
 8006384:	40020410 	.word	0x40020410
 8006388:	40020428 	.word	0x40020428
 800638c:	40020440 	.word	0x40020440
 8006390:	40020458 	.word	0x40020458
 8006394:	40020470 	.word	0x40020470
 8006398:	40020488 	.word	0x40020488
 800639c:	400204a0 	.word	0x400204a0
 80063a0:	400204b8 	.word	0x400204b8

080063a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b089      	sub	sp, #36	@ 0x24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80063b2:	4b89      	ldr	r3, [pc, #548]	@ (80065d8 <HAL_GPIO_Init+0x234>)
 80063b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80063b6:	e194      	b.n	80066e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	2101      	movs	r1, #1
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	fa01 f303 	lsl.w	r3, r1, r3
 80063c4:	4013      	ands	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f000 8186 	beq.w	80066dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f003 0303 	and.w	r3, r3, #3
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d005      	beq.n	80063e8 <HAL_GPIO_Init+0x44>
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f003 0303 	and.w	r3, r3, #3
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d130      	bne.n	800644a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	2203      	movs	r2, #3
 80063f4:	fa02 f303 	lsl.w	r3, r2, r3
 80063f8:	43db      	mvns	r3, r3
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	4013      	ands	r3, r2
 80063fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	68da      	ldr	r2, [r3, #12]
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	005b      	lsls	r3, r3, #1
 8006408:	fa02 f303 	lsl.w	r3, r2, r3
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	4313      	orrs	r3, r2
 8006410:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800641e:	2201      	movs	r2, #1
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	fa02 f303 	lsl.w	r3, r2, r3
 8006426:	43db      	mvns	r3, r3
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	4013      	ands	r3, r2
 800642c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	091b      	lsrs	r3, r3, #4
 8006434:	f003 0201 	and.w	r2, r3, #1
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	fa02 f303 	lsl.w	r3, r2, r3
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	4313      	orrs	r3, r2
 8006442:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	2b03      	cmp	r3, #3
 8006454:	d017      	beq.n	8006486 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	2203      	movs	r2, #3
 8006462:	fa02 f303 	lsl.w	r3, r2, r3
 8006466:	43db      	mvns	r3, r3
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	4013      	ands	r3, r2
 800646c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	689a      	ldr	r2, [r3, #8]
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	fa02 f303 	lsl.w	r3, r2, r3
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	4313      	orrs	r3, r2
 800647e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f003 0303 	and.w	r3, r3, #3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d123      	bne.n	80064da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	08da      	lsrs	r2, r3, #3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3208      	adds	r2, #8
 800649a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800649e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	220f      	movs	r2, #15
 80064aa:	fa02 f303 	lsl.w	r3, r2, r3
 80064ae:	43db      	mvns	r3, r3
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	4013      	ands	r3, r2
 80064b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	691a      	ldr	r2, [r3, #16]
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	fa02 f303 	lsl.w	r3, r2, r3
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	08da      	lsrs	r2, r3, #3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3208      	adds	r2, #8
 80064d4:	69b9      	ldr	r1, [r7, #24]
 80064d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	2203      	movs	r2, #3
 80064e6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ea:	43db      	mvns	r3, r3
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	4013      	ands	r3, r2
 80064f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f003 0203 	and.w	r2, r3, #3
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	4313      	orrs	r3, r2
 8006506:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 80e0 	beq.w	80066dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800651c:	4b2f      	ldr	r3, [pc, #188]	@ (80065dc <HAL_GPIO_Init+0x238>)
 800651e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006522:	4a2e      	ldr	r2, [pc, #184]	@ (80065dc <HAL_GPIO_Init+0x238>)
 8006524:	f043 0302 	orr.w	r3, r3, #2
 8006528:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800652c:	4b2b      	ldr	r3, [pc, #172]	@ (80065dc <HAL_GPIO_Init+0x238>)
 800652e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800653a:	4a29      	ldr	r2, [pc, #164]	@ (80065e0 <HAL_GPIO_Init+0x23c>)
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	089b      	lsrs	r3, r3, #2
 8006540:	3302      	adds	r3, #2
 8006542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	220f      	movs	r2, #15
 8006552:	fa02 f303 	lsl.w	r3, r2, r3
 8006556:	43db      	mvns	r3, r3
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	4013      	ands	r3, r2
 800655c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a20      	ldr	r2, [pc, #128]	@ (80065e4 <HAL_GPIO_Init+0x240>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d052      	beq.n	800660c <HAL_GPIO_Init+0x268>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a1f      	ldr	r2, [pc, #124]	@ (80065e8 <HAL_GPIO_Init+0x244>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d031      	beq.n	80065d2 <HAL_GPIO_Init+0x22e>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a1e      	ldr	r2, [pc, #120]	@ (80065ec <HAL_GPIO_Init+0x248>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d02b      	beq.n	80065ce <HAL_GPIO_Init+0x22a>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a1d      	ldr	r2, [pc, #116]	@ (80065f0 <HAL_GPIO_Init+0x24c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d025      	beq.n	80065ca <HAL_GPIO_Init+0x226>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a1c      	ldr	r2, [pc, #112]	@ (80065f4 <HAL_GPIO_Init+0x250>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d01f      	beq.n	80065c6 <HAL_GPIO_Init+0x222>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a1b      	ldr	r2, [pc, #108]	@ (80065f8 <HAL_GPIO_Init+0x254>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d019      	beq.n	80065c2 <HAL_GPIO_Init+0x21e>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a1a      	ldr	r2, [pc, #104]	@ (80065fc <HAL_GPIO_Init+0x258>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d013      	beq.n	80065be <HAL_GPIO_Init+0x21a>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a19      	ldr	r2, [pc, #100]	@ (8006600 <HAL_GPIO_Init+0x25c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00d      	beq.n	80065ba <HAL_GPIO_Init+0x216>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a18      	ldr	r2, [pc, #96]	@ (8006604 <HAL_GPIO_Init+0x260>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d007      	beq.n	80065b6 <HAL_GPIO_Init+0x212>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a17      	ldr	r2, [pc, #92]	@ (8006608 <HAL_GPIO_Init+0x264>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d101      	bne.n	80065b2 <HAL_GPIO_Init+0x20e>
 80065ae:	2309      	movs	r3, #9
 80065b0:	e02d      	b.n	800660e <HAL_GPIO_Init+0x26a>
 80065b2:	230a      	movs	r3, #10
 80065b4:	e02b      	b.n	800660e <HAL_GPIO_Init+0x26a>
 80065b6:	2308      	movs	r3, #8
 80065b8:	e029      	b.n	800660e <HAL_GPIO_Init+0x26a>
 80065ba:	2307      	movs	r3, #7
 80065bc:	e027      	b.n	800660e <HAL_GPIO_Init+0x26a>
 80065be:	2306      	movs	r3, #6
 80065c0:	e025      	b.n	800660e <HAL_GPIO_Init+0x26a>
 80065c2:	2305      	movs	r3, #5
 80065c4:	e023      	b.n	800660e <HAL_GPIO_Init+0x26a>
 80065c6:	2304      	movs	r3, #4
 80065c8:	e021      	b.n	800660e <HAL_GPIO_Init+0x26a>
 80065ca:	2303      	movs	r3, #3
 80065cc:	e01f      	b.n	800660e <HAL_GPIO_Init+0x26a>
 80065ce:	2302      	movs	r3, #2
 80065d0:	e01d      	b.n	800660e <HAL_GPIO_Init+0x26a>
 80065d2:	2301      	movs	r3, #1
 80065d4:	e01b      	b.n	800660e <HAL_GPIO_Init+0x26a>
 80065d6:	bf00      	nop
 80065d8:	58000080 	.word	0x58000080
 80065dc:	58024400 	.word	0x58024400
 80065e0:	58000400 	.word	0x58000400
 80065e4:	58020000 	.word	0x58020000
 80065e8:	58020400 	.word	0x58020400
 80065ec:	58020800 	.word	0x58020800
 80065f0:	58020c00 	.word	0x58020c00
 80065f4:	58021000 	.word	0x58021000
 80065f8:	58021400 	.word	0x58021400
 80065fc:	58021800 	.word	0x58021800
 8006600:	58021c00 	.word	0x58021c00
 8006604:	58022000 	.word	0x58022000
 8006608:	58022400 	.word	0x58022400
 800660c:	2300      	movs	r3, #0
 800660e:	69fa      	ldr	r2, [r7, #28]
 8006610:	f002 0203 	and.w	r2, r2, #3
 8006614:	0092      	lsls	r2, r2, #2
 8006616:	4093      	lsls	r3, r2
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	4313      	orrs	r3, r2
 800661c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800661e:	4938      	ldr	r1, [pc, #224]	@ (8006700 <HAL_GPIO_Init+0x35c>)
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	089b      	lsrs	r3, r3, #2
 8006624:	3302      	adds	r3, #2
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800662c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	43db      	mvns	r3, r3
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	4013      	ands	r3, r2
 800663c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	4313      	orrs	r3, r2
 8006650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006652:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800665a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	43db      	mvns	r3, r3
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	4013      	ands	r3, r2
 800666a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	4313      	orrs	r3, r2
 800667e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006680:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	43db      	mvns	r3, r3
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	4013      	ands	r3, r2
 8006696:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d003      	beq.n	80066ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	43db      	mvns	r3, r3
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	4013      	ands	r3, r2
 80066c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	3301      	adds	r3, #1
 80066e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	fa22 f303 	lsr.w	r3, r2, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f47f ae63 	bne.w	80063b8 <HAL_GPIO_Init+0x14>
  }
}
 80066f2:	bf00      	nop
 80066f4:	bf00      	nop
 80066f6:	3724      	adds	r7, #36	@ 0x24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	58000400 	.word	0x58000400

08006704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	460b      	mov	r3, r1
 800670e:	807b      	strh	r3, [r7, #2]
 8006710:	4613      	mov	r3, r2
 8006712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006714:	787b      	ldrb	r3, [r7, #1]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800671a:	887a      	ldrh	r2, [r7, #2]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006720:	e003      	b.n	800672a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006722:	887b      	ldrh	r3, [r7, #2]
 8006724:	041a      	lsls	r2, r3, #16
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	619a      	str	r2, [r3, #24]
}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
	...

08006738 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e08b      	b.n	8006862 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d106      	bne.n	8006764 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7fb f8a8 	bl	80018b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2224      	movs	r2, #36	@ 0x24
 8006768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 0201 	bic.w	r2, r2, #1
 800677a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006788:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006798:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d107      	bne.n	80067b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689a      	ldr	r2, [r3, #8]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80067ae:	609a      	str	r2, [r3, #8]
 80067b0:	e006      	b.n	80067c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	689a      	ldr	r2, [r3, #8]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80067be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d108      	bne.n	80067da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067d6:	605a      	str	r2, [r3, #4]
 80067d8:	e007      	b.n	80067ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	6859      	ldr	r1, [r3, #4]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	4b1d      	ldr	r3, [pc, #116]	@ (800686c <HAL_I2C_Init+0x134>)
 80067f6:	430b      	orrs	r3, r1
 80067f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006808:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691a      	ldr	r2, [r3, #16]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	69d9      	ldr	r1, [r3, #28]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a1a      	ldr	r2, [r3, #32]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0201 	orr.w	r2, r2, #1
 8006842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2220      	movs	r2, #32
 800684e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	02008000 	.word	0x02008000

08006870 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af02      	add	r7, sp, #8
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	607a      	str	r2, [r7, #4]
 800687a:	461a      	mov	r2, r3
 800687c:	460b      	mov	r3, r1
 800687e:	817b      	strh	r3, [r7, #10]
 8006880:	4613      	mov	r3, r2
 8006882:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b20      	cmp	r3, #32
 800688e:	f040 80fd 	bne.w	8006a8c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006898:	2b01      	cmp	r3, #1
 800689a:	d101      	bne.n	80068a0 <HAL_I2C_Master_Transmit+0x30>
 800689c:	2302      	movs	r3, #2
 800689e:	e0f6      	b.n	8006a8e <HAL_I2C_Master_Transmit+0x21e>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80068a8:	f7fb fdd2 	bl	8002450 <HAL_GetTick>
 80068ac:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	2319      	movs	r3, #25
 80068b4:	2201      	movs	r2, #1
 80068b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f001 f891 	bl	80079e2 <I2C_WaitOnFlagUntilTimeout>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e0e1      	b.n	8006a8e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2221      	movs	r2, #33	@ 0x21
 80068ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2210      	movs	r2, #16
 80068d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	893a      	ldrh	r2, [r7, #8]
 80068ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	2bff      	cmp	r3, #255	@ 0xff
 80068fa:	d906      	bls.n	800690a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	22ff      	movs	r2, #255	@ 0xff
 8006900:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006902:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	e007      	b.n	800691a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800690e:	b29a      	uxth	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006914:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006918:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800691e:	2b00      	cmp	r3, #0
 8006920:	d024      	beq.n	800696c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006926:	781a      	ldrb	r2, [r3, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006932:	1c5a      	adds	r2, r3, #1
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800693c:	b29b      	uxth	r3, r3
 800693e:	3b01      	subs	r3, #1
 8006940:	b29a      	uxth	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800694a:	3b01      	subs	r3, #1
 800694c:	b29a      	uxth	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006956:	b2db      	uxtb	r3, r3
 8006958:	3301      	adds	r3, #1
 800695a:	b2da      	uxtb	r2, r3
 800695c:	8979      	ldrh	r1, [r7, #10]
 800695e:	4b4e      	ldr	r3, [pc, #312]	@ (8006a98 <HAL_I2C_Master_Transmit+0x228>)
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f001 fa8b 	bl	8007e80 <I2C_TransferConfig>
 800696a:	e066      	b.n	8006a3a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006970:	b2da      	uxtb	r2, r3
 8006972:	8979      	ldrh	r1, [r7, #10]
 8006974:	4b48      	ldr	r3, [pc, #288]	@ (8006a98 <HAL_I2C_Master_Transmit+0x228>)
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f001 fa80 	bl	8007e80 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006980:	e05b      	b.n	8006a3a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	6a39      	ldr	r1, [r7, #32]
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f001 f884 	bl	8007a94 <I2C_WaitOnTXISFlagUntilTimeout>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e07b      	b.n	8006a8e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699a:	781a      	ldrb	r2, [r3, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	3b01      	subs	r3, #1
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069be:	3b01      	subs	r3, #1
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d034      	beq.n	8006a3a <HAL_I2C_Master_Transmit+0x1ca>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d130      	bne.n	8006a3a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	2200      	movs	r2, #0
 80069e0:	2180      	movs	r1, #128	@ 0x80
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 fffd 	bl	80079e2 <I2C_WaitOnFlagUntilTimeout>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e04d      	b.n	8006a8e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	2bff      	cmp	r3, #255	@ 0xff
 80069fa:	d90e      	bls.n	8006a1a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	22ff      	movs	r2, #255	@ 0xff
 8006a00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	8979      	ldrh	r1, [r7, #10]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f001 fa34 	bl	8007e80 <I2C_TransferConfig>
 8006a18:	e00f      	b.n	8006a3a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	8979      	ldrh	r1, [r7, #10]
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f001 fa23 	bl	8007e80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d19e      	bne.n	8006982 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	6a39      	ldr	r1, [r7, #32]
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f001 f86a 	bl	8007b22 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e01a      	b.n	8006a8e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6859      	ldr	r1, [r3, #4]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a9c <HAL_I2C_Master_Transmit+0x22c>)
 8006a6c:	400b      	ands	r3, r1
 8006a6e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	e000      	b.n	8006a8e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006a8c:	2302      	movs	r3, #2
  }
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	80002000 	.word	0x80002000
 8006a9c:	fe00e800 	.word	0xfe00e800

08006aa0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b088      	sub	sp, #32
 8006aa4:	af02      	add	r7, sp, #8
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	607a      	str	r2, [r7, #4]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	460b      	mov	r3, r1
 8006aae:	817b      	strh	r3, [r7, #10]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b20      	cmp	r3, #32
 8006abe:	f040 80db 	bne.w	8006c78 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d101      	bne.n	8006ad0 <HAL_I2C_Master_Receive+0x30>
 8006acc:	2302      	movs	r3, #2
 8006ace:	e0d4      	b.n	8006c7a <HAL_I2C_Master_Receive+0x1da>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ad8:	f7fb fcba 	bl	8002450 <HAL_GetTick>
 8006adc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	2319      	movs	r3, #25
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 ff79 	bl	80079e2 <I2C_WaitOnFlagUntilTimeout>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e0bf      	b.n	8006c7a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2222      	movs	r2, #34	@ 0x22
 8006afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2210      	movs	r2, #16
 8006b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	893a      	ldrh	r2, [r7, #8]
 8006b1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	2bff      	cmp	r3, #255	@ 0xff
 8006b2a:	d90e      	bls.n	8006b4a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	22ff      	movs	r2, #255	@ 0xff
 8006b30:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	8979      	ldrh	r1, [r7, #10]
 8006b3a:	4b52      	ldr	r3, [pc, #328]	@ (8006c84 <HAL_I2C_Master_Receive+0x1e4>)
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f001 f99c 	bl	8007e80 <I2C_TransferConfig>
 8006b48:	e06d      	b.n	8006c26 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	8979      	ldrh	r1, [r7, #10]
 8006b5c:	4b49      	ldr	r3, [pc, #292]	@ (8006c84 <HAL_I2C_Master_Receive+0x1e4>)
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f001 f98b 	bl	8007e80 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006b6a:	e05c      	b.n	8006c26 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	6a39      	ldr	r1, [r7, #32]
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f001 f819 	bl	8007ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e07c      	b.n	8006c7a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8a:	b2d2      	uxtb	r2, r2
 8006b8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b92:	1c5a      	adds	r2, r3, #1
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d034      	beq.n	8006c26 <HAL_I2C_Master_Receive+0x186>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d130      	bne.n	8006c26 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	2180      	movs	r1, #128	@ 0x80
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f000 ff07 	bl	80079e2 <I2C_WaitOnFlagUntilTimeout>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e04d      	b.n	8006c7a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	2bff      	cmp	r3, #255	@ 0xff
 8006be6:	d90e      	bls.n	8006c06 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	22ff      	movs	r2, #255	@ 0xff
 8006bec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	8979      	ldrh	r1, [r7, #10]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f001 f93e 	bl	8007e80 <I2C_TransferConfig>
 8006c04:	e00f      	b.n	8006c26 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	8979      	ldrh	r1, [r7, #10]
 8006c18:	2300      	movs	r3, #0
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f001 f92d 	bl	8007e80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d19d      	bne.n	8006b6c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	6a39      	ldr	r1, [r7, #32]
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 ff74 	bl	8007b22 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e01a      	b.n	8006c7a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6859      	ldr	r1, [r3, #4]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	4b0c      	ldr	r3, [pc, #48]	@ (8006c88 <HAL_I2C_Master_Receive+0x1e8>)
 8006c58:	400b      	ands	r3, r1
 8006c5a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c74:	2300      	movs	r3, #0
 8006c76:	e000      	b.n	8006c7a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006c78:	2302      	movs	r3, #2
  }
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	80002400 	.word	0x80002400
 8006c88:	fe00e800 	.word	0xfe00e800

08006c8c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d005      	beq.n	8006cb8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	68f9      	ldr	r1, [r7, #12]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	4798      	blx	r3
  }
}
 8006cb8:	bf00      	nop
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	0a1b      	lsrs	r3, r3, #8
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d010      	beq.n	8006d06 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	09db      	lsrs	r3, r3, #7
 8006ce8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00a      	beq.n	8006d06 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cf4:	f043 0201 	orr.w	r2, r3, #1
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d04:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	0a9b      	lsrs	r3, r3, #10
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d010      	beq.n	8006d34 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	09db      	lsrs	r3, r3, #7
 8006d16:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00a      	beq.n	8006d34 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d22:	f043 0208 	orr.w	r2, r3, #8
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006d32:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	0a5b      	lsrs	r3, r3, #9
 8006d38:	f003 0301 	and.w	r3, r3, #1
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d010      	beq.n	8006d62 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	09db      	lsrs	r3, r3, #7
 8006d44:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00a      	beq.n	8006d62 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d50:	f043 0202 	orr.w	r2, r3, #2
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d60:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f003 030b 	and.w	r3, r3, #11
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8006d72:	68f9      	ldr	r1, [r7, #12]
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 fcdb 	bl	8007730 <I2C_ITError>
  }
}
 8006d7a:	bf00      	nop
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b083      	sub	sp, #12
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006d8a:	bf00      	nop
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b083      	sub	sp, #12
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006d9e:	bf00      	nop
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b083      	sub	sp, #12
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	460b      	mov	r3, r1
 8006db4:	70fb      	strb	r3, [r7, #3]
 8006db6:	4613      	mov	r3, r2
 8006db8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006dba:	bf00      	nop
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b083      	sub	sp, #12
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006dce:	bf00      	nop
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006de2:	bf00      	nop
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006df6:	bf00      	nop
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b086      	sub	sp, #24
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e12:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d101      	bne.n	8006e26 <I2C_Slave_ISR_IT+0x24>
 8006e22:	2302      	movs	r3, #2
 8006e24:	e0ed      	b.n	8007002 <I2C_Slave_ISR_IT+0x200>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	095b      	lsrs	r3, r3, #5
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00a      	beq.n	8006e50 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	095b      	lsrs	r3, r3, #5
 8006e3e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d004      	beq.n	8006e50 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006e46:	6939      	ldr	r1, [r7, #16]
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f000 f9c1 	bl	80071d0 <I2C_ITSlaveCplt>
 8006e4e:	e0d3      	b.n	8006ff8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	091b      	lsrs	r3, r3, #4
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d04d      	beq.n	8006ef8 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	091b      	lsrs	r3, r3, #4
 8006e60:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d047      	beq.n	8006ef8 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d128      	bne.n	8006ec4 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b28      	cmp	r3, #40	@ 0x28
 8006e7c:	d108      	bne.n	8006e90 <I2C_Slave_ISR_IT+0x8e>
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e84:	d104      	bne.n	8006e90 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006e86:	6939      	ldr	r1, [r7, #16]
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 fbfb 	bl	8007684 <I2C_ITListenCplt>
 8006e8e:	e032      	b.n	8006ef6 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b29      	cmp	r3, #41	@ 0x29
 8006e9a:	d10e      	bne.n	8006eba <I2C_Slave_ISR_IT+0xb8>
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ea2:	d00a      	beq.n	8006eba <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2210      	movs	r2, #16
 8006eaa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f000 fd56 	bl	800795e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 f92d 	bl	8007112 <I2C_ITSlaveSeqCplt>
 8006eb8:	e01d      	b.n	8006ef6 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2210      	movs	r2, #16
 8006ec0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006ec2:	e096      	b.n	8006ff2 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2210      	movs	r2, #16
 8006eca:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ed0:	f043 0204 	orr.w	r2, r3, #4
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d004      	beq.n	8006ee8 <I2C_Slave_ISR_IT+0xe6>
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ee4:	f040 8085 	bne.w	8006ff2 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eec:	4619      	mov	r1, r3
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 fc1e 	bl	8007730 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006ef4:	e07d      	b.n	8006ff2 <I2C_Slave_ISR_IT+0x1f0>
 8006ef6:	e07c      	b.n	8006ff2 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	089b      	lsrs	r3, r3, #2
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d030      	beq.n	8006f66 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	089b      	lsrs	r3, r3, #2
 8006f08:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d02a      	beq.n	8006f66 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d018      	beq.n	8006f4c <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f24:	b2d2      	uxtb	r2, r2
 8006f26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	3b01      	subs	r3, #1
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d14f      	bne.n	8006ff6 <I2C_Slave_ISR_IT+0x1f4>
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006f5c:	d04b      	beq.n	8006ff6 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 f8d7 	bl	8007112 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006f64:	e047      	b.n	8006ff6 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	08db      	lsrs	r3, r3, #3
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00a      	beq.n	8006f88 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	08db      	lsrs	r3, r3, #3
 8006f76:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d004      	beq.n	8006f88 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006f7e:	6939      	ldr	r1, [r7, #16]
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 f842 	bl	800700a <I2C_ITAddrCplt>
 8006f86:	e037      	b.n	8006ff8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	085b      	lsrs	r3, r3, #1
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d031      	beq.n	8006ff8 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	085b      	lsrs	r3, r3, #1
 8006f98:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d02b      	beq.n	8006ff8 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d018      	beq.n	8006fdc <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fae:	781a      	ldrb	r2, [r3, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006fda:	e00d      	b.n	8006ff8 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fe2:	d002      	beq.n	8006fea <I2C_Slave_ISR_IT+0x1e8>
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d106      	bne.n	8006ff8 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 f891 	bl	8007112 <I2C_ITSlaveSeqCplt>
 8006ff0:	e002      	b.n	8006ff8 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8006ff2:	bf00      	nop
 8006ff4:	e000      	b.n	8006ff8 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8006ff6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b084      	sub	sp, #16
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800701a:	b2db      	uxtb	r3, r3
 800701c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007020:	2b28      	cmp	r3, #40	@ 0x28
 8007022:	d16a      	bne.n	80070fa <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	0c1b      	lsrs	r3, r3, #16
 800702c:	b2db      	uxtb	r3, r3
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	0c1b      	lsrs	r3, r3, #16
 800703c:	b29b      	uxth	r3, r3
 800703e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007042:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	b29b      	uxth	r3, r3
 800704c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007050:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	b29b      	uxth	r3, r3
 800705a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800705e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	2b02      	cmp	r3, #2
 8007066:	d138      	bne.n	80070da <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007068:	897b      	ldrh	r3, [r7, #10]
 800706a:	09db      	lsrs	r3, r3, #7
 800706c:	b29a      	uxth	r2, r3
 800706e:	89bb      	ldrh	r3, [r7, #12]
 8007070:	4053      	eors	r3, r2
 8007072:	b29b      	uxth	r3, r3
 8007074:	f003 0306 	and.w	r3, r3, #6
 8007078:	2b00      	cmp	r3, #0
 800707a:	d11c      	bne.n	80070b6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800707c:	897b      	ldrh	r3, [r7, #10]
 800707e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007084:	1c5a      	adds	r2, r3, #1
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800708e:	2b02      	cmp	r3, #2
 8007090:	d13b      	bne.n	800710a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2208      	movs	r2, #8
 800709e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80070a8:	89ba      	ldrh	r2, [r7, #12]
 80070aa:	7bfb      	ldrb	r3, [r7, #15]
 80070ac:	4619      	mov	r1, r3
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7ff fe7b 	bl	8006daa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80070b4:	e029      	b.n	800710a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80070b6:	893b      	ldrh	r3, [r7, #8]
 80070b8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80070ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 ff10 	bl	8007ee4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80070cc:	89ba      	ldrh	r2, [r7, #12]
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	4619      	mov	r1, r3
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7ff fe69 	bl	8006daa <HAL_I2C_AddrCallback>
}
 80070d8:	e017      	b.n	800710a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80070da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 ff00 	bl	8007ee4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80070ec:	89ba      	ldrh	r2, [r7, #12]
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
 80070f0:	4619      	mov	r1, r3
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7ff fe59 	bl	8006daa <HAL_I2C_AddrCallback>
}
 80070f8:	e007      	b.n	800710a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2208      	movs	r2, #8
 8007100:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800710a:	bf00      	nop
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	0b9b      	lsrs	r3, r3, #14
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	2b00      	cmp	r3, #0
 8007134:	d008      	beq.n	8007148 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	e00d      	b.n	8007164 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	0bdb      	lsrs	r3, r3, #15
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b00      	cmp	r3, #0
 8007152:	d007      	beq.n	8007164 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007162:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b29      	cmp	r3, #41	@ 0x29
 800716e:	d112      	bne.n	8007196 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2228      	movs	r2, #40	@ 0x28
 8007174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2221      	movs	r2, #33	@ 0x21
 800717c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800717e:	2101      	movs	r1, #1
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 feaf 	bl	8007ee4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7ff fdf7 	bl	8006d82 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007194:	e017      	b.n	80071c6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b2a      	cmp	r3, #42	@ 0x2a
 80071a0:	d111      	bne.n	80071c6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2228      	movs	r2, #40	@ 0x28
 80071a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2222      	movs	r2, #34	@ 0x22
 80071ae:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80071b0:	2102      	movs	r1, #2
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fe96 	bl	8007ee4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff fde8 	bl	8006d96 <HAL_I2C_SlaveRxCpltCallback>
}
 80071c6:	bf00      	nop
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ea:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071f2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2220      	movs	r2, #32
 80071fa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80071fc:	7afb      	ldrb	r3, [r7, #11]
 80071fe:	2b21      	cmp	r3, #33	@ 0x21
 8007200:	d002      	beq.n	8007208 <I2C_ITSlaveCplt+0x38>
 8007202:	7afb      	ldrb	r3, [r7, #11]
 8007204:	2b29      	cmp	r3, #41	@ 0x29
 8007206:	d108      	bne.n	800721a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007208:	f248 0101 	movw	r1, #32769	@ 0x8001
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fe69 	bl	8007ee4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2221      	movs	r2, #33	@ 0x21
 8007216:	631a      	str	r2, [r3, #48]	@ 0x30
 8007218:	e019      	b.n	800724e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800721a:	7afb      	ldrb	r3, [r7, #11]
 800721c:	2b22      	cmp	r3, #34	@ 0x22
 800721e:	d002      	beq.n	8007226 <I2C_ITSlaveCplt+0x56>
 8007220:	7afb      	ldrb	r3, [r7, #11]
 8007222:	2b2a      	cmp	r3, #42	@ 0x2a
 8007224:	d108      	bne.n	8007238 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007226:	f248 0102 	movw	r1, #32770	@ 0x8002
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fe5a 	bl	8007ee4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2222      	movs	r2, #34	@ 0x22
 8007234:	631a      	str	r2, [r3, #48]	@ 0x30
 8007236:	e00a      	b.n	800724e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007238:	7afb      	ldrb	r3, [r7, #11]
 800723a:	2b28      	cmp	r3, #40	@ 0x28
 800723c:	d107      	bne.n	800724e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800723e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fe4e 	bl	8007ee4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800725c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6859      	ldr	r1, [r3, #4]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	4b80      	ldr	r3, [pc, #512]	@ (800746c <I2C_ITSlaveCplt+0x29c>)
 800726a:	400b      	ands	r3, r1
 800726c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fb75 	bl	800795e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	0b9b      	lsrs	r3, r3, #14
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b00      	cmp	r3, #0
 800727e:	d07a      	beq.n	8007376 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800728e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 8112 	beq.w	80074be <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a73      	ldr	r2, [pc, #460]	@ (8007470 <I2C_ITSlaveCplt+0x2a0>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d059      	beq.n	800735a <I2C_ITSlaveCplt+0x18a>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a71      	ldr	r2, [pc, #452]	@ (8007474 <I2C_ITSlaveCplt+0x2a4>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d053      	beq.n	800735a <I2C_ITSlaveCplt+0x18a>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a6f      	ldr	r2, [pc, #444]	@ (8007478 <I2C_ITSlaveCplt+0x2a8>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d04d      	beq.n	800735a <I2C_ITSlaveCplt+0x18a>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a6d      	ldr	r2, [pc, #436]	@ (800747c <I2C_ITSlaveCplt+0x2ac>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d047      	beq.n	800735a <I2C_ITSlaveCplt+0x18a>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a6b      	ldr	r2, [pc, #428]	@ (8007480 <I2C_ITSlaveCplt+0x2b0>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d041      	beq.n	800735a <I2C_ITSlaveCplt+0x18a>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a69      	ldr	r2, [pc, #420]	@ (8007484 <I2C_ITSlaveCplt+0x2b4>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d03b      	beq.n	800735a <I2C_ITSlaveCplt+0x18a>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a67      	ldr	r2, [pc, #412]	@ (8007488 <I2C_ITSlaveCplt+0x2b8>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d035      	beq.n	800735a <I2C_ITSlaveCplt+0x18a>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a65      	ldr	r2, [pc, #404]	@ (800748c <I2C_ITSlaveCplt+0x2bc>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d02f      	beq.n	800735a <I2C_ITSlaveCplt+0x18a>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a63      	ldr	r2, [pc, #396]	@ (8007490 <I2C_ITSlaveCplt+0x2c0>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d029      	beq.n	800735a <I2C_ITSlaveCplt+0x18a>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a61      	ldr	r2, [pc, #388]	@ (8007494 <I2C_ITSlaveCplt+0x2c4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d023      	beq.n	800735a <I2C_ITSlaveCplt+0x18a>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a5f      	ldr	r2, [pc, #380]	@ (8007498 <I2C_ITSlaveCplt+0x2c8>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d01d      	beq.n	800735a <I2C_ITSlaveCplt+0x18a>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a5d      	ldr	r2, [pc, #372]	@ (800749c <I2C_ITSlaveCplt+0x2cc>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d017      	beq.n	800735a <I2C_ITSlaveCplt+0x18a>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a5b      	ldr	r2, [pc, #364]	@ (80074a0 <I2C_ITSlaveCplt+0x2d0>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d011      	beq.n	800735a <I2C_ITSlaveCplt+0x18a>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a59      	ldr	r2, [pc, #356]	@ (80074a4 <I2C_ITSlaveCplt+0x2d4>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d00b      	beq.n	800735a <I2C_ITSlaveCplt+0x18a>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a57      	ldr	r2, [pc, #348]	@ (80074a8 <I2C_ITSlaveCplt+0x2d8>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d005      	beq.n	800735a <I2C_ITSlaveCplt+0x18a>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a55      	ldr	r2, [pc, #340]	@ (80074ac <I2C_ITSlaveCplt+0x2dc>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d105      	bne.n	8007366 <I2C_ITSlaveCplt+0x196>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	b29b      	uxth	r3, r3
 8007364:	e004      	b.n	8007370 <I2C_ITSlaveCplt+0x1a0>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	b29b      	uxth	r3, r3
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8007374:	e0a3      	b.n	80074be <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	0bdb      	lsrs	r3, r3, #15
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b00      	cmp	r3, #0
 8007380:	f000 809d 	beq.w	80074be <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007392:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 8090 	beq.w	80074be <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a32      	ldr	r2, [pc, #200]	@ (8007470 <I2C_ITSlaveCplt+0x2a0>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d059      	beq.n	800745e <I2C_ITSlaveCplt+0x28e>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a30      	ldr	r2, [pc, #192]	@ (8007474 <I2C_ITSlaveCplt+0x2a4>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d053      	beq.n	800745e <I2C_ITSlaveCplt+0x28e>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a2e      	ldr	r2, [pc, #184]	@ (8007478 <I2C_ITSlaveCplt+0x2a8>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d04d      	beq.n	800745e <I2C_ITSlaveCplt+0x28e>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a2c      	ldr	r2, [pc, #176]	@ (800747c <I2C_ITSlaveCplt+0x2ac>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d047      	beq.n	800745e <I2C_ITSlaveCplt+0x28e>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a2a      	ldr	r2, [pc, #168]	@ (8007480 <I2C_ITSlaveCplt+0x2b0>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d041      	beq.n	800745e <I2C_ITSlaveCplt+0x28e>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a28      	ldr	r2, [pc, #160]	@ (8007484 <I2C_ITSlaveCplt+0x2b4>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d03b      	beq.n	800745e <I2C_ITSlaveCplt+0x28e>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a26      	ldr	r2, [pc, #152]	@ (8007488 <I2C_ITSlaveCplt+0x2b8>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d035      	beq.n	800745e <I2C_ITSlaveCplt+0x28e>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a24      	ldr	r2, [pc, #144]	@ (800748c <I2C_ITSlaveCplt+0x2bc>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d02f      	beq.n	800745e <I2C_ITSlaveCplt+0x28e>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a22      	ldr	r2, [pc, #136]	@ (8007490 <I2C_ITSlaveCplt+0x2c0>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d029      	beq.n	800745e <I2C_ITSlaveCplt+0x28e>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a20      	ldr	r2, [pc, #128]	@ (8007494 <I2C_ITSlaveCplt+0x2c4>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d023      	beq.n	800745e <I2C_ITSlaveCplt+0x28e>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a1e      	ldr	r2, [pc, #120]	@ (8007498 <I2C_ITSlaveCplt+0x2c8>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d01d      	beq.n	800745e <I2C_ITSlaveCplt+0x28e>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a1c      	ldr	r2, [pc, #112]	@ (800749c <I2C_ITSlaveCplt+0x2cc>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d017      	beq.n	800745e <I2C_ITSlaveCplt+0x28e>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a1a      	ldr	r2, [pc, #104]	@ (80074a0 <I2C_ITSlaveCplt+0x2d0>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d011      	beq.n	800745e <I2C_ITSlaveCplt+0x28e>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a18      	ldr	r2, [pc, #96]	@ (80074a4 <I2C_ITSlaveCplt+0x2d4>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d00b      	beq.n	800745e <I2C_ITSlaveCplt+0x28e>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a16      	ldr	r2, [pc, #88]	@ (80074a8 <I2C_ITSlaveCplt+0x2d8>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d005      	beq.n	800745e <I2C_ITSlaveCplt+0x28e>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a14      	ldr	r2, [pc, #80]	@ (80074ac <I2C_ITSlaveCplt+0x2dc>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d128      	bne.n	80074b0 <I2C_ITSlaveCplt+0x2e0>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	b29b      	uxth	r3, r3
 8007468:	e027      	b.n	80074ba <I2C_ITSlaveCplt+0x2ea>
 800746a:	bf00      	nop
 800746c:	fe00e800 	.word	0xfe00e800
 8007470:	40020010 	.word	0x40020010
 8007474:	40020028 	.word	0x40020028
 8007478:	40020040 	.word	0x40020040
 800747c:	40020058 	.word	0x40020058
 8007480:	40020070 	.word	0x40020070
 8007484:	40020088 	.word	0x40020088
 8007488:	400200a0 	.word	0x400200a0
 800748c:	400200b8 	.word	0x400200b8
 8007490:	40020410 	.word	0x40020410
 8007494:	40020428 	.word	0x40020428
 8007498:	40020440 	.word	0x40020440
 800749c:	40020458 	.word	0x40020458
 80074a0:	40020470 	.word	0x40020470
 80074a4:	40020488 	.word	0x40020488
 80074a8:	400204a0 	.word	0x400204a0
 80074ac:	400204b8 	.word	0x400204b8
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	089b      	lsrs	r3, r3, #2
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d020      	beq.n	800750c <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f023 0304 	bic.w	r3, r3, #4
 80074d0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074dc:	b2d2      	uxtb	r2, r2
 80074de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e4:	1c5a      	adds	r2, r3, #1
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00c      	beq.n	800750c <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074f6:	3b01      	subs	r3, #1
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007502:	b29b      	uxth	r3, r3
 8007504:	3b01      	subs	r3, #1
 8007506:	b29a      	uxth	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	d005      	beq.n	8007522 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800751a:	f043 0204 	orr.w	r2, r3, #4
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	091b      	lsrs	r3, r3, #4
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	d04a      	beq.n	80075c4 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	091b      	lsrs	r3, r3, #4
 8007532:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007536:	2b00      	cmp	r3, #0
 8007538:	d044      	beq.n	80075c4 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800753e:	b29b      	uxth	r3, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	d128      	bne.n	8007596 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b28      	cmp	r3, #40	@ 0x28
 800754e:	d108      	bne.n	8007562 <I2C_ITSlaveCplt+0x392>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007556:	d104      	bne.n	8007562 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007558:	6979      	ldr	r1, [r7, #20]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f892 	bl	8007684 <I2C_ITListenCplt>
 8007560:	e030      	b.n	80075c4 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b29      	cmp	r3, #41	@ 0x29
 800756c:	d10e      	bne.n	800758c <I2C_ITSlaveCplt+0x3bc>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007574:	d00a      	beq.n	800758c <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2210      	movs	r2, #16
 800757c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f9ed 	bl	800795e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7ff fdc4 	bl	8007112 <I2C_ITSlaveSeqCplt>
 800758a:	e01b      	b.n	80075c4 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2210      	movs	r2, #16
 8007592:	61da      	str	r2, [r3, #28]
 8007594:	e016      	b.n	80075c4 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2210      	movs	r2, #16
 800759c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075a2:	f043 0204 	orr.w	r2, r3, #4
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d003      	beq.n	80075b8 <I2C_ITSlaveCplt+0x3e8>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075b6:	d105      	bne.n	80075c4 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075bc:	4619      	mov	r1, r3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f8b6 	bl	8007730 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d010      	beq.n	80075fc <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f8a5 	bl	8007730 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b28      	cmp	r3, #40	@ 0x28
 80075f0:	d141      	bne.n	8007676 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80075f2:	6979      	ldr	r1, [r7, #20]
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f845 	bl	8007684 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80075fa:	e03c      	b.n	8007676 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007600:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007604:	d014      	beq.n	8007630 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7ff fd83 	bl	8007112 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a1c      	ldr	r2, [pc, #112]	@ (8007680 <I2C_ITSlaveCplt+0x4b0>)
 8007610:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2220      	movs	r2, #32
 8007616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7ff fbcc 	bl	8006dc6 <HAL_I2C_ListenCpltCallback>
}
 800762e:	e022      	b.n	8007676 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b22      	cmp	r3, #34	@ 0x22
 800763a:	d10e      	bne.n	800765a <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2220      	movs	r2, #32
 8007640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7ff fb9f 	bl	8006d96 <HAL_I2C_SlaveRxCpltCallback>
}
 8007658:	e00d      	b.n	8007676 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2220      	movs	r2, #32
 800765e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7ff fb86 	bl	8006d82 <HAL_I2C_SlaveTxCpltCallback>
}
 8007676:	bf00      	nop
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	ffff0000 	.word	0xffff0000

08007684 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a26      	ldr	r2, [pc, #152]	@ (800772c <I2C_ITListenCplt+0xa8>)
 8007692:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2220      	movs	r2, #32
 800769e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	089b      	lsrs	r3, r3, #2
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d022      	beq.n	8007702 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c6:	b2d2      	uxtb	r2, r2
 80076c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ce:	1c5a      	adds	r2, r3, #1
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d012      	beq.n	8007702 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076e0:	3b01      	subs	r3, #1
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	3b01      	subs	r3, #1
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076fa:	f043 0204 	orr.w	r2, r3, #4
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007702:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fbec 	bl	8007ee4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2210      	movs	r2, #16
 8007712:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7ff fb52 	bl	8006dc6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007722:	bf00      	nop
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	ffff0000 	.word	0xffff0000

08007730 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007740:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a6d      	ldr	r2, [pc, #436]	@ (8007904 <I2C_ITError+0x1d4>)
 800774e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	431a      	orrs	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007762:	7bfb      	ldrb	r3, [r7, #15]
 8007764:	2b28      	cmp	r3, #40	@ 0x28
 8007766:	d005      	beq.n	8007774 <I2C_ITError+0x44>
 8007768:	7bfb      	ldrb	r3, [r7, #15]
 800776a:	2b29      	cmp	r3, #41	@ 0x29
 800776c:	d002      	beq.n	8007774 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	2b2a      	cmp	r3, #42	@ 0x2a
 8007772:	d10b      	bne.n	800778c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007774:	2103      	movs	r1, #3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fbb4 	bl	8007ee4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2228      	movs	r2, #40	@ 0x28
 8007780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a60      	ldr	r2, [pc, #384]	@ (8007908 <I2C_ITError+0x1d8>)
 8007788:	635a      	str	r2, [r3, #52]	@ 0x34
 800778a:	e030      	b.n	80077ee <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800778c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fba7 	bl	8007ee4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f8e1 	bl	800795e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b60      	cmp	r3, #96	@ 0x60
 80077a6:	d01f      	beq.n	80077e8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2220      	movs	r2, #32
 80077ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	f003 0320 	and.w	r3, r3, #32
 80077ba:	2b20      	cmp	r3, #32
 80077bc:	d114      	bne.n	80077e8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	f003 0310 	and.w	r3, r3, #16
 80077c8:	2b10      	cmp	r3, #16
 80077ca:	d109      	bne.n	80077e0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2210      	movs	r2, #16
 80077d2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077d8:	f043 0204 	orr.w	r2, r3, #4
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2220      	movs	r2, #32
 80077e6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077f2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d039      	beq.n	8007870 <I2C_ITError+0x140>
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2b11      	cmp	r3, #17
 8007800:	d002      	beq.n	8007808 <I2C_ITError+0xd8>
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	2b21      	cmp	r3, #33	@ 0x21
 8007806:	d133      	bne.n	8007870 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007812:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007816:	d107      	bne.n	8007828 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007826:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800782c:	4618      	mov	r0, r3
 800782e:	f7fd fd13 	bl	8005258 <HAL_DMA_GetState>
 8007832:	4603      	mov	r3, r0
 8007834:	2b01      	cmp	r3, #1
 8007836:	d017      	beq.n	8007868 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800783c:	4a33      	ldr	r2, [pc, #204]	@ (800790c <I2C_ITError+0x1dc>)
 800783e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800784c:	4618      	mov	r0, r3
 800784e:	f7fc fb93 	bl	8003f78 <HAL_DMA_Abort_IT>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d04d      	beq.n	80078f4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800785c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007862:	4610      	mov	r0, r2
 8007864:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007866:	e045      	b.n	80078f4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f851 	bl	8007910 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800786e:	e041      	b.n	80078f4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007874:	2b00      	cmp	r3, #0
 8007876:	d039      	beq.n	80078ec <I2C_ITError+0x1bc>
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2b12      	cmp	r3, #18
 800787c:	d002      	beq.n	8007884 <I2C_ITError+0x154>
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	2b22      	cmp	r3, #34	@ 0x22
 8007882:	d133      	bne.n	80078ec <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800788e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007892:	d107      	bne.n	80078a4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80078a2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fd fcd5 	bl	8005258 <HAL_DMA_GetState>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d017      	beq.n	80078e4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b8:	4a14      	ldr	r2, [pc, #80]	@ (800790c <I2C_ITError+0x1dc>)
 80078ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7fc fb55 	bl	8003f78 <HAL_DMA_Abort_IT>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d011      	beq.n	80078f8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80078de:	4610      	mov	r0, r2
 80078e0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80078e2:	e009      	b.n	80078f8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f813 	bl	8007910 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80078ea:	e005      	b.n	80078f8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f80f 	bl	8007910 <I2C_TreatErrorCallback>
  }
}
 80078f2:	e002      	b.n	80078fa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80078f4:	bf00      	nop
 80078f6:	e000      	b.n	80078fa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80078f8:	bf00      	nop
}
 80078fa:	bf00      	nop
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	ffff0000 	.word	0xffff0000
 8007908:	08006e03 	.word	0x08006e03
 800790c:	080079a7 	.word	0x080079a7

08007910 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b60      	cmp	r3, #96	@ 0x60
 8007922:	d10e      	bne.n	8007942 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2220      	movs	r2, #32
 8007928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7ff fa57 	bl	8006dee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007940:	e009      	b.n	8007956 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7ff fa42 	bl	8006dda <HAL_I2C_ErrorCallback>
}
 8007956:	bf00      	nop
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	f003 0302 	and.w	r3, r3, #2
 8007970:	2b02      	cmp	r3, #2
 8007972:	d103      	bne.n	800797c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2200      	movs	r2, #0
 800797a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b01      	cmp	r3, #1
 8007988:	d007      	beq.n	800799a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	699a      	ldr	r2, [r3, #24]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f042 0201 	orr.w	r2, r2, #1
 8007998:	619a      	str	r2, [r3, #24]
  }
}
 800799a:	bf00      	nop
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b084      	sub	sp, #16
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c0:	2200      	movs	r2, #0
 80079c2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d003      	beq.n	80079d4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d0:	2200      	movs	r2, #0
 80079d2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f7ff ff9b 	bl	8007910 <I2C_TreatErrorCallback>
}
 80079da:	bf00      	nop
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b084      	sub	sp, #16
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	60f8      	str	r0, [r7, #12]
 80079ea:	60b9      	str	r1, [r7, #8]
 80079ec:	603b      	str	r3, [r7, #0]
 80079ee:	4613      	mov	r3, r2
 80079f0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079f2:	e03b      	b.n	8007a6c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f000 f961 	bl	8007cc0 <I2C_IsErrorOccurred>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e041      	b.n	8007a8c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0e:	d02d      	beq.n	8007a6c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a10:	f7fa fd1e 	bl	8002450 <HAL_GetTick>
 8007a14:	4602      	mov	r2, r0
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	683a      	ldr	r2, [r7, #0]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d302      	bcc.n	8007a26 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d122      	bne.n	8007a6c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	699a      	ldr	r2, [r3, #24]
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	4013      	ands	r3, r2
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	bf0c      	ite	eq
 8007a36:	2301      	moveq	r3, #1
 8007a38:	2300      	movne	r3, #0
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	79fb      	ldrb	r3, [r7, #7]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d113      	bne.n	8007a6c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a48:	f043 0220 	orr.w	r2, r3, #32
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2220      	movs	r2, #32
 8007a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e00f      	b.n	8007a8c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	699a      	ldr	r2, [r3, #24]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	4013      	ands	r3, r2
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	bf0c      	ite	eq
 8007a7c:	2301      	moveq	r3, #1
 8007a7e:	2300      	movne	r3, #0
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	461a      	mov	r2, r3
 8007a84:	79fb      	ldrb	r3, [r7, #7]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d0b4      	beq.n	80079f4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007aa0:	e033      	b.n	8007b0a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	68b9      	ldr	r1, [r7, #8]
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f000 f90a 	bl	8007cc0 <I2C_IsErrorOccurred>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d001      	beq.n	8007ab6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e031      	b.n	8007b1a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abc:	d025      	beq.n	8007b0a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007abe:	f7fa fcc7 	bl	8002450 <HAL_GetTick>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d302      	bcc.n	8007ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d11a      	bne.n	8007b0a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	f003 0302 	and.w	r3, r3, #2
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d013      	beq.n	8007b0a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae6:	f043 0220 	orr.w	r2, r3, #32
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2220      	movs	r2, #32
 8007af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e007      	b.n	8007b1a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d1c4      	bne.n	8007aa2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b2e:	e02f      	b.n	8007b90 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	68b9      	ldr	r1, [r7, #8]
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 f8c3 	bl	8007cc0 <I2C_IsErrorOccurred>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e02d      	b.n	8007ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b44:	f7fa fc84 	bl	8002450 <HAL_GetTick>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	1ad3      	subs	r3, r2, r3
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d302      	bcc.n	8007b5a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d11a      	bne.n	8007b90 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	f003 0320 	and.w	r3, r3, #32
 8007b64:	2b20      	cmp	r3, #32
 8007b66:	d013      	beq.n	8007b90 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b6c:	f043 0220 	orr.w	r2, r3, #32
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2220      	movs	r2, #32
 8007b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e007      	b.n	8007ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	f003 0320 	and.w	r3, r3, #32
 8007b9a:	2b20      	cmp	r3, #32
 8007b9c:	d1c8      	bne.n	8007b30 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007bb8:	e071      	b.n	8007c9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	68b9      	ldr	r1, [r7, #8]
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f000 f87e 	bl	8007cc0 <I2C_IsErrorOccurred>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d001      	beq.n	8007bce <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	f003 0320 	and.w	r3, r3, #32
 8007bd8:	2b20      	cmp	r3, #32
 8007bda:	d13b      	bne.n	8007c54 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d138      	bne.n	8007c54 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	f003 0304 	and.w	r3, r3, #4
 8007bec:	2b04      	cmp	r3, #4
 8007bee:	d105      	bne.n	8007bfc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d001      	beq.n	8007bfc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	f003 0310 	and.w	r3, r3, #16
 8007c06:	2b10      	cmp	r3, #16
 8007c08:	d121      	bne.n	8007c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2210      	movs	r2, #16
 8007c10:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2204      	movs	r2, #4
 8007c16:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6859      	ldr	r1, [r3, #4]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	4b24      	ldr	r3, [pc, #144]	@ (8007cbc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8007c2c:	400b      	ands	r3, r1
 8007c2e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2220      	movs	r2, #32
 8007c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	75fb      	strb	r3, [r7, #23]
 8007c4c:	e002      	b.n	8007c54 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8007c54:	f7fa fbfc 	bl	8002450 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d302      	bcc.n	8007c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d119      	bne.n	8007c9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8007c6a:	7dfb      	ldrb	r3, [r7, #23]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d116      	bne.n	8007c9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	f003 0304 	and.w	r3, r3, #4
 8007c7a:	2b04      	cmp	r3, #4
 8007c7c:	d00f      	beq.n	8007c9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c82:	f043 0220 	orr.w	r2, r3, #32
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	f003 0304 	and.w	r3, r3, #4
 8007ca8:	2b04      	cmp	r3, #4
 8007caa:	d002      	beq.n	8007cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8007cac:	7dfb      	ldrb	r3, [r7, #23]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d083      	beq.n	8007bba <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3718      	adds	r7, #24
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	fe00e800 	.word	0xfe00e800

08007cc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b08a      	sub	sp, #40	@ 0x28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	699b      	ldr	r3, [r3, #24]
 8007cd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	f003 0310 	and.w	r3, r3, #16
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d068      	beq.n	8007dbe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2210      	movs	r2, #16
 8007cf2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007cf4:	e049      	b.n	8007d8a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfc:	d045      	beq.n	8007d8a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007cfe:	f7fa fba7 	bl	8002450 <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d302      	bcc.n	8007d14 <I2C_IsErrorOccurred+0x54>
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d13a      	bne.n	8007d8a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d36:	d121      	bne.n	8007d7c <I2C_IsErrorOccurred+0xbc>
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d3e:	d01d      	beq.n	8007d7c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007d40:	7cfb      	ldrb	r3, [r7, #19]
 8007d42:	2b20      	cmp	r3, #32
 8007d44:	d01a      	beq.n	8007d7c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007d56:	f7fa fb7b 	bl	8002450 <HAL_GetTick>
 8007d5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d5c:	e00e      	b.n	8007d7c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007d5e:	f7fa fb77 	bl	8002450 <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	2b19      	cmp	r3, #25
 8007d6a:	d907      	bls.n	8007d7c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	f043 0320 	orr.w	r3, r3, #32
 8007d72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007d7a:	e006      	b.n	8007d8a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	f003 0320 	and.w	r3, r3, #32
 8007d86:	2b20      	cmp	r3, #32
 8007d88:	d1e9      	bne.n	8007d5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	f003 0320 	and.w	r3, r3, #32
 8007d94:	2b20      	cmp	r3, #32
 8007d96:	d003      	beq.n	8007da0 <I2C_IsErrorOccurred+0xe0>
 8007d98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d0aa      	beq.n	8007cf6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007da0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d103      	bne.n	8007db0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2220      	movs	r2, #32
 8007dae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	f043 0304 	orr.w	r3, r3, #4
 8007db6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00b      	beq.n	8007de8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	f043 0301 	orr.w	r3, r3, #1
 8007dd6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007de0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00b      	beq.n	8007e0a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007df2:	6a3b      	ldr	r3, [r7, #32]
 8007df4:	f043 0308 	orr.w	r3, r3, #8
 8007df8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007e02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00b      	beq.n	8007e2c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	f043 0302 	orr.w	r3, r3, #2
 8007e1a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d01c      	beq.n	8007e6e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f7ff fd92 	bl	800795e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	6859      	ldr	r1, [r3, #4]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	4b0d      	ldr	r3, [pc, #52]	@ (8007e7c <I2C_IsErrorOccurred+0x1bc>)
 8007e46:	400b      	ands	r3, r1
 8007e48:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e4e:	6a3b      	ldr	r3, [r7, #32]
 8007e50:	431a      	orrs	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3728      	adds	r7, #40	@ 0x28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	fe00e800 	.word	0xfe00e800

08007e80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b087      	sub	sp, #28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	607b      	str	r3, [r7, #4]
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	817b      	strh	r3, [r7, #10]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e92:	897b      	ldrh	r3, [r7, #10]
 8007e94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e98:	7a7b      	ldrb	r3, [r7, #9]
 8007e9a:	041b      	lsls	r3, r3, #16
 8007e9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ea0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007eae:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	6a3b      	ldr	r3, [r7, #32]
 8007eb8:	0d5b      	lsrs	r3, r3, #21
 8007eba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007ebe:	4b08      	ldr	r3, [pc, #32]	@ (8007ee0 <I2C_TransferConfig+0x60>)
 8007ec0:	430b      	orrs	r3, r1
 8007ec2:	43db      	mvns	r3, r3
 8007ec4:	ea02 0103 	and.w	r1, r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007ed2:	bf00      	nop
 8007ed4:	371c      	adds	r7, #28
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	03ff63ff 	.word	0x03ff63ff

08007ee4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007ef4:	887b      	ldrh	r3, [r7, #2]
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00f      	beq.n	8007f1e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007f04:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007f12:	2b28      	cmp	r3, #40	@ 0x28
 8007f14:	d003      	beq.n	8007f1e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007f1c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007f1e:	887b      	ldrh	r3, [r7, #2]
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00f      	beq.n	8007f48 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007f2e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007f3c:	2b28      	cmp	r3, #40	@ 0x28
 8007f3e:	d003      	beq.n	8007f48 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007f46:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007f48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	da03      	bge.n	8007f58 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007f56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007f58:	887b      	ldrh	r3, [r7, #2]
 8007f5a:	2b10      	cmp	r3, #16
 8007f5c:	d103      	bne.n	8007f66 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007f64:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007f66:	887b      	ldrh	r3, [r7, #2]
 8007f68:	2b20      	cmp	r3, #32
 8007f6a:	d103      	bne.n	8007f74 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f043 0320 	orr.w	r3, r3, #32
 8007f72:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007f74:	887b      	ldrh	r3, [r7, #2]
 8007f76:	2b40      	cmp	r3, #64	@ 0x40
 8007f78:	d103      	bne.n	8007f82 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f80:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	6819      	ldr	r1, [r3, #0]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	43da      	mvns	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	400a      	ands	r2, r1
 8007f92:	601a      	str	r2, [r3, #0]
}
 8007f94:	bf00      	nop
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b20      	cmp	r3, #32
 8007fb4:	d138      	bne.n	8008028 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d101      	bne.n	8007fc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	e032      	b.n	800802a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2224      	movs	r2, #36	@ 0x24
 8007fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f022 0201 	bic.w	r2, r2, #1
 8007fe2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007ff2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6819      	ldr	r1, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	430a      	orrs	r2, r1
 8008002:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0201 	orr.w	r2, r2, #1
 8008012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2220      	movs	r2, #32
 8008018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008024:	2300      	movs	r3, #0
 8008026:	e000      	b.n	800802a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008028:	2302      	movs	r3, #2
  }
}
 800802a:	4618      	mov	r0, r3
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008036:	b480      	push	{r7}
 8008038:	b085      	sub	sp, #20
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008046:	b2db      	uxtb	r3, r3
 8008048:	2b20      	cmp	r3, #32
 800804a:	d139      	bne.n	80080c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008052:	2b01      	cmp	r3, #1
 8008054:	d101      	bne.n	800805a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008056:	2302      	movs	r3, #2
 8008058:	e033      	b.n	80080c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2224      	movs	r2, #36	@ 0x24
 8008066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f022 0201 	bic.w	r2, r2, #1
 8008078:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008088:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	021b      	lsls	r3, r3, #8
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	4313      	orrs	r3, r2
 8008092:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f042 0201 	orr.w	r2, r2, #1
 80080aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2220      	movs	r2, #32
 80080b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	e000      	b.n	80080c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80080c0:	2302      	movs	r3, #2
  }
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
	...

080080d0 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e070      	b.n	80081c4 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d106      	bne.n	80080fc <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7f9 fc68 	bl	80019cc <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2202      	movs	r2, #2
 8008100:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f042 0201 	orr.w	r2, r2, #1
 8008112:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f022 0201 	bic.w	r2, r2, #1
 8008122:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008132:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008142:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008152:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008162:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a19      	ldr	r2, [pc, #100]	@ (80081cc <HAL_JPEG_Init+0xfc>)
 8008168:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a18      	ldr	r2, [pc, #96]	@ (80081d0 <HAL_JPEG_Init+0x100>)
 800816e:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fea1 	bl	8008ec4 <JPEG_Set_HuffEnc_Mem>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d004      	beq.n	8008192 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e018      	b.n	80081c4 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80081a0:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2201      	movs	r2, #1
 80081b2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	080162c4 	.word	0x080162c4
 80081d0:	08016304 	.word	0x08016304

080081d4 <HAL_JPEG_ConfigEncoding>:
  * @param  pConf pointer to a JPEG_ConfTypeDef structure that contains
  *         the encoding configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_ConfigEncoding(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pConf)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b088      	sub	sp, #32
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  uint32_t vfactor;
  uint32_t hMCU;
  uint32_t vMCU;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pConf == NULL))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d002      	beq.n	80081ea <HAL_JPEG_ConfigEncoding+0x16>
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d101      	bne.n	80081ee <HAL_JPEG_ConfigEncoding+0x1a>
  {
    return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e191      	b.n	8008512 <HAL_JPEG_ConfigEncoding+0x33e>
    assert_param(IS_JPEG_COLORSPACE(pConf->ColorSpace));
    assert_param(IS_JPEG_CHROMASUBSAMPLING(pConf->ChromaSubsampling));
    assert_param(IS_JPEG_IMAGE_QUALITY(pConf->ImageQuality));

    /* Process Locked */
    __HAL_LOCK(hjpeg);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d101      	bne.n	80081fc <HAL_JPEG_ConfigEncoding+0x28>
 80081f8:	2302      	movs	r3, #2
 80081fa:	e18a      	b.n	8008512 <HAL_JPEG_ConfigEncoding+0x33e>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    if (hjpeg->State == HAL_JPEG_STATE_READY)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b01      	cmp	r3, #1
 800820e:	f040 817b 	bne.w	8008508 <HAL_JPEG_ConfigEncoding+0x334>
    {
      hjpeg->State = HAL_JPEG_STATE_BUSY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2202      	movs	r2, #2
 8008216:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      hjpeg->Conf.ColorSpace          =  pConf->ColorSpace;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	605a      	str	r2, [r3, #4]
      hjpeg->Conf.ChromaSubsampling   =  pConf->ChromaSubsampling;
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	609a      	str	r2, [r3, #8]
      hjpeg->Conf.ImageHeight         =  pConf->ImageHeight;
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	689a      	ldr	r2, [r3, #8]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	60da      	str	r2, [r3, #12]
      hjpeg->Conf.ImageWidth          =  pConf->ImageWidth;
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	611a      	str	r2, [r3, #16]
      hjpeg->Conf.ImageQuality        =  pConf->ImageQuality;
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	691a      	ldr	r2, [r3, #16]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	615a      	str	r2, [r3, #20]

      /* Reset the Color Space : by default only one quantization table is used*/
      hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_COLORSPACE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8008250:	605a      	str	r2, [r3, #4]

      /* Set Number of color components*/
      if (hjpeg->Conf.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d110      	bne.n	800827c <HAL_JPEG_ConfigEncoding+0xa8>
      {
        /*Gray Scale is only one component 8x8 blocks i.e 4:4:4*/
        hjpeg->Conf.ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	609a      	str	r2, [r3, #8]

        JPEG_SetColorGrayScale(hjpeg);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f001 f99b 	bl	800959c <JPEG_SetColorGrayScale>
        /* Set quantization table 0*/
        error = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	3350      	adds	r3, #80	@ 0x50
 8008270:	461a      	mov	r2, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f001 f8a8 	bl	80093c8 <JPEG_Set_Quantization_Mem>
 8008278:	61f8      	str	r0, [r7, #28]
 800827a:	e0c5      	b.n	8008408 <HAL_JPEG_ConfigEncoding+0x234>
      }
      else if (hjpeg->Conf.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	2b10      	cmp	r3, #16
 8008282:	d166      	bne.n	8008352 <HAL_JPEG_ConfigEncoding+0x17e>
      {
        /*
           Set the Color Space for YCbCr : 2 quantization tables are used
           one for Luminance(Y) and one for both Chrominances (Cb & Cr)
          */
        hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE_0;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f042 0210 	orr.w	r2, r2, #16
 8008292:	605a      	str	r2, [r3, #4]

        JPEG_SetColorYCBCR(hjpeg);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f001 f909 	bl	80094ac <JPEG_SetColorYCBCR>

        /* Set quantization table 0*/
        error  = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	3350      	adds	r3, #80	@ 0x50
 80082a4:	461a      	mov	r2, r3
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f001 f88e 	bl	80093c8 <JPEG_Set_Quantization_Mem>
 80082ac:	61f8      	str	r0, [r7, #28]
        /*By default quantization table 0 for component 0 and quantization table 1 for both components 1 and 2*/
        error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable1, (hjpeg->Instance->QMEM1));
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3390      	adds	r3, #144	@ 0x90
 80082b8:	461a      	mov	r2, r3
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f001 f884 	bl	80093c8 <JPEG_Set_Quantization_Mem>
 80082c0:	4602      	mov	r2, r0
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	61fb      	str	r3, [r7, #28]

        if ((hjpeg->Context & JPEG_CONTEXT_CUSTOM_TABLES) != 0UL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f000 8099 	beq.w	8008408 <HAL_JPEG_ConfigEncoding+0x234>
        {
          /*Use user customized quantization tables , 1 table per component*/
          /* use 3 quantization tables , one for each component*/
          hjpeg->Instance->CONFR1 &= (~JPEG_CONFR1_COLORSPACE);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80082e4:	605a      	str	r2, [r3, #4]
          hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE_1;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f042 0220 	orr.w	r2, r2, #32
 80082f4:	605a      	str	r2, [r3, #4]

          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable2, (hjpeg->Instance->QMEM2));
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	33d0      	adds	r3, #208	@ 0xd0
 8008300:	461a      	mov	r2, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f001 f860 	bl	80093c8 <JPEG_Set_Quantization_Mem>
 8008308:	4602      	mov	r2, r0
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	4313      	orrs	r3, r2
 800830e:	61fb      	str	r3, [r7, #28]

          /*Use Quantization 1 table for component 1*/
          hjpeg->Instance->CONFR5 &= (~JPEG_CONFR5_QT);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	695a      	ldr	r2, [r3, #20]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f022 020c 	bic.w	r2, r2, #12
 800831e:	615a      	str	r2, [r3, #20]
          hjpeg->Instance->CONFR5 |=  JPEG_CONFR5_QT_0;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	695a      	ldr	r2, [r3, #20]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f042 0204 	orr.w	r2, r2, #4
 800832e:	615a      	str	r2, [r3, #20]

          /*Use Quantization 2 table for component 2*/
          hjpeg->Instance->CONFR6 &= (~JPEG_CONFR6_QT);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	699a      	ldr	r2, [r3, #24]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f022 020c 	bic.w	r2, r2, #12
 800833e:	619a      	str	r2, [r3, #24]
          hjpeg->Instance->CONFR6 |=  JPEG_CONFR6_QT_1;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	699a      	ldr	r2, [r3, #24]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f042 0208 	orr.w	r2, r2, #8
 800834e:	619a      	str	r2, [r3, #24]
 8008350:	e05a      	b.n	8008408 <HAL_JPEG_ConfigEncoding+0x234>
        }
      }
      else /* ColorSpace == JPEG_CMYK_COLORSPACE */
      {
        JPEG_SetColorCMYK(hjpeg);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f001 f940 	bl	80095d8 <JPEG_SetColorCMYK>

        /* Set quantization table 0*/
        error  = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	3350      	adds	r3, #80	@ 0x50
 8008362:	461a      	mov	r2, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f001 f82f 	bl	80093c8 <JPEG_Set_Quantization_Mem>
 800836a:	61f8      	str	r0, [r7, #28]
        /*By default quantization table 0 for All components*/

        if ((hjpeg->Context & JPEG_CONTEXT_CUSTOM_TABLES) != 0UL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008370:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d047      	beq.n	8008408 <HAL_JPEG_ConfigEncoding+0x234>
        {
          /*Use user customized quantization tables , 1 table per component*/
          /* use 4 quantization tables , one for each component*/
          hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	685a      	ldr	r2, [r3, #4]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8008386:	605a      	str	r2, [r3, #4]

          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable1, (hjpeg->Instance->QMEM1));
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3390      	adds	r3, #144	@ 0x90
 8008392:	461a      	mov	r2, r3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f001 f817 	bl	80093c8 <JPEG_Set_Quantization_Mem>
 800839a:	4602      	mov	r2, r0
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	4313      	orrs	r3, r2
 80083a0:	61fb      	str	r3, [r7, #28]
          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable2, (hjpeg->Instance->QMEM2));
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	33d0      	adds	r3, #208	@ 0xd0
 80083ac:	461a      	mov	r2, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f001 f80a 	bl	80093c8 <JPEG_Set_Quantization_Mem>
 80083b4:	4602      	mov	r2, r0
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	61fb      	str	r3, [r7, #28]
          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable3, (hjpeg->Instance->QMEM3));
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80083c8:	461a      	mov	r2, r3
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fffc 	bl	80093c8 <JPEG_Set_Quantization_Mem>
 80083d0:	4602      	mov	r2, r0
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	61fb      	str	r3, [r7, #28]

          /*Use Quantization 1 table for component 1*/
          hjpeg->Instance->CONFR5 |=  JPEG_CONFR5_QT_0;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	695a      	ldr	r2, [r3, #20]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f042 0204 	orr.w	r2, r2, #4
 80083e6:	615a      	str	r2, [r3, #20]

          /*Use Quantization 2 table for component 2*/
          hjpeg->Instance->CONFR6 |=  JPEG_CONFR6_QT_1;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	699a      	ldr	r2, [r3, #24]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f042 0208 	orr.w	r2, r2, #8
 80083f6:	619a      	str	r2, [r3, #24]

          /*Use Quantization 3 table for component 3*/
          hjpeg->Instance->CONFR7 |=  JPEG_CONFR7_QT;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	69da      	ldr	r2, [r3, #28]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f042 020c 	orr.w	r2, r2, #12
 8008406:	61da      	str	r2, [r3, #28]
        }
      }

      if (error != 0UL)
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00c      	beq.n	8008428 <HAL_JPEG_ConfigEncoding+0x254>
      {
        hjpeg->ErrorCode = HAL_JPEG_ERROR_QUANT_TABLE;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2202      	movs	r2, #2
 8008412:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Process Unlocked */
        __HAL_UNLOCK(hjpeg);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Set the JPEG State to ready */
        hjpeg->State = HAL_JPEG_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

        return  HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e074      	b.n	8008512 <HAL_JPEG_ConfigEncoding+0x33e>
      }
      /* Set the image size*/
      /* set the number of lines*/
      MODIFY_REG(hjpeg->Instance->CONFR1, JPEG_CONFR1_YSIZE, ((hjpeg->Conf.ImageHeight & 0x0000FFFFUL) << 16));
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	b299      	uxth	r1, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	041a      	lsls	r2, r3, #16
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	430a      	orrs	r2, r1
 800843c:	605a      	str	r2, [r3, #4]
      /* set the number of pixels per line*/
      MODIFY_REG(hjpeg->Instance->CONFR3, JPEG_CONFR3_XSIZE, ((hjpeg->Conf.ImageWidth & 0x0000FFFFUL) << 16));
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	b299      	uxth	r1, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	041a      	lsls	r2, r3, #16
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	430a      	orrs	r2, r1
 8008452:	60da      	str	r2, [r3, #12]


      if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING) /* 4:2:0*/
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d104      	bne.n	8008466 <HAL_JPEG_ConfigEncoding+0x292>
      {
        hfactor = 16;
 800845c:	2310      	movs	r3, #16
 800845e:	61bb      	str	r3, [r7, #24]
        vfactor = 16;
 8008460:	2310      	movs	r3, #16
 8008462:	617b      	str	r3, [r7, #20]
 8008464:	e00c      	b.n	8008480 <HAL_JPEG_ConfigEncoding+0x2ac>
      }
      else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING) /* 4:2:2*/
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	2b02      	cmp	r3, #2
 800846c:	d104      	bne.n	8008478 <HAL_JPEG_ConfigEncoding+0x2a4>
      {
        hfactor = 16;
 800846e:	2310      	movs	r3, #16
 8008470:	61bb      	str	r3, [r7, #24]
        vfactor = 8;
 8008472:	2308      	movs	r3, #8
 8008474:	617b      	str	r3, [r7, #20]
 8008476:	e003      	b.n	8008480 <HAL_JPEG_ConfigEncoding+0x2ac>
      }
      else /* Default is 8x8 MCU,  4:4:4*/
      {
        hfactor = 8;
 8008478:	2308      	movs	r3, #8
 800847a:	61bb      	str	r3, [r7, #24]
        vfactor = 8;
 800847c:	2308      	movs	r3, #8
 800847e:	617b      	str	r3, [r7, #20]
      }

      hMCU = (hjpeg->Conf.ImageWidth / hfactor);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	691a      	ldr	r2, [r3, #16]
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	fbb2 f3f3 	udiv	r3, r2, r3
 800848a:	613b      	str	r3, [r7, #16]
      if ((hjpeg->Conf.ImageWidth % hfactor) != 0UL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	69ba      	ldr	r2, [r7, #24]
 8008492:	fbb3 f2f2 	udiv	r2, r3, r2
 8008496:	69b9      	ldr	r1, [r7, #24]
 8008498:	fb01 f202 	mul.w	r2, r1, r2
 800849c:	1a9b      	subs	r3, r3, r2
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <HAL_JPEG_ConfigEncoding+0x2d4>
      {
        hMCU++; /*+1 for horizontal incomplete MCU */
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	3301      	adds	r3, #1
 80084a6:	613b      	str	r3, [r7, #16]
      }

      vMCU = (hjpeg->Conf.ImageHeight / vfactor);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68da      	ldr	r2, [r3, #12]
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b2:	60fb      	str	r3, [r7, #12]
      if ((hjpeg->Conf.ImageHeight % vfactor) != 0UL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80084be:	6979      	ldr	r1, [r7, #20]
 80084c0:	fb01 f202 	mul.w	r2, r1, r2
 80084c4:	1a9b      	subs	r3, r3, r2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d002      	beq.n	80084d0 <HAL_JPEG_ConfigEncoding+0x2fc>
      {
        vMCU++; /*+1 for vertical incomplete MCU */
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3301      	adds	r3, #1
 80084ce:	60fb      	str	r3, [r7, #12]
      }

      numberMCU = (hMCU * vMCU) - 1UL; /* Bit Field JPEG_CONFR2_NMCU shall be set to NB_MCU - 1*/
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	fb02 f303 	mul.w	r3, r2, r3
 80084d8:	3b01      	subs	r3, #1
 80084da:	60bb      	str	r3, [r7, #8]
      /* Set the number of MCU*/
      hjpeg->Instance->CONFR2 = (numberMCU & JPEG_CONFR2_NMCU);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80084e6:	609a      	str	r2, [r3, #8]

      hjpeg->Context |= JPEG_CONTEXT_CONF_ENCODING;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Set the JPEG State to ready */
      hjpeg->State = HAL_JPEG_STATE_READY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Return function status */
      return HAL_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	e004      	b.n	8008512 <HAL_JPEG_ConfigEncoding+0x33e>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Return function status */
      return HAL_BUSY;
 8008510:	2302      	movs	r3, #2
    }
  }
}
 8008512:	4618      	mov	r0, r3
 8008514:	3720      	adds	r7, #32
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b086      	sub	sp, #24
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d002      	beq.n	8008530 <HAL_JPEG_GetInfo+0x16>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	e083      	b.n	800863c <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	f003 0303 	and.w	r3, r3, #3
 800853e:	2b02      	cmp	r3, #2
 8008540:	d103      	bne.n	800854a <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	2210      	movs	r2, #16
 8008546:	601a      	str	r2, [r3, #0]
 8008548:	e017      	b.n	800857a <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	f003 0303 	and.w	r3, r3, #3
 8008554:	2b00      	cmp	r3, #0
 8008556:	d103      	bne.n	8008560 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	2200      	movs	r2, #0
 800855c:	601a      	str	r2, [r3, #0]
 800855e:	e00c      	b.n	800857a <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	f003 0303 	and.w	r3, r3, #3
 800856a:	2b03      	cmp	r3, #3
 800856c:	d103      	bne.n	8008576 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	2230      	movs	r2, #48	@ 0x30
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	e001      	b.n	800857a <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e060      	b.n	800863c <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	0c1b      	lsrs	r3, r3, #16
 8008582:	b29a      	uxth	r2, r3
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	0c1b      	lsrs	r3, r3, #16
 8008590:	b29a      	uxth	r2, r3
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2b10      	cmp	r3, #16
 800859c:	d003      	beq.n	80085a6 <HAL_JPEG_GetInfo+0x8c>
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b30      	cmp	r3, #48	@ 0x30
 80085a4:	d140      	bne.n	8008628 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	091b      	lsrs	r3, r3, #4
 80085ae:	f003 030f 	and.w	r3, r3, #15
 80085b2:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	091b      	lsrs	r3, r3, #4
 80085bc:	f003 030f 	and.w	r3, r3, #15
 80085c0:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	091b      	lsrs	r3, r3, #4
 80085ca:	f003 030f 	and.w	r3, r3, #15
 80085ce:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d109      	bne.n	80085ea <HAL_JPEG_GetInfo+0xd0>
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d106      	bne.n	80085ea <HAL_JPEG_GetInfo+0xd0>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d103      	bne.n	80085ea <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	2202      	movs	r2, #2
 80085e6:	605a      	str	r2, [r3, #4]
 80085e8:	e01d      	b.n	8008626 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d109      	bne.n	8008604 <HAL_JPEG_GetInfo+0xea>
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d106      	bne.n	8008604 <HAL_JPEG_GetInfo+0xea>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d103      	bne.n	8008604 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	2200      	movs	r2, #0
 8008600:	605a      	str	r2, [r3, #4]
 8008602:	e010      	b.n	8008626 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	2b03      	cmp	r3, #3
 8008608:	d109      	bne.n	800861e <HAL_JPEG_GetInfo+0x104>
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d106      	bne.n	800861e <HAL_JPEG_GetInfo+0x104>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d103      	bne.n	800861e <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	2201      	movs	r2, #1
 800861a:	605a      	str	r2, [r3, #4]
 800861c:	e003      	b.n	8008626 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	2200      	movs	r2, #0
 8008622:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008624:	e003      	b.n	800862e <HAL_JPEG_GetInfo+0x114>
 8008626:	e002      	b.n	800862e <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	2200      	movs	r2, #0
 800862c:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f001 feac 	bl	800a38c <JPEG_GetQuality>
 8008634:	4602      	mov	r2, r0
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3718      	adds	r7, #24
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <HAL_JPEG_Encode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Encode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataInMCU, uint32_t InDataLength,
                                       uint8_t *pDataOut, uint32_t OutDataLength)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
 8008650:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataInMCU == NULL) || (pDataOut == NULL))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d005      	beq.n	8008664 <HAL_JPEG_Encode_DMA+0x20>
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d002      	beq.n	8008664 <HAL_JPEG_Encode_DMA+0x20>
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d101      	bne.n	8008668 <HAL_JPEG_Encode_DMA+0x24>
  {
    return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e059      	b.n	800871c <HAL_JPEG_Encode_DMA+0xd8>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800866e:	2b01      	cmp	r3, #1
 8008670:	d101      	bne.n	8008676 <HAL_JPEG_Encode_DMA+0x32>
 8008672:	2302      	movs	r3, #2
 8008674:	e052      	b.n	800871c <HAL_JPEG_Encode_DMA+0xd8>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2201      	movs	r2, #1
 800867a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State != HAL_JPEG_STATE_READY)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b01      	cmp	r3, #1
 8008688:	d005      	beq.n	8008696 <HAL_JPEG_Encode_DMA+0x52>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 8008692:	2302      	movs	r3, #2
 8008694:	e042      	b.n	800871c <HAL_JPEG_Encode_DMA+0xd8>
  }
  else
  {
    if ((hjpeg->Context & JPEG_CONTEXT_CONF_ENCODING) == JPEG_CONTEXT_CONF_ENCODING)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800869a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800869e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086a2:	d134      	bne.n	800870e <HAL_JPEG_Encode_DMA+0xca>
    {
      /*Change JPEG state*/
      hjpeg->State = HAL_JPEG_STATE_BUSY_ENCODING;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2203      	movs	r2, #3
 80086a8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /*Set the Context to Encode with DMA*/
      hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086b0:	f023 020f 	bic.w	r2, r3, #15
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	655a      	str	r2, [r3, #84]	@ 0x54
      hjpeg->Context |= (JPEG_CONTEXT_ENCODE | JPEG_CONTEXT_DMA);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086bc:	f043 020d 	orr.w	r2, r3, #13
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /*Store In/out buffers pointers and size*/
      hjpeg->pJpegInBuffPtr = pDataInMCU;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	619a      	str	r2, [r3, #24]
      hjpeg->pJpegOutBuffPtr = pDataOut;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	61da      	str	r2, [r3, #28]
      hjpeg->InDataLength = InDataLength;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	629a      	str	r2, [r3, #40]	@ 0x28
      hjpeg->OutDataLength = OutDataLength;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	69ba      	ldr	r2, [r7, #24]
 80086da:	62da      	str	r2, [r3, #44]	@ 0x2c

      /*Reset In/out data counter */
      hjpeg->JpegInCount = 0;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2200      	movs	r2, #0
 80086e0:	621a      	str	r2, [r3, #32]
      hjpeg->JpegOutCount = 0;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Init decoding process*/
      JPEG_Init_Process(hjpeg);
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 ffdf 	bl	80096ac <JPEG_Init_Process>

      /* JPEG encoding process using DMA */
      if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f001 fb00 	bl	8009cf4 <JPEG_DMA_StartProcess>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00f      	beq.n	800871a <HAL_JPEG_Encode_DMA+0xd6>
      {
        /* Update State */
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2206      	movs	r2, #6
 80086fe:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        /* Process Unlocked */
        __HAL_UNLOCK(hjpeg);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e006      	b.n	800871c <HAL_JPEG_Encode_DMA+0xd8>

    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	e000      	b.n	800871c <HAL_JPEG_Encode_DMA+0xd8>
    }
  }
  /* Return function status */
  return HAL_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800872e:	2300      	movs	r3, #0
 8008730:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008736:	f003 030c 	and.w	r3, r3, #12
 800873a:	2b0c      	cmp	r3, #12
 800873c:	d116      	bne.n	800876c <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	f003 0301 	and.w	r3, r3, #1
 8008744:	2b00      	cmp	r3, #0
 8008746:	d005      	beq.n	8008754 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800874c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	f003 0302 	and.w	r3, r3, #2
 800875a:	2b00      	cmp	r3, #0
 800875c:	d033      	beq.n	80087c6 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008762:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	655a      	str	r2, [r3, #84]	@ 0x54
 800876a:	e02c      	b.n	80087c6 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008770:	f003 030c 	and.w	r3, r3, #12
 8008774:	2b08      	cmp	r3, #8
 8008776:	d126      	bne.n	80087c6 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	2b00      	cmp	r3, #0
 8008780:	d009      	beq.n	8008796 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008786:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f043 0306 	orr.w	r3, r3, #6
 8008794:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	f003 0302 	and.w	r3, r3, #2
 800879c:	2b00      	cmp	r3, #0
 800879e:	d009      	beq.n	80087b4 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087a4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 80087b2:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	43da      	mvns	r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	400a      	ands	r2, r1
 80087c4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80087ec:	bf00      	nop
 80087ee:	3714      	adds	r7, #20
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8008810:	bf00      	nop
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 8008826:	bf00      	nop
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8008832:	b480      	push	{r7}
 8008834:	b083      	sub	sp, #12
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800883a:	bf00      	nop
 800883c:	370c      	adds	r7, #12
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <HAL_JPEG_ErrorCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 8008846:	b480      	push	{r7}
 8008848:	b083      	sub	sp, #12
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_ErrorCallback could be implemented in the user file
   */
}
 800884e:	bf00      	nop
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr

0800885a <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b082      	sub	sp, #8
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008868:	b2db      	uxtb	r3, r3
 800886a:	3b03      	subs	r3, #3
 800886c:	2b01      	cmp	r3, #1
 800886e:	d813      	bhi.n	8008898 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008874:	f003 030c 	and.w	r3, r3, #12
 8008878:	2b08      	cmp	r3, #8
 800887a:	d103      	bne.n	8008884 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 ff89 	bl	8009794 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 8008882:	e00b      	b.n	800889c <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008888:	f003 030c 	and.w	r3, r3, #12
 800888c:	2b0c      	cmp	r3, #12
 800888e:	d105      	bne.n	800889c <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f001 fac9 	bl	8009e28 <JPEG_DMA_ContinueProcess>
      break;
 8008896:	e001      	b.n	800889c <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8008898:	bf00      	nop
 800889a:	e000      	b.n	800889e <HAL_JPEG_IRQHandler+0x44>
      break;
 800889c:	bf00      	nop
  }
}
 800889e:	bf00      	nop
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80088a6:	b480      	push	{r7}
 80088a8:	b08b      	sub	sp, #44	@ 0x2c
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	60f8      	str	r0, [r7, #12]
 80088ae:	60b9      	str	r1, [r7, #8]
 80088b0:	607a      	str	r2, [r7, #4]
 80088b2:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 80088b4:	2300      	movs	r3, #0
 80088b6:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 80088b8:	2300      	movs	r3, #0
 80088ba:	61fb      	str	r3, [r7, #28]
 80088bc:	e020      	b.n	8008900 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	4413      	add	r3, r2
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 80088c8:	6a3a      	ldr	r2, [r7, #32]
 80088ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088cc:	4413      	add	r3, r2
 80088ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088d2:	d90f      	bls.n	80088f4 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e055      	b.n	8008984 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	68b9      	ldr	r1, [r7, #8]
 80088de:	6a3b      	ldr	r3, [r7, #32]
 80088e0:	440b      	add	r3, r1
 80088e2:	3201      	adds	r2, #1
 80088e4:	b2d2      	uxtb	r2, r2
 80088e6:	701a      	strb	r2, [r3, #0]
      p++;
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	3301      	adds	r3, #1
 80088ec:	623b      	str	r3, [r7, #32]
      i--;
 80088ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f0:	3b01      	subs	r3, #1
 80088f2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 80088f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1ee      	bne.n	80088d8 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	3301      	adds	r3, #1
 80088fe:	61fb      	str	r3, [r7, #28]
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	2b0f      	cmp	r3, #15
 8008904:	d9db      	bls.n	80088be <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	6a3b      	ldr	r3, [r7, #32]
 800890a:	4413      	add	r3, r2
 800890c:	2200      	movs	r2, #0
 800890e:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	6a3a      	ldr	r2, [r7, #32]
 8008914:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8008916:	2300      	movs	r3, #0
 8008918:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	617b      	str	r3, [r7, #20]
  p = 0;
 8008920:	2300      	movs	r3, #0
 8008922:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8008924:	e027      	b.n	8008976 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	4413      	add	r3, r2
 800892e:	69ba      	ldr	r2, [r7, #24]
 8008930:	601a      	str	r2, [r3, #0]
      p++;
 8008932:	6a3b      	ldr	r3, [r7, #32]
 8008934:	3301      	adds	r3, #1
 8008936:	623b      	str	r3, [r7, #32]
      code++;
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	3301      	adds	r3, #1
 800893c:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	6a3b      	ldr	r3, [r7, #32]
 8008942:	4413      	add	r3, r2
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	4293      	cmp	r3, r2
 800894c:	d0eb      	beq.n	8008926 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	2b1f      	cmp	r3, #31
 8008952:	d901      	bls.n	8008958 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e015      	b.n	8008984 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8008958:	2201      	movs	r2, #1
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	fa02 f303 	lsl.w	r3, r2, r3
 8008960:	69ba      	ldr	r2, [r7, #24]
 8008962:	429a      	cmp	r2, r3
 8008964:	d301      	bcc.n	800896a <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e00c      	b.n	8008984 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	005b      	lsls	r3, r3, #1
 800896e:	61bb      	str	r3, [r7, #24]
    si++;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	3301      	adds	r3, #1
 8008974:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	6a3b      	ldr	r3, [r7, #32]
 800897a:	4413      	add	r3, r2
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1dd      	bne.n	800893e <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	372c      	adds	r7, #44	@ 0x2c
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8008996:	af00      	add	r7, sp, #0
 8008998:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800899c:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80089a0:	6018      	str	r0, [r3, #0]
 80089a2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80089a6:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80089aa:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80089ac:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80089b0:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80089b4:	6818      	ldr	r0, [r3, #0]
 80089b6:	f107 0308 	add.w	r3, r7, #8
 80089ba:	f107 020c 	add.w	r2, r7, #12
 80089be:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 80089c2:	f7ff ff70 	bl	80088a6 <JPEG_Bits_To_SizeCodes>
 80089c6:	4603      	mov	r3, r0
 80089c8:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 80089cc:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d002      	beq.n	80089da <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80089d4:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 80089d8:	e075      	b.n	8008ac6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 80089e0:	e067      	b.n	8008ab2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 80089e2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80089e6:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80089f0:	4413      	add	r3, r2
 80089f2:	3310      	adds	r3, #16
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 80089fa:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d103      	bne.n	8008a0a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8008a02:	23a0      	movs	r3, #160	@ 0xa0
 8008a04:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8008a08:	e021      	b.n	8008a4e <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8008a0a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008a0e:	2bf0      	cmp	r3, #240	@ 0xf0
 8008a10:	d103      	bne.n	8008a1a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8008a12:	23a1      	movs	r3, #161	@ 0xa1
 8008a14:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8008a18:	e019      	b.n	8008a4e <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8008a1a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008a1e:	091b      	lsrs	r3, r3, #4
 8008a20:	f003 030f 	and.w	r3, r3, #15
 8008a24:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8008a28:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008a2c:	f003 030f 	and.w	r3, r3, #15
 8008a30:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8008a34:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8008a38:	4613      	mov	r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	005b      	lsls	r3, r3, #1
 8008a40:	461a      	mov	r2, r3
 8008a42:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8008a46:	4413      	add	r3, r2
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8008a4e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008a52:	2ba1      	cmp	r3, #161	@ 0xa1
 8008a54:	d901      	bls.n	8008a5a <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8008a56:	2301      	movs	r3, #1
 8008a58:	e035      	b.n	8008ac6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008a5a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008a5e:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8008a62:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8008a66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008a6a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008a6e:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8008a72:	6819      	ldr	r1, [r3, #0]
 8008a74:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008a78:	3328      	adds	r3, #40	@ 0x28
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	440b      	add	r3, r1
 8008a7e:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8008a80:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008a84:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8008a88:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8008a8c:	4413      	add	r3, r2
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	3b01      	subs	r3, #1
 8008a92:	b2d9      	uxtb	r1, r3
 8008a94:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008a98:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008aa2:	4413      	add	r3, r2
 8008aa4:	460a      	mov	r2, r1
 8008aa6:	701a      	strb	r2, [r3, #0]
      k++;
 8008aa8:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8008aac:	3301      	adds	r3, #1
 8008aae:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8008ab2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008ab6:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d38e      	bcc.n	80089e2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008adc:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8008ae0:	6018      	str	r0, [r3, #0]
 8008ae2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008ae6:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8008aea:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008aec:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008af0:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8008af4:	6818      	ldr	r0, [r3, #0]
 8008af6:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8008afa:	f107 0208 	add.w	r2, r7, #8
 8008afe:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8008b02:	f7ff fed0 	bl	80088a6 <JPEG_Bits_To_SizeCodes>
 8008b06:	4603      	mov	r3, r0
 8008b08:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8008b0c:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8008b14:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8008b18:	e048      	b.n	8008bac <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8008b20:	e03d      	b.n	8008b9e <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8008b22:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008b26:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8008b30:	4413      	add	r3, r2
 8008b32:	3310      	adds	r3, #16
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8008b3a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8008b3e:	2b0b      	cmp	r3, #11
 8008b40:	d901      	bls.n	8008b46 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8008b42:	2301      	movs	r3, #1
 8008b44:	e032      	b.n	8008bac <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008b46:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008b4a:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8008b4e:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8008b52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008b56:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008b5a:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8008b5e:	6819      	ldr	r1, [r3, #0]
 8008b60:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8008b64:	3302      	adds	r3, #2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	440b      	add	r3, r1
 8008b6a:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8008b6c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008b70:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8008b74:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8008b78:	4413      	add	r3, r2
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	b2d9      	uxtb	r1, r3
 8008b80:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008b84:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8008b8e:	4413      	add	r3, r2
 8008b90:	460a      	mov	r2, r1
 8008b92:	701a      	strb	r2, [r3, #0]
      k++;
 8008b94:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8008b98:	3301      	adds	r3, #1
 8008b9a:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8008b9e:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8008ba2:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d3bb      	bcc.n	8008b22 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b09a      	sub	sp, #104	@ 0x68
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	60f8      	str	r0, [r7, #12]
 8008bbe:	60b9      	str	r1, [r7, #8]
 8008bc0:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d106      	bne.n	8008bde <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8008bd8:	3318      	adds	r3, #24
 8008bda:	663b      	str	r3, [r7, #96]	@ 0x60
 8008bdc:	e00f      	b.n	8008bfe <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d106      	bne.n	8008bfa <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8008bf4:	3318      	adds	r3, #24
 8008bf6:	663b      	str	r3, [r7, #96]	@ 0x60
 8008bf8:	e001      	b.n	8008bfe <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e059      	b.n	8008cb2 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d055      	beq.n	8008cb0 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8008c04:	f107 0314 	add.w	r3, r7, #20
 8008c08:	4619      	mov	r1, r3
 8008c0a:	68b8      	ldr	r0, [r7, #8]
 8008c0c:	f7ff ff60 	bl	8008ad0 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8008c10:	4603      	mov	r3, r0
 8008c12:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8008c16:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d002      	beq.n	8008c24 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8008c1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008c22:	e046      	b.n	8008cb2 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8008c24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c26:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8008c28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c2a:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8008c2e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8008c30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c32:	3304      	adds	r3, #4
 8008c34:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8008c36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c38:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8008c3c:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8008c3e:	230c      	movs	r3, #12
 8008c40:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8008c42:	e032      	b.n	8008caa <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8008c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c46:	3b01      	subs	r3, #1
 8008c48:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8008c4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c4c:	3b04      	subs	r3, #4
 8008c4e:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008c50:	f107 0214 	add.w	r2, r7, #20
 8008c54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c56:	4413      	add	r3, r2
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	021b      	lsls	r3, r3, #8
 8008c5c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008c60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c62:	3302      	adds	r3, #2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	3368      	adds	r3, #104	@ 0x68
 8008c68:	443b      	add	r3, r7
 8008c6a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	4313      	orrs	r3, r2
 8008c72:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8008c74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c76:	3b01      	subs	r3, #1
 8008c78:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008c7a:	f107 0214 	add.w	r2, r7, #20
 8008c7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c80:	4413      	add	r3, r2
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	021b      	lsls	r3, r3, #8
 8008c86:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008c8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c8c:	3302      	adds	r3, #2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	3368      	adds	r3, #104	@ 0x68
 8008c92:	443b      	add	r3, r7
 8008c94:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8008c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ca0:	041a      	lsls	r2, r3, #16
 8008ca2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ca4:	431a      	orrs	r2, r3
 8008ca6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ca8:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8008caa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d8c9      	bhi.n	8008c44 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3768      	adds	r7, #104	@ 0x68
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
	...

08008cbc <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008cc8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8008ccc:	6018      	str	r0, [r3, #0]
 8008cce:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008cd2:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8008cd6:	6019      	str	r1, [r3, #0]
 8008cd8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008cdc:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8008ce0:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8008ce2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008ce6:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cf2:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8008cf6:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8008cfa:	6812      	ldr	r2, [r2, #0]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d10c      	bne.n	8008d1a <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8008d00:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008d04:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d10:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8008d14:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8008d18:	e01d      	b.n	8008d56 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8008d1a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008d1e:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8008d2a:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8008d2e:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8008d32:	6812      	ldr	r2, [r2, #0]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d10c      	bne.n	8008d52 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8008d38:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008d3c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8008d48:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8008d4c:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8008d50:	e001      	b.n	8008d56 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e0a8      	b.n	8008ea8 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8008d56:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008d5a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 80a0 	beq.w	8008ea6 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8008d66:	f107 0214 	add.w	r2, r7, #20
 8008d6a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008d6e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8008d72:	4611      	mov	r1, r2
 8008d74:	6818      	ldr	r0, [r3, #0]
 8008d76:	f7ff fe0b 	bl	8008990 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8008d80:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d002      	beq.n	8008d8e <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8008d88:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8008d8c:	e08c      	b.n	8008ea8 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8008d8e:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8008d92:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8008d96:	2300      	movs	r3, #0
 8008d98:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8008d9c:	e00e      	b.n	8008dbc <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8008d9e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008da2:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8008da6:	601a      	str	r2, [r3, #0]
      addressDef++;
 8008da8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008dac:	3304      	adds	r3, #4
 8008dae:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8008db2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008db6:	3301      	adds	r3, #1
 8008db8:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8008dbc:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d9ec      	bls.n	8008d9e <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8008dc4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008dc8:	4a3a      	ldr	r2, [pc, #232]	@ (8008eb4 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8008dca:	601a      	str	r2, [r3, #0]
    addressDef++;
 8008dcc:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8008dd6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008dda:	4a37      	ldr	r2, [pc, #220]	@ (8008eb8 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8008ddc:	601a      	str	r2, [r3, #0]
    addressDef++;
 8008dde:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008de2:	3304      	adds	r3, #4
 8008de4:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8008de8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008dec:	4a33      	ldr	r2, [pc, #204]	@ (8008ebc <JPEG_Set_HuffAC_Mem+0x200>)
 8008dee:	601a      	str	r2, [r3, #0]
    addressDef++;
 8008df0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008df4:	3304      	adds	r3, #4
 8008df6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8008dfa:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008dfe:	4a30      	ldr	r2, [pc, #192]	@ (8008ec0 <JPEG_Set_HuffAC_Mem+0x204>)
 8008e00:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8008e02:	23a2      	movs	r3, #162	@ 0xa2
 8008e04:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8008e08:	e049      	b.n	8008e9e <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8008e0a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8008e14:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8008e18:	3b04      	subs	r3, #4
 8008e1a:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008e1e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008e22:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8008e26:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008e2a:	4413      	add	r3, r2
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	021b      	lsls	r3, r3, #8
 8008e30:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008e34:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008e38:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8008e3c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008e40:	3328      	adds	r3, #40	@ 0x28
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	440b      	add	r3, r1
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8008e50:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008e54:	3b01      	subs	r3, #1
 8008e56:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008e5a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008e5e:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8008e62:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008e66:	4413      	add	r3, r2
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	021b      	lsls	r3, r3, #8
 8008e6c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008e70:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008e74:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8008e78:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008e7c:	3328      	adds	r3, #40	@ 0x28
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	440b      	add	r3, r1
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	4313      	orrs	r3, r2
 8008e88:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8008e8c:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8008e90:	041a      	lsls	r2, r3, #16
 8008e92:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8008e96:	431a      	orrs	r2, r3
 8008e98:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8008e9c:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8008e9e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d8b1      	bhi.n	8008e0a <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	0fd10fd0 	.word	0x0fd10fd0
 8008eb8:	0fd30fd2 	.word	0x0fd30fd2
 8008ebc:	0fd50fd4 	.word	0x0fd50fd4
 8008ec0:	0fd70fd6 	.word	0x0fd70fd6

08008ec4 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f84d 	bl	8008f6c <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8008eda:	461a      	mov	r2, r3
 8008edc:	491f      	ldr	r1, [pc, #124]	@ (8008f5c <JPEG_Set_HuffEnc_Mem+0x98>)
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7ff feec 	bl	8008cbc <JPEG_Set_HuffAC_Mem>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8008ee8:	7bfb      	ldrb	r3, [r7, #15]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d001      	beq.n	8008ef2 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
 8008ef0:	e030      	b.n	8008f54 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8008efa:	461a      	mov	r2, r3
 8008efc:	4918      	ldr	r1, [pc, #96]	@ (8008f60 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f7ff fedc 	bl	8008cbc <JPEG_Set_HuffAC_Mem>
 8008f04:	4603      	mov	r3, r0
 8008f06:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d001      	beq.n	8008f12 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
 8008f10:	e020      	b.n	8008f54 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	4911      	ldr	r1, [pc, #68]	@ (8008f64 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7ff fe49 	bl	8008bb6 <JPEG_Set_HuffDC_Mem>
 8008f24:	4603      	mov	r3, r0
 8008f26:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d001      	beq.n	8008f32 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
 8008f30:	e010      	b.n	8008f54 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	490a      	ldr	r1, [pc, #40]	@ (8008f68 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7ff fe39 	bl	8008bb6 <JPEG_Set_HuffDC_Mem>
 8008f44:	4603      	mov	r3, r0
 8008f46:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
 8008f50:	e000      	b.n	8008f54 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	0801611c 	.word	0x0801611c
 8008f60:	080161d0 	.word	0x080161d0
 8008f64:	080160e4 	.word	0x080160e4
 8008f68:	08016100 	.word	0x08016100

08008f6c <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b08b      	sub	sp, #44	@ 0x2c
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8008f74:	4b80      	ldr	r3, [pc, #512]	@ (8009178 <JPEG_Set_Huff_DHTMem+0x20c>)
 8008f76:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8008f78:	4b80      	ldr	r3, [pc, #512]	@ (800917c <JPEG_Set_Huff_DHTMem+0x210>)
 8008f7a:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8008f7c:	4b80      	ldr	r3, [pc, #512]	@ (8009180 <JPEG_Set_Huff_DHTMem+0x214>)
 8008f7e:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8008f80:	4b80      	ldr	r3, [pc, #512]	@ (8009184 <JPEG_Set_Huff_DHTMem+0x218>)
 8008f82:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8008f8c:	330c      	adds	r3, #12
 8008f8e:	623b      	str	r3, [r7, #32]
  index = 16;
 8008f90:	2310      	movs	r3, #16
 8008f92:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8008f94:	e01d      	b.n	8008fd2 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	5cd3      	ldrb	r3, [r2, r3]
 8008f9e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa2:	3b02      	subs	r3, #2
 8008fa4:	6979      	ldr	r1, [r7, #20]
 8008fa6:	5ccb      	ldrb	r3, [r1, r3]
 8008fa8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008faa:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8008fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fae:	3b03      	subs	r3, #3
 8008fb0:	6979      	ldr	r1, [r7, #20]
 8008fb2:	5ccb      	ldrb	r3, [r1, r3]
 8008fb4:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008fb6:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8008fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fba:	3a04      	subs	r2, #4
 8008fbc:	6979      	ldr	r1, [r7, #20]
 8008fbe:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8008fc0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008fc2:	6a3b      	ldr	r3, [r7, #32]
 8008fc4:	601a      	str	r2, [r3, #0]
    address--;
 8008fc6:	6a3b      	ldr	r3, [r7, #32]
 8008fc8:	3b04      	subs	r3, #4
 8008fca:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fce:	3b04      	subs	r3, #4
 8008fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd4:	2b03      	cmp	r3, #3
 8008fd6:	d8de      	bhi.n	8008f96 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8008fe0:	3318      	adds	r3, #24
 8008fe2:	623b      	str	r3, [r7, #32]
  index = 12;
 8008fe4:	230c      	movs	r3, #12
 8008fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8008fe8:	e021      	b.n	800902e <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fec:	3b01      	subs	r3, #1
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	7c1b      	ldrb	r3, [r3, #16]
 8008ff4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff8:	3b02      	subs	r3, #2
 8008ffa:	6979      	ldr	r1, [r7, #20]
 8008ffc:	440b      	add	r3, r1
 8008ffe:	7c1b      	ldrb	r3, [r3, #16]
 8009000:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009002:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009006:	3b03      	subs	r3, #3
 8009008:	6979      	ldr	r1, [r7, #20]
 800900a:	440b      	add	r3, r1
 800900c:	7c1b      	ldrb	r3, [r3, #16]
 800900e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8009010:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8009012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009014:	3a04      	subs	r2, #4
 8009016:	6979      	ldr	r1, [r7, #20]
 8009018:	440a      	add	r2, r1
 800901a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800901c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800901e:	6a3b      	ldr	r3, [r7, #32]
 8009020:	601a      	str	r2, [r3, #0]
    address--;
 8009022:	6a3b      	ldr	r3, [r7, #32]
 8009024:	3b04      	subs	r3, #4
 8009026:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902a:	3b04      	subs	r3, #4
 800902c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800902e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009030:	2b03      	cmp	r3, #3
 8009032:	d8da      	bhi.n	8008fea <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800903c:	3328      	adds	r3, #40	@ 0x28
 800903e:	623b      	str	r3, [r7, #32]
  index = 16;
 8009040:	2310      	movs	r3, #16
 8009042:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009044:	e01d      	b.n	8009082 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009048:	3b01      	subs	r3, #1
 800904a:	69fa      	ldr	r2, [r7, #28]
 800904c:	5cd3      	ldrb	r3, [r2, r3]
 800904e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009052:	3b02      	subs	r3, #2
 8009054:	69f9      	ldr	r1, [r7, #28]
 8009056:	5ccb      	ldrb	r3, [r1, r3]
 8009058:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800905a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800905c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905e:	3b03      	subs	r3, #3
 8009060:	69f9      	ldr	r1, [r7, #28]
 8009062:	5ccb      	ldrb	r3, [r1, r3]
 8009064:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009066:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8009068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800906a:	3a04      	subs	r2, #4
 800906c:	69f9      	ldr	r1, [r7, #28]
 800906e:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8009070:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009072:	6a3b      	ldr	r3, [r7, #32]
 8009074:	601a      	str	r2, [r3, #0]
    address--;
 8009076:	6a3b      	ldr	r3, [r7, #32]
 8009078:	3b04      	subs	r3, #4
 800907a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800907c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907e:	3b04      	subs	r3, #4
 8009080:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009084:	2b03      	cmp	r3, #3
 8009086:	d8de      	bhi.n	8009046 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009090:	33cc      	adds	r3, #204	@ 0xcc
 8009092:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	4b3b      	ldr	r3, [pc, #236]	@ (8009188 <JPEG_Set_Huff_DHTMem+0x21c>)
 800909a:	4013      	ands	r3, r2
 800909c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80090a4:	021a      	lsls	r2, r3, #8
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	69fa      	ldr	r2, [r7, #28]
 80090ac:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 80090b0:	4313      	orrs	r3, r2
 80090b2:	60fb      	str	r3, [r7, #12]
  *address = value;
 80090b4:	6a3b      	ldr	r3, [r7, #32]
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80090ba:	6a3b      	ldr	r3, [r7, #32]
 80090bc:	3b04      	subs	r3, #4
 80090be:	623b      	str	r3, [r7, #32]
  index = 160;
 80090c0:	23a0      	movs	r3, #160	@ 0xa0
 80090c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80090c4:	e021      	b.n	800910a <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80090c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c8:	3b01      	subs	r3, #1
 80090ca:	69fa      	ldr	r2, [r7, #28]
 80090cc:	4413      	add	r3, r2
 80090ce:	7c1b      	ldrb	r3, [r3, #16]
 80090d0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80090d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d4:	3b02      	subs	r3, #2
 80090d6:	69f9      	ldr	r1, [r7, #28]
 80090d8:	440b      	add	r3, r1
 80090da:	7c1b      	ldrb	r3, [r3, #16]
 80090dc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80090de:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80090e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e2:	3b03      	subs	r3, #3
 80090e4:	69f9      	ldr	r1, [r7, #28]
 80090e6:	440b      	add	r3, r1
 80090e8:	7c1b      	ldrb	r3, [r3, #16]
 80090ea:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80090ec:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 80090ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090f0:	3a04      	subs	r2, #4
 80090f2:	69f9      	ldr	r1, [r7, #28]
 80090f4:	440a      	add	r2, r1
 80090f6:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80090f8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80090fa:	6a3b      	ldr	r3, [r7, #32]
 80090fc:	601a      	str	r2, [r3, #0]
    address--;
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	3b04      	subs	r3, #4
 8009102:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009106:	3b04      	subs	r3, #4
 8009108:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800910a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800910c:	2b03      	cmp	r3, #3
 800910e:	d8da      	bhi.n	80090c6 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009118:	33cc      	adds	r3, #204	@ 0xcc
 800911a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800911c:	6a3b      	ldr	r3, [r7, #32]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	b29b      	uxth	r3, r3
 8009122:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	785b      	ldrb	r3, [r3, #1]
 8009128:	061a      	lsls	r2, r3, #24
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	431a      	orrs	r2, r3
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	041b      	lsls	r3, r3, #16
 8009134:	4313      	orrs	r3, r2
 8009136:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009138:	6a3b      	ldr	r3, [r7, #32]
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009146:	33dc      	adds	r3, #220	@ 0xdc
 8009148:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800914a:	6a3b      	ldr	r3, [r7, #32]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	4b0e      	ldr	r3, [pc, #56]	@ (8009188 <JPEG_Set_Huff_DHTMem+0x21c>)
 8009150:	4013      	ands	r3, r2
 8009152:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	7bdb      	ldrb	r3, [r3, #15]
 8009158:	021a      	lsls	r2, r3, #8
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	4313      	orrs	r3, r2
 800915e:	693a      	ldr	r2, [r7, #16]
 8009160:	7b92      	ldrb	r2, [r2, #14]
 8009162:	4313      	orrs	r3, r2
 8009164:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009166:	6a3b      	ldr	r3, [r7, #32]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800916c:	6a3b      	ldr	r3, [r7, #32]
 800916e:	3b04      	subs	r3, #4
 8009170:	623b      	str	r3, [r7, #32]
  index = 12;
 8009172:	230c      	movs	r3, #12
 8009174:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009176:	e027      	b.n	80091c8 <JPEG_Set_Huff_DHTMem+0x25c>
 8009178:	0801611c 	.word	0x0801611c
 800917c:	080161d0 	.word	0x080161d0
 8009180:	080160e4 	.word	0x080160e4
 8009184:	08016100 	.word	0x08016100
 8009188:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800918c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800918e:	3301      	adds	r3, #1
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	5cd3      	ldrb	r3, [r2, r3]
 8009194:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8009196:	6939      	ldr	r1, [r7, #16]
 8009198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919a:	440b      	add	r3, r1
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80091a0:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80091a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a4:	3b01      	subs	r3, #1
 80091a6:	6939      	ldr	r1, [r7, #16]
 80091a8:	5ccb      	ldrb	r3, [r1, r3]
 80091aa:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80091ac:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 80091ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091b0:	3a02      	subs	r2, #2
 80091b2:	6939      	ldr	r1, [r7, #16]
 80091b4:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80091b6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80091b8:	6a3b      	ldr	r3, [r7, #32]
 80091ba:	601a      	str	r2, [r3, #0]
    address--;
 80091bc:	6a3b      	ldr	r3, [r7, #32]
 80091be:	3b04      	subs	r3, #4
 80091c0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80091c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c4:	3b04      	subs	r3, #4
 80091c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80091c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	d8de      	bhi.n	800918c <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80091d6:	33dc      	adds	r3, #220	@ 0xdc
 80091d8:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80091da:	6a3b      	ldr	r3, [r7, #32]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	b29b      	uxth	r3, r3
 80091e0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	7c5b      	ldrb	r3, [r3, #17]
 80091e6:	061a      	lsls	r2, r3, #24
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	431a      	orrs	r2, r3
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	7c1b      	ldrb	r3, [r3, #16]
 80091f0:	041b      	lsls	r3, r3, #16
 80091f2:	4313      	orrs	r3, r2
 80091f4:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80091f6:	6a3b      	ldr	r3, [r7, #32]
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009204:	33e8      	adds	r3, #232	@ 0xe8
 8009206:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	4b6d      	ldr	r3, [pc, #436]	@ (80093c4 <JPEG_Set_Huff_DHTMem+0x458>)
 800920e:	4013      	ands	r3, r2
 8009210:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	7edb      	ldrb	r3, [r3, #27]
 8009216:	021a      	lsls	r2, r3, #8
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	4313      	orrs	r3, r2
 800921c:	693a      	ldr	r2, [r7, #16]
 800921e:	7e92      	ldrb	r2, [r2, #26]
 8009220:	4313      	orrs	r3, r2
 8009222:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009224:	6a3b      	ldr	r3, [r7, #32]
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	3b04      	subs	r3, #4
 800922e:	623b      	str	r3, [r7, #32]
  index = 8;
 8009230:	2308      	movs	r3, #8
 8009232:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009234:	e021      	b.n	800927a <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009238:	3301      	adds	r3, #1
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	4413      	add	r3, r2
 800923e:	7c1b      	ldrb	r3, [r3, #16]
 8009240:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8009242:	6939      	ldr	r1, [r7, #16]
 8009244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009246:	440b      	add	r3, r1
 8009248:	3310      	adds	r3, #16
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800924e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8009250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009252:	3b01      	subs	r3, #1
 8009254:	6939      	ldr	r1, [r7, #16]
 8009256:	440b      	add	r3, r1
 8009258:	7c1b      	ldrb	r3, [r3, #16]
 800925a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800925c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800925e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009260:	3a02      	subs	r2, #2
 8009262:	6939      	ldr	r1, [r7, #16]
 8009264:	440a      	add	r2, r1
 8009266:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8009268:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800926a:	6a3b      	ldr	r3, [r7, #32]
 800926c:	601a      	str	r2, [r3, #0]
    address--;
 800926e:	6a3b      	ldr	r3, [r7, #32]
 8009270:	3b04      	subs	r3, #4
 8009272:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009276:	3b04      	subs	r3, #4
 8009278:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800927a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927c:	2b03      	cmp	r3, #3
 800927e:	d8da      	bhi.n	8009236 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009288:	33e8      	adds	r3, #232	@ 0xe8
 800928a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	b29b      	uxth	r3, r3
 8009292:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	785b      	ldrb	r3, [r3, #1]
 8009298:	061a      	lsls	r2, r3, #24
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	431a      	orrs	r2, r3
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	041b      	lsls	r3, r3, #16
 80092a4:	4313      	orrs	r3, r2
 80092a6:	60fb      	str	r3, [r7, #12]
  *address = value;
 80092a8:	6a3b      	ldr	r3, [r7, #32]
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80092b6:	33f8      	adds	r3, #248	@ 0xf8
 80092b8:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80092ba:	6a3b      	ldr	r3, [r7, #32]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	4b41      	ldr	r3, [pc, #260]	@ (80093c4 <JPEG_Set_Huff_DHTMem+0x458>)
 80092c0:	4013      	ands	r3, r2
 80092c2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	7bdb      	ldrb	r3, [r3, #15]
 80092c8:	021a      	lsls	r2, r3, #8
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	69ba      	ldr	r2, [r7, #24]
 80092d0:	7b92      	ldrb	r2, [r2, #14]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	60fb      	str	r3, [r7, #12]
  *address = value;
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 80092dc:	6a3b      	ldr	r3, [r7, #32]
 80092de:	3b04      	subs	r3, #4
 80092e0:	623b      	str	r3, [r7, #32]
  index = 12;
 80092e2:	230c      	movs	r3, #12
 80092e4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80092e6:	e01d      	b.n	8009324 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80092e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ea:	3301      	adds	r3, #1
 80092ec:	69ba      	ldr	r2, [r7, #24]
 80092ee:	5cd3      	ldrb	r3, [r2, r3]
 80092f0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80092f2:	69b9      	ldr	r1, [r7, #24]
 80092f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f6:	440b      	add	r3, r1
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80092fc:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80092fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009300:	3b01      	subs	r3, #1
 8009302:	69b9      	ldr	r1, [r7, #24]
 8009304:	5ccb      	ldrb	r3, [r1, r3]
 8009306:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8009308:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800930a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800930c:	3a02      	subs	r2, #2
 800930e:	69b9      	ldr	r1, [r7, #24]
 8009310:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8009312:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009314:	6a3b      	ldr	r3, [r7, #32]
 8009316:	601a      	str	r2, [r3, #0]
    address--;
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	3b04      	subs	r3, #4
 800931c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800931e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009320:	3b04      	subs	r3, #4
 8009322:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009326:	2b03      	cmp	r3, #3
 8009328:	d8de      	bhi.n	80092e8 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009332:	33f8      	adds	r3, #248	@ 0xf8
 8009334:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	b29b      	uxth	r3, r3
 800933c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	7c5b      	ldrb	r3, [r3, #17]
 8009342:	061a      	lsls	r2, r3, #24
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	431a      	orrs	r2, r3
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	7c1b      	ldrb	r3, [r3, #16]
 800934c:	041b      	lsls	r3, r3, #16
 800934e:	4313      	orrs	r3, r2
 8009350:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009360:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8009364:	623b      	str	r3, [r7, #32]
  index = 160;
 8009366:	23a0      	movs	r3, #160	@ 0xa0
 8009368:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800936a:	e021      	b.n	80093b0 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800936c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800936e:	3301      	adds	r3, #1
 8009370:	69ba      	ldr	r2, [r7, #24]
 8009372:	4413      	add	r3, r2
 8009374:	7c1b      	ldrb	r3, [r3, #16]
 8009376:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8009378:	69b9      	ldr	r1, [r7, #24]
 800937a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937c:	440b      	add	r3, r1
 800937e:	3310      	adds	r3, #16
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009384:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8009386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009388:	3b01      	subs	r3, #1
 800938a:	69b9      	ldr	r1, [r7, #24]
 800938c:	440b      	add	r3, r1
 800938e:	7c1b      	ldrb	r3, [r3, #16]
 8009390:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8009392:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8009394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009396:	3a02      	subs	r2, #2
 8009398:	69b9      	ldr	r1, [r7, #24]
 800939a:	440a      	add	r2, r1
 800939c:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800939e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80093a0:	6a3b      	ldr	r3, [r7, #32]
 80093a2:	601a      	str	r2, [r3, #0]
    address--;
 80093a4:	6a3b      	ldr	r3, [r7, #32]
 80093a6:	3b04      	subs	r3, #4
 80093a8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80093aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ac:	3b04      	subs	r3, #4
 80093ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80093b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b2:	2b03      	cmp	r3, #3
 80093b4:	d8da      	bhi.n	800936c <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 80093b6:	bf00      	nop
 80093b8:	bf00      	nop
 80093ba:	372c      	adds	r7, #44	@ 0x2c
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	ffff0000 	.word	0xffff0000

080093c8 <JPEG_Set_Quantization_Mem>:
  *         it could be QMEM0, QMEM1, QMEM2 or QMEM3
  * @retval 0 if no error, 1 if error
  */
static uint32_t JPEG_Set_Quantization_Mem(JPEG_HandleTypeDef *hjpeg, uint8_t *QTable,
                                                    __IO uint32_t *QTableAddress)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b08b      	sub	sp, #44	@ 0x2c
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
  uint32_t quantRow;
  uint32_t quantVal;
  uint32_t ScaleFactor;
  __IO uint32_t *tableAddress;

  tableAddress = QTableAddress;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	613b      	str	r3, [r7, #16]

  if ((hjpeg->Conf.ImageQuality >= 50UL) && (hjpeg->Conf.ImageQuality <= 100UL))
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	695b      	ldr	r3, [r3, #20]
 80093dc:	2b31      	cmp	r3, #49	@ 0x31
 80093de:	d90a      	bls.n	80093f6 <JPEG_Set_Quantization_Mem+0x2e>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	695b      	ldr	r3, [r3, #20]
 80093e4:	2b64      	cmp	r3, #100	@ 0x64
 80093e6:	d806      	bhi.n	80093f6 <JPEG_Set_Quantization_Mem+0x2e>
  {
    ScaleFactor = 200UL - (hjpeg->Conf.ImageQuality * 2UL);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	695b      	ldr	r3, [r3, #20]
 80093ec:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80093f0:	005b      	lsls	r3, r3, #1
 80093f2:	617b      	str	r3, [r7, #20]
 80093f4:	e00d      	b.n	8009412 <JPEG_Set_Quantization_Mem+0x4a>
  }
  else if (hjpeg->Conf.ImageQuality > 0UL)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d007      	beq.n	800940e <JPEG_Set_Quantization_Mem+0x46>
  {
    ScaleFactor = ((uint32_t) 5000) / ((uint32_t) hjpeg->Conf.ImageQuality);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	695b      	ldr	r3, [r3, #20]
 8009402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009406:	fbb2 f3f3 	udiv	r3, r2, r3
 800940a:	617b      	str	r3, [r7, #20]
 800940c:	e001      	b.n	8009412 <JPEG_Set_Quantization_Mem+0x4a>
  }
  else
  {
    return 1UL;
 800940e:	2301      	movs	r3, #1
 8009410:	e041      	b.n	8009496 <JPEG_Set_Quantization_Mem+0xce>
  }

  /*Quantization_table = (Standard_quanization_table * ScaleFactor + 50) / 100*/
  i = 0;
 8009412:	2300      	movs	r3, #0
 8009414:	627b      	str	r3, [r7, #36]	@ 0x24
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8009416:	e03a      	b.n	800948e <JPEG_Set_Quantization_Mem+0xc6>
  {
    quantRow = 0;
 8009418:	2300      	movs	r3, #0
 800941a:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < 4UL; j++)
 800941c:	2300      	movs	r3, #0
 800941e:	623b      	str	r3, [r7, #32]
 8009420:	e029      	b.n	8009476 <JPEG_Set_Quantization_Mem+0xae>
    {
      /* Note that the quantization coefficients must be specified in the table in zigzag order */
      quantVal = ((((uint32_t) QTable[JPEG_ZIGZAG_ORDER[i + j]]) * ScaleFactor) + 50UL) / 100UL;
 8009422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009424:	6a3b      	ldr	r3, [r7, #32]
 8009426:	4413      	add	r3, r2
 8009428:	4a1e      	ldr	r2, [pc, #120]	@ (80094a4 <JPEG_Set_Quantization_Mem+0xdc>)
 800942a:	5cd3      	ldrb	r3, [r2, r3]
 800942c:	461a      	mov	r2, r3
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	4413      	add	r3, r2
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	461a      	mov	r2, r3
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	fb02 f303 	mul.w	r3, r2, r3
 800943c:	3332      	adds	r3, #50	@ 0x32
 800943e:	4a1a      	ldr	r2, [pc, #104]	@ (80094a8 <JPEG_Set_Quantization_Mem+0xe0>)
 8009440:	fba2 2303 	umull	r2, r3, r2, r3
 8009444:	095b      	lsrs	r3, r3, #5
 8009446:	61bb      	str	r3, [r7, #24]

      if (quantVal == 0UL)
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d102      	bne.n	8009454 <JPEG_Set_Quantization_Mem+0x8c>
      {
        quantVal = 1UL;
 800944e:	2301      	movs	r3, #1
 8009450:	61bb      	str	r3, [r7, #24]
 8009452:	e004      	b.n	800945e <JPEG_Set_Quantization_Mem+0x96>
      }
      else if (quantVal > 255UL)
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	2bff      	cmp	r3, #255	@ 0xff
 8009458:	d901      	bls.n	800945e <JPEG_Set_Quantization_Mem+0x96>
      {
        quantVal = 255UL;
 800945a:	23ff      	movs	r3, #255	@ 0xff
 800945c:	61bb      	str	r3, [r7, #24]
      else
      {
        /* Nothing to do, keep same value of quantVal */
      }

      quantRow |= ((quantVal & 0xFFUL) << (8UL * j));
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	b2da      	uxtb	r2, r3
 8009462:	6a3b      	ldr	r3, [r7, #32]
 8009464:	00db      	lsls	r3, r3, #3
 8009466:	fa02 f303 	lsl.w	r3, r2, r3
 800946a:	69fa      	ldr	r2, [r7, #28]
 800946c:	4313      	orrs	r3, r2
 800946e:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < 4UL; j++)
 8009470:	6a3b      	ldr	r3, [r7, #32]
 8009472:	3301      	adds	r3, #1
 8009474:	623b      	str	r3, [r7, #32]
 8009476:	6a3b      	ldr	r3, [r7, #32]
 8009478:	2b03      	cmp	r3, #3
 800947a:	d9d2      	bls.n	8009422 <JPEG_Set_Quantization_Mem+0x5a>
    }

    i += 4UL;
 800947c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947e:	3304      	adds	r3, #4
 8009480:	627b      	str	r3, [r7, #36]	@ 0x24
    *tableAddress = quantRow;
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	69fa      	ldr	r2, [r7, #28]
 8009486:	601a      	str	r2, [r3, #0]
    tableAddress ++;
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	3304      	adds	r3, #4
 800948c:	613b      	str	r3, [r7, #16]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800948e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009490:	2b3c      	cmp	r3, #60	@ 0x3c
 8009492:	d9c1      	bls.n	8009418 <JPEG_Set_Quantization_Mem+0x50>
  }

  /* Return function status */
  return 0UL;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	372c      	adds	r7, #44	@ 0x2c
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	08016284 	.word	0x08016284
 80094a8:	51eb851f 	.word	0x51eb851f

080094ac <JPEG_SetColorYCBCR>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorYCBCR(JPEG_HandleTypeDef *hjpeg)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  uint32_t ySamplingH;
  uint32_t ySamplingV;
  uint32_t yblockNb;

  /*Set Number of color components to 3*/
  hjpeg->Instance->CONFR1 &=  ~JPEG_CONFR1_NF;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	685a      	ldr	r2, [r3, #4]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f022 0203 	bic.w	r2, r2, #3
 80094c2:	605a      	str	r2, [r3, #4]
  hjpeg->Instance->CONFR1 |=  JPEG_CONFR1_NF_1;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	685a      	ldr	r2, [r3, #4]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f042 0202 	orr.w	r2, r2, #2
 80094d2:	605a      	str	r2, [r3, #4]

  /* compute MCU block size and Y, Cb ,Cr sampling factors*/
  if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d108      	bne.n	80094ee <JPEG_SetColorYCBCR+0x42>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 80094dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80094e0:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_1;   /* Vs = 2*/
 80094e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80094e6:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x30; /* 4 blocks of 8x8*/
 80094e8:	2330      	movs	r3, #48	@ 0x30
 80094ea:	60fb      	str	r3, [r7, #12]
 80094ec:	e014      	b.n	8009518 <JPEG_SetColorYCBCR+0x6c>
  }
  else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d108      	bne.n	8009508 <JPEG_SetColorYCBCR+0x5c>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 80094f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80094fa:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 80094fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009500:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x10; /* 2 blocks of 8x8*/
 8009502:	2310      	movs	r3, #16
 8009504:	60fb      	str	r3, [r7, #12]
 8009506:	e007      	b.n	8009518 <JPEG_SetColorYCBCR+0x6c>
  }
  else /*JPEG_444_SUBSAMPLING and default*/
  {
    ySamplingH  = JPEG_CONFR4_HSF_0;   /* Hs = 1*/
 8009508:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800950c:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 800950e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009512:	613b      	str	r3, [r7, #16]

    yblockNb  = 0; /* 1 block of 8x8*/
 8009514:	2300      	movs	r3, #0
 8009516:	60fb      	str	r3, [r7, #12]
  }

  hjpeg->Instance->CONFR1 &= ~(JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	685a      	ldr	r2, [r3, #4]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f022 02c3 	bic.w	r2, r2, #195	@ 0xc3
 8009526:	605a      	str	r2, [r3, #4]
  hjpeg->Instance->CONFR1 |= (JPEG_CONFR1_NF_1 | JPEG_CONFR1_NS_1);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685a      	ldr	r2, [r3, #4]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f042 0282 	orr.w	r2, r2, #130	@ 0x82
 8009536:	605a      	str	r2, [r3, #4]

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2200      	movs	r2, #0
 800953e:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |= (ySamplingH | ySamplingV | (yblockNb & JPEG_CONFR4_NB));
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6919      	ldr	r1, [r3, #16]
 8009546:	697a      	ldr	r2, [r7, #20]
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	431a      	orrs	r2, r3
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009552:	431a      	orrs	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	430a      	orrs	r2, r1
 800955a:	611a      	str	r2, [r3, #16]

  /*Reset CONFR5 register*/
  hjpeg->Instance->CONFR5 =  0;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2200      	movs	r2, #0
 8009562:	615a      	str	r2, [r3, #20]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 1*/
  hjpeg->Instance->CONFR5 |= (JPEG_CONFR5_HSF_0 | JPEG_CONFR5_VSF_0 | JPEG_CONFR5_QT_0 | JPEG_CONFR5_HA | JPEG_CONFR5_HD);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6959      	ldr	r1, [r3, #20]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	f241 1307 	movw	r3, #4359	@ 0x1107
 8009572:	430b      	orrs	r3, r1
 8009574:	6153      	str	r3, [r2, #20]

  /*Reset CONFR6 register*/
  hjpeg->Instance->CONFR6 =  0;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2200      	movs	r2, #0
 800957c:	619a      	str	r2, [r3, #24]
  /*Set Horizental and Vertical  sampling factor and number of blocks for component 2*/
  /* In YCBCR , by default, both chrominance components (component 1 and component 2) use the same Quantization table (table 1) */
  /* In YCBCR , both chrominance components (component 1 and component 2) use the same Huffman tables (table 1) */
  hjpeg->Instance->CONFR6 |= (JPEG_CONFR6_HSF_0 | JPEG_CONFR6_VSF_0 | JPEG_CONFR6_QT_0 | JPEG_CONFR6_HA | JPEG_CONFR6_HD);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	6999      	ldr	r1, [r3, #24]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	f241 1307 	movw	r3, #4359	@ 0x1107
 800958c:	430b      	orrs	r3, r1
 800958e:	6193      	str	r3, [r2, #24]

}
 8009590:	bf00      	nop
 8009592:	371c      	adds	r7, #28
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <JPEG_SetColorGrayScale>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorGrayScale(JPEG_HandleTypeDef *hjpeg)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  /*Set Number of color components to 1*/
  hjpeg->Instance->CONFR1 &= ~(JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	685a      	ldr	r2, [r3, #4]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f022 02c3 	bic.w	r2, r2, #195	@ 0xc3
 80095b2:	605a      	str	r2, [r3, #4]

  /*in GrayScale use 1 single Quantization table (Table 0)*/
  /*in GrayScale use only one couple of AC/DC huffman table (table 0)*/

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2200      	movs	r2, #0
 80095ba:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |=  JPEG_CONFR4_HSF_0 | JPEG_CONFR4_VSF_0 ;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	691a      	ldr	r2, [r3, #16]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 80095ca:	611a      	str	r2, [r3, #16]
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <JPEG_SetColorCMYK>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorCMYK(JPEG_HandleTypeDef *hjpeg)
{
 80095d8:	b480      	push	{r7}
 80095da:	b087      	sub	sp, #28
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  uint32_t ySamplingH;
  uint32_t ySamplingV;
  uint32_t yblockNb;

  /*Set Number of color components to 4*/
  hjpeg->Instance->CONFR1 |= (JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f042 02c3 	orr.w	r2, r2, #195	@ 0xc3
 80095ee:	605a      	str	r2, [r3, #4]

  /* compute MCU block size and Y, Cb ,Cr sampling factors*/
  if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d108      	bne.n	800960a <JPEG_SetColorCMYK+0x32>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 80095f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80095fc:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_1;   /* Vs = 2*/
 80095fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009602:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x30; /* 4 blocks of 8x8*/
 8009604:	2330      	movs	r3, #48	@ 0x30
 8009606:	60fb      	str	r3, [r7, #12]
 8009608:	e014      	b.n	8009634 <JPEG_SetColorCMYK+0x5c>
  }
  else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	2b02      	cmp	r3, #2
 8009610:	d108      	bne.n	8009624 <JPEG_SetColorCMYK+0x4c>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 8009612:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009616:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 8009618:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800961c:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x10; /* 2 blocks of 8x8*/
 800961e:	2310      	movs	r3, #16
 8009620:	60fb      	str	r3, [r7, #12]
 8009622:	e007      	b.n	8009634 <JPEG_SetColorCMYK+0x5c>
  }
  else /*JPEG_444_SUBSAMPLING and default*/
  {
    ySamplingH  = JPEG_CONFR4_HSF_0;   /* Hs = 1*/
 8009624:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009628:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 800962a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800962e:	613b      	str	r3, [r7, #16]

    yblockNb  = 0; /* 1 block of 8x8*/
 8009630:	2300      	movs	r3, #0
 8009632:	60fb      	str	r3, [r7, #12]
  }

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2200      	movs	r2, #0
 800963a:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |= (ySamplingH | ySamplingV | (yblockNb & JPEG_CONFR4_NB));
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6919      	ldr	r1, [r3, #16]
 8009642:	697a      	ldr	r2, [r7, #20]
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	431a      	orrs	r2, r3
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800964e:	431a      	orrs	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	430a      	orrs	r2, r1
 8009656:	611a      	str	r2, [r3, #16]

  /*Reset CONFR5 register*/
  hjpeg->Instance->CONFR5 =  0;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2200      	movs	r2, #0
 800965e:	615a      	str	r2, [r3, #20]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 1*/
  hjpeg->Instance->CONFR5 |= (JPEG_CONFR5_HSF_0 | JPEG_CONFR5_VSF_0);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	695a      	ldr	r2, [r3, #20]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 800966e:	615a      	str	r2, [r3, #20]

  /*Reset CONFR6 register*/
  hjpeg->Instance->CONFR6 =  0;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2200      	movs	r2, #0
 8009676:	619a      	str	r2, [r3, #24]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 2*/
  hjpeg->Instance->CONFR6 |= (JPEG_CONFR6_HSF_0 | JPEG_CONFR6_VSF_0);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	699a      	ldr	r2, [r3, #24]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8009686:	619a      	str	r2, [r3, #24]

  /*Reset CONFR7 register*/
  hjpeg->Instance->CONFR7 =  0;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2200      	movs	r2, #0
 800968e:	61da      	str	r2, [r3, #28]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 3*/
  hjpeg->Instance->CONFR7 |= (JPEG_CONFR7_HSF_0 | JPEG_CONFR7_VSF_0);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	69da      	ldr	r2, [r3, #28]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 800969e:	61da      	str	r2, [r3, #28]
}
 80096a0:	bf00      	nop
 80096a2:	371c      	adds	r7, #28
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096c4:	f003 0303 	and.w	r3, r3, #3
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d108      	bne.n	80096de <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	685a      	ldr	r2, [r3, #4]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f042 0208 	orr.w	r2, r2, #8
 80096da:	605a      	str	r2, [r3, #4]
 80096dc:	e007      	b.n	80096ee <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	685a      	ldr	r2, [r3, #4]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f022 0208 	bic.w	r2, r2, #8
 80096ec:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f022 0201 	bic.w	r2, r2, #1
 80096fc:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800970c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800971c:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800972c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800973c:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f042 0201 	orr.w	r2, r2, #1
 800974c:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009752:	f003 030c 	and.w	r3, r3, #12
 8009756:	2b08      	cmp	r3, #8
 8009758:	d108      	bne.n	800976c <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8009768:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800976a:	e00d      	b.n	8009788 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009770:	f003 030c 	and.w	r3, r3, #12
 8009774:	2b0c      	cmp	r3, #12
 8009776:	d107      	bne.n	8009788 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009786:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097a0:	f003 0303 	and.w	r3, r3, #3
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d125      	bne.n	80097f4 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d01e      	beq.n	80097f4 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	3304      	adds	r3, #4
 80097ba:	4619      	mov	r1, r3
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7fe feac 	bl	800851a <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	3304      	adds	r3, #4
 80097cc:	4619      	mov	r1, r3
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7ff f824 	bl	800881c <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097e2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80097f2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d116      	bne.n	800982e <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009806:	f003 0302 	and.w	r3, r3, #2
 800980a:	2b00      	cmp	r3, #0
 800980c:	d004      	beq.n	8009818 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800980e:	2108      	movs	r1, #8
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f988 	bl	8009b26 <JPEG_ReadInputData>
 8009816:	e00a      	b.n	800982e <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800981e:	f003 0304 	and.w	r3, r3, #4
 8009822:	2b00      	cmp	r3, #0
 8009824:	d003      	beq.n	800982e <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8009826:	2101      	movs	r1, #1
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 f97c 	bl	8009b26 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009832:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009836:	2b00      	cmp	r3, #0
 8009838:	d116      	bne.n	8009868 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009840:	f003 0308 	and.w	r3, r3, #8
 8009844:	2b00      	cmp	r3, #0
 8009846:	d004      	beq.n	8009852 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8009848:	2108      	movs	r1, #8
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f864 	bl	8009918 <JPEG_StoreOutputData>
 8009850:	e00a      	b.n	8009868 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009858:	f003 0310 	and.w	r3, r3, #16
 800985c:	2b00      	cmp	r3, #0
 800985e:	d003      	beq.n	8009868 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 8009860:	2101      	movs	r1, #1
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f858 	bl	8009918 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800986e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009872:	2b20      	cmp	r3, #32
 8009874:	d14b      	bne.n	800990e <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f022 0201 	bic.w	r2, r2, #1
 8009884:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800988a:	f003 030c 	and.w	r3, r3, #12
 800988e:	2b08      	cmp	r3, #8
 8009890:	d107      	bne.n	80098a2 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80098a0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80098b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00a      	beq.n	80098d0 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	69d9      	ldr	r1, [r3, #28]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098c2:	461a      	mov	r2, r3
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f7f7 fce3 	bl	8001290 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098d4:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098da:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2201      	movs	r2, #1
 80098ee:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f003 0303 	and.w	r3, r3, #3
 80098f8:	2b02      	cmp	r3, #2
 80098fa:	d103      	bne.n	8009904 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f7fe ff98 	bl	8008832 <HAL_JPEG_DecodeCpltCallback>
 8009902:	e002      	b.n	800990a <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f7f7 fcdf 	bl	80012c8 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800990a:	2301      	movs	r3, #1
 800990c:	e000      	b.n	8009910 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	440b      	add	r3, r1
 8009930:	429a      	cmp	r2, r3
 8009932:	d34b      	bcc.n	80099cc <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8009934:	2300      	movs	r3, #0
 8009936:	617b      	str	r3, [r7, #20]
 8009938:	e031      	b.n	800999e <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009940:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	69da      	ldr	r2, [r3, #28]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800994a:	4413      	add	r3, r2
 800994c:	68ba      	ldr	r2, [r7, #8]
 800994e:	b2d2      	uxtb	r2, r2
 8009950:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	0a19      	lsrs	r1, r3, #8
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	69da      	ldr	r2, [r3, #28]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800995e:	3301      	adds	r3, #1
 8009960:	4413      	add	r3, r2
 8009962:	b2ca      	uxtb	r2, r1
 8009964:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	0c19      	lsrs	r1, r3, #16
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	69da      	ldr	r2, [r3, #28]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009972:	3302      	adds	r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	b2ca      	uxtb	r2, r1
 8009978:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	0e19      	lsrs	r1, r3, #24
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	69da      	ldr	r2, [r3, #28]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009986:	3303      	adds	r3, #3
 8009988:	4413      	add	r3, r2
 800998a:	b2ca      	uxtb	r2, r1
 800998c:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009992:	1d1a      	adds	r2, r3, #4
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	3301      	adds	r3, #1
 800999c:	617b      	str	r3, [r7, #20]
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d3c9      	bcc.n	800993a <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ae:	429a      	cmp	r2, r3
 80099b0:	f040 80b5 	bne.w	8009b1e <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	69d9      	ldr	r1, [r3, #28]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099bc:	461a      	mov	r2, r3
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f7f7 fc66 	bl	8001290 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 80099ca:	e0a8      	b.n	8009b1e <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099d4:	429a      	cmp	r2, r3
 80099d6:	f240 80a2 	bls.w	8009b1e <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099e2:	1ad3      	subs	r3, r2, r3
 80099e4:	089b      	lsrs	r3, r3, #2
 80099e6:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 80099e8:	2300      	movs	r3, #0
 80099ea:	617b      	str	r3, [r7, #20]
 80099ec:	e031      	b.n	8009a52 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099f4:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	69da      	ldr	r2, [r3, #28]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099fe:	4413      	add	r3, r2
 8009a00:	68ba      	ldr	r2, [r7, #8]
 8009a02:	b2d2      	uxtb	r2, r2
 8009a04:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	0a19      	lsrs	r1, r3, #8
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	69da      	ldr	r2, [r3, #28]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a12:	3301      	adds	r3, #1
 8009a14:	4413      	add	r3, r2
 8009a16:	b2ca      	uxtb	r2, r1
 8009a18:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	0c19      	lsrs	r1, r3, #16
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	69da      	ldr	r2, [r3, #28]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a26:	3302      	adds	r3, #2
 8009a28:	4413      	add	r3, r2
 8009a2a:	b2ca      	uxtb	r2, r1
 8009a2c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	0e19      	lsrs	r1, r3, #24
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	69da      	ldr	r2, [r3, #28]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a3a:	3303      	adds	r3, #3
 8009a3c:	4413      	add	r3, r2
 8009a3e:	b2ca      	uxtb	r2, r1
 8009a40:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a46:	1d1a      	adds	r2, r3, #4
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	617b      	str	r3, [r7, #20]
 8009a52:	697a      	ldr	r2, [r7, #20]
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d3c9      	bcc.n	80099ee <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d10b      	bne.n	8009a7e <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	69d9      	ldr	r1, [r3, #28]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a6e:	461a      	mov	r2, r3
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7f7 fc0d 	bl	8001290 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8009a7c:	e04f      	b.n	8009b1e <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a90:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 8009a92:	2300      	movs	r3, #0
 8009a94:	617b      	str	r3, [r7, #20]
 8009a96:	e015      	b.n	8009ac4 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	f003 0303 	and.w	r3, r3, #3
 8009a9e:	00db      	lsls	r3, r3, #3
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	fa22 f103 	lsr.w	r1, r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	69da      	ldr	r2, [r3, #28]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aae:	4413      	add	r3, r2
 8009ab0:	b2ca      	uxtb	r2, r1
 8009ab2:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab8:	1c5a      	adds	r2, r3, #1
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	617b      	str	r3, [r7, #20]
 8009ac4:	697a      	ldr	r2, [r7, #20]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d3e5      	bcc.n	8009a98 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	69d9      	ldr	r1, [r3, #28]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7f7 fbda 	bl	8001290 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f1c3 0304 	rsb	r3, r3, #4
 8009ae8:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	617b      	str	r3, [r7, #20]
 8009aee:	e013      	b.n	8009b18 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	00db      	lsls	r3, r3, #3
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	fa22 f103 	lsr.w	r1, r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	69da      	ldr	r2, [r3, #28]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b02:	4413      	add	r3, r2
 8009b04:	b2ca      	uxtb	r2, r1
 8009b06:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b0c:	1c5a      	adds	r2, r3, #1
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	3301      	adds	r3, #1
 8009b16:	617b      	str	r3, [r7, #20]
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	2b03      	cmp	r3, #3
 8009b1c:	d9e8      	bls.n	8009af0 <JPEG_StoreOutputData+0x1d8>
}
 8009b1e:	bf00      	nop
 8009b20:	3718      	adds	r7, #24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b088      	sub	sp, #32
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8009b30:	2300      	movs	r3, #0
 8009b32:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d002      	beq.n	8009b42 <JPEG_ReadInputData+0x1c>
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d104      	bne.n	8009b4c <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8009b42:	2101      	movs	r1, #1
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f7fe fded 	bl	8008724 <HAL_JPEG_Pause>
 8009b4a:	e028      	b.n	8009b9e <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6a1b      	ldr	r3, [r3, #32]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d906      	bls.n	8009b66 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6a1b      	ldr	r3, [r3, #32]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	61fb      	str	r3, [r7, #28]
 8009b64:	e01b      	b.n	8009b9e <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d115      	bne.n	8009b9e <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a1b      	ldr	r3, [r3, #32]
 8009b76:	4619      	mov	r1, r3
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f7f7 fb69 	bl	8001250 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b82:	2b04      	cmp	r3, #4
 8009b84:	d905      	bls.n	8009b92 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b8a:	f023 0203 	bic.w	r2, r3, #3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b9c:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ba2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	f040 809f 	bne.w	8009cea <JPEG_ReadInputData+0x1c4>
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f000 809b 	beq.w	8009cea <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	089b      	lsrs	r3, r3, #2
 8009bb8:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 8009bba:	693a      	ldr	r2, [r7, #16]
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d335      	bcc.n	8009c2e <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	61bb      	str	r3, [r7, #24]
 8009bc6:	e02d      	b.n	8009c24 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a1b      	ldr	r3, [r3, #32]
 8009bcc:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	699a      	ldr	r2, [r3, #24]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	699a      	ldr	r2, [r3, #24]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	3301      	adds	r3, #1
 8009be2:	4413      	add	r3, r2
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009be8:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6999      	ldr	r1, [r3, #24]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	3302      	adds	r3, #2
 8009bf4:	440b      	add	r3, r1
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009bfa:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	699a      	ldr	r2, [r3, #24]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3303      	adds	r3, #3
 8009c06:	4413      	add	r3, r2
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009c10:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c12:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a1b      	ldr	r3, [r3, #32]
 8009c18:	1d1a      	adds	r2, r3, #4
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	3301      	adds	r3, #1
 8009c22:	61bb      	str	r3, [r7, #24]
 8009c24:	69ba      	ldr	r2, [r7, #24]
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d3cd      	bcc.n	8009bc8 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 8009c2c:	e05d      	b.n	8009cea <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d035      	beq.n	8009ca0 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 8009c34:	2300      	movs	r3, #0
 8009c36:	61bb      	str	r3, [r7, #24]
 8009c38:	e02d      	b.n	8009c96 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	699a      	ldr	r2, [r3, #24]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	4413      	add	r3, r2
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	699a      	ldr	r2, [r3, #24]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	3301      	adds	r3, #1
 8009c54:	4413      	add	r3, r2
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c5a:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6999      	ldr	r1, [r3, #24]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	3302      	adds	r3, #2
 8009c66:	440b      	add	r3, r1
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009c6c:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	699a      	ldr	r2, [r3, #24]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	3303      	adds	r3, #3
 8009c78:	4413      	add	r3, r2
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009c82:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c84:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	1d1a      	adds	r2, r3, #4
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	3301      	adds	r3, #1
 8009c94:	61bb      	str	r3, [r7, #24]
 8009c96:	69ba      	ldr	r2, [r7, #24]
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d3cd      	bcc.n	8009c3a <JPEG_ReadInputData+0x114>
}
 8009c9e:	e024      	b.n	8009cea <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	61bb      	str	r3, [r7, #24]
 8009ca8:	e017      	b.n	8009cda <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	699a      	ldr	r2, [r3, #24]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	f003 0303 	and.w	r3, r3, #3
 8009cbe:	00db      	lsls	r3, r3, #3
 8009cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a1b      	ldr	r3, [r3, #32]
 8009cce:	1c5a      	adds	r2, r3, #1
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 8009cd4:	69bb      	ldr	r3, [r7, #24]
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	61bb      	str	r3, [r7, #24]
 8009cda:	69ba      	ldr	r2, [r7, #24]
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d3e3      	bcc.n	8009caa <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	697a      	ldr	r2, [r7, #20]
 8009ce8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8009cea:	bf00      	nop
 8009cec:	3720      	adds	r7, #32
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
	...

08009cf4 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8009cf4:	b590      	push	{r4, r7, lr}
 8009cf6:	b087      	sub	sp, #28
 8009cf8:	af02      	add	r7, sp, #8
 8009cfa:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d02:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d0a:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d804      	bhi.n	8009d20 <JPEG_DMA_StartProcess+0x2c>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d901      	bls.n	8009d24 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 8009d20:	2301      	movs	r3, #1
 8009d22:	e074      	b.n	8009e0e <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d28:	4a3b      	ldr	r2, [pc, #236]	@ (8009e18 <JPEG_DMA_StartProcess+0x124>)
 8009d2a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d30:	4a3a      	ldr	r2, [pc, #232]	@ (8009e1c <JPEG_DMA_StartProcess+0x128>)
 8009d32:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d38:	4a39      	ldr	r2, [pc, #228]	@ (8009e20 <JPEG_DMA_StartProcess+0x12c>)
 8009d3a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d40:	4a36      	ldr	r2, [pc, #216]	@ (8009e1c <JPEG_DMA_StartProcess+0x128>)
 8009d42:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d48:	4a36      	ldr	r2, [pc, #216]	@ (8009e24 <JPEG_DMA_StartProcess+0x130>)
 8009d4a:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d002      	beq.n	8009d58 <JPEG_DMA_StartProcess+0x64>
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d107      	bne.n	8009d68 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d5c:	f043 0204 	orr.w	r2, r3, #4
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	e052      	b.n	8009e0e <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d70:	68f9      	ldr	r1, [r7, #12]
 8009d72:	fbb3 f1f1 	udiv	r1, r3, r1
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	fb00 f101 	mul.w	r1, r0, r1
 8009d7c:	1a5b      	subs	r3, r3, r1
 8009d7e:	1ad2      	subs	r2, r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d8c:	68b9      	ldr	r1, [r7, #8]
 8009d8e:	fbb3 f1f1 	udiv	r1, r3, r1
 8009d92:	68b8      	ldr	r0, [r7, #8]
 8009d94:	fb00 f101 	mul.w	r1, r0, r1
 8009d98:	1a5b      	subs	r3, r3, r1
 8009d9a:	1ad2      	subs	r2, r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	3344      	adds	r3, #68	@ 0x44
 8009daa:	4619      	mov	r1, r3
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	69db      	ldr	r3, [r3, #28]
 8009db0:	461c      	mov	r4, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009db6:	2201      	movs	r2, #1
 8009db8:	9200      	str	r2, [sp, #0]
 8009dba:	4622      	mov	r2, r4
 8009dbc:	f000 fbe2 	bl	800a584 <HAL_MDMA_Start_IT>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d007      	beq.n	8009dd6 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dca:	f043 0204 	orr.w	r2, r3, #4
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	e01b      	b.n	8009e0e <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	699b      	ldr	r3, [r3, #24]
 8009dde:	4619      	mov	r1, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	3340      	adds	r3, #64	@ 0x40
 8009de6:	461c      	mov	r4, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dec:	2201      	movs	r2, #1
 8009dee:	9200      	str	r2, [sp, #0]
 8009df0:	4622      	mov	r2, r4
 8009df2:	f000 fbc7 	bl	800a584 <HAL_MDMA_Start_IT>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d007      	beq.n	8009e0c <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e00:	f043 0204 	orr.w	r2, r3, #4
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e000      	b.n	8009e0e <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3714      	adds	r7, #20
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd90      	pop	{r4, r7, pc}
 8009e16:	bf00      	nop
 8009e18:	0800a127 	.word	0x0800a127
 8009e1c:	0800a315 	.word	0x0800a315
 8009e20:	0800a253 	.word	0x0800a253
 8009e24:	0800a365 	.word	0x0800a365

08009e28 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e34:	f003 0303 	and.w	r3, r3, #3
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d125      	bne.n	8009e88 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d01e      	beq.n	8009e88 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	4619      	mov	r1, r3
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f7fe fb62 	bl	800851a <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	3304      	adds	r3, #4
 8009e60:	4619      	mov	r1, r3
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7fe fcda 	bl	800881c <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e76:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e86:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e8e:	f003 0320 	and.w	r3, r3, #32
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d039      	beq.n	8009f0a <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e9a:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f022 0201 	bic.w	r2, r2, #1
 8009eb0:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009ec0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009ed0:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d104      	bne.n	8009eea <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f000 fbce 	bl	800a686 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d105      	bne.n	8009f04 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009efc:	4618      	mov	r0, r3
 8009efe:	f000 fbc2 	bl	800a686 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 8009f02:	e002      	b.n	8009f0a <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f804 	bl	8009f12 <JPEG_DMA_EndProcess>
}
 8009f0a:	bf00      	nop
 8009f0c:	3708      	adds	r7, #8
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b084      	sub	sp, #16
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	695b      	ldr	r3, [r3, #20]
 8009f26:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8009f2a:	1ad2      	subs	r2, r2, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d10a      	bne.n	8009f52 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	69d9      	ldr	r1, [r3, #28]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f44:	461a      	mov	r2, r3
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f7f7 f9a2 	bl	8001290 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f58:	f003 0310 	and.w	r3, r3, #16
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d134      	bne.n	8009fca <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00a      	beq.n	8009f7e <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	69d9      	ldr	r1, [r3, #28]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f70:	461a      	mov	r2, r3
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f7f7 f98c 	bl	8001290 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f022 0201 	bic.w	r2, r2, #1
 8009f8c:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f92:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f98:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f003 0303 	and.w	r3, r3, #3
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	d103      	bne.n	8009fc2 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f7fe fc39 	bl	8008832 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 8009fc0:	e00c      	b.n	8009fdc <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f7f7 f980 	bl	80012c8 <HAL_JPEG_EncodeCpltCallback>
}
 8009fc8:	e008      	b.n	8009fdc <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d102      	bne.n	8009fdc <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f804 	bl	8009fe4 <JPEG_DMA_PollResidualData>
}
 8009fdc:	bf00      	nop
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8009fec:	2310      	movs	r3, #16
 8009fee:	617b      	str	r3, [r7, #20]
 8009ff0:	e04f      	b.n	800a092 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ff6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d146      	bne.n	800a08c <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a004:	f003 0310 	and.w	r3, r3, #16
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d03f      	beq.n	800a08c <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a012:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	69da      	ldr	r2, [r3, #28]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a01c:	4413      	add	r3, r2
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	b2d2      	uxtb	r2, r2
 800a022:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	0a19      	lsrs	r1, r3, #8
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	69da      	ldr	r2, [r3, #28]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a030:	3301      	adds	r3, #1
 800a032:	4413      	add	r3, r2
 800a034:	b2ca      	uxtb	r2, r1
 800a036:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	0c19      	lsrs	r1, r3, #16
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	69da      	ldr	r2, [r3, #28]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a044:	3302      	adds	r3, #2
 800a046:	4413      	add	r3, r2
 800a048:	b2ca      	uxtb	r2, r1
 800a04a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	0e19      	lsrs	r1, r3, #24
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	69da      	ldr	r2, [r3, #28]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a058:	3303      	adds	r3, #3
 800a05a:	4413      	add	r3, r2
 800a05c:	b2ca      	uxtb	r2, r1
 800a05e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a064:	1d1a      	adds	r2, r3, #4
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a072:	429a      	cmp	r2, r3
 800a074:	d10a      	bne.n	800a08c <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	69d9      	ldr	r1, [r3, #28]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a07e:	461a      	mov	r2, r3
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f7f7 f905 	bl	8001290 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	3b01      	subs	r3, #1
 800a090:	617b      	str	r3, [r7, #20]
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1ac      	bne.n	8009ff2 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a09c:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0a4:	f003 0310 	and.w	r3, r3, #16
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d004      	beq.n	800a0b6 <JPEG_DMA_PollResidualData+0xd2>
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d133      	bne.n	800a11e <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f022 0201 	bic.w	r2, r2, #1
 800a0c4:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d00a      	beq.n	800a0e4 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	69d9      	ldr	r1, [r3, #28]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f7f7 f8d9 	bl	8001290 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0e8:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0ee:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	f003 0303 	and.w	r3, r3, #3
 800a10c:	2b02      	cmp	r3, #2
 800a10e:	d103      	bne.n	800a118 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7fe fb8e 	bl	8008832 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800a116:	e002      	b.n	800a11e <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f7f7 f8d5 	bl	80012c8 <HAL_JPEG_EncodeCpltCallback>
}
 800a11e:	bf00      	nop
 800a120:	3718      	adds	r7, #24
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800a126:	b590      	push	{r4, r7, lr}
 800a128:	b087      	sub	sp, #28
 800a12a:	af02      	add	r7, sp, #8
 800a12c:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a132:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a142:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a148:	f248 030c 	movw	r3, #32780	@ 0x800c
 800a14c:	4013      	ands	r3, r2
 800a14e:	2b0c      	cmp	r3, #12
 800a150:	d17c      	bne.n	800a24c <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a158:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	695b      	ldr	r3, [r3, #20]
 800a164:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800a168:	1ad2      	subs	r2, r2, r3
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6a1b      	ldr	r3, [r3, #32]
 800a172:	4619      	mov	r1, r3
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f7f7 f86b 	bl	8001250 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	429a      	cmp	r2, r3
 800a182:	d81f      	bhi.n	800a1c4 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10d      	bne.n	800a1a6 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a18e:	f043 0204 	orr.w	r2, r3, #4
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2206      	movs	r2, #6
 800a19a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f7fe fb51 	bl	8008846 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800a1a4:	e052      	b.n	800a24c <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ae:	68b9      	ldr	r1, [r7, #8]
 800a1b0:	fbb3 f1f1 	udiv	r1, r3, r1
 800a1b4:	68b8      	ldr	r0, [r7, #8]
 800a1b6:	fb00 f101 	mul.w	r1, r0, r1
 800a1ba:	1a5b      	subs	r3, r3, r1
 800a1bc:	1ad2      	subs	r2, r2, r3
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	629a      	str	r2, [r3, #40]	@ 0x28
 800a1c2:	e010      	b.n	800a1e6 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00c      	beq.n	800a1e6 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1d0:	f003 0303 	and.w	r3, r3, #3
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d006      	beq.n	800a1e6 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1dc:	089b      	lsrs	r3, r3, #2
 800a1de:	3301      	adds	r3, #1
 800a1e0:	009a      	lsls	r2, r3, #2
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d124      	bne.n	800a23c <JPEG_MDMAInCpltCallback+0x116>
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d020      	beq.n	800a23c <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	699b      	ldr	r3, [r3, #24]
 800a202:	4619      	mov	r1, r3
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	3340      	adds	r3, #64	@ 0x40
 800a20a:	461c      	mov	r4, r3
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a210:	2201      	movs	r2, #1
 800a212:	9200      	str	r2, [sp, #0]
 800a214:	4622      	mov	r2, r4
 800a216:	f000 f9b5 	bl	800a584 <HAL_MDMA_Start_IT>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00d      	beq.n	800a23c <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a224:	f043 0204 	orr.w	r2, r3, #4
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2206      	movs	r2, #6
 800a230:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f7fe fb06 	bl	8008846 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800a23a:	e007      	b.n	800a24c <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a24a:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 800a24c:	3714      	adds	r7, #20
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd90      	pop	{r4, r7, pc}

0800a252 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800a252:	b590      	push	{r4, r7, lr}
 800a254:	b087      	sub	sp, #28
 800a256:	af02      	add	r7, sp, #8
 800a258:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a25e:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a26e:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a274:	f248 030c 	movw	r3, #32780	@ 0x800c
 800a278:	4013      	ands	r3, r2
 800a27a:	2b0c      	cmp	r3, #12
 800a27c:	d147      	bne.n	800a30e <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a284:	f003 0320 	and.w	r3, r3, #32
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d138      	bne.n	800a2fe <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	695b      	ldr	r3, [r3, #20]
 800a296:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800a29a:	1ad2      	subs	r2, r2, r3
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	69d9      	ldr	r1, [r3, #28]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f7f6 fff0 	bl	8001290 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d120      	bne.n	800a2fe <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	3344      	adds	r3, #68	@ 0x44
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	69db      	ldr	r3, [r3, #28]
 800a2cc:	461c      	mov	r4, r3
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	9200      	str	r2, [sp, #0]
 800a2d6:	4622      	mov	r2, r4
 800a2d8:	f000 f954 	bl	800a584 <HAL_MDMA_Start_IT>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d00d      	beq.n	800a2fe <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2e6:	f043 0204 	orr.w	r2, r3, #4
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2206      	movs	r2, #6
 800a2f2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f7fe faa5 	bl	8008846 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800a2fc:	e007      	b.n	800a30e <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a30c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800a30e:	3714      	adds	r7, #20
 800a310:	46bd      	mov	sp, r7
 800a312:	bd90      	pop	{r4, r7, pc}

0800a314 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a320:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f022 0201 	bic.w	r2, r2, #1
 800a330:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a340:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2201      	movs	r2, #1
 800a346:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a34e:	f043 0204 	orr.w	r2, r3, #4
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f7fe fa75 	bl	8008846 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800a35c:	bf00      	nop
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a370:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a376:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d002      	beq.n	800a384 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f7ff fdc7 	bl	8009f12 <JPEG_DMA_EndProcess>
  }
}
 800a384:	bf00      	nop
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b08b      	sub	sp, #44	@ 0x2c
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800a394:	2300      	movs	r3, #0
 800a396:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	3350      	adds	r3, #80	@ 0x50
 800a39e:	61bb      	str	r3, [r7, #24]

  i = 0;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a3a4:	e042      	b.n	800a42c <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	61fb      	str	r3, [r7, #28]
 800a3b0:	e033      	b.n	800a41a <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	00db      	lsls	r3, r3, #3
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d103      	bne.n	800a3ce <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c8:	3364      	adds	r3, #100	@ 0x64
 800a3ca:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3cc:	e022      	b.n	800a414 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	2264      	movs	r2, #100	@ 0x64
 800a3d2:	fb02 f303 	mul.w	r3, r2, r3
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a3da:	6a38      	ldr	r0, [r7, #32]
 800a3dc:	69f9      	ldr	r1, [r7, #28]
 800a3de:	4401      	add	r1, r0
 800a3e0:	4818      	ldr	r0, [pc, #96]	@ (800a444 <JPEG_GetQuality+0xb8>)
 800a3e2:	5c41      	ldrb	r1, [r0, r1]
 800a3e4:	440a      	add	r2, r1
 800a3e6:	7812      	ldrb	r2, [r2, #0]
 800a3e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3ec:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2b64      	cmp	r3, #100	@ 0x64
 800a3f2:	d807      	bhi.n	800a404 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800a3fa:	085b      	lsrs	r3, r3, #1
 800a3fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3fe:	4413      	add	r3, r2
 800a400:	627b      	str	r3, [r7, #36]	@ 0x24
 800a402:	e007      	b.n	800a414 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800a404:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a40e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a410:	4413      	add	r3, r2
 800a412:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	3301      	adds	r3, #1
 800a418:	61fb      	str	r3, [r7, #28]
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	2b03      	cmp	r3, #3
 800a41e:	d9c8      	bls.n	800a3b2 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800a420:	6a3b      	ldr	r3, [r7, #32]
 800a422:	3304      	adds	r3, #4
 800a424:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	3304      	adds	r3, #4
 800a42a:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a42c:	6a3b      	ldr	r3, [r7, #32]
 800a42e:	2b3c      	cmp	r3, #60	@ 0x3c
 800a430:	d9b9      	bls.n	800a3a6 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800a432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a434:	099b      	lsrs	r3, r3, #6
}
 800a436:	4618      	mov	r0, r3
 800a438:	372c      	adds	r7, #44	@ 0x2c
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	08016284 	.word	0x08016284

0800a448 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a450:	f7f7 fffe 	bl	8002450 <HAL_GetTick>
 800a454:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d101      	bne.n	800a460 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	e03b      	b.n	800a4d8 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2202      	movs	r2, #2
 800a46c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	68da      	ldr	r2, [r3, #12]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f022 0201 	bic.w	r2, r2, #1
 800a47e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a480:	e00f      	b.n	800a4a2 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800a482:	f7f7 ffe5 	bl	8002450 <HAL_GetTick>
 800a486:	4602      	mov	r2, r0
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	1ad3      	subs	r3, r2, r3
 800a48c:	2b05      	cmp	r3, #5
 800a48e:	d908      	bls.n	800a4a2 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2240      	movs	r2, #64	@ 0x40
 800a494:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2203      	movs	r2, #3
 800a49a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e01a      	b.n	800a4d8 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	f003 0301 	and.w	r3, r3, #1
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1e8      	bne.n	800a482 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 fad3 	bl	800aa5c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b087      	sub	sp, #28
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e03e      	b.n	800a578 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a500:	2b01      	cmp	r3, #1
 800a502:	d101      	bne.n	800a508 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800a504:	2302      	movs	r3, #2
 800a506:	e037      	b.n	800a578 <HAL_MDMA_ConfigPostRequestMask+0x98>
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a516:	b2db      	uxtb	r3, r3
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d126      	bne.n	800a56a <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	691b      	ldr	r3, [r3, #16]
 800a522:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a526:	2b00      	cmp	r3, #0
 800a528:	d11c      	bne.n	800a564 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68ba      	ldr	r2, [r7, #8]
 800a530:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d108      	bne.n	800a552 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	691a      	ldr	r2, [r3, #16]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a54e:	611a      	str	r2, [r3, #16]
 800a550:	e00d      	b.n	800a56e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	691a      	ldr	r2, [r3, #16]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a560:	611a      	str	r2, [r3, #16]
 800a562:	e004      	b.n	800a56e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800a564:	2301      	movs	r3, #1
 800a566:	75fb      	strb	r3, [r7, #23]
 800a568:	e001      	b.n	800a56e <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2200      	movs	r2, #0
 800a572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a576:	7dfb      	ldrb	r3, [r7, #23]
}
 800a578:	4618      	mov	r0, r3
 800a57a:	371c      	adds	r7, #28
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b086      	sub	sp, #24
 800a588:	af02      	add	r7, sp, #8
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
 800a590:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d101      	bne.n	800a59c <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	e070      	b.n	800a67e <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d101      	bne.n	800a5aa <HAL_MDMA_Start_IT+0x26>
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	e069      	b.n	800a67e <HAL_MDMA_Start_IT+0xfa>
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d158      	bne.n	800a670 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2202      	movs	r2, #2
 800a5c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68da      	ldr	r2, [r3, #12]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f022 0201 	bic.w	r2, r2, #1
 800a5da:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	68b9      	ldr	r1, [r7, #8]
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f000 f9c8 	bl	800a97c <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68da      	ldr	r2, [r3, #12]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f042 0206 	orr.w	r2, r2, #6
 800a5fa:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a600:	2b00      	cmp	r3, #0
 800a602:	d007      	beq.n	800a614 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	68da      	ldr	r2, [r3, #12]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f042 0210 	orr.w	r2, r2, #16
 800a612:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d007      	beq.n	800a62c <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	68da      	ldr	r2, [r3, #12]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f042 0208 	orr.w	r2, r2, #8
 800a62a:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a630:	2b00      	cmp	r3, #0
 800a632:	d007      	beq.n	800a644 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68da      	ldr	r2, [r3, #12]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f042 0220 	orr.w	r2, r2, #32
 800a642:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68da      	ldr	r2, [r3, #12]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f042 0201 	orr.w	r2, r2, #1
 800a652:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a65c:	d10e      	bne.n	800a67c <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	68da      	ldr	r2, [r3, #12]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a66c:	60da      	str	r2, [r3, #12]
 800a66e:	e005      	b.n	800a67c <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2200      	movs	r2, #0
 800a674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 800a678:	2302      	movs	r3, #2
 800a67a:	e000      	b.n	800a67e <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800a686:	b480      	push	{r7}
 800a688:	b083      	sub	sp, #12
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d101      	bne.n	800a698 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	e017      	b.n	800a6c8 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d004      	beq.n	800a6ae <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2280      	movs	r2, #128	@ 0x80
 800a6a8:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e00c      	b.n	800a6c8 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2204      	movs	r2, #4
 800a6b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	68da      	ldr	r2, [r3, #12]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f022 0201 	bic.w	r2, r2, #1
 800a6c4:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b086      	sub	sp, #24
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a6e0:	4b91      	ldr	r3, [pc, #580]	@ (800a928 <HAL_MDMA_IRQHandler+0x254>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a91      	ldr	r2, [pc, #580]	@ (800a92c <HAL_MDMA_IRQHandler+0x258>)
 800a6e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ea:	0a9b      	lsrs	r3, r3, #10
 800a6ec:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	4b8e      	ldr	r3, [pc, #568]	@ (800a930 <HAL_MDMA_IRQHandler+0x25c>)
 800a6f6:	4413      	add	r3, r2
 800a6f8:	099b      	lsrs	r3, r3, #6
 800a6fa:	f003 031f 	and.w	r3, r3, #31
 800a6fe:	2201      	movs	r2, #1
 800a700:	fa02 f303 	lsl.w	r3, r2, r3
 800a704:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800a706:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	4013      	ands	r3, r2
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 812d 	beq.w	800a970 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f003 0301 	and.w	r3, r3, #1
 800a720:	2b00      	cmp	r3, #0
 800a722:	d054      	beq.n	800a7ce <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	f003 0302 	and.w	r3, r3, #2
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d04d      	beq.n	800a7ce <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68da      	ldr	r2, [r3, #12]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f022 0202 	bic.w	r2, r2, #2
 800a740:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a750:	2b00      	cmp	r3, #0
 800a752:	d106      	bne.n	800a762 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a758:	f043 0201 	orr.w	r2, r3, #1
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	669a      	str	r2, [r3, #104]	@ 0x68
 800a760:	e005      	b.n	800a76e <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a766:	f043 0202 	orr.w	r2, r3, #2
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a774:	2b00      	cmp	r3, #0
 800a776:	d005      	beq.n	800a784 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a77c:	f043 0204 	orr.w	r2, r3, #4
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d005      	beq.n	800a79a <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a792:	f043 0208 	orr.w	r2, r3, #8
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d005      	beq.n	800a7b0 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7a8:	f043 0210 	orr.w	r2, r3, #16
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d005      	beq.n	800a7c6 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7be:	f043 0220 	orr.w	r2, r3, #32
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 0310 	and.w	r3, r3, #16
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d012      	beq.n	800a802 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	f003 0320 	and.w	r3, r3, #32
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00b      	beq.n	800a802 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2210      	movs	r2, #16
 800a7f0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d003      	beq.n	800a802 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 0308 	and.w	r3, r3, #8
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d012      	beq.n	800a836 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	f003 0310 	and.w	r3, r3, #16
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00b      	beq.n	800a836 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	2208      	movs	r2, #8
 800a824:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d003      	beq.n	800a836 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f003 0304 	and.w	r3, r3, #4
 800a840:	2b00      	cmp	r3, #0
 800a842:	d012      	beq.n	800a86a <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	f003 0308 	and.w	r3, r3, #8
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00b      	beq.n	800a86a <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2204      	movs	r2, #4
 800a858:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d003      	beq.n	800a86a <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f003 0302 	and.w	r3, r3, #2
 800a874:	2b00      	cmp	r3, #0
 800a876:	d039      	beq.n	800a8ec <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	f003 0304 	and.w	r3, r3, #4
 800a882:	2b00      	cmp	r3, #0
 800a884:	d032      	beq.n	800a8ec <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68da      	ldr	r2, [r3, #12]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800a894:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	2b04      	cmp	r3, #4
 800a8a0:	d110      	bne.n	800a8c4 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d05c      	beq.n	800a974 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	4798      	blx	r3
        }
        return;
 800a8c2:	e057      	b.n	800a974 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d003      	beq.n	800a8ec <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d040      	beq.n	800a976 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2204      	movs	r2, #4
 800a8f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68da      	ldr	r2, [r3, #12]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f022 0201 	bic.w	r2, r2, #1
 800a90a:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	3301      	adds	r3, #1
 800a910:	60bb      	str	r3, [r7, #8]
 800a912:	697a      	ldr	r2, [r7, #20]
 800a914:	429a      	cmp	r2, r3
 800a916:	d30d      	bcc.n	800a934 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	f003 0301 	and.w	r3, r3, #1
 800a922:	2b00      	cmp	r3, #0
 800a924:	d1f2      	bne.n	800a90c <HAL_MDMA_IRQHandler+0x238>
 800a926:	e006      	b.n	800a936 <HAL_MDMA_IRQHandler+0x262>
 800a928:	24000008 	.word	0x24000008
 800a92c:	1b4e81b5 	.word	0x1b4e81b5
 800a930:	adffffc0 	.word	0xadffffc0
        break;
 800a934:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	f003 0301 	and.w	r3, r3, #1
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d004      	beq.n	800a956 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2203      	movs	r2, #3
 800a950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a954:	e003      	b.n	800a95e <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2201      	movs	r2, #1
 800a95a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a962:	2b00      	cmp	r3, #0
 800a964:	d007      	beq.n	800a976 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	4798      	blx	r3
 800a96e:	e002      	b.n	800a976 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800a970:	bf00      	nop
 800a972:	e000      	b.n	800a976 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800a974:	bf00      	nop
    }
  }
}
 800a976:	3718      	adds	r7, #24
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b087      	sub	sp, #28
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
 800a988:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	695a      	ldr	r2, [r3, #20]
 800a990:	4b31      	ldr	r3, [pc, #196]	@ (800aa58 <MDMA_SetConfig+0xdc>)
 800a992:	4013      	ands	r3, r2
 800a994:	683a      	ldr	r2, [r7, #0]
 800a996:	f3c2 0110 	ubfx	r1, r2, #0, #17
 800a99a:	68fa      	ldr	r2, [r7, #12]
 800a99c:	6812      	ldr	r2, [r2, #0]
 800a99e:	430b      	orrs	r3, r1
 800a9a0:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	695b      	ldr	r3, [r3, #20]
 800a9a8:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800a9ac:	6a3b      	ldr	r3, [r7, #32]
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	051a      	lsls	r2, r3, #20
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	430a      	orrs	r2, r1
 800a9b8:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	221f      	movs	r2, #31
 800a9c0:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	68ba      	ldr	r2, [r7, #8]
 800a9d0:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800a9d8:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9e0:	d002      	beq.n	800a9e8 <MDMA_SetConfig+0x6c>
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d108      	bne.n	800a9fa <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a9f6:	629a      	str	r2, [r3, #40]	@ 0x28
 800a9f8:	e007      	b.n	800aa0a <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800aa08:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800aa10:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa18:	d002      	beq.n	800aa20 <MDMA_SetConfig+0xa4>
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d108      	bne.n	800aa32 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800aa2e:	629a      	str	r2, [r3, #40]	@ 0x28
 800aa30:	e007      	b.n	800aa42 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800aa40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800aa4c:	bf00      	nop
 800aa4e:	371c      	adds	r7, #28
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr
 800aa58:	fffe0000 	.word	0xfffe0000

0800aa5c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	68d9      	ldr	r1, [r3, #12]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	691a      	ldr	r2, [r3, #16]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	430a      	orrs	r2, r1
 800aa72:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	695a      	ldr	r2, [r3, #20]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	699b      	ldr	r3, [r3, #24]
 800aa7c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800aa82:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6a1b      	ldr	r3, [r3, #32]
 800aa88:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800aa8e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa94:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800aa9a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaa0:	3b01      	subs	r3, #1
 800aaa2:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800aaa4:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800aab0:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800aab2:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aabc:	d107      	bne.n	800aace <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	691a      	ldr	r2, [r3, #16]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800aacc:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	2200      	movs	r2, #0
 800aad4:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aada:	2b00      	cmp	r3, #0
 800aadc:	da11      	bge.n	800ab02 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	695a      	ldr	r2, [r3, #20]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800aaec:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaf2:	425b      	negs	r3, r3
 800aaf4:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	b292      	uxth	r2, r2
 800aafe:	621a      	str	r2, [r3, #32]
 800ab00:	e006      	b.n	800ab10 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab06:	461a      	mov	r2, r3
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	b292      	uxth	r2, r2
 800ab0e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	da15      	bge.n	800ab44 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	695a      	ldr	r2, [r3, #20]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800ab26:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab2c:	425b      	negs	r3, r3
 800ab2e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	6a19      	ldr	r1, [r3, #32]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	041a      	lsls	r2, r3, #16
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	430a      	orrs	r2, r1
 800ab40:	621a      	str	r2, [r3, #32]
 800ab42:	e009      	b.n	800ab58 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6a19      	ldr	r1, [r3, #32]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab4e:	041a      	lsls	r2, r3, #16
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	430a      	orrs	r2, r1
 800ab56:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab60:	d006      	beq.n	800ab70 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	685a      	ldr	r2, [r3, #4]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	b2d2      	uxtb	r2, r2
 800ab6c:	629a      	str	r2, [r3, #40]	@ 0x28
 800ab6e:	e003      	b.n	800ab78 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2200      	movs	r2, #0
 800ab76:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800ab80:	bf00      	nop
 800ab82:	3714      	adds	r7, #20
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b086      	sub	sp, #24
 800ab90:	af02      	add	r7, sp, #8
 800ab92:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d101      	bne.n	800ab9e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e0fe      	b.n	800ad9c <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d106      	bne.n	800abb8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f00a f9d8 	bl	8014f68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2203      	movs	r2, #3
 800abbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4618      	mov	r0, r3
 800abc6:	f006 fd7e 	bl	80116c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6818      	ldr	r0, [r3, #0]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	7c1a      	ldrb	r2, [r3, #16]
 800abd2:	f88d 2000 	strb.w	r2, [sp]
 800abd6:	3304      	adds	r3, #4
 800abd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800abda:	f006 fc4f 	bl	801147c <USB_CoreInit>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d005      	beq.n	800abf0 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2202      	movs	r2, #2
 800abe8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	e0d5      	b.n	800ad9c <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2100      	movs	r1, #0
 800abf6:	4618      	mov	r0, r3
 800abf8:	f006 fd76 	bl	80116e8 <USB_SetCurrentMode>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d005      	beq.n	800ac0e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2202      	movs	r2, #2
 800ac06:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e0c6      	b.n	800ad9c <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac0e:	2300      	movs	r3, #0
 800ac10:	73fb      	strb	r3, [r7, #15]
 800ac12:	e04a      	b.n	800acaa <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ac14:	7bfa      	ldrb	r2, [r7, #15]
 800ac16:	6879      	ldr	r1, [r7, #4]
 800ac18:	4613      	mov	r3, r2
 800ac1a:	00db      	lsls	r3, r3, #3
 800ac1c:	4413      	add	r3, r2
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	440b      	add	r3, r1
 800ac22:	3315      	adds	r3, #21
 800ac24:	2201      	movs	r2, #1
 800ac26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ac28:	7bfa      	ldrb	r2, [r7, #15]
 800ac2a:	6879      	ldr	r1, [r7, #4]
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	00db      	lsls	r3, r3, #3
 800ac30:	4413      	add	r3, r2
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	440b      	add	r3, r1
 800ac36:	3314      	adds	r3, #20
 800ac38:	7bfa      	ldrb	r2, [r7, #15]
 800ac3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ac3c:	7bfa      	ldrb	r2, [r7, #15]
 800ac3e:	7bfb      	ldrb	r3, [r7, #15]
 800ac40:	b298      	uxth	r0, r3
 800ac42:	6879      	ldr	r1, [r7, #4]
 800ac44:	4613      	mov	r3, r2
 800ac46:	00db      	lsls	r3, r3, #3
 800ac48:	4413      	add	r3, r2
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	440b      	add	r3, r1
 800ac4e:	332e      	adds	r3, #46	@ 0x2e
 800ac50:	4602      	mov	r2, r0
 800ac52:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ac54:	7bfa      	ldrb	r2, [r7, #15]
 800ac56:	6879      	ldr	r1, [r7, #4]
 800ac58:	4613      	mov	r3, r2
 800ac5a:	00db      	lsls	r3, r3, #3
 800ac5c:	4413      	add	r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	440b      	add	r3, r1
 800ac62:	3318      	adds	r3, #24
 800ac64:	2200      	movs	r2, #0
 800ac66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ac68:	7bfa      	ldrb	r2, [r7, #15]
 800ac6a:	6879      	ldr	r1, [r7, #4]
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	00db      	lsls	r3, r3, #3
 800ac70:	4413      	add	r3, r2
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	440b      	add	r3, r1
 800ac76:	331c      	adds	r3, #28
 800ac78:	2200      	movs	r2, #0
 800ac7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ac7c:	7bfa      	ldrb	r2, [r7, #15]
 800ac7e:	6879      	ldr	r1, [r7, #4]
 800ac80:	4613      	mov	r3, r2
 800ac82:	00db      	lsls	r3, r3, #3
 800ac84:	4413      	add	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	440b      	add	r3, r1
 800ac8a:	3320      	adds	r3, #32
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ac90:	7bfa      	ldrb	r2, [r7, #15]
 800ac92:	6879      	ldr	r1, [r7, #4]
 800ac94:	4613      	mov	r3, r2
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	4413      	add	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	440b      	add	r3, r1
 800ac9e:	3324      	adds	r3, #36	@ 0x24
 800aca0:	2200      	movs	r2, #0
 800aca2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aca4:	7bfb      	ldrb	r3, [r7, #15]
 800aca6:	3301      	adds	r3, #1
 800aca8:	73fb      	strb	r3, [r7, #15]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	791b      	ldrb	r3, [r3, #4]
 800acae:	7bfa      	ldrb	r2, [r7, #15]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d3af      	bcc.n	800ac14 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800acb4:	2300      	movs	r3, #0
 800acb6:	73fb      	strb	r3, [r7, #15]
 800acb8:	e044      	b.n	800ad44 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800acba:	7bfa      	ldrb	r2, [r7, #15]
 800acbc:	6879      	ldr	r1, [r7, #4]
 800acbe:	4613      	mov	r3, r2
 800acc0:	00db      	lsls	r3, r3, #3
 800acc2:	4413      	add	r3, r2
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	440b      	add	r3, r1
 800acc8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800accc:	2200      	movs	r2, #0
 800acce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800acd0:	7bfa      	ldrb	r2, [r7, #15]
 800acd2:	6879      	ldr	r1, [r7, #4]
 800acd4:	4613      	mov	r3, r2
 800acd6:	00db      	lsls	r3, r3, #3
 800acd8:	4413      	add	r3, r2
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	440b      	add	r3, r1
 800acde:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800ace2:	7bfa      	ldrb	r2, [r7, #15]
 800ace4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ace6:	7bfa      	ldrb	r2, [r7, #15]
 800ace8:	6879      	ldr	r1, [r7, #4]
 800acea:	4613      	mov	r3, r2
 800acec:	00db      	lsls	r3, r3, #3
 800acee:	4413      	add	r3, r2
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	440b      	add	r3, r1
 800acf4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800acf8:	2200      	movs	r2, #0
 800acfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800acfc:	7bfa      	ldrb	r2, [r7, #15]
 800acfe:	6879      	ldr	r1, [r7, #4]
 800ad00:	4613      	mov	r3, r2
 800ad02:	00db      	lsls	r3, r3, #3
 800ad04:	4413      	add	r3, r2
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	440b      	add	r3, r1
 800ad0a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800ad0e:	2200      	movs	r2, #0
 800ad10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ad12:	7bfa      	ldrb	r2, [r7, #15]
 800ad14:	6879      	ldr	r1, [r7, #4]
 800ad16:	4613      	mov	r3, r2
 800ad18:	00db      	lsls	r3, r3, #3
 800ad1a:	4413      	add	r3, r2
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	440b      	add	r3, r1
 800ad20:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ad24:	2200      	movs	r2, #0
 800ad26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ad28:	7bfa      	ldrb	r2, [r7, #15]
 800ad2a:	6879      	ldr	r1, [r7, #4]
 800ad2c:	4613      	mov	r3, r2
 800ad2e:	00db      	lsls	r3, r3, #3
 800ad30:	4413      	add	r3, r2
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	440b      	add	r3, r1
 800ad36:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
 800ad40:	3301      	adds	r3, #1
 800ad42:	73fb      	strb	r3, [r7, #15]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	791b      	ldrb	r3, [r3, #4]
 800ad48:	7bfa      	ldrb	r2, [r7, #15]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d3b5      	bcc.n	800acba <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6818      	ldr	r0, [r3, #0]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	7c1a      	ldrb	r2, [r3, #16]
 800ad56:	f88d 2000 	strb.w	r2, [sp]
 800ad5a:	3304      	adds	r3, #4
 800ad5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad5e:	f006 fd0f 	bl	8011780 <USB_DevInit>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d005      	beq.n	800ad74 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2202      	movs	r2, #2
 800ad6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800ad70:	2301      	movs	r3, #1
 800ad72:	e013      	b.n	800ad9c <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	7b1b      	ldrb	r3, [r3, #12]
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d102      	bne.n	800ad90 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f001 f96e 	bl	800c06c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f007 fd52 	bl	801283e <USB_DevDisconnect>

  return HAL_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3710      	adds	r7, #16
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d101      	bne.n	800adc0 <HAL_PCD_Start+0x1c>
 800adbc:	2302      	movs	r3, #2
 800adbe:	e022      	b.n	800ae06 <HAL_PCD_Start+0x62>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2201      	movs	r2, #1
 800adc4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800add0:	2b00      	cmp	r3, #0
 800add2:	d009      	beq.n	800ade8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800add8:	2b01      	cmp	r3, #1
 800adda:	d105      	bne.n	800ade8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ade0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4618      	mov	r0, r3
 800adee:	f006 fc59 	bl	80116a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4618      	mov	r0, r3
 800adf8:	f007 fd00 	bl	80127fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ae0e:	b590      	push	{r4, r7, lr}
 800ae10:	b08d      	sub	sp, #52	@ 0x34
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae1c:	6a3b      	ldr	r3, [r7, #32]
 800ae1e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f007 fdbe 	bl	80129a6 <USB_GetMode>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f040 84b9 	bne.w	800b7a4 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4618      	mov	r0, r3
 800ae38:	f007 fd22 	bl	8012880 <USB_ReadInterrupts>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f000 84af 	beq.w	800b7a2 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	0a1b      	lsrs	r3, r3, #8
 800ae4e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f007 fd0f 	bl	8012880 <USB_ReadInterrupts>
 800ae62:	4603      	mov	r3, r0
 800ae64:	f003 0302 	and.w	r3, r3, #2
 800ae68:	2b02      	cmp	r3, #2
 800ae6a:	d107      	bne.n	800ae7c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	695a      	ldr	r2, [r3, #20]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f002 0202 	and.w	r2, r2, #2
 800ae7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4618      	mov	r0, r3
 800ae82:	f007 fcfd 	bl	8012880 <USB_ReadInterrupts>
 800ae86:	4603      	mov	r3, r0
 800ae88:	f003 0310 	and.w	r3, r3, #16
 800ae8c:	2b10      	cmp	r3, #16
 800ae8e:	d161      	bne.n	800af54 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	699a      	ldr	r2, [r3, #24]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f022 0210 	bic.w	r2, r2, #16
 800ae9e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800aea0:	6a3b      	ldr	r3, [r7, #32]
 800aea2:	6a1b      	ldr	r3, [r3, #32]
 800aea4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800aea6:	69bb      	ldr	r3, [r7, #24]
 800aea8:	f003 020f 	and.w	r2, r3, #15
 800aeac:	4613      	mov	r3, r2
 800aeae:	00db      	lsls	r3, r3, #3
 800aeb0:	4413      	add	r3, r2
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	4413      	add	r3, r2
 800aebc:	3304      	adds	r3, #4
 800aebe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800aec0:	69bb      	ldr	r3, [r7, #24]
 800aec2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800aec6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aeca:	d124      	bne.n	800af16 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800aecc:	69ba      	ldr	r2, [r7, #24]
 800aece:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800aed2:	4013      	ands	r3, r2
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d035      	beq.n	800af44 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	091b      	lsrs	r3, r3, #4
 800aee0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800aee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	461a      	mov	r2, r3
 800aeea:	6a38      	ldr	r0, [r7, #32]
 800aeec:	f007 fb34 	bl	8012558 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	68da      	ldr	r2, [r3, #12]
 800aef4:	69bb      	ldr	r3, [r7, #24]
 800aef6:	091b      	lsrs	r3, r3, #4
 800aef8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aefc:	441a      	add	r2, r3
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	695a      	ldr	r2, [r3, #20]
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	091b      	lsrs	r3, r3, #4
 800af0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af0e:	441a      	add	r2, r3
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	615a      	str	r2, [r3, #20]
 800af14:	e016      	b.n	800af44 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800af1c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800af20:	d110      	bne.n	800af44 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800af28:	2208      	movs	r2, #8
 800af2a:	4619      	mov	r1, r3
 800af2c:	6a38      	ldr	r0, [r7, #32]
 800af2e:	f007 fb13 	bl	8012558 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	695a      	ldr	r2, [r3, #20]
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	091b      	lsrs	r3, r3, #4
 800af3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af3e:	441a      	add	r2, r3
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	699a      	ldr	r2, [r3, #24]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f042 0210 	orr.w	r2, r2, #16
 800af52:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4618      	mov	r0, r3
 800af5a:	f007 fc91 	bl	8012880 <USB_ReadInterrupts>
 800af5e:	4603      	mov	r3, r0
 800af60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800af64:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800af68:	f040 80a7 	bne.w	800b0ba <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800af6c:	2300      	movs	r3, #0
 800af6e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4618      	mov	r0, r3
 800af76:	f007 fc96 	bl	80128a6 <USB_ReadDevAllOutEpInterrupt>
 800af7a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800af7c:	e099      	b.n	800b0b2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800af7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af80:	f003 0301 	and.w	r3, r3, #1
 800af84:	2b00      	cmp	r3, #0
 800af86:	f000 808e 	beq.w	800b0a6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af90:	b2d2      	uxtb	r2, r2
 800af92:	4611      	mov	r1, r2
 800af94:	4618      	mov	r0, r3
 800af96:	f007 fcba 	bl	801290e <USB_ReadDevOutEPInterrupt>
 800af9a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	f003 0301 	and.w	r3, r3, #1
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00c      	beq.n	800afc0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800afa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa8:	015a      	lsls	r2, r3, #5
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	4413      	add	r3, r2
 800afae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afb2:	461a      	mov	r2, r3
 800afb4:	2301      	movs	r3, #1
 800afb6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800afb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 fed0 	bl	800bd60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	f003 0308 	and.w	r3, r3, #8
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d00c      	beq.n	800afe4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800afca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afcc:	015a      	lsls	r2, r3, #5
 800afce:	69fb      	ldr	r3, [r7, #28]
 800afd0:	4413      	add	r3, r2
 800afd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afd6:	461a      	mov	r2, r3
 800afd8:	2308      	movs	r3, #8
 800afda:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800afdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 ffa6 	bl	800bf30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	f003 0310 	and.w	r3, r3, #16
 800afea:	2b00      	cmp	r3, #0
 800afec:	d008      	beq.n	800b000 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800afee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff0:	015a      	lsls	r2, r3, #5
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	4413      	add	r3, r2
 800aff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800affa:	461a      	mov	r2, r3
 800affc:	2310      	movs	r3, #16
 800affe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	f003 0302 	and.w	r3, r3, #2
 800b006:	2b00      	cmp	r3, #0
 800b008:	d030      	beq.n	800b06c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b00a:	6a3b      	ldr	r3, [r7, #32]
 800b00c:	695b      	ldr	r3, [r3, #20]
 800b00e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b012:	2b80      	cmp	r3, #128	@ 0x80
 800b014:	d109      	bne.n	800b02a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	69fa      	ldr	r2, [r7, #28]
 800b020:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b024:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b028:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b02a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b02c:	4613      	mov	r3, r2
 800b02e:	00db      	lsls	r3, r3, #3
 800b030:	4413      	add	r3, r2
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	4413      	add	r3, r2
 800b03c:	3304      	adds	r3, #4
 800b03e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	78db      	ldrb	r3, [r3, #3]
 800b044:	2b01      	cmp	r3, #1
 800b046:	d108      	bne.n	800b05a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	2200      	movs	r2, #0
 800b04c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b050:	b2db      	uxtb	r3, r3
 800b052:	4619      	mov	r1, r3
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f00a f8ad 	bl	80151b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b05c:	015a      	lsls	r2, r3, #5
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	4413      	add	r3, r2
 800b062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b066:	461a      	mov	r2, r3
 800b068:	2302      	movs	r3, #2
 800b06a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	f003 0320 	and.w	r3, r3, #32
 800b072:	2b00      	cmp	r3, #0
 800b074:	d008      	beq.n	800b088 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b078:	015a      	lsls	r2, r3, #5
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	4413      	add	r3, r2
 800b07e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b082:	461a      	mov	r2, r3
 800b084:	2320      	movs	r3, #32
 800b086:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d009      	beq.n	800b0a6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b094:	015a      	lsls	r2, r3, #5
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	4413      	add	r3, r2
 800b09a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b09e:	461a      	mov	r2, r3
 800b0a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b0a4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ae:	085b      	lsrs	r3, r3, #1
 800b0b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f47f af62 	bne.w	800af7e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f007 fbde 	bl	8012880 <USB_ReadInterrupts>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b0ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b0ce:	f040 80db 	bne.w	800b288 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f007 fbff 	bl	80128da <USB_ReadDevAllInEpInterrupt>
 800b0dc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800b0e2:	e0cd      	b.n	800b280 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0e6:	f003 0301 	and.w	r3, r3, #1
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	f000 80c2 	beq.w	800b274 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0f6:	b2d2      	uxtb	r2, r2
 800b0f8:	4611      	mov	r1, r2
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f007 fc25 	bl	801294a <USB_ReadDevInEPInterrupt>
 800b100:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	f003 0301 	and.w	r3, r3, #1
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d057      	beq.n	800b1bc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b10e:	f003 030f 	and.w	r3, r3, #15
 800b112:	2201      	movs	r2, #1
 800b114:	fa02 f303 	lsl.w	r3, r2, r3
 800b118:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b120:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	43db      	mvns	r3, r3
 800b126:	69f9      	ldr	r1, [r7, #28]
 800b128:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b12c:	4013      	ands	r3, r2
 800b12e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b132:	015a      	lsls	r2, r3, #5
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	4413      	add	r3, r2
 800b138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b13c:	461a      	mov	r2, r3
 800b13e:	2301      	movs	r3, #1
 800b140:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	799b      	ldrb	r3, [r3, #6]
 800b146:	2b01      	cmp	r3, #1
 800b148:	d132      	bne.n	800b1b0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b14a:	6879      	ldr	r1, [r7, #4]
 800b14c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b14e:	4613      	mov	r3, r2
 800b150:	00db      	lsls	r3, r3, #3
 800b152:	4413      	add	r3, r2
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	440b      	add	r3, r1
 800b158:	3320      	adds	r3, #32
 800b15a:	6819      	ldr	r1, [r3, #0]
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b160:	4613      	mov	r3, r2
 800b162:	00db      	lsls	r3, r3, #3
 800b164:	4413      	add	r3, r2
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	4403      	add	r3, r0
 800b16a:	331c      	adds	r3, #28
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4419      	add	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b174:	4613      	mov	r3, r2
 800b176:	00db      	lsls	r3, r3, #3
 800b178:	4413      	add	r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	4403      	add	r3, r0
 800b17e:	3320      	adds	r3, #32
 800b180:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b184:	2b00      	cmp	r3, #0
 800b186:	d113      	bne.n	800b1b0 <HAL_PCD_IRQHandler+0x3a2>
 800b188:	6879      	ldr	r1, [r7, #4]
 800b18a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b18c:	4613      	mov	r3, r2
 800b18e:	00db      	lsls	r3, r3, #3
 800b190:	4413      	add	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	440b      	add	r3, r1
 800b196:	3324      	adds	r3, #36	@ 0x24
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d108      	bne.n	800b1b0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6818      	ldr	r0, [r3, #0]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	2101      	movs	r1, #1
 800b1ac:	f007 fc2e 	bl	8012a0c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f009 ff77 	bl	80150aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	f003 0308 	and.w	r3, r3, #8
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d008      	beq.n	800b1d8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1c8:	015a      	lsls	r2, r3, #5
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	2308      	movs	r3, #8
 800b1d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	f003 0310 	and.w	r3, r3, #16
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d008      	beq.n	800b1f4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e4:	015a      	lsls	r2, r3, #5
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	2310      	movs	r3, #16
 800b1f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d008      	beq.n	800b210 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b200:	015a      	lsls	r2, r3, #5
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	4413      	add	r3, r2
 800b206:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b20a:	461a      	mov	r2, r3
 800b20c:	2340      	movs	r3, #64	@ 0x40
 800b20e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	f003 0302 	and.w	r3, r3, #2
 800b216:	2b00      	cmp	r3, #0
 800b218:	d023      	beq.n	800b262 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b21a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b21c:	6a38      	ldr	r0, [r7, #32]
 800b21e:	f006 fc0d 	bl	8011a3c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b224:	4613      	mov	r3, r2
 800b226:	00db      	lsls	r3, r3, #3
 800b228:	4413      	add	r3, r2
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	3310      	adds	r3, #16
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	4413      	add	r3, r2
 800b232:	3304      	adds	r3, #4
 800b234:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	78db      	ldrb	r3, [r3, #3]
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d108      	bne.n	800b250 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	2200      	movs	r2, #0
 800b242:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b246:	b2db      	uxtb	r3, r3
 800b248:	4619      	mov	r1, r3
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f009 ffc4 	bl	80151d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b252:	015a      	lsls	r2, r3, #5
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	4413      	add	r3, r2
 800b258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b25c:	461a      	mov	r2, r3
 800b25e:	2302      	movs	r3, #2
 800b260:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d003      	beq.n	800b274 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b26c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 fcea 	bl	800bc48 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b276:	3301      	adds	r3, #1
 800b278:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27c:	085b      	lsrs	r3, r3, #1
 800b27e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b282:	2b00      	cmp	r3, #0
 800b284:	f47f af2e 	bne.w	800b0e4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4618      	mov	r0, r3
 800b28e:	f007 faf7 	bl	8012880 <USB_ReadInterrupts>
 800b292:	4603      	mov	r3, r0
 800b294:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b298:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b29c:	d122      	bne.n	800b2e4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b29e:	69fb      	ldr	r3, [r7, #28]
 800b2a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	69fa      	ldr	r2, [r7, #28]
 800b2a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b2ac:	f023 0301 	bic.w	r3, r3, #1
 800b2b0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d108      	bne.n	800b2ce <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 fef4 	bl	800c0b4 <HAL_PCDEx_LPM_Callback>
 800b2cc:	e002      	b.n	800b2d4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f009 ff62 	bl	8015198 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	695a      	ldr	r2, [r3, #20]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800b2e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f007 fac9 	bl	8012880 <USB_ReadInterrupts>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b2f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2f8:	d112      	bne.n	800b320 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b300:	689b      	ldr	r3, [r3, #8]
 800b302:	f003 0301 	and.w	r3, r3, #1
 800b306:	2b01      	cmp	r3, #1
 800b308:	d102      	bne.n	800b310 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f009 ff1e 	bl	801514c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	695a      	ldr	r2, [r3, #20]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800b31e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4618      	mov	r0, r3
 800b326:	f007 faab 	bl	8012880 <USB_ReadInterrupts>
 800b32a:	4603      	mov	r3, r0
 800b32c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b330:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b334:	d121      	bne.n	800b37a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	695a      	ldr	r2, [r3, #20]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800b344:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d111      	bne.n	800b374 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2201      	movs	r2, #1
 800b354:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b35e:	089b      	lsrs	r3, r3, #2
 800b360:	f003 020f 	and.w	r2, r3, #15
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b36a:	2101      	movs	r1, #1
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 fea1 	bl	800c0b4 <HAL_PCDEx_LPM_Callback>
 800b372:	e002      	b.n	800b37a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f009 fee9 	bl	801514c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4618      	mov	r0, r3
 800b380:	f007 fa7e 	bl	8012880 <USB_ReadInterrupts>
 800b384:	4603      	mov	r3, r0
 800b386:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b38a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b38e:	f040 80b7 	bne.w	800b500 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	69fa      	ldr	r2, [r7, #28]
 800b39c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b3a0:	f023 0301 	bic.w	r3, r3, #1
 800b3a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	2110      	movs	r1, #16
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f006 fb45 	bl	8011a3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3b6:	e046      	b.n	800b446 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ba:	015a      	lsls	r2, r3, #5
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	4413      	add	r3, r2
 800b3c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b3ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b3cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ce:	015a      	lsls	r2, r3, #5
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3dc:	0151      	lsls	r1, r2, #5
 800b3de:	69fa      	ldr	r2, [r7, #28]
 800b3e0:	440a      	add	r2, r1
 800b3e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b3ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ee:	015a      	lsls	r2, r3, #5
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b3fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b402:	015a      	lsls	r2, r3, #5
 800b404:	69fb      	ldr	r3, [r7, #28]
 800b406:	4413      	add	r3, r2
 800b408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b410:	0151      	lsls	r1, r2, #5
 800b412:	69fa      	ldr	r2, [r7, #28]
 800b414:	440a      	add	r2, r1
 800b416:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b41a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b41e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b422:	015a      	lsls	r2, r3, #5
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	4413      	add	r3, r2
 800b428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b430:	0151      	lsls	r1, r2, #5
 800b432:	69fa      	ldr	r2, [r7, #28]
 800b434:	440a      	add	r2, r1
 800b436:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b43a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b43e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b442:	3301      	adds	r3, #1
 800b444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	791b      	ldrb	r3, [r3, #4]
 800b44a:	461a      	mov	r2, r3
 800b44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b44e:	4293      	cmp	r3, r2
 800b450:	d3b2      	bcc.n	800b3b8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b458:	69db      	ldr	r3, [r3, #28]
 800b45a:	69fa      	ldr	r2, [r7, #28]
 800b45c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b460:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800b464:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	7bdb      	ldrb	r3, [r3, #15]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d016      	beq.n	800b49c <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b474:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b478:	69fa      	ldr	r2, [r7, #28]
 800b47a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b47e:	f043 030b 	orr.w	r3, r3, #11
 800b482:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b486:	69fb      	ldr	r3, [r7, #28]
 800b488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b48c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b48e:	69fa      	ldr	r2, [r7, #28]
 800b490:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b494:	f043 030b 	orr.w	r3, r3, #11
 800b498:	6453      	str	r3, [r2, #68]	@ 0x44
 800b49a:	e015      	b.n	800b4c8 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b49c:	69fb      	ldr	r3, [r7, #28]
 800b49e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4a2:	695a      	ldr	r2, [r3, #20]
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	f242 032b 	movw	r3, #8235	@ 0x202b
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b4b4:	69fb      	ldr	r3, [r7, #28]
 800b4b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	69fa      	ldr	r2, [r7, #28]
 800b4be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4c2:	f043 030b 	orr.w	r3, r3, #11
 800b4c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b4c8:	69fb      	ldr	r3, [r7, #28]
 800b4ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	69fa      	ldr	r2, [r7, #28]
 800b4d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4d6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b4da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6818      	ldr	r0, [r3, #0]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	f007 fa8e 	bl	8012a0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	695a      	ldr	r2, [r3, #20]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800b4fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4618      	mov	r0, r3
 800b506:	f007 f9bb 	bl	8012880 <USB_ReadInterrupts>
 800b50a:	4603      	mov	r3, r0
 800b50c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b510:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b514:	d123      	bne.n	800b55e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f007 fa52 	bl	80129c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4618      	mov	r0, r3
 800b526:	f006 fb02 	bl	8011b2e <USB_GetDevSpeed>
 800b52a:	4603      	mov	r3, r0
 800b52c:	461a      	mov	r2, r3
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681c      	ldr	r4, [r3, #0]
 800b536:	f001 fd9d 	bl	800d074 <HAL_RCC_GetHCLKFreq>
 800b53a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b540:	461a      	mov	r2, r3
 800b542:	4620      	mov	r0, r4
 800b544:	f006 f80c 	bl	8011560 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f009 fdd6 	bl	80150fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	695a      	ldr	r2, [r3, #20]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800b55c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4618      	mov	r0, r3
 800b564:	f007 f98c 	bl	8012880 <USB_ReadInterrupts>
 800b568:	4603      	mov	r3, r0
 800b56a:	f003 0308 	and.w	r3, r3, #8
 800b56e:	2b08      	cmp	r3, #8
 800b570:	d10a      	bne.n	800b588 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f009 fdb3 	bl	80150de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	695a      	ldr	r2, [r3, #20]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f002 0208 	and.w	r2, r2, #8
 800b586:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4618      	mov	r0, r3
 800b58e:	f007 f977 	bl	8012880 <USB_ReadInterrupts>
 800b592:	4603      	mov	r3, r0
 800b594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b598:	2b80      	cmp	r3, #128	@ 0x80
 800b59a:	d123      	bne.n	800b5e4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800b59c:	6a3b      	ldr	r3, [r7, #32]
 800b59e:	699b      	ldr	r3, [r3, #24]
 800b5a0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b5a4:	6a3b      	ldr	r3, [r7, #32]
 800b5a6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5ac:	e014      	b.n	800b5d8 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800b5ae:	6879      	ldr	r1, [r7, #4]
 800b5b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	00db      	lsls	r3, r3, #3
 800b5b6:	4413      	add	r3, r2
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	440b      	add	r3, r1
 800b5bc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d105      	bne.n	800b5d2 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800b5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 fb0a 	bl	800bbe6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	791b      	ldrb	r3, [r3, #4]
 800b5dc:	461a      	mov	r2, r3
 800b5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d3e4      	bcc.n	800b5ae <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f007 f949 	bl	8012880 <USB_ReadInterrupts>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b5f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5f8:	d13c      	bne.n	800b674 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5fe:	e02b      	b.n	800b658 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800b600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b602:	015a      	lsls	r2, r3, #5
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	4413      	add	r3, r2
 800b608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b610:	6879      	ldr	r1, [r7, #4]
 800b612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b614:	4613      	mov	r3, r2
 800b616:	00db      	lsls	r3, r3, #3
 800b618:	4413      	add	r3, r2
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	440b      	add	r3, r1
 800b61e:	3318      	adds	r3, #24
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	2b01      	cmp	r3, #1
 800b624:	d115      	bne.n	800b652 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800b626:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b628:	2b00      	cmp	r3, #0
 800b62a:	da12      	bge.n	800b652 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800b62c:	6879      	ldr	r1, [r7, #4]
 800b62e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b630:	4613      	mov	r3, r2
 800b632:	00db      	lsls	r3, r3, #3
 800b634:	4413      	add	r3, r2
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	440b      	add	r3, r1
 800b63a:	3317      	adds	r3, #23
 800b63c:	2201      	movs	r2, #1
 800b63e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800b640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b642:	b2db      	uxtb	r3, r3
 800b644:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	4619      	mov	r1, r3
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 faca 	bl	800bbe6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b654:	3301      	adds	r3, #1
 800b656:	627b      	str	r3, [r7, #36]	@ 0x24
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	791b      	ldrb	r3, [r3, #4]
 800b65c:	461a      	mov	r2, r3
 800b65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b660:	4293      	cmp	r3, r2
 800b662:	d3cd      	bcc.n	800b600 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	695a      	ldr	r2, [r3, #20]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800b672:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4618      	mov	r0, r3
 800b67a:	f007 f901 	bl	8012880 <USB_ReadInterrupts>
 800b67e:	4603      	mov	r3, r0
 800b680:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b684:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b688:	d156      	bne.n	800b738 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b68a:	2301      	movs	r3, #1
 800b68c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b68e:	e045      	b.n	800b71c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800b690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b692:	015a      	lsls	r2, r3, #5
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	4413      	add	r3, r2
 800b698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b6a0:	6879      	ldr	r1, [r7, #4]
 800b6a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	00db      	lsls	r3, r3, #3
 800b6a8:	4413      	add	r3, r2
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	440b      	add	r3, r1
 800b6ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d12e      	bne.n	800b716 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b6b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	da2b      	bge.n	800b716 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	0c1a      	lsrs	r2, r3, #16
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800b6c8:	4053      	eors	r3, r2
 800b6ca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d121      	bne.n	800b716 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800b6d2:	6879      	ldr	r1, [r7, #4]
 800b6d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	00db      	lsls	r3, r3, #3
 800b6da:	4413      	add	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	440b      	add	r3, r1
 800b6e0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800b6e8:	6a3b      	ldr	r3, [r7, #32]
 800b6ea:	699b      	ldr	r3, [r3, #24]
 800b6ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b6f0:	6a3b      	ldr	r3, [r7, #32]
 800b6f2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800b6f4:	6a3b      	ldr	r3, [r7, #32]
 800b6f6:	695b      	ldr	r3, [r3, #20]
 800b6f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d10a      	bne.n	800b716 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	69fa      	ldr	r2, [r7, #28]
 800b70a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b70e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b712:	6053      	str	r3, [r2, #4]
            break;
 800b714:	e008      	b.n	800b728 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b718:	3301      	adds	r3, #1
 800b71a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	791b      	ldrb	r3, [r3, #4]
 800b720:	461a      	mov	r2, r3
 800b722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b724:	4293      	cmp	r3, r2
 800b726:	d3b3      	bcc.n	800b690 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	695a      	ldr	r2, [r3, #20]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800b736:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4618      	mov	r0, r3
 800b73e:	f007 f89f 	bl	8012880 <USB_ReadInterrupts>
 800b742:	4603      	mov	r3, r0
 800b744:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b74c:	d10a      	bne.n	800b764 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f009 fd54 	bl	80151fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	695a      	ldr	r2, [r3, #20]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800b762:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4618      	mov	r0, r3
 800b76a:	f007 f889 	bl	8012880 <USB_ReadInterrupts>
 800b76e:	4603      	mov	r3, r0
 800b770:	f003 0304 	and.w	r3, r3, #4
 800b774:	2b04      	cmp	r3, #4
 800b776:	d115      	bne.n	800b7a4 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	f003 0304 	and.w	r3, r3, #4
 800b786:	2b00      	cmp	r3, #0
 800b788:	d002      	beq.n	800b790 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f009 fd44 	bl	8015218 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	6859      	ldr	r1, [r3, #4]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	69ba      	ldr	r2, [r7, #24]
 800b79c:	430a      	orrs	r2, r1
 800b79e:	605a      	str	r2, [r3, #4]
 800b7a0:	e000      	b.n	800b7a4 <HAL_PCD_IRQHandler+0x996>
      return;
 800b7a2:	bf00      	nop
    }
  }
}
 800b7a4:	3734      	adds	r7, #52	@ 0x34
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd90      	pop	{r4, r7, pc}

0800b7aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b082      	sub	sp, #8
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d101      	bne.n	800b7c4 <HAL_PCD_SetAddress+0x1a>
 800b7c0:	2302      	movs	r3, #2
 800b7c2:	e012      	b.n	800b7ea <HAL_PCD_SetAddress+0x40>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	78fa      	ldrb	r2, [r7, #3]
 800b7d0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	78fa      	ldrb	r2, [r7, #3]
 800b7d8:	4611      	mov	r1, r2
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f006 ffe8 	bl	80127b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b7e8:	2300      	movs	r3, #0
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3708      	adds	r7, #8
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b084      	sub	sp, #16
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
 800b7fa:	4608      	mov	r0, r1
 800b7fc:	4611      	mov	r1, r2
 800b7fe:	461a      	mov	r2, r3
 800b800:	4603      	mov	r3, r0
 800b802:	70fb      	strb	r3, [r7, #3]
 800b804:	460b      	mov	r3, r1
 800b806:	803b      	strh	r3, [r7, #0]
 800b808:	4613      	mov	r3, r2
 800b80a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800b80c:	2300      	movs	r3, #0
 800b80e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b810:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b814:	2b00      	cmp	r3, #0
 800b816:	da0f      	bge.n	800b838 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b818:	78fb      	ldrb	r3, [r7, #3]
 800b81a:	f003 020f 	and.w	r2, r3, #15
 800b81e:	4613      	mov	r3, r2
 800b820:	00db      	lsls	r3, r3, #3
 800b822:	4413      	add	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	3310      	adds	r3, #16
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	4413      	add	r3, r2
 800b82c:	3304      	adds	r3, #4
 800b82e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2201      	movs	r2, #1
 800b834:	705a      	strb	r2, [r3, #1]
 800b836:	e00f      	b.n	800b858 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b838:	78fb      	ldrb	r3, [r7, #3]
 800b83a:	f003 020f 	and.w	r2, r3, #15
 800b83e:	4613      	mov	r3, r2
 800b840:	00db      	lsls	r3, r3, #3
 800b842:	4413      	add	r3, r2
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	4413      	add	r3, r2
 800b84e:	3304      	adds	r3, #4
 800b850:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2200      	movs	r2, #0
 800b856:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b858:	78fb      	ldrb	r3, [r7, #3]
 800b85a:	f003 030f 	and.w	r3, r3, #15
 800b85e:	b2da      	uxtb	r2, r3
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800b864:	883b      	ldrh	r3, [r7, #0]
 800b866:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	78ba      	ldrb	r2, [r7, #2]
 800b872:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	785b      	ldrb	r3, [r3, #1]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d004      	beq.n	800b886 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	461a      	mov	r2, r3
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b886:	78bb      	ldrb	r3, [r7, #2]
 800b888:	2b02      	cmp	r3, #2
 800b88a:	d102      	bne.n	800b892 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2200      	movs	r2, #0
 800b890:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d101      	bne.n	800b8a0 <HAL_PCD_EP_Open+0xae>
 800b89c:	2302      	movs	r3, #2
 800b89e:	e00e      	b.n	800b8be <HAL_PCD_EP_Open+0xcc>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	68f9      	ldr	r1, [r7, #12]
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f006 f962 	bl	8011b78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800b8bc:	7afb      	ldrb	r3, [r7, #11]
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3710      	adds	r7, #16
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b084      	sub	sp, #16
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b8d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	da0f      	bge.n	800b8fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b8da:	78fb      	ldrb	r3, [r7, #3]
 800b8dc:	f003 020f 	and.w	r2, r3, #15
 800b8e0:	4613      	mov	r3, r2
 800b8e2:	00db      	lsls	r3, r3, #3
 800b8e4:	4413      	add	r3, r2
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	3310      	adds	r3, #16
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	3304      	adds	r3, #4
 800b8f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	705a      	strb	r2, [r3, #1]
 800b8f8:	e00f      	b.n	800b91a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b8fa:	78fb      	ldrb	r3, [r7, #3]
 800b8fc:	f003 020f 	and.w	r2, r3, #15
 800b900:	4613      	mov	r3, r2
 800b902:	00db      	lsls	r3, r3, #3
 800b904:	4413      	add	r3, r2
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	4413      	add	r3, r2
 800b910:	3304      	adds	r3, #4
 800b912:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2200      	movs	r2, #0
 800b918:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800b91a:	78fb      	ldrb	r3, [r7, #3]
 800b91c:	f003 030f 	and.w	r3, r3, #15
 800b920:	b2da      	uxtb	r2, r3
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d101      	bne.n	800b934 <HAL_PCD_EP_Close+0x6e>
 800b930:	2302      	movs	r3, #2
 800b932:	e00e      	b.n	800b952 <HAL_PCD_EP_Close+0x8c>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2201      	movs	r2, #1
 800b938:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	68f9      	ldr	r1, [r7, #12]
 800b942:	4618      	mov	r0, r3
 800b944:	f006 f9a0 	bl	8011c88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800b950:	2300      	movs	r3, #0
}
 800b952:	4618      	mov	r0, r3
 800b954:	3710      	adds	r7, #16
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}

0800b95a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b086      	sub	sp, #24
 800b95e:	af00      	add	r7, sp, #0
 800b960:	60f8      	str	r0, [r7, #12]
 800b962:	607a      	str	r2, [r7, #4]
 800b964:	603b      	str	r3, [r7, #0]
 800b966:	460b      	mov	r3, r1
 800b968:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b96a:	7afb      	ldrb	r3, [r7, #11]
 800b96c:	f003 020f 	and.w	r2, r3, #15
 800b970:	4613      	mov	r3, r2
 800b972:	00db      	lsls	r3, r3, #3
 800b974:	4413      	add	r3, r2
 800b976:	009b      	lsls	r3, r3, #2
 800b978:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	4413      	add	r3, r2
 800b980:	3304      	adds	r3, #4
 800b982:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	683a      	ldr	r2, [r7, #0]
 800b98e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	2200      	movs	r2, #0
 800b994:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	2200      	movs	r2, #0
 800b99a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b99c:	7afb      	ldrb	r3, [r7, #11]
 800b99e:	f003 030f 	and.w	r3, r3, #15
 800b9a2:	b2da      	uxtb	r2, r3
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	799b      	ldrb	r3, [r3, #6]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d102      	bne.n	800b9b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	6818      	ldr	r0, [r3, #0]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	799b      	ldrb	r3, [r3, #6]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	6979      	ldr	r1, [r7, #20]
 800b9c2:	f006 fa3d 	bl	8011e40 <USB_EPStartXfer>

  return HAL_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3718      	adds	r7, #24
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	460b      	mov	r3, r1
 800b9da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b9dc:	78fb      	ldrb	r3, [r7, #3]
 800b9de:	f003 020f 	and.w	r2, r3, #15
 800b9e2:	6879      	ldr	r1, [r7, #4]
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	00db      	lsls	r3, r3, #3
 800b9e8:	4413      	add	r3, r2
 800b9ea:	009b      	lsls	r3, r3, #2
 800b9ec:	440b      	add	r3, r1
 800b9ee:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800b9f2:	681b      	ldr	r3, [r3, #0]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	370c      	adds	r7, #12
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr

0800ba00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b086      	sub	sp, #24
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	607a      	str	r2, [r7, #4]
 800ba0a:	603b      	str	r3, [r7, #0]
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba10:	7afb      	ldrb	r3, [r7, #11]
 800ba12:	f003 020f 	and.w	r2, r3, #15
 800ba16:	4613      	mov	r3, r2
 800ba18:	00db      	lsls	r3, r3, #3
 800ba1a:	4413      	add	r3, r2
 800ba1c:	009b      	lsls	r3, r3, #2
 800ba1e:	3310      	adds	r3, #16
 800ba20:	68fa      	ldr	r2, [r7, #12]
 800ba22:	4413      	add	r3, r2
 800ba24:	3304      	adds	r3, #4
 800ba26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	683a      	ldr	r2, [r7, #0]
 800ba32:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	2200      	movs	r2, #0
 800ba38:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ba40:	7afb      	ldrb	r3, [r7, #11]
 800ba42:	f003 030f 	and.w	r3, r3, #15
 800ba46:	b2da      	uxtb	r2, r3
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	799b      	ldrb	r3, [r3, #6]
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d102      	bne.n	800ba5a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	6818      	ldr	r0, [r3, #0]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	799b      	ldrb	r3, [r3, #6]
 800ba62:	461a      	mov	r2, r3
 800ba64:	6979      	ldr	r1, [r7, #20]
 800ba66:	f006 f9eb 	bl	8011e40 <USB_EPStartXfer>

  return HAL_OK;
 800ba6a:	2300      	movs	r3, #0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ba80:	78fb      	ldrb	r3, [r7, #3]
 800ba82:	f003 030f 	and.w	r3, r3, #15
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	7912      	ldrb	r2, [r2, #4]
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d901      	bls.n	800ba92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e04f      	b.n	800bb32 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ba92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	da0f      	bge.n	800baba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba9a:	78fb      	ldrb	r3, [r7, #3]
 800ba9c:	f003 020f 	and.w	r2, r3, #15
 800baa0:	4613      	mov	r3, r2
 800baa2:	00db      	lsls	r3, r3, #3
 800baa4:	4413      	add	r3, r2
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	3310      	adds	r3, #16
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	4413      	add	r3, r2
 800baae:	3304      	adds	r3, #4
 800bab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2201      	movs	r2, #1
 800bab6:	705a      	strb	r2, [r3, #1]
 800bab8:	e00d      	b.n	800bad6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800baba:	78fa      	ldrb	r2, [r7, #3]
 800babc:	4613      	mov	r3, r2
 800babe:	00db      	lsls	r3, r3, #3
 800bac0:	4413      	add	r3, r2
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	4413      	add	r3, r2
 800bacc:	3304      	adds	r3, #4
 800bace:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2200      	movs	r2, #0
 800bad4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2201      	movs	r2, #1
 800bada:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800badc:	78fb      	ldrb	r3, [r7, #3]
 800bade:	f003 030f 	and.w	r3, r3, #15
 800bae2:	b2da      	uxtb	r2, r3
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d101      	bne.n	800baf6 <HAL_PCD_EP_SetStall+0x82>
 800baf2:	2302      	movs	r3, #2
 800baf4:	e01d      	b.n	800bb32 <HAL_PCD_EP_SetStall+0xbe>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2201      	movs	r2, #1
 800bafa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	68f9      	ldr	r1, [r7, #12]
 800bb04:	4618      	mov	r0, r3
 800bb06:	f006 fd7f 	bl	8012608 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bb0a:	78fb      	ldrb	r3, [r7, #3]
 800bb0c:	f003 030f 	and.w	r3, r3, #15
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d109      	bne.n	800bb28 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6818      	ldr	r0, [r3, #0]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	7999      	ldrb	r1, [r3, #6]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bb22:	461a      	mov	r2, r3
 800bb24:	f006 ff72 	bl	8012a0c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bb30:	2300      	movs	r3, #0
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b084      	sub	sp, #16
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
 800bb42:	460b      	mov	r3, r1
 800bb44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800bb46:	78fb      	ldrb	r3, [r7, #3]
 800bb48:	f003 030f 	and.w	r3, r3, #15
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	7912      	ldrb	r2, [r2, #4]
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d901      	bls.n	800bb58 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800bb54:	2301      	movs	r3, #1
 800bb56:	e042      	b.n	800bbde <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bb58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	da0f      	bge.n	800bb80 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bb60:	78fb      	ldrb	r3, [r7, #3]
 800bb62:	f003 020f 	and.w	r2, r3, #15
 800bb66:	4613      	mov	r3, r2
 800bb68:	00db      	lsls	r3, r3, #3
 800bb6a:	4413      	add	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	3310      	adds	r3, #16
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	4413      	add	r3, r2
 800bb74:	3304      	adds	r3, #4
 800bb76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	705a      	strb	r2, [r3, #1]
 800bb7e:	e00f      	b.n	800bba0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bb80:	78fb      	ldrb	r3, [r7, #3]
 800bb82:	f003 020f 	and.w	r2, r3, #15
 800bb86:	4613      	mov	r3, r2
 800bb88:	00db      	lsls	r3, r3, #3
 800bb8a:	4413      	add	r3, r2
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	4413      	add	r3, r2
 800bb96:	3304      	adds	r3, #4
 800bb98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2200      	movs	r2, #0
 800bba4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bba6:	78fb      	ldrb	r3, [r7, #3]
 800bba8:	f003 030f 	and.w	r3, r3, #15
 800bbac:	b2da      	uxtb	r2, r3
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d101      	bne.n	800bbc0 <HAL_PCD_EP_ClrStall+0x86>
 800bbbc:	2302      	movs	r3, #2
 800bbbe:	e00e      	b.n	800bbde <HAL_PCD_EP_ClrStall+0xa4>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	68f9      	ldr	r1, [r7, #12]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f006 fd88 	bl	80126e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3710      	adds	r7, #16
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}

0800bbe6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	b084      	sub	sp, #16
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
 800bbee:	460b      	mov	r3, r1
 800bbf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800bbf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	da0c      	bge.n	800bc14 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bbfa:	78fb      	ldrb	r3, [r7, #3]
 800bbfc:	f003 020f 	and.w	r2, r3, #15
 800bc00:	4613      	mov	r3, r2
 800bc02:	00db      	lsls	r3, r3, #3
 800bc04:	4413      	add	r3, r2
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	3310      	adds	r3, #16
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	4413      	add	r3, r2
 800bc0e:	3304      	adds	r3, #4
 800bc10:	60fb      	str	r3, [r7, #12]
 800bc12:	e00c      	b.n	800bc2e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bc14:	78fb      	ldrb	r3, [r7, #3]
 800bc16:	f003 020f 	and.w	r2, r3, #15
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	00db      	lsls	r3, r3, #3
 800bc1e:	4413      	add	r3, r2
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	4413      	add	r3, r2
 800bc2a:	3304      	adds	r3, #4
 800bc2c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68f9      	ldr	r1, [r7, #12]
 800bc34:	4618      	mov	r0, r3
 800bc36:	f006 fba7 	bl	8012388 <USB_EPStopXfer>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800bc3e:	7afb      	ldrb	r3, [r7, #11]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3710      	adds	r7, #16
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b08a      	sub	sp, #40	@ 0x28
 800bc4c:	af02      	add	r7, sp, #8
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800bc5c:	683a      	ldr	r2, [r7, #0]
 800bc5e:	4613      	mov	r3, r2
 800bc60:	00db      	lsls	r3, r3, #3
 800bc62:	4413      	add	r3, r2
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	3310      	adds	r3, #16
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	4413      	add	r3, r2
 800bc6c:	3304      	adds	r3, #4
 800bc6e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	695a      	ldr	r2, [r3, #20]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	691b      	ldr	r3, [r3, #16]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d901      	bls.n	800bc80 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	e06b      	b.n	800bd58 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	691a      	ldr	r2, [r3, #16]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	695b      	ldr	r3, [r3, #20]
 800bc88:	1ad3      	subs	r3, r2, r3
 800bc8a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	689b      	ldr	r3, [r3, #8]
 800bc90:	69fa      	ldr	r2, [r7, #28]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d902      	bls.n	800bc9c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	3303      	adds	r3, #3
 800bca0:	089b      	lsrs	r3, r3, #2
 800bca2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bca4:	e02a      	b.n	800bcfc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	691a      	ldr	r2, [r3, #16]
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	695b      	ldr	r3, [r3, #20]
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	689b      	ldr	r3, [r3, #8]
 800bcb6:	69fa      	ldr	r2, [r7, #28]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d902      	bls.n	800bcc2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800bcc2:	69fb      	ldr	r3, [r7, #28]
 800bcc4:	3303      	adds	r3, #3
 800bcc6:	089b      	lsrs	r3, r3, #2
 800bcc8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	68d9      	ldr	r1, [r3, #12]
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	b2da      	uxtb	r2, r3
 800bcd2:	69fb      	ldr	r3, [r7, #28]
 800bcd4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bcda:	9300      	str	r3, [sp, #0]
 800bcdc:	4603      	mov	r3, r0
 800bcde:	6978      	ldr	r0, [r7, #20]
 800bce0:	f006 fbfc 	bl	80124dc <USB_WritePacket>

    ep->xfer_buff  += len;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	68da      	ldr	r2, [r3, #12]
 800bce8:	69fb      	ldr	r3, [r7, #28]
 800bcea:	441a      	add	r2, r3
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	695a      	ldr	r2, [r3, #20]
 800bcf4:	69fb      	ldr	r3, [r7, #28]
 800bcf6:	441a      	add	r2, r3
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	015a      	lsls	r2, r3, #5
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	4413      	add	r3, r2
 800bd04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd08:	699b      	ldr	r3, [r3, #24]
 800bd0a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bd0c:	69ba      	ldr	r2, [r7, #24]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d809      	bhi.n	800bd26 <PCD_WriteEmptyTxFifo+0xde>
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	695a      	ldr	r2, [r3, #20]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d203      	bcs.n	800bd26 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	691b      	ldr	r3, [r3, #16]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d1bf      	bne.n	800bca6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	691a      	ldr	r2, [r3, #16]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	695b      	ldr	r3, [r3, #20]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d811      	bhi.n	800bd56 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	f003 030f 	and.w	r3, r3, #15
 800bd38:	2201      	movs	r2, #1
 800bd3a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd3e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	43db      	mvns	r3, r3
 800bd4c:	6939      	ldr	r1, [r7, #16]
 800bd4e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bd52:	4013      	ands	r3, r2
 800bd54:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800bd56:	2300      	movs	r3, #0
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3720      	adds	r7, #32
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b088      	sub	sp, #32
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd70:	69fb      	ldr	r3, [r7, #28]
 800bd72:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	333c      	adds	r3, #60	@ 0x3c
 800bd78:	3304      	adds	r3, #4
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	015a      	lsls	r2, r3, #5
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	4413      	add	r3, r2
 800bd86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	799b      	ldrb	r3, [r3, #6]
 800bd92:	2b01      	cmp	r3, #1
 800bd94:	d17b      	bne.n	800be8e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	f003 0308 	and.w	r3, r3, #8
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d015      	beq.n	800bdcc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	4a61      	ldr	r2, [pc, #388]	@ (800bf28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	f240 80b9 	bls.w	800bf1c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f000 80b3 	beq.w	800bf1c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	015a      	lsls	r2, r3, #5
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bdc8:	6093      	str	r3, [r2, #8]
 800bdca:	e0a7      	b.n	800bf1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	f003 0320 	and.w	r3, r3, #32
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d009      	beq.n	800bdea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	015a      	lsls	r2, r3, #5
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	4413      	add	r3, r2
 800bdde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bde2:	461a      	mov	r2, r3
 800bde4:	2320      	movs	r3, #32
 800bde6:	6093      	str	r3, [r2, #8]
 800bde8:	e098      	b.n	800bf1c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f040 8093 	bne.w	800bf1c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	4a4b      	ldr	r2, [pc, #300]	@ (800bf28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d90f      	bls.n	800be1e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800be04:	2b00      	cmp	r3, #0
 800be06:	d00a      	beq.n	800be1e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	015a      	lsls	r2, r3, #5
 800be0c:	69bb      	ldr	r3, [r7, #24]
 800be0e:	4413      	add	r3, r2
 800be10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be14:	461a      	mov	r2, r3
 800be16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be1a:	6093      	str	r3, [r2, #8]
 800be1c:	e07e      	b.n	800bf1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800be1e:	683a      	ldr	r2, [r7, #0]
 800be20:	4613      	mov	r3, r2
 800be22:	00db      	lsls	r3, r3, #3
 800be24:	4413      	add	r3, r2
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	4413      	add	r3, r2
 800be30:	3304      	adds	r3, #4
 800be32:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	6a1a      	ldr	r2, [r3, #32]
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	0159      	lsls	r1, r3, #5
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	440b      	add	r3, r1
 800be40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be4a:	1ad2      	subs	r2, r2, r3
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d114      	bne.n	800be80 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	691b      	ldr	r3, [r3, #16]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d109      	bne.n	800be72 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6818      	ldr	r0, [r3, #0]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800be68:	461a      	mov	r2, r3
 800be6a:	2101      	movs	r1, #1
 800be6c:	f006 fdce 	bl	8012a0c <USB_EP0_OutStart>
 800be70:	e006      	b.n	800be80 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	68da      	ldr	r2, [r3, #12]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	695b      	ldr	r3, [r3, #20]
 800be7a:	441a      	add	r2, r3
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	b2db      	uxtb	r3, r3
 800be84:	4619      	mov	r1, r3
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f009 f8f4 	bl	8015074 <HAL_PCD_DataOutStageCallback>
 800be8c:	e046      	b.n	800bf1c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	4a26      	ldr	r2, [pc, #152]	@ (800bf2c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d124      	bne.n	800bee0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00a      	beq.n	800beb6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	015a      	lsls	r2, r3, #5
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	4413      	add	r3, r2
 800bea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800beac:	461a      	mov	r2, r3
 800beae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800beb2:	6093      	str	r3, [r2, #8]
 800beb4:	e032      	b.n	800bf1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	f003 0320 	and.w	r3, r3, #32
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d008      	beq.n	800bed2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	015a      	lsls	r2, r3, #5
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	4413      	add	r3, r2
 800bec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800becc:	461a      	mov	r2, r3
 800bece:	2320      	movs	r3, #32
 800bed0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	4619      	mov	r1, r3
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f009 f8cb 	bl	8015074 <HAL_PCD_DataOutStageCallback>
 800bede:	e01d      	b.n	800bf1c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d114      	bne.n	800bf10 <PCD_EP_OutXfrComplete_int+0x1b0>
 800bee6:	6879      	ldr	r1, [r7, #4]
 800bee8:	683a      	ldr	r2, [r7, #0]
 800beea:	4613      	mov	r3, r2
 800beec:	00db      	lsls	r3, r3, #3
 800beee:	4413      	add	r3, r2
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	440b      	add	r3, r1
 800bef4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d108      	bne.n	800bf10 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6818      	ldr	r0, [r3, #0]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bf08:	461a      	mov	r2, r3
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	f006 fd7e 	bl	8012a0c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	4619      	mov	r1, r3
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f009 f8ac 	bl	8015074 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800bf1c:	2300      	movs	r3, #0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3720      	adds	r7, #32
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	4f54300a 	.word	0x4f54300a
 800bf2c:	4f54310a 	.word	0x4f54310a

0800bf30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	333c      	adds	r3, #60	@ 0x3c
 800bf48:	3304      	adds	r3, #4
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	015a      	lsls	r2, r3, #5
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	4413      	add	r3, r2
 800bf56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	4a15      	ldr	r2, [pc, #84]	@ (800bfb8 <PCD_EP_OutSetupPacket_int+0x88>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d90e      	bls.n	800bf84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d009      	beq.n	800bf84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	015a      	lsls	r2, r3, #5
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	4413      	add	r3, r2
 800bf78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f009 f863 	bl	8015050 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	4a0a      	ldr	r2, [pc, #40]	@ (800bfb8 <PCD_EP_OutSetupPacket_int+0x88>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d90c      	bls.n	800bfac <PCD_EP_OutSetupPacket_int+0x7c>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	799b      	ldrb	r3, [r3, #6]
 800bf96:	2b01      	cmp	r3, #1
 800bf98:	d108      	bne.n	800bfac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6818      	ldr	r0, [r3, #0]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	2101      	movs	r1, #1
 800bfa8:	f006 fd30 	bl	8012a0c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3718      	adds	r7, #24
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	4f54300a 	.word	0x4f54300a

0800bfbc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b085      	sub	sp, #20
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	70fb      	strb	r3, [r7, #3]
 800bfc8:	4613      	mov	r3, r2
 800bfca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfd2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bfd4:	78fb      	ldrb	r3, [r7, #3]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d107      	bne.n	800bfea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800bfda:	883b      	ldrh	r3, [r7, #0]
 800bfdc:	0419      	lsls	r1, r3, #16
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	68ba      	ldr	r2, [r7, #8]
 800bfe4:	430a      	orrs	r2, r1
 800bfe6:	629a      	str	r2, [r3, #40]	@ 0x28
 800bfe8:	e028      	b.n	800c03c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bff0:	0c1b      	lsrs	r3, r3, #16
 800bff2:	68ba      	ldr	r2, [r7, #8]
 800bff4:	4413      	add	r3, r2
 800bff6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bff8:	2300      	movs	r3, #0
 800bffa:	73fb      	strb	r3, [r7, #15]
 800bffc:	e00d      	b.n	800c01a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	7bfb      	ldrb	r3, [r7, #15]
 800c004:	3340      	adds	r3, #64	@ 0x40
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	4413      	add	r3, r2
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	0c1b      	lsrs	r3, r3, #16
 800c00e:	68ba      	ldr	r2, [r7, #8]
 800c010:	4413      	add	r3, r2
 800c012:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c014:	7bfb      	ldrb	r3, [r7, #15]
 800c016:	3301      	adds	r3, #1
 800c018:	73fb      	strb	r3, [r7, #15]
 800c01a:	7bfa      	ldrb	r2, [r7, #15]
 800c01c:	78fb      	ldrb	r3, [r7, #3]
 800c01e:	3b01      	subs	r3, #1
 800c020:	429a      	cmp	r2, r3
 800c022:	d3ec      	bcc.n	800bffe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c024:	883b      	ldrh	r3, [r7, #0]
 800c026:	0418      	lsls	r0, r3, #16
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6819      	ldr	r1, [r3, #0]
 800c02c:	78fb      	ldrb	r3, [r7, #3]
 800c02e:	3b01      	subs	r3, #1
 800c030:	68ba      	ldr	r2, [r7, #8]
 800c032:	4302      	orrs	r2, r0
 800c034:	3340      	adds	r3, #64	@ 0x40
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	440b      	add	r3, r1
 800c03a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c03c:	2300      	movs	r3, #0
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3714      	adds	r7, #20
 800c042:	46bd      	mov	sp, r7
 800c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c048:	4770      	bx	lr

0800c04a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c04a:	b480      	push	{r7}
 800c04c:	b083      	sub	sp, #12
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
 800c052:	460b      	mov	r3, r1
 800c054:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	887a      	ldrh	r2, [r7, #2]
 800c05c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c05e:	2300      	movs	r3, #0
}
 800c060:	4618      	mov	r0, r3
 800c062:	370c      	adds	r7, #12
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr

0800c06c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b085      	sub	sp, #20
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2201      	movs	r2, #1
 800c07e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2200      	movs	r2, #0
 800c086:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	699b      	ldr	r3, [r3, #24]
 800c08e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c09a:	4b05      	ldr	r3, [pc, #20]	@ (800c0b0 <HAL_PCDEx_ActivateLPM+0x44>)
 800c09c:	4313      	orrs	r3, r2
 800c09e:	68fa      	ldr	r2, [r7, #12]
 800c0a0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800c0a2:	2300      	movs	r3, #0
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3714      	adds	r7, #20
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr
 800c0b0:	10000003 	.word	0x10000003

0800c0b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	460b      	mov	r3, r1
 800c0be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c0c0:	bf00      	nop
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800c0d4:	4b19      	ldr	r3, [pc, #100]	@ (800c13c <HAL_PWREx_ConfigSupply+0x70>)
 800c0d6:	68db      	ldr	r3, [r3, #12]
 800c0d8:	f003 0304 	and.w	r3, r3, #4
 800c0dc:	2b04      	cmp	r3, #4
 800c0de:	d00a      	beq.n	800c0f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c0e0:	4b16      	ldr	r3, [pc, #88]	@ (800c13c <HAL_PWREx_ConfigSupply+0x70>)
 800c0e2:	68db      	ldr	r3, [r3, #12]
 800c0e4:	f003 0307 	and.w	r3, r3, #7
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d001      	beq.n	800c0f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	e01f      	b.n	800c132 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	e01d      	b.n	800c132 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c0f6:	4b11      	ldr	r3, [pc, #68]	@ (800c13c <HAL_PWREx_ConfigSupply+0x70>)
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	f023 0207 	bic.w	r2, r3, #7
 800c0fe:	490f      	ldr	r1, [pc, #60]	@ (800c13c <HAL_PWREx_ConfigSupply+0x70>)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	4313      	orrs	r3, r2
 800c104:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c106:	f7f6 f9a3 	bl	8002450 <HAL_GetTick>
 800c10a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c10c:	e009      	b.n	800c122 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c10e:	f7f6 f99f 	bl	8002450 <HAL_GetTick>
 800c112:	4602      	mov	r2, r0
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	1ad3      	subs	r3, r2, r3
 800c118:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c11c:	d901      	bls.n	800c122 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c11e:	2301      	movs	r3, #1
 800c120:	e007      	b.n	800c132 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c122:	4b06      	ldr	r3, [pc, #24]	@ (800c13c <HAL_PWREx_ConfigSupply+0x70>)
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c12a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c12e:	d1ee      	bne.n	800c10e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c130:	2300      	movs	r3, #0
}
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	58024800 	.word	0x58024800

0800c140 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800c140:	b480      	push	{r7}
 800c142:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800c144:	4b05      	ldr	r3, [pc, #20]	@ (800c15c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	4a04      	ldr	r2, [pc, #16]	@ (800c15c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c14a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c14e:	60d3      	str	r3, [r2, #12]
}
 800c150:	bf00      	nop
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop
 800c15c:	58024800 	.word	0x58024800

0800c160 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b08c      	sub	sp, #48	@ 0x30
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d102      	bne.n	800c174 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c16e:	2301      	movs	r3, #1
 800c170:	f000 bc48 	b.w	800ca04 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f003 0301 	and.w	r3, r3, #1
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f000 8088 	beq.w	800c292 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c182:	4b99      	ldr	r3, [pc, #612]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c184:	691b      	ldr	r3, [r3, #16]
 800c186:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c18a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c18c:	4b96      	ldr	r3, [pc, #600]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c18e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c190:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c194:	2b10      	cmp	r3, #16
 800c196:	d007      	beq.n	800c1a8 <HAL_RCC_OscConfig+0x48>
 800c198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c19a:	2b18      	cmp	r3, #24
 800c19c:	d111      	bne.n	800c1c2 <HAL_RCC_OscConfig+0x62>
 800c19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a0:	f003 0303 	and.w	r3, r3, #3
 800c1a4:	2b02      	cmp	r3, #2
 800c1a6:	d10c      	bne.n	800c1c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c1a8:	4b8f      	ldr	r3, [pc, #572]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d06d      	beq.n	800c290 <HAL_RCC_OscConfig+0x130>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d169      	bne.n	800c290 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	f000 bc21 	b.w	800ca04 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1ca:	d106      	bne.n	800c1da <HAL_RCC_OscConfig+0x7a>
 800c1cc:	4b86      	ldr	r3, [pc, #536]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a85      	ldr	r2, [pc, #532]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c1d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c1d6:	6013      	str	r3, [r2, #0]
 800c1d8:	e02e      	b.n	800c238 <HAL_RCC_OscConfig+0xd8>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d10c      	bne.n	800c1fc <HAL_RCC_OscConfig+0x9c>
 800c1e2:	4b81      	ldr	r3, [pc, #516]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4a80      	ldr	r2, [pc, #512]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c1e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c1ec:	6013      	str	r3, [r2, #0]
 800c1ee:	4b7e      	ldr	r3, [pc, #504]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4a7d      	ldr	r2, [pc, #500]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c1f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c1f8:	6013      	str	r3, [r2, #0]
 800c1fa:	e01d      	b.n	800c238 <HAL_RCC_OscConfig+0xd8>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c204:	d10c      	bne.n	800c220 <HAL_RCC_OscConfig+0xc0>
 800c206:	4b78      	ldr	r3, [pc, #480]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a77      	ldr	r2, [pc, #476]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c20c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c210:	6013      	str	r3, [r2, #0]
 800c212:	4b75      	ldr	r3, [pc, #468]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4a74      	ldr	r2, [pc, #464]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c21c:	6013      	str	r3, [r2, #0]
 800c21e:	e00b      	b.n	800c238 <HAL_RCC_OscConfig+0xd8>
 800c220:	4b71      	ldr	r3, [pc, #452]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4a70      	ldr	r2, [pc, #448]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c22a:	6013      	str	r3, [r2, #0]
 800c22c:	4b6e      	ldr	r3, [pc, #440]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4a6d      	ldr	r2, [pc, #436]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d013      	beq.n	800c268 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c240:	f7f6 f906 	bl	8002450 <HAL_GetTick>
 800c244:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c246:	e008      	b.n	800c25a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c248:	f7f6 f902 	bl	8002450 <HAL_GetTick>
 800c24c:	4602      	mov	r2, r0
 800c24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c250:	1ad3      	subs	r3, r2, r3
 800c252:	2b64      	cmp	r3, #100	@ 0x64
 800c254:	d901      	bls.n	800c25a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c256:	2303      	movs	r3, #3
 800c258:	e3d4      	b.n	800ca04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c25a:	4b63      	ldr	r3, [pc, #396]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c262:	2b00      	cmp	r3, #0
 800c264:	d0f0      	beq.n	800c248 <HAL_RCC_OscConfig+0xe8>
 800c266:	e014      	b.n	800c292 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c268:	f7f6 f8f2 	bl	8002450 <HAL_GetTick>
 800c26c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c26e:	e008      	b.n	800c282 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c270:	f7f6 f8ee 	bl	8002450 <HAL_GetTick>
 800c274:	4602      	mov	r2, r0
 800c276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c278:	1ad3      	subs	r3, r2, r3
 800c27a:	2b64      	cmp	r3, #100	@ 0x64
 800c27c:	d901      	bls.n	800c282 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c27e:	2303      	movs	r3, #3
 800c280:	e3c0      	b.n	800ca04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c282:	4b59      	ldr	r3, [pc, #356]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d1f0      	bne.n	800c270 <HAL_RCC_OscConfig+0x110>
 800c28e:	e000      	b.n	800c292 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f003 0302 	and.w	r3, r3, #2
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	f000 80ca 	beq.w	800c434 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c2a0:	4b51      	ldr	r3, [pc, #324]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c2a2:	691b      	ldr	r3, [r3, #16]
 800c2a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c2a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c2aa:	4b4f      	ldr	r3, [pc, #316]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c2ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c2b0:	6a3b      	ldr	r3, [r7, #32]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d007      	beq.n	800c2c6 <HAL_RCC_OscConfig+0x166>
 800c2b6:	6a3b      	ldr	r3, [r7, #32]
 800c2b8:	2b18      	cmp	r3, #24
 800c2ba:	d156      	bne.n	800c36a <HAL_RCC_OscConfig+0x20a>
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	f003 0303 	and.w	r3, r3, #3
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d151      	bne.n	800c36a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c2c6:	4b48      	ldr	r3, [pc, #288]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f003 0304 	and.w	r3, r3, #4
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d005      	beq.n	800c2de <HAL_RCC_OscConfig+0x17e>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	68db      	ldr	r3, [r3, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d101      	bne.n	800c2de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	e392      	b.n	800ca04 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c2de:	4b42      	ldr	r3, [pc, #264]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f023 0219 	bic.w	r2, r3, #25
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	68db      	ldr	r3, [r3, #12]
 800c2ea:	493f      	ldr	r1, [pc, #252]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2f0:	f7f6 f8ae 	bl	8002450 <HAL_GetTick>
 800c2f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c2f6:	e008      	b.n	800c30a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c2f8:	f7f6 f8aa 	bl	8002450 <HAL_GetTick>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c300:	1ad3      	subs	r3, r2, r3
 800c302:	2b02      	cmp	r3, #2
 800c304:	d901      	bls.n	800c30a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c306:	2303      	movs	r3, #3
 800c308:	e37c      	b.n	800ca04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c30a:	4b37      	ldr	r3, [pc, #220]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f003 0304 	and.w	r3, r3, #4
 800c312:	2b00      	cmp	r3, #0
 800c314:	d0f0      	beq.n	800c2f8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c316:	f7f6 f8cb 	bl	80024b0 <HAL_GetREVID>
 800c31a:	4603      	mov	r3, r0
 800c31c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c320:	4293      	cmp	r3, r2
 800c322:	d817      	bhi.n	800c354 <HAL_RCC_OscConfig+0x1f4>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	691b      	ldr	r3, [r3, #16]
 800c328:	2b40      	cmp	r3, #64	@ 0x40
 800c32a:	d108      	bne.n	800c33e <HAL_RCC_OscConfig+0x1de>
 800c32c:	4b2e      	ldr	r3, [pc, #184]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800c334:	4a2c      	ldr	r2, [pc, #176]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c336:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c33a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c33c:	e07a      	b.n	800c434 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c33e:	4b2a      	ldr	r3, [pc, #168]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	691b      	ldr	r3, [r3, #16]
 800c34a:	031b      	lsls	r3, r3, #12
 800c34c:	4926      	ldr	r1, [pc, #152]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c34e:	4313      	orrs	r3, r2
 800c350:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c352:	e06f      	b.n	800c434 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c354:	4b24      	ldr	r3, [pc, #144]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	691b      	ldr	r3, [r3, #16]
 800c360:	061b      	lsls	r3, r3, #24
 800c362:	4921      	ldr	r1, [pc, #132]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c364:	4313      	orrs	r3, r2
 800c366:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c368:	e064      	b.n	800c434 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d047      	beq.n	800c402 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c372:	4b1d      	ldr	r3, [pc, #116]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f023 0219 	bic.w	r2, r3, #25
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	68db      	ldr	r3, [r3, #12]
 800c37e:	491a      	ldr	r1, [pc, #104]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c380:	4313      	orrs	r3, r2
 800c382:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c384:	f7f6 f864 	bl	8002450 <HAL_GetTick>
 800c388:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c38a:	e008      	b.n	800c39e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c38c:	f7f6 f860 	bl	8002450 <HAL_GetTick>
 800c390:	4602      	mov	r2, r0
 800c392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c394:	1ad3      	subs	r3, r2, r3
 800c396:	2b02      	cmp	r3, #2
 800c398:	d901      	bls.n	800c39e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c39a:	2303      	movs	r3, #3
 800c39c:	e332      	b.n	800ca04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c39e:	4b12      	ldr	r3, [pc, #72]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f003 0304 	and.w	r3, r3, #4
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d0f0      	beq.n	800c38c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c3aa:	f7f6 f881 	bl	80024b0 <HAL_GetREVID>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d819      	bhi.n	800c3ec <HAL_RCC_OscConfig+0x28c>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	691b      	ldr	r3, [r3, #16]
 800c3bc:	2b40      	cmp	r3, #64	@ 0x40
 800c3be:	d108      	bne.n	800c3d2 <HAL_RCC_OscConfig+0x272>
 800c3c0:	4b09      	ldr	r3, [pc, #36]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800c3c8:	4a07      	ldr	r2, [pc, #28]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c3ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c3ce:	6053      	str	r3, [r2, #4]
 800c3d0:	e030      	b.n	800c434 <HAL_RCC_OscConfig+0x2d4>
 800c3d2:	4b05      	ldr	r3, [pc, #20]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	691b      	ldr	r3, [r3, #16]
 800c3de:	031b      	lsls	r3, r3, #12
 800c3e0:	4901      	ldr	r1, [pc, #4]	@ (800c3e8 <HAL_RCC_OscConfig+0x288>)
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	604b      	str	r3, [r1, #4]
 800c3e6:	e025      	b.n	800c434 <HAL_RCC_OscConfig+0x2d4>
 800c3e8:	58024400 	.word	0x58024400
 800c3ec:	4b9a      	ldr	r3, [pc, #616]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	691b      	ldr	r3, [r3, #16]
 800c3f8:	061b      	lsls	r3, r3, #24
 800c3fa:	4997      	ldr	r1, [pc, #604]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	604b      	str	r3, [r1, #4]
 800c400:	e018      	b.n	800c434 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c402:	4b95      	ldr	r3, [pc, #596]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a94      	ldr	r2, [pc, #592]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c408:	f023 0301 	bic.w	r3, r3, #1
 800c40c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c40e:	f7f6 f81f 	bl	8002450 <HAL_GetTick>
 800c412:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c414:	e008      	b.n	800c428 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c416:	f7f6 f81b 	bl	8002450 <HAL_GetTick>
 800c41a:	4602      	mov	r2, r0
 800c41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c41e:	1ad3      	subs	r3, r2, r3
 800c420:	2b02      	cmp	r3, #2
 800c422:	d901      	bls.n	800c428 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800c424:	2303      	movs	r3, #3
 800c426:	e2ed      	b.n	800ca04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c428:	4b8b      	ldr	r3, [pc, #556]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f003 0304 	and.w	r3, r3, #4
 800c430:	2b00      	cmp	r3, #0
 800c432:	d1f0      	bne.n	800c416 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f003 0310 	and.w	r3, r3, #16
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f000 80a9 	beq.w	800c594 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c442:	4b85      	ldr	r3, [pc, #532]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c444:	691b      	ldr	r3, [r3, #16]
 800c446:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c44a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c44c:	4b82      	ldr	r3, [pc, #520]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c44e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c450:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800c452:	69bb      	ldr	r3, [r7, #24]
 800c454:	2b08      	cmp	r3, #8
 800c456:	d007      	beq.n	800c468 <HAL_RCC_OscConfig+0x308>
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	2b18      	cmp	r3, #24
 800c45c:	d13a      	bne.n	800c4d4 <HAL_RCC_OscConfig+0x374>
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	f003 0303 	and.w	r3, r3, #3
 800c464:	2b01      	cmp	r3, #1
 800c466:	d135      	bne.n	800c4d4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c468:	4b7b      	ldr	r3, [pc, #492]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c470:	2b00      	cmp	r3, #0
 800c472:	d005      	beq.n	800c480 <HAL_RCC_OscConfig+0x320>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	69db      	ldr	r3, [r3, #28]
 800c478:	2b80      	cmp	r3, #128	@ 0x80
 800c47a:	d001      	beq.n	800c480 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800c47c:	2301      	movs	r3, #1
 800c47e:	e2c1      	b.n	800ca04 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c480:	f7f6 f816 	bl	80024b0 <HAL_GetREVID>
 800c484:	4603      	mov	r3, r0
 800c486:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d817      	bhi.n	800c4be <HAL_RCC_OscConfig+0x35e>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6a1b      	ldr	r3, [r3, #32]
 800c492:	2b20      	cmp	r3, #32
 800c494:	d108      	bne.n	800c4a8 <HAL_RCC_OscConfig+0x348>
 800c496:	4b70      	ldr	r3, [pc, #448]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800c49e:	4a6e      	ldr	r2, [pc, #440]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c4a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c4a4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c4a6:	e075      	b.n	800c594 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c4a8:	4b6b      	ldr	r3, [pc, #428]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c4aa:	685b      	ldr	r3, [r3, #4]
 800c4ac:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6a1b      	ldr	r3, [r3, #32]
 800c4b4:	069b      	lsls	r3, r3, #26
 800c4b6:	4968      	ldr	r1, [pc, #416]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c4bc:	e06a      	b.n	800c594 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c4be:	4b66      	ldr	r3, [pc, #408]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c4c0:	68db      	ldr	r3, [r3, #12]
 800c4c2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6a1b      	ldr	r3, [r3, #32]
 800c4ca:	061b      	lsls	r3, r3, #24
 800c4cc:	4962      	ldr	r1, [pc, #392]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c4d2:	e05f      	b.n	800c594 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	69db      	ldr	r3, [r3, #28]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d042      	beq.n	800c562 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800c4dc:	4b5e      	ldr	r3, [pc, #376]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a5d      	ldr	r2, [pc, #372]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c4e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4e8:	f7f5 ffb2 	bl	8002450 <HAL_GetTick>
 800c4ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c4ee:	e008      	b.n	800c502 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c4f0:	f7f5 ffae 	bl	8002450 <HAL_GetTick>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f8:	1ad3      	subs	r3, r2, r3
 800c4fa:	2b02      	cmp	r3, #2
 800c4fc:	d901      	bls.n	800c502 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800c4fe:	2303      	movs	r3, #3
 800c500:	e280      	b.n	800ca04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c502:	4b55      	ldr	r3, [pc, #340]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d0f0      	beq.n	800c4f0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c50e:	f7f5 ffcf 	bl	80024b0 <HAL_GetREVID>
 800c512:	4603      	mov	r3, r0
 800c514:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c518:	4293      	cmp	r3, r2
 800c51a:	d817      	bhi.n	800c54c <HAL_RCC_OscConfig+0x3ec>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6a1b      	ldr	r3, [r3, #32]
 800c520:	2b20      	cmp	r3, #32
 800c522:	d108      	bne.n	800c536 <HAL_RCC_OscConfig+0x3d6>
 800c524:	4b4c      	ldr	r3, [pc, #304]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800c52c:	4a4a      	ldr	r2, [pc, #296]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c52e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c532:	6053      	str	r3, [r2, #4]
 800c534:	e02e      	b.n	800c594 <HAL_RCC_OscConfig+0x434>
 800c536:	4b48      	ldr	r3, [pc, #288]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c538:	685b      	ldr	r3, [r3, #4]
 800c53a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6a1b      	ldr	r3, [r3, #32]
 800c542:	069b      	lsls	r3, r3, #26
 800c544:	4944      	ldr	r1, [pc, #272]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c546:	4313      	orrs	r3, r2
 800c548:	604b      	str	r3, [r1, #4]
 800c54a:	e023      	b.n	800c594 <HAL_RCC_OscConfig+0x434>
 800c54c:	4b42      	ldr	r3, [pc, #264]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6a1b      	ldr	r3, [r3, #32]
 800c558:	061b      	lsls	r3, r3, #24
 800c55a:	493f      	ldr	r1, [pc, #252]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c55c:	4313      	orrs	r3, r2
 800c55e:	60cb      	str	r3, [r1, #12]
 800c560:	e018      	b.n	800c594 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800c562:	4b3d      	ldr	r3, [pc, #244]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4a3c      	ldr	r2, [pc, #240]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c568:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c56c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c56e:	f7f5 ff6f 	bl	8002450 <HAL_GetTick>
 800c572:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c574:	e008      	b.n	800c588 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c576:	f7f5 ff6b 	bl	8002450 <HAL_GetTick>
 800c57a:	4602      	mov	r2, r0
 800c57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c57e:	1ad3      	subs	r3, r2, r3
 800c580:	2b02      	cmp	r3, #2
 800c582:	d901      	bls.n	800c588 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c584:	2303      	movs	r3, #3
 800c586:	e23d      	b.n	800ca04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c588:	4b33      	ldr	r3, [pc, #204]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c590:	2b00      	cmp	r3, #0
 800c592:	d1f0      	bne.n	800c576 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f003 0308 	and.w	r3, r3, #8
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d036      	beq.n	800c60e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	695b      	ldr	r3, [r3, #20]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d019      	beq.n	800c5dc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c5a8:	4b2b      	ldr	r3, [pc, #172]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c5aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5ac:	4a2a      	ldr	r2, [pc, #168]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c5ae:	f043 0301 	orr.w	r3, r3, #1
 800c5b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5b4:	f7f5 ff4c 	bl	8002450 <HAL_GetTick>
 800c5b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c5ba:	e008      	b.n	800c5ce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c5bc:	f7f5 ff48 	bl	8002450 <HAL_GetTick>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c4:	1ad3      	subs	r3, r2, r3
 800c5c6:	2b02      	cmp	r3, #2
 800c5c8:	d901      	bls.n	800c5ce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800c5ca:	2303      	movs	r3, #3
 800c5cc:	e21a      	b.n	800ca04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c5ce:	4b22      	ldr	r3, [pc, #136]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c5d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5d2:	f003 0302 	and.w	r3, r3, #2
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d0f0      	beq.n	800c5bc <HAL_RCC_OscConfig+0x45c>
 800c5da:	e018      	b.n	800c60e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c5dc:	4b1e      	ldr	r3, [pc, #120]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c5de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5e0:	4a1d      	ldr	r2, [pc, #116]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c5e2:	f023 0301 	bic.w	r3, r3, #1
 800c5e6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5e8:	f7f5 ff32 	bl	8002450 <HAL_GetTick>
 800c5ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c5ee:	e008      	b.n	800c602 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c5f0:	f7f5 ff2e 	bl	8002450 <HAL_GetTick>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	d901      	bls.n	800c602 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800c5fe:	2303      	movs	r3, #3
 800c600:	e200      	b.n	800ca04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c602:	4b15      	ldr	r3, [pc, #84]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c606:	f003 0302 	and.w	r3, r3, #2
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d1f0      	bne.n	800c5f0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f003 0320 	and.w	r3, r3, #32
 800c616:	2b00      	cmp	r3, #0
 800c618:	d039      	beq.n	800c68e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	699b      	ldr	r3, [r3, #24]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d01c      	beq.n	800c65c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c622:	4b0d      	ldr	r3, [pc, #52]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a0c      	ldr	r2, [pc, #48]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c628:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c62c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c62e:	f7f5 ff0f 	bl	8002450 <HAL_GetTick>
 800c632:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c634:	e008      	b.n	800c648 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c636:	f7f5 ff0b 	bl	8002450 <HAL_GetTick>
 800c63a:	4602      	mov	r2, r0
 800c63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c63e:	1ad3      	subs	r3, r2, r3
 800c640:	2b02      	cmp	r3, #2
 800c642:	d901      	bls.n	800c648 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800c644:	2303      	movs	r3, #3
 800c646:	e1dd      	b.n	800ca04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c648:	4b03      	ldr	r3, [pc, #12]	@ (800c658 <HAL_RCC_OscConfig+0x4f8>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c650:	2b00      	cmp	r3, #0
 800c652:	d0f0      	beq.n	800c636 <HAL_RCC_OscConfig+0x4d6>
 800c654:	e01b      	b.n	800c68e <HAL_RCC_OscConfig+0x52e>
 800c656:	bf00      	nop
 800c658:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c65c:	4b9b      	ldr	r3, [pc, #620]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a9a      	ldr	r2, [pc, #616]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c662:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c666:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c668:	f7f5 fef2 	bl	8002450 <HAL_GetTick>
 800c66c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c66e:	e008      	b.n	800c682 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c670:	f7f5 feee 	bl	8002450 <HAL_GetTick>
 800c674:	4602      	mov	r2, r0
 800c676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	2b02      	cmp	r3, #2
 800c67c:	d901      	bls.n	800c682 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800c67e:	2303      	movs	r3, #3
 800c680:	e1c0      	b.n	800ca04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c682:	4b92      	ldr	r3, [pc, #584]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1f0      	bne.n	800c670 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f003 0304 	and.w	r3, r3, #4
 800c696:	2b00      	cmp	r3, #0
 800c698:	f000 8081 	beq.w	800c79e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c69c:	4b8c      	ldr	r3, [pc, #560]	@ (800c8d0 <HAL_RCC_OscConfig+0x770>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a8b      	ldr	r2, [pc, #556]	@ (800c8d0 <HAL_RCC_OscConfig+0x770>)
 800c6a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c6a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c6a8:	f7f5 fed2 	bl	8002450 <HAL_GetTick>
 800c6ac:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c6ae:	e008      	b.n	800c6c2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c6b0:	f7f5 fece 	bl	8002450 <HAL_GetTick>
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b8:	1ad3      	subs	r3, r2, r3
 800c6ba:	2b64      	cmp	r3, #100	@ 0x64
 800c6bc:	d901      	bls.n	800c6c2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800c6be:	2303      	movs	r3, #3
 800c6c0:	e1a0      	b.n	800ca04 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c6c2:	4b83      	ldr	r3, [pc, #524]	@ (800c8d0 <HAL_RCC_OscConfig+0x770>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d0f0      	beq.n	800c6b0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d106      	bne.n	800c6e4 <HAL_RCC_OscConfig+0x584>
 800c6d6:	4b7d      	ldr	r3, [pc, #500]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c6d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6da:	4a7c      	ldr	r2, [pc, #496]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c6dc:	f043 0301 	orr.w	r3, r3, #1
 800c6e0:	6713      	str	r3, [r2, #112]	@ 0x70
 800c6e2:	e02d      	b.n	800c740 <HAL_RCC_OscConfig+0x5e0>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	689b      	ldr	r3, [r3, #8]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d10c      	bne.n	800c706 <HAL_RCC_OscConfig+0x5a6>
 800c6ec:	4b77      	ldr	r3, [pc, #476]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c6ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6f0:	4a76      	ldr	r2, [pc, #472]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c6f2:	f023 0301 	bic.w	r3, r3, #1
 800c6f6:	6713      	str	r3, [r2, #112]	@ 0x70
 800c6f8:	4b74      	ldr	r3, [pc, #464]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c6fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6fc:	4a73      	ldr	r2, [pc, #460]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c6fe:	f023 0304 	bic.w	r3, r3, #4
 800c702:	6713      	str	r3, [r2, #112]	@ 0x70
 800c704:	e01c      	b.n	800c740 <HAL_RCC_OscConfig+0x5e0>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	2b05      	cmp	r3, #5
 800c70c:	d10c      	bne.n	800c728 <HAL_RCC_OscConfig+0x5c8>
 800c70e:	4b6f      	ldr	r3, [pc, #444]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c712:	4a6e      	ldr	r2, [pc, #440]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c714:	f043 0304 	orr.w	r3, r3, #4
 800c718:	6713      	str	r3, [r2, #112]	@ 0x70
 800c71a:	4b6c      	ldr	r3, [pc, #432]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c71c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c71e:	4a6b      	ldr	r2, [pc, #428]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c720:	f043 0301 	orr.w	r3, r3, #1
 800c724:	6713      	str	r3, [r2, #112]	@ 0x70
 800c726:	e00b      	b.n	800c740 <HAL_RCC_OscConfig+0x5e0>
 800c728:	4b68      	ldr	r3, [pc, #416]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c72a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c72c:	4a67      	ldr	r2, [pc, #412]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c72e:	f023 0301 	bic.w	r3, r3, #1
 800c732:	6713      	str	r3, [r2, #112]	@ 0x70
 800c734:	4b65      	ldr	r3, [pc, #404]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c738:	4a64      	ldr	r2, [pc, #400]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c73a:	f023 0304 	bic.w	r3, r3, #4
 800c73e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	689b      	ldr	r3, [r3, #8]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d015      	beq.n	800c774 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c748:	f7f5 fe82 	bl	8002450 <HAL_GetTick>
 800c74c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c74e:	e00a      	b.n	800c766 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c750:	f7f5 fe7e 	bl	8002450 <HAL_GetTick>
 800c754:	4602      	mov	r2, r0
 800c756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c758:	1ad3      	subs	r3, r2, r3
 800c75a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c75e:	4293      	cmp	r3, r2
 800c760:	d901      	bls.n	800c766 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800c762:	2303      	movs	r3, #3
 800c764:	e14e      	b.n	800ca04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c766:	4b59      	ldr	r3, [pc, #356]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c76a:	f003 0302 	and.w	r3, r3, #2
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d0ee      	beq.n	800c750 <HAL_RCC_OscConfig+0x5f0>
 800c772:	e014      	b.n	800c79e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c774:	f7f5 fe6c 	bl	8002450 <HAL_GetTick>
 800c778:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c77a:	e00a      	b.n	800c792 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c77c:	f7f5 fe68 	bl	8002450 <HAL_GetTick>
 800c780:	4602      	mov	r2, r0
 800c782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c784:	1ad3      	subs	r3, r2, r3
 800c786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d901      	bls.n	800c792 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800c78e:	2303      	movs	r3, #3
 800c790:	e138      	b.n	800ca04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c792:	4b4e      	ldr	r3, [pc, #312]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c796:	f003 0302 	and.w	r3, r3, #2
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d1ee      	bne.n	800c77c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	f000 812d 	beq.w	800ca02 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c7a8:	4b48      	ldr	r3, [pc, #288]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c7aa:	691b      	ldr	r3, [r3, #16]
 800c7ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c7b0:	2b18      	cmp	r3, #24
 800c7b2:	f000 80bd 	beq.w	800c930 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7ba:	2b02      	cmp	r3, #2
 800c7bc:	f040 809e 	bne.w	800c8fc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c7c0:	4b42      	ldr	r3, [pc, #264]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4a41      	ldr	r2, [pc, #260]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c7c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c7ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7cc:	f7f5 fe40 	bl	8002450 <HAL_GetTick>
 800c7d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c7d2:	e008      	b.n	800c7e6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7d4:	f7f5 fe3c 	bl	8002450 <HAL_GetTick>
 800c7d8:	4602      	mov	r2, r0
 800c7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7dc:	1ad3      	subs	r3, r2, r3
 800c7de:	2b02      	cmp	r3, #2
 800c7e0:	d901      	bls.n	800c7e6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800c7e2:	2303      	movs	r3, #3
 800c7e4:	e10e      	b.n	800ca04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c7e6:	4b39      	ldr	r3, [pc, #228]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d1f0      	bne.n	800c7d4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c7f2:	4b36      	ldr	r3, [pc, #216]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c7f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c7f6:	4b37      	ldr	r3, [pc, #220]	@ (800c8d4 <HAL_RCC_OscConfig+0x774>)
 800c7f8:	4013      	ands	r3, r2
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c802:	0112      	lsls	r2, r2, #4
 800c804:	430a      	orrs	r2, r1
 800c806:	4931      	ldr	r1, [pc, #196]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c808:	4313      	orrs	r3, r2
 800c80a:	628b      	str	r3, [r1, #40]	@ 0x28
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c810:	3b01      	subs	r3, #1
 800c812:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c81a:	3b01      	subs	r3, #1
 800c81c:	025b      	lsls	r3, r3, #9
 800c81e:	b29b      	uxth	r3, r3
 800c820:	431a      	orrs	r2, r3
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c826:	3b01      	subs	r3, #1
 800c828:	041b      	lsls	r3, r3, #16
 800c82a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c82e:	431a      	orrs	r2, r3
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c834:	3b01      	subs	r3, #1
 800c836:	061b      	lsls	r3, r3, #24
 800c838:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c83c:	4923      	ldr	r1, [pc, #140]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c83e:	4313      	orrs	r3, r2
 800c840:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c842:	4b22      	ldr	r3, [pc, #136]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c846:	4a21      	ldr	r2, [pc, #132]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c848:	f023 0301 	bic.w	r3, r3, #1
 800c84c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c84e:	4b1f      	ldr	r3, [pc, #124]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c850:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c852:	4b21      	ldr	r3, [pc, #132]	@ (800c8d8 <HAL_RCC_OscConfig+0x778>)
 800c854:	4013      	ands	r3, r2
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c85a:	00d2      	lsls	r2, r2, #3
 800c85c:	491b      	ldr	r1, [pc, #108]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c85e:	4313      	orrs	r3, r2
 800c860:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c862:	4b1a      	ldr	r3, [pc, #104]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c866:	f023 020c 	bic.w	r2, r3, #12
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c86e:	4917      	ldr	r1, [pc, #92]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c870:	4313      	orrs	r3, r2
 800c872:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c874:	4b15      	ldr	r3, [pc, #84]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c878:	f023 0202 	bic.w	r2, r3, #2
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c880:	4912      	ldr	r1, [pc, #72]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c882:	4313      	orrs	r3, r2
 800c884:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c886:	4b11      	ldr	r3, [pc, #68]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c88a:	4a10      	ldr	r2, [pc, #64]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c88c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c890:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c892:	4b0e      	ldr	r3, [pc, #56]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c896:	4a0d      	ldr	r2, [pc, #52]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c89c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c89e:	4b0b      	ldr	r3, [pc, #44]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c8a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8a2:	4a0a      	ldr	r2, [pc, #40]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c8a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c8a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c8aa:	4b08      	ldr	r3, [pc, #32]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c8ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8ae:	4a07      	ldr	r2, [pc, #28]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c8b0:	f043 0301 	orr.w	r3, r3, #1
 800c8b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c8b6:	4b05      	ldr	r3, [pc, #20]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4a04      	ldr	r2, [pc, #16]	@ (800c8cc <HAL_RCC_OscConfig+0x76c>)
 800c8bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c8c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8c2:	f7f5 fdc5 	bl	8002450 <HAL_GetTick>
 800c8c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c8c8:	e011      	b.n	800c8ee <HAL_RCC_OscConfig+0x78e>
 800c8ca:	bf00      	nop
 800c8cc:	58024400 	.word	0x58024400
 800c8d0:	58024800 	.word	0x58024800
 800c8d4:	fffffc0c 	.word	0xfffffc0c
 800c8d8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8dc:	f7f5 fdb8 	bl	8002450 <HAL_GetTick>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e4:	1ad3      	subs	r3, r2, r3
 800c8e6:	2b02      	cmp	r3, #2
 800c8e8:	d901      	bls.n	800c8ee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800c8ea:	2303      	movs	r3, #3
 800c8ec:	e08a      	b.n	800ca04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c8ee:	4b47      	ldr	r3, [pc, #284]	@ (800ca0c <HAL_RCC_OscConfig+0x8ac>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d0f0      	beq.n	800c8dc <HAL_RCC_OscConfig+0x77c>
 800c8fa:	e082      	b.n	800ca02 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c8fc:	4b43      	ldr	r3, [pc, #268]	@ (800ca0c <HAL_RCC_OscConfig+0x8ac>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a42      	ldr	r2, [pc, #264]	@ (800ca0c <HAL_RCC_OscConfig+0x8ac>)
 800c902:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c908:	f7f5 fda2 	bl	8002450 <HAL_GetTick>
 800c90c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c90e:	e008      	b.n	800c922 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c910:	f7f5 fd9e 	bl	8002450 <HAL_GetTick>
 800c914:	4602      	mov	r2, r0
 800c916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c918:	1ad3      	subs	r3, r2, r3
 800c91a:	2b02      	cmp	r3, #2
 800c91c:	d901      	bls.n	800c922 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800c91e:	2303      	movs	r3, #3
 800c920:	e070      	b.n	800ca04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c922:	4b3a      	ldr	r3, [pc, #232]	@ (800ca0c <HAL_RCC_OscConfig+0x8ac>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d1f0      	bne.n	800c910 <HAL_RCC_OscConfig+0x7b0>
 800c92e:	e068      	b.n	800ca02 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c930:	4b36      	ldr	r3, [pc, #216]	@ (800ca0c <HAL_RCC_OscConfig+0x8ac>)
 800c932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c934:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c936:	4b35      	ldr	r3, [pc, #212]	@ (800ca0c <HAL_RCC_OscConfig+0x8ac>)
 800c938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c93a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c940:	2b01      	cmp	r3, #1
 800c942:	d031      	beq.n	800c9a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	f003 0203 	and.w	r2, r3, #3
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c94e:	429a      	cmp	r2, r3
 800c950:	d12a      	bne.n	800c9a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	091b      	lsrs	r3, r3, #4
 800c956:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c95e:	429a      	cmp	r2, r3
 800c960:	d122      	bne.n	800c9a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c96c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c96e:	429a      	cmp	r2, r3
 800c970:	d11a      	bne.n	800c9a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	0a5b      	lsrs	r3, r3, #9
 800c976:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c97e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c980:	429a      	cmp	r2, r3
 800c982:	d111      	bne.n	800c9a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	0c1b      	lsrs	r3, r3, #16
 800c988:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c990:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c992:	429a      	cmp	r2, r3
 800c994:	d108      	bne.n	800c9a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	0e1b      	lsrs	r3, r3, #24
 800c99a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d001      	beq.n	800c9ac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e02b      	b.n	800ca04 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c9ac:	4b17      	ldr	r3, [pc, #92]	@ (800ca0c <HAL_RCC_OscConfig+0x8ac>)
 800c9ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9b0:	08db      	lsrs	r3, r3, #3
 800c9b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9b6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c9bc:	693a      	ldr	r2, [r7, #16]
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d01f      	beq.n	800ca02 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c9c2:	4b12      	ldr	r3, [pc, #72]	@ (800ca0c <HAL_RCC_OscConfig+0x8ac>)
 800c9c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9c6:	4a11      	ldr	r2, [pc, #68]	@ (800ca0c <HAL_RCC_OscConfig+0x8ac>)
 800c9c8:	f023 0301 	bic.w	r3, r3, #1
 800c9cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c9ce:	f7f5 fd3f 	bl	8002450 <HAL_GetTick>
 800c9d2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c9d4:	bf00      	nop
 800c9d6:	f7f5 fd3b 	bl	8002450 <HAL_GetTick>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d0f9      	beq.n	800c9d6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c9e2:	4b0a      	ldr	r3, [pc, #40]	@ (800ca0c <HAL_RCC_OscConfig+0x8ac>)
 800c9e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c9e6:	4b0a      	ldr	r3, [pc, #40]	@ (800ca10 <HAL_RCC_OscConfig+0x8b0>)
 800c9e8:	4013      	ands	r3, r2
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c9ee:	00d2      	lsls	r2, r2, #3
 800c9f0:	4906      	ldr	r1, [pc, #24]	@ (800ca0c <HAL_RCC_OscConfig+0x8ac>)
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c9f6:	4b05      	ldr	r3, [pc, #20]	@ (800ca0c <HAL_RCC_OscConfig+0x8ac>)
 800c9f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9fa:	4a04      	ldr	r2, [pc, #16]	@ (800ca0c <HAL_RCC_OscConfig+0x8ac>)
 800c9fc:	f043 0301 	orr.w	r3, r3, #1
 800ca00:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ca02:	2300      	movs	r3, #0
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3730      	adds	r7, #48	@ 0x30
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	58024400 	.word	0x58024400
 800ca10:	ffff0007 	.word	0xffff0007

0800ca14 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b086      	sub	sp, #24
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d101      	bne.n	800ca28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ca24:	2301      	movs	r3, #1
 800ca26:	e19c      	b.n	800cd62 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ca28:	4b8a      	ldr	r3, [pc, #552]	@ (800cc54 <HAL_RCC_ClockConfig+0x240>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f003 030f 	and.w	r3, r3, #15
 800ca30:	683a      	ldr	r2, [r7, #0]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d910      	bls.n	800ca58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca36:	4b87      	ldr	r3, [pc, #540]	@ (800cc54 <HAL_RCC_ClockConfig+0x240>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f023 020f 	bic.w	r2, r3, #15
 800ca3e:	4985      	ldr	r1, [pc, #532]	@ (800cc54 <HAL_RCC_ClockConfig+0x240>)
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	4313      	orrs	r3, r2
 800ca44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca46:	4b83      	ldr	r3, [pc, #524]	@ (800cc54 <HAL_RCC_ClockConfig+0x240>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f003 030f 	and.w	r3, r3, #15
 800ca4e:	683a      	ldr	r2, [r7, #0]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d001      	beq.n	800ca58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ca54:	2301      	movs	r3, #1
 800ca56:	e184      	b.n	800cd62 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f003 0304 	and.w	r3, r3, #4
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d010      	beq.n	800ca86 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	691a      	ldr	r2, [r3, #16]
 800ca68:	4b7b      	ldr	r3, [pc, #492]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800ca6a:	699b      	ldr	r3, [r3, #24]
 800ca6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d908      	bls.n	800ca86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ca74:	4b78      	ldr	r3, [pc, #480]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800ca76:	699b      	ldr	r3, [r3, #24]
 800ca78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	691b      	ldr	r3, [r3, #16]
 800ca80:	4975      	ldr	r1, [pc, #468]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800ca82:	4313      	orrs	r3, r2
 800ca84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f003 0308 	and.w	r3, r3, #8
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d010      	beq.n	800cab4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	695a      	ldr	r2, [r3, #20]
 800ca96:	4b70      	ldr	r3, [pc, #448]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800ca98:	69db      	ldr	r3, [r3, #28]
 800ca9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d908      	bls.n	800cab4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800caa2:	4b6d      	ldr	r3, [pc, #436]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800caa4:	69db      	ldr	r3, [r3, #28]
 800caa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	695b      	ldr	r3, [r3, #20]
 800caae:	496a      	ldr	r1, [pc, #424]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800cab0:	4313      	orrs	r3, r2
 800cab2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f003 0310 	and.w	r3, r3, #16
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d010      	beq.n	800cae2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	699a      	ldr	r2, [r3, #24]
 800cac4:	4b64      	ldr	r3, [pc, #400]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800cac6:	69db      	ldr	r3, [r3, #28]
 800cac8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cacc:	429a      	cmp	r2, r3
 800cace:	d908      	bls.n	800cae2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800cad0:	4b61      	ldr	r3, [pc, #388]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800cad2:	69db      	ldr	r3, [r3, #28]
 800cad4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	699b      	ldr	r3, [r3, #24]
 800cadc:	495e      	ldr	r1, [pc, #376]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800cade:	4313      	orrs	r3, r2
 800cae0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f003 0320 	and.w	r3, r3, #32
 800caea:	2b00      	cmp	r3, #0
 800caec:	d010      	beq.n	800cb10 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	69da      	ldr	r2, [r3, #28]
 800caf2:	4b59      	ldr	r3, [pc, #356]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800caf4:	6a1b      	ldr	r3, [r3, #32]
 800caf6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d908      	bls.n	800cb10 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800cafe:	4b56      	ldr	r3, [pc, #344]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800cb00:	6a1b      	ldr	r3, [r3, #32]
 800cb02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	69db      	ldr	r3, [r3, #28]
 800cb0a:	4953      	ldr	r1, [pc, #332]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	f003 0302 	and.w	r3, r3, #2
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d010      	beq.n	800cb3e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	68da      	ldr	r2, [r3, #12]
 800cb20:	4b4d      	ldr	r3, [pc, #308]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800cb22:	699b      	ldr	r3, [r3, #24]
 800cb24:	f003 030f 	and.w	r3, r3, #15
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d908      	bls.n	800cb3e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cb2c:	4b4a      	ldr	r3, [pc, #296]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800cb2e:	699b      	ldr	r3, [r3, #24]
 800cb30:	f023 020f 	bic.w	r2, r3, #15
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	68db      	ldr	r3, [r3, #12]
 800cb38:	4947      	ldr	r1, [pc, #284]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f003 0301 	and.w	r3, r3, #1
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d055      	beq.n	800cbf6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800cb4a:	4b43      	ldr	r3, [pc, #268]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800cb4c:	699b      	ldr	r3, [r3, #24]
 800cb4e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	4940      	ldr	r1, [pc, #256]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	2b02      	cmp	r3, #2
 800cb62:	d107      	bne.n	800cb74 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cb64:	4b3c      	ldr	r3, [pc, #240]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d121      	bne.n	800cbb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cb70:	2301      	movs	r3, #1
 800cb72:	e0f6      	b.n	800cd62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	2b03      	cmp	r3, #3
 800cb7a:	d107      	bne.n	800cb8c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cb7c:	4b36      	ldr	r3, [pc, #216]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d115      	bne.n	800cbb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cb88:	2301      	movs	r3, #1
 800cb8a:	e0ea      	b.n	800cd62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d107      	bne.n	800cba4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cb94:	4b30      	ldr	r3, [pc, #192]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d109      	bne.n	800cbb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cba0:	2301      	movs	r3, #1
 800cba2:	e0de      	b.n	800cd62 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cba4:	4b2c      	ldr	r3, [pc, #176]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f003 0304 	and.w	r3, r3, #4
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d101      	bne.n	800cbb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	e0d6      	b.n	800cd62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cbb4:	4b28      	ldr	r3, [pc, #160]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800cbb6:	691b      	ldr	r3, [r3, #16]
 800cbb8:	f023 0207 	bic.w	r2, r3, #7
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	4925      	ldr	r1, [pc, #148]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbc6:	f7f5 fc43 	bl	8002450 <HAL_GetTick>
 800cbca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cbcc:	e00a      	b.n	800cbe4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cbce:	f7f5 fc3f 	bl	8002450 <HAL_GetTick>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	1ad3      	subs	r3, r2, r3
 800cbd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d901      	bls.n	800cbe4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800cbe0:	2303      	movs	r3, #3
 800cbe2:	e0be      	b.n	800cd62 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cbe4:	4b1c      	ldr	r3, [pc, #112]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800cbe6:	691b      	ldr	r3, [r3, #16]
 800cbe8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	00db      	lsls	r3, r3, #3
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d1eb      	bne.n	800cbce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f003 0302 	and.w	r3, r3, #2
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d010      	beq.n	800cc24 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	68da      	ldr	r2, [r3, #12]
 800cc06:	4b14      	ldr	r3, [pc, #80]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800cc08:	699b      	ldr	r3, [r3, #24]
 800cc0a:	f003 030f 	and.w	r3, r3, #15
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d208      	bcs.n	800cc24 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cc12:	4b11      	ldr	r3, [pc, #68]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800cc14:	699b      	ldr	r3, [r3, #24]
 800cc16:	f023 020f 	bic.w	r2, r3, #15
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	68db      	ldr	r3, [r3, #12]
 800cc1e:	490e      	ldr	r1, [pc, #56]	@ (800cc58 <HAL_RCC_ClockConfig+0x244>)
 800cc20:	4313      	orrs	r3, r2
 800cc22:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cc24:	4b0b      	ldr	r3, [pc, #44]	@ (800cc54 <HAL_RCC_ClockConfig+0x240>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f003 030f 	and.w	r3, r3, #15
 800cc2c:	683a      	ldr	r2, [r7, #0]
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d214      	bcs.n	800cc5c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc32:	4b08      	ldr	r3, [pc, #32]	@ (800cc54 <HAL_RCC_ClockConfig+0x240>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f023 020f 	bic.w	r2, r3, #15
 800cc3a:	4906      	ldr	r1, [pc, #24]	@ (800cc54 <HAL_RCC_ClockConfig+0x240>)
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	4313      	orrs	r3, r2
 800cc40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc42:	4b04      	ldr	r3, [pc, #16]	@ (800cc54 <HAL_RCC_ClockConfig+0x240>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f003 030f 	and.w	r3, r3, #15
 800cc4a:	683a      	ldr	r2, [r7, #0]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d005      	beq.n	800cc5c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800cc50:	2301      	movs	r3, #1
 800cc52:	e086      	b.n	800cd62 <HAL_RCC_ClockConfig+0x34e>
 800cc54:	52002000 	.word	0x52002000
 800cc58:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f003 0304 	and.w	r3, r3, #4
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d010      	beq.n	800cc8a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	691a      	ldr	r2, [r3, #16]
 800cc6c:	4b3f      	ldr	r3, [pc, #252]	@ (800cd6c <HAL_RCC_ClockConfig+0x358>)
 800cc6e:	699b      	ldr	r3, [r3, #24]
 800cc70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d208      	bcs.n	800cc8a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800cc78:	4b3c      	ldr	r3, [pc, #240]	@ (800cd6c <HAL_RCC_ClockConfig+0x358>)
 800cc7a:	699b      	ldr	r3, [r3, #24]
 800cc7c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	691b      	ldr	r3, [r3, #16]
 800cc84:	4939      	ldr	r1, [pc, #228]	@ (800cd6c <HAL_RCC_ClockConfig+0x358>)
 800cc86:	4313      	orrs	r3, r2
 800cc88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f003 0308 	and.w	r3, r3, #8
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d010      	beq.n	800ccb8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	695a      	ldr	r2, [r3, #20]
 800cc9a:	4b34      	ldr	r3, [pc, #208]	@ (800cd6c <HAL_RCC_ClockConfig+0x358>)
 800cc9c:	69db      	ldr	r3, [r3, #28]
 800cc9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d208      	bcs.n	800ccb8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800cca6:	4b31      	ldr	r3, [pc, #196]	@ (800cd6c <HAL_RCC_ClockConfig+0x358>)
 800cca8:	69db      	ldr	r3, [r3, #28]
 800ccaa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	695b      	ldr	r3, [r3, #20]
 800ccb2:	492e      	ldr	r1, [pc, #184]	@ (800cd6c <HAL_RCC_ClockConfig+0x358>)
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f003 0310 	and.w	r3, r3, #16
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d010      	beq.n	800cce6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	699a      	ldr	r2, [r3, #24]
 800ccc8:	4b28      	ldr	r3, [pc, #160]	@ (800cd6c <HAL_RCC_ClockConfig+0x358>)
 800ccca:	69db      	ldr	r3, [r3, #28]
 800cccc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d208      	bcs.n	800cce6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ccd4:	4b25      	ldr	r3, [pc, #148]	@ (800cd6c <HAL_RCC_ClockConfig+0x358>)
 800ccd6:	69db      	ldr	r3, [r3, #28]
 800ccd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	699b      	ldr	r3, [r3, #24]
 800cce0:	4922      	ldr	r1, [pc, #136]	@ (800cd6c <HAL_RCC_ClockConfig+0x358>)
 800cce2:	4313      	orrs	r3, r2
 800cce4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f003 0320 	and.w	r3, r3, #32
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d010      	beq.n	800cd14 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	69da      	ldr	r2, [r3, #28]
 800ccf6:	4b1d      	ldr	r3, [pc, #116]	@ (800cd6c <HAL_RCC_ClockConfig+0x358>)
 800ccf8:	6a1b      	ldr	r3, [r3, #32]
 800ccfa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d208      	bcs.n	800cd14 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800cd02:	4b1a      	ldr	r3, [pc, #104]	@ (800cd6c <HAL_RCC_ClockConfig+0x358>)
 800cd04:	6a1b      	ldr	r3, [r3, #32]
 800cd06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	69db      	ldr	r3, [r3, #28]
 800cd0e:	4917      	ldr	r1, [pc, #92]	@ (800cd6c <HAL_RCC_ClockConfig+0x358>)
 800cd10:	4313      	orrs	r3, r2
 800cd12:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800cd14:	f000 f834 	bl	800cd80 <HAL_RCC_GetSysClockFreq>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	4b14      	ldr	r3, [pc, #80]	@ (800cd6c <HAL_RCC_ClockConfig+0x358>)
 800cd1c:	699b      	ldr	r3, [r3, #24]
 800cd1e:	0a1b      	lsrs	r3, r3, #8
 800cd20:	f003 030f 	and.w	r3, r3, #15
 800cd24:	4912      	ldr	r1, [pc, #72]	@ (800cd70 <HAL_RCC_ClockConfig+0x35c>)
 800cd26:	5ccb      	ldrb	r3, [r1, r3]
 800cd28:	f003 031f 	and.w	r3, r3, #31
 800cd2c:	fa22 f303 	lsr.w	r3, r2, r3
 800cd30:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cd32:	4b0e      	ldr	r3, [pc, #56]	@ (800cd6c <HAL_RCC_ClockConfig+0x358>)
 800cd34:	699b      	ldr	r3, [r3, #24]
 800cd36:	f003 030f 	and.w	r3, r3, #15
 800cd3a:	4a0d      	ldr	r2, [pc, #52]	@ (800cd70 <HAL_RCC_ClockConfig+0x35c>)
 800cd3c:	5cd3      	ldrb	r3, [r2, r3]
 800cd3e:	f003 031f 	and.w	r3, r3, #31
 800cd42:	693a      	ldr	r2, [r7, #16]
 800cd44:	fa22 f303 	lsr.w	r3, r2, r3
 800cd48:	4a0a      	ldr	r2, [pc, #40]	@ (800cd74 <HAL_RCC_ClockConfig+0x360>)
 800cd4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cd4c:	4a0a      	ldr	r2, [pc, #40]	@ (800cd78 <HAL_RCC_ClockConfig+0x364>)
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800cd52:	4b0a      	ldr	r3, [pc, #40]	@ (800cd7c <HAL_RCC_ClockConfig+0x368>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7f5 fb30 	bl	80023bc <HAL_InitTick>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800cd60:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3718      	adds	r7, #24
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	58024400 	.word	0x58024400
 800cd70:	080160cc 	.word	0x080160cc
 800cd74:	2400000c 	.word	0x2400000c
 800cd78:	24000008 	.word	0x24000008
 800cd7c:	24000010 	.word	0x24000010

0800cd80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b089      	sub	sp, #36	@ 0x24
 800cd84:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cd86:	4bb3      	ldr	r3, [pc, #716]	@ (800d054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cd88:	691b      	ldr	r3, [r3, #16]
 800cd8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cd8e:	2b18      	cmp	r3, #24
 800cd90:	f200 8155 	bhi.w	800d03e <HAL_RCC_GetSysClockFreq+0x2be>
 800cd94:	a201      	add	r2, pc, #4	@ (adr r2, 800cd9c <HAL_RCC_GetSysClockFreq+0x1c>)
 800cd96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd9a:	bf00      	nop
 800cd9c:	0800ce01 	.word	0x0800ce01
 800cda0:	0800d03f 	.word	0x0800d03f
 800cda4:	0800d03f 	.word	0x0800d03f
 800cda8:	0800d03f 	.word	0x0800d03f
 800cdac:	0800d03f 	.word	0x0800d03f
 800cdb0:	0800d03f 	.word	0x0800d03f
 800cdb4:	0800d03f 	.word	0x0800d03f
 800cdb8:	0800d03f 	.word	0x0800d03f
 800cdbc:	0800ce27 	.word	0x0800ce27
 800cdc0:	0800d03f 	.word	0x0800d03f
 800cdc4:	0800d03f 	.word	0x0800d03f
 800cdc8:	0800d03f 	.word	0x0800d03f
 800cdcc:	0800d03f 	.word	0x0800d03f
 800cdd0:	0800d03f 	.word	0x0800d03f
 800cdd4:	0800d03f 	.word	0x0800d03f
 800cdd8:	0800d03f 	.word	0x0800d03f
 800cddc:	0800ce2d 	.word	0x0800ce2d
 800cde0:	0800d03f 	.word	0x0800d03f
 800cde4:	0800d03f 	.word	0x0800d03f
 800cde8:	0800d03f 	.word	0x0800d03f
 800cdec:	0800d03f 	.word	0x0800d03f
 800cdf0:	0800d03f 	.word	0x0800d03f
 800cdf4:	0800d03f 	.word	0x0800d03f
 800cdf8:	0800d03f 	.word	0x0800d03f
 800cdfc:	0800ce33 	.word	0x0800ce33
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce00:	4b94      	ldr	r3, [pc, #592]	@ (800d054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f003 0320 	and.w	r3, r3, #32
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d009      	beq.n	800ce20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce0c:	4b91      	ldr	r3, [pc, #580]	@ (800d054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	08db      	lsrs	r3, r3, #3
 800ce12:	f003 0303 	and.w	r3, r3, #3
 800ce16:	4a90      	ldr	r2, [pc, #576]	@ (800d058 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ce18:	fa22 f303 	lsr.w	r3, r2, r3
 800ce1c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ce1e:	e111      	b.n	800d044 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ce20:	4b8d      	ldr	r3, [pc, #564]	@ (800d058 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ce22:	61bb      	str	r3, [r7, #24]
      break;
 800ce24:	e10e      	b.n	800d044 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ce26:	4b8d      	ldr	r3, [pc, #564]	@ (800d05c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ce28:	61bb      	str	r3, [r7, #24]
      break;
 800ce2a:	e10b      	b.n	800d044 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ce2c:	4b8c      	ldr	r3, [pc, #560]	@ (800d060 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ce2e:	61bb      	str	r3, [r7, #24]
      break;
 800ce30:	e108      	b.n	800d044 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ce32:	4b88      	ldr	r3, [pc, #544]	@ (800d054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce36:	f003 0303 	and.w	r3, r3, #3
 800ce3a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ce3c:	4b85      	ldr	r3, [pc, #532]	@ (800d054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce40:	091b      	lsrs	r3, r3, #4
 800ce42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ce46:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ce48:	4b82      	ldr	r3, [pc, #520]	@ (800d054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce4c:	f003 0301 	and.w	r3, r3, #1
 800ce50:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ce52:	4b80      	ldr	r3, [pc, #512]	@ (800d054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce56:	08db      	lsrs	r3, r3, #3
 800ce58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce5c:	68fa      	ldr	r2, [r7, #12]
 800ce5e:	fb02 f303 	mul.w	r3, r2, r3
 800ce62:	ee07 3a90 	vmov	s15, r3
 800ce66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce6a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	f000 80e1 	beq.w	800d038 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	2b02      	cmp	r3, #2
 800ce7a:	f000 8083 	beq.w	800cf84 <HAL_RCC_GetSysClockFreq+0x204>
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	2b02      	cmp	r3, #2
 800ce82:	f200 80a1 	bhi.w	800cfc8 <HAL_RCC_GetSysClockFreq+0x248>
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d003      	beq.n	800ce94 <HAL_RCC_GetSysClockFreq+0x114>
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d056      	beq.n	800cf40 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ce92:	e099      	b.n	800cfc8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce94:	4b6f      	ldr	r3, [pc, #444]	@ (800d054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f003 0320 	and.w	r3, r3, #32
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d02d      	beq.n	800cefc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cea0:	4b6c      	ldr	r3, [pc, #432]	@ (800d054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	08db      	lsrs	r3, r3, #3
 800cea6:	f003 0303 	and.w	r3, r3, #3
 800ceaa:	4a6b      	ldr	r2, [pc, #428]	@ (800d058 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ceac:	fa22 f303 	lsr.w	r3, r2, r3
 800ceb0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	ee07 3a90 	vmov	s15, r3
 800ceb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	ee07 3a90 	vmov	s15, r3
 800cec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ceca:	4b62      	ldr	r3, [pc, #392]	@ (800d054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ced2:	ee07 3a90 	vmov	s15, r3
 800ced6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceda:	ed97 6a02 	vldr	s12, [r7, #8]
 800cede:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800d064 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ceea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ceee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cef6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800cefa:	e087      	b.n	800d00c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	ee07 3a90 	vmov	s15, r3
 800cf02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf06:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800d068 <HAL_RCC_GetSysClockFreq+0x2e8>
 800cf0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf0e:	4b51      	ldr	r3, [pc, #324]	@ (800d054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cf10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf16:	ee07 3a90 	vmov	s15, r3
 800cf1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf1e:	ed97 6a02 	vldr	s12, [r7, #8]
 800cf22:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800d064 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cf26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cf3e:	e065      	b.n	800d00c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	ee07 3a90 	vmov	s15, r3
 800cf46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf4a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800d06c <HAL_RCC_GetSysClockFreq+0x2ec>
 800cf4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf52:	4b40      	ldr	r3, [pc, #256]	@ (800d054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cf54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf5a:	ee07 3a90 	vmov	s15, r3
 800cf5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf62:	ed97 6a02 	vldr	s12, [r7, #8]
 800cf66:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d064 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cf6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cf82:	e043      	b.n	800d00c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	ee07 3a90 	vmov	s15, r3
 800cf8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf8e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800d070 <HAL_RCC_GetSysClockFreq+0x2f0>
 800cf92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf96:	4b2f      	ldr	r3, [pc, #188]	@ (800d054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cf98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf9e:	ee07 3a90 	vmov	s15, r3
 800cfa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfa6:	ed97 6a02 	vldr	s12, [r7, #8]
 800cfaa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800d064 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cfae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cfba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cfc6:	e021      	b.n	800d00c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	ee07 3a90 	vmov	s15, r3
 800cfce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfd2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800d06c <HAL_RCC_GetSysClockFreq+0x2ec>
 800cfd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfda:	4b1e      	ldr	r3, [pc, #120]	@ (800d054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cfdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfe2:	ee07 3a90 	vmov	s15, r3
 800cfe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfea:	ed97 6a02 	vldr	s12, [r7, #8]
 800cfee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800d064 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d002:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d006:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d00a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d00c:	4b11      	ldr	r3, [pc, #68]	@ (800d054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d00e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d010:	0a5b      	lsrs	r3, r3, #9
 800d012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d016:	3301      	adds	r3, #1
 800d018:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	ee07 3a90 	vmov	s15, r3
 800d020:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d024:	edd7 6a07 	vldr	s13, [r7, #28]
 800d028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d02c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d030:	ee17 3a90 	vmov	r3, s15
 800d034:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800d036:	e005      	b.n	800d044 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800d038:	2300      	movs	r3, #0
 800d03a:	61bb      	str	r3, [r7, #24]
      break;
 800d03c:	e002      	b.n	800d044 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800d03e:	4b07      	ldr	r3, [pc, #28]	@ (800d05c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d040:	61bb      	str	r3, [r7, #24]
      break;
 800d042:	bf00      	nop
  }

  return sysclockfreq;
 800d044:	69bb      	ldr	r3, [r7, #24]
}
 800d046:	4618      	mov	r0, r3
 800d048:	3724      	adds	r7, #36	@ 0x24
 800d04a:	46bd      	mov	sp, r7
 800d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d050:	4770      	bx	lr
 800d052:	bf00      	nop
 800d054:	58024400 	.word	0x58024400
 800d058:	03d09000 	.word	0x03d09000
 800d05c:	003d0900 	.word	0x003d0900
 800d060:	017d7840 	.word	0x017d7840
 800d064:	46000000 	.word	0x46000000
 800d068:	4c742400 	.word	0x4c742400
 800d06c:	4a742400 	.word	0x4a742400
 800d070:	4bbebc20 	.word	0x4bbebc20

0800d074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d07a:	f7ff fe81 	bl	800cd80 <HAL_RCC_GetSysClockFreq>
 800d07e:	4602      	mov	r2, r0
 800d080:	4b10      	ldr	r3, [pc, #64]	@ (800d0c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800d082:	699b      	ldr	r3, [r3, #24]
 800d084:	0a1b      	lsrs	r3, r3, #8
 800d086:	f003 030f 	and.w	r3, r3, #15
 800d08a:	490f      	ldr	r1, [pc, #60]	@ (800d0c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800d08c:	5ccb      	ldrb	r3, [r1, r3]
 800d08e:	f003 031f 	and.w	r3, r3, #31
 800d092:	fa22 f303 	lsr.w	r3, r2, r3
 800d096:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d098:	4b0a      	ldr	r3, [pc, #40]	@ (800d0c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800d09a:	699b      	ldr	r3, [r3, #24]
 800d09c:	f003 030f 	and.w	r3, r3, #15
 800d0a0:	4a09      	ldr	r2, [pc, #36]	@ (800d0c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800d0a2:	5cd3      	ldrb	r3, [r2, r3]
 800d0a4:	f003 031f 	and.w	r3, r3, #31
 800d0a8:	687a      	ldr	r2, [r7, #4]
 800d0aa:	fa22 f303 	lsr.w	r3, r2, r3
 800d0ae:	4a07      	ldr	r2, [pc, #28]	@ (800d0cc <HAL_RCC_GetHCLKFreq+0x58>)
 800d0b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d0b2:	4a07      	ldr	r2, [pc, #28]	@ (800d0d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d0b8:	4b04      	ldr	r3, [pc, #16]	@ (800d0cc <HAL_RCC_GetHCLKFreq+0x58>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3708      	adds	r7, #8
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	58024400 	.word	0x58024400
 800d0c8:	080160cc 	.word	0x080160cc
 800d0cc:	2400000c 	.word	0x2400000c
 800d0d0:	24000008 	.word	0x24000008

0800d0d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800d0d8:	f7ff ffcc 	bl	800d074 <HAL_RCC_GetHCLKFreq>
 800d0dc:	4602      	mov	r2, r0
 800d0de:	4b06      	ldr	r3, [pc, #24]	@ (800d0f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d0e0:	69db      	ldr	r3, [r3, #28]
 800d0e2:	091b      	lsrs	r3, r3, #4
 800d0e4:	f003 0307 	and.w	r3, r3, #7
 800d0e8:	4904      	ldr	r1, [pc, #16]	@ (800d0fc <HAL_RCC_GetPCLK1Freq+0x28>)
 800d0ea:	5ccb      	ldrb	r3, [r1, r3]
 800d0ec:	f003 031f 	and.w	r3, r3, #31
 800d0f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	58024400 	.word	0x58024400
 800d0fc:	080160cc 	.word	0x080160cc

0800d100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800d104:	f7ff ffb6 	bl	800d074 <HAL_RCC_GetHCLKFreq>
 800d108:	4602      	mov	r2, r0
 800d10a:	4b06      	ldr	r3, [pc, #24]	@ (800d124 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d10c:	69db      	ldr	r3, [r3, #28]
 800d10e:	0a1b      	lsrs	r3, r3, #8
 800d110:	f003 0307 	and.w	r3, r3, #7
 800d114:	4904      	ldr	r1, [pc, #16]	@ (800d128 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d116:	5ccb      	ldrb	r3, [r1, r3]
 800d118:	f003 031f 	and.w	r3, r3, #31
 800d11c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800d120:	4618      	mov	r0, r3
 800d122:	bd80      	pop	{r7, pc}
 800d124:	58024400 	.word	0x58024400
 800d128:	080160cc 	.word	0x080160cc

0800d12c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d12c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d130:	b0ca      	sub	sp, #296	@ 0x128
 800d132:	af00      	add	r7, sp, #0
 800d134:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d138:	2300      	movs	r3, #0
 800d13a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d13e:	2300      	movs	r3, #0
 800d140:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800d150:	2500      	movs	r5, #0
 800d152:	ea54 0305 	orrs.w	r3, r4, r5
 800d156:	d049      	beq.n	800d1ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800d158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d15c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d15e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d162:	d02f      	beq.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d164:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d168:	d828      	bhi.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d16a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d16e:	d01a      	beq.n	800d1a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d170:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d174:	d822      	bhi.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d176:	2b00      	cmp	r3, #0
 800d178:	d003      	beq.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d17a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d17e:	d007      	beq.n	800d190 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d180:	e01c      	b.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d182:	4bb8      	ldr	r3, [pc, #736]	@ (800d464 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d186:	4ab7      	ldr	r2, [pc, #732]	@ (800d464 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d188:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d18c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d18e:	e01a      	b.n	800d1c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d194:	3308      	adds	r3, #8
 800d196:	2102      	movs	r1, #2
 800d198:	4618      	mov	r0, r3
 800d19a:	f001 fc8f 	bl	800eabc <RCCEx_PLL2_Config>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d1a4:	e00f      	b.n	800d1c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d1a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1aa:	3328      	adds	r3, #40	@ 0x28
 800d1ac:	2102      	movs	r1, #2
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f001 fd36 	bl	800ec20 <RCCEx_PLL3_Config>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d1ba:	e004      	b.n	800d1c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d1c2:	e000      	b.n	800d1c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800d1c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d10a      	bne.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d1ce:	4ba5      	ldr	r3, [pc, #660]	@ (800d464 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d1d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d1dc:	4aa1      	ldr	r2, [pc, #644]	@ (800d464 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d1de:	430b      	orrs	r3, r1
 800d1e0:	6513      	str	r3, [r2, #80]	@ 0x50
 800d1e2:	e003      	b.n	800d1ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d1e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d1ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800d1f8:	f04f 0900 	mov.w	r9, #0
 800d1fc:	ea58 0309 	orrs.w	r3, r8, r9
 800d200:	d047      	beq.n	800d292 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800d202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d208:	2b04      	cmp	r3, #4
 800d20a:	d82a      	bhi.n	800d262 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d20c:	a201      	add	r2, pc, #4	@ (adr r2, 800d214 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800d20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d212:	bf00      	nop
 800d214:	0800d229 	.word	0x0800d229
 800d218:	0800d237 	.word	0x0800d237
 800d21c:	0800d24d 	.word	0x0800d24d
 800d220:	0800d26b 	.word	0x0800d26b
 800d224:	0800d26b 	.word	0x0800d26b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d228:	4b8e      	ldr	r3, [pc, #568]	@ (800d464 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d22a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d22c:	4a8d      	ldr	r2, [pc, #564]	@ (800d464 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d22e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d232:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d234:	e01a      	b.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d23a:	3308      	adds	r3, #8
 800d23c:	2100      	movs	r1, #0
 800d23e:	4618      	mov	r0, r3
 800d240:	f001 fc3c 	bl	800eabc <RCCEx_PLL2_Config>
 800d244:	4603      	mov	r3, r0
 800d246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d24a:	e00f      	b.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d24c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d250:	3328      	adds	r3, #40	@ 0x28
 800d252:	2100      	movs	r1, #0
 800d254:	4618      	mov	r0, r3
 800d256:	f001 fce3 	bl	800ec20 <RCCEx_PLL3_Config>
 800d25a:	4603      	mov	r3, r0
 800d25c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d260:	e004      	b.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d262:	2301      	movs	r3, #1
 800d264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d268:	e000      	b.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800d26a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d26c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d270:	2b00      	cmp	r3, #0
 800d272:	d10a      	bne.n	800d28a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d274:	4b7b      	ldr	r3, [pc, #492]	@ (800d464 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d278:	f023 0107 	bic.w	r1, r3, #7
 800d27c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d282:	4a78      	ldr	r2, [pc, #480]	@ (800d464 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d284:	430b      	orrs	r3, r1
 800d286:	6513      	str	r3, [r2, #80]	@ 0x50
 800d288:	e003      	b.n	800d292 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d28a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d28e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800d292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d29a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800d29e:	f04f 0b00 	mov.w	fp, #0
 800d2a2:	ea5a 030b 	orrs.w	r3, sl, fp
 800d2a6:	d04c      	beq.n	800d342 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800d2a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d2ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d2b2:	d030      	beq.n	800d316 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800d2b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d2b8:	d829      	bhi.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d2ba:	2bc0      	cmp	r3, #192	@ 0xc0
 800d2bc:	d02d      	beq.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d2be:	2bc0      	cmp	r3, #192	@ 0xc0
 800d2c0:	d825      	bhi.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d2c2:	2b80      	cmp	r3, #128	@ 0x80
 800d2c4:	d018      	beq.n	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800d2c6:	2b80      	cmp	r3, #128	@ 0x80
 800d2c8:	d821      	bhi.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d002      	beq.n	800d2d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800d2ce:	2b40      	cmp	r3, #64	@ 0x40
 800d2d0:	d007      	beq.n	800d2e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800d2d2:	e01c      	b.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d2d4:	4b63      	ldr	r3, [pc, #396]	@ (800d464 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d2d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2d8:	4a62      	ldr	r2, [pc, #392]	@ (800d464 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d2da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d2de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d2e0:	e01c      	b.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d2e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2e6:	3308      	adds	r3, #8
 800d2e8:	2100      	movs	r1, #0
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f001 fbe6 	bl	800eabc <RCCEx_PLL2_Config>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d2f6:	e011      	b.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d2f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2fc:	3328      	adds	r3, #40	@ 0x28
 800d2fe:	2100      	movs	r1, #0
 800d300:	4618      	mov	r0, r3
 800d302:	f001 fc8d 	bl	800ec20 <RCCEx_PLL3_Config>
 800d306:	4603      	mov	r3, r0
 800d308:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d30c:	e006      	b.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d30e:	2301      	movs	r3, #1
 800d310:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d314:	e002      	b.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800d316:	bf00      	nop
 800d318:	e000      	b.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800d31a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d31c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d320:	2b00      	cmp	r3, #0
 800d322:	d10a      	bne.n	800d33a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800d324:	4b4f      	ldr	r3, [pc, #316]	@ (800d464 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d328:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800d32c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d332:	4a4c      	ldr	r2, [pc, #304]	@ (800d464 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d334:	430b      	orrs	r3, r1
 800d336:	6513      	str	r3, [r2, #80]	@ 0x50
 800d338:	e003      	b.n	800d342 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d33a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d33e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800d342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d34a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800d34e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800d352:	2300      	movs	r3, #0
 800d354:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800d358:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800d35c:	460b      	mov	r3, r1
 800d35e:	4313      	orrs	r3, r2
 800d360:	d053      	beq.n	800d40a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800d362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d366:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d36a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d36e:	d035      	beq.n	800d3dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800d370:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d374:	d82e      	bhi.n	800d3d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d376:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d37a:	d031      	beq.n	800d3e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800d37c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d380:	d828      	bhi.n	800d3d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d382:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d386:	d01a      	beq.n	800d3be <HAL_RCCEx_PeriphCLKConfig+0x292>
 800d388:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d38c:	d822      	bhi.n	800d3d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d003      	beq.n	800d39a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800d392:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d396:	d007      	beq.n	800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800d398:	e01c      	b.n	800d3d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d39a:	4b32      	ldr	r3, [pc, #200]	@ (800d464 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d39e:	4a31      	ldr	r2, [pc, #196]	@ (800d464 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d3a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d3a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d3a6:	e01c      	b.n	800d3e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3ac:	3308      	adds	r3, #8
 800d3ae:	2100      	movs	r1, #0
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f001 fb83 	bl	800eabc <RCCEx_PLL2_Config>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d3bc:	e011      	b.n	800d3e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3c2:	3328      	adds	r3, #40	@ 0x28
 800d3c4:	2100      	movs	r1, #0
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f001 fc2a 	bl	800ec20 <RCCEx_PLL3_Config>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d3d2:	e006      	b.n	800d3e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d3da:	e002      	b.n	800d3e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800d3dc:	bf00      	nop
 800d3de:	e000      	b.n	800d3e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800d3e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d3e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d10b      	bne.n	800d402 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800d3ea:	4b1e      	ldr	r3, [pc, #120]	@ (800d464 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d3ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3ee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800d3f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d3fa:	4a1a      	ldr	r2, [pc, #104]	@ (800d464 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d3fc:	430b      	orrs	r3, r1
 800d3fe:	6593      	str	r3, [r2, #88]	@ 0x58
 800d400:	e003      	b.n	800d40a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d406:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800d40a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d412:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800d416:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d41a:	2300      	movs	r3, #0
 800d41c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800d420:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800d424:	460b      	mov	r3, r1
 800d426:	4313      	orrs	r3, r2
 800d428:	d056      	beq.n	800d4d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800d42a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d42e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d432:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d436:	d038      	beq.n	800d4aa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800d438:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d43c:	d831      	bhi.n	800d4a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d43e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d442:	d034      	beq.n	800d4ae <HAL_RCCEx_PeriphCLKConfig+0x382>
 800d444:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d448:	d82b      	bhi.n	800d4a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d44a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d44e:	d01d      	beq.n	800d48c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800d450:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d454:	d825      	bhi.n	800d4a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d456:	2b00      	cmp	r3, #0
 800d458:	d006      	beq.n	800d468 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800d45a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d45e:	d00a      	beq.n	800d476 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800d460:	e01f      	b.n	800d4a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d462:	bf00      	nop
 800d464:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d468:	4ba2      	ldr	r3, [pc, #648]	@ (800d6f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d46a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d46c:	4aa1      	ldr	r2, [pc, #644]	@ (800d6f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d46e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d472:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d474:	e01c      	b.n	800d4b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d47a:	3308      	adds	r3, #8
 800d47c:	2100      	movs	r1, #0
 800d47e:	4618      	mov	r0, r3
 800d480:	f001 fb1c 	bl	800eabc <RCCEx_PLL2_Config>
 800d484:	4603      	mov	r3, r0
 800d486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d48a:	e011      	b.n	800d4b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d48c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d490:	3328      	adds	r3, #40	@ 0x28
 800d492:	2100      	movs	r1, #0
 800d494:	4618      	mov	r0, r3
 800d496:	f001 fbc3 	bl	800ec20 <RCCEx_PLL3_Config>
 800d49a:	4603      	mov	r3, r0
 800d49c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d4a0:	e006      	b.n	800d4b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d4a8:	e002      	b.n	800d4b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800d4aa:	bf00      	nop
 800d4ac:	e000      	b.n	800d4b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800d4ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d4b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d10b      	bne.n	800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800d4b8:	4b8e      	ldr	r3, [pc, #568]	@ (800d6f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d4ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d4bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800d4c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d4c8:	4a8a      	ldr	r2, [pc, #552]	@ (800d6f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d4ca:	430b      	orrs	r3, r1
 800d4cc:	6593      	str	r3, [r2, #88]	@ 0x58
 800d4ce:	e003      	b.n	800d4d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d4d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d4d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800d4e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d4ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800d4f2:	460b      	mov	r3, r1
 800d4f4:	4313      	orrs	r3, r2
 800d4f6:	d03a      	beq.n	800d56e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800d4f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d4fe:	2b30      	cmp	r3, #48	@ 0x30
 800d500:	d01f      	beq.n	800d542 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800d502:	2b30      	cmp	r3, #48	@ 0x30
 800d504:	d819      	bhi.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800d506:	2b20      	cmp	r3, #32
 800d508:	d00c      	beq.n	800d524 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800d50a:	2b20      	cmp	r3, #32
 800d50c:	d815      	bhi.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d019      	beq.n	800d546 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800d512:	2b10      	cmp	r3, #16
 800d514:	d111      	bne.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d516:	4b77      	ldr	r3, [pc, #476]	@ (800d6f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d51a:	4a76      	ldr	r2, [pc, #472]	@ (800d6f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d51c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d520:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800d522:	e011      	b.n	800d548 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d528:	3308      	adds	r3, #8
 800d52a:	2102      	movs	r1, #2
 800d52c:	4618      	mov	r0, r3
 800d52e:	f001 fac5 	bl	800eabc <RCCEx_PLL2_Config>
 800d532:	4603      	mov	r3, r0
 800d534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800d538:	e006      	b.n	800d548 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d53a:	2301      	movs	r3, #1
 800d53c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d540:	e002      	b.n	800d548 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d542:	bf00      	nop
 800d544:	e000      	b.n	800d548 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d546:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d548:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d10a      	bne.n	800d566 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d550:	4b68      	ldr	r3, [pc, #416]	@ (800d6f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d554:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800d558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d55c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d55e:	4a65      	ldr	r2, [pc, #404]	@ (800d6f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d560:	430b      	orrs	r3, r1
 800d562:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d564:	e003      	b.n	800d56e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d56a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d56e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d576:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800d57a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d57e:	2300      	movs	r3, #0
 800d580:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d584:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800d588:	460b      	mov	r3, r1
 800d58a:	4313      	orrs	r3, r2
 800d58c:	d051      	beq.n	800d632 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800d58e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d594:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d598:	d035      	beq.n	800d606 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800d59a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d59e:	d82e      	bhi.n	800d5fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d5a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d5a4:	d031      	beq.n	800d60a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800d5a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d5aa:	d828      	bhi.n	800d5fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d5ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d5b0:	d01a      	beq.n	800d5e8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800d5b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d5b6:	d822      	bhi.n	800d5fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d003      	beq.n	800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800d5bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5c0:	d007      	beq.n	800d5d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800d5c2:	e01c      	b.n	800d5fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d5c4:	4b4b      	ldr	r3, [pc, #300]	@ (800d6f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d5c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5c8:	4a4a      	ldr	r2, [pc, #296]	@ (800d6f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d5ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d5ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d5d0:	e01c      	b.n	800d60c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d5d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5d6:	3308      	adds	r3, #8
 800d5d8:	2100      	movs	r1, #0
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f001 fa6e 	bl	800eabc <RCCEx_PLL2_Config>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d5e6:	e011      	b.n	800d60c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d5e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5ec:	3328      	adds	r3, #40	@ 0x28
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f001 fb15 	bl	800ec20 <RCCEx_PLL3_Config>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d5fc:	e006      	b.n	800d60c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d5fe:	2301      	movs	r3, #1
 800d600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d604:	e002      	b.n	800d60c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d606:	bf00      	nop
 800d608:	e000      	b.n	800d60c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d60a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d60c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d610:	2b00      	cmp	r3, #0
 800d612:	d10a      	bne.n	800d62a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d614:	4b37      	ldr	r3, [pc, #220]	@ (800d6f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d618:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800d61c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d622:	4a34      	ldr	r2, [pc, #208]	@ (800d6f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d624:	430b      	orrs	r3, r1
 800d626:	6513      	str	r3, [r2, #80]	@ 0x50
 800d628:	e003      	b.n	800d632 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d62a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d62e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800d63e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d642:	2300      	movs	r3, #0
 800d644:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d648:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800d64c:	460b      	mov	r3, r1
 800d64e:	4313      	orrs	r3, r2
 800d650:	d056      	beq.n	800d700 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800d652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d656:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d658:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d65c:	d033      	beq.n	800d6c6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800d65e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d662:	d82c      	bhi.n	800d6be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d664:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d668:	d02f      	beq.n	800d6ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800d66a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d66e:	d826      	bhi.n	800d6be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d670:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d674:	d02b      	beq.n	800d6ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800d676:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d67a:	d820      	bhi.n	800d6be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d67c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d680:	d012      	beq.n	800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800d682:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d686:	d81a      	bhi.n	800d6be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d022      	beq.n	800d6d2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800d68c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d690:	d115      	bne.n	800d6be <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d696:	3308      	adds	r3, #8
 800d698:	2101      	movs	r1, #1
 800d69a:	4618      	mov	r0, r3
 800d69c:	f001 fa0e 	bl	800eabc <RCCEx_PLL2_Config>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d6a6:	e015      	b.n	800d6d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d6a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6ac:	3328      	adds	r3, #40	@ 0x28
 800d6ae:	2101      	movs	r1, #1
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f001 fab5 	bl	800ec20 <RCCEx_PLL3_Config>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d6bc:	e00a      	b.n	800d6d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d6c4:	e006      	b.n	800d6d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d6c6:	bf00      	nop
 800d6c8:	e004      	b.n	800d6d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d6ca:	bf00      	nop
 800d6cc:	e002      	b.n	800d6d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d6ce:	bf00      	nop
 800d6d0:	e000      	b.n	800d6d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d6d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d6d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d10d      	bne.n	800d6f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d6dc:	4b05      	ldr	r3, [pc, #20]	@ (800d6f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d6de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6e0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800d6e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d6ea:	4a02      	ldr	r2, [pc, #8]	@ (800d6f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d6ec:	430b      	orrs	r3, r1
 800d6ee:	6513      	str	r3, [r2, #80]	@ 0x50
 800d6f0:	e006      	b.n	800d700 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800d6f2:	bf00      	nop
 800d6f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d6fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d708:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800d70c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d710:	2300      	movs	r3, #0
 800d712:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d716:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800d71a:	460b      	mov	r3, r1
 800d71c:	4313      	orrs	r3, r2
 800d71e:	d055      	beq.n	800d7cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800d720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d724:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d728:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d72c:	d033      	beq.n	800d796 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800d72e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d732:	d82c      	bhi.n	800d78e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d738:	d02f      	beq.n	800d79a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800d73a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d73e:	d826      	bhi.n	800d78e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d740:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d744:	d02b      	beq.n	800d79e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800d746:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d74a:	d820      	bhi.n	800d78e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d74c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d750:	d012      	beq.n	800d778 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800d752:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d756:	d81a      	bhi.n	800d78e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d022      	beq.n	800d7a2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800d75c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d760:	d115      	bne.n	800d78e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d766:	3308      	adds	r3, #8
 800d768:	2101      	movs	r1, #1
 800d76a:	4618      	mov	r0, r3
 800d76c:	f001 f9a6 	bl	800eabc <RCCEx_PLL2_Config>
 800d770:	4603      	mov	r3, r0
 800d772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d776:	e015      	b.n	800d7a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d77c:	3328      	adds	r3, #40	@ 0x28
 800d77e:	2101      	movs	r1, #1
 800d780:	4618      	mov	r0, r3
 800d782:	f001 fa4d 	bl	800ec20 <RCCEx_PLL3_Config>
 800d786:	4603      	mov	r3, r0
 800d788:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d78c:	e00a      	b.n	800d7a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800d78e:	2301      	movs	r3, #1
 800d790:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d794:	e006      	b.n	800d7a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d796:	bf00      	nop
 800d798:	e004      	b.n	800d7a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d79a:	bf00      	nop
 800d79c:	e002      	b.n	800d7a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d79e:	bf00      	nop
 800d7a0:	e000      	b.n	800d7a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d7a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d7a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d10b      	bne.n	800d7c4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d7ac:	4ba3      	ldr	r3, [pc, #652]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d7ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d7b0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d7b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d7bc:	4a9f      	ldr	r2, [pc, #636]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d7be:	430b      	orrs	r3, r1
 800d7c0:	6593      	str	r3, [r2, #88]	@ 0x58
 800d7c2:	e003      	b.n	800d7cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d7c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d7cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800d7d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d7dc:	2300      	movs	r3, #0
 800d7de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d7e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d7e6:	460b      	mov	r3, r1
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	d037      	beq.n	800d85c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d7ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d7f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d7f6:	d00e      	beq.n	800d816 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800d7f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d7fc:	d816      	bhi.n	800d82c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d018      	beq.n	800d834 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800d802:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d806:	d111      	bne.n	800d82c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d808:	4b8c      	ldr	r3, [pc, #560]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d80a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d80c:	4a8b      	ldr	r2, [pc, #556]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d80e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d812:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d814:	e00f      	b.n	800d836 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d81a:	3308      	adds	r3, #8
 800d81c:	2101      	movs	r1, #1
 800d81e:	4618      	mov	r0, r3
 800d820:	f001 f94c 	bl	800eabc <RCCEx_PLL2_Config>
 800d824:	4603      	mov	r3, r0
 800d826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d82a:	e004      	b.n	800d836 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d82c:	2301      	movs	r3, #1
 800d82e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d832:	e000      	b.n	800d836 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800d834:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d10a      	bne.n	800d854 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d83e:	4b7f      	ldr	r3, [pc, #508]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d842:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d84a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d84c:	4a7b      	ldr	r2, [pc, #492]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d84e:	430b      	orrs	r3, r1
 800d850:	6513      	str	r3, [r2, #80]	@ 0x50
 800d852:	e003      	b.n	800d85c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d854:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d858:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d85c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d864:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800d868:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d86c:	2300      	movs	r3, #0
 800d86e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d872:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800d876:	460b      	mov	r3, r1
 800d878:	4313      	orrs	r3, r2
 800d87a:	d039      	beq.n	800d8f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800d87c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d882:	2b03      	cmp	r3, #3
 800d884:	d81c      	bhi.n	800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800d886:	a201      	add	r2, pc, #4	@ (adr r2, 800d88c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800d888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d88c:	0800d8c9 	.word	0x0800d8c9
 800d890:	0800d89d 	.word	0x0800d89d
 800d894:	0800d8ab 	.word	0x0800d8ab
 800d898:	0800d8c9 	.word	0x0800d8c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d89c:	4b67      	ldr	r3, [pc, #412]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d89e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8a0:	4a66      	ldr	r2, [pc, #408]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d8a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d8a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d8a8:	e00f      	b.n	800d8ca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d8aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8ae:	3308      	adds	r3, #8
 800d8b0:	2102      	movs	r1, #2
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f001 f902 	bl	800eabc <RCCEx_PLL2_Config>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d8be:	e004      	b.n	800d8ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d8c6:	e000      	b.n	800d8ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800d8c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d8ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d10a      	bne.n	800d8e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d8d2:	4b5a      	ldr	r3, [pc, #360]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d8d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d8d6:	f023 0103 	bic.w	r1, r3, #3
 800d8da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d8e0:	4a56      	ldr	r2, [pc, #344]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d8e2:	430b      	orrs	r3, r1
 800d8e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d8e6:	e003      	b.n	800d8f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d8f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800d8fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d900:	2300      	movs	r3, #0
 800d902:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d906:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800d90a:	460b      	mov	r3, r1
 800d90c:	4313      	orrs	r3, r2
 800d90e:	f000 809f 	beq.w	800da50 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d912:	4b4b      	ldr	r3, [pc, #300]	@ (800da40 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4a4a      	ldr	r2, [pc, #296]	@ (800da40 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d918:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d91c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d91e:	f7f4 fd97 	bl	8002450 <HAL_GetTick>
 800d922:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d926:	e00b      	b.n	800d940 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d928:	f7f4 fd92 	bl	8002450 <HAL_GetTick>
 800d92c:	4602      	mov	r2, r0
 800d92e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d932:	1ad3      	subs	r3, r2, r3
 800d934:	2b64      	cmp	r3, #100	@ 0x64
 800d936:	d903      	bls.n	800d940 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800d938:	2303      	movs	r3, #3
 800d93a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d93e:	e005      	b.n	800d94c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d940:	4b3f      	ldr	r3, [pc, #252]	@ (800da40 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d0ed      	beq.n	800d928 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800d94c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d950:	2b00      	cmp	r3, #0
 800d952:	d179      	bne.n	800da48 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d954:	4b39      	ldr	r3, [pc, #228]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d956:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d95c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d960:	4053      	eors	r3, r2
 800d962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d966:	2b00      	cmp	r3, #0
 800d968:	d015      	beq.n	800d996 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d96a:	4b34      	ldr	r3, [pc, #208]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d96c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d96e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d972:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d976:	4b31      	ldr	r3, [pc, #196]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d97a:	4a30      	ldr	r2, [pc, #192]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d97c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d980:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d982:	4b2e      	ldr	r3, [pc, #184]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d986:	4a2d      	ldr	r2, [pc, #180]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d988:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d98c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d98e:	4a2b      	ldr	r2, [pc, #172]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d990:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d994:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d99a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d99e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d9a2:	d118      	bne.n	800d9d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d9a4:	f7f4 fd54 	bl	8002450 <HAL_GetTick>
 800d9a8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d9ac:	e00d      	b.n	800d9ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d9ae:	f7f4 fd4f 	bl	8002450 <HAL_GetTick>
 800d9b2:	4602      	mov	r2, r0
 800d9b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d9b8:	1ad2      	subs	r2, r2, r3
 800d9ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d903      	bls.n	800d9ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800d9c2:	2303      	movs	r3, #3
 800d9c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800d9c8:	e005      	b.n	800d9d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d9ca:	4b1c      	ldr	r3, [pc, #112]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9ce:	f003 0302 	and.w	r3, r3, #2
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d0eb      	beq.n	800d9ae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800d9d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d129      	bne.n	800da32 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d9de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d9e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d9ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d9ee:	d10e      	bne.n	800da0e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800d9f0:	4b12      	ldr	r3, [pc, #72]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9f2:	691b      	ldr	r3, [r3, #16]
 800d9f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800d9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800da00:	091a      	lsrs	r2, r3, #4
 800da02:	4b10      	ldr	r3, [pc, #64]	@ (800da44 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800da04:	4013      	ands	r3, r2
 800da06:	4a0d      	ldr	r2, [pc, #52]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da08:	430b      	orrs	r3, r1
 800da0a:	6113      	str	r3, [r2, #16]
 800da0c:	e005      	b.n	800da1a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800da0e:	4b0b      	ldr	r3, [pc, #44]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da10:	691b      	ldr	r3, [r3, #16]
 800da12:	4a0a      	ldr	r2, [pc, #40]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da14:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800da18:	6113      	str	r3, [r2, #16]
 800da1a:	4b08      	ldr	r3, [pc, #32]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da1c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800da1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800da26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800da2a:	4a04      	ldr	r2, [pc, #16]	@ (800da3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da2c:	430b      	orrs	r3, r1
 800da2e:	6713      	str	r3, [r2, #112]	@ 0x70
 800da30:	e00e      	b.n	800da50 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800da32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800da3a:	e009      	b.n	800da50 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800da3c:	58024400 	.word	0x58024400
 800da40:	58024800 	.word	0x58024800
 800da44:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800da50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da58:	f002 0301 	and.w	r3, r2, #1
 800da5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800da60:	2300      	movs	r3, #0
 800da62:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800da66:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800da6a:	460b      	mov	r3, r1
 800da6c:	4313      	orrs	r3, r2
 800da6e:	f000 8089 	beq.w	800db84 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800da72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800da78:	2b28      	cmp	r3, #40	@ 0x28
 800da7a:	d86b      	bhi.n	800db54 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800da7c:	a201      	add	r2, pc, #4	@ (adr r2, 800da84 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800da7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da82:	bf00      	nop
 800da84:	0800db5d 	.word	0x0800db5d
 800da88:	0800db55 	.word	0x0800db55
 800da8c:	0800db55 	.word	0x0800db55
 800da90:	0800db55 	.word	0x0800db55
 800da94:	0800db55 	.word	0x0800db55
 800da98:	0800db55 	.word	0x0800db55
 800da9c:	0800db55 	.word	0x0800db55
 800daa0:	0800db55 	.word	0x0800db55
 800daa4:	0800db29 	.word	0x0800db29
 800daa8:	0800db55 	.word	0x0800db55
 800daac:	0800db55 	.word	0x0800db55
 800dab0:	0800db55 	.word	0x0800db55
 800dab4:	0800db55 	.word	0x0800db55
 800dab8:	0800db55 	.word	0x0800db55
 800dabc:	0800db55 	.word	0x0800db55
 800dac0:	0800db55 	.word	0x0800db55
 800dac4:	0800db3f 	.word	0x0800db3f
 800dac8:	0800db55 	.word	0x0800db55
 800dacc:	0800db55 	.word	0x0800db55
 800dad0:	0800db55 	.word	0x0800db55
 800dad4:	0800db55 	.word	0x0800db55
 800dad8:	0800db55 	.word	0x0800db55
 800dadc:	0800db55 	.word	0x0800db55
 800dae0:	0800db55 	.word	0x0800db55
 800dae4:	0800db5d 	.word	0x0800db5d
 800dae8:	0800db55 	.word	0x0800db55
 800daec:	0800db55 	.word	0x0800db55
 800daf0:	0800db55 	.word	0x0800db55
 800daf4:	0800db55 	.word	0x0800db55
 800daf8:	0800db55 	.word	0x0800db55
 800dafc:	0800db55 	.word	0x0800db55
 800db00:	0800db55 	.word	0x0800db55
 800db04:	0800db5d 	.word	0x0800db5d
 800db08:	0800db55 	.word	0x0800db55
 800db0c:	0800db55 	.word	0x0800db55
 800db10:	0800db55 	.word	0x0800db55
 800db14:	0800db55 	.word	0x0800db55
 800db18:	0800db55 	.word	0x0800db55
 800db1c:	0800db55 	.word	0x0800db55
 800db20:	0800db55 	.word	0x0800db55
 800db24:	0800db5d 	.word	0x0800db5d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800db28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db2c:	3308      	adds	r3, #8
 800db2e:	2101      	movs	r1, #1
 800db30:	4618      	mov	r0, r3
 800db32:	f000 ffc3 	bl	800eabc <RCCEx_PLL2_Config>
 800db36:	4603      	mov	r3, r0
 800db38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800db3c:	e00f      	b.n	800db5e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800db3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db42:	3328      	adds	r3, #40	@ 0x28
 800db44:	2101      	movs	r1, #1
 800db46:	4618      	mov	r0, r3
 800db48:	f001 f86a 	bl	800ec20 <RCCEx_PLL3_Config>
 800db4c:	4603      	mov	r3, r0
 800db4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800db52:	e004      	b.n	800db5e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db54:	2301      	movs	r3, #1
 800db56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800db5a:	e000      	b.n	800db5e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800db5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db62:	2b00      	cmp	r3, #0
 800db64:	d10a      	bne.n	800db7c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800db66:	4bbf      	ldr	r3, [pc, #764]	@ (800de64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800db68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db6a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800db6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800db74:	4abb      	ldr	r2, [pc, #748]	@ (800de64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800db76:	430b      	orrs	r3, r1
 800db78:	6553      	str	r3, [r2, #84]	@ 0x54
 800db7a:	e003      	b.n	800db84 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800db84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8c:	f002 0302 	and.w	r3, r2, #2
 800db90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800db94:	2300      	movs	r3, #0
 800db96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800db9a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800db9e:	460b      	mov	r3, r1
 800dba0:	4313      	orrs	r3, r2
 800dba2:	d041      	beq.n	800dc28 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800dba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dba8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dbaa:	2b05      	cmp	r3, #5
 800dbac:	d824      	bhi.n	800dbf8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800dbae:	a201      	add	r2, pc, #4	@ (adr r2, 800dbb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800dbb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbb4:	0800dc01 	.word	0x0800dc01
 800dbb8:	0800dbcd 	.word	0x0800dbcd
 800dbbc:	0800dbe3 	.word	0x0800dbe3
 800dbc0:	0800dc01 	.word	0x0800dc01
 800dbc4:	0800dc01 	.word	0x0800dc01
 800dbc8:	0800dc01 	.word	0x0800dc01
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dbcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbd0:	3308      	adds	r3, #8
 800dbd2:	2101      	movs	r1, #1
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f000 ff71 	bl	800eabc <RCCEx_PLL2_Config>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800dbe0:	e00f      	b.n	800dc02 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dbe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbe6:	3328      	adds	r3, #40	@ 0x28
 800dbe8:	2101      	movs	r1, #1
 800dbea:	4618      	mov	r0, r3
 800dbec:	f001 f818 	bl	800ec20 <RCCEx_PLL3_Config>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800dbf6:	e004      	b.n	800dc02 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dbfe:	e000      	b.n	800dc02 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800dc00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d10a      	bne.n	800dc20 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800dc0a:	4b96      	ldr	r3, [pc, #600]	@ (800de64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dc0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc0e:	f023 0107 	bic.w	r1, r3, #7
 800dc12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dc18:	4a92      	ldr	r2, [pc, #584]	@ (800de64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dc1a:	430b      	orrs	r3, r1
 800dc1c:	6553      	str	r3, [r2, #84]	@ 0x54
 800dc1e:	e003      	b.n	800dc28 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800dc28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc30:	f002 0304 	and.w	r3, r2, #4
 800dc34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dc38:	2300      	movs	r3, #0
 800dc3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dc3e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800dc42:	460b      	mov	r3, r1
 800dc44:	4313      	orrs	r3, r2
 800dc46:	d044      	beq.n	800dcd2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800dc48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dc50:	2b05      	cmp	r3, #5
 800dc52:	d825      	bhi.n	800dca0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800dc54:	a201      	add	r2, pc, #4	@ (adr r2, 800dc5c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800dc56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc5a:	bf00      	nop
 800dc5c:	0800dca9 	.word	0x0800dca9
 800dc60:	0800dc75 	.word	0x0800dc75
 800dc64:	0800dc8b 	.word	0x0800dc8b
 800dc68:	0800dca9 	.word	0x0800dca9
 800dc6c:	0800dca9 	.word	0x0800dca9
 800dc70:	0800dca9 	.word	0x0800dca9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dc74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc78:	3308      	adds	r3, #8
 800dc7a:	2101      	movs	r1, #1
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f000 ff1d 	bl	800eabc <RCCEx_PLL2_Config>
 800dc82:	4603      	mov	r3, r0
 800dc84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800dc88:	e00f      	b.n	800dcaa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dc8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc8e:	3328      	adds	r3, #40	@ 0x28
 800dc90:	2101      	movs	r1, #1
 800dc92:	4618      	mov	r0, r3
 800dc94:	f000 ffc4 	bl	800ec20 <RCCEx_PLL3_Config>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800dc9e:	e004      	b.n	800dcaa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dca0:	2301      	movs	r3, #1
 800dca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dca6:	e000      	b.n	800dcaa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800dca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dcaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d10b      	bne.n	800dcca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800dcb2:	4b6c      	ldr	r3, [pc, #432]	@ (800de64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dcb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcb6:	f023 0107 	bic.w	r1, r3, #7
 800dcba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dcc2:	4a68      	ldr	r2, [pc, #416]	@ (800de64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dcc4:	430b      	orrs	r3, r1
 800dcc6:	6593      	str	r3, [r2, #88]	@ 0x58
 800dcc8:	e003      	b.n	800dcd2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dcce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800dcd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcda:	f002 0320 	and.w	r3, r2, #32
 800dcde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800dce2:	2300      	movs	r3, #0
 800dce4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dce8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800dcec:	460b      	mov	r3, r1
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	d055      	beq.n	800dd9e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800dcf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dcfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dcfe:	d033      	beq.n	800dd68 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800dd00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dd04:	d82c      	bhi.n	800dd60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800dd06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd0a:	d02f      	beq.n	800dd6c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800dd0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd10:	d826      	bhi.n	800dd60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800dd12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dd16:	d02b      	beq.n	800dd70 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800dd18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dd1c:	d820      	bhi.n	800dd60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800dd1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd22:	d012      	beq.n	800dd4a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800dd24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd28:	d81a      	bhi.n	800dd60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d022      	beq.n	800dd74 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800dd2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd32:	d115      	bne.n	800dd60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dd34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd38:	3308      	adds	r3, #8
 800dd3a:	2100      	movs	r1, #0
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f000 febd 	bl	800eabc <RCCEx_PLL2_Config>
 800dd42:	4603      	mov	r3, r0
 800dd44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800dd48:	e015      	b.n	800dd76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dd4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd4e:	3328      	adds	r3, #40	@ 0x28
 800dd50:	2102      	movs	r1, #2
 800dd52:	4618      	mov	r0, r3
 800dd54:	f000 ff64 	bl	800ec20 <RCCEx_PLL3_Config>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800dd5e:	e00a      	b.n	800dd76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd60:	2301      	movs	r3, #1
 800dd62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dd66:	e006      	b.n	800dd76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800dd68:	bf00      	nop
 800dd6a:	e004      	b.n	800dd76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800dd6c:	bf00      	nop
 800dd6e:	e002      	b.n	800dd76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800dd70:	bf00      	nop
 800dd72:	e000      	b.n	800dd76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800dd74:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d10b      	bne.n	800dd96 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dd7e:	4b39      	ldr	r3, [pc, #228]	@ (800de64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dd80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd82:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800dd86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd8e:	4a35      	ldr	r2, [pc, #212]	@ (800de64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dd90:	430b      	orrs	r3, r1
 800dd92:	6553      	str	r3, [r2, #84]	@ 0x54
 800dd94:	e003      	b.n	800dd9e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800dd9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800ddaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ddae:	2300      	movs	r3, #0
 800ddb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ddb4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800ddb8:	460b      	mov	r3, r1
 800ddba:	4313      	orrs	r3, r2
 800ddbc:	d058      	beq.n	800de70 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ddbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ddc6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ddca:	d033      	beq.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800ddcc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ddd0:	d82c      	bhi.n	800de2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ddd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ddd6:	d02f      	beq.n	800de38 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800ddd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dddc:	d826      	bhi.n	800de2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ddde:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dde2:	d02b      	beq.n	800de3c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800dde4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dde8:	d820      	bhi.n	800de2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ddea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ddee:	d012      	beq.n	800de16 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800ddf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ddf4:	d81a      	bhi.n	800de2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d022      	beq.n	800de40 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800ddfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ddfe:	d115      	bne.n	800de2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800de00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de04:	3308      	adds	r3, #8
 800de06:	2100      	movs	r1, #0
 800de08:	4618      	mov	r0, r3
 800de0a:	f000 fe57 	bl	800eabc <RCCEx_PLL2_Config>
 800de0e:	4603      	mov	r3, r0
 800de10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800de14:	e015      	b.n	800de42 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800de16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de1a:	3328      	adds	r3, #40	@ 0x28
 800de1c:	2102      	movs	r1, #2
 800de1e:	4618      	mov	r0, r3
 800de20:	f000 fefe 	bl	800ec20 <RCCEx_PLL3_Config>
 800de24:	4603      	mov	r3, r0
 800de26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800de2a:	e00a      	b.n	800de42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800de2c:	2301      	movs	r3, #1
 800de2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800de32:	e006      	b.n	800de42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800de34:	bf00      	nop
 800de36:	e004      	b.n	800de42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800de38:	bf00      	nop
 800de3a:	e002      	b.n	800de42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800de3c:	bf00      	nop
 800de3e:	e000      	b.n	800de42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800de40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de46:	2b00      	cmp	r3, #0
 800de48:	d10e      	bne.n	800de68 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800de4a:	4b06      	ldr	r3, [pc, #24]	@ (800de64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800de4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de4e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800de52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800de5a:	4a02      	ldr	r2, [pc, #8]	@ (800de64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800de5c:	430b      	orrs	r3, r1
 800de5e:	6593      	str	r3, [r2, #88]	@ 0x58
 800de60:	e006      	b.n	800de70 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800de62:	bf00      	nop
 800de64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800de70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de78:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800de7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800de80:	2300      	movs	r3, #0
 800de82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800de86:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800de8a:	460b      	mov	r3, r1
 800de8c:	4313      	orrs	r3, r2
 800de8e:	d055      	beq.n	800df3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800de90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800de98:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800de9c:	d033      	beq.n	800df06 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800de9e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800dea2:	d82c      	bhi.n	800defe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800dea4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dea8:	d02f      	beq.n	800df0a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800deaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800deae:	d826      	bhi.n	800defe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800deb0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800deb4:	d02b      	beq.n	800df0e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800deb6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800deba:	d820      	bhi.n	800defe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800debc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dec0:	d012      	beq.n	800dee8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800dec2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dec6:	d81a      	bhi.n	800defe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d022      	beq.n	800df12 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800decc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ded0:	d115      	bne.n	800defe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ded2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ded6:	3308      	adds	r3, #8
 800ded8:	2100      	movs	r1, #0
 800deda:	4618      	mov	r0, r3
 800dedc:	f000 fdee 	bl	800eabc <RCCEx_PLL2_Config>
 800dee0:	4603      	mov	r3, r0
 800dee2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800dee6:	e015      	b.n	800df14 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800deec:	3328      	adds	r3, #40	@ 0x28
 800deee:	2102      	movs	r1, #2
 800def0:	4618      	mov	r0, r3
 800def2:	f000 fe95 	bl	800ec20 <RCCEx_PLL3_Config>
 800def6:	4603      	mov	r3, r0
 800def8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800defc:	e00a      	b.n	800df14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800defe:	2301      	movs	r3, #1
 800df00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800df04:	e006      	b.n	800df14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800df06:	bf00      	nop
 800df08:	e004      	b.n	800df14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800df0a:	bf00      	nop
 800df0c:	e002      	b.n	800df14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800df0e:	bf00      	nop
 800df10:	e000      	b.n	800df14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800df12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d10b      	bne.n	800df34 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800df1c:	4ba1      	ldr	r3, [pc, #644]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800df1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df20:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800df24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800df2c:	4a9d      	ldr	r2, [pc, #628]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800df2e:	430b      	orrs	r3, r1
 800df30:	6593      	str	r3, [r2, #88]	@ 0x58
 800df32:	e003      	b.n	800df3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800df3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df44:	f002 0308 	and.w	r3, r2, #8
 800df48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800df4c:	2300      	movs	r3, #0
 800df4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800df52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800df56:	460b      	mov	r3, r1
 800df58:	4313      	orrs	r3, r2
 800df5a:	d01e      	beq.n	800df9a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800df5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800df68:	d10c      	bne.n	800df84 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800df6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df6e:	3328      	adds	r3, #40	@ 0x28
 800df70:	2102      	movs	r1, #2
 800df72:	4618      	mov	r0, r3
 800df74:	f000 fe54 	bl	800ec20 <RCCEx_PLL3_Config>
 800df78:	4603      	mov	r3, r0
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d002      	beq.n	800df84 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800df7e:	2301      	movs	r3, #1
 800df80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800df84:	4b87      	ldr	r3, [pc, #540]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800df86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df88:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800df8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df94:	4a83      	ldr	r2, [pc, #524]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800df96:	430b      	orrs	r3, r1
 800df98:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800df9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa2:	f002 0310 	and.w	r3, r2, #16
 800dfa6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800dfaa:	2300      	movs	r3, #0
 800dfac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800dfb0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	4313      	orrs	r3, r2
 800dfb8:	d01e      	beq.n	800dff8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800dfba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dfc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dfc6:	d10c      	bne.n	800dfe2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800dfc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfcc:	3328      	adds	r3, #40	@ 0x28
 800dfce:	2102      	movs	r1, #2
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f000 fe25 	bl	800ec20 <RCCEx_PLL3_Config>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d002      	beq.n	800dfe2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800dfdc:	2301      	movs	r3, #1
 800dfde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800dfe2:	4b70      	ldr	r3, [pc, #448]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dfe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dfe6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800dfea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dff2:	4a6c      	ldr	r2, [pc, #432]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dff4:	430b      	orrs	r3, r1
 800dff6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800dff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e000:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800e004:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e008:	2300      	movs	r3, #0
 800e00a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e00e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800e012:	460b      	mov	r3, r1
 800e014:	4313      	orrs	r3, r2
 800e016:	d03e      	beq.n	800e096 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800e018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e01c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e020:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e024:	d022      	beq.n	800e06c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800e026:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e02a:	d81b      	bhi.n	800e064 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d003      	beq.n	800e038 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800e030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e034:	d00b      	beq.n	800e04e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800e036:	e015      	b.n	800e064 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e03c:	3308      	adds	r3, #8
 800e03e:	2100      	movs	r1, #0
 800e040:	4618      	mov	r0, r3
 800e042:	f000 fd3b 	bl	800eabc <RCCEx_PLL2_Config>
 800e046:	4603      	mov	r3, r0
 800e048:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e04c:	e00f      	b.n	800e06e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e04e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e052:	3328      	adds	r3, #40	@ 0x28
 800e054:	2102      	movs	r1, #2
 800e056:	4618      	mov	r0, r3
 800e058:	f000 fde2 	bl	800ec20 <RCCEx_PLL3_Config>
 800e05c:	4603      	mov	r3, r0
 800e05e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e062:	e004      	b.n	800e06e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e064:	2301      	movs	r3, #1
 800e066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e06a:	e000      	b.n	800e06e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800e06c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e06e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e072:	2b00      	cmp	r3, #0
 800e074:	d10b      	bne.n	800e08e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e076:	4b4b      	ldr	r3, [pc, #300]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e07a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800e07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e082:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e086:	4a47      	ldr	r2, [pc, #284]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e088:	430b      	orrs	r3, r1
 800e08a:	6593      	str	r3, [r2, #88]	@ 0x58
 800e08c:	e003      	b.n	800e096 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e08e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e092:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800e0a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e0a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800e0ac:	460b      	mov	r3, r1
 800e0ae:	4313      	orrs	r3, r2
 800e0b0:	d03b      	beq.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800e0b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e0ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e0be:	d01f      	beq.n	800e100 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800e0c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e0c4:	d818      	bhi.n	800e0f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800e0c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e0ca:	d003      	beq.n	800e0d4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800e0cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e0d0:	d007      	beq.n	800e0e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800e0d2:	e011      	b.n	800e0f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e0d4:	4b33      	ldr	r3, [pc, #204]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0d8:	4a32      	ldr	r2, [pc, #200]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e0da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e0de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800e0e0:	e00f      	b.n	800e102 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0e6:	3328      	adds	r3, #40	@ 0x28
 800e0e8:	2101      	movs	r1, #1
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f000 fd98 	bl	800ec20 <RCCEx_PLL3_Config>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800e0f6:	e004      	b.n	800e102 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e0fe:	e000      	b.n	800e102 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800e100:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e106:	2b00      	cmp	r3, #0
 800e108:	d10b      	bne.n	800e122 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e10a:	4b26      	ldr	r3, [pc, #152]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e10c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e10e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e11a:	4a22      	ldr	r2, [pc, #136]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e11c:	430b      	orrs	r3, r1
 800e11e:	6553      	str	r3, [r2, #84]	@ 0x54
 800e120:	e003      	b.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e122:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e126:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e132:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800e136:	673b      	str	r3, [r7, #112]	@ 0x70
 800e138:	2300      	movs	r3, #0
 800e13a:	677b      	str	r3, [r7, #116]	@ 0x74
 800e13c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800e140:	460b      	mov	r3, r1
 800e142:	4313      	orrs	r3, r2
 800e144:	d034      	beq.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800e146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e14a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d003      	beq.n	800e158 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800e150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e154:	d007      	beq.n	800e166 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800e156:	e011      	b.n	800e17c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e158:	4b12      	ldr	r3, [pc, #72]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e15a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e15c:	4a11      	ldr	r2, [pc, #68]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e15e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e162:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e164:	e00e      	b.n	800e184 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e16a:	3308      	adds	r3, #8
 800e16c:	2102      	movs	r1, #2
 800e16e:	4618      	mov	r0, r3
 800e170:	f000 fca4 	bl	800eabc <RCCEx_PLL2_Config>
 800e174:	4603      	mov	r3, r0
 800e176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e17a:	e003      	b.n	800e184 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800e17c:	2301      	movs	r3, #1
 800e17e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e182:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d10d      	bne.n	800e1a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e18c:	4b05      	ldr	r3, [pc, #20]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e18e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e190:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e19a:	4a02      	ldr	r2, [pc, #8]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e19c:	430b      	orrs	r3, r1
 800e19e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e1a0:	e006      	b.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800e1a2:	bf00      	nop
 800e1a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e1ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e1b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800e1bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e1be:	2300      	movs	r3, #0
 800e1c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e1c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800e1c6:	460b      	mov	r3, r1
 800e1c8:	4313      	orrs	r3, r2
 800e1ca:	d00c      	beq.n	800e1e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e1cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1d0:	3328      	adds	r3, #40	@ 0x28
 800e1d2:	2102      	movs	r1, #2
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f000 fd23 	bl	800ec20 <RCCEx_PLL3_Config>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d002      	beq.n	800e1e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e1e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800e1f2:	663b      	str	r3, [r7, #96]	@ 0x60
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	667b      	str	r3, [r7, #100]	@ 0x64
 800e1f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800e1fc:	460b      	mov	r3, r1
 800e1fe:	4313      	orrs	r3, r2
 800e200:	d038      	beq.n	800e274 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800e202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e20a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e20e:	d018      	beq.n	800e242 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800e210:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e214:	d811      	bhi.n	800e23a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e216:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e21a:	d014      	beq.n	800e246 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800e21c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e220:	d80b      	bhi.n	800e23a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e222:	2b00      	cmp	r3, #0
 800e224:	d011      	beq.n	800e24a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800e226:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e22a:	d106      	bne.n	800e23a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e22c:	4bc3      	ldr	r3, [pc, #780]	@ (800e53c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e22e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e230:	4ac2      	ldr	r2, [pc, #776]	@ (800e53c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e236:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800e238:	e008      	b.n	800e24c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e23a:	2301      	movs	r3, #1
 800e23c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e240:	e004      	b.n	800e24c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e242:	bf00      	nop
 800e244:	e002      	b.n	800e24c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e246:	bf00      	nop
 800e248:	e000      	b.n	800e24c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e24a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e24c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e250:	2b00      	cmp	r3, #0
 800e252:	d10b      	bne.n	800e26c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e254:	4bb9      	ldr	r3, [pc, #740]	@ (800e53c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e258:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e260:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e264:	4ab5      	ldr	r2, [pc, #724]	@ (800e53c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e266:	430b      	orrs	r3, r1
 800e268:	6553      	str	r3, [r2, #84]	@ 0x54
 800e26a:	e003      	b.n	800e274 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e26c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e270:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800e280:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e282:	2300      	movs	r3, #0
 800e284:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e286:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800e28a:	460b      	mov	r3, r1
 800e28c:	4313      	orrs	r3, r2
 800e28e:	d009      	beq.n	800e2a4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e290:	4baa      	ldr	r3, [pc, #680]	@ (800e53c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e294:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e29c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e29e:	4aa7      	ldr	r2, [pc, #668]	@ (800e53c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e2a0:	430b      	orrs	r3, r1
 800e2a2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800e2a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ac:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800e2b0:	653b      	str	r3, [r7, #80]	@ 0x50
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	657b      	str	r3, [r7, #84]	@ 0x54
 800e2b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800e2ba:	460b      	mov	r3, r1
 800e2bc:	4313      	orrs	r3, r2
 800e2be:	d00a      	beq.n	800e2d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800e2c0:	4b9e      	ldr	r3, [pc, #632]	@ (800e53c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e2c2:	691b      	ldr	r3, [r3, #16]
 800e2c4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800e2c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e2d0:	4a9a      	ldr	r2, [pc, #616]	@ (800e53c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e2d2:	430b      	orrs	r3, r1
 800e2d4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e2d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2de:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800e2e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e2e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800e2ec:	460b      	mov	r3, r1
 800e2ee:	4313      	orrs	r3, r2
 800e2f0:	d009      	beq.n	800e306 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e2f2:	4b92      	ldr	r3, [pc, #584]	@ (800e53c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e2f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2f6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800e2fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e300:	4a8e      	ldr	r2, [pc, #568]	@ (800e53c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e302:	430b      	orrs	r3, r1
 800e304:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e30e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800e312:	643b      	str	r3, [r7, #64]	@ 0x40
 800e314:	2300      	movs	r3, #0
 800e316:	647b      	str	r3, [r7, #68]	@ 0x44
 800e318:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800e31c:	460b      	mov	r3, r1
 800e31e:	4313      	orrs	r3, r2
 800e320:	d00e      	beq.n	800e340 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e322:	4b86      	ldr	r3, [pc, #536]	@ (800e53c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e324:	691b      	ldr	r3, [r3, #16]
 800e326:	4a85      	ldr	r2, [pc, #532]	@ (800e53c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e328:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e32c:	6113      	str	r3, [r2, #16]
 800e32e:	4b83      	ldr	r3, [pc, #524]	@ (800e53c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e330:	6919      	ldr	r1, [r3, #16]
 800e332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e336:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e33a:	4a80      	ldr	r2, [pc, #512]	@ (800e53c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e33c:	430b      	orrs	r3, r1
 800e33e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e348:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800e34c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e34e:	2300      	movs	r3, #0
 800e350:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e352:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800e356:	460b      	mov	r3, r1
 800e358:	4313      	orrs	r3, r2
 800e35a:	d009      	beq.n	800e370 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e35c:	4b77      	ldr	r3, [pc, #476]	@ (800e53c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e35e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e360:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e36a:	4a74      	ldr	r2, [pc, #464]	@ (800e53c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e36c:	430b      	orrs	r3, r1
 800e36e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e378:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800e37c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e37e:	2300      	movs	r3, #0
 800e380:	637b      	str	r3, [r7, #52]	@ 0x34
 800e382:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800e386:	460b      	mov	r3, r1
 800e388:	4313      	orrs	r3, r2
 800e38a:	d00a      	beq.n	800e3a2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e38c:	4b6b      	ldr	r3, [pc, #428]	@ (800e53c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e38e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e390:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800e394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e398:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e39c:	4a67      	ldr	r2, [pc, #412]	@ (800e53c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e39e:	430b      	orrs	r3, r1
 800e3a0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800e3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3aa:	2100      	movs	r1, #0
 800e3ac:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e3ae:	f003 0301 	and.w	r3, r3, #1
 800e3b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e3b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800e3b8:	460b      	mov	r3, r1
 800e3ba:	4313      	orrs	r3, r2
 800e3bc:	d011      	beq.n	800e3e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3c2:	3308      	adds	r3, #8
 800e3c4:	2100      	movs	r1, #0
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f000 fb78 	bl	800eabc <RCCEx_PLL2_Config>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e3d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d003      	beq.n	800e3e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e3de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800e3e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ea:	2100      	movs	r1, #0
 800e3ec:	6239      	str	r1, [r7, #32]
 800e3ee:	f003 0302 	and.w	r3, r3, #2
 800e3f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e3f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e3f8:	460b      	mov	r3, r1
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	d011      	beq.n	800e422 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e402:	3308      	adds	r3, #8
 800e404:	2101      	movs	r1, #1
 800e406:	4618      	mov	r0, r3
 800e408:	f000 fb58 	bl	800eabc <RCCEx_PLL2_Config>
 800e40c:	4603      	mov	r3, r0
 800e40e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e416:	2b00      	cmp	r3, #0
 800e418:	d003      	beq.n	800e422 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e41a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e41e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800e422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e42a:	2100      	movs	r1, #0
 800e42c:	61b9      	str	r1, [r7, #24]
 800e42e:	f003 0304 	and.w	r3, r3, #4
 800e432:	61fb      	str	r3, [r7, #28]
 800e434:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e438:	460b      	mov	r3, r1
 800e43a:	4313      	orrs	r3, r2
 800e43c:	d011      	beq.n	800e462 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e43e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e442:	3308      	adds	r3, #8
 800e444:	2102      	movs	r1, #2
 800e446:	4618      	mov	r0, r3
 800e448:	f000 fb38 	bl	800eabc <RCCEx_PLL2_Config>
 800e44c:	4603      	mov	r3, r0
 800e44e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e456:	2b00      	cmp	r3, #0
 800e458:	d003      	beq.n	800e462 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e45a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e45e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800e462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46a:	2100      	movs	r1, #0
 800e46c:	6139      	str	r1, [r7, #16]
 800e46e:	f003 0308 	and.w	r3, r3, #8
 800e472:	617b      	str	r3, [r7, #20]
 800e474:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e478:	460b      	mov	r3, r1
 800e47a:	4313      	orrs	r3, r2
 800e47c:	d011      	beq.n	800e4a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e47e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e482:	3328      	adds	r3, #40	@ 0x28
 800e484:	2100      	movs	r1, #0
 800e486:	4618      	mov	r0, r3
 800e488:	f000 fbca 	bl	800ec20 <RCCEx_PLL3_Config>
 800e48c:	4603      	mov	r3, r0
 800e48e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800e492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e496:	2b00      	cmp	r3, #0
 800e498:	d003      	beq.n	800e4a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e49a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e49e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800e4a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4aa:	2100      	movs	r1, #0
 800e4ac:	60b9      	str	r1, [r7, #8]
 800e4ae:	f003 0310 	and.w	r3, r3, #16
 800e4b2:	60fb      	str	r3, [r7, #12]
 800e4b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e4b8:	460b      	mov	r3, r1
 800e4ba:	4313      	orrs	r3, r2
 800e4bc:	d011      	beq.n	800e4e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e4be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4c2:	3328      	adds	r3, #40	@ 0x28
 800e4c4:	2101      	movs	r1, #1
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f000 fbaa 	bl	800ec20 <RCCEx_PLL3_Config>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e4d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d003      	beq.n	800e4e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800e4e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ea:	2100      	movs	r1, #0
 800e4ec:	6039      	str	r1, [r7, #0]
 800e4ee:	f003 0320 	and.w	r3, r3, #32
 800e4f2:	607b      	str	r3, [r7, #4]
 800e4f4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e4f8:	460b      	mov	r3, r1
 800e4fa:	4313      	orrs	r3, r2
 800e4fc:	d011      	beq.n	800e522 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e502:	3328      	adds	r3, #40	@ 0x28
 800e504:	2102      	movs	r1, #2
 800e506:	4618      	mov	r0, r3
 800e508:	f000 fb8a 	bl	800ec20 <RCCEx_PLL3_Config>
 800e50c:	4603      	mov	r3, r0
 800e50e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e516:	2b00      	cmp	r3, #0
 800e518:	d003      	beq.n	800e522 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e51a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e51e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800e522:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800e526:	2b00      	cmp	r3, #0
 800e528:	d101      	bne.n	800e52e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800e52a:	2300      	movs	r3, #0
 800e52c:	e000      	b.n	800e530 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800e52e:	2301      	movs	r3, #1
}
 800e530:	4618      	mov	r0, r3
 800e532:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800e536:	46bd      	mov	sp, r7
 800e538:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e53c:	58024400 	.word	0x58024400

0800e540 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800e544:	f7fe fd96 	bl	800d074 <HAL_RCC_GetHCLKFreq>
 800e548:	4602      	mov	r2, r0
 800e54a:	4b06      	ldr	r3, [pc, #24]	@ (800e564 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800e54c:	6a1b      	ldr	r3, [r3, #32]
 800e54e:	091b      	lsrs	r3, r3, #4
 800e550:	f003 0307 	and.w	r3, r3, #7
 800e554:	4904      	ldr	r1, [pc, #16]	@ (800e568 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800e556:	5ccb      	ldrb	r3, [r1, r3]
 800e558:	f003 031f 	and.w	r3, r3, #31
 800e55c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800e560:	4618      	mov	r0, r3
 800e562:	bd80      	pop	{r7, pc}
 800e564:	58024400 	.word	0x58024400
 800e568:	080160cc 	.word	0x080160cc

0800e56c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b089      	sub	sp, #36	@ 0x24
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e574:	4ba1      	ldr	r3, [pc, #644]	@ (800e7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e578:	f003 0303 	and.w	r3, r3, #3
 800e57c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800e57e:	4b9f      	ldr	r3, [pc, #636]	@ (800e7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e582:	0b1b      	lsrs	r3, r3, #12
 800e584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e588:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e58a:	4b9c      	ldr	r3, [pc, #624]	@ (800e7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e58c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e58e:	091b      	lsrs	r3, r3, #4
 800e590:	f003 0301 	and.w	r3, r3, #1
 800e594:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800e596:	4b99      	ldr	r3, [pc, #612]	@ (800e7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e59a:	08db      	lsrs	r3, r3, #3
 800e59c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e5a0:	693a      	ldr	r2, [r7, #16]
 800e5a2:	fb02 f303 	mul.w	r3, r2, r3
 800e5a6:	ee07 3a90 	vmov	s15, r3
 800e5aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	f000 8111 	beq.w	800e7dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800e5ba:	69bb      	ldr	r3, [r7, #24]
 800e5bc:	2b02      	cmp	r3, #2
 800e5be:	f000 8083 	beq.w	800e6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800e5c2:	69bb      	ldr	r3, [r7, #24]
 800e5c4:	2b02      	cmp	r3, #2
 800e5c6:	f200 80a1 	bhi.w	800e70c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800e5ca:	69bb      	ldr	r3, [r7, #24]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d003      	beq.n	800e5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800e5d0:	69bb      	ldr	r3, [r7, #24]
 800e5d2:	2b01      	cmp	r3, #1
 800e5d4:	d056      	beq.n	800e684 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800e5d6:	e099      	b.n	800e70c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e5d8:	4b88      	ldr	r3, [pc, #544]	@ (800e7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f003 0320 	and.w	r3, r3, #32
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d02d      	beq.n	800e640 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e5e4:	4b85      	ldr	r3, [pc, #532]	@ (800e7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	08db      	lsrs	r3, r3, #3
 800e5ea:	f003 0303 	and.w	r3, r3, #3
 800e5ee:	4a84      	ldr	r2, [pc, #528]	@ (800e800 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800e5f0:	fa22 f303 	lsr.w	r3, r2, r3
 800e5f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	ee07 3a90 	vmov	s15, r3
 800e5fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	ee07 3a90 	vmov	s15, r3
 800e606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e60a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e60e:	4b7b      	ldr	r3, [pc, #492]	@ (800e7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e616:	ee07 3a90 	vmov	s15, r3
 800e61a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e61e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e622:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e804 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e62a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e62e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e63a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e63e:	e087      	b.n	800e750 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	ee07 3a90 	vmov	s15, r3
 800e646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e64a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e808 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e64e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e652:	4b6a      	ldr	r3, [pc, #424]	@ (800e7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e65a:	ee07 3a90 	vmov	s15, r3
 800e65e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e662:	ed97 6a03 	vldr	s12, [r7, #12]
 800e666:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e804 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e66a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e66e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e67a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e67e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e682:	e065      	b.n	800e750 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	ee07 3a90 	vmov	s15, r3
 800e68a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e68e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e80c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e696:	4b59      	ldr	r3, [pc, #356]	@ (800e7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e69a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e69e:	ee07 3a90 	vmov	s15, r3
 800e6a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e6aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e804 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e6ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e6ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e6c6:	e043      	b.n	800e750 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	ee07 3a90 	vmov	s15, r3
 800e6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e810 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800e6d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6da:	4b48      	ldr	r3, [pc, #288]	@ (800e7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e6dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6e2:	ee07 3a90 	vmov	s15, r3
 800e6e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800e6ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e804 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e6f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e6fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e702:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e706:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e70a:	e021      	b.n	800e750 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	ee07 3a90 	vmov	s15, r3
 800e712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e716:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e80c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e71a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e71e:	4b37      	ldr	r3, [pc, #220]	@ (800e7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e726:	ee07 3a90 	vmov	s15, r3
 800e72a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e72e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e732:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e804 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e73a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e73e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e74a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e74e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800e750:	4b2a      	ldr	r3, [pc, #168]	@ (800e7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e754:	0a5b      	lsrs	r3, r3, #9
 800e756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e75a:	ee07 3a90 	vmov	s15, r3
 800e75e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e762:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e766:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e76a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e76e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e776:	ee17 2a90 	vmov	r2, s15
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800e77e:	4b1f      	ldr	r3, [pc, #124]	@ (800e7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e782:	0c1b      	lsrs	r3, r3, #16
 800e784:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e788:	ee07 3a90 	vmov	s15, r3
 800e78c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e790:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e794:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e798:	edd7 6a07 	vldr	s13, [r7, #28]
 800e79c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e7a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e7a4:	ee17 2a90 	vmov	r2, s15
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800e7ac:	4b13      	ldr	r3, [pc, #76]	@ (800e7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e7ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7b0:	0e1b      	lsrs	r3, r3, #24
 800e7b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e7b6:	ee07 3a90 	vmov	s15, r3
 800e7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e7c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e7c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800e7ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e7ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e7d2:	ee17 2a90 	vmov	r2, s15
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e7da:	e008      	b.n	800e7ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2200      	movs	r2, #0
 800e7e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	609a      	str	r2, [r3, #8]
}
 800e7ee:	bf00      	nop
 800e7f0:	3724      	adds	r7, #36	@ 0x24
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f8:	4770      	bx	lr
 800e7fa:	bf00      	nop
 800e7fc:	58024400 	.word	0x58024400
 800e800:	03d09000 	.word	0x03d09000
 800e804:	46000000 	.word	0x46000000
 800e808:	4c742400 	.word	0x4c742400
 800e80c:	4a742400 	.word	0x4a742400
 800e810:	4bbebc20 	.word	0x4bbebc20

0800e814 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e814:	b480      	push	{r7}
 800e816:	b089      	sub	sp, #36	@ 0x24
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e81c:	4ba1      	ldr	r3, [pc, #644]	@ (800eaa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e81e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e820:	f003 0303 	and.w	r3, r3, #3
 800e824:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e826:	4b9f      	ldr	r3, [pc, #636]	@ (800eaa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e82a:	0d1b      	lsrs	r3, r3, #20
 800e82c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e830:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e832:	4b9c      	ldr	r3, [pc, #624]	@ (800eaa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e836:	0a1b      	lsrs	r3, r3, #8
 800e838:	f003 0301 	and.w	r3, r3, #1
 800e83c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e83e:	4b99      	ldr	r3, [pc, #612]	@ (800eaa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e842:	08db      	lsrs	r3, r3, #3
 800e844:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e848:	693a      	ldr	r2, [r7, #16]
 800e84a:	fb02 f303 	mul.w	r3, r2, r3
 800e84e:	ee07 3a90 	vmov	s15, r3
 800e852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e856:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	f000 8111 	beq.w	800ea84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e862:	69bb      	ldr	r3, [r7, #24]
 800e864:	2b02      	cmp	r3, #2
 800e866:	f000 8083 	beq.w	800e970 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e86a:	69bb      	ldr	r3, [r7, #24]
 800e86c:	2b02      	cmp	r3, #2
 800e86e:	f200 80a1 	bhi.w	800e9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e872:	69bb      	ldr	r3, [r7, #24]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d003      	beq.n	800e880 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e878:	69bb      	ldr	r3, [r7, #24]
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	d056      	beq.n	800e92c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e87e:	e099      	b.n	800e9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e880:	4b88      	ldr	r3, [pc, #544]	@ (800eaa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	f003 0320 	and.w	r3, r3, #32
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d02d      	beq.n	800e8e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e88c:	4b85      	ldr	r3, [pc, #532]	@ (800eaa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	08db      	lsrs	r3, r3, #3
 800e892:	f003 0303 	and.w	r3, r3, #3
 800e896:	4a84      	ldr	r2, [pc, #528]	@ (800eaa8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e898:	fa22 f303 	lsr.w	r3, r2, r3
 800e89c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	ee07 3a90 	vmov	s15, r3
 800e8a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	ee07 3a90 	vmov	s15, r3
 800e8ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e8b6:	4b7b      	ldr	r3, [pc, #492]	@ (800eaa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e8b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8be:	ee07 3a90 	vmov	s15, r3
 800e8c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e8ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800eaac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e8ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e8da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e8e6:	e087      	b.n	800e9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	ee07 3a90 	vmov	s15, r3
 800e8ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800eab0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e8f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e8fa:	4b6a      	ldr	r3, [pc, #424]	@ (800eaa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e8fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e902:	ee07 3a90 	vmov	s15, r3
 800e906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e90a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e90e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800eaac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e91a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e91e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e922:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e92a:	e065      	b.n	800e9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	ee07 3a90 	vmov	s15, r3
 800e932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e936:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800eab4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e93a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e93e:	4b59      	ldr	r3, [pc, #356]	@ (800eaa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e946:	ee07 3a90 	vmov	s15, r3
 800e94a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e94e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e952:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800eaac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e95a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e95e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e96a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e96e:	e043      	b.n	800e9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	ee07 3a90 	vmov	s15, r3
 800e976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e97a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800eab8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e97e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e982:	4b48      	ldr	r3, [pc, #288]	@ (800eaa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e98a:	ee07 3a90 	vmov	s15, r3
 800e98e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e992:	ed97 6a03 	vldr	s12, [r7, #12]
 800e996:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800eaac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e99a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e99e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e9a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e9b2:	e021      	b.n	800e9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	ee07 3a90 	vmov	s15, r3
 800e9ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800eab4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e9c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e9c6:	4b37      	ldr	r3, [pc, #220]	@ (800eaa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e9c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9ce:	ee07 3a90 	vmov	s15, r3
 800e9d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e9da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800eaac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e9de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e9ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e9f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800e9f8:	4b2a      	ldr	r3, [pc, #168]	@ (800eaa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e9fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9fc:	0a5b      	lsrs	r3, r3, #9
 800e9fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea02:	ee07 3a90 	vmov	s15, r3
 800ea06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ea0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ea12:	edd7 6a07 	vldr	s13, [r7, #28]
 800ea16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea1e:	ee17 2a90 	vmov	r2, s15
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ea26:	4b1f      	ldr	r3, [pc, #124]	@ (800eaa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ea28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea2a:	0c1b      	lsrs	r3, r3, #16
 800ea2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea30:	ee07 3a90 	vmov	s15, r3
 800ea34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ea3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ea40:	edd7 6a07 	vldr	s13, [r7, #28]
 800ea44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea4c:	ee17 2a90 	vmov	r2, s15
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ea54:	4b13      	ldr	r3, [pc, #76]	@ (800eaa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ea56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea58:	0e1b      	lsrs	r3, r3, #24
 800ea5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea5e:	ee07 3a90 	vmov	s15, r3
 800ea62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ea6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ea6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ea72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea7a:	ee17 2a90 	vmov	r2, s15
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ea82:	e008      	b.n	800ea96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2200      	movs	r2, #0
 800ea88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2200      	movs	r2, #0
 800ea94:	609a      	str	r2, [r3, #8]
}
 800ea96:	bf00      	nop
 800ea98:	3724      	adds	r7, #36	@ 0x24
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr
 800eaa2:	bf00      	nop
 800eaa4:	58024400 	.word	0x58024400
 800eaa8:	03d09000 	.word	0x03d09000
 800eaac:	46000000 	.word	0x46000000
 800eab0:	4c742400 	.word	0x4c742400
 800eab4:	4a742400 	.word	0x4a742400
 800eab8:	4bbebc20 	.word	0x4bbebc20

0800eabc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800eac6:	2300      	movs	r3, #0
 800eac8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800eaca:	4b53      	ldr	r3, [pc, #332]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800eacc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eace:	f003 0303 	and.w	r3, r3, #3
 800ead2:	2b03      	cmp	r3, #3
 800ead4:	d101      	bne.n	800eada <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ead6:	2301      	movs	r3, #1
 800ead8:	e099      	b.n	800ec0e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800eada:	4b4f      	ldr	r3, [pc, #316]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	4a4e      	ldr	r2, [pc, #312]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800eae0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800eae4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eae6:	f7f3 fcb3 	bl	8002450 <HAL_GetTick>
 800eaea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800eaec:	e008      	b.n	800eb00 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800eaee:	f7f3 fcaf 	bl	8002450 <HAL_GetTick>
 800eaf2:	4602      	mov	r2, r0
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	1ad3      	subs	r3, r2, r3
 800eaf8:	2b02      	cmp	r3, #2
 800eafa:	d901      	bls.n	800eb00 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800eafc:	2303      	movs	r3, #3
 800eafe:	e086      	b.n	800ec0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800eb00:	4b45      	ldr	r3, [pc, #276]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d1f0      	bne.n	800eaee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800eb0c:	4b42      	ldr	r3, [pc, #264]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800eb0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb10:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	031b      	lsls	r3, r3, #12
 800eb1a:	493f      	ldr	r1, [pc, #252]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800eb1c:	4313      	orrs	r3, r2
 800eb1e:	628b      	str	r3, [r1, #40]	@ 0x28
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	685b      	ldr	r3, [r3, #4]
 800eb24:	3b01      	subs	r3, #1
 800eb26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	689b      	ldr	r3, [r3, #8]
 800eb2e:	3b01      	subs	r3, #1
 800eb30:	025b      	lsls	r3, r3, #9
 800eb32:	b29b      	uxth	r3, r3
 800eb34:	431a      	orrs	r2, r3
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	68db      	ldr	r3, [r3, #12]
 800eb3a:	3b01      	subs	r3, #1
 800eb3c:	041b      	lsls	r3, r3, #16
 800eb3e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800eb42:	431a      	orrs	r2, r3
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	691b      	ldr	r3, [r3, #16]
 800eb48:	3b01      	subs	r3, #1
 800eb4a:	061b      	lsls	r3, r3, #24
 800eb4c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800eb50:	4931      	ldr	r1, [pc, #196]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800eb52:	4313      	orrs	r3, r2
 800eb54:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800eb56:	4b30      	ldr	r3, [pc, #192]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800eb58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb5a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	695b      	ldr	r3, [r3, #20]
 800eb62:	492d      	ldr	r1, [pc, #180]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800eb64:	4313      	orrs	r3, r2
 800eb66:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800eb68:	4b2b      	ldr	r3, [pc, #172]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800eb6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb6c:	f023 0220 	bic.w	r2, r3, #32
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	699b      	ldr	r3, [r3, #24]
 800eb74:	4928      	ldr	r1, [pc, #160]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800eb76:	4313      	orrs	r3, r2
 800eb78:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800eb7a:	4b27      	ldr	r3, [pc, #156]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800eb7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb7e:	4a26      	ldr	r2, [pc, #152]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800eb80:	f023 0310 	bic.w	r3, r3, #16
 800eb84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800eb86:	4b24      	ldr	r3, [pc, #144]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800eb88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800eb8a:	4b24      	ldr	r3, [pc, #144]	@ (800ec1c <RCCEx_PLL2_Config+0x160>)
 800eb8c:	4013      	ands	r3, r2
 800eb8e:	687a      	ldr	r2, [r7, #4]
 800eb90:	69d2      	ldr	r2, [r2, #28]
 800eb92:	00d2      	lsls	r2, r2, #3
 800eb94:	4920      	ldr	r1, [pc, #128]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800eb96:	4313      	orrs	r3, r2
 800eb98:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800eb9a:	4b1f      	ldr	r3, [pc, #124]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800eb9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb9e:	4a1e      	ldr	r2, [pc, #120]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800eba0:	f043 0310 	orr.w	r3, r3, #16
 800eba4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d106      	bne.n	800ebba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ebac:	4b1a      	ldr	r3, [pc, #104]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800ebae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebb0:	4a19      	ldr	r2, [pc, #100]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800ebb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ebb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ebb8:	e00f      	b.n	800ebda <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d106      	bne.n	800ebce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ebc0:	4b15      	ldr	r3, [pc, #84]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800ebc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebc4:	4a14      	ldr	r2, [pc, #80]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800ebc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ebca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ebcc:	e005      	b.n	800ebda <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ebce:	4b12      	ldr	r3, [pc, #72]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800ebd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebd2:	4a11      	ldr	r2, [pc, #68]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800ebd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ebd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ebda:	4b0f      	ldr	r3, [pc, #60]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	4a0e      	ldr	r2, [pc, #56]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800ebe0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ebe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ebe6:	f7f3 fc33 	bl	8002450 <HAL_GetTick>
 800ebea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ebec:	e008      	b.n	800ec00 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ebee:	f7f3 fc2f 	bl	8002450 <HAL_GetTick>
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	1ad3      	subs	r3, r2, r3
 800ebf8:	2b02      	cmp	r3, #2
 800ebfa:	d901      	bls.n	800ec00 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ebfc:	2303      	movs	r3, #3
 800ebfe:	e006      	b.n	800ec0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ec00:	4b05      	ldr	r3, [pc, #20]	@ (800ec18 <RCCEx_PLL2_Config+0x15c>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d0f0      	beq.n	800ebee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ec0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3710      	adds	r7, #16
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop
 800ec18:	58024400 	.word	0x58024400
 800ec1c:	ffff0007 	.word	0xffff0007

0800ec20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b084      	sub	sp, #16
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ec2e:	4b53      	ldr	r3, [pc, #332]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ec30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec32:	f003 0303 	and.w	r3, r3, #3
 800ec36:	2b03      	cmp	r3, #3
 800ec38:	d101      	bne.n	800ec3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	e099      	b.n	800ed72 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ec3e:	4b4f      	ldr	r3, [pc, #316]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	4a4e      	ldr	r2, [pc, #312]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ec44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ec48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ec4a:	f7f3 fc01 	bl	8002450 <HAL_GetTick>
 800ec4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ec50:	e008      	b.n	800ec64 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ec52:	f7f3 fbfd 	bl	8002450 <HAL_GetTick>
 800ec56:	4602      	mov	r2, r0
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	1ad3      	subs	r3, r2, r3
 800ec5c:	2b02      	cmp	r3, #2
 800ec5e:	d901      	bls.n	800ec64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ec60:	2303      	movs	r3, #3
 800ec62:	e086      	b.n	800ed72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ec64:	4b45      	ldr	r3, [pc, #276]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d1f0      	bne.n	800ec52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ec70:	4b42      	ldr	r3, [pc, #264]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ec72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec74:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	051b      	lsls	r3, r3, #20
 800ec7e:	493f      	ldr	r1, [pc, #252]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ec80:	4313      	orrs	r3, r2
 800ec82:	628b      	str	r3, [r1, #40]	@ 0x28
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	3b01      	subs	r3, #1
 800ec8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	689b      	ldr	r3, [r3, #8]
 800ec92:	3b01      	subs	r3, #1
 800ec94:	025b      	lsls	r3, r3, #9
 800ec96:	b29b      	uxth	r3, r3
 800ec98:	431a      	orrs	r2, r3
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	68db      	ldr	r3, [r3, #12]
 800ec9e:	3b01      	subs	r3, #1
 800eca0:	041b      	lsls	r3, r3, #16
 800eca2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800eca6:	431a      	orrs	r2, r3
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	691b      	ldr	r3, [r3, #16]
 800ecac:	3b01      	subs	r3, #1
 800ecae:	061b      	lsls	r3, r3, #24
 800ecb0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ecb4:	4931      	ldr	r1, [pc, #196]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ecb6:	4313      	orrs	r3, r2
 800ecb8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ecba:	4b30      	ldr	r3, [pc, #192]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ecbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecbe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	695b      	ldr	r3, [r3, #20]
 800ecc6:	492d      	ldr	r1, [pc, #180]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ecc8:	4313      	orrs	r3, r2
 800ecca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800eccc:	4b2b      	ldr	r3, [pc, #172]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ecce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecd0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	699b      	ldr	r3, [r3, #24]
 800ecd8:	4928      	ldr	r1, [pc, #160]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ecda:	4313      	orrs	r3, r2
 800ecdc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ecde:	4b27      	ldr	r3, [pc, #156]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ece0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ece2:	4a26      	ldr	r2, [pc, #152]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ece4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ece8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ecea:	4b24      	ldr	r3, [pc, #144]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ecec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ecee:	4b24      	ldr	r3, [pc, #144]	@ (800ed80 <RCCEx_PLL3_Config+0x160>)
 800ecf0:	4013      	ands	r3, r2
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	69d2      	ldr	r2, [r2, #28]
 800ecf6:	00d2      	lsls	r2, r2, #3
 800ecf8:	4920      	ldr	r1, [pc, #128]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ecfa:	4313      	orrs	r3, r2
 800ecfc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ecfe:	4b1f      	ldr	r3, [pc, #124]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ed00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed02:	4a1e      	ldr	r2, [pc, #120]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ed04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ed08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d106      	bne.n	800ed1e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ed10:	4b1a      	ldr	r3, [pc, #104]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ed12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed14:	4a19      	ldr	r2, [pc, #100]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ed16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ed1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ed1c:	e00f      	b.n	800ed3e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	2b01      	cmp	r3, #1
 800ed22:	d106      	bne.n	800ed32 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ed24:	4b15      	ldr	r3, [pc, #84]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ed26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed28:	4a14      	ldr	r2, [pc, #80]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ed2a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ed2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ed30:	e005      	b.n	800ed3e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ed32:	4b12      	ldr	r3, [pc, #72]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ed34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed36:	4a11      	ldr	r2, [pc, #68]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ed38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ed3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ed3e:	4b0f      	ldr	r3, [pc, #60]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	4a0e      	ldr	r2, [pc, #56]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ed44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ed48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ed4a:	f7f3 fb81 	bl	8002450 <HAL_GetTick>
 800ed4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ed50:	e008      	b.n	800ed64 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ed52:	f7f3 fb7d 	bl	8002450 <HAL_GetTick>
 800ed56:	4602      	mov	r2, r0
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	1ad3      	subs	r3, r2, r3
 800ed5c:	2b02      	cmp	r3, #2
 800ed5e:	d901      	bls.n	800ed64 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ed60:	2303      	movs	r3, #3
 800ed62:	e006      	b.n	800ed72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ed64:	4b05      	ldr	r3, [pc, #20]	@ (800ed7c <RCCEx_PLL3_Config+0x15c>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d0f0      	beq.n	800ed52 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ed70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3710      	adds	r7, #16
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}
 800ed7a:	bf00      	nop
 800ed7c:	58024400 	.word	0x58024400
 800ed80:	ffff0007 	.word	0xffff0007

0800ed84 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b084      	sub	sp, #16
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d101      	bne.n	800ed96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ed92:	2301      	movs	r3, #1
 800ed94:	e10f      	b.n	800efb6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2200      	movs	r2, #0
 800ed9a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	4a87      	ldr	r2, [pc, #540]	@ (800efc0 <HAL_SPI_Init+0x23c>)
 800eda2:	4293      	cmp	r3, r2
 800eda4:	d00f      	beq.n	800edc6 <HAL_SPI_Init+0x42>
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	4a86      	ldr	r2, [pc, #536]	@ (800efc4 <HAL_SPI_Init+0x240>)
 800edac:	4293      	cmp	r3, r2
 800edae:	d00a      	beq.n	800edc6 <HAL_SPI_Init+0x42>
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	4a84      	ldr	r2, [pc, #528]	@ (800efc8 <HAL_SPI_Init+0x244>)
 800edb6:	4293      	cmp	r3, r2
 800edb8:	d005      	beq.n	800edc6 <HAL_SPI_Init+0x42>
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	68db      	ldr	r3, [r3, #12]
 800edbe:	2b0f      	cmp	r3, #15
 800edc0:	d901      	bls.n	800edc6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800edc2:	2301      	movs	r3, #1
 800edc4:	e0f7      	b.n	800efb6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f000 f900 	bl	800efcc <SPI_GetPacketSize>
 800edcc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	4a7b      	ldr	r2, [pc, #492]	@ (800efc0 <HAL_SPI_Init+0x23c>)
 800edd4:	4293      	cmp	r3, r2
 800edd6:	d00c      	beq.n	800edf2 <HAL_SPI_Init+0x6e>
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	4a79      	ldr	r2, [pc, #484]	@ (800efc4 <HAL_SPI_Init+0x240>)
 800edde:	4293      	cmp	r3, r2
 800ede0:	d007      	beq.n	800edf2 <HAL_SPI_Init+0x6e>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	4a78      	ldr	r2, [pc, #480]	@ (800efc8 <HAL_SPI_Init+0x244>)
 800ede8:	4293      	cmp	r3, r2
 800edea:	d002      	beq.n	800edf2 <HAL_SPI_Init+0x6e>
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	2b08      	cmp	r3, #8
 800edf0:	d811      	bhi.n	800ee16 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800edf6:	4a72      	ldr	r2, [pc, #456]	@ (800efc0 <HAL_SPI_Init+0x23c>)
 800edf8:	4293      	cmp	r3, r2
 800edfa:	d009      	beq.n	800ee10 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4a70      	ldr	r2, [pc, #448]	@ (800efc4 <HAL_SPI_Init+0x240>)
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d004      	beq.n	800ee10 <HAL_SPI_Init+0x8c>
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	4a6f      	ldr	r2, [pc, #444]	@ (800efc8 <HAL_SPI_Init+0x244>)
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	d104      	bne.n	800ee1a <HAL_SPI_Init+0x96>
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	2b10      	cmp	r3, #16
 800ee14:	d901      	bls.n	800ee1a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ee16:	2301      	movs	r3, #1
 800ee18:	e0cd      	b.n	800efb6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ee20:	b2db      	uxtb	r3, r3
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d106      	bne.n	800ee34 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f7f2 fe8a 	bl	8001b48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2202      	movs	r2, #2
 800ee38:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	681a      	ldr	r2, [r3, #0]
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	f022 0201 	bic.w	r2, r2, #1
 800ee4a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	689b      	ldr	r3, [r3, #8]
 800ee52:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ee56:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	699b      	ldr	r3, [r3, #24]
 800ee5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ee60:	d119      	bne.n	800ee96 <HAL_SPI_Init+0x112>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	685b      	ldr	r3, [r3, #4]
 800ee66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ee6a:	d103      	bne.n	800ee74 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d008      	beq.n	800ee86 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d10c      	bne.n	800ee96 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ee80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ee84:	d107      	bne.n	800ee96 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	681a      	ldr	r2, [r3, #0]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ee94:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d00f      	beq.n	800eec2 <HAL_SPI_Init+0x13e>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	68db      	ldr	r3, [r3, #12]
 800eea6:	2b06      	cmp	r3, #6
 800eea8:	d90b      	bls.n	800eec2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	430a      	orrs	r2, r1
 800eebe:	601a      	str	r2, [r3, #0]
 800eec0:	e007      	b.n	800eed2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	681a      	ldr	r2, [r3, #0]
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800eed0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	69da      	ldr	r2, [r3, #28]
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eeda:	431a      	orrs	r2, r3
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	431a      	orrs	r2, r3
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eee4:	ea42 0103 	orr.w	r1, r2, r3
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	68da      	ldr	r2, [r3, #12]
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	430a      	orrs	r2, r1
 800eef2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eefc:	431a      	orrs	r2, r3
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef02:	431a      	orrs	r2, r3
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	699b      	ldr	r3, [r3, #24]
 800ef08:	431a      	orrs	r2, r3
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	691b      	ldr	r3, [r3, #16]
 800ef0e:	431a      	orrs	r2, r3
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	695b      	ldr	r3, [r3, #20]
 800ef14:	431a      	orrs	r2, r3
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	6a1b      	ldr	r3, [r3, #32]
 800ef1a:	431a      	orrs	r2, r3
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	685b      	ldr	r3, [r3, #4]
 800ef20:	431a      	orrs	r2, r3
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef26:	431a      	orrs	r2, r3
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	689b      	ldr	r3, [r3, #8]
 800ef2c:	431a      	orrs	r2, r3
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef32:	ea42 0103 	orr.w	r1, r2, r3
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	430a      	orrs	r2, r1
 800ef40:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	685b      	ldr	r3, [r3, #4]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d113      	bne.n	800ef72 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	689b      	ldr	r3, [r3, #8]
 800ef50:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ef5c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	689b      	ldr	r3, [r3, #8]
 800ef64:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ef70:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	f022 0201 	bic.w	r2, r2, #1
 800ef80:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	685b      	ldr	r3, [r3, #4]
 800ef86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d00a      	beq.n	800efa4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	68db      	ldr	r3, [r3, #12]
 800ef94:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	430a      	orrs	r2, r1
 800efa2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2200      	movs	r2, #0
 800efa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2201      	movs	r2, #1
 800efb0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800efb4:	2300      	movs	r3, #0
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	3710      	adds	r7, #16
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop
 800efc0:	40013000 	.word	0x40013000
 800efc4:	40003800 	.word	0x40003800
 800efc8:	40003c00 	.word	0x40003c00

0800efcc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800efcc:	b480      	push	{r7}
 800efce:	b085      	sub	sp, #20
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efd8:	095b      	lsrs	r3, r3, #5
 800efda:	3301      	adds	r3, #1
 800efdc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	68db      	ldr	r3, [r3, #12]
 800efe2:	3301      	adds	r3, #1
 800efe4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	3307      	adds	r3, #7
 800efea:	08db      	lsrs	r3, r3, #3
 800efec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	68fa      	ldr	r2, [r7, #12]
 800eff2:	fb02 f303 	mul.w	r3, r2, r3
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3714      	adds	r7, #20
 800effa:	46bd      	mov	sp, r7
 800effc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f000:	4770      	bx	lr

0800f002 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f002:	b580      	push	{r7, lr}
 800f004:	b082      	sub	sp, #8
 800f006:	af00      	add	r7, sp, #0
 800f008:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d101      	bne.n	800f014 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f010:	2301      	movs	r3, #1
 800f012:	e049      	b.n	800f0a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f01a:	b2db      	uxtb	r3, r3
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d106      	bne.n	800f02e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2200      	movs	r2, #0
 800f024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f7f2 fe81 	bl	8001d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2202      	movs	r2, #2
 800f032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	3304      	adds	r3, #4
 800f03e:	4619      	mov	r1, r3
 800f040:	4610      	mov	r0, r2
 800f042:	f000 fbe9 	bl	800f818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2201      	movs	r2, #1
 800f04a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2201      	movs	r2, #1
 800f052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2201      	movs	r2, #1
 800f05a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	2201      	movs	r2, #1
 800f062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2201      	movs	r2, #1
 800f06a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2201      	movs	r2, #1
 800f072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2201      	movs	r2, #1
 800f07a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2201      	movs	r2, #1
 800f082:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	2201      	movs	r2, #1
 800f08a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2201      	movs	r2, #1
 800f092:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2201      	movs	r2, #1
 800f09a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2201      	movs	r2, #1
 800f0a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f0a6:	2300      	movs	r3, #0
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3708      	adds	r7, #8
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}

0800f0b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b082      	sub	sp, #8
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d101      	bne.n	800f0c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f0be:	2301      	movs	r3, #1
 800f0c0:	e049      	b.n	800f156 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d106      	bne.n	800f0dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f7f2 fdc4 	bl	8001c64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2202      	movs	r2, #2
 800f0e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681a      	ldr	r2, [r3, #0]
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	3304      	adds	r3, #4
 800f0ec:	4619      	mov	r1, r3
 800f0ee:	4610      	mov	r0, r2
 800f0f0:	f000 fb92 	bl	800f818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2201      	movs	r2, #1
 800f100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2201      	movs	r2, #1
 800f108:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2201      	movs	r2, #1
 800f110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2201      	movs	r2, #1
 800f118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2201      	movs	r2, #1
 800f120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2201      	movs	r2, #1
 800f128:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2201      	movs	r2, #1
 800f130:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2201      	movs	r2, #1
 800f138:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2201      	movs	r2, #1
 800f140:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2201      	movs	r2, #1
 800f148:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2201      	movs	r2, #1
 800f150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f154:	2300      	movs	r3, #0
}
 800f156:	4618      	mov	r0, r3
 800f158:	3708      	adds	r7, #8
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
	...

0800f160 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b084      	sub	sp, #16
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
 800f168:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d109      	bne.n	800f184 <HAL_TIM_PWM_Start+0x24>
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f176:	b2db      	uxtb	r3, r3
 800f178:	2b01      	cmp	r3, #1
 800f17a:	bf14      	ite	ne
 800f17c:	2301      	movne	r3, #1
 800f17e:	2300      	moveq	r3, #0
 800f180:	b2db      	uxtb	r3, r3
 800f182:	e03c      	b.n	800f1fe <HAL_TIM_PWM_Start+0x9e>
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	2b04      	cmp	r3, #4
 800f188:	d109      	bne.n	800f19e <HAL_TIM_PWM_Start+0x3e>
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f190:	b2db      	uxtb	r3, r3
 800f192:	2b01      	cmp	r3, #1
 800f194:	bf14      	ite	ne
 800f196:	2301      	movne	r3, #1
 800f198:	2300      	moveq	r3, #0
 800f19a:	b2db      	uxtb	r3, r3
 800f19c:	e02f      	b.n	800f1fe <HAL_TIM_PWM_Start+0x9e>
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	2b08      	cmp	r3, #8
 800f1a2:	d109      	bne.n	800f1b8 <HAL_TIM_PWM_Start+0x58>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f1aa:	b2db      	uxtb	r3, r3
 800f1ac:	2b01      	cmp	r3, #1
 800f1ae:	bf14      	ite	ne
 800f1b0:	2301      	movne	r3, #1
 800f1b2:	2300      	moveq	r3, #0
 800f1b4:	b2db      	uxtb	r3, r3
 800f1b6:	e022      	b.n	800f1fe <HAL_TIM_PWM_Start+0x9e>
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	2b0c      	cmp	r3, #12
 800f1bc:	d109      	bne.n	800f1d2 <HAL_TIM_PWM_Start+0x72>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f1c4:	b2db      	uxtb	r3, r3
 800f1c6:	2b01      	cmp	r3, #1
 800f1c8:	bf14      	ite	ne
 800f1ca:	2301      	movne	r3, #1
 800f1cc:	2300      	moveq	r3, #0
 800f1ce:	b2db      	uxtb	r3, r3
 800f1d0:	e015      	b.n	800f1fe <HAL_TIM_PWM_Start+0x9e>
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	2b10      	cmp	r3, #16
 800f1d6:	d109      	bne.n	800f1ec <HAL_TIM_PWM_Start+0x8c>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f1de:	b2db      	uxtb	r3, r3
 800f1e0:	2b01      	cmp	r3, #1
 800f1e2:	bf14      	ite	ne
 800f1e4:	2301      	movne	r3, #1
 800f1e6:	2300      	moveq	r3, #0
 800f1e8:	b2db      	uxtb	r3, r3
 800f1ea:	e008      	b.n	800f1fe <HAL_TIM_PWM_Start+0x9e>
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f1f2:	b2db      	uxtb	r3, r3
 800f1f4:	2b01      	cmp	r3, #1
 800f1f6:	bf14      	ite	ne
 800f1f8:	2301      	movne	r3, #1
 800f1fa:	2300      	moveq	r3, #0
 800f1fc:	b2db      	uxtb	r3, r3
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d001      	beq.n	800f206 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f202:	2301      	movs	r3, #1
 800f204:	e0a1      	b.n	800f34a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d104      	bne.n	800f216 <HAL_TIM_PWM_Start+0xb6>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2202      	movs	r2, #2
 800f210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f214:	e023      	b.n	800f25e <HAL_TIM_PWM_Start+0xfe>
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	2b04      	cmp	r3, #4
 800f21a:	d104      	bne.n	800f226 <HAL_TIM_PWM_Start+0xc6>
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2202      	movs	r2, #2
 800f220:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f224:	e01b      	b.n	800f25e <HAL_TIM_PWM_Start+0xfe>
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	2b08      	cmp	r3, #8
 800f22a:	d104      	bne.n	800f236 <HAL_TIM_PWM_Start+0xd6>
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2202      	movs	r2, #2
 800f230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f234:	e013      	b.n	800f25e <HAL_TIM_PWM_Start+0xfe>
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	2b0c      	cmp	r3, #12
 800f23a:	d104      	bne.n	800f246 <HAL_TIM_PWM_Start+0xe6>
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2202      	movs	r2, #2
 800f240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f244:	e00b      	b.n	800f25e <HAL_TIM_PWM_Start+0xfe>
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	2b10      	cmp	r3, #16
 800f24a:	d104      	bne.n	800f256 <HAL_TIM_PWM_Start+0xf6>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2202      	movs	r2, #2
 800f250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f254:	e003      	b.n	800f25e <HAL_TIM_PWM_Start+0xfe>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2202      	movs	r2, #2
 800f25a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	2201      	movs	r2, #1
 800f264:	6839      	ldr	r1, [r7, #0]
 800f266:	4618      	mov	r0, r3
 800f268:	f000 fe4c 	bl	800ff04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	4a38      	ldr	r2, [pc, #224]	@ (800f354 <HAL_TIM_PWM_Start+0x1f4>)
 800f272:	4293      	cmp	r3, r2
 800f274:	d013      	beq.n	800f29e <HAL_TIM_PWM_Start+0x13e>
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	4a37      	ldr	r2, [pc, #220]	@ (800f358 <HAL_TIM_PWM_Start+0x1f8>)
 800f27c:	4293      	cmp	r3, r2
 800f27e:	d00e      	beq.n	800f29e <HAL_TIM_PWM_Start+0x13e>
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	4a35      	ldr	r2, [pc, #212]	@ (800f35c <HAL_TIM_PWM_Start+0x1fc>)
 800f286:	4293      	cmp	r3, r2
 800f288:	d009      	beq.n	800f29e <HAL_TIM_PWM_Start+0x13e>
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	4a34      	ldr	r2, [pc, #208]	@ (800f360 <HAL_TIM_PWM_Start+0x200>)
 800f290:	4293      	cmp	r3, r2
 800f292:	d004      	beq.n	800f29e <HAL_TIM_PWM_Start+0x13e>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	4a32      	ldr	r2, [pc, #200]	@ (800f364 <HAL_TIM_PWM_Start+0x204>)
 800f29a:	4293      	cmp	r3, r2
 800f29c:	d101      	bne.n	800f2a2 <HAL_TIM_PWM_Start+0x142>
 800f29e:	2301      	movs	r3, #1
 800f2a0:	e000      	b.n	800f2a4 <HAL_TIM_PWM_Start+0x144>
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d007      	beq.n	800f2b8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f2b6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	4a25      	ldr	r2, [pc, #148]	@ (800f354 <HAL_TIM_PWM_Start+0x1f4>)
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	d022      	beq.n	800f308 <HAL_TIM_PWM_Start+0x1a8>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f2ca:	d01d      	beq.n	800f308 <HAL_TIM_PWM_Start+0x1a8>
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	4a25      	ldr	r2, [pc, #148]	@ (800f368 <HAL_TIM_PWM_Start+0x208>)
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d018      	beq.n	800f308 <HAL_TIM_PWM_Start+0x1a8>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	4a24      	ldr	r2, [pc, #144]	@ (800f36c <HAL_TIM_PWM_Start+0x20c>)
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d013      	beq.n	800f308 <HAL_TIM_PWM_Start+0x1a8>
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	4a22      	ldr	r2, [pc, #136]	@ (800f370 <HAL_TIM_PWM_Start+0x210>)
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d00e      	beq.n	800f308 <HAL_TIM_PWM_Start+0x1a8>
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	4a1a      	ldr	r2, [pc, #104]	@ (800f358 <HAL_TIM_PWM_Start+0x1f8>)
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	d009      	beq.n	800f308 <HAL_TIM_PWM_Start+0x1a8>
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	4a1e      	ldr	r2, [pc, #120]	@ (800f374 <HAL_TIM_PWM_Start+0x214>)
 800f2fa:	4293      	cmp	r3, r2
 800f2fc:	d004      	beq.n	800f308 <HAL_TIM_PWM_Start+0x1a8>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	4a16      	ldr	r2, [pc, #88]	@ (800f35c <HAL_TIM_PWM_Start+0x1fc>)
 800f304:	4293      	cmp	r3, r2
 800f306:	d115      	bne.n	800f334 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	689a      	ldr	r2, [r3, #8]
 800f30e:	4b1a      	ldr	r3, [pc, #104]	@ (800f378 <HAL_TIM_PWM_Start+0x218>)
 800f310:	4013      	ands	r3, r2
 800f312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2b06      	cmp	r3, #6
 800f318:	d015      	beq.n	800f346 <HAL_TIM_PWM_Start+0x1e6>
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f320:	d011      	beq.n	800f346 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	681a      	ldr	r2, [r3, #0]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	f042 0201 	orr.w	r2, r2, #1
 800f330:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f332:	e008      	b.n	800f346 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	681a      	ldr	r2, [r3, #0]
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	f042 0201 	orr.w	r2, r2, #1
 800f342:	601a      	str	r2, [r3, #0]
 800f344:	e000      	b.n	800f348 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f346:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f348:	2300      	movs	r3, #0
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3710      	adds	r7, #16
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}
 800f352:	bf00      	nop
 800f354:	40010000 	.word	0x40010000
 800f358:	40010400 	.word	0x40010400
 800f35c:	40014000 	.word	0x40014000
 800f360:	40014400 	.word	0x40014400
 800f364:	40014800 	.word	0x40014800
 800f368:	40000400 	.word	0x40000400
 800f36c:	40000800 	.word	0x40000800
 800f370:	40000c00 	.word	0x40000c00
 800f374:	40001800 	.word	0x40001800
 800f378:	00010007 	.word	0x00010007

0800f37c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b084      	sub	sp, #16
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	68db      	ldr	r3, [r3, #12]
 800f38a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	691b      	ldr	r3, [r3, #16]
 800f392:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	f003 0302 	and.w	r3, r3, #2
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d020      	beq.n	800f3e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	f003 0302 	and.w	r3, r3, #2
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d01b      	beq.n	800f3e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	f06f 0202 	mvn.w	r2, #2
 800f3b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2201      	movs	r2, #1
 800f3b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	699b      	ldr	r3, [r3, #24]
 800f3be:	f003 0303 	and.w	r3, r3, #3
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d003      	beq.n	800f3ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f000 fa08 	bl	800f7dc <HAL_TIM_IC_CaptureCallback>
 800f3cc:	e005      	b.n	800f3da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 f9fa 	bl	800f7c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f000 fa0b 	bl	800f7f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	f003 0304 	and.w	r3, r3, #4
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d020      	beq.n	800f42c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	f003 0304 	and.w	r3, r3, #4
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d01b      	beq.n	800f42c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f06f 0204 	mvn.w	r2, #4
 800f3fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2202      	movs	r2, #2
 800f402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	699b      	ldr	r3, [r3, #24]
 800f40a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d003      	beq.n	800f41a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f000 f9e2 	bl	800f7dc <HAL_TIM_IC_CaptureCallback>
 800f418:	e005      	b.n	800f426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f000 f9d4 	bl	800f7c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f000 f9e5 	bl	800f7f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2200      	movs	r2, #0
 800f42a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	f003 0308 	and.w	r3, r3, #8
 800f432:	2b00      	cmp	r3, #0
 800f434:	d020      	beq.n	800f478 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	f003 0308 	and.w	r3, r3, #8
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d01b      	beq.n	800f478 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	f06f 0208 	mvn.w	r2, #8
 800f448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2204      	movs	r2, #4
 800f44e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	69db      	ldr	r3, [r3, #28]
 800f456:	f003 0303 	and.w	r3, r3, #3
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d003      	beq.n	800f466 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f000 f9bc 	bl	800f7dc <HAL_TIM_IC_CaptureCallback>
 800f464:	e005      	b.n	800f472 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f000 f9ae 	bl	800f7c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	f000 f9bf 	bl	800f7f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2200      	movs	r2, #0
 800f476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	f003 0310 	and.w	r3, r3, #16
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d020      	beq.n	800f4c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	f003 0310 	and.w	r3, r3, #16
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d01b      	beq.n	800f4c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	f06f 0210 	mvn.w	r2, #16
 800f494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2208      	movs	r2, #8
 800f49a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	69db      	ldr	r3, [r3, #28]
 800f4a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d003      	beq.n	800f4b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f000 f996 	bl	800f7dc <HAL_TIM_IC_CaptureCallback>
 800f4b0:	e005      	b.n	800f4be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f000 f988 	bl	800f7c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f000 f999 	bl	800f7f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	f003 0301 	and.w	r3, r3, #1
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d00c      	beq.n	800f4e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	f003 0301 	and.w	r3, r3, #1
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d007      	beq.n	800f4e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	f06f 0201 	mvn.w	r2, #1
 800f4e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f000 f966 	bl	800f7b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d104      	bne.n	800f4fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d00c      	beq.n	800f516 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f502:	2b00      	cmp	r3, #0
 800f504:	d007      	beq.n	800f516 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f50e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f000 fe33 	bl	801017c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d00c      	beq.n	800f53a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f526:	2b00      	cmp	r3, #0
 800f528:	d007      	beq.n	800f53a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	f000 fe2b 	bl	8010190 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f540:	2b00      	cmp	r3, #0
 800f542:	d00c      	beq.n	800f55e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d007      	beq.n	800f55e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f000 f953 	bl	800f804 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	f003 0320 	and.w	r3, r3, #32
 800f564:	2b00      	cmp	r3, #0
 800f566:	d00c      	beq.n	800f582 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	f003 0320 	and.w	r3, r3, #32
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d007      	beq.n	800f582 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	f06f 0220 	mvn.w	r2, #32
 800f57a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f000 fdf3 	bl	8010168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f582:	bf00      	nop
 800f584:	3710      	adds	r7, #16
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}
	...

0800f58c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b086      	sub	sp, #24
 800f590:	af00      	add	r7, sp, #0
 800f592:	60f8      	str	r0, [r7, #12]
 800f594:	60b9      	str	r1, [r7, #8]
 800f596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f598:	2300      	movs	r3, #0
 800f59a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f5a2:	2b01      	cmp	r3, #1
 800f5a4:	d101      	bne.n	800f5aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f5a6:	2302      	movs	r3, #2
 800f5a8:	e0ff      	b.n	800f7aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	2201      	movs	r2, #1
 800f5ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	2b14      	cmp	r3, #20
 800f5b6:	f200 80f0 	bhi.w	800f79a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f5ba:	a201      	add	r2, pc, #4	@ (adr r2, 800f5c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c0:	0800f615 	.word	0x0800f615
 800f5c4:	0800f79b 	.word	0x0800f79b
 800f5c8:	0800f79b 	.word	0x0800f79b
 800f5cc:	0800f79b 	.word	0x0800f79b
 800f5d0:	0800f655 	.word	0x0800f655
 800f5d4:	0800f79b 	.word	0x0800f79b
 800f5d8:	0800f79b 	.word	0x0800f79b
 800f5dc:	0800f79b 	.word	0x0800f79b
 800f5e0:	0800f697 	.word	0x0800f697
 800f5e4:	0800f79b 	.word	0x0800f79b
 800f5e8:	0800f79b 	.word	0x0800f79b
 800f5ec:	0800f79b 	.word	0x0800f79b
 800f5f0:	0800f6d7 	.word	0x0800f6d7
 800f5f4:	0800f79b 	.word	0x0800f79b
 800f5f8:	0800f79b 	.word	0x0800f79b
 800f5fc:	0800f79b 	.word	0x0800f79b
 800f600:	0800f719 	.word	0x0800f719
 800f604:	0800f79b 	.word	0x0800f79b
 800f608:	0800f79b 	.word	0x0800f79b
 800f60c:	0800f79b 	.word	0x0800f79b
 800f610:	0800f759 	.word	0x0800f759
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	68b9      	ldr	r1, [r7, #8]
 800f61a:	4618      	mov	r0, r3
 800f61c:	f000 f99c 	bl	800f958 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	699a      	ldr	r2, [r3, #24]
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	f042 0208 	orr.w	r2, r2, #8
 800f62e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	699a      	ldr	r2, [r3, #24]
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	f022 0204 	bic.w	r2, r2, #4
 800f63e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	6999      	ldr	r1, [r3, #24]
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	691a      	ldr	r2, [r3, #16]
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	430a      	orrs	r2, r1
 800f650:	619a      	str	r2, [r3, #24]
      break;
 800f652:	e0a5      	b.n	800f7a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	68b9      	ldr	r1, [r7, #8]
 800f65a:	4618      	mov	r0, r3
 800f65c:	f000 fa0c 	bl	800fa78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	699a      	ldr	r2, [r3, #24]
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f66e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	699a      	ldr	r2, [r3, #24]
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f67e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	6999      	ldr	r1, [r3, #24]
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	691b      	ldr	r3, [r3, #16]
 800f68a:	021a      	lsls	r2, r3, #8
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	430a      	orrs	r2, r1
 800f692:	619a      	str	r2, [r3, #24]
      break;
 800f694:	e084      	b.n	800f7a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	68b9      	ldr	r1, [r7, #8]
 800f69c:	4618      	mov	r0, r3
 800f69e:	f000 fa75 	bl	800fb8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	69da      	ldr	r2, [r3, #28]
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	f042 0208 	orr.w	r2, r2, #8
 800f6b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	69da      	ldr	r2, [r3, #28]
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f022 0204 	bic.w	r2, r2, #4
 800f6c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	69d9      	ldr	r1, [r3, #28]
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	691a      	ldr	r2, [r3, #16]
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	430a      	orrs	r2, r1
 800f6d2:	61da      	str	r2, [r3, #28]
      break;
 800f6d4:	e064      	b.n	800f7a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	68b9      	ldr	r1, [r7, #8]
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f000 fadd 	bl	800fc9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	69da      	ldr	r2, [r3, #28]
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f6f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	69da      	ldr	r2, [r3, #28]
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	69d9      	ldr	r1, [r3, #28]
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	691b      	ldr	r3, [r3, #16]
 800f70c:	021a      	lsls	r2, r3, #8
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	430a      	orrs	r2, r1
 800f714:	61da      	str	r2, [r3, #28]
      break;
 800f716:	e043      	b.n	800f7a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	68b9      	ldr	r1, [r7, #8]
 800f71e:	4618      	mov	r0, r3
 800f720:	f000 fb26 	bl	800fd70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	f042 0208 	orr.w	r2, r2, #8
 800f732:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	f022 0204 	bic.w	r2, r2, #4
 800f742:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	691a      	ldr	r2, [r3, #16]
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	430a      	orrs	r2, r1
 800f754:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f756:	e023      	b.n	800f7a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	68b9      	ldr	r1, [r7, #8]
 800f75e:	4618      	mov	r0, r3
 800f760:	f000 fb6a 	bl	800fe38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f772:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f782:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	691b      	ldr	r3, [r3, #16]
 800f78e:	021a      	lsls	r2, r3, #8
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	430a      	orrs	r2, r1
 800f796:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f798:	e002      	b.n	800f7a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f79a:	2301      	movs	r3, #1
 800f79c:	75fb      	strb	r3, [r7, #23]
      break;
 800f79e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f7a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3718      	adds	r7, #24
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}
 800f7b2:	bf00      	nop

0800f7b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f7b4:	b480      	push	{r7}
 800f7b6:	b083      	sub	sp, #12
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f7bc:	bf00      	nop
 800f7be:	370c      	adds	r7, #12
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c6:	4770      	bx	lr

0800f7c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b083      	sub	sp, #12
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f7d0:	bf00      	nop
 800f7d2:	370c      	adds	r7, #12
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7da:	4770      	bx	lr

0800f7dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f7dc:	b480      	push	{r7}
 800f7de:	b083      	sub	sp, #12
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f7e4:	bf00      	nop
 800f7e6:	370c      	adds	r7, #12
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ee:	4770      	bx	lr

0800f7f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b083      	sub	sp, #12
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f7f8:	bf00      	nop
 800f7fa:	370c      	adds	r7, #12
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f802:	4770      	bx	lr

0800f804 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f804:	b480      	push	{r7}
 800f806:	b083      	sub	sp, #12
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f80c:	bf00      	nop
 800f80e:	370c      	adds	r7, #12
 800f810:	46bd      	mov	sp, r7
 800f812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f816:	4770      	bx	lr

0800f818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f818:	b480      	push	{r7}
 800f81a:	b085      	sub	sp, #20
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	4a43      	ldr	r2, [pc, #268]	@ (800f938 <TIM_Base_SetConfig+0x120>)
 800f82c:	4293      	cmp	r3, r2
 800f82e:	d013      	beq.n	800f858 <TIM_Base_SetConfig+0x40>
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f836:	d00f      	beq.n	800f858 <TIM_Base_SetConfig+0x40>
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	4a40      	ldr	r2, [pc, #256]	@ (800f93c <TIM_Base_SetConfig+0x124>)
 800f83c:	4293      	cmp	r3, r2
 800f83e:	d00b      	beq.n	800f858 <TIM_Base_SetConfig+0x40>
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	4a3f      	ldr	r2, [pc, #252]	@ (800f940 <TIM_Base_SetConfig+0x128>)
 800f844:	4293      	cmp	r3, r2
 800f846:	d007      	beq.n	800f858 <TIM_Base_SetConfig+0x40>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	4a3e      	ldr	r2, [pc, #248]	@ (800f944 <TIM_Base_SetConfig+0x12c>)
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d003      	beq.n	800f858 <TIM_Base_SetConfig+0x40>
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	4a3d      	ldr	r2, [pc, #244]	@ (800f948 <TIM_Base_SetConfig+0x130>)
 800f854:	4293      	cmp	r3, r2
 800f856:	d108      	bne.n	800f86a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f85e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	685b      	ldr	r3, [r3, #4]
 800f864:	68fa      	ldr	r2, [r7, #12]
 800f866:	4313      	orrs	r3, r2
 800f868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	4a32      	ldr	r2, [pc, #200]	@ (800f938 <TIM_Base_SetConfig+0x120>)
 800f86e:	4293      	cmp	r3, r2
 800f870:	d01f      	beq.n	800f8b2 <TIM_Base_SetConfig+0x9a>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f878:	d01b      	beq.n	800f8b2 <TIM_Base_SetConfig+0x9a>
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	4a2f      	ldr	r2, [pc, #188]	@ (800f93c <TIM_Base_SetConfig+0x124>)
 800f87e:	4293      	cmp	r3, r2
 800f880:	d017      	beq.n	800f8b2 <TIM_Base_SetConfig+0x9a>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	4a2e      	ldr	r2, [pc, #184]	@ (800f940 <TIM_Base_SetConfig+0x128>)
 800f886:	4293      	cmp	r3, r2
 800f888:	d013      	beq.n	800f8b2 <TIM_Base_SetConfig+0x9a>
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	4a2d      	ldr	r2, [pc, #180]	@ (800f944 <TIM_Base_SetConfig+0x12c>)
 800f88e:	4293      	cmp	r3, r2
 800f890:	d00f      	beq.n	800f8b2 <TIM_Base_SetConfig+0x9a>
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	4a2c      	ldr	r2, [pc, #176]	@ (800f948 <TIM_Base_SetConfig+0x130>)
 800f896:	4293      	cmp	r3, r2
 800f898:	d00b      	beq.n	800f8b2 <TIM_Base_SetConfig+0x9a>
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	4a2b      	ldr	r2, [pc, #172]	@ (800f94c <TIM_Base_SetConfig+0x134>)
 800f89e:	4293      	cmp	r3, r2
 800f8a0:	d007      	beq.n	800f8b2 <TIM_Base_SetConfig+0x9a>
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	4a2a      	ldr	r2, [pc, #168]	@ (800f950 <TIM_Base_SetConfig+0x138>)
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d003      	beq.n	800f8b2 <TIM_Base_SetConfig+0x9a>
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	4a29      	ldr	r2, [pc, #164]	@ (800f954 <TIM_Base_SetConfig+0x13c>)
 800f8ae:	4293      	cmp	r3, r2
 800f8b0:	d108      	bne.n	800f8c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f8b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	68db      	ldr	r3, [r3, #12]
 800f8be:	68fa      	ldr	r2, [r7, #12]
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	695b      	ldr	r3, [r3, #20]
 800f8ce:	4313      	orrs	r3, r2
 800f8d0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	689a      	ldr	r2, [r3, #8]
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	681a      	ldr	r2, [r3, #0]
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	4a14      	ldr	r2, [pc, #80]	@ (800f938 <TIM_Base_SetConfig+0x120>)
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	d00f      	beq.n	800f90a <TIM_Base_SetConfig+0xf2>
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	4a16      	ldr	r2, [pc, #88]	@ (800f948 <TIM_Base_SetConfig+0x130>)
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	d00b      	beq.n	800f90a <TIM_Base_SetConfig+0xf2>
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	4a15      	ldr	r2, [pc, #84]	@ (800f94c <TIM_Base_SetConfig+0x134>)
 800f8f6:	4293      	cmp	r3, r2
 800f8f8:	d007      	beq.n	800f90a <TIM_Base_SetConfig+0xf2>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	4a14      	ldr	r2, [pc, #80]	@ (800f950 <TIM_Base_SetConfig+0x138>)
 800f8fe:	4293      	cmp	r3, r2
 800f900:	d003      	beq.n	800f90a <TIM_Base_SetConfig+0xf2>
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	4a13      	ldr	r2, [pc, #76]	@ (800f954 <TIM_Base_SetConfig+0x13c>)
 800f906:	4293      	cmp	r3, r2
 800f908:	d103      	bne.n	800f912 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	691a      	ldr	r2, [r3, #16]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	f043 0204 	orr.w	r2, r3, #4
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2201      	movs	r2, #1
 800f922:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	68fa      	ldr	r2, [r7, #12]
 800f928:	601a      	str	r2, [r3, #0]
}
 800f92a:	bf00      	nop
 800f92c:	3714      	adds	r7, #20
 800f92e:	46bd      	mov	sp, r7
 800f930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f934:	4770      	bx	lr
 800f936:	bf00      	nop
 800f938:	40010000 	.word	0x40010000
 800f93c:	40000400 	.word	0x40000400
 800f940:	40000800 	.word	0x40000800
 800f944:	40000c00 	.word	0x40000c00
 800f948:	40010400 	.word	0x40010400
 800f94c:	40014000 	.word	0x40014000
 800f950:	40014400 	.word	0x40014400
 800f954:	40014800 	.word	0x40014800

0800f958 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f958:	b480      	push	{r7}
 800f95a:	b087      	sub	sp, #28
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
 800f960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	6a1b      	ldr	r3, [r3, #32]
 800f966:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6a1b      	ldr	r3, [r3, #32]
 800f96c:	f023 0201 	bic.w	r2, r3, #1
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	699b      	ldr	r3, [r3, #24]
 800f97e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f980:	68fa      	ldr	r2, [r7, #12]
 800f982:	4b37      	ldr	r3, [pc, #220]	@ (800fa60 <TIM_OC1_SetConfig+0x108>)
 800f984:	4013      	ands	r3, r2
 800f986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	f023 0303 	bic.w	r3, r3, #3
 800f98e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	68fa      	ldr	r2, [r7, #12]
 800f996:	4313      	orrs	r3, r2
 800f998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	f023 0302 	bic.w	r3, r3, #2
 800f9a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	689b      	ldr	r3, [r3, #8]
 800f9a6:	697a      	ldr	r2, [r7, #20]
 800f9a8:	4313      	orrs	r3, r2
 800f9aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	4a2d      	ldr	r2, [pc, #180]	@ (800fa64 <TIM_OC1_SetConfig+0x10c>)
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	d00f      	beq.n	800f9d4 <TIM_OC1_SetConfig+0x7c>
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	4a2c      	ldr	r2, [pc, #176]	@ (800fa68 <TIM_OC1_SetConfig+0x110>)
 800f9b8:	4293      	cmp	r3, r2
 800f9ba:	d00b      	beq.n	800f9d4 <TIM_OC1_SetConfig+0x7c>
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	4a2b      	ldr	r2, [pc, #172]	@ (800fa6c <TIM_OC1_SetConfig+0x114>)
 800f9c0:	4293      	cmp	r3, r2
 800f9c2:	d007      	beq.n	800f9d4 <TIM_OC1_SetConfig+0x7c>
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	4a2a      	ldr	r2, [pc, #168]	@ (800fa70 <TIM_OC1_SetConfig+0x118>)
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	d003      	beq.n	800f9d4 <TIM_OC1_SetConfig+0x7c>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	4a29      	ldr	r2, [pc, #164]	@ (800fa74 <TIM_OC1_SetConfig+0x11c>)
 800f9d0:	4293      	cmp	r3, r2
 800f9d2:	d10c      	bne.n	800f9ee <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	f023 0308 	bic.w	r3, r3, #8
 800f9da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	68db      	ldr	r3, [r3, #12]
 800f9e0:	697a      	ldr	r2, [r7, #20]
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f9e6:	697b      	ldr	r3, [r7, #20]
 800f9e8:	f023 0304 	bic.w	r3, r3, #4
 800f9ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	4a1c      	ldr	r2, [pc, #112]	@ (800fa64 <TIM_OC1_SetConfig+0x10c>)
 800f9f2:	4293      	cmp	r3, r2
 800f9f4:	d00f      	beq.n	800fa16 <TIM_OC1_SetConfig+0xbe>
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	4a1b      	ldr	r2, [pc, #108]	@ (800fa68 <TIM_OC1_SetConfig+0x110>)
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	d00b      	beq.n	800fa16 <TIM_OC1_SetConfig+0xbe>
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	4a1a      	ldr	r2, [pc, #104]	@ (800fa6c <TIM_OC1_SetConfig+0x114>)
 800fa02:	4293      	cmp	r3, r2
 800fa04:	d007      	beq.n	800fa16 <TIM_OC1_SetConfig+0xbe>
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	4a19      	ldr	r2, [pc, #100]	@ (800fa70 <TIM_OC1_SetConfig+0x118>)
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	d003      	beq.n	800fa16 <TIM_OC1_SetConfig+0xbe>
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	4a18      	ldr	r2, [pc, #96]	@ (800fa74 <TIM_OC1_SetConfig+0x11c>)
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d111      	bne.n	800fa3a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fa16:	693b      	ldr	r3, [r7, #16]
 800fa18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fa1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fa1e:	693b      	ldr	r3, [r7, #16]
 800fa20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fa24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	695b      	ldr	r3, [r3, #20]
 800fa2a:	693a      	ldr	r2, [r7, #16]
 800fa2c:	4313      	orrs	r3, r2
 800fa2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	699b      	ldr	r3, [r3, #24]
 800fa34:	693a      	ldr	r2, [r7, #16]
 800fa36:	4313      	orrs	r3, r2
 800fa38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	693a      	ldr	r2, [r7, #16]
 800fa3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	68fa      	ldr	r2, [r7, #12]
 800fa44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	685a      	ldr	r2, [r3, #4]
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	697a      	ldr	r2, [r7, #20]
 800fa52:	621a      	str	r2, [r3, #32]
}
 800fa54:	bf00      	nop
 800fa56:	371c      	adds	r7, #28
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5e:	4770      	bx	lr
 800fa60:	fffeff8f 	.word	0xfffeff8f
 800fa64:	40010000 	.word	0x40010000
 800fa68:	40010400 	.word	0x40010400
 800fa6c:	40014000 	.word	0x40014000
 800fa70:	40014400 	.word	0x40014400
 800fa74:	40014800 	.word	0x40014800

0800fa78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b087      	sub	sp, #28
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6a1b      	ldr	r3, [r3, #32]
 800fa86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	6a1b      	ldr	r3, [r3, #32]
 800fa8c:	f023 0210 	bic.w	r2, r3, #16
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	699b      	ldr	r3, [r3, #24]
 800fa9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800faa0:	68fa      	ldr	r2, [r7, #12]
 800faa2:	4b34      	ldr	r3, [pc, #208]	@ (800fb74 <TIM_OC2_SetConfig+0xfc>)
 800faa4:	4013      	ands	r3, r2
 800faa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800faae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	021b      	lsls	r3, r3, #8
 800fab6:	68fa      	ldr	r2, [r7, #12]
 800fab8:	4313      	orrs	r3, r2
 800faba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fabc:	697b      	ldr	r3, [r7, #20]
 800fabe:	f023 0320 	bic.w	r3, r3, #32
 800fac2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	689b      	ldr	r3, [r3, #8]
 800fac8:	011b      	lsls	r3, r3, #4
 800faca:	697a      	ldr	r2, [r7, #20]
 800facc:	4313      	orrs	r3, r2
 800face:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	4a29      	ldr	r2, [pc, #164]	@ (800fb78 <TIM_OC2_SetConfig+0x100>)
 800fad4:	4293      	cmp	r3, r2
 800fad6:	d003      	beq.n	800fae0 <TIM_OC2_SetConfig+0x68>
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	4a28      	ldr	r2, [pc, #160]	@ (800fb7c <TIM_OC2_SetConfig+0x104>)
 800fadc:	4293      	cmp	r3, r2
 800fade:	d10d      	bne.n	800fafc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	68db      	ldr	r3, [r3, #12]
 800faec:	011b      	lsls	r3, r3, #4
 800faee:	697a      	ldr	r2, [r7, #20]
 800faf0:	4313      	orrs	r3, r2
 800faf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fafa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	4a1e      	ldr	r2, [pc, #120]	@ (800fb78 <TIM_OC2_SetConfig+0x100>)
 800fb00:	4293      	cmp	r3, r2
 800fb02:	d00f      	beq.n	800fb24 <TIM_OC2_SetConfig+0xac>
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	4a1d      	ldr	r2, [pc, #116]	@ (800fb7c <TIM_OC2_SetConfig+0x104>)
 800fb08:	4293      	cmp	r3, r2
 800fb0a:	d00b      	beq.n	800fb24 <TIM_OC2_SetConfig+0xac>
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	4a1c      	ldr	r2, [pc, #112]	@ (800fb80 <TIM_OC2_SetConfig+0x108>)
 800fb10:	4293      	cmp	r3, r2
 800fb12:	d007      	beq.n	800fb24 <TIM_OC2_SetConfig+0xac>
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	4a1b      	ldr	r2, [pc, #108]	@ (800fb84 <TIM_OC2_SetConfig+0x10c>)
 800fb18:	4293      	cmp	r3, r2
 800fb1a:	d003      	beq.n	800fb24 <TIM_OC2_SetConfig+0xac>
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	4a1a      	ldr	r2, [pc, #104]	@ (800fb88 <TIM_OC2_SetConfig+0x110>)
 800fb20:	4293      	cmp	r3, r2
 800fb22:	d113      	bne.n	800fb4c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fb24:	693b      	ldr	r3, [r7, #16]
 800fb26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fb2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fb2c:	693b      	ldr	r3, [r7, #16]
 800fb2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fb32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	695b      	ldr	r3, [r3, #20]
 800fb38:	009b      	lsls	r3, r3, #2
 800fb3a:	693a      	ldr	r2, [r7, #16]
 800fb3c:	4313      	orrs	r3, r2
 800fb3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	699b      	ldr	r3, [r3, #24]
 800fb44:	009b      	lsls	r3, r3, #2
 800fb46:	693a      	ldr	r2, [r7, #16]
 800fb48:	4313      	orrs	r3, r2
 800fb4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	693a      	ldr	r2, [r7, #16]
 800fb50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	68fa      	ldr	r2, [r7, #12]
 800fb56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	685a      	ldr	r2, [r3, #4]
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	697a      	ldr	r2, [r7, #20]
 800fb64:	621a      	str	r2, [r3, #32]
}
 800fb66:	bf00      	nop
 800fb68:	371c      	adds	r7, #28
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb70:	4770      	bx	lr
 800fb72:	bf00      	nop
 800fb74:	feff8fff 	.word	0xfeff8fff
 800fb78:	40010000 	.word	0x40010000
 800fb7c:	40010400 	.word	0x40010400
 800fb80:	40014000 	.word	0x40014000
 800fb84:	40014400 	.word	0x40014400
 800fb88:	40014800 	.word	0x40014800

0800fb8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb8c:	b480      	push	{r7}
 800fb8e:	b087      	sub	sp, #28
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
 800fb94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6a1b      	ldr	r3, [r3, #32]
 800fb9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6a1b      	ldr	r3, [r3, #32]
 800fba0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	685b      	ldr	r3, [r3, #4]
 800fbac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	69db      	ldr	r3, [r3, #28]
 800fbb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fbb4:	68fa      	ldr	r2, [r7, #12]
 800fbb6:	4b33      	ldr	r3, [pc, #204]	@ (800fc84 <TIM_OC3_SetConfig+0xf8>)
 800fbb8:	4013      	ands	r3, r2
 800fbba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	f023 0303 	bic.w	r3, r3, #3
 800fbc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	68fa      	ldr	r2, [r7, #12]
 800fbca:	4313      	orrs	r3, r2
 800fbcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fbce:	697b      	ldr	r3, [r7, #20]
 800fbd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fbd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	689b      	ldr	r3, [r3, #8]
 800fbda:	021b      	lsls	r3, r3, #8
 800fbdc:	697a      	ldr	r2, [r7, #20]
 800fbde:	4313      	orrs	r3, r2
 800fbe0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	4a28      	ldr	r2, [pc, #160]	@ (800fc88 <TIM_OC3_SetConfig+0xfc>)
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d003      	beq.n	800fbf2 <TIM_OC3_SetConfig+0x66>
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	4a27      	ldr	r2, [pc, #156]	@ (800fc8c <TIM_OC3_SetConfig+0x100>)
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d10d      	bne.n	800fc0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fbf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	68db      	ldr	r3, [r3, #12]
 800fbfe:	021b      	lsls	r3, r3, #8
 800fc00:	697a      	ldr	r2, [r7, #20]
 800fc02:	4313      	orrs	r3, r2
 800fc04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fc0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	4a1d      	ldr	r2, [pc, #116]	@ (800fc88 <TIM_OC3_SetConfig+0xfc>)
 800fc12:	4293      	cmp	r3, r2
 800fc14:	d00f      	beq.n	800fc36 <TIM_OC3_SetConfig+0xaa>
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	4a1c      	ldr	r2, [pc, #112]	@ (800fc8c <TIM_OC3_SetConfig+0x100>)
 800fc1a:	4293      	cmp	r3, r2
 800fc1c:	d00b      	beq.n	800fc36 <TIM_OC3_SetConfig+0xaa>
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	4a1b      	ldr	r2, [pc, #108]	@ (800fc90 <TIM_OC3_SetConfig+0x104>)
 800fc22:	4293      	cmp	r3, r2
 800fc24:	d007      	beq.n	800fc36 <TIM_OC3_SetConfig+0xaa>
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	4a1a      	ldr	r2, [pc, #104]	@ (800fc94 <TIM_OC3_SetConfig+0x108>)
 800fc2a:	4293      	cmp	r3, r2
 800fc2c:	d003      	beq.n	800fc36 <TIM_OC3_SetConfig+0xaa>
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	4a19      	ldr	r2, [pc, #100]	@ (800fc98 <TIM_OC3_SetConfig+0x10c>)
 800fc32:	4293      	cmp	r3, r2
 800fc34:	d113      	bne.n	800fc5e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fc36:	693b      	ldr	r3, [r7, #16]
 800fc38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fc3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fc3e:	693b      	ldr	r3, [r7, #16]
 800fc40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fc44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	695b      	ldr	r3, [r3, #20]
 800fc4a:	011b      	lsls	r3, r3, #4
 800fc4c:	693a      	ldr	r2, [r7, #16]
 800fc4e:	4313      	orrs	r3, r2
 800fc50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	699b      	ldr	r3, [r3, #24]
 800fc56:	011b      	lsls	r3, r3, #4
 800fc58:	693a      	ldr	r2, [r7, #16]
 800fc5a:	4313      	orrs	r3, r2
 800fc5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	693a      	ldr	r2, [r7, #16]
 800fc62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	68fa      	ldr	r2, [r7, #12]
 800fc68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	685a      	ldr	r2, [r3, #4]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	697a      	ldr	r2, [r7, #20]
 800fc76:	621a      	str	r2, [r3, #32]
}
 800fc78:	bf00      	nop
 800fc7a:	371c      	adds	r7, #28
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr
 800fc84:	fffeff8f 	.word	0xfffeff8f
 800fc88:	40010000 	.word	0x40010000
 800fc8c:	40010400 	.word	0x40010400
 800fc90:	40014000 	.word	0x40014000
 800fc94:	40014400 	.word	0x40014400
 800fc98:	40014800 	.word	0x40014800

0800fc9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b087      	sub	sp, #28
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6a1b      	ldr	r3, [r3, #32]
 800fcaa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	6a1b      	ldr	r3, [r3, #32]
 800fcb0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	685b      	ldr	r3, [r3, #4]
 800fcbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	69db      	ldr	r3, [r3, #28]
 800fcc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fcc4:	68fa      	ldr	r2, [r7, #12]
 800fcc6:	4b24      	ldr	r3, [pc, #144]	@ (800fd58 <TIM_OC4_SetConfig+0xbc>)
 800fcc8:	4013      	ands	r3, r2
 800fcca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fcd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	021b      	lsls	r3, r3, #8
 800fcda:	68fa      	ldr	r2, [r7, #12]
 800fcdc:	4313      	orrs	r3, r2
 800fcde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	689b      	ldr	r3, [r3, #8]
 800fcec:	031b      	lsls	r3, r3, #12
 800fcee:	693a      	ldr	r2, [r7, #16]
 800fcf0:	4313      	orrs	r3, r2
 800fcf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	4a19      	ldr	r2, [pc, #100]	@ (800fd5c <TIM_OC4_SetConfig+0xc0>)
 800fcf8:	4293      	cmp	r3, r2
 800fcfa:	d00f      	beq.n	800fd1c <TIM_OC4_SetConfig+0x80>
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	4a18      	ldr	r2, [pc, #96]	@ (800fd60 <TIM_OC4_SetConfig+0xc4>)
 800fd00:	4293      	cmp	r3, r2
 800fd02:	d00b      	beq.n	800fd1c <TIM_OC4_SetConfig+0x80>
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	4a17      	ldr	r2, [pc, #92]	@ (800fd64 <TIM_OC4_SetConfig+0xc8>)
 800fd08:	4293      	cmp	r3, r2
 800fd0a:	d007      	beq.n	800fd1c <TIM_OC4_SetConfig+0x80>
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	4a16      	ldr	r2, [pc, #88]	@ (800fd68 <TIM_OC4_SetConfig+0xcc>)
 800fd10:	4293      	cmp	r3, r2
 800fd12:	d003      	beq.n	800fd1c <TIM_OC4_SetConfig+0x80>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	4a15      	ldr	r2, [pc, #84]	@ (800fd6c <TIM_OC4_SetConfig+0xd0>)
 800fd18:	4293      	cmp	r3, r2
 800fd1a:	d109      	bne.n	800fd30 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fd1c:	697b      	ldr	r3, [r7, #20]
 800fd1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fd22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	695b      	ldr	r3, [r3, #20]
 800fd28:	019b      	lsls	r3, r3, #6
 800fd2a:	697a      	ldr	r2, [r7, #20]
 800fd2c:	4313      	orrs	r3, r2
 800fd2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	697a      	ldr	r2, [r7, #20]
 800fd34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	68fa      	ldr	r2, [r7, #12]
 800fd3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	685a      	ldr	r2, [r3, #4]
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	693a      	ldr	r2, [r7, #16]
 800fd48:	621a      	str	r2, [r3, #32]
}
 800fd4a:	bf00      	nop
 800fd4c:	371c      	adds	r7, #28
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd54:	4770      	bx	lr
 800fd56:	bf00      	nop
 800fd58:	feff8fff 	.word	0xfeff8fff
 800fd5c:	40010000 	.word	0x40010000
 800fd60:	40010400 	.word	0x40010400
 800fd64:	40014000 	.word	0x40014000
 800fd68:	40014400 	.word	0x40014400
 800fd6c:	40014800 	.word	0x40014800

0800fd70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fd70:	b480      	push	{r7}
 800fd72:	b087      	sub	sp, #28
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6a1b      	ldr	r3, [r3, #32]
 800fd7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	6a1b      	ldr	r3, [r3, #32]
 800fd84:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	685b      	ldr	r3, [r3, #4]
 800fd90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fd98:	68fa      	ldr	r2, [r7, #12]
 800fd9a:	4b21      	ldr	r3, [pc, #132]	@ (800fe20 <TIM_OC5_SetConfig+0xb0>)
 800fd9c:	4013      	ands	r3, r2
 800fd9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	68fa      	ldr	r2, [r7, #12]
 800fda6:	4313      	orrs	r3, r2
 800fda8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800fdb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	689b      	ldr	r3, [r3, #8]
 800fdb6:	041b      	lsls	r3, r3, #16
 800fdb8:	693a      	ldr	r2, [r7, #16]
 800fdba:	4313      	orrs	r3, r2
 800fdbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	4a18      	ldr	r2, [pc, #96]	@ (800fe24 <TIM_OC5_SetConfig+0xb4>)
 800fdc2:	4293      	cmp	r3, r2
 800fdc4:	d00f      	beq.n	800fde6 <TIM_OC5_SetConfig+0x76>
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	4a17      	ldr	r2, [pc, #92]	@ (800fe28 <TIM_OC5_SetConfig+0xb8>)
 800fdca:	4293      	cmp	r3, r2
 800fdcc:	d00b      	beq.n	800fde6 <TIM_OC5_SetConfig+0x76>
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	4a16      	ldr	r2, [pc, #88]	@ (800fe2c <TIM_OC5_SetConfig+0xbc>)
 800fdd2:	4293      	cmp	r3, r2
 800fdd4:	d007      	beq.n	800fde6 <TIM_OC5_SetConfig+0x76>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	4a15      	ldr	r2, [pc, #84]	@ (800fe30 <TIM_OC5_SetConfig+0xc0>)
 800fdda:	4293      	cmp	r3, r2
 800fddc:	d003      	beq.n	800fde6 <TIM_OC5_SetConfig+0x76>
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	4a14      	ldr	r2, [pc, #80]	@ (800fe34 <TIM_OC5_SetConfig+0xc4>)
 800fde2:	4293      	cmp	r3, r2
 800fde4:	d109      	bne.n	800fdfa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fdec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	695b      	ldr	r3, [r3, #20]
 800fdf2:	021b      	lsls	r3, r3, #8
 800fdf4:	697a      	ldr	r2, [r7, #20]
 800fdf6:	4313      	orrs	r3, r2
 800fdf8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	697a      	ldr	r2, [r7, #20]
 800fdfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	68fa      	ldr	r2, [r7, #12]
 800fe04:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	685a      	ldr	r2, [r3, #4]
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	693a      	ldr	r2, [r7, #16]
 800fe12:	621a      	str	r2, [r3, #32]
}
 800fe14:	bf00      	nop
 800fe16:	371c      	adds	r7, #28
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1e:	4770      	bx	lr
 800fe20:	fffeff8f 	.word	0xfffeff8f
 800fe24:	40010000 	.word	0x40010000
 800fe28:	40010400 	.word	0x40010400
 800fe2c:	40014000 	.word	0x40014000
 800fe30:	40014400 	.word	0x40014400
 800fe34:	40014800 	.word	0x40014800

0800fe38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b087      	sub	sp, #28
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6a1b      	ldr	r3, [r3, #32]
 800fe46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	6a1b      	ldr	r3, [r3, #32]
 800fe4c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fe60:	68fa      	ldr	r2, [r7, #12]
 800fe62:	4b22      	ldr	r3, [pc, #136]	@ (800feec <TIM_OC6_SetConfig+0xb4>)
 800fe64:	4013      	ands	r3, r2
 800fe66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	021b      	lsls	r3, r3, #8
 800fe6e:	68fa      	ldr	r2, [r7, #12]
 800fe70:	4313      	orrs	r3, r2
 800fe72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fe7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	689b      	ldr	r3, [r3, #8]
 800fe80:	051b      	lsls	r3, r3, #20
 800fe82:	693a      	ldr	r2, [r7, #16]
 800fe84:	4313      	orrs	r3, r2
 800fe86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	4a19      	ldr	r2, [pc, #100]	@ (800fef0 <TIM_OC6_SetConfig+0xb8>)
 800fe8c:	4293      	cmp	r3, r2
 800fe8e:	d00f      	beq.n	800feb0 <TIM_OC6_SetConfig+0x78>
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	4a18      	ldr	r2, [pc, #96]	@ (800fef4 <TIM_OC6_SetConfig+0xbc>)
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d00b      	beq.n	800feb0 <TIM_OC6_SetConfig+0x78>
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	4a17      	ldr	r2, [pc, #92]	@ (800fef8 <TIM_OC6_SetConfig+0xc0>)
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	d007      	beq.n	800feb0 <TIM_OC6_SetConfig+0x78>
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	4a16      	ldr	r2, [pc, #88]	@ (800fefc <TIM_OC6_SetConfig+0xc4>)
 800fea4:	4293      	cmp	r3, r2
 800fea6:	d003      	beq.n	800feb0 <TIM_OC6_SetConfig+0x78>
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	4a15      	ldr	r2, [pc, #84]	@ (800ff00 <TIM_OC6_SetConfig+0xc8>)
 800feac:	4293      	cmp	r3, r2
 800feae:	d109      	bne.n	800fec4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800feb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	695b      	ldr	r3, [r3, #20]
 800febc:	029b      	lsls	r3, r3, #10
 800febe:	697a      	ldr	r2, [r7, #20]
 800fec0:	4313      	orrs	r3, r2
 800fec2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	697a      	ldr	r2, [r7, #20]
 800fec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	68fa      	ldr	r2, [r7, #12]
 800fece:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	685a      	ldr	r2, [r3, #4]
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	693a      	ldr	r2, [r7, #16]
 800fedc:	621a      	str	r2, [r3, #32]
}
 800fede:	bf00      	nop
 800fee0:	371c      	adds	r7, #28
 800fee2:	46bd      	mov	sp, r7
 800fee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee8:	4770      	bx	lr
 800feea:	bf00      	nop
 800feec:	feff8fff 	.word	0xfeff8fff
 800fef0:	40010000 	.word	0x40010000
 800fef4:	40010400 	.word	0x40010400
 800fef8:	40014000 	.word	0x40014000
 800fefc:	40014400 	.word	0x40014400
 800ff00:	40014800 	.word	0x40014800

0800ff04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ff04:	b480      	push	{r7}
 800ff06:	b087      	sub	sp, #28
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	60f8      	str	r0, [r7, #12]
 800ff0c:	60b9      	str	r1, [r7, #8]
 800ff0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	f003 031f 	and.w	r3, r3, #31
 800ff16:	2201      	movs	r2, #1
 800ff18:	fa02 f303 	lsl.w	r3, r2, r3
 800ff1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	6a1a      	ldr	r2, [r3, #32]
 800ff22:	697b      	ldr	r3, [r7, #20]
 800ff24:	43db      	mvns	r3, r3
 800ff26:	401a      	ands	r2, r3
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	6a1a      	ldr	r2, [r3, #32]
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	f003 031f 	and.w	r3, r3, #31
 800ff36:	6879      	ldr	r1, [r7, #4]
 800ff38:	fa01 f303 	lsl.w	r3, r1, r3
 800ff3c:	431a      	orrs	r2, r3
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	621a      	str	r2, [r3, #32]
}
 800ff42:	bf00      	nop
 800ff44:	371c      	adds	r7, #28
 800ff46:	46bd      	mov	sp, r7
 800ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4c:	4770      	bx	lr
	...

0800ff50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ff50:	b480      	push	{r7}
 800ff52:	b085      	sub	sp, #20
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ff60:	2b01      	cmp	r3, #1
 800ff62:	d101      	bne.n	800ff68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ff64:	2302      	movs	r3, #2
 800ff66:	e06d      	b.n	8010044 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2201      	movs	r2, #1
 800ff6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2202      	movs	r2, #2
 800ff74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	685b      	ldr	r3, [r3, #4]
 800ff7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	689b      	ldr	r3, [r3, #8]
 800ff86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	4a30      	ldr	r2, [pc, #192]	@ (8010050 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ff8e:	4293      	cmp	r3, r2
 800ff90:	d004      	beq.n	800ff9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	4a2f      	ldr	r2, [pc, #188]	@ (8010054 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ff98:	4293      	cmp	r3, r2
 800ff9a:	d108      	bne.n	800ffae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ffa2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	685b      	ldr	r3, [r3, #4]
 800ffa8:	68fa      	ldr	r2, [r7, #12]
 800ffaa:	4313      	orrs	r3, r2
 800ffac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ffb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	68fa      	ldr	r2, [r7, #12]
 800ffbc:	4313      	orrs	r3, r2
 800ffbe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	68fa      	ldr	r2, [r7, #12]
 800ffc6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	4a20      	ldr	r2, [pc, #128]	@ (8010050 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ffce:	4293      	cmp	r3, r2
 800ffd0:	d022      	beq.n	8010018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ffda:	d01d      	beq.n	8010018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	4a1d      	ldr	r2, [pc, #116]	@ (8010058 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ffe2:	4293      	cmp	r3, r2
 800ffe4:	d018      	beq.n	8010018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	4a1c      	ldr	r2, [pc, #112]	@ (801005c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ffec:	4293      	cmp	r3, r2
 800ffee:	d013      	beq.n	8010018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	4a1a      	ldr	r2, [pc, #104]	@ (8010060 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fff6:	4293      	cmp	r3, r2
 800fff8:	d00e      	beq.n	8010018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	4a15      	ldr	r2, [pc, #84]	@ (8010054 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010000:	4293      	cmp	r3, r2
 8010002:	d009      	beq.n	8010018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	4a16      	ldr	r2, [pc, #88]	@ (8010064 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801000a:	4293      	cmp	r3, r2
 801000c:	d004      	beq.n	8010018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	4a15      	ldr	r2, [pc, #84]	@ (8010068 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010014:	4293      	cmp	r3, r2
 8010016:	d10c      	bne.n	8010032 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801001e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	689b      	ldr	r3, [r3, #8]
 8010024:	68ba      	ldr	r2, [r7, #8]
 8010026:	4313      	orrs	r3, r2
 8010028:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	68ba      	ldr	r2, [r7, #8]
 8010030:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2201      	movs	r2, #1
 8010036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2200      	movs	r2, #0
 801003e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010042:	2300      	movs	r3, #0
}
 8010044:	4618      	mov	r0, r3
 8010046:	3714      	adds	r7, #20
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr
 8010050:	40010000 	.word	0x40010000
 8010054:	40010400 	.word	0x40010400
 8010058:	40000400 	.word	0x40000400
 801005c:	40000800 	.word	0x40000800
 8010060:	40000c00 	.word	0x40000c00
 8010064:	40001800 	.word	0x40001800
 8010068:	40014000 	.word	0x40014000

0801006c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801006c:	b480      	push	{r7}
 801006e:	b085      	sub	sp, #20
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
 8010074:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010076:	2300      	movs	r3, #0
 8010078:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010080:	2b01      	cmp	r3, #1
 8010082:	d101      	bne.n	8010088 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010084:	2302      	movs	r3, #2
 8010086:	e065      	b.n	8010154 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2201      	movs	r2, #1
 801008c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	68db      	ldr	r3, [r3, #12]
 801009a:	4313      	orrs	r3, r2
 801009c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	689b      	ldr	r3, [r3, #8]
 80100a8:	4313      	orrs	r3, r2
 80100aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	685b      	ldr	r3, [r3, #4]
 80100b6:	4313      	orrs	r3, r2
 80100b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	4313      	orrs	r3, r2
 80100c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	691b      	ldr	r3, [r3, #16]
 80100d2:	4313      	orrs	r3, r2
 80100d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	695b      	ldr	r3, [r3, #20]
 80100e0:	4313      	orrs	r3, r2
 80100e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100ee:	4313      	orrs	r3, r2
 80100f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	699b      	ldr	r3, [r3, #24]
 80100fc:	041b      	lsls	r3, r3, #16
 80100fe:	4313      	orrs	r3, r2
 8010100:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	4a16      	ldr	r2, [pc, #88]	@ (8010160 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010108:	4293      	cmp	r3, r2
 801010a:	d004      	beq.n	8010116 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	4a14      	ldr	r2, [pc, #80]	@ (8010164 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8010112:	4293      	cmp	r3, r2
 8010114:	d115      	bne.n	8010142 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010120:	051b      	lsls	r3, r3, #20
 8010122:	4313      	orrs	r3, r2
 8010124:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	69db      	ldr	r3, [r3, #28]
 8010130:	4313      	orrs	r3, r2
 8010132:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	6a1b      	ldr	r3, [r3, #32]
 801013e:	4313      	orrs	r3, r2
 8010140:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	68fa      	ldr	r2, [r7, #12]
 8010148:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2200      	movs	r2, #0
 801014e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010152:	2300      	movs	r3, #0
}
 8010154:	4618      	mov	r0, r3
 8010156:	3714      	adds	r7, #20
 8010158:	46bd      	mov	sp, r7
 801015a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015e:	4770      	bx	lr
 8010160:	40010000 	.word	0x40010000
 8010164:	40010400 	.word	0x40010400

08010168 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010168:	b480      	push	{r7}
 801016a:	b083      	sub	sp, #12
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010170:	bf00      	nop
 8010172:	370c      	adds	r7, #12
 8010174:	46bd      	mov	sp, r7
 8010176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017a:	4770      	bx	lr

0801017c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801017c:	b480      	push	{r7}
 801017e:	b083      	sub	sp, #12
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010184:	bf00      	nop
 8010186:	370c      	adds	r7, #12
 8010188:	46bd      	mov	sp, r7
 801018a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018e:	4770      	bx	lr

08010190 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010190:	b480      	push	{r7}
 8010192:	b083      	sub	sp, #12
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010198:	bf00      	nop
 801019a:	370c      	adds	r7, #12
 801019c:	46bd      	mov	sp, r7
 801019e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a2:	4770      	bx	lr

080101a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b082      	sub	sp, #8
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d101      	bne.n	80101b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80101b2:	2301      	movs	r3, #1
 80101b4:	e042      	b.n	801023c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d106      	bne.n	80101ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2200      	movs	r2, #0
 80101c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f7f1 feb3 	bl	8001f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2224      	movs	r2, #36	@ 0x24
 80101d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	681a      	ldr	r2, [r3, #0]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	f022 0201 	bic.w	r2, r2, #1
 80101e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d002      	beq.n	80101f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f000 fe1e 	bl	8010e30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f000 f8b3 	bl	8010360 <UART_SetConfig>
 80101fa:	4603      	mov	r3, r0
 80101fc:	2b01      	cmp	r3, #1
 80101fe:	d101      	bne.n	8010204 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010200:	2301      	movs	r3, #1
 8010202:	e01b      	b.n	801023c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	685a      	ldr	r2, [r3, #4]
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010212:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	689a      	ldr	r2, [r3, #8]
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010222:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	681a      	ldr	r2, [r3, #0]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	f042 0201 	orr.w	r2, r2, #1
 8010232:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f000 fe9d 	bl	8010f74 <UART_CheckIdleState>
 801023a:	4603      	mov	r3, r0
}
 801023c:	4618      	mov	r0, r3
 801023e:	3708      	adds	r7, #8
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}

08010244 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b08a      	sub	sp, #40	@ 0x28
 8010248:	af02      	add	r7, sp, #8
 801024a:	60f8      	str	r0, [r7, #12]
 801024c:	60b9      	str	r1, [r7, #8]
 801024e:	603b      	str	r3, [r7, #0]
 8010250:	4613      	mov	r3, r2
 8010252:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801025a:	2b20      	cmp	r3, #32
 801025c:	d17b      	bne.n	8010356 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d002      	beq.n	801026a <HAL_UART_Transmit+0x26>
 8010264:	88fb      	ldrh	r3, [r7, #6]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d101      	bne.n	801026e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801026a:	2301      	movs	r3, #1
 801026c:	e074      	b.n	8010358 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	2200      	movs	r2, #0
 8010272:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2221      	movs	r2, #33	@ 0x21
 801027a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801027e:	f7f2 f8e7 	bl	8002450 <HAL_GetTick>
 8010282:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	88fa      	ldrh	r2, [r7, #6]
 8010288:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	88fa      	ldrh	r2, [r7, #6]
 8010290:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	689b      	ldr	r3, [r3, #8]
 8010298:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801029c:	d108      	bne.n	80102b0 <HAL_UART_Transmit+0x6c>
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	691b      	ldr	r3, [r3, #16]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d104      	bne.n	80102b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80102a6:	2300      	movs	r3, #0
 80102a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	61bb      	str	r3, [r7, #24]
 80102ae:	e003      	b.n	80102b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80102b4:	2300      	movs	r3, #0
 80102b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80102b8:	e030      	b.n	801031c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	9300      	str	r3, [sp, #0]
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	2200      	movs	r2, #0
 80102c2:	2180      	movs	r1, #128	@ 0x80
 80102c4:	68f8      	ldr	r0, [r7, #12]
 80102c6:	f000 feff 	bl	80110c8 <UART_WaitOnFlagUntilTimeout>
 80102ca:	4603      	mov	r3, r0
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d005      	beq.n	80102dc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	2220      	movs	r2, #32
 80102d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80102d8:	2303      	movs	r3, #3
 80102da:	e03d      	b.n	8010358 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80102dc:	69fb      	ldr	r3, [r7, #28]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d10b      	bne.n	80102fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80102e2:	69bb      	ldr	r3, [r7, #24]
 80102e4:	881b      	ldrh	r3, [r3, #0]
 80102e6:	461a      	mov	r2, r3
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80102f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80102f2:	69bb      	ldr	r3, [r7, #24]
 80102f4:	3302      	adds	r3, #2
 80102f6:	61bb      	str	r3, [r7, #24]
 80102f8:	e007      	b.n	801030a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80102fa:	69fb      	ldr	r3, [r7, #28]
 80102fc:	781a      	ldrb	r2, [r3, #0]
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8010304:	69fb      	ldr	r3, [r7, #28]
 8010306:	3301      	adds	r3, #1
 8010308:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010310:	b29b      	uxth	r3, r3
 8010312:	3b01      	subs	r3, #1
 8010314:	b29a      	uxth	r2, r3
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010322:	b29b      	uxth	r3, r3
 8010324:	2b00      	cmp	r3, #0
 8010326:	d1c8      	bne.n	80102ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	9300      	str	r3, [sp, #0]
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	2200      	movs	r2, #0
 8010330:	2140      	movs	r1, #64	@ 0x40
 8010332:	68f8      	ldr	r0, [r7, #12]
 8010334:	f000 fec8 	bl	80110c8 <UART_WaitOnFlagUntilTimeout>
 8010338:	4603      	mov	r3, r0
 801033a:	2b00      	cmp	r3, #0
 801033c:	d005      	beq.n	801034a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	2220      	movs	r2, #32
 8010342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8010346:	2303      	movs	r3, #3
 8010348:	e006      	b.n	8010358 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	2220      	movs	r2, #32
 801034e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8010352:	2300      	movs	r3, #0
 8010354:	e000      	b.n	8010358 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8010356:	2302      	movs	r3, #2
  }
}
 8010358:	4618      	mov	r0, r3
 801035a:	3720      	adds	r7, #32
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}

08010360 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010364:	b092      	sub	sp, #72	@ 0x48
 8010366:	af00      	add	r7, sp, #0
 8010368:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801036a:	2300      	movs	r3, #0
 801036c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010370:	697b      	ldr	r3, [r7, #20]
 8010372:	689a      	ldr	r2, [r3, #8]
 8010374:	697b      	ldr	r3, [r7, #20]
 8010376:	691b      	ldr	r3, [r3, #16]
 8010378:	431a      	orrs	r2, r3
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	695b      	ldr	r3, [r3, #20]
 801037e:	431a      	orrs	r2, r3
 8010380:	697b      	ldr	r3, [r7, #20]
 8010382:	69db      	ldr	r3, [r3, #28]
 8010384:	4313      	orrs	r3, r2
 8010386:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	681a      	ldr	r2, [r3, #0]
 801038e:	4bbe      	ldr	r3, [pc, #760]	@ (8010688 <UART_SetConfig+0x328>)
 8010390:	4013      	ands	r3, r2
 8010392:	697a      	ldr	r2, [r7, #20]
 8010394:	6812      	ldr	r2, [r2, #0]
 8010396:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010398:	430b      	orrs	r3, r1
 801039a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801039c:	697b      	ldr	r3, [r7, #20]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	68da      	ldr	r2, [r3, #12]
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	430a      	orrs	r2, r1
 80103b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	699b      	ldr	r3, [r3, #24]
 80103b6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	4ab3      	ldr	r2, [pc, #716]	@ (801068c <UART_SetConfig+0x32c>)
 80103be:	4293      	cmp	r3, r2
 80103c0:	d004      	beq.n	80103cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	6a1b      	ldr	r3, [r3, #32]
 80103c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80103c8:	4313      	orrs	r3, r2
 80103ca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80103cc:	697b      	ldr	r3, [r7, #20]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	689a      	ldr	r2, [r3, #8]
 80103d2:	4baf      	ldr	r3, [pc, #700]	@ (8010690 <UART_SetConfig+0x330>)
 80103d4:	4013      	ands	r3, r2
 80103d6:	697a      	ldr	r2, [r7, #20]
 80103d8:	6812      	ldr	r2, [r2, #0]
 80103da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80103dc:	430b      	orrs	r3, r1
 80103de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103e6:	f023 010f 	bic.w	r1, r3, #15
 80103ea:	697b      	ldr	r3, [r7, #20]
 80103ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	430a      	orrs	r2, r1
 80103f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80103f6:	697b      	ldr	r3, [r7, #20]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	4aa6      	ldr	r2, [pc, #664]	@ (8010694 <UART_SetConfig+0x334>)
 80103fc:	4293      	cmp	r3, r2
 80103fe:	d177      	bne.n	80104f0 <UART_SetConfig+0x190>
 8010400:	4ba5      	ldr	r3, [pc, #660]	@ (8010698 <UART_SetConfig+0x338>)
 8010402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010404:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010408:	2b28      	cmp	r3, #40	@ 0x28
 801040a:	d86d      	bhi.n	80104e8 <UART_SetConfig+0x188>
 801040c:	a201      	add	r2, pc, #4	@ (adr r2, 8010414 <UART_SetConfig+0xb4>)
 801040e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010412:	bf00      	nop
 8010414:	080104b9 	.word	0x080104b9
 8010418:	080104e9 	.word	0x080104e9
 801041c:	080104e9 	.word	0x080104e9
 8010420:	080104e9 	.word	0x080104e9
 8010424:	080104e9 	.word	0x080104e9
 8010428:	080104e9 	.word	0x080104e9
 801042c:	080104e9 	.word	0x080104e9
 8010430:	080104e9 	.word	0x080104e9
 8010434:	080104c1 	.word	0x080104c1
 8010438:	080104e9 	.word	0x080104e9
 801043c:	080104e9 	.word	0x080104e9
 8010440:	080104e9 	.word	0x080104e9
 8010444:	080104e9 	.word	0x080104e9
 8010448:	080104e9 	.word	0x080104e9
 801044c:	080104e9 	.word	0x080104e9
 8010450:	080104e9 	.word	0x080104e9
 8010454:	080104c9 	.word	0x080104c9
 8010458:	080104e9 	.word	0x080104e9
 801045c:	080104e9 	.word	0x080104e9
 8010460:	080104e9 	.word	0x080104e9
 8010464:	080104e9 	.word	0x080104e9
 8010468:	080104e9 	.word	0x080104e9
 801046c:	080104e9 	.word	0x080104e9
 8010470:	080104e9 	.word	0x080104e9
 8010474:	080104d1 	.word	0x080104d1
 8010478:	080104e9 	.word	0x080104e9
 801047c:	080104e9 	.word	0x080104e9
 8010480:	080104e9 	.word	0x080104e9
 8010484:	080104e9 	.word	0x080104e9
 8010488:	080104e9 	.word	0x080104e9
 801048c:	080104e9 	.word	0x080104e9
 8010490:	080104e9 	.word	0x080104e9
 8010494:	080104d9 	.word	0x080104d9
 8010498:	080104e9 	.word	0x080104e9
 801049c:	080104e9 	.word	0x080104e9
 80104a0:	080104e9 	.word	0x080104e9
 80104a4:	080104e9 	.word	0x080104e9
 80104a8:	080104e9 	.word	0x080104e9
 80104ac:	080104e9 	.word	0x080104e9
 80104b0:	080104e9 	.word	0x080104e9
 80104b4:	080104e1 	.word	0x080104e1
 80104b8:	2301      	movs	r3, #1
 80104ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104be:	e222      	b.n	8010906 <UART_SetConfig+0x5a6>
 80104c0:	2304      	movs	r3, #4
 80104c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104c6:	e21e      	b.n	8010906 <UART_SetConfig+0x5a6>
 80104c8:	2308      	movs	r3, #8
 80104ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104ce:	e21a      	b.n	8010906 <UART_SetConfig+0x5a6>
 80104d0:	2310      	movs	r3, #16
 80104d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104d6:	e216      	b.n	8010906 <UART_SetConfig+0x5a6>
 80104d8:	2320      	movs	r3, #32
 80104da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104de:	e212      	b.n	8010906 <UART_SetConfig+0x5a6>
 80104e0:	2340      	movs	r3, #64	@ 0x40
 80104e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104e6:	e20e      	b.n	8010906 <UART_SetConfig+0x5a6>
 80104e8:	2380      	movs	r3, #128	@ 0x80
 80104ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104ee:	e20a      	b.n	8010906 <UART_SetConfig+0x5a6>
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	4a69      	ldr	r2, [pc, #420]	@ (801069c <UART_SetConfig+0x33c>)
 80104f6:	4293      	cmp	r3, r2
 80104f8:	d130      	bne.n	801055c <UART_SetConfig+0x1fc>
 80104fa:	4b67      	ldr	r3, [pc, #412]	@ (8010698 <UART_SetConfig+0x338>)
 80104fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80104fe:	f003 0307 	and.w	r3, r3, #7
 8010502:	2b05      	cmp	r3, #5
 8010504:	d826      	bhi.n	8010554 <UART_SetConfig+0x1f4>
 8010506:	a201      	add	r2, pc, #4	@ (adr r2, 801050c <UART_SetConfig+0x1ac>)
 8010508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801050c:	08010525 	.word	0x08010525
 8010510:	0801052d 	.word	0x0801052d
 8010514:	08010535 	.word	0x08010535
 8010518:	0801053d 	.word	0x0801053d
 801051c:	08010545 	.word	0x08010545
 8010520:	0801054d 	.word	0x0801054d
 8010524:	2300      	movs	r3, #0
 8010526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801052a:	e1ec      	b.n	8010906 <UART_SetConfig+0x5a6>
 801052c:	2304      	movs	r3, #4
 801052e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010532:	e1e8      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010534:	2308      	movs	r3, #8
 8010536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801053a:	e1e4      	b.n	8010906 <UART_SetConfig+0x5a6>
 801053c:	2310      	movs	r3, #16
 801053e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010542:	e1e0      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010544:	2320      	movs	r3, #32
 8010546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801054a:	e1dc      	b.n	8010906 <UART_SetConfig+0x5a6>
 801054c:	2340      	movs	r3, #64	@ 0x40
 801054e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010552:	e1d8      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010554:	2380      	movs	r3, #128	@ 0x80
 8010556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801055a:	e1d4      	b.n	8010906 <UART_SetConfig+0x5a6>
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	4a4f      	ldr	r2, [pc, #316]	@ (80106a0 <UART_SetConfig+0x340>)
 8010562:	4293      	cmp	r3, r2
 8010564:	d130      	bne.n	80105c8 <UART_SetConfig+0x268>
 8010566:	4b4c      	ldr	r3, [pc, #304]	@ (8010698 <UART_SetConfig+0x338>)
 8010568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801056a:	f003 0307 	and.w	r3, r3, #7
 801056e:	2b05      	cmp	r3, #5
 8010570:	d826      	bhi.n	80105c0 <UART_SetConfig+0x260>
 8010572:	a201      	add	r2, pc, #4	@ (adr r2, 8010578 <UART_SetConfig+0x218>)
 8010574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010578:	08010591 	.word	0x08010591
 801057c:	08010599 	.word	0x08010599
 8010580:	080105a1 	.word	0x080105a1
 8010584:	080105a9 	.word	0x080105a9
 8010588:	080105b1 	.word	0x080105b1
 801058c:	080105b9 	.word	0x080105b9
 8010590:	2300      	movs	r3, #0
 8010592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010596:	e1b6      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010598:	2304      	movs	r3, #4
 801059a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801059e:	e1b2      	b.n	8010906 <UART_SetConfig+0x5a6>
 80105a0:	2308      	movs	r3, #8
 80105a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105a6:	e1ae      	b.n	8010906 <UART_SetConfig+0x5a6>
 80105a8:	2310      	movs	r3, #16
 80105aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105ae:	e1aa      	b.n	8010906 <UART_SetConfig+0x5a6>
 80105b0:	2320      	movs	r3, #32
 80105b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105b6:	e1a6      	b.n	8010906 <UART_SetConfig+0x5a6>
 80105b8:	2340      	movs	r3, #64	@ 0x40
 80105ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105be:	e1a2      	b.n	8010906 <UART_SetConfig+0x5a6>
 80105c0:	2380      	movs	r3, #128	@ 0x80
 80105c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105c6:	e19e      	b.n	8010906 <UART_SetConfig+0x5a6>
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	4a35      	ldr	r2, [pc, #212]	@ (80106a4 <UART_SetConfig+0x344>)
 80105ce:	4293      	cmp	r3, r2
 80105d0:	d130      	bne.n	8010634 <UART_SetConfig+0x2d4>
 80105d2:	4b31      	ldr	r3, [pc, #196]	@ (8010698 <UART_SetConfig+0x338>)
 80105d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80105d6:	f003 0307 	and.w	r3, r3, #7
 80105da:	2b05      	cmp	r3, #5
 80105dc:	d826      	bhi.n	801062c <UART_SetConfig+0x2cc>
 80105de:	a201      	add	r2, pc, #4	@ (adr r2, 80105e4 <UART_SetConfig+0x284>)
 80105e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105e4:	080105fd 	.word	0x080105fd
 80105e8:	08010605 	.word	0x08010605
 80105ec:	0801060d 	.word	0x0801060d
 80105f0:	08010615 	.word	0x08010615
 80105f4:	0801061d 	.word	0x0801061d
 80105f8:	08010625 	.word	0x08010625
 80105fc:	2300      	movs	r3, #0
 80105fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010602:	e180      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010604:	2304      	movs	r3, #4
 8010606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801060a:	e17c      	b.n	8010906 <UART_SetConfig+0x5a6>
 801060c:	2308      	movs	r3, #8
 801060e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010612:	e178      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010614:	2310      	movs	r3, #16
 8010616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801061a:	e174      	b.n	8010906 <UART_SetConfig+0x5a6>
 801061c:	2320      	movs	r3, #32
 801061e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010622:	e170      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010624:	2340      	movs	r3, #64	@ 0x40
 8010626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801062a:	e16c      	b.n	8010906 <UART_SetConfig+0x5a6>
 801062c:	2380      	movs	r3, #128	@ 0x80
 801062e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010632:	e168      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4a1b      	ldr	r2, [pc, #108]	@ (80106a8 <UART_SetConfig+0x348>)
 801063a:	4293      	cmp	r3, r2
 801063c:	d142      	bne.n	80106c4 <UART_SetConfig+0x364>
 801063e:	4b16      	ldr	r3, [pc, #88]	@ (8010698 <UART_SetConfig+0x338>)
 8010640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010642:	f003 0307 	and.w	r3, r3, #7
 8010646:	2b05      	cmp	r3, #5
 8010648:	d838      	bhi.n	80106bc <UART_SetConfig+0x35c>
 801064a:	a201      	add	r2, pc, #4	@ (adr r2, 8010650 <UART_SetConfig+0x2f0>)
 801064c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010650:	08010669 	.word	0x08010669
 8010654:	08010671 	.word	0x08010671
 8010658:	08010679 	.word	0x08010679
 801065c:	08010681 	.word	0x08010681
 8010660:	080106ad 	.word	0x080106ad
 8010664:	080106b5 	.word	0x080106b5
 8010668:	2300      	movs	r3, #0
 801066a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801066e:	e14a      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010670:	2304      	movs	r3, #4
 8010672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010676:	e146      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010678:	2308      	movs	r3, #8
 801067a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801067e:	e142      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010680:	2310      	movs	r3, #16
 8010682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010686:	e13e      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010688:	cfff69f3 	.word	0xcfff69f3
 801068c:	58000c00 	.word	0x58000c00
 8010690:	11fff4ff 	.word	0x11fff4ff
 8010694:	40011000 	.word	0x40011000
 8010698:	58024400 	.word	0x58024400
 801069c:	40004400 	.word	0x40004400
 80106a0:	40004800 	.word	0x40004800
 80106a4:	40004c00 	.word	0x40004c00
 80106a8:	40005000 	.word	0x40005000
 80106ac:	2320      	movs	r3, #32
 80106ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106b2:	e128      	b.n	8010906 <UART_SetConfig+0x5a6>
 80106b4:	2340      	movs	r3, #64	@ 0x40
 80106b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106ba:	e124      	b.n	8010906 <UART_SetConfig+0x5a6>
 80106bc:	2380      	movs	r3, #128	@ 0x80
 80106be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106c2:	e120      	b.n	8010906 <UART_SetConfig+0x5a6>
 80106c4:	697b      	ldr	r3, [r7, #20]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	4acb      	ldr	r2, [pc, #812]	@ (80109f8 <UART_SetConfig+0x698>)
 80106ca:	4293      	cmp	r3, r2
 80106cc:	d176      	bne.n	80107bc <UART_SetConfig+0x45c>
 80106ce:	4bcb      	ldr	r3, [pc, #812]	@ (80109fc <UART_SetConfig+0x69c>)
 80106d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80106d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80106d6:	2b28      	cmp	r3, #40	@ 0x28
 80106d8:	d86c      	bhi.n	80107b4 <UART_SetConfig+0x454>
 80106da:	a201      	add	r2, pc, #4	@ (adr r2, 80106e0 <UART_SetConfig+0x380>)
 80106dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106e0:	08010785 	.word	0x08010785
 80106e4:	080107b5 	.word	0x080107b5
 80106e8:	080107b5 	.word	0x080107b5
 80106ec:	080107b5 	.word	0x080107b5
 80106f0:	080107b5 	.word	0x080107b5
 80106f4:	080107b5 	.word	0x080107b5
 80106f8:	080107b5 	.word	0x080107b5
 80106fc:	080107b5 	.word	0x080107b5
 8010700:	0801078d 	.word	0x0801078d
 8010704:	080107b5 	.word	0x080107b5
 8010708:	080107b5 	.word	0x080107b5
 801070c:	080107b5 	.word	0x080107b5
 8010710:	080107b5 	.word	0x080107b5
 8010714:	080107b5 	.word	0x080107b5
 8010718:	080107b5 	.word	0x080107b5
 801071c:	080107b5 	.word	0x080107b5
 8010720:	08010795 	.word	0x08010795
 8010724:	080107b5 	.word	0x080107b5
 8010728:	080107b5 	.word	0x080107b5
 801072c:	080107b5 	.word	0x080107b5
 8010730:	080107b5 	.word	0x080107b5
 8010734:	080107b5 	.word	0x080107b5
 8010738:	080107b5 	.word	0x080107b5
 801073c:	080107b5 	.word	0x080107b5
 8010740:	0801079d 	.word	0x0801079d
 8010744:	080107b5 	.word	0x080107b5
 8010748:	080107b5 	.word	0x080107b5
 801074c:	080107b5 	.word	0x080107b5
 8010750:	080107b5 	.word	0x080107b5
 8010754:	080107b5 	.word	0x080107b5
 8010758:	080107b5 	.word	0x080107b5
 801075c:	080107b5 	.word	0x080107b5
 8010760:	080107a5 	.word	0x080107a5
 8010764:	080107b5 	.word	0x080107b5
 8010768:	080107b5 	.word	0x080107b5
 801076c:	080107b5 	.word	0x080107b5
 8010770:	080107b5 	.word	0x080107b5
 8010774:	080107b5 	.word	0x080107b5
 8010778:	080107b5 	.word	0x080107b5
 801077c:	080107b5 	.word	0x080107b5
 8010780:	080107ad 	.word	0x080107ad
 8010784:	2301      	movs	r3, #1
 8010786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801078a:	e0bc      	b.n	8010906 <UART_SetConfig+0x5a6>
 801078c:	2304      	movs	r3, #4
 801078e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010792:	e0b8      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010794:	2308      	movs	r3, #8
 8010796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801079a:	e0b4      	b.n	8010906 <UART_SetConfig+0x5a6>
 801079c:	2310      	movs	r3, #16
 801079e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107a2:	e0b0      	b.n	8010906 <UART_SetConfig+0x5a6>
 80107a4:	2320      	movs	r3, #32
 80107a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107aa:	e0ac      	b.n	8010906 <UART_SetConfig+0x5a6>
 80107ac:	2340      	movs	r3, #64	@ 0x40
 80107ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107b2:	e0a8      	b.n	8010906 <UART_SetConfig+0x5a6>
 80107b4:	2380      	movs	r3, #128	@ 0x80
 80107b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107ba:	e0a4      	b.n	8010906 <UART_SetConfig+0x5a6>
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	4a8f      	ldr	r2, [pc, #572]	@ (8010a00 <UART_SetConfig+0x6a0>)
 80107c2:	4293      	cmp	r3, r2
 80107c4:	d130      	bne.n	8010828 <UART_SetConfig+0x4c8>
 80107c6:	4b8d      	ldr	r3, [pc, #564]	@ (80109fc <UART_SetConfig+0x69c>)
 80107c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80107ca:	f003 0307 	and.w	r3, r3, #7
 80107ce:	2b05      	cmp	r3, #5
 80107d0:	d826      	bhi.n	8010820 <UART_SetConfig+0x4c0>
 80107d2:	a201      	add	r2, pc, #4	@ (adr r2, 80107d8 <UART_SetConfig+0x478>)
 80107d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107d8:	080107f1 	.word	0x080107f1
 80107dc:	080107f9 	.word	0x080107f9
 80107e0:	08010801 	.word	0x08010801
 80107e4:	08010809 	.word	0x08010809
 80107e8:	08010811 	.word	0x08010811
 80107ec:	08010819 	.word	0x08010819
 80107f0:	2300      	movs	r3, #0
 80107f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107f6:	e086      	b.n	8010906 <UART_SetConfig+0x5a6>
 80107f8:	2304      	movs	r3, #4
 80107fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107fe:	e082      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010800:	2308      	movs	r3, #8
 8010802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010806:	e07e      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010808:	2310      	movs	r3, #16
 801080a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801080e:	e07a      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010810:	2320      	movs	r3, #32
 8010812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010816:	e076      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010818:	2340      	movs	r3, #64	@ 0x40
 801081a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801081e:	e072      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010820:	2380      	movs	r3, #128	@ 0x80
 8010822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010826:	e06e      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	4a75      	ldr	r2, [pc, #468]	@ (8010a04 <UART_SetConfig+0x6a4>)
 801082e:	4293      	cmp	r3, r2
 8010830:	d130      	bne.n	8010894 <UART_SetConfig+0x534>
 8010832:	4b72      	ldr	r3, [pc, #456]	@ (80109fc <UART_SetConfig+0x69c>)
 8010834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010836:	f003 0307 	and.w	r3, r3, #7
 801083a:	2b05      	cmp	r3, #5
 801083c:	d826      	bhi.n	801088c <UART_SetConfig+0x52c>
 801083e:	a201      	add	r2, pc, #4	@ (adr r2, 8010844 <UART_SetConfig+0x4e4>)
 8010840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010844:	0801085d 	.word	0x0801085d
 8010848:	08010865 	.word	0x08010865
 801084c:	0801086d 	.word	0x0801086d
 8010850:	08010875 	.word	0x08010875
 8010854:	0801087d 	.word	0x0801087d
 8010858:	08010885 	.word	0x08010885
 801085c:	2300      	movs	r3, #0
 801085e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010862:	e050      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010864:	2304      	movs	r3, #4
 8010866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801086a:	e04c      	b.n	8010906 <UART_SetConfig+0x5a6>
 801086c:	2308      	movs	r3, #8
 801086e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010872:	e048      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010874:	2310      	movs	r3, #16
 8010876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801087a:	e044      	b.n	8010906 <UART_SetConfig+0x5a6>
 801087c:	2320      	movs	r3, #32
 801087e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010882:	e040      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010884:	2340      	movs	r3, #64	@ 0x40
 8010886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801088a:	e03c      	b.n	8010906 <UART_SetConfig+0x5a6>
 801088c:	2380      	movs	r3, #128	@ 0x80
 801088e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010892:	e038      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	4a5b      	ldr	r2, [pc, #364]	@ (8010a08 <UART_SetConfig+0x6a8>)
 801089a:	4293      	cmp	r3, r2
 801089c:	d130      	bne.n	8010900 <UART_SetConfig+0x5a0>
 801089e:	4b57      	ldr	r3, [pc, #348]	@ (80109fc <UART_SetConfig+0x69c>)
 80108a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80108a2:	f003 0307 	and.w	r3, r3, #7
 80108a6:	2b05      	cmp	r3, #5
 80108a8:	d826      	bhi.n	80108f8 <UART_SetConfig+0x598>
 80108aa:	a201      	add	r2, pc, #4	@ (adr r2, 80108b0 <UART_SetConfig+0x550>)
 80108ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108b0:	080108c9 	.word	0x080108c9
 80108b4:	080108d1 	.word	0x080108d1
 80108b8:	080108d9 	.word	0x080108d9
 80108bc:	080108e1 	.word	0x080108e1
 80108c0:	080108e9 	.word	0x080108e9
 80108c4:	080108f1 	.word	0x080108f1
 80108c8:	2302      	movs	r3, #2
 80108ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108ce:	e01a      	b.n	8010906 <UART_SetConfig+0x5a6>
 80108d0:	2304      	movs	r3, #4
 80108d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108d6:	e016      	b.n	8010906 <UART_SetConfig+0x5a6>
 80108d8:	2308      	movs	r3, #8
 80108da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108de:	e012      	b.n	8010906 <UART_SetConfig+0x5a6>
 80108e0:	2310      	movs	r3, #16
 80108e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108e6:	e00e      	b.n	8010906 <UART_SetConfig+0x5a6>
 80108e8:	2320      	movs	r3, #32
 80108ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108ee:	e00a      	b.n	8010906 <UART_SetConfig+0x5a6>
 80108f0:	2340      	movs	r3, #64	@ 0x40
 80108f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108f6:	e006      	b.n	8010906 <UART_SetConfig+0x5a6>
 80108f8:	2380      	movs	r3, #128	@ 0x80
 80108fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108fe:	e002      	b.n	8010906 <UART_SetConfig+0x5a6>
 8010900:	2380      	movs	r3, #128	@ 0x80
 8010902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	4a3f      	ldr	r2, [pc, #252]	@ (8010a08 <UART_SetConfig+0x6a8>)
 801090c:	4293      	cmp	r3, r2
 801090e:	f040 80f8 	bne.w	8010b02 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010912:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010916:	2b20      	cmp	r3, #32
 8010918:	dc46      	bgt.n	80109a8 <UART_SetConfig+0x648>
 801091a:	2b02      	cmp	r3, #2
 801091c:	f2c0 8082 	blt.w	8010a24 <UART_SetConfig+0x6c4>
 8010920:	3b02      	subs	r3, #2
 8010922:	2b1e      	cmp	r3, #30
 8010924:	d87e      	bhi.n	8010a24 <UART_SetConfig+0x6c4>
 8010926:	a201      	add	r2, pc, #4	@ (adr r2, 801092c <UART_SetConfig+0x5cc>)
 8010928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801092c:	080109af 	.word	0x080109af
 8010930:	08010a25 	.word	0x08010a25
 8010934:	080109b7 	.word	0x080109b7
 8010938:	08010a25 	.word	0x08010a25
 801093c:	08010a25 	.word	0x08010a25
 8010940:	08010a25 	.word	0x08010a25
 8010944:	080109c7 	.word	0x080109c7
 8010948:	08010a25 	.word	0x08010a25
 801094c:	08010a25 	.word	0x08010a25
 8010950:	08010a25 	.word	0x08010a25
 8010954:	08010a25 	.word	0x08010a25
 8010958:	08010a25 	.word	0x08010a25
 801095c:	08010a25 	.word	0x08010a25
 8010960:	08010a25 	.word	0x08010a25
 8010964:	080109d7 	.word	0x080109d7
 8010968:	08010a25 	.word	0x08010a25
 801096c:	08010a25 	.word	0x08010a25
 8010970:	08010a25 	.word	0x08010a25
 8010974:	08010a25 	.word	0x08010a25
 8010978:	08010a25 	.word	0x08010a25
 801097c:	08010a25 	.word	0x08010a25
 8010980:	08010a25 	.word	0x08010a25
 8010984:	08010a25 	.word	0x08010a25
 8010988:	08010a25 	.word	0x08010a25
 801098c:	08010a25 	.word	0x08010a25
 8010990:	08010a25 	.word	0x08010a25
 8010994:	08010a25 	.word	0x08010a25
 8010998:	08010a25 	.word	0x08010a25
 801099c:	08010a25 	.word	0x08010a25
 80109a0:	08010a25 	.word	0x08010a25
 80109a4:	08010a17 	.word	0x08010a17
 80109a8:	2b40      	cmp	r3, #64	@ 0x40
 80109aa:	d037      	beq.n	8010a1c <UART_SetConfig+0x6bc>
 80109ac:	e03a      	b.n	8010a24 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80109ae:	f7fd fdc7 	bl	800e540 <HAL_RCCEx_GetD3PCLK1Freq>
 80109b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80109b4:	e03c      	b.n	8010a30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80109b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80109ba:	4618      	mov	r0, r3
 80109bc:	f7fd fdd6 	bl	800e56c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80109c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80109c4:	e034      	b.n	8010a30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80109c6:	f107 0318 	add.w	r3, r7, #24
 80109ca:	4618      	mov	r0, r3
 80109cc:	f7fd ff22 	bl	800e814 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80109d0:	69fb      	ldr	r3, [r7, #28]
 80109d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80109d4:	e02c      	b.n	8010a30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80109d6:	4b09      	ldr	r3, [pc, #36]	@ (80109fc <UART_SetConfig+0x69c>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	f003 0320 	and.w	r3, r3, #32
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d016      	beq.n	8010a10 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80109e2:	4b06      	ldr	r3, [pc, #24]	@ (80109fc <UART_SetConfig+0x69c>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	08db      	lsrs	r3, r3, #3
 80109e8:	f003 0303 	and.w	r3, r3, #3
 80109ec:	4a07      	ldr	r2, [pc, #28]	@ (8010a0c <UART_SetConfig+0x6ac>)
 80109ee:	fa22 f303 	lsr.w	r3, r2, r3
 80109f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80109f4:	e01c      	b.n	8010a30 <UART_SetConfig+0x6d0>
 80109f6:	bf00      	nop
 80109f8:	40011400 	.word	0x40011400
 80109fc:	58024400 	.word	0x58024400
 8010a00:	40007800 	.word	0x40007800
 8010a04:	40007c00 	.word	0x40007c00
 8010a08:	58000c00 	.word	0x58000c00
 8010a0c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010a10:	4b9d      	ldr	r3, [pc, #628]	@ (8010c88 <UART_SetConfig+0x928>)
 8010a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a14:	e00c      	b.n	8010a30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010a16:	4b9d      	ldr	r3, [pc, #628]	@ (8010c8c <UART_SetConfig+0x92c>)
 8010a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a1a:	e009      	b.n	8010a30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010a1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a22:	e005      	b.n	8010a30 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010a24:	2300      	movs	r3, #0
 8010a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010a28:	2301      	movs	r3, #1
 8010a2a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010a2e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	f000 81de 	beq.w	8010df4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010a38:	697b      	ldr	r3, [r7, #20]
 8010a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a3c:	4a94      	ldr	r2, [pc, #592]	@ (8010c90 <UART_SetConfig+0x930>)
 8010a3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a42:	461a      	mov	r2, r3
 8010a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a46:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a4a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010a4c:	697b      	ldr	r3, [r7, #20]
 8010a4e:	685a      	ldr	r2, [r3, #4]
 8010a50:	4613      	mov	r3, r2
 8010a52:	005b      	lsls	r3, r3, #1
 8010a54:	4413      	add	r3, r2
 8010a56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a58:	429a      	cmp	r2, r3
 8010a5a:	d305      	bcc.n	8010a68 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	685b      	ldr	r3, [r3, #4]
 8010a60:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010a62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a64:	429a      	cmp	r2, r3
 8010a66:	d903      	bls.n	8010a70 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010a68:	2301      	movs	r3, #1
 8010a6a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010a6e:	e1c1      	b.n	8010df4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a72:	2200      	movs	r2, #0
 8010a74:	60bb      	str	r3, [r7, #8]
 8010a76:	60fa      	str	r2, [r7, #12]
 8010a78:	697b      	ldr	r3, [r7, #20]
 8010a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a7c:	4a84      	ldr	r2, [pc, #528]	@ (8010c90 <UART_SetConfig+0x930>)
 8010a7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a82:	b29b      	uxth	r3, r3
 8010a84:	2200      	movs	r2, #0
 8010a86:	603b      	str	r3, [r7, #0]
 8010a88:	607a      	str	r2, [r7, #4]
 8010a8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010a92:	f7ef fc7d 	bl	8000390 <__aeabi_uldivmod>
 8010a96:	4602      	mov	r2, r0
 8010a98:	460b      	mov	r3, r1
 8010a9a:	4610      	mov	r0, r2
 8010a9c:	4619      	mov	r1, r3
 8010a9e:	f04f 0200 	mov.w	r2, #0
 8010aa2:	f04f 0300 	mov.w	r3, #0
 8010aa6:	020b      	lsls	r3, r1, #8
 8010aa8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010aac:	0202      	lsls	r2, r0, #8
 8010aae:	6979      	ldr	r1, [r7, #20]
 8010ab0:	6849      	ldr	r1, [r1, #4]
 8010ab2:	0849      	lsrs	r1, r1, #1
 8010ab4:	2000      	movs	r0, #0
 8010ab6:	460c      	mov	r4, r1
 8010ab8:	4605      	mov	r5, r0
 8010aba:	eb12 0804 	adds.w	r8, r2, r4
 8010abe:	eb43 0905 	adc.w	r9, r3, r5
 8010ac2:	697b      	ldr	r3, [r7, #20]
 8010ac4:	685b      	ldr	r3, [r3, #4]
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	469a      	mov	sl, r3
 8010aca:	4693      	mov	fp, r2
 8010acc:	4652      	mov	r2, sl
 8010ace:	465b      	mov	r3, fp
 8010ad0:	4640      	mov	r0, r8
 8010ad2:	4649      	mov	r1, r9
 8010ad4:	f7ef fc5c 	bl	8000390 <__aeabi_uldivmod>
 8010ad8:	4602      	mov	r2, r0
 8010ada:	460b      	mov	r3, r1
 8010adc:	4613      	mov	r3, r2
 8010ade:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ae2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010ae6:	d308      	bcc.n	8010afa <UART_SetConfig+0x79a>
 8010ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010aee:	d204      	bcs.n	8010afa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010af6:	60da      	str	r2, [r3, #12]
 8010af8:	e17c      	b.n	8010df4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8010afa:	2301      	movs	r3, #1
 8010afc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010b00:	e178      	b.n	8010df4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010b02:	697b      	ldr	r3, [r7, #20]
 8010b04:	69db      	ldr	r3, [r3, #28]
 8010b06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010b0a:	f040 80c5 	bne.w	8010c98 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010b0e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010b12:	2b20      	cmp	r3, #32
 8010b14:	dc48      	bgt.n	8010ba8 <UART_SetConfig+0x848>
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	db7b      	blt.n	8010c12 <UART_SetConfig+0x8b2>
 8010b1a:	2b20      	cmp	r3, #32
 8010b1c:	d879      	bhi.n	8010c12 <UART_SetConfig+0x8b2>
 8010b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8010b24 <UART_SetConfig+0x7c4>)
 8010b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b24:	08010baf 	.word	0x08010baf
 8010b28:	08010bb7 	.word	0x08010bb7
 8010b2c:	08010c13 	.word	0x08010c13
 8010b30:	08010c13 	.word	0x08010c13
 8010b34:	08010bbf 	.word	0x08010bbf
 8010b38:	08010c13 	.word	0x08010c13
 8010b3c:	08010c13 	.word	0x08010c13
 8010b40:	08010c13 	.word	0x08010c13
 8010b44:	08010bcf 	.word	0x08010bcf
 8010b48:	08010c13 	.word	0x08010c13
 8010b4c:	08010c13 	.word	0x08010c13
 8010b50:	08010c13 	.word	0x08010c13
 8010b54:	08010c13 	.word	0x08010c13
 8010b58:	08010c13 	.word	0x08010c13
 8010b5c:	08010c13 	.word	0x08010c13
 8010b60:	08010c13 	.word	0x08010c13
 8010b64:	08010bdf 	.word	0x08010bdf
 8010b68:	08010c13 	.word	0x08010c13
 8010b6c:	08010c13 	.word	0x08010c13
 8010b70:	08010c13 	.word	0x08010c13
 8010b74:	08010c13 	.word	0x08010c13
 8010b78:	08010c13 	.word	0x08010c13
 8010b7c:	08010c13 	.word	0x08010c13
 8010b80:	08010c13 	.word	0x08010c13
 8010b84:	08010c13 	.word	0x08010c13
 8010b88:	08010c13 	.word	0x08010c13
 8010b8c:	08010c13 	.word	0x08010c13
 8010b90:	08010c13 	.word	0x08010c13
 8010b94:	08010c13 	.word	0x08010c13
 8010b98:	08010c13 	.word	0x08010c13
 8010b9c:	08010c13 	.word	0x08010c13
 8010ba0:	08010c13 	.word	0x08010c13
 8010ba4:	08010c05 	.word	0x08010c05
 8010ba8:	2b40      	cmp	r3, #64	@ 0x40
 8010baa:	d02e      	beq.n	8010c0a <UART_SetConfig+0x8aa>
 8010bac:	e031      	b.n	8010c12 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010bae:	f7fc fa91 	bl	800d0d4 <HAL_RCC_GetPCLK1Freq>
 8010bb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010bb4:	e033      	b.n	8010c1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010bb6:	f7fc faa3 	bl	800d100 <HAL_RCC_GetPCLK2Freq>
 8010bba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010bbc:	e02f      	b.n	8010c1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f7fd fcd2 	bl	800e56c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010bcc:	e027      	b.n	8010c1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010bce:	f107 0318 	add.w	r3, r7, #24
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f7fd fe1e 	bl	800e814 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010bd8:	69fb      	ldr	r3, [r7, #28]
 8010bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010bdc:	e01f      	b.n	8010c1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010bde:	4b2d      	ldr	r3, [pc, #180]	@ (8010c94 <UART_SetConfig+0x934>)
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	f003 0320 	and.w	r3, r3, #32
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d009      	beq.n	8010bfe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010bea:	4b2a      	ldr	r3, [pc, #168]	@ (8010c94 <UART_SetConfig+0x934>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	08db      	lsrs	r3, r3, #3
 8010bf0:	f003 0303 	and.w	r3, r3, #3
 8010bf4:	4a24      	ldr	r2, [pc, #144]	@ (8010c88 <UART_SetConfig+0x928>)
 8010bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8010bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010bfc:	e00f      	b.n	8010c1e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010bfe:	4b22      	ldr	r3, [pc, #136]	@ (8010c88 <UART_SetConfig+0x928>)
 8010c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c02:	e00c      	b.n	8010c1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010c04:	4b21      	ldr	r3, [pc, #132]	@ (8010c8c <UART_SetConfig+0x92c>)
 8010c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c08:	e009      	b.n	8010c1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c10:	e005      	b.n	8010c1e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010c12:	2300      	movs	r3, #0
 8010c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010c16:	2301      	movs	r3, #1
 8010c18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010c1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	f000 80e7 	beq.w	8010df4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010c26:	697b      	ldr	r3, [r7, #20]
 8010c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c2a:	4a19      	ldr	r2, [pc, #100]	@ (8010c90 <UART_SetConfig+0x930>)
 8010c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c30:	461a      	mov	r2, r3
 8010c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c38:	005a      	lsls	r2, r3, #1
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	685b      	ldr	r3, [r3, #4]
 8010c3e:	085b      	lsrs	r3, r3, #1
 8010c40:	441a      	add	r2, r3
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	685b      	ldr	r3, [r3, #4]
 8010c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c4e:	2b0f      	cmp	r3, #15
 8010c50:	d916      	bls.n	8010c80 <UART_SetConfig+0x920>
 8010c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010c58:	d212      	bcs.n	8010c80 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c5c:	b29b      	uxth	r3, r3
 8010c5e:	f023 030f 	bic.w	r3, r3, #15
 8010c62:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c66:	085b      	lsrs	r3, r3, #1
 8010c68:	b29b      	uxth	r3, r3
 8010c6a:	f003 0307 	and.w	r3, r3, #7
 8010c6e:	b29a      	uxth	r2, r3
 8010c70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010c72:	4313      	orrs	r3, r2
 8010c74:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8010c76:	697b      	ldr	r3, [r7, #20]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010c7c:	60da      	str	r2, [r3, #12]
 8010c7e:	e0b9      	b.n	8010df4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010c80:	2301      	movs	r3, #1
 8010c82:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010c86:	e0b5      	b.n	8010df4 <UART_SetConfig+0xa94>
 8010c88:	03d09000 	.word	0x03d09000
 8010c8c:	003d0900 	.word	0x003d0900
 8010c90:	08016344 	.word	0x08016344
 8010c94:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8010c98:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010c9c:	2b20      	cmp	r3, #32
 8010c9e:	dc49      	bgt.n	8010d34 <UART_SetConfig+0x9d4>
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	db7c      	blt.n	8010d9e <UART_SetConfig+0xa3e>
 8010ca4:	2b20      	cmp	r3, #32
 8010ca6:	d87a      	bhi.n	8010d9e <UART_SetConfig+0xa3e>
 8010ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8010cb0 <UART_SetConfig+0x950>)
 8010caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cae:	bf00      	nop
 8010cb0:	08010d3b 	.word	0x08010d3b
 8010cb4:	08010d43 	.word	0x08010d43
 8010cb8:	08010d9f 	.word	0x08010d9f
 8010cbc:	08010d9f 	.word	0x08010d9f
 8010cc0:	08010d4b 	.word	0x08010d4b
 8010cc4:	08010d9f 	.word	0x08010d9f
 8010cc8:	08010d9f 	.word	0x08010d9f
 8010ccc:	08010d9f 	.word	0x08010d9f
 8010cd0:	08010d5b 	.word	0x08010d5b
 8010cd4:	08010d9f 	.word	0x08010d9f
 8010cd8:	08010d9f 	.word	0x08010d9f
 8010cdc:	08010d9f 	.word	0x08010d9f
 8010ce0:	08010d9f 	.word	0x08010d9f
 8010ce4:	08010d9f 	.word	0x08010d9f
 8010ce8:	08010d9f 	.word	0x08010d9f
 8010cec:	08010d9f 	.word	0x08010d9f
 8010cf0:	08010d6b 	.word	0x08010d6b
 8010cf4:	08010d9f 	.word	0x08010d9f
 8010cf8:	08010d9f 	.word	0x08010d9f
 8010cfc:	08010d9f 	.word	0x08010d9f
 8010d00:	08010d9f 	.word	0x08010d9f
 8010d04:	08010d9f 	.word	0x08010d9f
 8010d08:	08010d9f 	.word	0x08010d9f
 8010d0c:	08010d9f 	.word	0x08010d9f
 8010d10:	08010d9f 	.word	0x08010d9f
 8010d14:	08010d9f 	.word	0x08010d9f
 8010d18:	08010d9f 	.word	0x08010d9f
 8010d1c:	08010d9f 	.word	0x08010d9f
 8010d20:	08010d9f 	.word	0x08010d9f
 8010d24:	08010d9f 	.word	0x08010d9f
 8010d28:	08010d9f 	.word	0x08010d9f
 8010d2c:	08010d9f 	.word	0x08010d9f
 8010d30:	08010d91 	.word	0x08010d91
 8010d34:	2b40      	cmp	r3, #64	@ 0x40
 8010d36:	d02e      	beq.n	8010d96 <UART_SetConfig+0xa36>
 8010d38:	e031      	b.n	8010d9e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010d3a:	f7fc f9cb 	bl	800d0d4 <HAL_RCC_GetPCLK1Freq>
 8010d3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010d40:	e033      	b.n	8010daa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d42:	f7fc f9dd 	bl	800d100 <HAL_RCC_GetPCLK2Freq>
 8010d46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010d48:	e02f      	b.n	8010daa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f7fd fc0c 	bl	800e56c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d58:	e027      	b.n	8010daa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d5a:	f107 0318 	add.w	r3, r7, #24
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f7fd fd58 	bl	800e814 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010d64:	69fb      	ldr	r3, [r7, #28]
 8010d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d68:	e01f      	b.n	8010daa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d6a:	4b2d      	ldr	r3, [pc, #180]	@ (8010e20 <UART_SetConfig+0xac0>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	f003 0320 	and.w	r3, r3, #32
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d009      	beq.n	8010d8a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010d76:	4b2a      	ldr	r3, [pc, #168]	@ (8010e20 <UART_SetConfig+0xac0>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	08db      	lsrs	r3, r3, #3
 8010d7c:	f003 0303 	and.w	r3, r3, #3
 8010d80:	4a28      	ldr	r2, [pc, #160]	@ (8010e24 <UART_SetConfig+0xac4>)
 8010d82:	fa22 f303 	lsr.w	r3, r2, r3
 8010d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010d88:	e00f      	b.n	8010daa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8010d8a:	4b26      	ldr	r3, [pc, #152]	@ (8010e24 <UART_SetConfig+0xac4>)
 8010d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d8e:	e00c      	b.n	8010daa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010d90:	4b25      	ldr	r3, [pc, #148]	@ (8010e28 <UART_SetConfig+0xac8>)
 8010d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d94:	e009      	b.n	8010daa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010d96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d9c:	e005      	b.n	8010daa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010da2:	2301      	movs	r3, #1
 8010da4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010da8:	bf00      	nop
    }

    if (pclk != 0U)
 8010daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d021      	beq.n	8010df4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010db4:	4a1d      	ldr	r2, [pc, #116]	@ (8010e2c <UART_SetConfig+0xacc>)
 8010db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010dba:	461a      	mov	r2, r3
 8010dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dbe:	fbb3 f2f2 	udiv	r2, r3, r2
 8010dc2:	697b      	ldr	r3, [r7, #20]
 8010dc4:	685b      	ldr	r3, [r3, #4]
 8010dc6:	085b      	lsrs	r3, r3, #1
 8010dc8:	441a      	add	r2, r3
 8010dca:	697b      	ldr	r3, [r7, #20]
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8010dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dd6:	2b0f      	cmp	r3, #15
 8010dd8:	d909      	bls.n	8010dee <UART_SetConfig+0xa8e>
 8010dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010de0:	d205      	bcs.n	8010dee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010de4:	b29a      	uxth	r2, r3
 8010de6:	697b      	ldr	r3, [r7, #20]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	60da      	str	r2, [r3, #12]
 8010dec:	e002      	b.n	8010df4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010dee:	2301      	movs	r3, #1
 8010df0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010df4:	697b      	ldr	r3, [r7, #20]
 8010df6:	2201      	movs	r2, #1
 8010df8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010dfc:	697b      	ldr	r3, [r7, #20]
 8010dfe:	2201      	movs	r2, #1
 8010e00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010e04:	697b      	ldr	r3, [r7, #20]
 8010e06:	2200      	movs	r2, #0
 8010e08:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010e0a:	697b      	ldr	r3, [r7, #20]
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010e10:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8010e14:	4618      	mov	r0, r3
 8010e16:	3748      	adds	r7, #72	@ 0x48
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010e1e:	bf00      	nop
 8010e20:	58024400 	.word	0x58024400
 8010e24:	03d09000 	.word	0x03d09000
 8010e28:	003d0900 	.word	0x003d0900
 8010e2c:	08016344 	.word	0x08016344

08010e30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010e30:	b480      	push	{r7}
 8010e32:	b083      	sub	sp, #12
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e3c:	f003 0308 	and.w	r3, r3, #8
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d00a      	beq.n	8010e5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	685b      	ldr	r3, [r3, #4]
 8010e4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	430a      	orrs	r2, r1
 8010e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e5e:	f003 0301 	and.w	r3, r3, #1
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d00a      	beq.n	8010e7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	685b      	ldr	r3, [r3, #4]
 8010e6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	430a      	orrs	r2, r1
 8010e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e80:	f003 0302 	and.w	r3, r3, #2
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d00a      	beq.n	8010e9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	430a      	orrs	r2, r1
 8010e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ea2:	f003 0304 	and.w	r3, r3, #4
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d00a      	beq.n	8010ec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	685b      	ldr	r3, [r3, #4]
 8010eb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	430a      	orrs	r2, r1
 8010ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ec4:	f003 0310 	and.w	r3, r3, #16
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d00a      	beq.n	8010ee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	689b      	ldr	r3, [r3, #8]
 8010ed2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	430a      	orrs	r2, r1
 8010ee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ee6:	f003 0320 	and.w	r3, r3, #32
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d00a      	beq.n	8010f04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	689b      	ldr	r3, [r3, #8]
 8010ef4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	430a      	orrs	r2, r1
 8010f02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d01a      	beq.n	8010f46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	685b      	ldr	r3, [r3, #4]
 8010f16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	430a      	orrs	r2, r1
 8010f24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010f2e:	d10a      	bne.n	8010f46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	685b      	ldr	r3, [r3, #4]
 8010f36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	430a      	orrs	r2, r1
 8010f44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d00a      	beq.n	8010f68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	685b      	ldr	r3, [r3, #4]
 8010f58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	430a      	orrs	r2, r1
 8010f66:	605a      	str	r2, [r3, #4]
  }
}
 8010f68:	bf00      	nop
 8010f6a:	370c      	adds	r7, #12
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f72:	4770      	bx	lr

08010f74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b098      	sub	sp, #96	@ 0x60
 8010f78:	af02      	add	r7, sp, #8
 8010f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2200      	movs	r2, #0
 8010f80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010f84:	f7f1 fa64 	bl	8002450 <HAL_GetTick>
 8010f88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	f003 0308 	and.w	r3, r3, #8
 8010f94:	2b08      	cmp	r3, #8
 8010f96:	d12f      	bne.n	8010ff8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010f98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010f9c:	9300      	str	r3, [sp, #0]
 8010f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f000 f88e 	bl	80110c8 <UART_WaitOnFlagUntilTimeout>
 8010fac:	4603      	mov	r3, r0
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d022      	beq.n	8010ff8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fba:	e853 3f00 	ldrex	r3, [r3]
 8010fbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010fc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	461a      	mov	r2, r3
 8010fce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8010fd2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010fd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010fd8:	e841 2300 	strex	r3, r2, [r1]
 8010fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d1e6      	bne.n	8010fb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	2220      	movs	r2, #32
 8010fe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2200      	movs	r2, #0
 8010ff0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010ff4:	2303      	movs	r3, #3
 8010ff6:	e063      	b.n	80110c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	f003 0304 	and.w	r3, r3, #4
 8011002:	2b04      	cmp	r3, #4
 8011004:	d149      	bne.n	801109a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011006:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801100a:	9300      	str	r3, [sp, #0]
 801100c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801100e:	2200      	movs	r2, #0
 8011010:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f000 f857 	bl	80110c8 <UART_WaitOnFlagUntilTimeout>
 801101a:	4603      	mov	r3, r0
 801101c:	2b00      	cmp	r3, #0
 801101e:	d03c      	beq.n	801109a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011028:	e853 3f00 	ldrex	r3, [r3]
 801102c:	623b      	str	r3, [r7, #32]
   return(result);
 801102e:	6a3b      	ldr	r3, [r7, #32]
 8011030:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011034:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	461a      	mov	r2, r3
 801103c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801103e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011040:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011042:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011046:	e841 2300 	strex	r3, r2, [r1]
 801104a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801104c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801104e:	2b00      	cmp	r3, #0
 8011050:	d1e6      	bne.n	8011020 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	3308      	adds	r3, #8
 8011058:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801105a:	693b      	ldr	r3, [r7, #16]
 801105c:	e853 3f00 	ldrex	r3, [r3]
 8011060:	60fb      	str	r3, [r7, #12]
   return(result);
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	f023 0301 	bic.w	r3, r3, #1
 8011068:	64bb      	str	r3, [r7, #72]	@ 0x48
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	3308      	adds	r3, #8
 8011070:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011072:	61fa      	str	r2, [r7, #28]
 8011074:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011076:	69b9      	ldr	r1, [r7, #24]
 8011078:	69fa      	ldr	r2, [r7, #28]
 801107a:	e841 2300 	strex	r3, r2, [r1]
 801107e:	617b      	str	r3, [r7, #20]
   return(result);
 8011080:	697b      	ldr	r3, [r7, #20]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d1e5      	bne.n	8011052 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	2220      	movs	r2, #32
 801108a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	2200      	movs	r2, #0
 8011092:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011096:	2303      	movs	r3, #3
 8011098:	e012      	b.n	80110c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	2220      	movs	r2, #32
 801109e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	2220      	movs	r2, #32
 80110a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	2200      	movs	r2, #0
 80110ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2200      	movs	r2, #0
 80110b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	2200      	movs	r2, #0
 80110ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80110be:	2300      	movs	r3, #0
}
 80110c0:	4618      	mov	r0, r3
 80110c2:	3758      	adds	r7, #88	@ 0x58
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd80      	pop	{r7, pc}

080110c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b084      	sub	sp, #16
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	60f8      	str	r0, [r7, #12]
 80110d0:	60b9      	str	r1, [r7, #8]
 80110d2:	603b      	str	r3, [r7, #0]
 80110d4:	4613      	mov	r3, r2
 80110d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80110d8:	e04f      	b.n	801117a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80110da:	69bb      	ldr	r3, [r7, #24]
 80110dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110e0:	d04b      	beq.n	801117a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80110e2:	f7f1 f9b5 	bl	8002450 <HAL_GetTick>
 80110e6:	4602      	mov	r2, r0
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	1ad3      	subs	r3, r2, r3
 80110ec:	69ba      	ldr	r2, [r7, #24]
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d302      	bcc.n	80110f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80110f2:	69bb      	ldr	r3, [r7, #24]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d101      	bne.n	80110fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80110f8:	2303      	movs	r3, #3
 80110fa:	e04e      	b.n	801119a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	f003 0304 	and.w	r3, r3, #4
 8011106:	2b00      	cmp	r3, #0
 8011108:	d037      	beq.n	801117a <UART_WaitOnFlagUntilTimeout+0xb2>
 801110a:	68bb      	ldr	r3, [r7, #8]
 801110c:	2b80      	cmp	r3, #128	@ 0x80
 801110e:	d034      	beq.n	801117a <UART_WaitOnFlagUntilTimeout+0xb2>
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	2b40      	cmp	r3, #64	@ 0x40
 8011114:	d031      	beq.n	801117a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	69db      	ldr	r3, [r3, #28]
 801111c:	f003 0308 	and.w	r3, r3, #8
 8011120:	2b08      	cmp	r3, #8
 8011122:	d110      	bne.n	8011146 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	2208      	movs	r2, #8
 801112a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801112c:	68f8      	ldr	r0, [r7, #12]
 801112e:	f000 f839 	bl	80111a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	2208      	movs	r2, #8
 8011136:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	2200      	movs	r2, #0
 801113e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8011142:	2301      	movs	r3, #1
 8011144:	e029      	b.n	801119a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	69db      	ldr	r3, [r3, #28]
 801114c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011150:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011154:	d111      	bne.n	801117a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801115e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011160:	68f8      	ldr	r0, [r7, #12]
 8011162:	f000 f81f 	bl	80111a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	2220      	movs	r2, #32
 801116a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	2200      	movs	r2, #0
 8011172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011176:	2303      	movs	r3, #3
 8011178:	e00f      	b.n	801119a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	69da      	ldr	r2, [r3, #28]
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	4013      	ands	r3, r2
 8011184:	68ba      	ldr	r2, [r7, #8]
 8011186:	429a      	cmp	r2, r3
 8011188:	bf0c      	ite	eq
 801118a:	2301      	moveq	r3, #1
 801118c:	2300      	movne	r3, #0
 801118e:	b2db      	uxtb	r3, r3
 8011190:	461a      	mov	r2, r3
 8011192:	79fb      	ldrb	r3, [r7, #7]
 8011194:	429a      	cmp	r2, r3
 8011196:	d0a0      	beq.n	80110da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011198:	2300      	movs	r3, #0
}
 801119a:	4618      	mov	r0, r3
 801119c:	3710      	adds	r7, #16
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}
	...

080111a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80111a4:	b480      	push	{r7}
 80111a6:	b095      	sub	sp, #84	@ 0x54
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111b4:	e853 3f00 	ldrex	r3, [r3]
 80111b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80111ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80111c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	461a      	mov	r2, r3
 80111c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80111ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80111cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80111d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80111d2:	e841 2300 	strex	r3, r2, [r1]
 80111d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80111d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d1e6      	bne.n	80111ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	3308      	adds	r3, #8
 80111e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111e6:	6a3b      	ldr	r3, [r7, #32]
 80111e8:	e853 3f00 	ldrex	r3, [r3]
 80111ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80111ee:	69fa      	ldr	r2, [r7, #28]
 80111f0:	4b1e      	ldr	r3, [pc, #120]	@ (801126c <UART_EndRxTransfer+0xc8>)
 80111f2:	4013      	ands	r3, r2
 80111f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	3308      	adds	r3, #8
 80111fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80111fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011200:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011202:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011204:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011206:	e841 2300 	strex	r3, r2, [r1]
 801120a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801120c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801120e:	2b00      	cmp	r3, #0
 8011210:	d1e5      	bne.n	80111de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011216:	2b01      	cmp	r3, #1
 8011218:	d118      	bne.n	801124c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	e853 3f00 	ldrex	r3, [r3]
 8011226:	60bb      	str	r3, [r7, #8]
   return(result);
 8011228:	68bb      	ldr	r3, [r7, #8]
 801122a:	f023 0310 	bic.w	r3, r3, #16
 801122e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	461a      	mov	r2, r3
 8011236:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011238:	61bb      	str	r3, [r7, #24]
 801123a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801123c:	6979      	ldr	r1, [r7, #20]
 801123e:	69ba      	ldr	r2, [r7, #24]
 8011240:	e841 2300 	strex	r3, r2, [r1]
 8011244:	613b      	str	r3, [r7, #16]
   return(result);
 8011246:	693b      	ldr	r3, [r7, #16]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d1e6      	bne.n	801121a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	2220      	movs	r2, #32
 8011250:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2200      	movs	r2, #0
 8011258:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	2200      	movs	r2, #0
 801125e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011260:	bf00      	nop
 8011262:	3754      	adds	r7, #84	@ 0x54
 8011264:	46bd      	mov	sp, r7
 8011266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126a:	4770      	bx	lr
 801126c:	effffffe 	.word	0xeffffffe

08011270 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b084      	sub	sp, #16
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801127e:	2b01      	cmp	r3, #1
 8011280:	d101      	bne.n	8011286 <HAL_UARTEx_EnableFifoMode+0x16>
 8011282:	2302      	movs	r3, #2
 8011284:	e02b      	b.n	80112de <HAL_UARTEx_EnableFifoMode+0x6e>
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	2201      	movs	r2, #1
 801128a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	2224      	movs	r2, #36	@ 0x24
 8011292:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	681a      	ldr	r2, [r3, #0]
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	f022 0201 	bic.w	r2, r2, #1
 80112ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80112b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80112bc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	68fa      	ldr	r2, [r7, #12]
 80112c4:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f000 f88a 	bl	80113e0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2220      	movs	r2, #32
 80112d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2200      	movs	r2, #0
 80112d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80112dc:	2300      	movs	r3, #0
}
 80112de:	4618      	mov	r0, r3
 80112e0:	3710      	adds	r7, #16
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}

080112e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80112e6:	b580      	push	{r7, lr}
 80112e8:	b084      	sub	sp, #16
 80112ea:	af00      	add	r7, sp, #0
 80112ec:	6078      	str	r0, [r7, #4]
 80112ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80112f6:	2b01      	cmp	r3, #1
 80112f8:	d101      	bne.n	80112fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80112fa:	2302      	movs	r3, #2
 80112fc:	e02d      	b.n	801135a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	2201      	movs	r2, #1
 8011302:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	2224      	movs	r2, #36	@ 0x24
 801130a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	681a      	ldr	r2, [r3, #0]
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	f022 0201 	bic.w	r2, r2, #1
 8011324:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	689b      	ldr	r3, [r3, #8]
 801132c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	683a      	ldr	r2, [r7, #0]
 8011336:	430a      	orrs	r2, r1
 8011338:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801133a:	6878      	ldr	r0, [r7, #4]
 801133c:	f000 f850 	bl	80113e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	68fa      	ldr	r2, [r7, #12]
 8011346:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2220      	movs	r2, #32
 801134c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2200      	movs	r2, #0
 8011354:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011358:	2300      	movs	r3, #0
}
 801135a:	4618      	mov	r0, r3
 801135c:	3710      	adds	r7, #16
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}

08011362 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011362:	b580      	push	{r7, lr}
 8011364:	b084      	sub	sp, #16
 8011366:	af00      	add	r7, sp, #0
 8011368:	6078      	str	r0, [r7, #4]
 801136a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011372:	2b01      	cmp	r3, #1
 8011374:	d101      	bne.n	801137a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011376:	2302      	movs	r3, #2
 8011378:	e02d      	b.n	80113d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	2201      	movs	r2, #1
 801137e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	2224      	movs	r2, #36	@ 0x24
 8011386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	681a      	ldr	r2, [r3, #0]
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	f022 0201 	bic.w	r2, r2, #1
 80113a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	689b      	ldr	r3, [r3, #8]
 80113a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	683a      	ldr	r2, [r7, #0]
 80113b2:	430a      	orrs	r2, r1
 80113b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80113b6:	6878      	ldr	r0, [r7, #4]
 80113b8:	f000 f812 	bl	80113e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	68fa      	ldr	r2, [r7, #12]
 80113c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2220      	movs	r2, #32
 80113c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	2200      	movs	r2, #0
 80113d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80113d4:	2300      	movs	r3, #0
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	3710      	adds	r7, #16
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}
	...

080113e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80113e0:	b480      	push	{r7}
 80113e2:	b085      	sub	sp, #20
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d108      	bne.n	8011402 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2201      	movs	r2, #1
 80113f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2201      	movs	r2, #1
 80113fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011400:	e031      	b.n	8011466 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011402:	2310      	movs	r3, #16
 8011404:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011406:	2310      	movs	r3, #16
 8011408:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	689b      	ldr	r3, [r3, #8]
 8011410:	0e5b      	lsrs	r3, r3, #25
 8011412:	b2db      	uxtb	r3, r3
 8011414:	f003 0307 	and.w	r3, r3, #7
 8011418:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	689b      	ldr	r3, [r3, #8]
 8011420:	0f5b      	lsrs	r3, r3, #29
 8011422:	b2db      	uxtb	r3, r3
 8011424:	f003 0307 	and.w	r3, r3, #7
 8011428:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801142a:	7bbb      	ldrb	r3, [r7, #14]
 801142c:	7b3a      	ldrb	r2, [r7, #12]
 801142e:	4911      	ldr	r1, [pc, #68]	@ (8011474 <UARTEx_SetNbDataToProcess+0x94>)
 8011430:	5c8a      	ldrb	r2, [r1, r2]
 8011432:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011436:	7b3a      	ldrb	r2, [r7, #12]
 8011438:	490f      	ldr	r1, [pc, #60]	@ (8011478 <UARTEx_SetNbDataToProcess+0x98>)
 801143a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801143c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011440:	b29a      	uxth	r2, r3
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011448:	7bfb      	ldrb	r3, [r7, #15]
 801144a:	7b7a      	ldrb	r2, [r7, #13]
 801144c:	4909      	ldr	r1, [pc, #36]	@ (8011474 <UARTEx_SetNbDataToProcess+0x94>)
 801144e:	5c8a      	ldrb	r2, [r1, r2]
 8011450:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011454:	7b7a      	ldrb	r2, [r7, #13]
 8011456:	4908      	ldr	r1, [pc, #32]	@ (8011478 <UARTEx_SetNbDataToProcess+0x98>)
 8011458:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801145a:	fb93 f3f2 	sdiv	r3, r3, r2
 801145e:	b29a      	uxth	r2, r3
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011466:	bf00      	nop
 8011468:	3714      	adds	r7, #20
 801146a:	46bd      	mov	sp, r7
 801146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011470:	4770      	bx	lr
 8011472:	bf00      	nop
 8011474:	0801635c 	.word	0x0801635c
 8011478:	08016364 	.word	0x08016364

0801147c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801147c:	b084      	sub	sp, #16
 801147e:	b580      	push	{r7, lr}
 8011480:	b084      	sub	sp, #16
 8011482:	af00      	add	r7, sp, #0
 8011484:	6078      	str	r0, [r7, #4]
 8011486:	f107 001c 	add.w	r0, r7, #28
 801148a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801148e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8011492:	2b01      	cmp	r3, #1
 8011494:	d121      	bne.n	80114da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801149a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	68da      	ldr	r2, [r3, #12]
 80114a6:	4b2c      	ldr	r3, [pc, #176]	@ (8011558 <USB_CoreInit+0xdc>)
 80114a8:	4013      	ands	r3, r2
 80114aa:	687a      	ldr	r2, [r7, #4]
 80114ac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	68db      	ldr	r3, [r3, #12]
 80114b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80114ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80114be:	2b01      	cmp	r3, #1
 80114c0:	d105      	bne.n	80114ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	68db      	ldr	r3, [r3, #12]
 80114c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80114ce:	6878      	ldr	r0, [r7, #4]
 80114d0:	f001 fafa 	bl	8012ac8 <USB_CoreReset>
 80114d4:	4603      	mov	r3, r0
 80114d6:	73fb      	strb	r3, [r7, #15]
 80114d8:	e01b      	b.n	8011512 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	68db      	ldr	r3, [r3, #12]
 80114de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f001 faee 	bl	8012ac8 <USB_CoreReset>
 80114ec:	4603      	mov	r3, r0
 80114ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80114f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d106      	bne.n	8011506 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	639a      	str	r2, [r3, #56]	@ 0x38
 8011504:	e005      	b.n	8011512 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801150a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011512:	7fbb      	ldrb	r3, [r7, #30]
 8011514:	2b01      	cmp	r3, #1
 8011516:	d116      	bne.n	8011546 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801151c:	b29a      	uxth	r2, r3
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011526:	4b0d      	ldr	r3, [pc, #52]	@ (801155c <USB_CoreInit+0xe0>)
 8011528:	4313      	orrs	r3, r2
 801152a:	687a      	ldr	r2, [r7, #4]
 801152c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	689b      	ldr	r3, [r3, #8]
 8011532:	f043 0206 	orr.w	r2, r3, #6
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	689b      	ldr	r3, [r3, #8]
 801153e:	f043 0220 	orr.w	r2, r3, #32
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011546:	7bfb      	ldrb	r3, [r7, #15]
}
 8011548:	4618      	mov	r0, r3
 801154a:	3710      	adds	r7, #16
 801154c:	46bd      	mov	sp, r7
 801154e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011552:	b004      	add	sp, #16
 8011554:	4770      	bx	lr
 8011556:	bf00      	nop
 8011558:	ffbdffbf 	.word	0xffbdffbf
 801155c:	03ee0000 	.word	0x03ee0000

08011560 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011560:	b480      	push	{r7}
 8011562:	b087      	sub	sp, #28
 8011564:	af00      	add	r7, sp, #0
 8011566:	60f8      	str	r0, [r7, #12]
 8011568:	60b9      	str	r1, [r7, #8]
 801156a:	4613      	mov	r3, r2
 801156c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801156e:	79fb      	ldrb	r3, [r7, #7]
 8011570:	2b02      	cmp	r3, #2
 8011572:	d165      	bne.n	8011640 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	4a41      	ldr	r2, [pc, #260]	@ (801167c <USB_SetTurnaroundTime+0x11c>)
 8011578:	4293      	cmp	r3, r2
 801157a:	d906      	bls.n	801158a <USB_SetTurnaroundTime+0x2a>
 801157c:	68bb      	ldr	r3, [r7, #8]
 801157e:	4a40      	ldr	r2, [pc, #256]	@ (8011680 <USB_SetTurnaroundTime+0x120>)
 8011580:	4293      	cmp	r3, r2
 8011582:	d202      	bcs.n	801158a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011584:	230f      	movs	r3, #15
 8011586:	617b      	str	r3, [r7, #20]
 8011588:	e062      	b.n	8011650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801158a:	68bb      	ldr	r3, [r7, #8]
 801158c:	4a3c      	ldr	r2, [pc, #240]	@ (8011680 <USB_SetTurnaroundTime+0x120>)
 801158e:	4293      	cmp	r3, r2
 8011590:	d306      	bcc.n	80115a0 <USB_SetTurnaroundTime+0x40>
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	4a3b      	ldr	r2, [pc, #236]	@ (8011684 <USB_SetTurnaroundTime+0x124>)
 8011596:	4293      	cmp	r3, r2
 8011598:	d202      	bcs.n	80115a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801159a:	230e      	movs	r3, #14
 801159c:	617b      	str	r3, [r7, #20]
 801159e:	e057      	b.n	8011650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	4a38      	ldr	r2, [pc, #224]	@ (8011684 <USB_SetTurnaroundTime+0x124>)
 80115a4:	4293      	cmp	r3, r2
 80115a6:	d306      	bcc.n	80115b6 <USB_SetTurnaroundTime+0x56>
 80115a8:	68bb      	ldr	r3, [r7, #8]
 80115aa:	4a37      	ldr	r2, [pc, #220]	@ (8011688 <USB_SetTurnaroundTime+0x128>)
 80115ac:	4293      	cmp	r3, r2
 80115ae:	d202      	bcs.n	80115b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80115b0:	230d      	movs	r3, #13
 80115b2:	617b      	str	r3, [r7, #20]
 80115b4:	e04c      	b.n	8011650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80115b6:	68bb      	ldr	r3, [r7, #8]
 80115b8:	4a33      	ldr	r2, [pc, #204]	@ (8011688 <USB_SetTurnaroundTime+0x128>)
 80115ba:	4293      	cmp	r3, r2
 80115bc:	d306      	bcc.n	80115cc <USB_SetTurnaroundTime+0x6c>
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	4a32      	ldr	r2, [pc, #200]	@ (801168c <USB_SetTurnaroundTime+0x12c>)
 80115c2:	4293      	cmp	r3, r2
 80115c4:	d802      	bhi.n	80115cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80115c6:	230c      	movs	r3, #12
 80115c8:	617b      	str	r3, [r7, #20]
 80115ca:	e041      	b.n	8011650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80115cc:	68bb      	ldr	r3, [r7, #8]
 80115ce:	4a2f      	ldr	r2, [pc, #188]	@ (801168c <USB_SetTurnaroundTime+0x12c>)
 80115d0:	4293      	cmp	r3, r2
 80115d2:	d906      	bls.n	80115e2 <USB_SetTurnaroundTime+0x82>
 80115d4:	68bb      	ldr	r3, [r7, #8]
 80115d6:	4a2e      	ldr	r2, [pc, #184]	@ (8011690 <USB_SetTurnaroundTime+0x130>)
 80115d8:	4293      	cmp	r3, r2
 80115da:	d802      	bhi.n	80115e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80115dc:	230b      	movs	r3, #11
 80115de:	617b      	str	r3, [r7, #20]
 80115e0:	e036      	b.n	8011650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	4a2a      	ldr	r2, [pc, #168]	@ (8011690 <USB_SetTurnaroundTime+0x130>)
 80115e6:	4293      	cmp	r3, r2
 80115e8:	d906      	bls.n	80115f8 <USB_SetTurnaroundTime+0x98>
 80115ea:	68bb      	ldr	r3, [r7, #8]
 80115ec:	4a29      	ldr	r2, [pc, #164]	@ (8011694 <USB_SetTurnaroundTime+0x134>)
 80115ee:	4293      	cmp	r3, r2
 80115f0:	d802      	bhi.n	80115f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80115f2:	230a      	movs	r3, #10
 80115f4:	617b      	str	r3, [r7, #20]
 80115f6:	e02b      	b.n	8011650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	4a26      	ldr	r2, [pc, #152]	@ (8011694 <USB_SetTurnaroundTime+0x134>)
 80115fc:	4293      	cmp	r3, r2
 80115fe:	d906      	bls.n	801160e <USB_SetTurnaroundTime+0xae>
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	4a25      	ldr	r2, [pc, #148]	@ (8011698 <USB_SetTurnaroundTime+0x138>)
 8011604:	4293      	cmp	r3, r2
 8011606:	d202      	bcs.n	801160e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011608:	2309      	movs	r3, #9
 801160a:	617b      	str	r3, [r7, #20]
 801160c:	e020      	b.n	8011650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	4a21      	ldr	r2, [pc, #132]	@ (8011698 <USB_SetTurnaroundTime+0x138>)
 8011612:	4293      	cmp	r3, r2
 8011614:	d306      	bcc.n	8011624 <USB_SetTurnaroundTime+0xc4>
 8011616:	68bb      	ldr	r3, [r7, #8]
 8011618:	4a20      	ldr	r2, [pc, #128]	@ (801169c <USB_SetTurnaroundTime+0x13c>)
 801161a:	4293      	cmp	r3, r2
 801161c:	d802      	bhi.n	8011624 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801161e:	2308      	movs	r3, #8
 8011620:	617b      	str	r3, [r7, #20]
 8011622:	e015      	b.n	8011650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	4a1d      	ldr	r2, [pc, #116]	@ (801169c <USB_SetTurnaroundTime+0x13c>)
 8011628:	4293      	cmp	r3, r2
 801162a:	d906      	bls.n	801163a <USB_SetTurnaroundTime+0xda>
 801162c:	68bb      	ldr	r3, [r7, #8]
 801162e:	4a1c      	ldr	r2, [pc, #112]	@ (80116a0 <USB_SetTurnaroundTime+0x140>)
 8011630:	4293      	cmp	r3, r2
 8011632:	d202      	bcs.n	801163a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011634:	2307      	movs	r3, #7
 8011636:	617b      	str	r3, [r7, #20]
 8011638:	e00a      	b.n	8011650 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801163a:	2306      	movs	r3, #6
 801163c:	617b      	str	r3, [r7, #20]
 801163e:	e007      	b.n	8011650 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011640:	79fb      	ldrb	r3, [r7, #7]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d102      	bne.n	801164c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011646:	2309      	movs	r3, #9
 8011648:	617b      	str	r3, [r7, #20]
 801164a:	e001      	b.n	8011650 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801164c:	2309      	movs	r3, #9
 801164e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	68db      	ldr	r3, [r3, #12]
 8011654:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	68da      	ldr	r2, [r3, #12]
 8011660:	697b      	ldr	r3, [r7, #20]
 8011662:	029b      	lsls	r3, r3, #10
 8011664:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8011668:	431a      	orrs	r2, r3
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801166e:	2300      	movs	r3, #0
}
 8011670:	4618      	mov	r0, r3
 8011672:	371c      	adds	r7, #28
 8011674:	46bd      	mov	sp, r7
 8011676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167a:	4770      	bx	lr
 801167c:	00d8acbf 	.word	0x00d8acbf
 8011680:	00e4e1c0 	.word	0x00e4e1c0
 8011684:	00f42400 	.word	0x00f42400
 8011688:	01067380 	.word	0x01067380
 801168c:	011a499f 	.word	0x011a499f
 8011690:	01312cff 	.word	0x01312cff
 8011694:	014ca43f 	.word	0x014ca43f
 8011698:	016e3600 	.word	0x016e3600
 801169c:	01a6ab1f 	.word	0x01a6ab1f
 80116a0:	01e84800 	.word	0x01e84800

080116a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80116a4:	b480      	push	{r7}
 80116a6:	b083      	sub	sp, #12
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	689b      	ldr	r3, [r3, #8]
 80116b0:	f043 0201 	orr.w	r2, r3, #1
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80116b8:	2300      	movs	r3, #0
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	370c      	adds	r7, #12
 80116be:	46bd      	mov	sp, r7
 80116c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c4:	4770      	bx	lr

080116c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80116c6:	b480      	push	{r7}
 80116c8:	b083      	sub	sp, #12
 80116ca:	af00      	add	r7, sp, #0
 80116cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	689b      	ldr	r3, [r3, #8]
 80116d2:	f023 0201 	bic.w	r2, r3, #1
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80116da:	2300      	movs	r3, #0
}
 80116dc:	4618      	mov	r0, r3
 80116de:	370c      	adds	r7, #12
 80116e0:	46bd      	mov	sp, r7
 80116e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e6:	4770      	bx	lr

080116e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b084      	sub	sp, #16
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
 80116f0:	460b      	mov	r3, r1
 80116f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80116f4:	2300      	movs	r3, #0
 80116f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	68db      	ldr	r3, [r3, #12]
 80116fc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011704:	78fb      	ldrb	r3, [r7, #3]
 8011706:	2b01      	cmp	r3, #1
 8011708:	d115      	bne.n	8011736 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	68db      	ldr	r3, [r3, #12]
 801170e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011716:	200a      	movs	r0, #10
 8011718:	f7f0 fea6 	bl	8002468 <HAL_Delay>
      ms += 10U;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	330a      	adds	r3, #10
 8011720:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011722:	6878      	ldr	r0, [r7, #4]
 8011724:	f001 f93f 	bl	80129a6 <USB_GetMode>
 8011728:	4603      	mov	r3, r0
 801172a:	2b01      	cmp	r3, #1
 801172c:	d01e      	beq.n	801176c <USB_SetCurrentMode+0x84>
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	2bc7      	cmp	r3, #199	@ 0xc7
 8011732:	d9f0      	bls.n	8011716 <USB_SetCurrentMode+0x2e>
 8011734:	e01a      	b.n	801176c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011736:	78fb      	ldrb	r3, [r7, #3]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d115      	bne.n	8011768 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	68db      	ldr	r3, [r3, #12]
 8011740:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011748:	200a      	movs	r0, #10
 801174a:	f7f0 fe8d 	bl	8002468 <HAL_Delay>
      ms += 10U;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	330a      	adds	r3, #10
 8011752:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f001 f926 	bl	80129a6 <USB_GetMode>
 801175a:	4603      	mov	r3, r0
 801175c:	2b00      	cmp	r3, #0
 801175e:	d005      	beq.n	801176c <USB_SetCurrentMode+0x84>
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	2bc7      	cmp	r3, #199	@ 0xc7
 8011764:	d9f0      	bls.n	8011748 <USB_SetCurrentMode+0x60>
 8011766:	e001      	b.n	801176c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011768:	2301      	movs	r3, #1
 801176a:	e005      	b.n	8011778 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	2bc8      	cmp	r3, #200	@ 0xc8
 8011770:	d101      	bne.n	8011776 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011772:	2301      	movs	r3, #1
 8011774:	e000      	b.n	8011778 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011776:	2300      	movs	r3, #0
}
 8011778:	4618      	mov	r0, r3
 801177a:	3710      	adds	r7, #16
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}

08011780 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011780:	b084      	sub	sp, #16
 8011782:	b580      	push	{r7, lr}
 8011784:	b086      	sub	sp, #24
 8011786:	af00      	add	r7, sp, #0
 8011788:	6078      	str	r0, [r7, #4]
 801178a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801178e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011792:	2300      	movs	r3, #0
 8011794:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801179a:	2300      	movs	r3, #0
 801179c:	613b      	str	r3, [r7, #16]
 801179e:	e009      	b.n	80117b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80117a0:	687a      	ldr	r2, [r7, #4]
 80117a2:	693b      	ldr	r3, [r7, #16]
 80117a4:	3340      	adds	r3, #64	@ 0x40
 80117a6:	009b      	lsls	r3, r3, #2
 80117a8:	4413      	add	r3, r2
 80117aa:	2200      	movs	r2, #0
 80117ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80117ae:	693b      	ldr	r3, [r7, #16]
 80117b0:	3301      	adds	r3, #1
 80117b2:	613b      	str	r3, [r7, #16]
 80117b4:	693b      	ldr	r3, [r7, #16]
 80117b6:	2b0e      	cmp	r3, #14
 80117b8:	d9f2      	bls.n	80117a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80117ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d11c      	bne.n	80117fc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117c8:	685b      	ldr	r3, [r3, #4]
 80117ca:	68fa      	ldr	r2, [r7, #12]
 80117cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80117d0:	f043 0302 	orr.w	r3, r3, #2
 80117d4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117da:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	601a      	str	r2, [r3, #0]
 80117fa:	e005      	b.n	8011808 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011800:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801180e:	461a      	mov	r2, r3
 8011810:	2300      	movs	r3, #0
 8011812:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011814:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8011818:	2b01      	cmp	r3, #1
 801181a:	d10d      	bne.n	8011838 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801181c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011820:	2b00      	cmp	r3, #0
 8011822:	d104      	bne.n	801182e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011824:	2100      	movs	r1, #0
 8011826:	6878      	ldr	r0, [r7, #4]
 8011828:	f000 f968 	bl	8011afc <USB_SetDevSpeed>
 801182c:	e008      	b.n	8011840 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801182e:	2101      	movs	r1, #1
 8011830:	6878      	ldr	r0, [r7, #4]
 8011832:	f000 f963 	bl	8011afc <USB_SetDevSpeed>
 8011836:	e003      	b.n	8011840 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011838:	2103      	movs	r1, #3
 801183a:	6878      	ldr	r0, [r7, #4]
 801183c:	f000 f95e 	bl	8011afc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011840:	2110      	movs	r1, #16
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	f000 f8fa 	bl	8011a3c <USB_FlushTxFifo>
 8011848:	4603      	mov	r3, r0
 801184a:	2b00      	cmp	r3, #0
 801184c:	d001      	beq.n	8011852 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 801184e:	2301      	movs	r3, #1
 8011850:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011852:	6878      	ldr	r0, [r7, #4]
 8011854:	f000 f924 	bl	8011aa0 <USB_FlushRxFifo>
 8011858:	4603      	mov	r3, r0
 801185a:	2b00      	cmp	r3, #0
 801185c:	d001      	beq.n	8011862 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801185e:	2301      	movs	r3, #1
 8011860:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011868:	461a      	mov	r2, r3
 801186a:	2300      	movs	r3, #0
 801186c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011874:	461a      	mov	r2, r3
 8011876:	2300      	movs	r3, #0
 8011878:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011880:	461a      	mov	r2, r3
 8011882:	2300      	movs	r3, #0
 8011884:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011886:	2300      	movs	r3, #0
 8011888:	613b      	str	r3, [r7, #16]
 801188a:	e043      	b.n	8011914 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801188c:	693b      	ldr	r3, [r7, #16]
 801188e:	015a      	lsls	r2, r3, #5
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	4413      	add	r3, r2
 8011894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801189e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80118a2:	d118      	bne.n	80118d6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80118a4:	693b      	ldr	r3, [r7, #16]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d10a      	bne.n	80118c0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80118aa:	693b      	ldr	r3, [r7, #16]
 80118ac:	015a      	lsls	r2, r3, #5
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	4413      	add	r3, r2
 80118b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80118b6:	461a      	mov	r2, r3
 80118b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80118bc:	6013      	str	r3, [r2, #0]
 80118be:	e013      	b.n	80118e8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80118c0:	693b      	ldr	r3, [r7, #16]
 80118c2:	015a      	lsls	r2, r3, #5
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	4413      	add	r3, r2
 80118c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80118cc:	461a      	mov	r2, r3
 80118ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80118d2:	6013      	str	r3, [r2, #0]
 80118d4:	e008      	b.n	80118e8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80118d6:	693b      	ldr	r3, [r7, #16]
 80118d8:	015a      	lsls	r2, r3, #5
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	4413      	add	r3, r2
 80118de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80118e2:	461a      	mov	r2, r3
 80118e4:	2300      	movs	r3, #0
 80118e6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	015a      	lsls	r2, r3, #5
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	4413      	add	r3, r2
 80118f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80118f4:	461a      	mov	r2, r3
 80118f6:	2300      	movs	r3, #0
 80118f8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80118fa:	693b      	ldr	r3, [r7, #16]
 80118fc:	015a      	lsls	r2, r3, #5
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	4413      	add	r3, r2
 8011902:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011906:	461a      	mov	r2, r3
 8011908:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801190c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801190e:	693b      	ldr	r3, [r7, #16]
 8011910:	3301      	adds	r3, #1
 8011912:	613b      	str	r3, [r7, #16]
 8011914:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011918:	461a      	mov	r2, r3
 801191a:	693b      	ldr	r3, [r7, #16]
 801191c:	4293      	cmp	r3, r2
 801191e:	d3b5      	bcc.n	801188c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011920:	2300      	movs	r3, #0
 8011922:	613b      	str	r3, [r7, #16]
 8011924:	e043      	b.n	80119ae <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011926:	693b      	ldr	r3, [r7, #16]
 8011928:	015a      	lsls	r2, r3, #5
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	4413      	add	r3, r2
 801192e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011938:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801193c:	d118      	bne.n	8011970 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 801193e:	693b      	ldr	r3, [r7, #16]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d10a      	bne.n	801195a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011944:	693b      	ldr	r3, [r7, #16]
 8011946:	015a      	lsls	r2, r3, #5
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	4413      	add	r3, r2
 801194c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011950:	461a      	mov	r2, r3
 8011952:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011956:	6013      	str	r3, [r2, #0]
 8011958:	e013      	b.n	8011982 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801195a:	693b      	ldr	r3, [r7, #16]
 801195c:	015a      	lsls	r2, r3, #5
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	4413      	add	r3, r2
 8011962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011966:	461a      	mov	r2, r3
 8011968:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801196c:	6013      	str	r3, [r2, #0]
 801196e:	e008      	b.n	8011982 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	015a      	lsls	r2, r3, #5
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	4413      	add	r3, r2
 8011978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801197c:	461a      	mov	r2, r3
 801197e:	2300      	movs	r3, #0
 8011980:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011982:	693b      	ldr	r3, [r7, #16]
 8011984:	015a      	lsls	r2, r3, #5
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	4413      	add	r3, r2
 801198a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801198e:	461a      	mov	r2, r3
 8011990:	2300      	movs	r3, #0
 8011992:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011994:	693b      	ldr	r3, [r7, #16]
 8011996:	015a      	lsls	r2, r3, #5
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	4413      	add	r3, r2
 801199c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119a0:	461a      	mov	r2, r3
 80119a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80119a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	3301      	adds	r3, #1
 80119ac:	613b      	str	r3, [r7, #16]
 80119ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80119b2:	461a      	mov	r2, r3
 80119b4:	693b      	ldr	r3, [r7, #16]
 80119b6:	4293      	cmp	r3, r2
 80119b8:	d3b5      	bcc.n	8011926 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80119c0:	691b      	ldr	r3, [r3, #16]
 80119c2:	68fa      	ldr	r2, [r7, #12]
 80119c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80119c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80119cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	2200      	movs	r2, #0
 80119d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80119da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80119dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d105      	bne.n	80119f0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	699b      	ldr	r3, [r3, #24]
 80119e8:	f043 0210 	orr.w	r2, r3, #16
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	699a      	ldr	r2, [r3, #24]
 80119f4:	4b0f      	ldr	r3, [pc, #60]	@ (8011a34 <USB_DevInit+0x2b4>)
 80119f6:	4313      	orrs	r3, r2
 80119f8:	687a      	ldr	r2, [r7, #4]
 80119fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80119fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d005      	beq.n	8011a10 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	699b      	ldr	r3, [r3, #24]
 8011a08:	f043 0208 	orr.w	r2, r3, #8
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011a10:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011a14:	2b01      	cmp	r3, #1
 8011a16:	d105      	bne.n	8011a24 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	699a      	ldr	r2, [r3, #24]
 8011a1c:	4b06      	ldr	r3, [pc, #24]	@ (8011a38 <USB_DevInit+0x2b8>)
 8011a1e:	4313      	orrs	r3, r2
 8011a20:	687a      	ldr	r2, [r7, #4]
 8011a22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	3718      	adds	r7, #24
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011a30:	b004      	add	sp, #16
 8011a32:	4770      	bx	lr
 8011a34:	803c3800 	.word	0x803c3800
 8011a38:	40000004 	.word	0x40000004

08011a3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011a3c:	b480      	push	{r7}
 8011a3e:	b085      	sub	sp, #20
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
 8011a44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011a46:	2300      	movs	r3, #0
 8011a48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	3301      	adds	r3, #1
 8011a4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011a56:	d901      	bls.n	8011a5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011a58:	2303      	movs	r3, #3
 8011a5a:	e01b      	b.n	8011a94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	691b      	ldr	r3, [r3, #16]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	daf2      	bge.n	8011a4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011a64:	2300      	movs	r3, #0
 8011a66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	019b      	lsls	r3, r3, #6
 8011a6c:	f043 0220 	orr.w	r2, r3, #32
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	3301      	adds	r3, #1
 8011a78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011a80:	d901      	bls.n	8011a86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011a82:	2303      	movs	r3, #3
 8011a84:	e006      	b.n	8011a94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	691b      	ldr	r3, [r3, #16]
 8011a8a:	f003 0320 	and.w	r3, r3, #32
 8011a8e:	2b20      	cmp	r3, #32
 8011a90:	d0f0      	beq.n	8011a74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011a92:	2300      	movs	r3, #0
}
 8011a94:	4618      	mov	r0, r3
 8011a96:	3714      	adds	r7, #20
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9e:	4770      	bx	lr

08011aa0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011aa0:	b480      	push	{r7}
 8011aa2:	b085      	sub	sp, #20
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	3301      	adds	r3, #1
 8011ab0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011ab8:	d901      	bls.n	8011abe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011aba:	2303      	movs	r3, #3
 8011abc:	e018      	b.n	8011af0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	691b      	ldr	r3, [r3, #16]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	daf2      	bge.n	8011aac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2210      	movs	r2, #16
 8011ace:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011adc:	d901      	bls.n	8011ae2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011ade:	2303      	movs	r3, #3
 8011ae0:	e006      	b.n	8011af0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	691b      	ldr	r3, [r3, #16]
 8011ae6:	f003 0310 	and.w	r3, r3, #16
 8011aea:	2b10      	cmp	r3, #16
 8011aec:	d0f0      	beq.n	8011ad0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011aee:	2300      	movs	r3, #0
}
 8011af0:	4618      	mov	r0, r3
 8011af2:	3714      	adds	r7, #20
 8011af4:	46bd      	mov	sp, r7
 8011af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afa:	4770      	bx	lr

08011afc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011afc:	b480      	push	{r7}
 8011afe:	b085      	sub	sp, #20
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
 8011b04:	460b      	mov	r3, r1
 8011b06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011b12:	681a      	ldr	r2, [r3, #0]
 8011b14:	78fb      	ldrb	r3, [r7, #3]
 8011b16:	68f9      	ldr	r1, [r7, #12]
 8011b18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011b1c:	4313      	orrs	r3, r2
 8011b1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011b20:	2300      	movs	r3, #0
}
 8011b22:	4618      	mov	r0, r3
 8011b24:	3714      	adds	r7, #20
 8011b26:	46bd      	mov	sp, r7
 8011b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2c:	4770      	bx	lr

08011b2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8011b2e:	b480      	push	{r7}
 8011b30:	b087      	sub	sp, #28
 8011b32:	af00      	add	r7, sp, #0
 8011b34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011b3a:	693b      	ldr	r3, [r7, #16]
 8011b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011b40:	689b      	ldr	r3, [r3, #8]
 8011b42:	f003 0306 	and.w	r3, r3, #6
 8011b46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d102      	bne.n	8011b54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8011b4e:	2300      	movs	r3, #0
 8011b50:	75fb      	strb	r3, [r7, #23]
 8011b52:	e00a      	b.n	8011b6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	2b02      	cmp	r3, #2
 8011b58:	d002      	beq.n	8011b60 <USB_GetDevSpeed+0x32>
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	2b06      	cmp	r3, #6
 8011b5e:	d102      	bne.n	8011b66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011b60:	2302      	movs	r3, #2
 8011b62:	75fb      	strb	r3, [r7, #23]
 8011b64:	e001      	b.n	8011b6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8011b66:	230f      	movs	r3, #15
 8011b68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	371c      	adds	r7, #28
 8011b70:	46bd      	mov	sp, r7
 8011b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b76:	4770      	bx	lr

08011b78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011b78:	b480      	push	{r7}
 8011b7a:	b085      	sub	sp, #20
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
 8011b80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	781b      	ldrb	r3, [r3, #0]
 8011b8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	785b      	ldrb	r3, [r3, #1]
 8011b90:	2b01      	cmp	r3, #1
 8011b92:	d139      	bne.n	8011c08 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011b9a:	69da      	ldr	r2, [r3, #28]
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	781b      	ldrb	r3, [r3, #0]
 8011ba0:	f003 030f 	and.w	r3, r3, #15
 8011ba4:	2101      	movs	r1, #1
 8011ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8011baa:	b29b      	uxth	r3, r3
 8011bac:	68f9      	ldr	r1, [r7, #12]
 8011bae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011bb2:	4313      	orrs	r3, r2
 8011bb4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	015a      	lsls	r2, r3, #5
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	4413      	add	r3, r2
 8011bbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d153      	bne.n	8011c74 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	015a      	lsls	r2, r3, #5
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	4413      	add	r3, r2
 8011bd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011bd8:	681a      	ldr	r2, [r3, #0]
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	689b      	ldr	r3, [r3, #8]
 8011bde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	791b      	ldrb	r3, [r3, #4]
 8011be6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011be8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	059b      	lsls	r3, r3, #22
 8011bee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011bf0:	431a      	orrs	r2, r3
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	0159      	lsls	r1, r3, #5
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	440b      	add	r3, r1
 8011bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011bfe:	4619      	mov	r1, r3
 8011c00:	4b20      	ldr	r3, [pc, #128]	@ (8011c84 <USB_ActivateEndpoint+0x10c>)
 8011c02:	4313      	orrs	r3, r2
 8011c04:	600b      	str	r3, [r1, #0]
 8011c06:	e035      	b.n	8011c74 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011c0e:	69da      	ldr	r2, [r3, #28]
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	781b      	ldrb	r3, [r3, #0]
 8011c14:	f003 030f 	and.w	r3, r3, #15
 8011c18:	2101      	movs	r1, #1
 8011c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8011c1e:	041b      	lsls	r3, r3, #16
 8011c20:	68f9      	ldr	r1, [r7, #12]
 8011c22:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011c26:	4313      	orrs	r3, r2
 8011c28:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	015a      	lsls	r2, r3, #5
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	4413      	add	r3, r2
 8011c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d119      	bne.n	8011c74 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	015a      	lsls	r2, r3, #5
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	4413      	add	r3, r2
 8011c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011c4c:	681a      	ldr	r2, [r3, #0]
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	689b      	ldr	r3, [r3, #8]
 8011c52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	791b      	ldrb	r3, [r3, #4]
 8011c5a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011c5c:	430b      	orrs	r3, r1
 8011c5e:	431a      	orrs	r2, r3
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	0159      	lsls	r1, r3, #5
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	440b      	add	r3, r1
 8011c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011c6c:	4619      	mov	r1, r3
 8011c6e:	4b05      	ldr	r3, [pc, #20]	@ (8011c84 <USB_ActivateEndpoint+0x10c>)
 8011c70:	4313      	orrs	r3, r2
 8011c72:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011c74:	2300      	movs	r3, #0
}
 8011c76:	4618      	mov	r0, r3
 8011c78:	3714      	adds	r7, #20
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c80:	4770      	bx	lr
 8011c82:	bf00      	nop
 8011c84:	10008000 	.word	0x10008000

08011c88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011c88:	b480      	push	{r7}
 8011c8a:	b085      	sub	sp, #20
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011c96:	683b      	ldr	r3, [r7, #0]
 8011c98:	781b      	ldrb	r3, [r3, #0]
 8011c9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	785b      	ldrb	r3, [r3, #1]
 8011ca0:	2b01      	cmp	r3, #1
 8011ca2:	d161      	bne.n	8011d68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011ca4:	68bb      	ldr	r3, [r7, #8]
 8011ca6:	015a      	lsls	r2, r3, #5
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	4413      	add	r3, r2
 8011cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011cb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011cba:	d11f      	bne.n	8011cfc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	015a      	lsls	r2, r3, #5
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	4413      	add	r3, r2
 8011cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	68ba      	ldr	r2, [r7, #8]
 8011ccc:	0151      	lsls	r1, r2, #5
 8011cce:	68fa      	ldr	r2, [r7, #12]
 8011cd0:	440a      	add	r2, r1
 8011cd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011cd6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011cda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	015a      	lsls	r2, r3, #5
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	4413      	add	r3, r2
 8011ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	68ba      	ldr	r2, [r7, #8]
 8011cec:	0151      	lsls	r1, r2, #5
 8011cee:	68fa      	ldr	r2, [r7, #12]
 8011cf0:	440a      	add	r2, r1
 8011cf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011cf6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011cfa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011d02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	781b      	ldrb	r3, [r3, #0]
 8011d08:	f003 030f 	and.w	r3, r3, #15
 8011d0c:	2101      	movs	r1, #1
 8011d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8011d12:	b29b      	uxth	r3, r3
 8011d14:	43db      	mvns	r3, r3
 8011d16:	68f9      	ldr	r1, [r7, #12]
 8011d18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011d1c:	4013      	ands	r3, r2
 8011d1e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011d26:	69da      	ldr	r2, [r3, #28]
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	781b      	ldrb	r3, [r3, #0]
 8011d2c:	f003 030f 	and.w	r3, r3, #15
 8011d30:	2101      	movs	r1, #1
 8011d32:	fa01 f303 	lsl.w	r3, r1, r3
 8011d36:	b29b      	uxth	r3, r3
 8011d38:	43db      	mvns	r3, r3
 8011d3a:	68f9      	ldr	r1, [r7, #12]
 8011d3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011d40:	4013      	ands	r3, r2
 8011d42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	015a      	lsls	r2, r3, #5
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	4413      	add	r3, r2
 8011d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d50:	681a      	ldr	r2, [r3, #0]
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	0159      	lsls	r1, r3, #5
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	440b      	add	r3, r1
 8011d5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d5e:	4619      	mov	r1, r3
 8011d60:	4b35      	ldr	r3, [pc, #212]	@ (8011e38 <USB_DeactivateEndpoint+0x1b0>)
 8011d62:	4013      	ands	r3, r2
 8011d64:	600b      	str	r3, [r1, #0]
 8011d66:	e060      	b.n	8011e2a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011d68:	68bb      	ldr	r3, [r7, #8]
 8011d6a:	015a      	lsls	r2, r3, #5
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	4413      	add	r3, r2
 8011d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011d7e:	d11f      	bne.n	8011dc0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	015a      	lsls	r2, r3, #5
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	4413      	add	r3, r2
 8011d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	68ba      	ldr	r2, [r7, #8]
 8011d90:	0151      	lsls	r1, r2, #5
 8011d92:	68fa      	ldr	r2, [r7, #12]
 8011d94:	440a      	add	r2, r1
 8011d96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011d9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011d9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	015a      	lsls	r2, r3, #5
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	4413      	add	r3, r2
 8011da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	68ba      	ldr	r2, [r7, #8]
 8011db0:	0151      	lsls	r1, r2, #5
 8011db2:	68fa      	ldr	r2, [r7, #12]
 8011db4:	440a      	add	r2, r1
 8011db6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011dba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011dbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011dc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011dc8:	683b      	ldr	r3, [r7, #0]
 8011dca:	781b      	ldrb	r3, [r3, #0]
 8011dcc:	f003 030f 	and.w	r3, r3, #15
 8011dd0:	2101      	movs	r1, #1
 8011dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8011dd6:	041b      	lsls	r3, r3, #16
 8011dd8:	43db      	mvns	r3, r3
 8011dda:	68f9      	ldr	r1, [r7, #12]
 8011ddc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011de0:	4013      	ands	r3, r2
 8011de2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011dea:	69da      	ldr	r2, [r3, #28]
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	781b      	ldrb	r3, [r3, #0]
 8011df0:	f003 030f 	and.w	r3, r3, #15
 8011df4:	2101      	movs	r1, #1
 8011df6:	fa01 f303 	lsl.w	r3, r1, r3
 8011dfa:	041b      	lsls	r3, r3, #16
 8011dfc:	43db      	mvns	r3, r3
 8011dfe:	68f9      	ldr	r1, [r7, #12]
 8011e00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011e04:	4013      	ands	r3, r2
 8011e06:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011e08:	68bb      	ldr	r3, [r7, #8]
 8011e0a:	015a      	lsls	r2, r3, #5
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	4413      	add	r3, r2
 8011e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e14:	681a      	ldr	r2, [r3, #0]
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	0159      	lsls	r1, r3, #5
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	440b      	add	r3, r1
 8011e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e22:	4619      	mov	r1, r3
 8011e24:	4b05      	ldr	r3, [pc, #20]	@ (8011e3c <USB_DeactivateEndpoint+0x1b4>)
 8011e26:	4013      	ands	r3, r2
 8011e28:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011e2a:	2300      	movs	r3, #0
}
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	3714      	adds	r7, #20
 8011e30:	46bd      	mov	sp, r7
 8011e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e36:	4770      	bx	lr
 8011e38:	ec337800 	.word	0xec337800
 8011e3c:	eff37800 	.word	0xeff37800

08011e40 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b08a      	sub	sp, #40	@ 0x28
 8011e44:	af02      	add	r7, sp, #8
 8011e46:	60f8      	str	r0, [r7, #12]
 8011e48:	60b9      	str	r1, [r7, #8]
 8011e4a:	4613      	mov	r3, r2
 8011e4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	781b      	ldrb	r3, [r3, #0]
 8011e56:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011e58:	68bb      	ldr	r3, [r7, #8]
 8011e5a:	785b      	ldrb	r3, [r3, #1]
 8011e5c:	2b01      	cmp	r3, #1
 8011e5e:	f040 8185 	bne.w	801216c <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011e62:	68bb      	ldr	r3, [r7, #8]
 8011e64:	691b      	ldr	r3, [r3, #16]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d132      	bne.n	8011ed0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011e6a:	69bb      	ldr	r3, [r7, #24]
 8011e6c:	015a      	lsls	r2, r3, #5
 8011e6e:	69fb      	ldr	r3, [r7, #28]
 8011e70:	4413      	add	r3, r2
 8011e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e76:	691a      	ldr	r2, [r3, #16]
 8011e78:	69bb      	ldr	r3, [r7, #24]
 8011e7a:	0159      	lsls	r1, r3, #5
 8011e7c:	69fb      	ldr	r3, [r7, #28]
 8011e7e:	440b      	add	r3, r1
 8011e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e84:	4619      	mov	r1, r3
 8011e86:	4ba7      	ldr	r3, [pc, #668]	@ (8012124 <USB_EPStartXfer+0x2e4>)
 8011e88:	4013      	ands	r3, r2
 8011e8a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011e8c:	69bb      	ldr	r3, [r7, #24]
 8011e8e:	015a      	lsls	r2, r3, #5
 8011e90:	69fb      	ldr	r3, [r7, #28]
 8011e92:	4413      	add	r3, r2
 8011e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e98:	691b      	ldr	r3, [r3, #16]
 8011e9a:	69ba      	ldr	r2, [r7, #24]
 8011e9c:	0151      	lsls	r1, r2, #5
 8011e9e:	69fa      	ldr	r2, [r7, #28]
 8011ea0:	440a      	add	r2, r1
 8011ea2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011ea6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011eaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011eac:	69bb      	ldr	r3, [r7, #24]
 8011eae:	015a      	lsls	r2, r3, #5
 8011eb0:	69fb      	ldr	r3, [r7, #28]
 8011eb2:	4413      	add	r3, r2
 8011eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011eb8:	691a      	ldr	r2, [r3, #16]
 8011eba:	69bb      	ldr	r3, [r7, #24]
 8011ebc:	0159      	lsls	r1, r3, #5
 8011ebe:	69fb      	ldr	r3, [r7, #28]
 8011ec0:	440b      	add	r3, r1
 8011ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ec6:	4619      	mov	r1, r3
 8011ec8:	4b97      	ldr	r3, [pc, #604]	@ (8012128 <USB_EPStartXfer+0x2e8>)
 8011eca:	4013      	ands	r3, r2
 8011ecc:	610b      	str	r3, [r1, #16]
 8011ece:	e097      	b.n	8012000 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011ed0:	69bb      	ldr	r3, [r7, #24]
 8011ed2:	015a      	lsls	r2, r3, #5
 8011ed4:	69fb      	ldr	r3, [r7, #28]
 8011ed6:	4413      	add	r3, r2
 8011ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011edc:	691a      	ldr	r2, [r3, #16]
 8011ede:	69bb      	ldr	r3, [r7, #24]
 8011ee0:	0159      	lsls	r1, r3, #5
 8011ee2:	69fb      	ldr	r3, [r7, #28]
 8011ee4:	440b      	add	r3, r1
 8011ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011eea:	4619      	mov	r1, r3
 8011eec:	4b8e      	ldr	r3, [pc, #568]	@ (8012128 <USB_EPStartXfer+0x2e8>)
 8011eee:	4013      	ands	r3, r2
 8011ef0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011ef2:	69bb      	ldr	r3, [r7, #24]
 8011ef4:	015a      	lsls	r2, r3, #5
 8011ef6:	69fb      	ldr	r3, [r7, #28]
 8011ef8:	4413      	add	r3, r2
 8011efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011efe:	691a      	ldr	r2, [r3, #16]
 8011f00:	69bb      	ldr	r3, [r7, #24]
 8011f02:	0159      	lsls	r1, r3, #5
 8011f04:	69fb      	ldr	r3, [r7, #28]
 8011f06:	440b      	add	r3, r1
 8011f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f0c:	4619      	mov	r1, r3
 8011f0e:	4b85      	ldr	r3, [pc, #532]	@ (8012124 <USB_EPStartXfer+0x2e4>)
 8011f10:	4013      	ands	r3, r2
 8011f12:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8011f14:	69bb      	ldr	r3, [r7, #24]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d11a      	bne.n	8011f50 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8011f1a:	68bb      	ldr	r3, [r7, #8]
 8011f1c:	691a      	ldr	r2, [r3, #16]
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	689b      	ldr	r3, [r3, #8]
 8011f22:	429a      	cmp	r2, r3
 8011f24:	d903      	bls.n	8011f2e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8011f26:	68bb      	ldr	r3, [r7, #8]
 8011f28:	689a      	ldr	r2, [r3, #8]
 8011f2a:	68bb      	ldr	r3, [r7, #8]
 8011f2c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011f2e:	69bb      	ldr	r3, [r7, #24]
 8011f30:	015a      	lsls	r2, r3, #5
 8011f32:	69fb      	ldr	r3, [r7, #28]
 8011f34:	4413      	add	r3, r2
 8011f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f3a:	691b      	ldr	r3, [r3, #16]
 8011f3c:	69ba      	ldr	r2, [r7, #24]
 8011f3e:	0151      	lsls	r1, r2, #5
 8011f40:	69fa      	ldr	r2, [r7, #28]
 8011f42:	440a      	add	r2, r1
 8011f44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011f48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011f4c:	6113      	str	r3, [r2, #16]
 8011f4e:	e044      	b.n	8011fda <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011f50:	68bb      	ldr	r3, [r7, #8]
 8011f52:	691a      	ldr	r2, [r3, #16]
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	689b      	ldr	r3, [r3, #8]
 8011f58:	4413      	add	r3, r2
 8011f5a:	1e5a      	subs	r2, r3, #1
 8011f5c:	68bb      	ldr	r3, [r7, #8]
 8011f5e:	689b      	ldr	r3, [r3, #8]
 8011f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f64:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8011f66:	69bb      	ldr	r3, [r7, #24]
 8011f68:	015a      	lsls	r2, r3, #5
 8011f6a:	69fb      	ldr	r3, [r7, #28]
 8011f6c:	4413      	add	r3, r2
 8011f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f72:	691a      	ldr	r2, [r3, #16]
 8011f74:	8afb      	ldrh	r3, [r7, #22]
 8011f76:	04d9      	lsls	r1, r3, #19
 8011f78:	4b6c      	ldr	r3, [pc, #432]	@ (801212c <USB_EPStartXfer+0x2ec>)
 8011f7a:	400b      	ands	r3, r1
 8011f7c:	69b9      	ldr	r1, [r7, #24]
 8011f7e:	0148      	lsls	r0, r1, #5
 8011f80:	69f9      	ldr	r1, [r7, #28]
 8011f82:	4401      	add	r1, r0
 8011f84:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8011f88:	4313      	orrs	r3, r2
 8011f8a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8011f8c:	68bb      	ldr	r3, [r7, #8]
 8011f8e:	791b      	ldrb	r3, [r3, #4]
 8011f90:	2b01      	cmp	r3, #1
 8011f92:	d122      	bne.n	8011fda <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011f94:	69bb      	ldr	r3, [r7, #24]
 8011f96:	015a      	lsls	r2, r3, #5
 8011f98:	69fb      	ldr	r3, [r7, #28]
 8011f9a:	4413      	add	r3, r2
 8011f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011fa0:	691b      	ldr	r3, [r3, #16]
 8011fa2:	69ba      	ldr	r2, [r7, #24]
 8011fa4:	0151      	lsls	r1, r2, #5
 8011fa6:	69fa      	ldr	r2, [r7, #28]
 8011fa8:	440a      	add	r2, r1
 8011faa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011fae:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8011fb2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8011fb4:	69bb      	ldr	r3, [r7, #24]
 8011fb6:	015a      	lsls	r2, r3, #5
 8011fb8:	69fb      	ldr	r3, [r7, #28]
 8011fba:	4413      	add	r3, r2
 8011fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011fc0:	691a      	ldr	r2, [r3, #16]
 8011fc2:	8afb      	ldrh	r3, [r7, #22]
 8011fc4:	075b      	lsls	r3, r3, #29
 8011fc6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8011fca:	69b9      	ldr	r1, [r7, #24]
 8011fcc:	0148      	lsls	r0, r1, #5
 8011fce:	69f9      	ldr	r1, [r7, #28]
 8011fd0:	4401      	add	r1, r0
 8011fd2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8011fd6:	4313      	orrs	r3, r2
 8011fd8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011fda:	69bb      	ldr	r3, [r7, #24]
 8011fdc:	015a      	lsls	r2, r3, #5
 8011fde:	69fb      	ldr	r3, [r7, #28]
 8011fe0:	4413      	add	r3, r2
 8011fe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011fe6:	691a      	ldr	r2, [r3, #16]
 8011fe8:	68bb      	ldr	r3, [r7, #8]
 8011fea:	691b      	ldr	r3, [r3, #16]
 8011fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011ff0:	69b9      	ldr	r1, [r7, #24]
 8011ff2:	0148      	lsls	r0, r1, #5
 8011ff4:	69f9      	ldr	r1, [r7, #28]
 8011ff6:	4401      	add	r1, r0
 8011ff8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8011ffc:	4313      	orrs	r3, r2
 8011ffe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012000:	79fb      	ldrb	r3, [r7, #7]
 8012002:	2b01      	cmp	r3, #1
 8012004:	d14b      	bne.n	801209e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012006:	68bb      	ldr	r3, [r7, #8]
 8012008:	69db      	ldr	r3, [r3, #28]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d009      	beq.n	8012022 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801200e:	69bb      	ldr	r3, [r7, #24]
 8012010:	015a      	lsls	r2, r3, #5
 8012012:	69fb      	ldr	r3, [r7, #28]
 8012014:	4413      	add	r3, r2
 8012016:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801201a:	461a      	mov	r2, r3
 801201c:	68bb      	ldr	r3, [r7, #8]
 801201e:	69db      	ldr	r3, [r3, #28]
 8012020:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8012022:	68bb      	ldr	r3, [r7, #8]
 8012024:	791b      	ldrb	r3, [r3, #4]
 8012026:	2b01      	cmp	r3, #1
 8012028:	d128      	bne.n	801207c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801202a:	69fb      	ldr	r3, [r7, #28]
 801202c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012030:	689b      	ldr	r3, [r3, #8]
 8012032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012036:	2b00      	cmp	r3, #0
 8012038:	d110      	bne.n	801205c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801203a:	69bb      	ldr	r3, [r7, #24]
 801203c:	015a      	lsls	r2, r3, #5
 801203e:	69fb      	ldr	r3, [r7, #28]
 8012040:	4413      	add	r3, r2
 8012042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	69ba      	ldr	r2, [r7, #24]
 801204a:	0151      	lsls	r1, r2, #5
 801204c:	69fa      	ldr	r2, [r7, #28]
 801204e:	440a      	add	r2, r1
 8012050:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012054:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012058:	6013      	str	r3, [r2, #0]
 801205a:	e00f      	b.n	801207c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801205c:	69bb      	ldr	r3, [r7, #24]
 801205e:	015a      	lsls	r2, r3, #5
 8012060:	69fb      	ldr	r3, [r7, #28]
 8012062:	4413      	add	r3, r2
 8012064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	69ba      	ldr	r2, [r7, #24]
 801206c:	0151      	lsls	r1, r2, #5
 801206e:	69fa      	ldr	r2, [r7, #28]
 8012070:	440a      	add	r2, r1
 8012072:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801207a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801207c:	69bb      	ldr	r3, [r7, #24]
 801207e:	015a      	lsls	r2, r3, #5
 8012080:	69fb      	ldr	r3, [r7, #28]
 8012082:	4413      	add	r3, r2
 8012084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	69ba      	ldr	r2, [r7, #24]
 801208c:	0151      	lsls	r1, r2, #5
 801208e:	69fa      	ldr	r2, [r7, #28]
 8012090:	440a      	add	r2, r1
 8012092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012096:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801209a:	6013      	str	r3, [r2, #0]
 801209c:	e169      	b.n	8012372 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801209e:	69bb      	ldr	r3, [r7, #24]
 80120a0:	015a      	lsls	r2, r3, #5
 80120a2:	69fb      	ldr	r3, [r7, #28]
 80120a4:	4413      	add	r3, r2
 80120a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	69ba      	ldr	r2, [r7, #24]
 80120ae:	0151      	lsls	r1, r2, #5
 80120b0:	69fa      	ldr	r2, [r7, #28]
 80120b2:	440a      	add	r2, r1
 80120b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80120b8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80120bc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	791b      	ldrb	r3, [r3, #4]
 80120c2:	2b01      	cmp	r3, #1
 80120c4:	d015      	beq.n	80120f2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80120c6:	68bb      	ldr	r3, [r7, #8]
 80120c8:	691b      	ldr	r3, [r3, #16]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	f000 8151 	beq.w	8012372 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80120d0:	69fb      	ldr	r3, [r7, #28]
 80120d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80120d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80120d8:	68bb      	ldr	r3, [r7, #8]
 80120da:	781b      	ldrb	r3, [r3, #0]
 80120dc:	f003 030f 	and.w	r3, r3, #15
 80120e0:	2101      	movs	r1, #1
 80120e2:	fa01 f303 	lsl.w	r3, r1, r3
 80120e6:	69f9      	ldr	r1, [r7, #28]
 80120e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80120ec:	4313      	orrs	r3, r2
 80120ee:	634b      	str	r3, [r1, #52]	@ 0x34
 80120f0:	e13f      	b.n	8012372 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80120f2:	69fb      	ldr	r3, [r7, #28]
 80120f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80120f8:	689b      	ldr	r3, [r3, #8]
 80120fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d116      	bne.n	8012130 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012102:	69bb      	ldr	r3, [r7, #24]
 8012104:	015a      	lsls	r2, r3, #5
 8012106:	69fb      	ldr	r3, [r7, #28]
 8012108:	4413      	add	r3, r2
 801210a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	69ba      	ldr	r2, [r7, #24]
 8012112:	0151      	lsls	r1, r2, #5
 8012114:	69fa      	ldr	r2, [r7, #28]
 8012116:	440a      	add	r2, r1
 8012118:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801211c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012120:	6013      	str	r3, [r2, #0]
 8012122:	e015      	b.n	8012150 <USB_EPStartXfer+0x310>
 8012124:	e007ffff 	.word	0xe007ffff
 8012128:	fff80000 	.word	0xfff80000
 801212c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012130:	69bb      	ldr	r3, [r7, #24]
 8012132:	015a      	lsls	r2, r3, #5
 8012134:	69fb      	ldr	r3, [r7, #28]
 8012136:	4413      	add	r3, r2
 8012138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	69ba      	ldr	r2, [r7, #24]
 8012140:	0151      	lsls	r1, r2, #5
 8012142:	69fa      	ldr	r2, [r7, #28]
 8012144:	440a      	add	r2, r1
 8012146:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801214a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801214e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8012150:	68bb      	ldr	r3, [r7, #8]
 8012152:	68d9      	ldr	r1, [r3, #12]
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	781a      	ldrb	r2, [r3, #0]
 8012158:	68bb      	ldr	r3, [r7, #8]
 801215a:	691b      	ldr	r3, [r3, #16]
 801215c:	b298      	uxth	r0, r3
 801215e:	79fb      	ldrb	r3, [r7, #7]
 8012160:	9300      	str	r3, [sp, #0]
 8012162:	4603      	mov	r3, r0
 8012164:	68f8      	ldr	r0, [r7, #12]
 8012166:	f000 f9b9 	bl	80124dc <USB_WritePacket>
 801216a:	e102      	b.n	8012372 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801216c:	69bb      	ldr	r3, [r7, #24]
 801216e:	015a      	lsls	r2, r3, #5
 8012170:	69fb      	ldr	r3, [r7, #28]
 8012172:	4413      	add	r3, r2
 8012174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012178:	691a      	ldr	r2, [r3, #16]
 801217a:	69bb      	ldr	r3, [r7, #24]
 801217c:	0159      	lsls	r1, r3, #5
 801217e:	69fb      	ldr	r3, [r7, #28]
 8012180:	440b      	add	r3, r1
 8012182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012186:	4619      	mov	r1, r3
 8012188:	4b7c      	ldr	r3, [pc, #496]	@ (801237c <USB_EPStartXfer+0x53c>)
 801218a:	4013      	ands	r3, r2
 801218c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801218e:	69bb      	ldr	r3, [r7, #24]
 8012190:	015a      	lsls	r2, r3, #5
 8012192:	69fb      	ldr	r3, [r7, #28]
 8012194:	4413      	add	r3, r2
 8012196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801219a:	691a      	ldr	r2, [r3, #16]
 801219c:	69bb      	ldr	r3, [r7, #24]
 801219e:	0159      	lsls	r1, r3, #5
 80121a0:	69fb      	ldr	r3, [r7, #28]
 80121a2:	440b      	add	r3, r1
 80121a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80121a8:	4619      	mov	r1, r3
 80121aa:	4b75      	ldr	r3, [pc, #468]	@ (8012380 <USB_EPStartXfer+0x540>)
 80121ac:	4013      	ands	r3, r2
 80121ae:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80121b0:	69bb      	ldr	r3, [r7, #24]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d12f      	bne.n	8012216 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 80121b6:	68bb      	ldr	r3, [r7, #8]
 80121b8:	691b      	ldr	r3, [r3, #16]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d003      	beq.n	80121c6 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 80121be:	68bb      	ldr	r3, [r7, #8]
 80121c0:	689a      	ldr	r2, [r3, #8]
 80121c2:	68bb      	ldr	r3, [r7, #8]
 80121c4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80121c6:	68bb      	ldr	r3, [r7, #8]
 80121c8:	689a      	ldr	r2, [r3, #8]
 80121ca:	68bb      	ldr	r3, [r7, #8]
 80121cc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80121ce:	69bb      	ldr	r3, [r7, #24]
 80121d0:	015a      	lsls	r2, r3, #5
 80121d2:	69fb      	ldr	r3, [r7, #28]
 80121d4:	4413      	add	r3, r2
 80121d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80121da:	691a      	ldr	r2, [r3, #16]
 80121dc:	68bb      	ldr	r3, [r7, #8]
 80121de:	6a1b      	ldr	r3, [r3, #32]
 80121e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80121e4:	69b9      	ldr	r1, [r7, #24]
 80121e6:	0148      	lsls	r0, r1, #5
 80121e8:	69f9      	ldr	r1, [r7, #28]
 80121ea:	4401      	add	r1, r0
 80121ec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80121f0:	4313      	orrs	r3, r2
 80121f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80121f4:	69bb      	ldr	r3, [r7, #24]
 80121f6:	015a      	lsls	r2, r3, #5
 80121f8:	69fb      	ldr	r3, [r7, #28]
 80121fa:	4413      	add	r3, r2
 80121fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012200:	691b      	ldr	r3, [r3, #16]
 8012202:	69ba      	ldr	r2, [r7, #24]
 8012204:	0151      	lsls	r1, r2, #5
 8012206:	69fa      	ldr	r2, [r7, #28]
 8012208:	440a      	add	r2, r1
 801220a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801220e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012212:	6113      	str	r3, [r2, #16]
 8012214:	e05f      	b.n	80122d6 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8012216:	68bb      	ldr	r3, [r7, #8]
 8012218:	691b      	ldr	r3, [r3, #16]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d123      	bne.n	8012266 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801221e:	69bb      	ldr	r3, [r7, #24]
 8012220:	015a      	lsls	r2, r3, #5
 8012222:	69fb      	ldr	r3, [r7, #28]
 8012224:	4413      	add	r3, r2
 8012226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801222a:	691a      	ldr	r2, [r3, #16]
 801222c:	68bb      	ldr	r3, [r7, #8]
 801222e:	689b      	ldr	r3, [r3, #8]
 8012230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012234:	69b9      	ldr	r1, [r7, #24]
 8012236:	0148      	lsls	r0, r1, #5
 8012238:	69f9      	ldr	r1, [r7, #28]
 801223a:	4401      	add	r1, r0
 801223c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8012240:	4313      	orrs	r3, r2
 8012242:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012244:	69bb      	ldr	r3, [r7, #24]
 8012246:	015a      	lsls	r2, r3, #5
 8012248:	69fb      	ldr	r3, [r7, #28]
 801224a:	4413      	add	r3, r2
 801224c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012250:	691b      	ldr	r3, [r3, #16]
 8012252:	69ba      	ldr	r2, [r7, #24]
 8012254:	0151      	lsls	r1, r2, #5
 8012256:	69fa      	ldr	r2, [r7, #28]
 8012258:	440a      	add	r2, r1
 801225a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801225e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012262:	6113      	str	r3, [r2, #16]
 8012264:	e037      	b.n	80122d6 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012266:	68bb      	ldr	r3, [r7, #8]
 8012268:	691a      	ldr	r2, [r3, #16]
 801226a:	68bb      	ldr	r3, [r7, #8]
 801226c:	689b      	ldr	r3, [r3, #8]
 801226e:	4413      	add	r3, r2
 8012270:	1e5a      	subs	r2, r3, #1
 8012272:	68bb      	ldr	r3, [r7, #8]
 8012274:	689b      	ldr	r3, [r3, #8]
 8012276:	fbb2 f3f3 	udiv	r3, r2, r3
 801227a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801227c:	68bb      	ldr	r3, [r7, #8]
 801227e:	689b      	ldr	r3, [r3, #8]
 8012280:	8afa      	ldrh	r2, [r7, #22]
 8012282:	fb03 f202 	mul.w	r2, r3, r2
 8012286:	68bb      	ldr	r3, [r7, #8]
 8012288:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801228a:	69bb      	ldr	r3, [r7, #24]
 801228c:	015a      	lsls	r2, r3, #5
 801228e:	69fb      	ldr	r3, [r7, #28]
 8012290:	4413      	add	r3, r2
 8012292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012296:	691a      	ldr	r2, [r3, #16]
 8012298:	8afb      	ldrh	r3, [r7, #22]
 801229a:	04d9      	lsls	r1, r3, #19
 801229c:	4b39      	ldr	r3, [pc, #228]	@ (8012384 <USB_EPStartXfer+0x544>)
 801229e:	400b      	ands	r3, r1
 80122a0:	69b9      	ldr	r1, [r7, #24]
 80122a2:	0148      	lsls	r0, r1, #5
 80122a4:	69f9      	ldr	r1, [r7, #28]
 80122a6:	4401      	add	r1, r0
 80122a8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80122ac:	4313      	orrs	r3, r2
 80122ae:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80122b0:	69bb      	ldr	r3, [r7, #24]
 80122b2:	015a      	lsls	r2, r3, #5
 80122b4:	69fb      	ldr	r3, [r7, #28]
 80122b6:	4413      	add	r3, r2
 80122b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80122bc:	691a      	ldr	r2, [r3, #16]
 80122be:	68bb      	ldr	r3, [r7, #8]
 80122c0:	6a1b      	ldr	r3, [r3, #32]
 80122c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80122c6:	69b9      	ldr	r1, [r7, #24]
 80122c8:	0148      	lsls	r0, r1, #5
 80122ca:	69f9      	ldr	r1, [r7, #28]
 80122cc:	4401      	add	r1, r0
 80122ce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80122d2:	4313      	orrs	r3, r2
 80122d4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80122d6:	79fb      	ldrb	r3, [r7, #7]
 80122d8:	2b01      	cmp	r3, #1
 80122da:	d10d      	bne.n	80122f8 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80122dc:	68bb      	ldr	r3, [r7, #8]
 80122de:	68db      	ldr	r3, [r3, #12]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d009      	beq.n	80122f8 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80122e4:	68bb      	ldr	r3, [r7, #8]
 80122e6:	68d9      	ldr	r1, [r3, #12]
 80122e8:	69bb      	ldr	r3, [r7, #24]
 80122ea:	015a      	lsls	r2, r3, #5
 80122ec:	69fb      	ldr	r3, [r7, #28]
 80122ee:	4413      	add	r3, r2
 80122f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80122f4:	460a      	mov	r2, r1
 80122f6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80122f8:	68bb      	ldr	r3, [r7, #8]
 80122fa:	791b      	ldrb	r3, [r3, #4]
 80122fc:	2b01      	cmp	r3, #1
 80122fe:	d128      	bne.n	8012352 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012300:	69fb      	ldr	r3, [r7, #28]
 8012302:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012306:	689b      	ldr	r3, [r3, #8]
 8012308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801230c:	2b00      	cmp	r3, #0
 801230e:	d110      	bne.n	8012332 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012310:	69bb      	ldr	r3, [r7, #24]
 8012312:	015a      	lsls	r2, r3, #5
 8012314:	69fb      	ldr	r3, [r7, #28]
 8012316:	4413      	add	r3, r2
 8012318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	69ba      	ldr	r2, [r7, #24]
 8012320:	0151      	lsls	r1, r2, #5
 8012322:	69fa      	ldr	r2, [r7, #28]
 8012324:	440a      	add	r2, r1
 8012326:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801232a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801232e:	6013      	str	r3, [r2, #0]
 8012330:	e00f      	b.n	8012352 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012332:	69bb      	ldr	r3, [r7, #24]
 8012334:	015a      	lsls	r2, r3, #5
 8012336:	69fb      	ldr	r3, [r7, #28]
 8012338:	4413      	add	r3, r2
 801233a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	69ba      	ldr	r2, [r7, #24]
 8012342:	0151      	lsls	r1, r2, #5
 8012344:	69fa      	ldr	r2, [r7, #28]
 8012346:	440a      	add	r2, r1
 8012348:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801234c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012350:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012352:	69bb      	ldr	r3, [r7, #24]
 8012354:	015a      	lsls	r2, r3, #5
 8012356:	69fb      	ldr	r3, [r7, #28]
 8012358:	4413      	add	r3, r2
 801235a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	69ba      	ldr	r2, [r7, #24]
 8012362:	0151      	lsls	r1, r2, #5
 8012364:	69fa      	ldr	r2, [r7, #28]
 8012366:	440a      	add	r2, r1
 8012368:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801236c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8012370:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012372:	2300      	movs	r3, #0
}
 8012374:	4618      	mov	r0, r3
 8012376:	3720      	adds	r7, #32
 8012378:	46bd      	mov	sp, r7
 801237a:	bd80      	pop	{r7, pc}
 801237c:	fff80000 	.word	0xfff80000
 8012380:	e007ffff 	.word	0xe007ffff
 8012384:	1ff80000 	.word	0x1ff80000

08012388 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012388:	b480      	push	{r7}
 801238a:	b087      	sub	sp, #28
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
 8012390:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012392:	2300      	movs	r3, #0
 8012394:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8012396:	2300      	movs	r3, #0
 8012398:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801239e:	683b      	ldr	r3, [r7, #0]
 80123a0:	785b      	ldrb	r3, [r3, #1]
 80123a2:	2b01      	cmp	r3, #1
 80123a4:	d14a      	bne.n	801243c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	781b      	ldrb	r3, [r3, #0]
 80123aa:	015a      	lsls	r2, r3, #5
 80123ac:	693b      	ldr	r3, [r7, #16]
 80123ae:	4413      	add	r3, r2
 80123b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80123ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80123be:	f040 8086 	bne.w	80124ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	781b      	ldrb	r3, [r3, #0]
 80123c6:	015a      	lsls	r2, r3, #5
 80123c8:	693b      	ldr	r3, [r7, #16]
 80123ca:	4413      	add	r3, r2
 80123cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	683a      	ldr	r2, [r7, #0]
 80123d4:	7812      	ldrb	r2, [r2, #0]
 80123d6:	0151      	lsls	r1, r2, #5
 80123d8:	693a      	ldr	r2, [r7, #16]
 80123da:	440a      	add	r2, r1
 80123dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80123e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80123e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	781b      	ldrb	r3, [r3, #0]
 80123ea:	015a      	lsls	r2, r3, #5
 80123ec:	693b      	ldr	r3, [r7, #16]
 80123ee:	4413      	add	r3, r2
 80123f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	683a      	ldr	r2, [r7, #0]
 80123f8:	7812      	ldrb	r2, [r2, #0]
 80123fa:	0151      	lsls	r1, r2, #5
 80123fc:	693a      	ldr	r2, [r7, #16]
 80123fe:	440a      	add	r2, r1
 8012400:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012404:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012408:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	3301      	adds	r3, #1
 801240e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	f242 7210 	movw	r2, #10000	@ 0x2710
 8012416:	4293      	cmp	r3, r2
 8012418:	d902      	bls.n	8012420 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801241a:	2301      	movs	r3, #1
 801241c:	75fb      	strb	r3, [r7, #23]
          break;
 801241e:	e056      	b.n	80124ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8012420:	683b      	ldr	r3, [r7, #0]
 8012422:	781b      	ldrb	r3, [r3, #0]
 8012424:	015a      	lsls	r2, r3, #5
 8012426:	693b      	ldr	r3, [r7, #16]
 8012428:	4413      	add	r3, r2
 801242a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012434:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012438:	d0e7      	beq.n	801240a <USB_EPStopXfer+0x82>
 801243a:	e048      	b.n	80124ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	781b      	ldrb	r3, [r3, #0]
 8012440:	015a      	lsls	r2, r3, #5
 8012442:	693b      	ldr	r3, [r7, #16]
 8012444:	4413      	add	r3, r2
 8012446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012450:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012454:	d13b      	bne.n	80124ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	781b      	ldrb	r3, [r3, #0]
 801245a:	015a      	lsls	r2, r3, #5
 801245c:	693b      	ldr	r3, [r7, #16]
 801245e:	4413      	add	r3, r2
 8012460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	683a      	ldr	r2, [r7, #0]
 8012468:	7812      	ldrb	r2, [r2, #0]
 801246a:	0151      	lsls	r1, r2, #5
 801246c:	693a      	ldr	r2, [r7, #16]
 801246e:	440a      	add	r2, r1
 8012470:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012474:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012478:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801247a:	683b      	ldr	r3, [r7, #0]
 801247c:	781b      	ldrb	r3, [r3, #0]
 801247e:	015a      	lsls	r2, r3, #5
 8012480:	693b      	ldr	r3, [r7, #16]
 8012482:	4413      	add	r3, r2
 8012484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	683a      	ldr	r2, [r7, #0]
 801248c:	7812      	ldrb	r2, [r2, #0]
 801248e:	0151      	lsls	r1, r2, #5
 8012490:	693a      	ldr	r2, [r7, #16]
 8012492:	440a      	add	r2, r1
 8012494:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012498:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801249c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	3301      	adds	r3, #1
 80124a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80124aa:	4293      	cmp	r3, r2
 80124ac:	d902      	bls.n	80124b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80124ae:	2301      	movs	r3, #1
 80124b0:	75fb      	strb	r3, [r7, #23]
          break;
 80124b2:	e00c      	b.n	80124ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80124b4:	683b      	ldr	r3, [r7, #0]
 80124b6:	781b      	ldrb	r3, [r3, #0]
 80124b8:	015a      	lsls	r2, r3, #5
 80124ba:	693b      	ldr	r3, [r7, #16]
 80124bc:	4413      	add	r3, r2
 80124be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80124c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80124cc:	d0e7      	beq.n	801249e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80124ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80124d0:	4618      	mov	r0, r3
 80124d2:	371c      	adds	r7, #28
 80124d4:	46bd      	mov	sp, r7
 80124d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124da:	4770      	bx	lr

080124dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80124dc:	b480      	push	{r7}
 80124de:	b089      	sub	sp, #36	@ 0x24
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	60f8      	str	r0, [r7, #12]
 80124e4:	60b9      	str	r1, [r7, #8]
 80124e6:	4611      	mov	r1, r2
 80124e8:	461a      	mov	r2, r3
 80124ea:	460b      	mov	r3, r1
 80124ec:	71fb      	strb	r3, [r7, #7]
 80124ee:	4613      	mov	r3, r2
 80124f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80124f6:	68bb      	ldr	r3, [r7, #8]
 80124f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80124fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d123      	bne.n	801254a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012502:	88bb      	ldrh	r3, [r7, #4]
 8012504:	3303      	adds	r3, #3
 8012506:	089b      	lsrs	r3, r3, #2
 8012508:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801250a:	2300      	movs	r3, #0
 801250c:	61bb      	str	r3, [r7, #24]
 801250e:	e018      	b.n	8012542 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012510:	79fb      	ldrb	r3, [r7, #7]
 8012512:	031a      	lsls	r2, r3, #12
 8012514:	697b      	ldr	r3, [r7, #20]
 8012516:	4413      	add	r3, r2
 8012518:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801251c:	461a      	mov	r2, r3
 801251e:	69fb      	ldr	r3, [r7, #28]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012524:	69fb      	ldr	r3, [r7, #28]
 8012526:	3301      	adds	r3, #1
 8012528:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801252a:	69fb      	ldr	r3, [r7, #28]
 801252c:	3301      	adds	r3, #1
 801252e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012530:	69fb      	ldr	r3, [r7, #28]
 8012532:	3301      	adds	r3, #1
 8012534:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012536:	69fb      	ldr	r3, [r7, #28]
 8012538:	3301      	adds	r3, #1
 801253a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801253c:	69bb      	ldr	r3, [r7, #24]
 801253e:	3301      	adds	r3, #1
 8012540:	61bb      	str	r3, [r7, #24]
 8012542:	69ba      	ldr	r2, [r7, #24]
 8012544:	693b      	ldr	r3, [r7, #16]
 8012546:	429a      	cmp	r2, r3
 8012548:	d3e2      	bcc.n	8012510 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801254a:	2300      	movs	r3, #0
}
 801254c:	4618      	mov	r0, r3
 801254e:	3724      	adds	r7, #36	@ 0x24
 8012550:	46bd      	mov	sp, r7
 8012552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012556:	4770      	bx	lr

08012558 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012558:	b480      	push	{r7}
 801255a:	b08b      	sub	sp, #44	@ 0x2c
 801255c:	af00      	add	r7, sp, #0
 801255e:	60f8      	str	r0, [r7, #12]
 8012560:	60b9      	str	r1, [r7, #8]
 8012562:	4613      	mov	r3, r2
 8012564:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801256a:	68bb      	ldr	r3, [r7, #8]
 801256c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801256e:	88fb      	ldrh	r3, [r7, #6]
 8012570:	089b      	lsrs	r3, r3, #2
 8012572:	b29b      	uxth	r3, r3
 8012574:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8012576:	88fb      	ldrh	r3, [r7, #6]
 8012578:	f003 0303 	and.w	r3, r3, #3
 801257c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801257e:	2300      	movs	r3, #0
 8012580:	623b      	str	r3, [r7, #32]
 8012582:	e014      	b.n	80125ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012584:	69bb      	ldr	r3, [r7, #24]
 8012586:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801258a:	681a      	ldr	r2, [r3, #0]
 801258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801258e:	601a      	str	r2, [r3, #0]
    pDest++;
 8012590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012592:	3301      	adds	r3, #1
 8012594:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8012596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012598:	3301      	adds	r3, #1
 801259a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801259e:	3301      	adds	r3, #1
 80125a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80125a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125a4:	3301      	adds	r3, #1
 80125a6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80125a8:	6a3b      	ldr	r3, [r7, #32]
 80125aa:	3301      	adds	r3, #1
 80125ac:	623b      	str	r3, [r7, #32]
 80125ae:	6a3a      	ldr	r2, [r7, #32]
 80125b0:	697b      	ldr	r3, [r7, #20]
 80125b2:	429a      	cmp	r2, r3
 80125b4:	d3e6      	bcc.n	8012584 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80125b6:	8bfb      	ldrh	r3, [r7, #30]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d01e      	beq.n	80125fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80125bc:	2300      	movs	r3, #0
 80125be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80125c0:	69bb      	ldr	r3, [r7, #24]
 80125c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80125c6:	461a      	mov	r2, r3
 80125c8:	f107 0310 	add.w	r3, r7, #16
 80125cc:	6812      	ldr	r2, [r2, #0]
 80125ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80125d0:	693a      	ldr	r2, [r7, #16]
 80125d2:	6a3b      	ldr	r3, [r7, #32]
 80125d4:	b2db      	uxtb	r3, r3
 80125d6:	00db      	lsls	r3, r3, #3
 80125d8:	fa22 f303 	lsr.w	r3, r2, r3
 80125dc:	b2da      	uxtb	r2, r3
 80125de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125e0:	701a      	strb	r2, [r3, #0]
      i++;
 80125e2:	6a3b      	ldr	r3, [r7, #32]
 80125e4:	3301      	adds	r3, #1
 80125e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80125e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125ea:	3301      	adds	r3, #1
 80125ec:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80125ee:	8bfb      	ldrh	r3, [r7, #30]
 80125f0:	3b01      	subs	r3, #1
 80125f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80125f4:	8bfb      	ldrh	r3, [r7, #30]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d1ea      	bne.n	80125d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80125fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80125fc:	4618      	mov	r0, r3
 80125fe:	372c      	adds	r7, #44	@ 0x2c
 8012600:	46bd      	mov	sp, r7
 8012602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012606:	4770      	bx	lr

08012608 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012608:	b480      	push	{r7}
 801260a:	b085      	sub	sp, #20
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
 8012610:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	781b      	ldrb	r3, [r3, #0]
 801261a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801261c:	683b      	ldr	r3, [r7, #0]
 801261e:	785b      	ldrb	r3, [r3, #1]
 8012620:	2b01      	cmp	r3, #1
 8012622:	d12c      	bne.n	801267e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012624:	68bb      	ldr	r3, [r7, #8]
 8012626:	015a      	lsls	r2, r3, #5
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	4413      	add	r3, r2
 801262c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	2b00      	cmp	r3, #0
 8012634:	db12      	blt.n	801265c <USB_EPSetStall+0x54>
 8012636:	68bb      	ldr	r3, [r7, #8]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d00f      	beq.n	801265c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	015a      	lsls	r2, r3, #5
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	4413      	add	r3, r2
 8012644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	68ba      	ldr	r2, [r7, #8]
 801264c:	0151      	lsls	r1, r2, #5
 801264e:	68fa      	ldr	r2, [r7, #12]
 8012650:	440a      	add	r2, r1
 8012652:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012656:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801265a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801265c:	68bb      	ldr	r3, [r7, #8]
 801265e:	015a      	lsls	r2, r3, #5
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	4413      	add	r3, r2
 8012664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	68ba      	ldr	r2, [r7, #8]
 801266c:	0151      	lsls	r1, r2, #5
 801266e:	68fa      	ldr	r2, [r7, #12]
 8012670:	440a      	add	r2, r1
 8012672:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012676:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801267a:	6013      	str	r3, [r2, #0]
 801267c:	e02b      	b.n	80126d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801267e:	68bb      	ldr	r3, [r7, #8]
 8012680:	015a      	lsls	r2, r3, #5
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	4413      	add	r3, r2
 8012686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	2b00      	cmp	r3, #0
 801268e:	db12      	blt.n	80126b6 <USB_EPSetStall+0xae>
 8012690:	68bb      	ldr	r3, [r7, #8]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d00f      	beq.n	80126b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	015a      	lsls	r2, r3, #5
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	4413      	add	r3, r2
 801269e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	68ba      	ldr	r2, [r7, #8]
 80126a6:	0151      	lsls	r1, r2, #5
 80126a8:	68fa      	ldr	r2, [r7, #12]
 80126aa:	440a      	add	r2, r1
 80126ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80126b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80126b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80126b6:	68bb      	ldr	r3, [r7, #8]
 80126b8:	015a      	lsls	r2, r3, #5
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	4413      	add	r3, r2
 80126be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	68ba      	ldr	r2, [r7, #8]
 80126c6:	0151      	lsls	r1, r2, #5
 80126c8:	68fa      	ldr	r2, [r7, #12]
 80126ca:	440a      	add	r2, r1
 80126cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80126d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80126d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80126d6:	2300      	movs	r3, #0
}
 80126d8:	4618      	mov	r0, r3
 80126da:	3714      	adds	r7, #20
 80126dc:	46bd      	mov	sp, r7
 80126de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e2:	4770      	bx	lr

080126e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80126e4:	b480      	push	{r7}
 80126e6:	b085      	sub	sp, #20
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
 80126ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	781b      	ldrb	r3, [r3, #0]
 80126f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	785b      	ldrb	r3, [r3, #1]
 80126fc:	2b01      	cmp	r3, #1
 80126fe:	d128      	bne.n	8012752 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012700:	68bb      	ldr	r3, [r7, #8]
 8012702:	015a      	lsls	r2, r3, #5
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	4413      	add	r3, r2
 8012708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	68ba      	ldr	r2, [r7, #8]
 8012710:	0151      	lsls	r1, r2, #5
 8012712:	68fa      	ldr	r2, [r7, #12]
 8012714:	440a      	add	r2, r1
 8012716:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801271a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801271e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	791b      	ldrb	r3, [r3, #4]
 8012724:	2b03      	cmp	r3, #3
 8012726:	d003      	beq.n	8012730 <USB_EPClearStall+0x4c>
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	791b      	ldrb	r3, [r3, #4]
 801272c:	2b02      	cmp	r3, #2
 801272e:	d138      	bne.n	80127a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012730:	68bb      	ldr	r3, [r7, #8]
 8012732:	015a      	lsls	r2, r3, #5
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	4413      	add	r3, r2
 8012738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	68ba      	ldr	r2, [r7, #8]
 8012740:	0151      	lsls	r1, r2, #5
 8012742:	68fa      	ldr	r2, [r7, #12]
 8012744:	440a      	add	r2, r1
 8012746:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801274a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801274e:	6013      	str	r3, [r2, #0]
 8012750:	e027      	b.n	80127a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012752:	68bb      	ldr	r3, [r7, #8]
 8012754:	015a      	lsls	r2, r3, #5
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	4413      	add	r3, r2
 801275a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	68ba      	ldr	r2, [r7, #8]
 8012762:	0151      	lsls	r1, r2, #5
 8012764:	68fa      	ldr	r2, [r7, #12]
 8012766:	440a      	add	r2, r1
 8012768:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801276c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8012770:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	791b      	ldrb	r3, [r3, #4]
 8012776:	2b03      	cmp	r3, #3
 8012778:	d003      	beq.n	8012782 <USB_EPClearStall+0x9e>
 801277a:	683b      	ldr	r3, [r7, #0]
 801277c:	791b      	ldrb	r3, [r3, #4]
 801277e:	2b02      	cmp	r3, #2
 8012780:	d10f      	bne.n	80127a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012782:	68bb      	ldr	r3, [r7, #8]
 8012784:	015a      	lsls	r2, r3, #5
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	4413      	add	r3, r2
 801278a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	68ba      	ldr	r2, [r7, #8]
 8012792:	0151      	lsls	r1, r2, #5
 8012794:	68fa      	ldr	r2, [r7, #12]
 8012796:	440a      	add	r2, r1
 8012798:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801279c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80127a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80127a2:	2300      	movs	r3, #0
}
 80127a4:	4618      	mov	r0, r3
 80127a6:	3714      	adds	r7, #20
 80127a8:	46bd      	mov	sp, r7
 80127aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ae:	4770      	bx	lr

080127b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80127b0:	b480      	push	{r7}
 80127b2:	b085      	sub	sp, #20
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
 80127b8:	460b      	mov	r3, r1
 80127ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	68fa      	ldr	r2, [r7, #12]
 80127ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80127ce:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80127d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80127da:	681a      	ldr	r2, [r3, #0]
 80127dc:	78fb      	ldrb	r3, [r7, #3]
 80127de:	011b      	lsls	r3, r3, #4
 80127e0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80127e4:	68f9      	ldr	r1, [r7, #12]
 80127e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80127ea:	4313      	orrs	r3, r2
 80127ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80127ee:	2300      	movs	r3, #0
}
 80127f0:	4618      	mov	r0, r3
 80127f2:	3714      	adds	r7, #20
 80127f4:	46bd      	mov	sp, r7
 80127f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fa:	4770      	bx	lr

080127fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80127fc:	b480      	push	{r7}
 80127fe:	b085      	sub	sp, #20
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	68fa      	ldr	r2, [r7, #12]
 8012812:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012816:	f023 0303 	bic.w	r3, r3, #3
 801281a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012822:	685b      	ldr	r3, [r3, #4]
 8012824:	68fa      	ldr	r2, [r7, #12]
 8012826:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801282a:	f023 0302 	bic.w	r3, r3, #2
 801282e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012830:	2300      	movs	r3, #0
}
 8012832:	4618      	mov	r0, r3
 8012834:	3714      	adds	r7, #20
 8012836:	46bd      	mov	sp, r7
 8012838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283c:	4770      	bx	lr

0801283e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801283e:	b480      	push	{r7}
 8012840:	b085      	sub	sp, #20
 8012842:	af00      	add	r7, sp, #0
 8012844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	68fa      	ldr	r2, [r7, #12]
 8012854:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012858:	f023 0303 	bic.w	r3, r3, #3
 801285c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012864:	685b      	ldr	r3, [r3, #4]
 8012866:	68fa      	ldr	r2, [r7, #12]
 8012868:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801286c:	f043 0302 	orr.w	r3, r3, #2
 8012870:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012872:	2300      	movs	r3, #0
}
 8012874:	4618      	mov	r0, r3
 8012876:	3714      	adds	r7, #20
 8012878:	46bd      	mov	sp, r7
 801287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287e:	4770      	bx	lr

08012880 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8012880:	b480      	push	{r7}
 8012882:	b085      	sub	sp, #20
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	695b      	ldr	r3, [r3, #20]
 801288c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	699b      	ldr	r3, [r3, #24]
 8012892:	68fa      	ldr	r2, [r7, #12]
 8012894:	4013      	ands	r3, r2
 8012896:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012898:	68fb      	ldr	r3, [r7, #12]
}
 801289a:	4618      	mov	r0, r3
 801289c:	3714      	adds	r7, #20
 801289e:	46bd      	mov	sp, r7
 80128a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a4:	4770      	bx	lr

080128a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80128a6:	b480      	push	{r7}
 80128a8:	b085      	sub	sp, #20
 80128aa:	af00      	add	r7, sp, #0
 80128ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80128b8:	699b      	ldr	r3, [r3, #24]
 80128ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80128c2:	69db      	ldr	r3, [r3, #28]
 80128c4:	68ba      	ldr	r2, [r7, #8]
 80128c6:	4013      	ands	r3, r2
 80128c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	0c1b      	lsrs	r3, r3, #16
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	3714      	adds	r7, #20
 80128d2:	46bd      	mov	sp, r7
 80128d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d8:	4770      	bx	lr

080128da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80128da:	b480      	push	{r7}
 80128dc:	b085      	sub	sp, #20
 80128de:	af00      	add	r7, sp, #0
 80128e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80128ec:	699b      	ldr	r3, [r3, #24]
 80128ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80128f6:	69db      	ldr	r3, [r3, #28]
 80128f8:	68ba      	ldr	r2, [r7, #8]
 80128fa:	4013      	ands	r3, r2
 80128fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	b29b      	uxth	r3, r3
}
 8012902:	4618      	mov	r0, r3
 8012904:	3714      	adds	r7, #20
 8012906:	46bd      	mov	sp, r7
 8012908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290c:	4770      	bx	lr

0801290e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801290e:	b480      	push	{r7}
 8012910:	b085      	sub	sp, #20
 8012912:	af00      	add	r7, sp, #0
 8012914:	6078      	str	r0, [r7, #4]
 8012916:	460b      	mov	r3, r1
 8012918:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801291e:	78fb      	ldrb	r3, [r7, #3]
 8012920:	015a      	lsls	r2, r3, #5
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	4413      	add	r3, r2
 8012926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801292a:	689b      	ldr	r3, [r3, #8]
 801292c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012934:	695b      	ldr	r3, [r3, #20]
 8012936:	68ba      	ldr	r2, [r7, #8]
 8012938:	4013      	ands	r3, r2
 801293a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801293c:	68bb      	ldr	r3, [r7, #8]
}
 801293e:	4618      	mov	r0, r3
 8012940:	3714      	adds	r7, #20
 8012942:	46bd      	mov	sp, r7
 8012944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012948:	4770      	bx	lr

0801294a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801294a:	b480      	push	{r7}
 801294c:	b087      	sub	sp, #28
 801294e:	af00      	add	r7, sp, #0
 8012950:	6078      	str	r0, [r7, #4]
 8012952:	460b      	mov	r3, r1
 8012954:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801295a:	697b      	ldr	r3, [r7, #20]
 801295c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012960:	691b      	ldr	r3, [r3, #16]
 8012962:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012964:	697b      	ldr	r3, [r7, #20]
 8012966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801296a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801296c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801296e:	78fb      	ldrb	r3, [r7, #3]
 8012970:	f003 030f 	and.w	r3, r3, #15
 8012974:	68fa      	ldr	r2, [r7, #12]
 8012976:	fa22 f303 	lsr.w	r3, r2, r3
 801297a:	01db      	lsls	r3, r3, #7
 801297c:	b2db      	uxtb	r3, r3
 801297e:	693a      	ldr	r2, [r7, #16]
 8012980:	4313      	orrs	r3, r2
 8012982:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012984:	78fb      	ldrb	r3, [r7, #3]
 8012986:	015a      	lsls	r2, r3, #5
 8012988:	697b      	ldr	r3, [r7, #20]
 801298a:	4413      	add	r3, r2
 801298c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012990:	689b      	ldr	r3, [r3, #8]
 8012992:	693a      	ldr	r2, [r7, #16]
 8012994:	4013      	ands	r3, r2
 8012996:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012998:	68bb      	ldr	r3, [r7, #8]
}
 801299a:	4618      	mov	r0, r3
 801299c:	371c      	adds	r7, #28
 801299e:	46bd      	mov	sp, r7
 80129a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a4:	4770      	bx	lr

080129a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80129a6:	b480      	push	{r7}
 80129a8:	b083      	sub	sp, #12
 80129aa:	af00      	add	r7, sp, #0
 80129ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	695b      	ldr	r3, [r3, #20]
 80129b2:	f003 0301 	and.w	r3, r3, #1
}
 80129b6:	4618      	mov	r0, r3
 80129b8:	370c      	adds	r7, #12
 80129ba:	46bd      	mov	sp, r7
 80129bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c0:	4770      	bx	lr
	...

080129c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80129c4:	b480      	push	{r7}
 80129c6:	b085      	sub	sp, #20
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80129d6:	681a      	ldr	r2, [r3, #0]
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80129de:	4619      	mov	r1, r3
 80129e0:	4b09      	ldr	r3, [pc, #36]	@ (8012a08 <USB_ActivateSetup+0x44>)
 80129e2:	4013      	ands	r3, r2
 80129e4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80129ec:	685b      	ldr	r3, [r3, #4]
 80129ee:	68fa      	ldr	r2, [r7, #12]
 80129f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80129f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80129f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80129fa:	2300      	movs	r3, #0
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	3714      	adds	r7, #20
 8012a00:	46bd      	mov	sp, r7
 8012a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a06:	4770      	bx	lr
 8012a08:	fffff800 	.word	0xfffff800

08012a0c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8012a0c:	b480      	push	{r7}
 8012a0e:	b087      	sub	sp, #28
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	60f8      	str	r0, [r7, #12]
 8012a14:	460b      	mov	r3, r1
 8012a16:	607a      	str	r2, [r7, #4]
 8012a18:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	333c      	adds	r3, #60	@ 0x3c
 8012a22:	3304      	adds	r3, #4
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012a28:	693b      	ldr	r3, [r7, #16]
 8012a2a:	4a26      	ldr	r2, [pc, #152]	@ (8012ac4 <USB_EP0_OutStart+0xb8>)
 8012a2c:	4293      	cmp	r3, r2
 8012a2e:	d90a      	bls.n	8012a46 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012a30:	697b      	ldr	r3, [r7, #20]
 8012a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012a40:	d101      	bne.n	8012a46 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8012a42:	2300      	movs	r3, #0
 8012a44:	e037      	b.n	8012ab6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a4c:	461a      	mov	r2, r3
 8012a4e:	2300      	movs	r3, #0
 8012a50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012a52:	697b      	ldr	r3, [r7, #20]
 8012a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a58:	691b      	ldr	r3, [r3, #16]
 8012a5a:	697a      	ldr	r2, [r7, #20]
 8012a5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012a60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012a64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012a66:	697b      	ldr	r3, [r7, #20]
 8012a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a6c:	691b      	ldr	r3, [r3, #16]
 8012a6e:	697a      	ldr	r2, [r7, #20]
 8012a70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012a74:	f043 0318 	orr.w	r3, r3, #24
 8012a78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012a7a:	697b      	ldr	r3, [r7, #20]
 8012a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a80:	691b      	ldr	r3, [r3, #16]
 8012a82:	697a      	ldr	r2, [r7, #20]
 8012a84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012a88:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8012a8c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8012a8e:	7afb      	ldrb	r3, [r7, #11]
 8012a90:	2b01      	cmp	r3, #1
 8012a92:	d10f      	bne.n	8012ab4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012a94:	697b      	ldr	r3, [r7, #20]
 8012a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a9a:	461a      	mov	r2, r3
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	697a      	ldr	r2, [r7, #20]
 8012aaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012aae:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8012ab2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012ab4:	2300      	movs	r3, #0
}
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	371c      	adds	r7, #28
 8012aba:	46bd      	mov	sp, r7
 8012abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac0:	4770      	bx	lr
 8012ac2:	bf00      	nop
 8012ac4:	4f54300a 	.word	0x4f54300a

08012ac8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012ac8:	b480      	push	{r7}
 8012aca:	b085      	sub	sp, #20
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	3301      	adds	r3, #1
 8012ad8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012ae0:	d901      	bls.n	8012ae6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012ae2:	2303      	movs	r3, #3
 8012ae4:	e01b      	b.n	8012b1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	691b      	ldr	r3, [r3, #16]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	daf2      	bge.n	8012ad4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012aee:	2300      	movs	r3, #0
 8012af0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	691b      	ldr	r3, [r3, #16]
 8012af6:	f043 0201 	orr.w	r2, r3, #1
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	3301      	adds	r3, #1
 8012b02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012b0a:	d901      	bls.n	8012b10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012b0c:	2303      	movs	r3, #3
 8012b0e:	e006      	b.n	8012b1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	691b      	ldr	r3, [r3, #16]
 8012b14:	f003 0301 	and.w	r3, r3, #1
 8012b18:	2b01      	cmp	r3, #1
 8012b1a:	d0f0      	beq.n	8012afe <USB_CoreReset+0x36>

  return HAL_OK;
 8012b1c:	2300      	movs	r3, #0
}
 8012b1e:	4618      	mov	r0, r3
 8012b20:	3714      	adds	r7, #20
 8012b22:	46bd      	mov	sp, r7
 8012b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b28:	4770      	bx	lr
	...

08012b2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b084      	sub	sp, #16
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
 8012b34:	460b      	mov	r3, r1
 8012b36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012b38:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8012b3c:	f002 fd08 	bl	8015550 <USBD_static_malloc>
 8012b40:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d109      	bne.n	8012b5c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	32b0      	adds	r2, #176	@ 0xb0
 8012b52:	2100      	movs	r1, #0
 8012b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012b58:	2302      	movs	r3, #2
 8012b5a:	e0d4      	b.n	8012d06 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012b5c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8012b60:	2100      	movs	r1, #0
 8012b62:	68f8      	ldr	r0, [r7, #12]
 8012b64:	f002 fd5a 	bl	801561c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	32b0      	adds	r2, #176	@ 0xb0
 8012b72:	68f9      	ldr	r1, [r7, #12]
 8012b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	32b0      	adds	r2, #176	@ 0xb0
 8012b82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	7c1b      	ldrb	r3, [r3, #16]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d138      	bne.n	8012c06 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012b94:	4b5e      	ldr	r3, [pc, #376]	@ (8012d10 <USBD_CDC_Init+0x1e4>)
 8012b96:	7819      	ldrb	r1, [r3, #0]
 8012b98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012b9c:	2202      	movs	r2, #2
 8012b9e:	6878      	ldr	r0, [r7, #4]
 8012ba0:	f002 fbb3 	bl	801530a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012ba4:	4b5a      	ldr	r3, [pc, #360]	@ (8012d10 <USBD_CDC_Init+0x1e4>)
 8012ba6:	781b      	ldrb	r3, [r3, #0]
 8012ba8:	f003 020f 	and.w	r2, r3, #15
 8012bac:	6879      	ldr	r1, [r7, #4]
 8012bae:	4613      	mov	r3, r2
 8012bb0:	009b      	lsls	r3, r3, #2
 8012bb2:	4413      	add	r3, r2
 8012bb4:	009b      	lsls	r3, r3, #2
 8012bb6:	440b      	add	r3, r1
 8012bb8:	3324      	adds	r3, #36	@ 0x24
 8012bba:	2201      	movs	r2, #1
 8012bbc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012bbe:	4b55      	ldr	r3, [pc, #340]	@ (8012d14 <USBD_CDC_Init+0x1e8>)
 8012bc0:	7819      	ldrb	r1, [r3, #0]
 8012bc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012bc6:	2202      	movs	r2, #2
 8012bc8:	6878      	ldr	r0, [r7, #4]
 8012bca:	f002 fb9e 	bl	801530a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012bce:	4b51      	ldr	r3, [pc, #324]	@ (8012d14 <USBD_CDC_Init+0x1e8>)
 8012bd0:	781b      	ldrb	r3, [r3, #0]
 8012bd2:	f003 020f 	and.w	r2, r3, #15
 8012bd6:	6879      	ldr	r1, [r7, #4]
 8012bd8:	4613      	mov	r3, r2
 8012bda:	009b      	lsls	r3, r3, #2
 8012bdc:	4413      	add	r3, r2
 8012bde:	009b      	lsls	r3, r3, #2
 8012be0:	440b      	add	r3, r1
 8012be2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012be6:	2201      	movs	r2, #1
 8012be8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012bea:	4b4b      	ldr	r3, [pc, #300]	@ (8012d18 <USBD_CDC_Init+0x1ec>)
 8012bec:	781b      	ldrb	r3, [r3, #0]
 8012bee:	f003 020f 	and.w	r2, r3, #15
 8012bf2:	6879      	ldr	r1, [r7, #4]
 8012bf4:	4613      	mov	r3, r2
 8012bf6:	009b      	lsls	r3, r3, #2
 8012bf8:	4413      	add	r3, r2
 8012bfa:	009b      	lsls	r3, r3, #2
 8012bfc:	440b      	add	r3, r1
 8012bfe:	3326      	adds	r3, #38	@ 0x26
 8012c00:	2210      	movs	r2, #16
 8012c02:	801a      	strh	r2, [r3, #0]
 8012c04:	e035      	b.n	8012c72 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012c06:	4b42      	ldr	r3, [pc, #264]	@ (8012d10 <USBD_CDC_Init+0x1e4>)
 8012c08:	7819      	ldrb	r1, [r3, #0]
 8012c0a:	2340      	movs	r3, #64	@ 0x40
 8012c0c:	2202      	movs	r2, #2
 8012c0e:	6878      	ldr	r0, [r7, #4]
 8012c10:	f002 fb7b 	bl	801530a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012c14:	4b3e      	ldr	r3, [pc, #248]	@ (8012d10 <USBD_CDC_Init+0x1e4>)
 8012c16:	781b      	ldrb	r3, [r3, #0]
 8012c18:	f003 020f 	and.w	r2, r3, #15
 8012c1c:	6879      	ldr	r1, [r7, #4]
 8012c1e:	4613      	mov	r3, r2
 8012c20:	009b      	lsls	r3, r3, #2
 8012c22:	4413      	add	r3, r2
 8012c24:	009b      	lsls	r3, r3, #2
 8012c26:	440b      	add	r3, r1
 8012c28:	3324      	adds	r3, #36	@ 0x24
 8012c2a:	2201      	movs	r2, #1
 8012c2c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012c2e:	4b39      	ldr	r3, [pc, #228]	@ (8012d14 <USBD_CDC_Init+0x1e8>)
 8012c30:	7819      	ldrb	r1, [r3, #0]
 8012c32:	2340      	movs	r3, #64	@ 0x40
 8012c34:	2202      	movs	r2, #2
 8012c36:	6878      	ldr	r0, [r7, #4]
 8012c38:	f002 fb67 	bl	801530a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012c3c:	4b35      	ldr	r3, [pc, #212]	@ (8012d14 <USBD_CDC_Init+0x1e8>)
 8012c3e:	781b      	ldrb	r3, [r3, #0]
 8012c40:	f003 020f 	and.w	r2, r3, #15
 8012c44:	6879      	ldr	r1, [r7, #4]
 8012c46:	4613      	mov	r3, r2
 8012c48:	009b      	lsls	r3, r3, #2
 8012c4a:	4413      	add	r3, r2
 8012c4c:	009b      	lsls	r3, r3, #2
 8012c4e:	440b      	add	r3, r1
 8012c50:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012c54:	2201      	movs	r2, #1
 8012c56:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012c58:	4b2f      	ldr	r3, [pc, #188]	@ (8012d18 <USBD_CDC_Init+0x1ec>)
 8012c5a:	781b      	ldrb	r3, [r3, #0]
 8012c5c:	f003 020f 	and.w	r2, r3, #15
 8012c60:	6879      	ldr	r1, [r7, #4]
 8012c62:	4613      	mov	r3, r2
 8012c64:	009b      	lsls	r3, r3, #2
 8012c66:	4413      	add	r3, r2
 8012c68:	009b      	lsls	r3, r3, #2
 8012c6a:	440b      	add	r3, r1
 8012c6c:	3326      	adds	r3, #38	@ 0x26
 8012c6e:	2210      	movs	r2, #16
 8012c70:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012c72:	4b29      	ldr	r3, [pc, #164]	@ (8012d18 <USBD_CDC_Init+0x1ec>)
 8012c74:	7819      	ldrb	r1, [r3, #0]
 8012c76:	2308      	movs	r3, #8
 8012c78:	2203      	movs	r2, #3
 8012c7a:	6878      	ldr	r0, [r7, #4]
 8012c7c:	f002 fb45 	bl	801530a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012c80:	4b25      	ldr	r3, [pc, #148]	@ (8012d18 <USBD_CDC_Init+0x1ec>)
 8012c82:	781b      	ldrb	r3, [r3, #0]
 8012c84:	f003 020f 	and.w	r2, r3, #15
 8012c88:	6879      	ldr	r1, [r7, #4]
 8012c8a:	4613      	mov	r3, r2
 8012c8c:	009b      	lsls	r3, r3, #2
 8012c8e:	4413      	add	r3, r2
 8012c90:	009b      	lsls	r3, r3, #2
 8012c92:	440b      	add	r3, r1
 8012c94:	3324      	adds	r3, #36	@ 0x24
 8012c96:	2201      	movs	r2, #1
 8012c98:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012ca8:	687a      	ldr	r2, [r7, #4]
 8012caa:	33b0      	adds	r3, #176	@ 0xb0
 8012cac:	009b      	lsls	r3, r3, #2
 8012cae:	4413      	add	r3, r2
 8012cb0:	685b      	ldr	r3, [r3, #4]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	2200      	movs	r2, #0
 8012cba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d101      	bne.n	8012cd4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8012cd0:	2302      	movs	r3, #2
 8012cd2:	e018      	b.n	8012d06 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	7c1b      	ldrb	r3, [r3, #16]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d10a      	bne.n	8012cf2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8012d14 <USBD_CDC_Init+0x1e8>)
 8012cde:	7819      	ldrb	r1, [r3, #0]
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012ce6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012cea:	6878      	ldr	r0, [r7, #4]
 8012cec:	f002 fbfc 	bl	80154e8 <USBD_LL_PrepareReceive>
 8012cf0:	e008      	b.n	8012d04 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012cf2:	4b08      	ldr	r3, [pc, #32]	@ (8012d14 <USBD_CDC_Init+0x1e8>)
 8012cf4:	7819      	ldrb	r1, [r3, #0]
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012cfc:	2340      	movs	r3, #64	@ 0x40
 8012cfe:	6878      	ldr	r0, [r7, #4]
 8012d00:	f002 fbf2 	bl	80154e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012d04:	2300      	movs	r3, #0
}
 8012d06:	4618      	mov	r0, r3
 8012d08:	3710      	adds	r7, #16
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	bd80      	pop	{r7, pc}
 8012d0e:	bf00      	nop
 8012d10:	2400009f 	.word	0x2400009f
 8012d14:	240000a0 	.word	0x240000a0
 8012d18:	240000a1 	.word	0x240000a1

08012d1c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b082      	sub	sp, #8
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
 8012d24:	460b      	mov	r3, r1
 8012d26:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8012d28:	4b3a      	ldr	r3, [pc, #232]	@ (8012e14 <USBD_CDC_DeInit+0xf8>)
 8012d2a:	781b      	ldrb	r3, [r3, #0]
 8012d2c:	4619      	mov	r1, r3
 8012d2e:	6878      	ldr	r0, [r7, #4]
 8012d30:	f002 fb11 	bl	8015356 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8012d34:	4b37      	ldr	r3, [pc, #220]	@ (8012e14 <USBD_CDC_DeInit+0xf8>)
 8012d36:	781b      	ldrb	r3, [r3, #0]
 8012d38:	f003 020f 	and.w	r2, r3, #15
 8012d3c:	6879      	ldr	r1, [r7, #4]
 8012d3e:	4613      	mov	r3, r2
 8012d40:	009b      	lsls	r3, r3, #2
 8012d42:	4413      	add	r3, r2
 8012d44:	009b      	lsls	r3, r3, #2
 8012d46:	440b      	add	r3, r1
 8012d48:	3324      	adds	r3, #36	@ 0x24
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8012d4e:	4b32      	ldr	r3, [pc, #200]	@ (8012e18 <USBD_CDC_DeInit+0xfc>)
 8012d50:	781b      	ldrb	r3, [r3, #0]
 8012d52:	4619      	mov	r1, r3
 8012d54:	6878      	ldr	r0, [r7, #4]
 8012d56:	f002 fafe 	bl	8015356 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8012d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8012e18 <USBD_CDC_DeInit+0xfc>)
 8012d5c:	781b      	ldrb	r3, [r3, #0]
 8012d5e:	f003 020f 	and.w	r2, r3, #15
 8012d62:	6879      	ldr	r1, [r7, #4]
 8012d64:	4613      	mov	r3, r2
 8012d66:	009b      	lsls	r3, r3, #2
 8012d68:	4413      	add	r3, r2
 8012d6a:	009b      	lsls	r3, r3, #2
 8012d6c:	440b      	add	r3, r1
 8012d6e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012d72:	2200      	movs	r2, #0
 8012d74:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8012d76:	4b29      	ldr	r3, [pc, #164]	@ (8012e1c <USBD_CDC_DeInit+0x100>)
 8012d78:	781b      	ldrb	r3, [r3, #0]
 8012d7a:	4619      	mov	r1, r3
 8012d7c:	6878      	ldr	r0, [r7, #4]
 8012d7e:	f002 faea 	bl	8015356 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8012d82:	4b26      	ldr	r3, [pc, #152]	@ (8012e1c <USBD_CDC_DeInit+0x100>)
 8012d84:	781b      	ldrb	r3, [r3, #0]
 8012d86:	f003 020f 	and.w	r2, r3, #15
 8012d8a:	6879      	ldr	r1, [r7, #4]
 8012d8c:	4613      	mov	r3, r2
 8012d8e:	009b      	lsls	r3, r3, #2
 8012d90:	4413      	add	r3, r2
 8012d92:	009b      	lsls	r3, r3, #2
 8012d94:	440b      	add	r3, r1
 8012d96:	3324      	adds	r3, #36	@ 0x24
 8012d98:	2200      	movs	r2, #0
 8012d9a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8012d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8012e1c <USBD_CDC_DeInit+0x100>)
 8012d9e:	781b      	ldrb	r3, [r3, #0]
 8012da0:	f003 020f 	and.w	r2, r3, #15
 8012da4:	6879      	ldr	r1, [r7, #4]
 8012da6:	4613      	mov	r3, r2
 8012da8:	009b      	lsls	r3, r3, #2
 8012daa:	4413      	add	r3, r2
 8012dac:	009b      	lsls	r3, r3, #2
 8012dae:	440b      	add	r3, r1
 8012db0:	3326      	adds	r3, #38	@ 0x26
 8012db2:	2200      	movs	r2, #0
 8012db4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	32b0      	adds	r2, #176	@ 0xb0
 8012dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d01f      	beq.n	8012e08 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012dce:	687a      	ldr	r2, [r7, #4]
 8012dd0:	33b0      	adds	r3, #176	@ 0xb0
 8012dd2:	009b      	lsls	r3, r3, #2
 8012dd4:	4413      	add	r3, r2
 8012dd6:	685b      	ldr	r3, [r3, #4]
 8012dd8:	685b      	ldr	r3, [r3, #4]
 8012dda:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	32b0      	adds	r2, #176	@ 0xb0
 8012de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dea:	4618      	mov	r0, r3
 8012dec:	f002 fbbe 	bl	801556c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	32b0      	adds	r2, #176	@ 0xb0
 8012dfa:	2100      	movs	r1, #0
 8012dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	2200      	movs	r2, #0
 8012e04:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012e08:	2300      	movs	r3, #0
}
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	3708      	adds	r7, #8
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	bd80      	pop	{r7, pc}
 8012e12:	bf00      	nop
 8012e14:	2400009f 	.word	0x2400009f
 8012e18:	240000a0 	.word	0x240000a0
 8012e1c:	240000a1 	.word	0x240000a1

08012e20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b086      	sub	sp, #24
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
 8012e28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	32b0      	adds	r2, #176	@ 0xb0
 8012e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e38:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012e3e:	2300      	movs	r3, #0
 8012e40:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012e42:	2300      	movs	r3, #0
 8012e44:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012e46:	693b      	ldr	r3, [r7, #16]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d101      	bne.n	8012e50 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8012e4c:	2303      	movs	r3, #3
 8012e4e:	e0bf      	b.n	8012fd0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	781b      	ldrb	r3, [r3, #0]
 8012e54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d050      	beq.n	8012efe <USBD_CDC_Setup+0xde>
 8012e5c:	2b20      	cmp	r3, #32
 8012e5e:	f040 80af 	bne.w	8012fc0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012e62:	683b      	ldr	r3, [r7, #0]
 8012e64:	88db      	ldrh	r3, [r3, #6]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d03a      	beq.n	8012ee0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	781b      	ldrb	r3, [r3, #0]
 8012e6e:	b25b      	sxtb	r3, r3
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	da1b      	bge.n	8012eac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012e7a:	687a      	ldr	r2, [r7, #4]
 8012e7c:	33b0      	adds	r3, #176	@ 0xb0
 8012e7e:	009b      	lsls	r3, r3, #2
 8012e80:	4413      	add	r3, r2
 8012e82:	685b      	ldr	r3, [r3, #4]
 8012e84:	689b      	ldr	r3, [r3, #8]
 8012e86:	683a      	ldr	r2, [r7, #0]
 8012e88:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8012e8a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012e8c:	683a      	ldr	r2, [r7, #0]
 8012e8e:	88d2      	ldrh	r2, [r2, #6]
 8012e90:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	88db      	ldrh	r3, [r3, #6]
 8012e96:	2b07      	cmp	r3, #7
 8012e98:	bf28      	it	cs
 8012e9a:	2307      	movcs	r3, #7
 8012e9c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012e9e:	693b      	ldr	r3, [r7, #16]
 8012ea0:	89fa      	ldrh	r2, [r7, #14]
 8012ea2:	4619      	mov	r1, r3
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f001 fdbd 	bl	8014a24 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8012eaa:	e090      	b.n	8012fce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	785a      	ldrb	r2, [r3, #1]
 8012eb0:	693b      	ldr	r3, [r7, #16]
 8012eb2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	88db      	ldrh	r3, [r3, #6]
 8012eba:	2b3f      	cmp	r3, #63	@ 0x3f
 8012ebc:	d803      	bhi.n	8012ec6 <USBD_CDC_Setup+0xa6>
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	88db      	ldrh	r3, [r3, #6]
 8012ec2:	b2da      	uxtb	r2, r3
 8012ec4:	e000      	b.n	8012ec8 <USBD_CDC_Setup+0xa8>
 8012ec6:	2240      	movs	r2, #64	@ 0x40
 8012ec8:	693b      	ldr	r3, [r7, #16]
 8012eca:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8012ece:	6939      	ldr	r1, [r7, #16]
 8012ed0:	693b      	ldr	r3, [r7, #16]
 8012ed2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8012ed6:	461a      	mov	r2, r3
 8012ed8:	6878      	ldr	r0, [r7, #4]
 8012eda:	f001 fdcf 	bl	8014a7c <USBD_CtlPrepareRx>
      break;
 8012ede:	e076      	b.n	8012fce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012ee6:	687a      	ldr	r2, [r7, #4]
 8012ee8:	33b0      	adds	r3, #176	@ 0xb0
 8012eea:	009b      	lsls	r3, r3, #2
 8012eec:	4413      	add	r3, r2
 8012eee:	685b      	ldr	r3, [r3, #4]
 8012ef0:	689b      	ldr	r3, [r3, #8]
 8012ef2:	683a      	ldr	r2, [r7, #0]
 8012ef4:	7850      	ldrb	r0, [r2, #1]
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	6839      	ldr	r1, [r7, #0]
 8012efa:	4798      	blx	r3
      break;
 8012efc:	e067      	b.n	8012fce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012efe:	683b      	ldr	r3, [r7, #0]
 8012f00:	785b      	ldrb	r3, [r3, #1]
 8012f02:	2b0b      	cmp	r3, #11
 8012f04:	d851      	bhi.n	8012faa <USBD_CDC_Setup+0x18a>
 8012f06:	a201      	add	r2, pc, #4	@ (adr r2, 8012f0c <USBD_CDC_Setup+0xec>)
 8012f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f0c:	08012f3d 	.word	0x08012f3d
 8012f10:	08012fb9 	.word	0x08012fb9
 8012f14:	08012fab 	.word	0x08012fab
 8012f18:	08012fab 	.word	0x08012fab
 8012f1c:	08012fab 	.word	0x08012fab
 8012f20:	08012fab 	.word	0x08012fab
 8012f24:	08012fab 	.word	0x08012fab
 8012f28:	08012fab 	.word	0x08012fab
 8012f2c:	08012fab 	.word	0x08012fab
 8012f30:	08012fab 	.word	0x08012fab
 8012f34:	08012f67 	.word	0x08012f67
 8012f38:	08012f91 	.word	0x08012f91
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f42:	b2db      	uxtb	r3, r3
 8012f44:	2b03      	cmp	r3, #3
 8012f46:	d107      	bne.n	8012f58 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012f48:	f107 030a 	add.w	r3, r7, #10
 8012f4c:	2202      	movs	r2, #2
 8012f4e:	4619      	mov	r1, r3
 8012f50:	6878      	ldr	r0, [r7, #4]
 8012f52:	f001 fd67 	bl	8014a24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012f56:	e032      	b.n	8012fbe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012f58:	6839      	ldr	r1, [r7, #0]
 8012f5a:	6878      	ldr	r0, [r7, #4]
 8012f5c:	f001 fce5 	bl	801492a <USBD_CtlError>
            ret = USBD_FAIL;
 8012f60:	2303      	movs	r3, #3
 8012f62:	75fb      	strb	r3, [r7, #23]
          break;
 8012f64:	e02b      	b.n	8012fbe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f6c:	b2db      	uxtb	r3, r3
 8012f6e:	2b03      	cmp	r3, #3
 8012f70:	d107      	bne.n	8012f82 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012f72:	f107 030d 	add.w	r3, r7, #13
 8012f76:	2201      	movs	r2, #1
 8012f78:	4619      	mov	r1, r3
 8012f7a:	6878      	ldr	r0, [r7, #4]
 8012f7c:	f001 fd52 	bl	8014a24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012f80:	e01d      	b.n	8012fbe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012f82:	6839      	ldr	r1, [r7, #0]
 8012f84:	6878      	ldr	r0, [r7, #4]
 8012f86:	f001 fcd0 	bl	801492a <USBD_CtlError>
            ret = USBD_FAIL;
 8012f8a:	2303      	movs	r3, #3
 8012f8c:	75fb      	strb	r3, [r7, #23]
          break;
 8012f8e:	e016      	b.n	8012fbe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f96:	b2db      	uxtb	r3, r3
 8012f98:	2b03      	cmp	r3, #3
 8012f9a:	d00f      	beq.n	8012fbc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8012f9c:	6839      	ldr	r1, [r7, #0]
 8012f9e:	6878      	ldr	r0, [r7, #4]
 8012fa0:	f001 fcc3 	bl	801492a <USBD_CtlError>
            ret = USBD_FAIL;
 8012fa4:	2303      	movs	r3, #3
 8012fa6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012fa8:	e008      	b.n	8012fbc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012faa:	6839      	ldr	r1, [r7, #0]
 8012fac:	6878      	ldr	r0, [r7, #4]
 8012fae:	f001 fcbc 	bl	801492a <USBD_CtlError>
          ret = USBD_FAIL;
 8012fb2:	2303      	movs	r3, #3
 8012fb4:	75fb      	strb	r3, [r7, #23]
          break;
 8012fb6:	e002      	b.n	8012fbe <USBD_CDC_Setup+0x19e>
          break;
 8012fb8:	bf00      	nop
 8012fba:	e008      	b.n	8012fce <USBD_CDC_Setup+0x1ae>
          break;
 8012fbc:	bf00      	nop
      }
      break;
 8012fbe:	e006      	b.n	8012fce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8012fc0:	6839      	ldr	r1, [r7, #0]
 8012fc2:	6878      	ldr	r0, [r7, #4]
 8012fc4:	f001 fcb1 	bl	801492a <USBD_CtlError>
      ret = USBD_FAIL;
 8012fc8:	2303      	movs	r3, #3
 8012fca:	75fb      	strb	r3, [r7, #23]
      break;
 8012fcc:	bf00      	nop
  }

  return (uint8_t)ret;
 8012fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	3718      	adds	r7, #24
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}

08012fd8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b084      	sub	sp, #16
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
 8012fe0:	460b      	mov	r3, r1
 8012fe2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012fea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	32b0      	adds	r2, #176	@ 0xb0
 8012ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d101      	bne.n	8013002 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8012ffe:	2303      	movs	r3, #3
 8013000:	e065      	b.n	80130ce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	32b0      	adds	r2, #176	@ 0xb0
 801300c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013010:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013012:	78fb      	ldrb	r3, [r7, #3]
 8013014:	f003 020f 	and.w	r2, r3, #15
 8013018:	6879      	ldr	r1, [r7, #4]
 801301a:	4613      	mov	r3, r2
 801301c:	009b      	lsls	r3, r3, #2
 801301e:	4413      	add	r3, r2
 8013020:	009b      	lsls	r3, r3, #2
 8013022:	440b      	add	r3, r1
 8013024:	3318      	adds	r3, #24
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d02f      	beq.n	801308c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801302c:	78fb      	ldrb	r3, [r7, #3]
 801302e:	f003 020f 	and.w	r2, r3, #15
 8013032:	6879      	ldr	r1, [r7, #4]
 8013034:	4613      	mov	r3, r2
 8013036:	009b      	lsls	r3, r3, #2
 8013038:	4413      	add	r3, r2
 801303a:	009b      	lsls	r3, r3, #2
 801303c:	440b      	add	r3, r1
 801303e:	3318      	adds	r3, #24
 8013040:	681a      	ldr	r2, [r3, #0]
 8013042:	78fb      	ldrb	r3, [r7, #3]
 8013044:	f003 010f 	and.w	r1, r3, #15
 8013048:	68f8      	ldr	r0, [r7, #12]
 801304a:	460b      	mov	r3, r1
 801304c:	00db      	lsls	r3, r3, #3
 801304e:	440b      	add	r3, r1
 8013050:	009b      	lsls	r3, r3, #2
 8013052:	4403      	add	r3, r0
 8013054:	331c      	adds	r3, #28
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	fbb2 f1f3 	udiv	r1, r2, r3
 801305c:	fb01 f303 	mul.w	r3, r1, r3
 8013060:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013062:	2b00      	cmp	r3, #0
 8013064:	d112      	bne.n	801308c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8013066:	78fb      	ldrb	r3, [r7, #3]
 8013068:	f003 020f 	and.w	r2, r3, #15
 801306c:	6879      	ldr	r1, [r7, #4]
 801306e:	4613      	mov	r3, r2
 8013070:	009b      	lsls	r3, r3, #2
 8013072:	4413      	add	r3, r2
 8013074:	009b      	lsls	r3, r3, #2
 8013076:	440b      	add	r3, r1
 8013078:	3318      	adds	r3, #24
 801307a:	2200      	movs	r2, #0
 801307c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801307e:	78f9      	ldrb	r1, [r7, #3]
 8013080:	2300      	movs	r3, #0
 8013082:	2200      	movs	r2, #0
 8013084:	6878      	ldr	r0, [r7, #4]
 8013086:	f002 fa0e 	bl	80154a6 <USBD_LL_Transmit>
 801308a:	e01f      	b.n	80130cc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801308c:	68bb      	ldr	r3, [r7, #8]
 801308e:	2200      	movs	r2, #0
 8013090:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801309a:	687a      	ldr	r2, [r7, #4]
 801309c:	33b0      	adds	r3, #176	@ 0xb0
 801309e:	009b      	lsls	r3, r3, #2
 80130a0:	4413      	add	r3, r2
 80130a2:	685b      	ldr	r3, [r3, #4]
 80130a4:	691b      	ldr	r3, [r3, #16]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d010      	beq.n	80130cc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80130b0:	687a      	ldr	r2, [r7, #4]
 80130b2:	33b0      	adds	r3, #176	@ 0xb0
 80130b4:	009b      	lsls	r3, r3, #2
 80130b6:	4413      	add	r3, r2
 80130b8:	685b      	ldr	r3, [r3, #4]
 80130ba:	691b      	ldr	r3, [r3, #16]
 80130bc:	68ba      	ldr	r2, [r7, #8]
 80130be:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80130c2:	68ba      	ldr	r2, [r7, #8]
 80130c4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80130c8:	78fa      	ldrb	r2, [r7, #3]
 80130ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80130cc:	2300      	movs	r3, #0
}
 80130ce:	4618      	mov	r0, r3
 80130d0:	3710      	adds	r7, #16
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd80      	pop	{r7, pc}

080130d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80130d6:	b580      	push	{r7, lr}
 80130d8:	b084      	sub	sp, #16
 80130da:	af00      	add	r7, sp, #0
 80130dc:	6078      	str	r0, [r7, #4]
 80130de:	460b      	mov	r3, r1
 80130e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	32b0      	adds	r2, #176	@ 0xb0
 80130ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	32b0      	adds	r2, #176	@ 0xb0
 80130fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d101      	bne.n	8013108 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013104:	2303      	movs	r3, #3
 8013106:	e01a      	b.n	801313e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013108:	78fb      	ldrb	r3, [r7, #3]
 801310a:	4619      	mov	r1, r3
 801310c:	6878      	ldr	r0, [r7, #4]
 801310e:	f002 fa0c 	bl	801552a <USBD_LL_GetRxDataSize>
 8013112:	4602      	mov	r2, r0
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013120:	687a      	ldr	r2, [r7, #4]
 8013122:	33b0      	adds	r3, #176	@ 0xb0
 8013124:	009b      	lsls	r3, r3, #2
 8013126:	4413      	add	r3, r2
 8013128:	685b      	ldr	r3, [r3, #4]
 801312a:	68db      	ldr	r3, [r3, #12]
 801312c:	68fa      	ldr	r2, [r7, #12]
 801312e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8013132:	68fa      	ldr	r2, [r7, #12]
 8013134:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8013138:	4611      	mov	r1, r2
 801313a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801313c:	2300      	movs	r3, #0
}
 801313e:	4618      	mov	r0, r3
 8013140:	3710      	adds	r7, #16
 8013142:	46bd      	mov	sp, r7
 8013144:	bd80      	pop	{r7, pc}

08013146 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013146:	b580      	push	{r7, lr}
 8013148:	b084      	sub	sp, #16
 801314a:	af00      	add	r7, sp, #0
 801314c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	32b0      	adds	r2, #176	@ 0xb0
 8013158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801315c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d101      	bne.n	8013168 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013164:	2303      	movs	r3, #3
 8013166:	e024      	b.n	80131b2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801316e:	687a      	ldr	r2, [r7, #4]
 8013170:	33b0      	adds	r3, #176	@ 0xb0
 8013172:	009b      	lsls	r3, r3, #2
 8013174:	4413      	add	r3, r2
 8013176:	685b      	ldr	r3, [r3, #4]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d019      	beq.n	80131b0 <USBD_CDC_EP0_RxReady+0x6a>
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8013182:	2bff      	cmp	r3, #255	@ 0xff
 8013184:	d014      	beq.n	80131b0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801318c:	687a      	ldr	r2, [r7, #4]
 801318e:	33b0      	adds	r3, #176	@ 0xb0
 8013190:	009b      	lsls	r3, r3, #2
 8013192:	4413      	add	r3, r2
 8013194:	685b      	ldr	r3, [r3, #4]
 8013196:	689b      	ldr	r3, [r3, #8]
 8013198:	68fa      	ldr	r2, [r7, #12]
 801319a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801319e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80131a0:	68fa      	ldr	r2, [r7, #12]
 80131a2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80131a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	22ff      	movs	r2, #255	@ 0xff
 80131ac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80131b0:	2300      	movs	r3, #0
}
 80131b2:	4618      	mov	r0, r3
 80131b4:	3710      	adds	r7, #16
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}
	...

080131bc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80131bc:	b580      	push	{r7, lr}
 80131be:	b086      	sub	sp, #24
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80131c4:	2182      	movs	r1, #130	@ 0x82
 80131c6:	4818      	ldr	r0, [pc, #96]	@ (8013228 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80131c8:	f000 fd4f 	bl	8013c6a <USBD_GetEpDesc>
 80131cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80131ce:	2101      	movs	r1, #1
 80131d0:	4815      	ldr	r0, [pc, #84]	@ (8013228 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80131d2:	f000 fd4a 	bl	8013c6a <USBD_GetEpDesc>
 80131d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80131d8:	2181      	movs	r1, #129	@ 0x81
 80131da:	4813      	ldr	r0, [pc, #76]	@ (8013228 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80131dc:	f000 fd45 	bl	8013c6a <USBD_GetEpDesc>
 80131e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80131e2:	697b      	ldr	r3, [r7, #20]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d002      	beq.n	80131ee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80131e8:	697b      	ldr	r3, [r7, #20]
 80131ea:	2210      	movs	r2, #16
 80131ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80131ee:	693b      	ldr	r3, [r7, #16]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d006      	beq.n	8013202 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80131f4:	693b      	ldr	r3, [r7, #16]
 80131f6:	2200      	movs	r2, #0
 80131f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80131fc:	711a      	strb	r2, [r3, #4]
 80131fe:	2200      	movs	r2, #0
 8013200:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d006      	beq.n	8013216 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	2200      	movs	r2, #0
 801320c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013210:	711a      	strb	r2, [r3, #4]
 8013212:	2200      	movs	r2, #0
 8013214:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	2243      	movs	r2, #67	@ 0x43
 801321a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801321c:	4b02      	ldr	r3, [pc, #8]	@ (8013228 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801321e:	4618      	mov	r0, r3
 8013220:	3718      	adds	r7, #24
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}
 8013226:	bf00      	nop
 8013228:	2400005c 	.word	0x2400005c

0801322c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b086      	sub	sp, #24
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013234:	2182      	movs	r1, #130	@ 0x82
 8013236:	4818      	ldr	r0, [pc, #96]	@ (8013298 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013238:	f000 fd17 	bl	8013c6a <USBD_GetEpDesc>
 801323c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801323e:	2101      	movs	r1, #1
 8013240:	4815      	ldr	r0, [pc, #84]	@ (8013298 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013242:	f000 fd12 	bl	8013c6a <USBD_GetEpDesc>
 8013246:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013248:	2181      	movs	r1, #129	@ 0x81
 801324a:	4813      	ldr	r0, [pc, #76]	@ (8013298 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801324c:	f000 fd0d 	bl	8013c6a <USBD_GetEpDesc>
 8013250:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013252:	697b      	ldr	r3, [r7, #20]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d002      	beq.n	801325e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8013258:	697b      	ldr	r3, [r7, #20]
 801325a:	2210      	movs	r2, #16
 801325c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801325e:	693b      	ldr	r3, [r7, #16]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d006      	beq.n	8013272 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013264:	693b      	ldr	r3, [r7, #16]
 8013266:	2200      	movs	r2, #0
 8013268:	711a      	strb	r2, [r3, #4]
 801326a:	2200      	movs	r2, #0
 801326c:	f042 0202 	orr.w	r2, r2, #2
 8013270:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d006      	beq.n	8013286 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	2200      	movs	r2, #0
 801327c:	711a      	strb	r2, [r3, #4]
 801327e:	2200      	movs	r2, #0
 8013280:	f042 0202 	orr.w	r2, r2, #2
 8013284:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	2243      	movs	r2, #67	@ 0x43
 801328a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801328c:	4b02      	ldr	r3, [pc, #8]	@ (8013298 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801328e:	4618      	mov	r0, r3
 8013290:	3718      	adds	r7, #24
 8013292:	46bd      	mov	sp, r7
 8013294:	bd80      	pop	{r7, pc}
 8013296:	bf00      	nop
 8013298:	2400005c 	.word	0x2400005c

0801329c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b086      	sub	sp, #24
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80132a4:	2182      	movs	r1, #130	@ 0x82
 80132a6:	4818      	ldr	r0, [pc, #96]	@ (8013308 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80132a8:	f000 fcdf 	bl	8013c6a <USBD_GetEpDesc>
 80132ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80132ae:	2101      	movs	r1, #1
 80132b0:	4815      	ldr	r0, [pc, #84]	@ (8013308 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80132b2:	f000 fcda 	bl	8013c6a <USBD_GetEpDesc>
 80132b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80132b8:	2181      	movs	r1, #129	@ 0x81
 80132ba:	4813      	ldr	r0, [pc, #76]	@ (8013308 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80132bc:	f000 fcd5 	bl	8013c6a <USBD_GetEpDesc>
 80132c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80132c2:	697b      	ldr	r3, [r7, #20]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d002      	beq.n	80132ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80132c8:	697b      	ldr	r3, [r7, #20]
 80132ca:	2210      	movs	r2, #16
 80132cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80132ce:	693b      	ldr	r3, [r7, #16]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d006      	beq.n	80132e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80132d4:	693b      	ldr	r3, [r7, #16]
 80132d6:	2200      	movs	r2, #0
 80132d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80132dc:	711a      	strb	r2, [r3, #4]
 80132de:	2200      	movs	r2, #0
 80132e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d006      	beq.n	80132f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	2200      	movs	r2, #0
 80132ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80132f0:	711a      	strb	r2, [r3, #4]
 80132f2:	2200      	movs	r2, #0
 80132f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	2243      	movs	r2, #67	@ 0x43
 80132fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80132fc:	4b02      	ldr	r3, [pc, #8]	@ (8013308 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80132fe:	4618      	mov	r0, r3
 8013300:	3718      	adds	r7, #24
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}
 8013306:	bf00      	nop
 8013308:	2400005c 	.word	0x2400005c

0801330c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801330c:	b480      	push	{r7}
 801330e:	b083      	sub	sp, #12
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	220a      	movs	r2, #10
 8013318:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801331a:	4b03      	ldr	r3, [pc, #12]	@ (8013328 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801331c:	4618      	mov	r0, r3
 801331e:	370c      	adds	r7, #12
 8013320:	46bd      	mov	sp, r7
 8013322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013326:	4770      	bx	lr
 8013328:	24000018 	.word	0x24000018

0801332c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801332c:	b480      	push	{r7}
 801332e:	b083      	sub	sp, #12
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
 8013334:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d101      	bne.n	8013340 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801333c:	2303      	movs	r3, #3
 801333e:	e009      	b.n	8013354 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013346:	687a      	ldr	r2, [r7, #4]
 8013348:	33b0      	adds	r3, #176	@ 0xb0
 801334a:	009b      	lsls	r3, r3, #2
 801334c:	4413      	add	r3, r2
 801334e:	683a      	ldr	r2, [r7, #0]
 8013350:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013352:	2300      	movs	r3, #0
}
 8013354:	4618      	mov	r0, r3
 8013356:	370c      	adds	r7, #12
 8013358:	46bd      	mov	sp, r7
 801335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335e:	4770      	bx	lr

08013360 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013360:	b480      	push	{r7}
 8013362:	b087      	sub	sp, #28
 8013364:	af00      	add	r7, sp, #0
 8013366:	60f8      	str	r0, [r7, #12]
 8013368:	60b9      	str	r1, [r7, #8]
 801336a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	32b0      	adds	r2, #176	@ 0xb0
 8013376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801337a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801337c:	697b      	ldr	r3, [r7, #20]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d101      	bne.n	8013386 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013382:	2303      	movs	r3, #3
 8013384:	e008      	b.n	8013398 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8013386:	697b      	ldr	r3, [r7, #20]
 8013388:	68ba      	ldr	r2, [r7, #8]
 801338a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801338e:	697b      	ldr	r3, [r7, #20]
 8013390:	687a      	ldr	r2, [r7, #4]
 8013392:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8013396:	2300      	movs	r3, #0
}
 8013398:	4618      	mov	r0, r3
 801339a:	371c      	adds	r7, #28
 801339c:	46bd      	mov	sp, r7
 801339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a2:	4770      	bx	lr

080133a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80133a4:	b480      	push	{r7}
 80133a6:	b085      	sub	sp, #20
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
 80133ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	32b0      	adds	r2, #176	@ 0xb0
 80133b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d101      	bne.n	80133c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80133c4:	2303      	movs	r3, #3
 80133c6:	e004      	b.n	80133d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	683a      	ldr	r2, [r7, #0]
 80133cc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80133d0:	2300      	movs	r3, #0
}
 80133d2:	4618      	mov	r0, r3
 80133d4:	3714      	adds	r7, #20
 80133d6:	46bd      	mov	sp, r7
 80133d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133dc:	4770      	bx	lr
	...

080133e0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b084      	sub	sp, #16
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	32b0      	adds	r2, #176	@ 0xb0
 80133f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133f6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80133f8:	2301      	movs	r3, #1
 80133fa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80133fc:	68bb      	ldr	r3, [r7, #8]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d101      	bne.n	8013406 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013402:	2303      	movs	r3, #3
 8013404:	e025      	b.n	8013452 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8013406:	68bb      	ldr	r3, [r7, #8]
 8013408:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801340c:	2b00      	cmp	r3, #0
 801340e:	d11f      	bne.n	8013450 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013410:	68bb      	ldr	r3, [r7, #8]
 8013412:	2201      	movs	r2, #1
 8013414:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013418:	4b10      	ldr	r3, [pc, #64]	@ (801345c <USBD_CDC_TransmitPacket+0x7c>)
 801341a:	781b      	ldrb	r3, [r3, #0]
 801341c:	f003 020f 	and.w	r2, r3, #15
 8013420:	68bb      	ldr	r3, [r7, #8]
 8013422:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8013426:	6878      	ldr	r0, [r7, #4]
 8013428:	4613      	mov	r3, r2
 801342a:	009b      	lsls	r3, r3, #2
 801342c:	4413      	add	r3, r2
 801342e:	009b      	lsls	r3, r3, #2
 8013430:	4403      	add	r3, r0
 8013432:	3318      	adds	r3, #24
 8013434:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8013436:	4b09      	ldr	r3, [pc, #36]	@ (801345c <USBD_CDC_TransmitPacket+0x7c>)
 8013438:	7819      	ldrb	r1, [r3, #0]
 801343a:	68bb      	ldr	r3, [r7, #8]
 801343c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013440:	68bb      	ldr	r3, [r7, #8]
 8013442:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8013446:	6878      	ldr	r0, [r7, #4]
 8013448:	f002 f82d 	bl	80154a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 801344c:	2300      	movs	r3, #0
 801344e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013450:	7bfb      	ldrb	r3, [r7, #15]
}
 8013452:	4618      	mov	r0, r3
 8013454:	3710      	adds	r7, #16
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}
 801345a:	bf00      	nop
 801345c:	2400009f 	.word	0x2400009f

08013460 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b084      	sub	sp, #16
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	32b0      	adds	r2, #176	@ 0xb0
 8013472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013476:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	32b0      	adds	r2, #176	@ 0xb0
 8013482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d101      	bne.n	801348e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801348a:	2303      	movs	r3, #3
 801348c:	e018      	b.n	80134c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	7c1b      	ldrb	r3, [r3, #16]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d10a      	bne.n	80134ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013496:	4b0c      	ldr	r3, [pc, #48]	@ (80134c8 <USBD_CDC_ReceivePacket+0x68>)
 8013498:	7819      	ldrb	r1, [r3, #0]
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80134a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80134a4:	6878      	ldr	r0, [r7, #4]
 80134a6:	f002 f81f 	bl	80154e8 <USBD_LL_PrepareReceive>
 80134aa:	e008      	b.n	80134be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80134ac:	4b06      	ldr	r3, [pc, #24]	@ (80134c8 <USBD_CDC_ReceivePacket+0x68>)
 80134ae:	7819      	ldrb	r1, [r3, #0]
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80134b6:	2340      	movs	r3, #64	@ 0x40
 80134b8:	6878      	ldr	r0, [r7, #4]
 80134ba:	f002 f815 	bl	80154e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80134be:	2300      	movs	r3, #0
}
 80134c0:	4618      	mov	r0, r3
 80134c2:	3710      	adds	r7, #16
 80134c4:	46bd      	mov	sp, r7
 80134c6:	bd80      	pop	{r7, pc}
 80134c8:	240000a0 	.word	0x240000a0

080134cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b086      	sub	sp, #24
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	60f8      	str	r0, [r7, #12]
 80134d4:	60b9      	str	r1, [r7, #8]
 80134d6:	4613      	mov	r3, r2
 80134d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d101      	bne.n	80134e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80134e0:	2303      	movs	r3, #3
 80134e2:	e01f      	b.n	8013524 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	2200      	movs	r2, #0
 80134e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	2200      	movs	r2, #0
 80134f0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	2200      	movs	r2, #0
 80134f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d003      	beq.n	801350a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	68ba      	ldr	r2, [r7, #8]
 8013506:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	2201      	movs	r2, #1
 801350e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	79fa      	ldrb	r2, [r7, #7]
 8013516:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013518:	68f8      	ldr	r0, [r7, #12]
 801351a:	f001 fe8b 	bl	8015234 <USBD_LL_Init>
 801351e:	4603      	mov	r3, r0
 8013520:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013522:	7dfb      	ldrb	r3, [r7, #23]
}
 8013524:	4618      	mov	r0, r3
 8013526:	3718      	adds	r7, #24
 8013528:	46bd      	mov	sp, r7
 801352a:	bd80      	pop	{r7, pc}

0801352c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b084      	sub	sp, #16
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
 8013534:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013536:	2300      	movs	r3, #0
 8013538:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d101      	bne.n	8013544 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013540:	2303      	movs	r3, #3
 8013542:	e025      	b.n	8013590 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	683a      	ldr	r2, [r7, #0]
 8013548:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	32ae      	adds	r2, #174	@ 0xae
 8013556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801355a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801355c:	2b00      	cmp	r3, #0
 801355e:	d00f      	beq.n	8013580 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	32ae      	adds	r2, #174	@ 0xae
 801356a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801356e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013570:	f107 020e 	add.w	r2, r7, #14
 8013574:	4610      	mov	r0, r2
 8013576:	4798      	blx	r3
 8013578:	4602      	mov	r2, r0
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013586:	1c5a      	adds	r2, r3, #1
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801358e:	2300      	movs	r3, #0
}
 8013590:	4618      	mov	r0, r3
 8013592:	3710      	adds	r7, #16
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}

08013598 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b082      	sub	sp, #8
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80135a0:	6878      	ldr	r0, [r7, #4]
 80135a2:	f001 fe97 	bl	80152d4 <USBD_LL_Start>
 80135a6:	4603      	mov	r3, r0
}
 80135a8:	4618      	mov	r0, r3
 80135aa:	3708      	adds	r7, #8
 80135ac:	46bd      	mov	sp, r7
 80135ae:	bd80      	pop	{r7, pc}

080135b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80135b0:	b480      	push	{r7}
 80135b2:	b083      	sub	sp, #12
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80135b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80135ba:	4618      	mov	r0, r3
 80135bc:	370c      	adds	r7, #12
 80135be:	46bd      	mov	sp, r7
 80135c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c4:	4770      	bx	lr

080135c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80135c6:	b580      	push	{r7, lr}
 80135c8:	b084      	sub	sp, #16
 80135ca:	af00      	add	r7, sp, #0
 80135cc:	6078      	str	r0, [r7, #4]
 80135ce:	460b      	mov	r3, r1
 80135d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80135d2:	2300      	movs	r3, #0
 80135d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d009      	beq.n	80135f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	78fa      	ldrb	r2, [r7, #3]
 80135ea:	4611      	mov	r1, r2
 80135ec:	6878      	ldr	r0, [r7, #4]
 80135ee:	4798      	blx	r3
 80135f0:	4603      	mov	r3, r0
 80135f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80135f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80135f6:	4618      	mov	r0, r3
 80135f8:	3710      	adds	r7, #16
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}

080135fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80135fe:	b580      	push	{r7, lr}
 8013600:	b084      	sub	sp, #16
 8013602:	af00      	add	r7, sp, #0
 8013604:	6078      	str	r0, [r7, #4]
 8013606:	460b      	mov	r3, r1
 8013608:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801360a:	2300      	movs	r3, #0
 801360c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013614:	685b      	ldr	r3, [r3, #4]
 8013616:	78fa      	ldrb	r2, [r7, #3]
 8013618:	4611      	mov	r1, r2
 801361a:	6878      	ldr	r0, [r7, #4]
 801361c:	4798      	blx	r3
 801361e:	4603      	mov	r3, r0
 8013620:	2b00      	cmp	r3, #0
 8013622:	d001      	beq.n	8013628 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013624:	2303      	movs	r3, #3
 8013626:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013628:	7bfb      	ldrb	r3, [r7, #15]
}
 801362a:	4618      	mov	r0, r3
 801362c:	3710      	adds	r7, #16
 801362e:	46bd      	mov	sp, r7
 8013630:	bd80      	pop	{r7, pc}

08013632 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013632:	b580      	push	{r7, lr}
 8013634:	b084      	sub	sp, #16
 8013636:	af00      	add	r7, sp, #0
 8013638:	6078      	str	r0, [r7, #4]
 801363a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013642:	6839      	ldr	r1, [r7, #0]
 8013644:	4618      	mov	r0, r3
 8013646:	f001 f936 	bl	80148b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	2201      	movs	r2, #1
 801364e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8013658:	461a      	mov	r2, r3
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013666:	f003 031f 	and.w	r3, r3, #31
 801366a:	2b02      	cmp	r3, #2
 801366c:	d01a      	beq.n	80136a4 <USBD_LL_SetupStage+0x72>
 801366e:	2b02      	cmp	r3, #2
 8013670:	d822      	bhi.n	80136b8 <USBD_LL_SetupStage+0x86>
 8013672:	2b00      	cmp	r3, #0
 8013674:	d002      	beq.n	801367c <USBD_LL_SetupStage+0x4a>
 8013676:	2b01      	cmp	r3, #1
 8013678:	d00a      	beq.n	8013690 <USBD_LL_SetupStage+0x5e>
 801367a:	e01d      	b.n	80136b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013682:	4619      	mov	r1, r3
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f000 fb63 	bl	8013d50 <USBD_StdDevReq>
 801368a:	4603      	mov	r3, r0
 801368c:	73fb      	strb	r3, [r7, #15]
      break;
 801368e:	e020      	b.n	80136d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013696:	4619      	mov	r1, r3
 8013698:	6878      	ldr	r0, [r7, #4]
 801369a:	f000 fbcb 	bl	8013e34 <USBD_StdItfReq>
 801369e:	4603      	mov	r3, r0
 80136a0:	73fb      	strb	r3, [r7, #15]
      break;
 80136a2:	e016      	b.n	80136d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80136aa:	4619      	mov	r1, r3
 80136ac:	6878      	ldr	r0, [r7, #4]
 80136ae:	f000 fc2d 	bl	8013f0c <USBD_StdEPReq>
 80136b2:	4603      	mov	r3, r0
 80136b4:	73fb      	strb	r3, [r7, #15]
      break;
 80136b6:	e00c      	b.n	80136d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80136be:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80136c2:	b2db      	uxtb	r3, r3
 80136c4:	4619      	mov	r1, r3
 80136c6:	6878      	ldr	r0, [r7, #4]
 80136c8:	f001 fe64 	bl	8015394 <USBD_LL_StallEP>
 80136cc:	4603      	mov	r3, r0
 80136ce:	73fb      	strb	r3, [r7, #15]
      break;
 80136d0:	bf00      	nop
  }

  return ret;
 80136d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80136d4:	4618      	mov	r0, r3
 80136d6:	3710      	adds	r7, #16
 80136d8:	46bd      	mov	sp, r7
 80136da:	bd80      	pop	{r7, pc}

080136dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	b086      	sub	sp, #24
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	60f8      	str	r0, [r7, #12]
 80136e4:	460b      	mov	r3, r1
 80136e6:	607a      	str	r2, [r7, #4]
 80136e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80136ea:	2300      	movs	r3, #0
 80136ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80136ee:	7afb      	ldrb	r3, [r7, #11]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d16e      	bne.n	80137d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80136fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013702:	2b03      	cmp	r3, #3
 8013704:	f040 8098 	bne.w	8013838 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013708:	693b      	ldr	r3, [r7, #16]
 801370a:	689a      	ldr	r2, [r3, #8]
 801370c:	693b      	ldr	r3, [r7, #16]
 801370e:	68db      	ldr	r3, [r3, #12]
 8013710:	429a      	cmp	r2, r3
 8013712:	d913      	bls.n	801373c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013714:	693b      	ldr	r3, [r7, #16]
 8013716:	689a      	ldr	r2, [r3, #8]
 8013718:	693b      	ldr	r3, [r7, #16]
 801371a:	68db      	ldr	r3, [r3, #12]
 801371c:	1ad2      	subs	r2, r2, r3
 801371e:	693b      	ldr	r3, [r7, #16]
 8013720:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013722:	693b      	ldr	r3, [r7, #16]
 8013724:	68da      	ldr	r2, [r3, #12]
 8013726:	693b      	ldr	r3, [r7, #16]
 8013728:	689b      	ldr	r3, [r3, #8]
 801372a:	4293      	cmp	r3, r2
 801372c:	bf28      	it	cs
 801372e:	4613      	movcs	r3, r2
 8013730:	461a      	mov	r2, r3
 8013732:	6879      	ldr	r1, [r7, #4]
 8013734:	68f8      	ldr	r0, [r7, #12]
 8013736:	f001 f9be 	bl	8014ab6 <USBD_CtlContinueRx>
 801373a:	e07d      	b.n	8013838 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013742:	f003 031f 	and.w	r3, r3, #31
 8013746:	2b02      	cmp	r3, #2
 8013748:	d014      	beq.n	8013774 <USBD_LL_DataOutStage+0x98>
 801374a:	2b02      	cmp	r3, #2
 801374c:	d81d      	bhi.n	801378a <USBD_LL_DataOutStage+0xae>
 801374e:	2b00      	cmp	r3, #0
 8013750:	d002      	beq.n	8013758 <USBD_LL_DataOutStage+0x7c>
 8013752:	2b01      	cmp	r3, #1
 8013754:	d003      	beq.n	801375e <USBD_LL_DataOutStage+0x82>
 8013756:	e018      	b.n	801378a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013758:	2300      	movs	r3, #0
 801375a:	75bb      	strb	r3, [r7, #22]
            break;
 801375c:	e018      	b.n	8013790 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013764:	b2db      	uxtb	r3, r3
 8013766:	4619      	mov	r1, r3
 8013768:	68f8      	ldr	r0, [r7, #12]
 801376a:	f000 fa64 	bl	8013c36 <USBD_CoreFindIF>
 801376e:	4603      	mov	r3, r0
 8013770:	75bb      	strb	r3, [r7, #22]
            break;
 8013772:	e00d      	b.n	8013790 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801377a:	b2db      	uxtb	r3, r3
 801377c:	4619      	mov	r1, r3
 801377e:	68f8      	ldr	r0, [r7, #12]
 8013780:	f000 fa66 	bl	8013c50 <USBD_CoreFindEP>
 8013784:	4603      	mov	r3, r0
 8013786:	75bb      	strb	r3, [r7, #22]
            break;
 8013788:	e002      	b.n	8013790 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801378a:	2300      	movs	r3, #0
 801378c:	75bb      	strb	r3, [r7, #22]
            break;
 801378e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013790:	7dbb      	ldrb	r3, [r7, #22]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d119      	bne.n	80137ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801379c:	b2db      	uxtb	r3, r3
 801379e:	2b03      	cmp	r3, #3
 80137a0:	d113      	bne.n	80137ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80137a2:	7dba      	ldrb	r2, [r7, #22]
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	32ae      	adds	r2, #174	@ 0xae
 80137a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137ac:	691b      	ldr	r3, [r3, #16]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d00b      	beq.n	80137ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80137b2:	7dba      	ldrb	r2, [r7, #22]
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80137ba:	7dba      	ldrb	r2, [r7, #22]
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	32ae      	adds	r2, #174	@ 0xae
 80137c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137c4:	691b      	ldr	r3, [r3, #16]
 80137c6:	68f8      	ldr	r0, [r7, #12]
 80137c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80137ca:	68f8      	ldr	r0, [r7, #12]
 80137cc:	f001 f984 	bl	8014ad8 <USBD_CtlSendStatus>
 80137d0:	e032      	b.n	8013838 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80137d2:	7afb      	ldrb	r3, [r7, #11]
 80137d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80137d8:	b2db      	uxtb	r3, r3
 80137da:	4619      	mov	r1, r3
 80137dc:	68f8      	ldr	r0, [r7, #12]
 80137de:	f000 fa37 	bl	8013c50 <USBD_CoreFindEP>
 80137e2:	4603      	mov	r3, r0
 80137e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80137e6:	7dbb      	ldrb	r3, [r7, #22]
 80137e8:	2bff      	cmp	r3, #255	@ 0xff
 80137ea:	d025      	beq.n	8013838 <USBD_LL_DataOutStage+0x15c>
 80137ec:	7dbb      	ldrb	r3, [r7, #22]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d122      	bne.n	8013838 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80137f8:	b2db      	uxtb	r3, r3
 80137fa:	2b03      	cmp	r3, #3
 80137fc:	d117      	bne.n	801382e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80137fe:	7dba      	ldrb	r2, [r7, #22]
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	32ae      	adds	r2, #174	@ 0xae
 8013804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013808:	699b      	ldr	r3, [r3, #24]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d00f      	beq.n	801382e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801380e:	7dba      	ldrb	r2, [r7, #22]
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013816:	7dba      	ldrb	r2, [r7, #22]
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	32ae      	adds	r2, #174	@ 0xae
 801381c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013820:	699b      	ldr	r3, [r3, #24]
 8013822:	7afa      	ldrb	r2, [r7, #11]
 8013824:	4611      	mov	r1, r2
 8013826:	68f8      	ldr	r0, [r7, #12]
 8013828:	4798      	blx	r3
 801382a:	4603      	mov	r3, r0
 801382c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801382e:	7dfb      	ldrb	r3, [r7, #23]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d001      	beq.n	8013838 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013834:	7dfb      	ldrb	r3, [r7, #23]
 8013836:	e000      	b.n	801383a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013838:	2300      	movs	r3, #0
}
 801383a:	4618      	mov	r0, r3
 801383c:	3718      	adds	r7, #24
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}

08013842 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013842:	b580      	push	{r7, lr}
 8013844:	b086      	sub	sp, #24
 8013846:	af00      	add	r7, sp, #0
 8013848:	60f8      	str	r0, [r7, #12]
 801384a:	460b      	mov	r3, r1
 801384c:	607a      	str	r2, [r7, #4]
 801384e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013850:	7afb      	ldrb	r3, [r7, #11]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d16f      	bne.n	8013936 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	3314      	adds	r3, #20
 801385a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013862:	2b02      	cmp	r3, #2
 8013864:	d15a      	bne.n	801391c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013866:	693b      	ldr	r3, [r7, #16]
 8013868:	689a      	ldr	r2, [r3, #8]
 801386a:	693b      	ldr	r3, [r7, #16]
 801386c:	68db      	ldr	r3, [r3, #12]
 801386e:	429a      	cmp	r2, r3
 8013870:	d914      	bls.n	801389c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013872:	693b      	ldr	r3, [r7, #16]
 8013874:	689a      	ldr	r2, [r3, #8]
 8013876:	693b      	ldr	r3, [r7, #16]
 8013878:	68db      	ldr	r3, [r3, #12]
 801387a:	1ad2      	subs	r2, r2, r3
 801387c:	693b      	ldr	r3, [r7, #16]
 801387e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013880:	693b      	ldr	r3, [r7, #16]
 8013882:	689b      	ldr	r3, [r3, #8]
 8013884:	461a      	mov	r2, r3
 8013886:	6879      	ldr	r1, [r7, #4]
 8013888:	68f8      	ldr	r0, [r7, #12]
 801388a:	f001 f8e6 	bl	8014a5a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801388e:	2300      	movs	r3, #0
 8013890:	2200      	movs	r2, #0
 8013892:	2100      	movs	r1, #0
 8013894:	68f8      	ldr	r0, [r7, #12]
 8013896:	f001 fe27 	bl	80154e8 <USBD_LL_PrepareReceive>
 801389a:	e03f      	b.n	801391c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801389c:	693b      	ldr	r3, [r7, #16]
 801389e:	68da      	ldr	r2, [r3, #12]
 80138a0:	693b      	ldr	r3, [r7, #16]
 80138a2:	689b      	ldr	r3, [r3, #8]
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d11c      	bne.n	80138e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80138a8:	693b      	ldr	r3, [r7, #16]
 80138aa:	685a      	ldr	r2, [r3, #4]
 80138ac:	693b      	ldr	r3, [r7, #16]
 80138ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80138b0:	429a      	cmp	r2, r3
 80138b2:	d316      	bcc.n	80138e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80138b4:	693b      	ldr	r3, [r7, #16]
 80138b6:	685a      	ldr	r2, [r3, #4]
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80138be:	429a      	cmp	r2, r3
 80138c0:	d20f      	bcs.n	80138e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80138c2:	2200      	movs	r2, #0
 80138c4:	2100      	movs	r1, #0
 80138c6:	68f8      	ldr	r0, [r7, #12]
 80138c8:	f001 f8c7 	bl	8014a5a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	2200      	movs	r2, #0
 80138d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80138d4:	2300      	movs	r3, #0
 80138d6:	2200      	movs	r2, #0
 80138d8:	2100      	movs	r1, #0
 80138da:	68f8      	ldr	r0, [r7, #12]
 80138dc:	f001 fe04 	bl	80154e8 <USBD_LL_PrepareReceive>
 80138e0:	e01c      	b.n	801391c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80138e8:	b2db      	uxtb	r3, r3
 80138ea:	2b03      	cmp	r3, #3
 80138ec:	d10f      	bne.n	801390e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80138f4:	68db      	ldr	r3, [r3, #12]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d009      	beq.n	801390e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	2200      	movs	r2, #0
 80138fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013908:	68db      	ldr	r3, [r3, #12]
 801390a:	68f8      	ldr	r0, [r7, #12]
 801390c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801390e:	2180      	movs	r1, #128	@ 0x80
 8013910:	68f8      	ldr	r0, [r7, #12]
 8013912:	f001 fd3f 	bl	8015394 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013916:	68f8      	ldr	r0, [r7, #12]
 8013918:	f001 f8f1 	bl	8014afe <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8013922:	2b00      	cmp	r3, #0
 8013924:	d03a      	beq.n	801399c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013926:	68f8      	ldr	r0, [r7, #12]
 8013928:	f7ff fe42 	bl	80135b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	2200      	movs	r2, #0
 8013930:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8013934:	e032      	b.n	801399c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013936:	7afb      	ldrb	r3, [r7, #11]
 8013938:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801393c:	b2db      	uxtb	r3, r3
 801393e:	4619      	mov	r1, r3
 8013940:	68f8      	ldr	r0, [r7, #12]
 8013942:	f000 f985 	bl	8013c50 <USBD_CoreFindEP>
 8013946:	4603      	mov	r3, r0
 8013948:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801394a:	7dfb      	ldrb	r3, [r7, #23]
 801394c:	2bff      	cmp	r3, #255	@ 0xff
 801394e:	d025      	beq.n	801399c <USBD_LL_DataInStage+0x15a>
 8013950:	7dfb      	ldrb	r3, [r7, #23]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d122      	bne.n	801399c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801395c:	b2db      	uxtb	r3, r3
 801395e:	2b03      	cmp	r3, #3
 8013960:	d11c      	bne.n	801399c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013962:	7dfa      	ldrb	r2, [r7, #23]
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	32ae      	adds	r2, #174	@ 0xae
 8013968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801396c:	695b      	ldr	r3, [r3, #20]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d014      	beq.n	801399c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013972:	7dfa      	ldrb	r2, [r7, #23]
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801397a:	7dfa      	ldrb	r2, [r7, #23]
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	32ae      	adds	r2, #174	@ 0xae
 8013980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013984:	695b      	ldr	r3, [r3, #20]
 8013986:	7afa      	ldrb	r2, [r7, #11]
 8013988:	4611      	mov	r1, r2
 801398a:	68f8      	ldr	r0, [r7, #12]
 801398c:	4798      	blx	r3
 801398e:	4603      	mov	r3, r0
 8013990:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013992:	7dbb      	ldrb	r3, [r7, #22]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d001      	beq.n	801399c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013998:	7dbb      	ldrb	r3, [r7, #22]
 801399a:	e000      	b.n	801399e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801399c:	2300      	movs	r3, #0
}
 801399e:	4618      	mov	r0, r3
 80139a0:	3718      	adds	r7, #24
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}

080139a6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80139a6:	b580      	push	{r7, lr}
 80139a8:	b084      	sub	sp, #16
 80139aa:	af00      	add	r7, sp, #0
 80139ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80139ae:	2300      	movs	r3, #0
 80139b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	2201      	movs	r2, #1
 80139b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	2200      	movs	r2, #0
 80139be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	2200      	movs	r2, #0
 80139c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2200      	movs	r2, #0
 80139cc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	2200      	movs	r2, #0
 80139d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d014      	beq.n	8013a0c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80139e8:	685b      	ldr	r3, [r3, #4]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d00e      	beq.n	8013a0c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80139f4:	685b      	ldr	r3, [r3, #4]
 80139f6:	687a      	ldr	r2, [r7, #4]
 80139f8:	6852      	ldr	r2, [r2, #4]
 80139fa:	b2d2      	uxtb	r2, r2
 80139fc:	4611      	mov	r1, r2
 80139fe:	6878      	ldr	r0, [r7, #4]
 8013a00:	4798      	blx	r3
 8013a02:	4603      	mov	r3, r0
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d001      	beq.n	8013a0c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013a08:	2303      	movs	r3, #3
 8013a0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013a0c:	2340      	movs	r3, #64	@ 0x40
 8013a0e:	2200      	movs	r2, #0
 8013a10:	2100      	movs	r1, #0
 8013a12:	6878      	ldr	r0, [r7, #4]
 8013a14:	f001 fc79 	bl	801530a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	2201      	movs	r2, #1
 8013a1c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	2240      	movs	r2, #64	@ 0x40
 8013a24:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013a28:	2340      	movs	r3, #64	@ 0x40
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	2180      	movs	r1, #128	@ 0x80
 8013a2e:	6878      	ldr	r0, [r7, #4]
 8013a30:	f001 fc6b 	bl	801530a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	2201      	movs	r2, #1
 8013a38:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	2240      	movs	r2, #64	@ 0x40
 8013a3e:	621a      	str	r2, [r3, #32]

  return ret;
 8013a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	3710      	adds	r7, #16
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd80      	pop	{r7, pc}

08013a4a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013a4a:	b480      	push	{r7}
 8013a4c:	b083      	sub	sp, #12
 8013a4e:	af00      	add	r7, sp, #0
 8013a50:	6078      	str	r0, [r7, #4]
 8013a52:	460b      	mov	r3, r1
 8013a54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	78fa      	ldrb	r2, [r7, #3]
 8013a5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013a5c:	2300      	movs	r3, #0
}
 8013a5e:	4618      	mov	r0, r3
 8013a60:	370c      	adds	r7, #12
 8013a62:	46bd      	mov	sp, r7
 8013a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a68:	4770      	bx	lr

08013a6a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013a6a:	b480      	push	{r7}
 8013a6c:	b083      	sub	sp, #12
 8013a6e:	af00      	add	r7, sp, #0
 8013a70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a78:	b2db      	uxtb	r3, r3
 8013a7a:	2b04      	cmp	r3, #4
 8013a7c:	d006      	beq.n	8013a8c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a84:	b2da      	uxtb	r2, r3
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	2204      	movs	r2, #4
 8013a90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8013a94:	2300      	movs	r3, #0
}
 8013a96:	4618      	mov	r0, r3
 8013a98:	370c      	adds	r7, #12
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa0:	4770      	bx	lr

08013aa2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013aa2:	b480      	push	{r7}
 8013aa4:	b083      	sub	sp, #12
 8013aa6:	af00      	add	r7, sp, #0
 8013aa8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ab0:	b2db      	uxtb	r3, r3
 8013ab2:	2b04      	cmp	r3, #4
 8013ab4:	d106      	bne.n	8013ac4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8013abc:	b2da      	uxtb	r2, r3
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013ac4:	2300      	movs	r3, #0
}
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	370c      	adds	r7, #12
 8013aca:	46bd      	mov	sp, r7
 8013acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad0:	4770      	bx	lr

08013ad2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013ad2:	b580      	push	{r7, lr}
 8013ad4:	b082      	sub	sp, #8
 8013ad6:	af00      	add	r7, sp, #0
 8013ad8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ae0:	b2db      	uxtb	r3, r3
 8013ae2:	2b03      	cmp	r3, #3
 8013ae4:	d110      	bne.n	8013b08 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d00b      	beq.n	8013b08 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013af6:	69db      	ldr	r3, [r3, #28]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d005      	beq.n	8013b08 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013b02:	69db      	ldr	r3, [r3, #28]
 8013b04:	6878      	ldr	r0, [r7, #4]
 8013b06:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013b08:	2300      	movs	r3, #0
}
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	3708      	adds	r7, #8
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd80      	pop	{r7, pc}

08013b12 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013b12:	b580      	push	{r7, lr}
 8013b14:	b082      	sub	sp, #8
 8013b16:	af00      	add	r7, sp, #0
 8013b18:	6078      	str	r0, [r7, #4]
 8013b1a:	460b      	mov	r3, r1
 8013b1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	32ae      	adds	r2, #174	@ 0xae
 8013b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d101      	bne.n	8013b34 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8013b30:	2303      	movs	r3, #3
 8013b32:	e01c      	b.n	8013b6e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b3a:	b2db      	uxtb	r3, r3
 8013b3c:	2b03      	cmp	r3, #3
 8013b3e:	d115      	bne.n	8013b6c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	32ae      	adds	r2, #174	@ 0xae
 8013b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b4e:	6a1b      	ldr	r3, [r3, #32]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d00b      	beq.n	8013b6c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	32ae      	adds	r2, #174	@ 0xae
 8013b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b62:	6a1b      	ldr	r3, [r3, #32]
 8013b64:	78fa      	ldrb	r2, [r7, #3]
 8013b66:	4611      	mov	r1, r2
 8013b68:	6878      	ldr	r0, [r7, #4]
 8013b6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013b6c:	2300      	movs	r3, #0
}
 8013b6e:	4618      	mov	r0, r3
 8013b70:	3708      	adds	r7, #8
 8013b72:	46bd      	mov	sp, r7
 8013b74:	bd80      	pop	{r7, pc}

08013b76 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013b76:	b580      	push	{r7, lr}
 8013b78:	b082      	sub	sp, #8
 8013b7a:	af00      	add	r7, sp, #0
 8013b7c:	6078      	str	r0, [r7, #4]
 8013b7e:	460b      	mov	r3, r1
 8013b80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	32ae      	adds	r2, #174	@ 0xae
 8013b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d101      	bne.n	8013b98 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8013b94:	2303      	movs	r3, #3
 8013b96:	e01c      	b.n	8013bd2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b9e:	b2db      	uxtb	r3, r3
 8013ba0:	2b03      	cmp	r3, #3
 8013ba2:	d115      	bne.n	8013bd0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	32ae      	adds	r2, #174	@ 0xae
 8013bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d00b      	beq.n	8013bd0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	32ae      	adds	r2, #174	@ 0xae
 8013bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bc8:	78fa      	ldrb	r2, [r7, #3]
 8013bca:	4611      	mov	r1, r2
 8013bcc:	6878      	ldr	r0, [r7, #4]
 8013bce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013bd0:	2300      	movs	r3, #0
}
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	3708      	adds	r7, #8
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	bd80      	pop	{r7, pc}

08013bda <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8013bda:	b480      	push	{r7}
 8013bdc:	b083      	sub	sp, #12
 8013bde:	af00      	add	r7, sp, #0
 8013be0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013be2:	2300      	movs	r3, #0
}
 8013be4:	4618      	mov	r0, r3
 8013be6:	370c      	adds	r7, #12
 8013be8:	46bd      	mov	sp, r7
 8013bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bee:	4770      	bx	lr

08013bf0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b084      	sub	sp, #16
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	2201      	movs	r2, #1
 8013c00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d00e      	beq.n	8013c2c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013c14:	685b      	ldr	r3, [r3, #4]
 8013c16:	687a      	ldr	r2, [r7, #4]
 8013c18:	6852      	ldr	r2, [r2, #4]
 8013c1a:	b2d2      	uxtb	r2, r2
 8013c1c:	4611      	mov	r1, r2
 8013c1e:	6878      	ldr	r0, [r7, #4]
 8013c20:	4798      	blx	r3
 8013c22:	4603      	mov	r3, r0
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d001      	beq.n	8013c2c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8013c28:	2303      	movs	r3, #3
 8013c2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c2e:	4618      	mov	r0, r3
 8013c30:	3710      	adds	r7, #16
 8013c32:	46bd      	mov	sp, r7
 8013c34:	bd80      	pop	{r7, pc}

08013c36 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013c36:	b480      	push	{r7}
 8013c38:	b083      	sub	sp, #12
 8013c3a:	af00      	add	r7, sp, #0
 8013c3c:	6078      	str	r0, [r7, #4]
 8013c3e:	460b      	mov	r3, r1
 8013c40:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013c42:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013c44:	4618      	mov	r0, r3
 8013c46:	370c      	adds	r7, #12
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4e:	4770      	bx	lr

08013c50 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013c50:	b480      	push	{r7}
 8013c52:	b083      	sub	sp, #12
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
 8013c58:	460b      	mov	r3, r1
 8013c5a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013c5c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013c5e:	4618      	mov	r0, r3
 8013c60:	370c      	adds	r7, #12
 8013c62:	46bd      	mov	sp, r7
 8013c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c68:	4770      	bx	lr

08013c6a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013c6a:	b580      	push	{r7, lr}
 8013c6c:	b086      	sub	sp, #24
 8013c6e:	af00      	add	r7, sp, #0
 8013c70:	6078      	str	r0, [r7, #4]
 8013c72:	460b      	mov	r3, r1
 8013c74:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013c7e:	2300      	movs	r3, #0
 8013c80:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	885b      	ldrh	r3, [r3, #2]
 8013c86:	b29b      	uxth	r3, r3
 8013c88:	68fa      	ldr	r2, [r7, #12]
 8013c8a:	7812      	ldrb	r2, [r2, #0]
 8013c8c:	4293      	cmp	r3, r2
 8013c8e:	d91f      	bls.n	8013cd0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	781b      	ldrb	r3, [r3, #0]
 8013c94:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013c96:	e013      	b.n	8013cc0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013c98:	f107 030a 	add.w	r3, r7, #10
 8013c9c:	4619      	mov	r1, r3
 8013c9e:	6978      	ldr	r0, [r7, #20]
 8013ca0:	f000 f81b 	bl	8013cda <USBD_GetNextDesc>
 8013ca4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013ca6:	697b      	ldr	r3, [r7, #20]
 8013ca8:	785b      	ldrb	r3, [r3, #1]
 8013caa:	2b05      	cmp	r3, #5
 8013cac:	d108      	bne.n	8013cc0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013cae:	697b      	ldr	r3, [r7, #20]
 8013cb0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013cb2:	693b      	ldr	r3, [r7, #16]
 8013cb4:	789b      	ldrb	r3, [r3, #2]
 8013cb6:	78fa      	ldrb	r2, [r7, #3]
 8013cb8:	429a      	cmp	r2, r3
 8013cba:	d008      	beq.n	8013cce <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	885b      	ldrh	r3, [r3, #2]
 8013cc4:	b29a      	uxth	r2, r3
 8013cc6:	897b      	ldrh	r3, [r7, #10]
 8013cc8:	429a      	cmp	r2, r3
 8013cca:	d8e5      	bhi.n	8013c98 <USBD_GetEpDesc+0x2e>
 8013ccc:	e000      	b.n	8013cd0 <USBD_GetEpDesc+0x66>
          break;
 8013cce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013cd0:	693b      	ldr	r3, [r7, #16]
}
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	3718      	adds	r7, #24
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bd80      	pop	{r7, pc}

08013cda <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013cda:	b480      	push	{r7}
 8013cdc:	b085      	sub	sp, #20
 8013cde:	af00      	add	r7, sp, #0
 8013ce0:	6078      	str	r0, [r7, #4]
 8013ce2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013ce8:	683b      	ldr	r3, [r7, #0]
 8013cea:	881b      	ldrh	r3, [r3, #0]
 8013cec:	68fa      	ldr	r2, [r7, #12]
 8013cee:	7812      	ldrb	r2, [r2, #0]
 8013cf0:	4413      	add	r3, r2
 8013cf2:	b29a      	uxth	r2, r3
 8013cf4:	683b      	ldr	r3, [r7, #0]
 8013cf6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	781b      	ldrb	r3, [r3, #0]
 8013cfc:	461a      	mov	r2, r3
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	4413      	add	r3, r2
 8013d02:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013d04:	68fb      	ldr	r3, [r7, #12]
}
 8013d06:	4618      	mov	r0, r3
 8013d08:	3714      	adds	r7, #20
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d10:	4770      	bx	lr

08013d12 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013d12:	b480      	push	{r7}
 8013d14:	b087      	sub	sp, #28
 8013d16:	af00      	add	r7, sp, #0
 8013d18:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013d1e:	697b      	ldr	r3, [r7, #20]
 8013d20:	781b      	ldrb	r3, [r3, #0]
 8013d22:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013d24:	697b      	ldr	r3, [r7, #20]
 8013d26:	3301      	adds	r3, #1
 8013d28:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013d2a:	697b      	ldr	r3, [r7, #20]
 8013d2c:	781b      	ldrb	r3, [r3, #0]
 8013d2e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013d30:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8013d34:	021b      	lsls	r3, r3, #8
 8013d36:	b21a      	sxth	r2, r3
 8013d38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013d3c:	4313      	orrs	r3, r2
 8013d3e:	b21b      	sxth	r3, r3
 8013d40:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013d42:	89fb      	ldrh	r3, [r7, #14]
}
 8013d44:	4618      	mov	r0, r3
 8013d46:	371c      	adds	r7, #28
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4e:	4770      	bx	lr

08013d50 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b084      	sub	sp, #16
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
 8013d58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	781b      	ldrb	r3, [r3, #0]
 8013d62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013d66:	2b40      	cmp	r3, #64	@ 0x40
 8013d68:	d005      	beq.n	8013d76 <USBD_StdDevReq+0x26>
 8013d6a:	2b40      	cmp	r3, #64	@ 0x40
 8013d6c:	d857      	bhi.n	8013e1e <USBD_StdDevReq+0xce>
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d00f      	beq.n	8013d92 <USBD_StdDevReq+0x42>
 8013d72:	2b20      	cmp	r3, #32
 8013d74:	d153      	bne.n	8013e1e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	32ae      	adds	r2, #174	@ 0xae
 8013d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d84:	689b      	ldr	r3, [r3, #8]
 8013d86:	6839      	ldr	r1, [r7, #0]
 8013d88:	6878      	ldr	r0, [r7, #4]
 8013d8a:	4798      	blx	r3
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8013d90:	e04a      	b.n	8013e28 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	785b      	ldrb	r3, [r3, #1]
 8013d96:	2b09      	cmp	r3, #9
 8013d98:	d83b      	bhi.n	8013e12 <USBD_StdDevReq+0xc2>
 8013d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8013da0 <USBD_StdDevReq+0x50>)
 8013d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013da0:	08013df5 	.word	0x08013df5
 8013da4:	08013e09 	.word	0x08013e09
 8013da8:	08013e13 	.word	0x08013e13
 8013dac:	08013dff 	.word	0x08013dff
 8013db0:	08013e13 	.word	0x08013e13
 8013db4:	08013dd3 	.word	0x08013dd3
 8013db8:	08013dc9 	.word	0x08013dc9
 8013dbc:	08013e13 	.word	0x08013e13
 8013dc0:	08013deb 	.word	0x08013deb
 8013dc4:	08013ddd 	.word	0x08013ddd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013dc8:	6839      	ldr	r1, [r7, #0]
 8013dca:	6878      	ldr	r0, [r7, #4]
 8013dcc:	f000 fa3c 	bl	8014248 <USBD_GetDescriptor>
          break;
 8013dd0:	e024      	b.n	8013e1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013dd2:	6839      	ldr	r1, [r7, #0]
 8013dd4:	6878      	ldr	r0, [r7, #4]
 8013dd6:	f000 fbcb 	bl	8014570 <USBD_SetAddress>
          break;
 8013dda:	e01f      	b.n	8013e1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013ddc:	6839      	ldr	r1, [r7, #0]
 8013dde:	6878      	ldr	r0, [r7, #4]
 8013de0:	f000 fc0a 	bl	80145f8 <USBD_SetConfig>
 8013de4:	4603      	mov	r3, r0
 8013de6:	73fb      	strb	r3, [r7, #15]
          break;
 8013de8:	e018      	b.n	8013e1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013dea:	6839      	ldr	r1, [r7, #0]
 8013dec:	6878      	ldr	r0, [r7, #4]
 8013dee:	f000 fcad 	bl	801474c <USBD_GetConfig>
          break;
 8013df2:	e013      	b.n	8013e1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013df4:	6839      	ldr	r1, [r7, #0]
 8013df6:	6878      	ldr	r0, [r7, #4]
 8013df8:	f000 fcde 	bl	80147b8 <USBD_GetStatus>
          break;
 8013dfc:	e00e      	b.n	8013e1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013dfe:	6839      	ldr	r1, [r7, #0]
 8013e00:	6878      	ldr	r0, [r7, #4]
 8013e02:	f000 fd0d 	bl	8014820 <USBD_SetFeature>
          break;
 8013e06:	e009      	b.n	8013e1c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013e08:	6839      	ldr	r1, [r7, #0]
 8013e0a:	6878      	ldr	r0, [r7, #4]
 8013e0c:	f000 fd31 	bl	8014872 <USBD_ClrFeature>
          break;
 8013e10:	e004      	b.n	8013e1c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8013e12:	6839      	ldr	r1, [r7, #0]
 8013e14:	6878      	ldr	r0, [r7, #4]
 8013e16:	f000 fd88 	bl	801492a <USBD_CtlError>
          break;
 8013e1a:	bf00      	nop
      }
      break;
 8013e1c:	e004      	b.n	8013e28 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8013e1e:	6839      	ldr	r1, [r7, #0]
 8013e20:	6878      	ldr	r0, [r7, #4]
 8013e22:	f000 fd82 	bl	801492a <USBD_CtlError>
      break;
 8013e26:	bf00      	nop
  }

  return ret;
 8013e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	3710      	adds	r7, #16
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd80      	pop	{r7, pc}
 8013e32:	bf00      	nop

08013e34 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b084      	sub	sp, #16
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
 8013e3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013e3e:	2300      	movs	r3, #0
 8013e40:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013e42:	683b      	ldr	r3, [r7, #0]
 8013e44:	781b      	ldrb	r3, [r3, #0]
 8013e46:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013e4a:	2b40      	cmp	r3, #64	@ 0x40
 8013e4c:	d005      	beq.n	8013e5a <USBD_StdItfReq+0x26>
 8013e4e:	2b40      	cmp	r3, #64	@ 0x40
 8013e50:	d852      	bhi.n	8013ef8 <USBD_StdItfReq+0xc4>
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d001      	beq.n	8013e5a <USBD_StdItfReq+0x26>
 8013e56:	2b20      	cmp	r3, #32
 8013e58:	d14e      	bne.n	8013ef8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e60:	b2db      	uxtb	r3, r3
 8013e62:	3b01      	subs	r3, #1
 8013e64:	2b02      	cmp	r3, #2
 8013e66:	d840      	bhi.n	8013eea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013e68:	683b      	ldr	r3, [r7, #0]
 8013e6a:	889b      	ldrh	r3, [r3, #4]
 8013e6c:	b2db      	uxtb	r3, r3
 8013e6e:	2b01      	cmp	r3, #1
 8013e70:	d836      	bhi.n	8013ee0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8013e72:	683b      	ldr	r3, [r7, #0]
 8013e74:	889b      	ldrh	r3, [r3, #4]
 8013e76:	b2db      	uxtb	r3, r3
 8013e78:	4619      	mov	r1, r3
 8013e7a:	6878      	ldr	r0, [r7, #4]
 8013e7c:	f7ff fedb 	bl	8013c36 <USBD_CoreFindIF>
 8013e80:	4603      	mov	r3, r0
 8013e82:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013e84:	7bbb      	ldrb	r3, [r7, #14]
 8013e86:	2bff      	cmp	r3, #255	@ 0xff
 8013e88:	d01d      	beq.n	8013ec6 <USBD_StdItfReq+0x92>
 8013e8a:	7bbb      	ldrb	r3, [r7, #14]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d11a      	bne.n	8013ec6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013e90:	7bba      	ldrb	r2, [r7, #14]
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	32ae      	adds	r2, #174	@ 0xae
 8013e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e9a:	689b      	ldr	r3, [r3, #8]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d00f      	beq.n	8013ec0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8013ea0:	7bba      	ldrb	r2, [r7, #14]
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013ea8:	7bba      	ldrb	r2, [r7, #14]
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	32ae      	adds	r2, #174	@ 0xae
 8013eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013eb2:	689b      	ldr	r3, [r3, #8]
 8013eb4:	6839      	ldr	r1, [r7, #0]
 8013eb6:	6878      	ldr	r0, [r7, #4]
 8013eb8:	4798      	blx	r3
 8013eba:	4603      	mov	r3, r0
 8013ebc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013ebe:	e004      	b.n	8013eca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013ec0:	2303      	movs	r3, #3
 8013ec2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013ec4:	e001      	b.n	8013eca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8013ec6:	2303      	movs	r3, #3
 8013ec8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013eca:	683b      	ldr	r3, [r7, #0]
 8013ecc:	88db      	ldrh	r3, [r3, #6]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d110      	bne.n	8013ef4 <USBD_StdItfReq+0xc0>
 8013ed2:	7bfb      	ldrb	r3, [r7, #15]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d10d      	bne.n	8013ef4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013ed8:	6878      	ldr	r0, [r7, #4]
 8013eda:	f000 fdfd 	bl	8014ad8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013ede:	e009      	b.n	8013ef4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8013ee0:	6839      	ldr	r1, [r7, #0]
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	f000 fd21 	bl	801492a <USBD_CtlError>
          break;
 8013ee8:	e004      	b.n	8013ef4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8013eea:	6839      	ldr	r1, [r7, #0]
 8013eec:	6878      	ldr	r0, [r7, #4]
 8013eee:	f000 fd1c 	bl	801492a <USBD_CtlError>
          break;
 8013ef2:	e000      	b.n	8013ef6 <USBD_StdItfReq+0xc2>
          break;
 8013ef4:	bf00      	nop
      }
      break;
 8013ef6:	e004      	b.n	8013f02 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013ef8:	6839      	ldr	r1, [r7, #0]
 8013efa:	6878      	ldr	r0, [r7, #4]
 8013efc:	f000 fd15 	bl	801492a <USBD_CtlError>
      break;
 8013f00:	bf00      	nop
  }

  return ret;
 8013f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f04:	4618      	mov	r0, r3
 8013f06:	3710      	adds	r7, #16
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	bd80      	pop	{r7, pc}

08013f0c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b084      	sub	sp, #16
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
 8013f14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8013f16:	2300      	movs	r3, #0
 8013f18:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	889b      	ldrh	r3, [r3, #4]
 8013f1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013f20:	683b      	ldr	r3, [r7, #0]
 8013f22:	781b      	ldrb	r3, [r3, #0]
 8013f24:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013f28:	2b40      	cmp	r3, #64	@ 0x40
 8013f2a:	d007      	beq.n	8013f3c <USBD_StdEPReq+0x30>
 8013f2c:	2b40      	cmp	r3, #64	@ 0x40
 8013f2e:	f200 817f 	bhi.w	8014230 <USBD_StdEPReq+0x324>
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d02a      	beq.n	8013f8c <USBD_StdEPReq+0x80>
 8013f36:	2b20      	cmp	r3, #32
 8013f38:	f040 817a 	bne.w	8014230 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013f3c:	7bbb      	ldrb	r3, [r7, #14]
 8013f3e:	4619      	mov	r1, r3
 8013f40:	6878      	ldr	r0, [r7, #4]
 8013f42:	f7ff fe85 	bl	8013c50 <USBD_CoreFindEP>
 8013f46:	4603      	mov	r3, r0
 8013f48:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013f4a:	7b7b      	ldrb	r3, [r7, #13]
 8013f4c:	2bff      	cmp	r3, #255	@ 0xff
 8013f4e:	f000 8174 	beq.w	801423a <USBD_StdEPReq+0x32e>
 8013f52:	7b7b      	ldrb	r3, [r7, #13]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	f040 8170 	bne.w	801423a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8013f5a:	7b7a      	ldrb	r2, [r7, #13]
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8013f62:	7b7a      	ldrb	r2, [r7, #13]
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	32ae      	adds	r2, #174	@ 0xae
 8013f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f6c:	689b      	ldr	r3, [r3, #8]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	f000 8163 	beq.w	801423a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013f74:	7b7a      	ldrb	r2, [r7, #13]
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	32ae      	adds	r2, #174	@ 0xae
 8013f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f7e:	689b      	ldr	r3, [r3, #8]
 8013f80:	6839      	ldr	r1, [r7, #0]
 8013f82:	6878      	ldr	r0, [r7, #4]
 8013f84:	4798      	blx	r3
 8013f86:	4603      	mov	r3, r0
 8013f88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8013f8a:	e156      	b.n	801423a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013f8c:	683b      	ldr	r3, [r7, #0]
 8013f8e:	785b      	ldrb	r3, [r3, #1]
 8013f90:	2b03      	cmp	r3, #3
 8013f92:	d008      	beq.n	8013fa6 <USBD_StdEPReq+0x9a>
 8013f94:	2b03      	cmp	r3, #3
 8013f96:	f300 8145 	bgt.w	8014224 <USBD_StdEPReq+0x318>
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	f000 809b 	beq.w	80140d6 <USBD_StdEPReq+0x1ca>
 8013fa0:	2b01      	cmp	r3, #1
 8013fa2:	d03c      	beq.n	801401e <USBD_StdEPReq+0x112>
 8013fa4:	e13e      	b.n	8014224 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013fac:	b2db      	uxtb	r3, r3
 8013fae:	2b02      	cmp	r3, #2
 8013fb0:	d002      	beq.n	8013fb8 <USBD_StdEPReq+0xac>
 8013fb2:	2b03      	cmp	r3, #3
 8013fb4:	d016      	beq.n	8013fe4 <USBD_StdEPReq+0xd8>
 8013fb6:	e02c      	b.n	8014012 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013fb8:	7bbb      	ldrb	r3, [r7, #14]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d00d      	beq.n	8013fda <USBD_StdEPReq+0xce>
 8013fbe:	7bbb      	ldrb	r3, [r7, #14]
 8013fc0:	2b80      	cmp	r3, #128	@ 0x80
 8013fc2:	d00a      	beq.n	8013fda <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013fc4:	7bbb      	ldrb	r3, [r7, #14]
 8013fc6:	4619      	mov	r1, r3
 8013fc8:	6878      	ldr	r0, [r7, #4]
 8013fca:	f001 f9e3 	bl	8015394 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013fce:	2180      	movs	r1, #128	@ 0x80
 8013fd0:	6878      	ldr	r0, [r7, #4]
 8013fd2:	f001 f9df 	bl	8015394 <USBD_LL_StallEP>
 8013fd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013fd8:	e020      	b.n	801401c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8013fda:	6839      	ldr	r1, [r7, #0]
 8013fdc:	6878      	ldr	r0, [r7, #4]
 8013fde:	f000 fca4 	bl	801492a <USBD_CtlError>
              break;
 8013fe2:	e01b      	b.n	801401c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	885b      	ldrh	r3, [r3, #2]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d10e      	bne.n	801400a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013fec:	7bbb      	ldrb	r3, [r7, #14]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d00b      	beq.n	801400a <USBD_StdEPReq+0xfe>
 8013ff2:	7bbb      	ldrb	r3, [r7, #14]
 8013ff4:	2b80      	cmp	r3, #128	@ 0x80
 8013ff6:	d008      	beq.n	801400a <USBD_StdEPReq+0xfe>
 8013ff8:	683b      	ldr	r3, [r7, #0]
 8013ffa:	88db      	ldrh	r3, [r3, #6]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d104      	bne.n	801400a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014000:	7bbb      	ldrb	r3, [r7, #14]
 8014002:	4619      	mov	r1, r3
 8014004:	6878      	ldr	r0, [r7, #4]
 8014006:	f001 f9c5 	bl	8015394 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801400a:	6878      	ldr	r0, [r7, #4]
 801400c:	f000 fd64 	bl	8014ad8 <USBD_CtlSendStatus>

              break;
 8014010:	e004      	b.n	801401c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8014012:	6839      	ldr	r1, [r7, #0]
 8014014:	6878      	ldr	r0, [r7, #4]
 8014016:	f000 fc88 	bl	801492a <USBD_CtlError>
              break;
 801401a:	bf00      	nop
          }
          break;
 801401c:	e107      	b.n	801422e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014024:	b2db      	uxtb	r3, r3
 8014026:	2b02      	cmp	r3, #2
 8014028:	d002      	beq.n	8014030 <USBD_StdEPReq+0x124>
 801402a:	2b03      	cmp	r3, #3
 801402c:	d016      	beq.n	801405c <USBD_StdEPReq+0x150>
 801402e:	e04b      	b.n	80140c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014030:	7bbb      	ldrb	r3, [r7, #14]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d00d      	beq.n	8014052 <USBD_StdEPReq+0x146>
 8014036:	7bbb      	ldrb	r3, [r7, #14]
 8014038:	2b80      	cmp	r3, #128	@ 0x80
 801403a:	d00a      	beq.n	8014052 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801403c:	7bbb      	ldrb	r3, [r7, #14]
 801403e:	4619      	mov	r1, r3
 8014040:	6878      	ldr	r0, [r7, #4]
 8014042:	f001 f9a7 	bl	8015394 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014046:	2180      	movs	r1, #128	@ 0x80
 8014048:	6878      	ldr	r0, [r7, #4]
 801404a:	f001 f9a3 	bl	8015394 <USBD_LL_StallEP>
 801404e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014050:	e040      	b.n	80140d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8014052:	6839      	ldr	r1, [r7, #0]
 8014054:	6878      	ldr	r0, [r7, #4]
 8014056:	f000 fc68 	bl	801492a <USBD_CtlError>
              break;
 801405a:	e03b      	b.n	80140d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801405c:	683b      	ldr	r3, [r7, #0]
 801405e:	885b      	ldrh	r3, [r3, #2]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d136      	bne.n	80140d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014064:	7bbb      	ldrb	r3, [r7, #14]
 8014066:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801406a:	2b00      	cmp	r3, #0
 801406c:	d004      	beq.n	8014078 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801406e:	7bbb      	ldrb	r3, [r7, #14]
 8014070:	4619      	mov	r1, r3
 8014072:	6878      	ldr	r0, [r7, #4]
 8014074:	f001 f9ad 	bl	80153d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014078:	6878      	ldr	r0, [r7, #4]
 801407a:	f000 fd2d 	bl	8014ad8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801407e:	7bbb      	ldrb	r3, [r7, #14]
 8014080:	4619      	mov	r1, r3
 8014082:	6878      	ldr	r0, [r7, #4]
 8014084:	f7ff fde4 	bl	8013c50 <USBD_CoreFindEP>
 8014088:	4603      	mov	r3, r0
 801408a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801408c:	7b7b      	ldrb	r3, [r7, #13]
 801408e:	2bff      	cmp	r3, #255	@ 0xff
 8014090:	d01f      	beq.n	80140d2 <USBD_StdEPReq+0x1c6>
 8014092:	7b7b      	ldrb	r3, [r7, #13]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d11c      	bne.n	80140d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014098:	7b7a      	ldrb	r2, [r7, #13]
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80140a0:	7b7a      	ldrb	r2, [r7, #13]
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	32ae      	adds	r2, #174	@ 0xae
 80140a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140aa:	689b      	ldr	r3, [r3, #8]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d010      	beq.n	80140d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80140b0:	7b7a      	ldrb	r2, [r7, #13]
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	32ae      	adds	r2, #174	@ 0xae
 80140b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140ba:	689b      	ldr	r3, [r3, #8]
 80140bc:	6839      	ldr	r1, [r7, #0]
 80140be:	6878      	ldr	r0, [r7, #4]
 80140c0:	4798      	blx	r3
 80140c2:	4603      	mov	r3, r0
 80140c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80140c6:	e004      	b.n	80140d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80140c8:	6839      	ldr	r1, [r7, #0]
 80140ca:	6878      	ldr	r0, [r7, #4]
 80140cc:	f000 fc2d 	bl	801492a <USBD_CtlError>
              break;
 80140d0:	e000      	b.n	80140d4 <USBD_StdEPReq+0x1c8>
              break;
 80140d2:	bf00      	nop
          }
          break;
 80140d4:	e0ab      	b.n	801422e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80140dc:	b2db      	uxtb	r3, r3
 80140de:	2b02      	cmp	r3, #2
 80140e0:	d002      	beq.n	80140e8 <USBD_StdEPReq+0x1dc>
 80140e2:	2b03      	cmp	r3, #3
 80140e4:	d032      	beq.n	801414c <USBD_StdEPReq+0x240>
 80140e6:	e097      	b.n	8014218 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80140e8:	7bbb      	ldrb	r3, [r7, #14]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d007      	beq.n	80140fe <USBD_StdEPReq+0x1f2>
 80140ee:	7bbb      	ldrb	r3, [r7, #14]
 80140f0:	2b80      	cmp	r3, #128	@ 0x80
 80140f2:	d004      	beq.n	80140fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80140f4:	6839      	ldr	r1, [r7, #0]
 80140f6:	6878      	ldr	r0, [r7, #4]
 80140f8:	f000 fc17 	bl	801492a <USBD_CtlError>
                break;
 80140fc:	e091      	b.n	8014222 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80140fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014102:	2b00      	cmp	r3, #0
 8014104:	da0b      	bge.n	801411e <USBD_StdEPReq+0x212>
 8014106:	7bbb      	ldrb	r3, [r7, #14]
 8014108:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801410c:	4613      	mov	r3, r2
 801410e:	009b      	lsls	r3, r3, #2
 8014110:	4413      	add	r3, r2
 8014112:	009b      	lsls	r3, r3, #2
 8014114:	3310      	adds	r3, #16
 8014116:	687a      	ldr	r2, [r7, #4]
 8014118:	4413      	add	r3, r2
 801411a:	3304      	adds	r3, #4
 801411c:	e00b      	b.n	8014136 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801411e:	7bbb      	ldrb	r3, [r7, #14]
 8014120:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014124:	4613      	mov	r3, r2
 8014126:	009b      	lsls	r3, r3, #2
 8014128:	4413      	add	r3, r2
 801412a:	009b      	lsls	r3, r3, #2
 801412c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014130:	687a      	ldr	r2, [r7, #4]
 8014132:	4413      	add	r3, r2
 8014134:	3304      	adds	r3, #4
 8014136:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014138:	68bb      	ldr	r3, [r7, #8]
 801413a:	2200      	movs	r2, #0
 801413c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	2202      	movs	r2, #2
 8014142:	4619      	mov	r1, r3
 8014144:	6878      	ldr	r0, [r7, #4]
 8014146:	f000 fc6d 	bl	8014a24 <USBD_CtlSendData>
              break;
 801414a:	e06a      	b.n	8014222 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801414c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014150:	2b00      	cmp	r3, #0
 8014152:	da11      	bge.n	8014178 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014154:	7bbb      	ldrb	r3, [r7, #14]
 8014156:	f003 020f 	and.w	r2, r3, #15
 801415a:	6879      	ldr	r1, [r7, #4]
 801415c:	4613      	mov	r3, r2
 801415e:	009b      	lsls	r3, r3, #2
 8014160:	4413      	add	r3, r2
 8014162:	009b      	lsls	r3, r3, #2
 8014164:	440b      	add	r3, r1
 8014166:	3324      	adds	r3, #36	@ 0x24
 8014168:	881b      	ldrh	r3, [r3, #0]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d117      	bne.n	801419e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801416e:	6839      	ldr	r1, [r7, #0]
 8014170:	6878      	ldr	r0, [r7, #4]
 8014172:	f000 fbda 	bl	801492a <USBD_CtlError>
                  break;
 8014176:	e054      	b.n	8014222 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014178:	7bbb      	ldrb	r3, [r7, #14]
 801417a:	f003 020f 	and.w	r2, r3, #15
 801417e:	6879      	ldr	r1, [r7, #4]
 8014180:	4613      	mov	r3, r2
 8014182:	009b      	lsls	r3, r3, #2
 8014184:	4413      	add	r3, r2
 8014186:	009b      	lsls	r3, r3, #2
 8014188:	440b      	add	r3, r1
 801418a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801418e:	881b      	ldrh	r3, [r3, #0]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d104      	bne.n	801419e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014194:	6839      	ldr	r1, [r7, #0]
 8014196:	6878      	ldr	r0, [r7, #4]
 8014198:	f000 fbc7 	bl	801492a <USBD_CtlError>
                  break;
 801419c:	e041      	b.n	8014222 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801419e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	da0b      	bge.n	80141be <USBD_StdEPReq+0x2b2>
 80141a6:	7bbb      	ldrb	r3, [r7, #14]
 80141a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80141ac:	4613      	mov	r3, r2
 80141ae:	009b      	lsls	r3, r3, #2
 80141b0:	4413      	add	r3, r2
 80141b2:	009b      	lsls	r3, r3, #2
 80141b4:	3310      	adds	r3, #16
 80141b6:	687a      	ldr	r2, [r7, #4]
 80141b8:	4413      	add	r3, r2
 80141ba:	3304      	adds	r3, #4
 80141bc:	e00b      	b.n	80141d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80141be:	7bbb      	ldrb	r3, [r7, #14]
 80141c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80141c4:	4613      	mov	r3, r2
 80141c6:	009b      	lsls	r3, r3, #2
 80141c8:	4413      	add	r3, r2
 80141ca:	009b      	lsls	r3, r3, #2
 80141cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80141d0:	687a      	ldr	r2, [r7, #4]
 80141d2:	4413      	add	r3, r2
 80141d4:	3304      	adds	r3, #4
 80141d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80141d8:	7bbb      	ldrb	r3, [r7, #14]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d002      	beq.n	80141e4 <USBD_StdEPReq+0x2d8>
 80141de:	7bbb      	ldrb	r3, [r7, #14]
 80141e0:	2b80      	cmp	r3, #128	@ 0x80
 80141e2:	d103      	bne.n	80141ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80141e4:	68bb      	ldr	r3, [r7, #8]
 80141e6:	2200      	movs	r2, #0
 80141e8:	601a      	str	r2, [r3, #0]
 80141ea:	e00e      	b.n	801420a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80141ec:	7bbb      	ldrb	r3, [r7, #14]
 80141ee:	4619      	mov	r1, r3
 80141f0:	6878      	ldr	r0, [r7, #4]
 80141f2:	f001 f90d 	bl	8015410 <USBD_LL_IsStallEP>
 80141f6:	4603      	mov	r3, r0
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d003      	beq.n	8014204 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	2201      	movs	r2, #1
 8014200:	601a      	str	r2, [r3, #0]
 8014202:	e002      	b.n	801420a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014204:	68bb      	ldr	r3, [r7, #8]
 8014206:	2200      	movs	r2, #0
 8014208:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801420a:	68bb      	ldr	r3, [r7, #8]
 801420c:	2202      	movs	r2, #2
 801420e:	4619      	mov	r1, r3
 8014210:	6878      	ldr	r0, [r7, #4]
 8014212:	f000 fc07 	bl	8014a24 <USBD_CtlSendData>
              break;
 8014216:	e004      	b.n	8014222 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014218:	6839      	ldr	r1, [r7, #0]
 801421a:	6878      	ldr	r0, [r7, #4]
 801421c:	f000 fb85 	bl	801492a <USBD_CtlError>
              break;
 8014220:	bf00      	nop
          }
          break;
 8014222:	e004      	b.n	801422e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014224:	6839      	ldr	r1, [r7, #0]
 8014226:	6878      	ldr	r0, [r7, #4]
 8014228:	f000 fb7f 	bl	801492a <USBD_CtlError>
          break;
 801422c:	bf00      	nop
      }
      break;
 801422e:	e005      	b.n	801423c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014230:	6839      	ldr	r1, [r7, #0]
 8014232:	6878      	ldr	r0, [r7, #4]
 8014234:	f000 fb79 	bl	801492a <USBD_CtlError>
      break;
 8014238:	e000      	b.n	801423c <USBD_StdEPReq+0x330>
      break;
 801423a:	bf00      	nop
  }

  return ret;
 801423c:	7bfb      	ldrb	r3, [r7, #15]
}
 801423e:	4618      	mov	r0, r3
 8014240:	3710      	adds	r7, #16
 8014242:	46bd      	mov	sp, r7
 8014244:	bd80      	pop	{r7, pc}
	...

08014248 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b084      	sub	sp, #16
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
 8014250:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014252:	2300      	movs	r3, #0
 8014254:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014256:	2300      	movs	r3, #0
 8014258:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801425a:	2300      	movs	r3, #0
 801425c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801425e:	683b      	ldr	r3, [r7, #0]
 8014260:	885b      	ldrh	r3, [r3, #2]
 8014262:	0a1b      	lsrs	r3, r3, #8
 8014264:	b29b      	uxth	r3, r3
 8014266:	3b01      	subs	r3, #1
 8014268:	2b0e      	cmp	r3, #14
 801426a:	f200 8152 	bhi.w	8014512 <USBD_GetDescriptor+0x2ca>
 801426e:	a201      	add	r2, pc, #4	@ (adr r2, 8014274 <USBD_GetDescriptor+0x2c>)
 8014270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014274:	080142e5 	.word	0x080142e5
 8014278:	080142fd 	.word	0x080142fd
 801427c:	0801433d 	.word	0x0801433d
 8014280:	08014513 	.word	0x08014513
 8014284:	08014513 	.word	0x08014513
 8014288:	080144b3 	.word	0x080144b3
 801428c:	080144df 	.word	0x080144df
 8014290:	08014513 	.word	0x08014513
 8014294:	08014513 	.word	0x08014513
 8014298:	08014513 	.word	0x08014513
 801429c:	08014513 	.word	0x08014513
 80142a0:	08014513 	.word	0x08014513
 80142a4:	08014513 	.word	0x08014513
 80142a8:	08014513 	.word	0x08014513
 80142ac:	080142b1 	.word	0x080142b1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80142b6:	69db      	ldr	r3, [r3, #28]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d00b      	beq.n	80142d4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80142c2:	69db      	ldr	r3, [r3, #28]
 80142c4:	687a      	ldr	r2, [r7, #4]
 80142c6:	7c12      	ldrb	r2, [r2, #16]
 80142c8:	f107 0108 	add.w	r1, r7, #8
 80142cc:	4610      	mov	r0, r2
 80142ce:	4798      	blx	r3
 80142d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80142d2:	e126      	b.n	8014522 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80142d4:	6839      	ldr	r1, [r7, #0]
 80142d6:	6878      	ldr	r0, [r7, #4]
 80142d8:	f000 fb27 	bl	801492a <USBD_CtlError>
        err++;
 80142dc:	7afb      	ldrb	r3, [r7, #11]
 80142de:	3301      	adds	r3, #1
 80142e0:	72fb      	strb	r3, [r7, #11]
      break;
 80142e2:	e11e      	b.n	8014522 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	687a      	ldr	r2, [r7, #4]
 80142ee:	7c12      	ldrb	r2, [r2, #16]
 80142f0:	f107 0108 	add.w	r1, r7, #8
 80142f4:	4610      	mov	r0, r2
 80142f6:	4798      	blx	r3
 80142f8:	60f8      	str	r0, [r7, #12]
      break;
 80142fa:	e112      	b.n	8014522 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	7c1b      	ldrb	r3, [r3, #16]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d10d      	bne.n	8014320 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801430a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801430c:	f107 0208 	add.w	r2, r7, #8
 8014310:	4610      	mov	r0, r2
 8014312:	4798      	blx	r3
 8014314:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	3301      	adds	r3, #1
 801431a:	2202      	movs	r2, #2
 801431c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801431e:	e100      	b.n	8014522 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014328:	f107 0208 	add.w	r2, r7, #8
 801432c:	4610      	mov	r0, r2
 801432e:	4798      	blx	r3
 8014330:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	3301      	adds	r3, #1
 8014336:	2202      	movs	r2, #2
 8014338:	701a      	strb	r2, [r3, #0]
      break;
 801433a:	e0f2      	b.n	8014522 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801433c:	683b      	ldr	r3, [r7, #0]
 801433e:	885b      	ldrh	r3, [r3, #2]
 8014340:	b2db      	uxtb	r3, r3
 8014342:	2b05      	cmp	r3, #5
 8014344:	f200 80ac 	bhi.w	80144a0 <USBD_GetDescriptor+0x258>
 8014348:	a201      	add	r2, pc, #4	@ (adr r2, 8014350 <USBD_GetDescriptor+0x108>)
 801434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801434e:	bf00      	nop
 8014350:	08014369 	.word	0x08014369
 8014354:	0801439d 	.word	0x0801439d
 8014358:	080143d1 	.word	0x080143d1
 801435c:	08014405 	.word	0x08014405
 8014360:	08014439 	.word	0x08014439
 8014364:	0801446d 	.word	0x0801446d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801436e:	685b      	ldr	r3, [r3, #4]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d00b      	beq.n	801438c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801437a:	685b      	ldr	r3, [r3, #4]
 801437c:	687a      	ldr	r2, [r7, #4]
 801437e:	7c12      	ldrb	r2, [r2, #16]
 8014380:	f107 0108 	add.w	r1, r7, #8
 8014384:	4610      	mov	r0, r2
 8014386:	4798      	blx	r3
 8014388:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801438a:	e091      	b.n	80144b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801438c:	6839      	ldr	r1, [r7, #0]
 801438e:	6878      	ldr	r0, [r7, #4]
 8014390:	f000 facb 	bl	801492a <USBD_CtlError>
            err++;
 8014394:	7afb      	ldrb	r3, [r7, #11]
 8014396:	3301      	adds	r3, #1
 8014398:	72fb      	strb	r3, [r7, #11]
          break;
 801439a:	e089      	b.n	80144b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80143a2:	689b      	ldr	r3, [r3, #8]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d00b      	beq.n	80143c0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80143ae:	689b      	ldr	r3, [r3, #8]
 80143b0:	687a      	ldr	r2, [r7, #4]
 80143b2:	7c12      	ldrb	r2, [r2, #16]
 80143b4:	f107 0108 	add.w	r1, r7, #8
 80143b8:	4610      	mov	r0, r2
 80143ba:	4798      	blx	r3
 80143bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80143be:	e077      	b.n	80144b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80143c0:	6839      	ldr	r1, [r7, #0]
 80143c2:	6878      	ldr	r0, [r7, #4]
 80143c4:	f000 fab1 	bl	801492a <USBD_CtlError>
            err++;
 80143c8:	7afb      	ldrb	r3, [r7, #11]
 80143ca:	3301      	adds	r3, #1
 80143cc:	72fb      	strb	r3, [r7, #11]
          break;
 80143ce:	e06f      	b.n	80144b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80143d6:	68db      	ldr	r3, [r3, #12]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d00b      	beq.n	80143f4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80143e2:	68db      	ldr	r3, [r3, #12]
 80143e4:	687a      	ldr	r2, [r7, #4]
 80143e6:	7c12      	ldrb	r2, [r2, #16]
 80143e8:	f107 0108 	add.w	r1, r7, #8
 80143ec:	4610      	mov	r0, r2
 80143ee:	4798      	blx	r3
 80143f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80143f2:	e05d      	b.n	80144b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80143f4:	6839      	ldr	r1, [r7, #0]
 80143f6:	6878      	ldr	r0, [r7, #4]
 80143f8:	f000 fa97 	bl	801492a <USBD_CtlError>
            err++;
 80143fc:	7afb      	ldrb	r3, [r7, #11]
 80143fe:	3301      	adds	r3, #1
 8014400:	72fb      	strb	r3, [r7, #11]
          break;
 8014402:	e055      	b.n	80144b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801440a:	691b      	ldr	r3, [r3, #16]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d00b      	beq.n	8014428 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014416:	691b      	ldr	r3, [r3, #16]
 8014418:	687a      	ldr	r2, [r7, #4]
 801441a:	7c12      	ldrb	r2, [r2, #16]
 801441c:	f107 0108 	add.w	r1, r7, #8
 8014420:	4610      	mov	r0, r2
 8014422:	4798      	blx	r3
 8014424:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014426:	e043      	b.n	80144b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014428:	6839      	ldr	r1, [r7, #0]
 801442a:	6878      	ldr	r0, [r7, #4]
 801442c:	f000 fa7d 	bl	801492a <USBD_CtlError>
            err++;
 8014430:	7afb      	ldrb	r3, [r7, #11]
 8014432:	3301      	adds	r3, #1
 8014434:	72fb      	strb	r3, [r7, #11]
          break;
 8014436:	e03b      	b.n	80144b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801443e:	695b      	ldr	r3, [r3, #20]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d00b      	beq.n	801445c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801444a:	695b      	ldr	r3, [r3, #20]
 801444c:	687a      	ldr	r2, [r7, #4]
 801444e:	7c12      	ldrb	r2, [r2, #16]
 8014450:	f107 0108 	add.w	r1, r7, #8
 8014454:	4610      	mov	r0, r2
 8014456:	4798      	blx	r3
 8014458:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801445a:	e029      	b.n	80144b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801445c:	6839      	ldr	r1, [r7, #0]
 801445e:	6878      	ldr	r0, [r7, #4]
 8014460:	f000 fa63 	bl	801492a <USBD_CtlError>
            err++;
 8014464:	7afb      	ldrb	r3, [r7, #11]
 8014466:	3301      	adds	r3, #1
 8014468:	72fb      	strb	r3, [r7, #11]
          break;
 801446a:	e021      	b.n	80144b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014472:	699b      	ldr	r3, [r3, #24]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d00b      	beq.n	8014490 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801447e:	699b      	ldr	r3, [r3, #24]
 8014480:	687a      	ldr	r2, [r7, #4]
 8014482:	7c12      	ldrb	r2, [r2, #16]
 8014484:	f107 0108 	add.w	r1, r7, #8
 8014488:	4610      	mov	r0, r2
 801448a:	4798      	blx	r3
 801448c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801448e:	e00f      	b.n	80144b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014490:	6839      	ldr	r1, [r7, #0]
 8014492:	6878      	ldr	r0, [r7, #4]
 8014494:	f000 fa49 	bl	801492a <USBD_CtlError>
            err++;
 8014498:	7afb      	ldrb	r3, [r7, #11]
 801449a:	3301      	adds	r3, #1
 801449c:	72fb      	strb	r3, [r7, #11]
          break;
 801449e:	e007      	b.n	80144b0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80144a0:	6839      	ldr	r1, [r7, #0]
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f000 fa41 	bl	801492a <USBD_CtlError>
          err++;
 80144a8:	7afb      	ldrb	r3, [r7, #11]
 80144aa:	3301      	adds	r3, #1
 80144ac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80144ae:	bf00      	nop
      }
      break;
 80144b0:	e037      	b.n	8014522 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	7c1b      	ldrb	r3, [r3, #16]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d109      	bne.n	80144ce <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80144c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80144c2:	f107 0208 	add.w	r2, r7, #8
 80144c6:	4610      	mov	r0, r2
 80144c8:	4798      	blx	r3
 80144ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80144cc:	e029      	b.n	8014522 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80144ce:	6839      	ldr	r1, [r7, #0]
 80144d0:	6878      	ldr	r0, [r7, #4]
 80144d2:	f000 fa2a 	bl	801492a <USBD_CtlError>
        err++;
 80144d6:	7afb      	ldrb	r3, [r7, #11]
 80144d8:	3301      	adds	r3, #1
 80144da:	72fb      	strb	r3, [r7, #11]
      break;
 80144dc:	e021      	b.n	8014522 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	7c1b      	ldrb	r3, [r3, #16]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d10d      	bne.n	8014502 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80144ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80144ee:	f107 0208 	add.w	r2, r7, #8
 80144f2:	4610      	mov	r0, r2
 80144f4:	4798      	blx	r3
 80144f6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	3301      	adds	r3, #1
 80144fc:	2207      	movs	r2, #7
 80144fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014500:	e00f      	b.n	8014522 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014502:	6839      	ldr	r1, [r7, #0]
 8014504:	6878      	ldr	r0, [r7, #4]
 8014506:	f000 fa10 	bl	801492a <USBD_CtlError>
        err++;
 801450a:	7afb      	ldrb	r3, [r7, #11]
 801450c:	3301      	adds	r3, #1
 801450e:	72fb      	strb	r3, [r7, #11]
      break;
 8014510:	e007      	b.n	8014522 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8014512:	6839      	ldr	r1, [r7, #0]
 8014514:	6878      	ldr	r0, [r7, #4]
 8014516:	f000 fa08 	bl	801492a <USBD_CtlError>
      err++;
 801451a:	7afb      	ldrb	r3, [r7, #11]
 801451c:	3301      	adds	r3, #1
 801451e:	72fb      	strb	r3, [r7, #11]
      break;
 8014520:	bf00      	nop
  }

  if (err != 0U)
 8014522:	7afb      	ldrb	r3, [r7, #11]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d11e      	bne.n	8014566 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	88db      	ldrh	r3, [r3, #6]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d016      	beq.n	801455e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014530:	893b      	ldrh	r3, [r7, #8]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d00e      	beq.n	8014554 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8014536:	683b      	ldr	r3, [r7, #0]
 8014538:	88da      	ldrh	r2, [r3, #6]
 801453a:	893b      	ldrh	r3, [r7, #8]
 801453c:	4293      	cmp	r3, r2
 801453e:	bf28      	it	cs
 8014540:	4613      	movcs	r3, r2
 8014542:	b29b      	uxth	r3, r3
 8014544:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014546:	893b      	ldrh	r3, [r7, #8]
 8014548:	461a      	mov	r2, r3
 801454a:	68f9      	ldr	r1, [r7, #12]
 801454c:	6878      	ldr	r0, [r7, #4]
 801454e:	f000 fa69 	bl	8014a24 <USBD_CtlSendData>
 8014552:	e009      	b.n	8014568 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014554:	6839      	ldr	r1, [r7, #0]
 8014556:	6878      	ldr	r0, [r7, #4]
 8014558:	f000 f9e7 	bl	801492a <USBD_CtlError>
 801455c:	e004      	b.n	8014568 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801455e:	6878      	ldr	r0, [r7, #4]
 8014560:	f000 faba 	bl	8014ad8 <USBD_CtlSendStatus>
 8014564:	e000      	b.n	8014568 <USBD_GetDescriptor+0x320>
    return;
 8014566:	bf00      	nop
  }
}
 8014568:	3710      	adds	r7, #16
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}
 801456e:	bf00      	nop

08014570 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b084      	sub	sp, #16
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
 8014578:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801457a:	683b      	ldr	r3, [r7, #0]
 801457c:	889b      	ldrh	r3, [r3, #4]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d131      	bne.n	80145e6 <USBD_SetAddress+0x76>
 8014582:	683b      	ldr	r3, [r7, #0]
 8014584:	88db      	ldrh	r3, [r3, #6]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d12d      	bne.n	80145e6 <USBD_SetAddress+0x76>
 801458a:	683b      	ldr	r3, [r7, #0]
 801458c:	885b      	ldrh	r3, [r3, #2]
 801458e:	2b7f      	cmp	r3, #127	@ 0x7f
 8014590:	d829      	bhi.n	80145e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014592:	683b      	ldr	r3, [r7, #0]
 8014594:	885b      	ldrh	r3, [r3, #2]
 8014596:	b2db      	uxtb	r3, r3
 8014598:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801459c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80145a4:	b2db      	uxtb	r3, r3
 80145a6:	2b03      	cmp	r3, #3
 80145a8:	d104      	bne.n	80145b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80145aa:	6839      	ldr	r1, [r7, #0]
 80145ac:	6878      	ldr	r0, [r7, #4]
 80145ae:	f000 f9bc 	bl	801492a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145b2:	e01d      	b.n	80145f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	7bfa      	ldrb	r2, [r7, #15]
 80145b8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80145bc:	7bfb      	ldrb	r3, [r7, #15]
 80145be:	4619      	mov	r1, r3
 80145c0:	6878      	ldr	r0, [r7, #4]
 80145c2:	f000 ff51 	bl	8015468 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80145c6:	6878      	ldr	r0, [r7, #4]
 80145c8:	f000 fa86 	bl	8014ad8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80145cc:	7bfb      	ldrb	r3, [r7, #15]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d004      	beq.n	80145dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	2202      	movs	r2, #2
 80145d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145da:	e009      	b.n	80145f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	2201      	movs	r2, #1
 80145e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145e4:	e004      	b.n	80145f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80145e6:	6839      	ldr	r1, [r7, #0]
 80145e8:	6878      	ldr	r0, [r7, #4]
 80145ea:	f000 f99e 	bl	801492a <USBD_CtlError>
  }
}
 80145ee:	bf00      	nop
 80145f0:	bf00      	nop
 80145f2:	3710      	adds	r7, #16
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd80      	pop	{r7, pc}

080145f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	b084      	sub	sp, #16
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	6078      	str	r0, [r7, #4]
 8014600:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014602:	2300      	movs	r3, #0
 8014604:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014606:	683b      	ldr	r3, [r7, #0]
 8014608:	885b      	ldrh	r3, [r3, #2]
 801460a:	b2da      	uxtb	r2, r3
 801460c:	4b4e      	ldr	r3, [pc, #312]	@ (8014748 <USBD_SetConfig+0x150>)
 801460e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014610:	4b4d      	ldr	r3, [pc, #308]	@ (8014748 <USBD_SetConfig+0x150>)
 8014612:	781b      	ldrb	r3, [r3, #0]
 8014614:	2b01      	cmp	r3, #1
 8014616:	d905      	bls.n	8014624 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014618:	6839      	ldr	r1, [r7, #0]
 801461a:	6878      	ldr	r0, [r7, #4]
 801461c:	f000 f985 	bl	801492a <USBD_CtlError>
    return USBD_FAIL;
 8014620:	2303      	movs	r3, #3
 8014622:	e08c      	b.n	801473e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801462a:	b2db      	uxtb	r3, r3
 801462c:	2b02      	cmp	r3, #2
 801462e:	d002      	beq.n	8014636 <USBD_SetConfig+0x3e>
 8014630:	2b03      	cmp	r3, #3
 8014632:	d029      	beq.n	8014688 <USBD_SetConfig+0x90>
 8014634:	e075      	b.n	8014722 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014636:	4b44      	ldr	r3, [pc, #272]	@ (8014748 <USBD_SetConfig+0x150>)
 8014638:	781b      	ldrb	r3, [r3, #0]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d020      	beq.n	8014680 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801463e:	4b42      	ldr	r3, [pc, #264]	@ (8014748 <USBD_SetConfig+0x150>)
 8014640:	781b      	ldrb	r3, [r3, #0]
 8014642:	461a      	mov	r2, r3
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014648:	4b3f      	ldr	r3, [pc, #252]	@ (8014748 <USBD_SetConfig+0x150>)
 801464a:	781b      	ldrb	r3, [r3, #0]
 801464c:	4619      	mov	r1, r3
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	f7fe ffb9 	bl	80135c6 <USBD_SetClassConfig>
 8014654:	4603      	mov	r3, r0
 8014656:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014658:	7bfb      	ldrb	r3, [r7, #15]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d008      	beq.n	8014670 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801465e:	6839      	ldr	r1, [r7, #0]
 8014660:	6878      	ldr	r0, [r7, #4]
 8014662:	f000 f962 	bl	801492a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	2202      	movs	r2, #2
 801466a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801466e:	e065      	b.n	801473c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014670:	6878      	ldr	r0, [r7, #4]
 8014672:	f000 fa31 	bl	8014ad8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	2203      	movs	r2, #3
 801467a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801467e:	e05d      	b.n	801473c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014680:	6878      	ldr	r0, [r7, #4]
 8014682:	f000 fa29 	bl	8014ad8 <USBD_CtlSendStatus>
      break;
 8014686:	e059      	b.n	801473c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014688:	4b2f      	ldr	r3, [pc, #188]	@ (8014748 <USBD_SetConfig+0x150>)
 801468a:	781b      	ldrb	r3, [r3, #0]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d112      	bne.n	80146b6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	2202      	movs	r2, #2
 8014694:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8014698:	4b2b      	ldr	r3, [pc, #172]	@ (8014748 <USBD_SetConfig+0x150>)
 801469a:	781b      	ldrb	r3, [r3, #0]
 801469c:	461a      	mov	r2, r3
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80146a2:	4b29      	ldr	r3, [pc, #164]	@ (8014748 <USBD_SetConfig+0x150>)
 80146a4:	781b      	ldrb	r3, [r3, #0]
 80146a6:	4619      	mov	r1, r3
 80146a8:	6878      	ldr	r0, [r7, #4]
 80146aa:	f7fe ffa8 	bl	80135fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80146ae:	6878      	ldr	r0, [r7, #4]
 80146b0:	f000 fa12 	bl	8014ad8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80146b4:	e042      	b.n	801473c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80146b6:	4b24      	ldr	r3, [pc, #144]	@ (8014748 <USBD_SetConfig+0x150>)
 80146b8:	781b      	ldrb	r3, [r3, #0]
 80146ba:	461a      	mov	r2, r3
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	685b      	ldr	r3, [r3, #4]
 80146c0:	429a      	cmp	r2, r3
 80146c2:	d02a      	beq.n	801471a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	685b      	ldr	r3, [r3, #4]
 80146c8:	b2db      	uxtb	r3, r3
 80146ca:	4619      	mov	r1, r3
 80146cc:	6878      	ldr	r0, [r7, #4]
 80146ce:	f7fe ff96 	bl	80135fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80146d2:	4b1d      	ldr	r3, [pc, #116]	@ (8014748 <USBD_SetConfig+0x150>)
 80146d4:	781b      	ldrb	r3, [r3, #0]
 80146d6:	461a      	mov	r2, r3
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80146dc:	4b1a      	ldr	r3, [pc, #104]	@ (8014748 <USBD_SetConfig+0x150>)
 80146de:	781b      	ldrb	r3, [r3, #0]
 80146e0:	4619      	mov	r1, r3
 80146e2:	6878      	ldr	r0, [r7, #4]
 80146e4:	f7fe ff6f 	bl	80135c6 <USBD_SetClassConfig>
 80146e8:	4603      	mov	r3, r0
 80146ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80146ec:	7bfb      	ldrb	r3, [r7, #15]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d00f      	beq.n	8014712 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80146f2:	6839      	ldr	r1, [r7, #0]
 80146f4:	6878      	ldr	r0, [r7, #4]
 80146f6:	f000 f918 	bl	801492a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	685b      	ldr	r3, [r3, #4]
 80146fe:	b2db      	uxtb	r3, r3
 8014700:	4619      	mov	r1, r3
 8014702:	6878      	ldr	r0, [r7, #4]
 8014704:	f7fe ff7b 	bl	80135fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	2202      	movs	r2, #2
 801470c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014710:	e014      	b.n	801473c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014712:	6878      	ldr	r0, [r7, #4]
 8014714:	f000 f9e0 	bl	8014ad8 <USBD_CtlSendStatus>
      break;
 8014718:	e010      	b.n	801473c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801471a:	6878      	ldr	r0, [r7, #4]
 801471c:	f000 f9dc 	bl	8014ad8 <USBD_CtlSendStatus>
      break;
 8014720:	e00c      	b.n	801473c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014722:	6839      	ldr	r1, [r7, #0]
 8014724:	6878      	ldr	r0, [r7, #4]
 8014726:	f000 f900 	bl	801492a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801472a:	4b07      	ldr	r3, [pc, #28]	@ (8014748 <USBD_SetConfig+0x150>)
 801472c:	781b      	ldrb	r3, [r3, #0]
 801472e:	4619      	mov	r1, r3
 8014730:	6878      	ldr	r0, [r7, #4]
 8014732:	f7fe ff64 	bl	80135fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014736:	2303      	movs	r3, #3
 8014738:	73fb      	strb	r3, [r7, #15]
      break;
 801473a:	bf00      	nop
  }

  return ret;
 801473c:	7bfb      	ldrb	r3, [r7, #15]
}
 801473e:	4618      	mov	r0, r3
 8014740:	3710      	adds	r7, #16
 8014742:	46bd      	mov	sp, r7
 8014744:	bd80      	pop	{r7, pc}
 8014746:	bf00      	nop
 8014748:	24009cb8 	.word	0x24009cb8

0801474c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b082      	sub	sp, #8
 8014750:	af00      	add	r7, sp, #0
 8014752:	6078      	str	r0, [r7, #4]
 8014754:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	88db      	ldrh	r3, [r3, #6]
 801475a:	2b01      	cmp	r3, #1
 801475c:	d004      	beq.n	8014768 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801475e:	6839      	ldr	r1, [r7, #0]
 8014760:	6878      	ldr	r0, [r7, #4]
 8014762:	f000 f8e2 	bl	801492a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014766:	e023      	b.n	80147b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801476e:	b2db      	uxtb	r3, r3
 8014770:	2b02      	cmp	r3, #2
 8014772:	dc02      	bgt.n	801477a <USBD_GetConfig+0x2e>
 8014774:	2b00      	cmp	r3, #0
 8014776:	dc03      	bgt.n	8014780 <USBD_GetConfig+0x34>
 8014778:	e015      	b.n	80147a6 <USBD_GetConfig+0x5a>
 801477a:	2b03      	cmp	r3, #3
 801477c:	d00b      	beq.n	8014796 <USBD_GetConfig+0x4a>
 801477e:	e012      	b.n	80147a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	2200      	movs	r2, #0
 8014784:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	3308      	adds	r3, #8
 801478a:	2201      	movs	r2, #1
 801478c:	4619      	mov	r1, r3
 801478e:	6878      	ldr	r0, [r7, #4]
 8014790:	f000 f948 	bl	8014a24 <USBD_CtlSendData>
        break;
 8014794:	e00c      	b.n	80147b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	3304      	adds	r3, #4
 801479a:	2201      	movs	r2, #1
 801479c:	4619      	mov	r1, r3
 801479e:	6878      	ldr	r0, [r7, #4]
 80147a0:	f000 f940 	bl	8014a24 <USBD_CtlSendData>
        break;
 80147a4:	e004      	b.n	80147b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80147a6:	6839      	ldr	r1, [r7, #0]
 80147a8:	6878      	ldr	r0, [r7, #4]
 80147aa:	f000 f8be 	bl	801492a <USBD_CtlError>
        break;
 80147ae:	bf00      	nop
}
 80147b0:	bf00      	nop
 80147b2:	3708      	adds	r7, #8
 80147b4:	46bd      	mov	sp, r7
 80147b6:	bd80      	pop	{r7, pc}

080147b8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b082      	sub	sp, #8
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
 80147c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80147c8:	b2db      	uxtb	r3, r3
 80147ca:	3b01      	subs	r3, #1
 80147cc:	2b02      	cmp	r3, #2
 80147ce:	d81e      	bhi.n	801480e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80147d0:	683b      	ldr	r3, [r7, #0]
 80147d2:	88db      	ldrh	r3, [r3, #6]
 80147d4:	2b02      	cmp	r3, #2
 80147d6:	d004      	beq.n	80147e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80147d8:	6839      	ldr	r1, [r7, #0]
 80147da:	6878      	ldr	r0, [r7, #4]
 80147dc:	f000 f8a5 	bl	801492a <USBD_CtlError>
        break;
 80147e0:	e01a      	b.n	8014818 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	2201      	movs	r2, #1
 80147e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d005      	beq.n	80147fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	68db      	ldr	r3, [r3, #12]
 80147f6:	f043 0202 	orr.w	r2, r3, #2
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	330c      	adds	r3, #12
 8014802:	2202      	movs	r2, #2
 8014804:	4619      	mov	r1, r3
 8014806:	6878      	ldr	r0, [r7, #4]
 8014808:	f000 f90c 	bl	8014a24 <USBD_CtlSendData>
      break;
 801480c:	e004      	b.n	8014818 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801480e:	6839      	ldr	r1, [r7, #0]
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f000 f88a 	bl	801492a <USBD_CtlError>
      break;
 8014816:	bf00      	nop
  }
}
 8014818:	bf00      	nop
 801481a:	3708      	adds	r7, #8
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}

08014820 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014820:	b580      	push	{r7, lr}
 8014822:	b082      	sub	sp, #8
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
 8014828:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801482a:	683b      	ldr	r3, [r7, #0]
 801482c:	885b      	ldrh	r3, [r3, #2]
 801482e:	2b01      	cmp	r3, #1
 8014830:	d107      	bne.n	8014842 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	2201      	movs	r2, #1
 8014836:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801483a:	6878      	ldr	r0, [r7, #4]
 801483c:	f000 f94c 	bl	8014ad8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014840:	e013      	b.n	801486a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014842:	683b      	ldr	r3, [r7, #0]
 8014844:	885b      	ldrh	r3, [r3, #2]
 8014846:	2b02      	cmp	r3, #2
 8014848:	d10b      	bne.n	8014862 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801484a:	683b      	ldr	r3, [r7, #0]
 801484c:	889b      	ldrh	r3, [r3, #4]
 801484e:	0a1b      	lsrs	r3, r3, #8
 8014850:	b29b      	uxth	r3, r3
 8014852:	b2da      	uxtb	r2, r3
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801485a:	6878      	ldr	r0, [r7, #4]
 801485c:	f000 f93c 	bl	8014ad8 <USBD_CtlSendStatus>
}
 8014860:	e003      	b.n	801486a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014862:	6839      	ldr	r1, [r7, #0]
 8014864:	6878      	ldr	r0, [r7, #4]
 8014866:	f000 f860 	bl	801492a <USBD_CtlError>
}
 801486a:	bf00      	nop
 801486c:	3708      	adds	r7, #8
 801486e:	46bd      	mov	sp, r7
 8014870:	bd80      	pop	{r7, pc}

08014872 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014872:	b580      	push	{r7, lr}
 8014874:	b082      	sub	sp, #8
 8014876:	af00      	add	r7, sp, #0
 8014878:	6078      	str	r0, [r7, #4]
 801487a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014882:	b2db      	uxtb	r3, r3
 8014884:	3b01      	subs	r3, #1
 8014886:	2b02      	cmp	r3, #2
 8014888:	d80b      	bhi.n	80148a2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801488a:	683b      	ldr	r3, [r7, #0]
 801488c:	885b      	ldrh	r3, [r3, #2]
 801488e:	2b01      	cmp	r3, #1
 8014890:	d10c      	bne.n	80148ac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	2200      	movs	r2, #0
 8014896:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801489a:	6878      	ldr	r0, [r7, #4]
 801489c:	f000 f91c 	bl	8014ad8 <USBD_CtlSendStatus>
      }
      break;
 80148a0:	e004      	b.n	80148ac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80148a2:	6839      	ldr	r1, [r7, #0]
 80148a4:	6878      	ldr	r0, [r7, #4]
 80148a6:	f000 f840 	bl	801492a <USBD_CtlError>
      break;
 80148aa:	e000      	b.n	80148ae <USBD_ClrFeature+0x3c>
      break;
 80148ac:	bf00      	nop
  }
}
 80148ae:	bf00      	nop
 80148b0:	3708      	adds	r7, #8
 80148b2:	46bd      	mov	sp, r7
 80148b4:	bd80      	pop	{r7, pc}

080148b6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80148b6:	b580      	push	{r7, lr}
 80148b8:	b084      	sub	sp, #16
 80148ba:	af00      	add	r7, sp, #0
 80148bc:	6078      	str	r0, [r7, #4]
 80148be:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80148c0:	683b      	ldr	r3, [r7, #0]
 80148c2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	781a      	ldrb	r2, [r3, #0]
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	3301      	adds	r3, #1
 80148d0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	781a      	ldrb	r2, [r3, #0]
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	3301      	adds	r3, #1
 80148de:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80148e0:	68f8      	ldr	r0, [r7, #12]
 80148e2:	f7ff fa16 	bl	8013d12 <SWAPBYTE>
 80148e6:	4603      	mov	r3, r0
 80148e8:	461a      	mov	r2, r3
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	3301      	adds	r3, #1
 80148f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	3301      	adds	r3, #1
 80148f8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80148fa:	68f8      	ldr	r0, [r7, #12]
 80148fc:	f7ff fa09 	bl	8013d12 <SWAPBYTE>
 8014900:	4603      	mov	r3, r0
 8014902:	461a      	mov	r2, r3
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	3301      	adds	r3, #1
 801490c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	3301      	adds	r3, #1
 8014912:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014914:	68f8      	ldr	r0, [r7, #12]
 8014916:	f7ff f9fc 	bl	8013d12 <SWAPBYTE>
 801491a:	4603      	mov	r3, r0
 801491c:	461a      	mov	r2, r3
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	80da      	strh	r2, [r3, #6]
}
 8014922:	bf00      	nop
 8014924:	3710      	adds	r7, #16
 8014926:	46bd      	mov	sp, r7
 8014928:	bd80      	pop	{r7, pc}

0801492a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801492a:	b580      	push	{r7, lr}
 801492c:	b082      	sub	sp, #8
 801492e:	af00      	add	r7, sp, #0
 8014930:	6078      	str	r0, [r7, #4]
 8014932:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014934:	2180      	movs	r1, #128	@ 0x80
 8014936:	6878      	ldr	r0, [r7, #4]
 8014938:	f000 fd2c 	bl	8015394 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801493c:	2100      	movs	r1, #0
 801493e:	6878      	ldr	r0, [r7, #4]
 8014940:	f000 fd28 	bl	8015394 <USBD_LL_StallEP>
}
 8014944:	bf00      	nop
 8014946:	3708      	adds	r7, #8
 8014948:	46bd      	mov	sp, r7
 801494a:	bd80      	pop	{r7, pc}

0801494c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b086      	sub	sp, #24
 8014950:	af00      	add	r7, sp, #0
 8014952:	60f8      	str	r0, [r7, #12]
 8014954:	60b9      	str	r1, [r7, #8]
 8014956:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014958:	2300      	movs	r3, #0
 801495a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d042      	beq.n	80149e8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8014966:	6938      	ldr	r0, [r7, #16]
 8014968:	f000 f842 	bl	80149f0 <USBD_GetLen>
 801496c:	4603      	mov	r3, r0
 801496e:	3301      	adds	r3, #1
 8014970:	005b      	lsls	r3, r3, #1
 8014972:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014976:	d808      	bhi.n	801498a <USBD_GetString+0x3e>
 8014978:	6938      	ldr	r0, [r7, #16]
 801497a:	f000 f839 	bl	80149f0 <USBD_GetLen>
 801497e:	4603      	mov	r3, r0
 8014980:	3301      	adds	r3, #1
 8014982:	b29b      	uxth	r3, r3
 8014984:	005b      	lsls	r3, r3, #1
 8014986:	b29a      	uxth	r2, r3
 8014988:	e001      	b.n	801498e <USBD_GetString+0x42>
 801498a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014992:	7dfb      	ldrb	r3, [r7, #23]
 8014994:	68ba      	ldr	r2, [r7, #8]
 8014996:	4413      	add	r3, r2
 8014998:	687a      	ldr	r2, [r7, #4]
 801499a:	7812      	ldrb	r2, [r2, #0]
 801499c:	701a      	strb	r2, [r3, #0]
  idx++;
 801499e:	7dfb      	ldrb	r3, [r7, #23]
 80149a0:	3301      	adds	r3, #1
 80149a2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80149a4:	7dfb      	ldrb	r3, [r7, #23]
 80149a6:	68ba      	ldr	r2, [r7, #8]
 80149a8:	4413      	add	r3, r2
 80149aa:	2203      	movs	r2, #3
 80149ac:	701a      	strb	r2, [r3, #0]
  idx++;
 80149ae:	7dfb      	ldrb	r3, [r7, #23]
 80149b0:	3301      	adds	r3, #1
 80149b2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80149b4:	e013      	b.n	80149de <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80149b6:	7dfb      	ldrb	r3, [r7, #23]
 80149b8:	68ba      	ldr	r2, [r7, #8]
 80149ba:	4413      	add	r3, r2
 80149bc:	693a      	ldr	r2, [r7, #16]
 80149be:	7812      	ldrb	r2, [r2, #0]
 80149c0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80149c2:	693b      	ldr	r3, [r7, #16]
 80149c4:	3301      	adds	r3, #1
 80149c6:	613b      	str	r3, [r7, #16]
    idx++;
 80149c8:	7dfb      	ldrb	r3, [r7, #23]
 80149ca:	3301      	adds	r3, #1
 80149cc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80149ce:	7dfb      	ldrb	r3, [r7, #23]
 80149d0:	68ba      	ldr	r2, [r7, #8]
 80149d2:	4413      	add	r3, r2
 80149d4:	2200      	movs	r2, #0
 80149d6:	701a      	strb	r2, [r3, #0]
    idx++;
 80149d8:	7dfb      	ldrb	r3, [r7, #23]
 80149da:	3301      	adds	r3, #1
 80149dc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80149de:	693b      	ldr	r3, [r7, #16]
 80149e0:	781b      	ldrb	r3, [r3, #0]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d1e7      	bne.n	80149b6 <USBD_GetString+0x6a>
 80149e6:	e000      	b.n	80149ea <USBD_GetString+0x9e>
    return;
 80149e8:	bf00      	nop
  }
}
 80149ea:	3718      	adds	r7, #24
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}

080149f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80149f0:	b480      	push	{r7}
 80149f2:	b085      	sub	sp, #20
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80149f8:	2300      	movs	r3, #0
 80149fa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014a00:	e005      	b.n	8014a0e <USBD_GetLen+0x1e>
  {
    len++;
 8014a02:	7bfb      	ldrb	r3, [r7, #15]
 8014a04:	3301      	adds	r3, #1
 8014a06:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014a08:	68bb      	ldr	r3, [r7, #8]
 8014a0a:	3301      	adds	r3, #1
 8014a0c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014a0e:	68bb      	ldr	r3, [r7, #8]
 8014a10:	781b      	ldrb	r3, [r3, #0]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d1f5      	bne.n	8014a02 <USBD_GetLen+0x12>
  }

  return len;
 8014a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a18:	4618      	mov	r0, r3
 8014a1a:	3714      	adds	r7, #20
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a22:	4770      	bx	lr

08014a24 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b084      	sub	sp, #16
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	60f8      	str	r0, [r7, #12]
 8014a2c:	60b9      	str	r1, [r7, #8]
 8014a2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	2202      	movs	r2, #2
 8014a34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	687a      	ldr	r2, [r7, #4]
 8014a3c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	687a      	ldr	r2, [r7, #4]
 8014a42:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	68ba      	ldr	r2, [r7, #8]
 8014a48:	2100      	movs	r1, #0
 8014a4a:	68f8      	ldr	r0, [r7, #12]
 8014a4c:	f000 fd2b 	bl	80154a6 <USBD_LL_Transmit>

  return USBD_OK;
 8014a50:	2300      	movs	r3, #0
}
 8014a52:	4618      	mov	r0, r3
 8014a54:	3710      	adds	r7, #16
 8014a56:	46bd      	mov	sp, r7
 8014a58:	bd80      	pop	{r7, pc}

08014a5a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014a5a:	b580      	push	{r7, lr}
 8014a5c:	b084      	sub	sp, #16
 8014a5e:	af00      	add	r7, sp, #0
 8014a60:	60f8      	str	r0, [r7, #12]
 8014a62:	60b9      	str	r1, [r7, #8]
 8014a64:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	68ba      	ldr	r2, [r7, #8]
 8014a6a:	2100      	movs	r1, #0
 8014a6c:	68f8      	ldr	r0, [r7, #12]
 8014a6e:	f000 fd1a 	bl	80154a6 <USBD_LL_Transmit>

  return USBD_OK;
 8014a72:	2300      	movs	r3, #0
}
 8014a74:	4618      	mov	r0, r3
 8014a76:	3710      	adds	r7, #16
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	bd80      	pop	{r7, pc}

08014a7c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b084      	sub	sp, #16
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	60f8      	str	r0, [r7, #12]
 8014a84:	60b9      	str	r1, [r7, #8]
 8014a86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	2203      	movs	r2, #3
 8014a8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	687a      	ldr	r2, [r7, #4]
 8014a94:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	687a      	ldr	r2, [r7, #4]
 8014a9c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	68ba      	ldr	r2, [r7, #8]
 8014aa4:	2100      	movs	r1, #0
 8014aa6:	68f8      	ldr	r0, [r7, #12]
 8014aa8:	f000 fd1e 	bl	80154e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014aac:	2300      	movs	r3, #0
}
 8014aae:	4618      	mov	r0, r3
 8014ab0:	3710      	adds	r7, #16
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	bd80      	pop	{r7, pc}

08014ab6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014ab6:	b580      	push	{r7, lr}
 8014ab8:	b084      	sub	sp, #16
 8014aba:	af00      	add	r7, sp, #0
 8014abc:	60f8      	str	r0, [r7, #12]
 8014abe:	60b9      	str	r1, [r7, #8]
 8014ac0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	68ba      	ldr	r2, [r7, #8]
 8014ac6:	2100      	movs	r1, #0
 8014ac8:	68f8      	ldr	r0, [r7, #12]
 8014aca:	f000 fd0d 	bl	80154e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014ace:	2300      	movs	r3, #0
}
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	3710      	adds	r7, #16
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	bd80      	pop	{r7, pc}

08014ad8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b082      	sub	sp, #8
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	2204      	movs	r2, #4
 8014ae4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014ae8:	2300      	movs	r3, #0
 8014aea:	2200      	movs	r2, #0
 8014aec:	2100      	movs	r1, #0
 8014aee:	6878      	ldr	r0, [r7, #4]
 8014af0:	f000 fcd9 	bl	80154a6 <USBD_LL_Transmit>

  return USBD_OK;
 8014af4:	2300      	movs	r3, #0
}
 8014af6:	4618      	mov	r0, r3
 8014af8:	3708      	adds	r7, #8
 8014afa:	46bd      	mov	sp, r7
 8014afc:	bd80      	pop	{r7, pc}

08014afe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014afe:	b580      	push	{r7, lr}
 8014b00:	b082      	sub	sp, #8
 8014b02:	af00      	add	r7, sp, #0
 8014b04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	2205      	movs	r2, #5
 8014b0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014b0e:	2300      	movs	r3, #0
 8014b10:	2200      	movs	r2, #0
 8014b12:	2100      	movs	r1, #0
 8014b14:	6878      	ldr	r0, [r7, #4]
 8014b16:	f000 fce7 	bl	80154e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014b1a:	2300      	movs	r3, #0
}
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	3708      	adds	r7, #8
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bd80      	pop	{r7, pc}

08014b24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014b28:	2200      	movs	r2, #0
 8014b2a:	4918      	ldr	r1, [pc, #96]	@ (8014b8c <MX_USB_DEVICE_Init+0x68>)
 8014b2c:	4818      	ldr	r0, [pc, #96]	@ (8014b90 <MX_USB_DEVICE_Init+0x6c>)
 8014b2e:	f7fe fccd 	bl	80134cc <USBD_Init>
 8014b32:	4603      	mov	r3, r0
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d001      	beq.n	8014b3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014b38:	f7ec fd88 	bl	800164c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014b3c:	4915      	ldr	r1, [pc, #84]	@ (8014b94 <MX_USB_DEVICE_Init+0x70>)
 8014b3e:	4814      	ldr	r0, [pc, #80]	@ (8014b90 <MX_USB_DEVICE_Init+0x6c>)
 8014b40:	f7fe fcf4 	bl	801352c <USBD_RegisterClass>
 8014b44:	4603      	mov	r3, r0
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d001      	beq.n	8014b4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014b4a:	f7ec fd7f 	bl	800164c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014b4e:	4912      	ldr	r1, [pc, #72]	@ (8014b98 <MX_USB_DEVICE_Init+0x74>)
 8014b50:	480f      	ldr	r0, [pc, #60]	@ (8014b90 <MX_USB_DEVICE_Init+0x6c>)
 8014b52:	f7fe fbeb 	bl	801332c <USBD_CDC_RegisterInterface>
 8014b56:	4603      	mov	r3, r0
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d001      	beq.n	8014b60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014b5c:	f7ec fd76 	bl	800164c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014b60:	480b      	ldr	r0, [pc, #44]	@ (8014b90 <MX_USB_DEVICE_Init+0x6c>)
 8014b62:	f7fe fd19 	bl	8013598 <USBD_Start>
 8014b66:	4603      	mov	r3, r0
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d001      	beq.n	8014b70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014b6c:	f7ec fd6e 	bl	800164c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8014b70:	f7f7 fae6 	bl	800c140 <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 8014b74:	4b06      	ldr	r3, [pc, #24]	@ (8014b90 <MX_USB_DEVICE_Init+0x6c>)
 8014b76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014b7a:	4a05      	ldr	r2, [pc, #20]	@ (8014b90 <MX_USB_DEVICE_Init+0x6c>)
 8014b7c:	33b0      	adds	r3, #176	@ 0xb0
 8014b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b82:	4a06      	ldr	r2, [pc, #24]	@ (8014b9c <MX_USB_DEVICE_Init+0x78>)
 8014b84:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014b86:	bf00      	nop
 8014b88:	bd80      	pop	{r7, pc}
 8014b8a:	bf00      	nop
 8014b8c:	240000b8 	.word	0x240000b8
 8014b90:	24009cbc 	.word	0x24009cbc
 8014b94:	24000024 	.word	0x24000024
 8014b98:	240000a4 	.word	0x240000a4
 8014b9c:	24009f98 	.word	0x24009f98

08014ba0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014ba4:	2200      	movs	r2, #0
 8014ba6:	4905      	ldr	r1, [pc, #20]	@ (8014bbc <CDC_Init_FS+0x1c>)
 8014ba8:	4805      	ldr	r0, [pc, #20]	@ (8014bc0 <CDC_Init_FS+0x20>)
 8014baa:	f7fe fbd9 	bl	8013360 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014bae:	4905      	ldr	r1, [pc, #20]	@ (8014bc4 <CDC_Init_FS+0x24>)
 8014bb0:	4803      	ldr	r0, [pc, #12]	@ (8014bc0 <CDC_Init_FS+0x20>)
 8014bb2:	f7fe fbf7 	bl	80133a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014bb6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014bb8:	4618      	mov	r0, r3
 8014bba:	bd80      	pop	{r7, pc}
 8014bbc:	2400a79c 	.word	0x2400a79c
 8014bc0:	24009cbc 	.word	0x24009cbc
 8014bc4:	24009f9c 	.word	0x24009f9c

08014bc8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014bc8:	b480      	push	{r7}
 8014bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014bcc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014bce:	4618      	mov	r0, r3
 8014bd0:	46bd      	mov	sp, r7
 8014bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd6:	4770      	bx	lr

08014bd8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014bd8:	b480      	push	{r7}
 8014bda:	b083      	sub	sp, #12
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	4603      	mov	r3, r0
 8014be0:	6039      	str	r1, [r7, #0]
 8014be2:	71fb      	strb	r3, [r7, #7]
 8014be4:	4613      	mov	r3, r2
 8014be6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014be8:	79fb      	ldrb	r3, [r7, #7]
 8014bea:	2b23      	cmp	r3, #35	@ 0x23
 8014bec:	d84a      	bhi.n	8014c84 <CDC_Control_FS+0xac>
 8014bee:	a201      	add	r2, pc, #4	@ (adr r2, 8014bf4 <CDC_Control_FS+0x1c>)
 8014bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bf4:	08014c85 	.word	0x08014c85
 8014bf8:	08014c85 	.word	0x08014c85
 8014bfc:	08014c85 	.word	0x08014c85
 8014c00:	08014c85 	.word	0x08014c85
 8014c04:	08014c85 	.word	0x08014c85
 8014c08:	08014c85 	.word	0x08014c85
 8014c0c:	08014c85 	.word	0x08014c85
 8014c10:	08014c85 	.word	0x08014c85
 8014c14:	08014c85 	.word	0x08014c85
 8014c18:	08014c85 	.word	0x08014c85
 8014c1c:	08014c85 	.word	0x08014c85
 8014c20:	08014c85 	.word	0x08014c85
 8014c24:	08014c85 	.word	0x08014c85
 8014c28:	08014c85 	.word	0x08014c85
 8014c2c:	08014c85 	.word	0x08014c85
 8014c30:	08014c85 	.word	0x08014c85
 8014c34:	08014c85 	.word	0x08014c85
 8014c38:	08014c85 	.word	0x08014c85
 8014c3c:	08014c85 	.word	0x08014c85
 8014c40:	08014c85 	.word	0x08014c85
 8014c44:	08014c85 	.word	0x08014c85
 8014c48:	08014c85 	.word	0x08014c85
 8014c4c:	08014c85 	.word	0x08014c85
 8014c50:	08014c85 	.word	0x08014c85
 8014c54:	08014c85 	.word	0x08014c85
 8014c58:	08014c85 	.word	0x08014c85
 8014c5c:	08014c85 	.word	0x08014c85
 8014c60:	08014c85 	.word	0x08014c85
 8014c64:	08014c85 	.word	0x08014c85
 8014c68:	08014c85 	.word	0x08014c85
 8014c6c:	08014c85 	.word	0x08014c85
 8014c70:	08014c85 	.word	0x08014c85
 8014c74:	08014c85 	.word	0x08014c85
 8014c78:	08014c85 	.word	0x08014c85
 8014c7c:	08014c85 	.word	0x08014c85
 8014c80:	08014c85 	.word	0x08014c85
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014c84:	bf00      	nop
  }

  return (USBD_OK);
 8014c86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014c88:	4618      	mov	r0, r3
 8014c8a:	370c      	adds	r7, #12
 8014c8c:	46bd      	mov	sp, r7
 8014c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c92:	4770      	bx	lr

08014c94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b082      	sub	sp, #8
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
 8014c9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014c9e:	6879      	ldr	r1, [r7, #4]
 8014ca0:	480a      	ldr	r0, [pc, #40]	@ (8014ccc <CDC_Receive_FS+0x38>)
 8014ca2:	f7fe fb7f 	bl	80133a4 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014ca6:	4809      	ldr	r0, [pc, #36]	@ (8014ccc <CDC_Receive_FS+0x38>)
 8014ca8:	f7fe fbda 	bl	8013460 <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 8014cac:	4b08      	ldr	r3, [pc, #32]	@ (8014cd0 <CDC_Receive_FS+0x3c>)
 8014cae:	2201      	movs	r2, #1
 8014cb0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, Buf, *Len, 100);
 8014cb2:	683b      	ldr	r3, [r7, #0]
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	b29a      	uxth	r2, r3
 8014cb8:	2364      	movs	r3, #100	@ 0x64
 8014cba:	6879      	ldr	r1, [r7, #4]
 8014cbc:	4805      	ldr	r0, [pc, #20]	@ (8014cd4 <CDC_Receive_FS+0x40>)
 8014cbe:	f7fb fac1 	bl	8010244 <HAL_UART_Transmit>

	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 8014cc2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	3708      	adds	r7, #8
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	bd80      	pop	{r7, pc}
 8014ccc:	24009cbc 	.word	0x24009cbc
 8014cd0:	240006c0 	.word	0x240006c0
 8014cd4:	240005c8 	.word	0x240005c8

08014cd8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b084      	sub	sp, #16
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
 8014ce0:	460b      	mov	r3, r1
 8014ce2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8014d20 <CDC_Transmit_FS+0x48>)
 8014cea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014cee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014cf0:	68bb      	ldr	r3, [r7, #8]
 8014cf2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d001      	beq.n	8014cfe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8014cfa:	2301      	movs	r3, #1
 8014cfc:	e00b      	b.n	8014d16 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8014cfe:	887b      	ldrh	r3, [r7, #2]
 8014d00:	461a      	mov	r2, r3
 8014d02:	6879      	ldr	r1, [r7, #4]
 8014d04:	4806      	ldr	r0, [pc, #24]	@ (8014d20 <CDC_Transmit_FS+0x48>)
 8014d06:	f7fe fb2b 	bl	8013360 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014d0a:	4805      	ldr	r0, [pc, #20]	@ (8014d20 <CDC_Transmit_FS+0x48>)
 8014d0c:	f7fe fb68 	bl	80133e0 <USBD_CDC_TransmitPacket>
 8014d10:	4603      	mov	r3, r0
 8014d12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d16:	4618      	mov	r0, r3
 8014d18:	3710      	adds	r7, #16
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	bd80      	pop	{r7, pc}
 8014d1e:	bf00      	nop
 8014d20:	24009cbc 	.word	0x24009cbc

08014d24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014d24:	b480      	push	{r7}
 8014d26:	b087      	sub	sp, #28
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	60f8      	str	r0, [r7, #12]
 8014d2c:	60b9      	str	r1, [r7, #8]
 8014d2e:	4613      	mov	r3, r2
 8014d30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014d32:	2300      	movs	r3, #0
 8014d34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014d36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	371c      	adds	r7, #28
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d44:	4770      	bx	lr
	...

08014d48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d48:	b480      	push	{r7}
 8014d4a:	b083      	sub	sp, #12
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	4603      	mov	r3, r0
 8014d50:	6039      	str	r1, [r7, #0]
 8014d52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014d54:	683b      	ldr	r3, [r7, #0]
 8014d56:	2212      	movs	r2, #18
 8014d58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014d5a:	4b03      	ldr	r3, [pc, #12]	@ (8014d68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	370c      	adds	r7, #12
 8014d60:	46bd      	mov	sp, r7
 8014d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d66:	4770      	bx	lr
 8014d68:	240000d8 	.word	0x240000d8

08014d6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d6c:	b480      	push	{r7}
 8014d6e:	b083      	sub	sp, #12
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	4603      	mov	r3, r0
 8014d74:	6039      	str	r1, [r7, #0]
 8014d76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	2204      	movs	r2, #4
 8014d7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014d7e:	4b03      	ldr	r3, [pc, #12]	@ (8014d8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014d80:	4618      	mov	r0, r3
 8014d82:	370c      	adds	r7, #12
 8014d84:	46bd      	mov	sp, r7
 8014d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8a:	4770      	bx	lr
 8014d8c:	240000ec 	.word	0x240000ec

08014d90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b082      	sub	sp, #8
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	4603      	mov	r3, r0
 8014d98:	6039      	str	r1, [r7, #0]
 8014d9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014d9c:	79fb      	ldrb	r3, [r7, #7]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d105      	bne.n	8014dae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014da2:	683a      	ldr	r2, [r7, #0]
 8014da4:	4907      	ldr	r1, [pc, #28]	@ (8014dc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8014da6:	4808      	ldr	r0, [pc, #32]	@ (8014dc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8014da8:	f7ff fdd0 	bl	801494c <USBD_GetString>
 8014dac:	e004      	b.n	8014db8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014dae:	683a      	ldr	r2, [r7, #0]
 8014db0:	4904      	ldr	r1, [pc, #16]	@ (8014dc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8014db2:	4805      	ldr	r0, [pc, #20]	@ (8014dc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8014db4:	f7ff fdca 	bl	801494c <USBD_GetString>
  }
  return USBD_StrDesc;
 8014db8:	4b02      	ldr	r3, [pc, #8]	@ (8014dc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014dba:	4618      	mov	r0, r3
 8014dbc:	3708      	adds	r7, #8
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd80      	pop	{r7, pc}
 8014dc2:	bf00      	nop
 8014dc4:	2400af9c 	.word	0x2400af9c
 8014dc8:	08016084 	.word	0x08016084

08014dcc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b082      	sub	sp, #8
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	6039      	str	r1, [r7, #0]
 8014dd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014dd8:	683a      	ldr	r2, [r7, #0]
 8014dda:	4904      	ldr	r1, [pc, #16]	@ (8014dec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014ddc:	4804      	ldr	r0, [pc, #16]	@ (8014df0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014dde:	f7ff fdb5 	bl	801494c <USBD_GetString>
  return USBD_StrDesc;
 8014de2:	4b02      	ldr	r3, [pc, #8]	@ (8014dec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014de4:	4618      	mov	r0, r3
 8014de6:	3708      	adds	r7, #8
 8014de8:	46bd      	mov	sp, r7
 8014dea:	bd80      	pop	{r7, pc}
 8014dec:	2400af9c 	.word	0x2400af9c
 8014df0:	0801609c 	.word	0x0801609c

08014df4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b082      	sub	sp, #8
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	6039      	str	r1, [r7, #0]
 8014dfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014e00:	683b      	ldr	r3, [r7, #0]
 8014e02:	221a      	movs	r2, #26
 8014e04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014e06:	f000 f843 	bl	8014e90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014e0a:	4b02      	ldr	r3, [pc, #8]	@ (8014e14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	3708      	adds	r7, #8
 8014e10:	46bd      	mov	sp, r7
 8014e12:	bd80      	pop	{r7, pc}
 8014e14:	240000f0 	.word	0x240000f0

08014e18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014e18:	b580      	push	{r7, lr}
 8014e1a:	b082      	sub	sp, #8
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	4603      	mov	r3, r0
 8014e20:	6039      	str	r1, [r7, #0]
 8014e22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014e24:	79fb      	ldrb	r3, [r7, #7]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d105      	bne.n	8014e36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014e2a:	683a      	ldr	r2, [r7, #0]
 8014e2c:	4907      	ldr	r1, [pc, #28]	@ (8014e4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8014e2e:	4808      	ldr	r0, [pc, #32]	@ (8014e50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014e30:	f7ff fd8c 	bl	801494c <USBD_GetString>
 8014e34:	e004      	b.n	8014e40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014e36:	683a      	ldr	r2, [r7, #0]
 8014e38:	4904      	ldr	r1, [pc, #16]	@ (8014e4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8014e3a:	4805      	ldr	r0, [pc, #20]	@ (8014e50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014e3c:	f7ff fd86 	bl	801494c <USBD_GetString>
  }
  return USBD_StrDesc;
 8014e40:	4b02      	ldr	r3, [pc, #8]	@ (8014e4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014e42:	4618      	mov	r0, r3
 8014e44:	3708      	adds	r7, #8
 8014e46:	46bd      	mov	sp, r7
 8014e48:	bd80      	pop	{r7, pc}
 8014e4a:	bf00      	nop
 8014e4c:	2400af9c 	.word	0x2400af9c
 8014e50:	080160b0 	.word	0x080160b0

08014e54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b082      	sub	sp, #8
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	6039      	str	r1, [r7, #0]
 8014e5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014e60:	79fb      	ldrb	r3, [r7, #7]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d105      	bne.n	8014e72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014e66:	683a      	ldr	r2, [r7, #0]
 8014e68:	4907      	ldr	r1, [pc, #28]	@ (8014e88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014e6a:	4808      	ldr	r0, [pc, #32]	@ (8014e8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014e6c:	f7ff fd6e 	bl	801494c <USBD_GetString>
 8014e70:	e004      	b.n	8014e7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014e72:	683a      	ldr	r2, [r7, #0]
 8014e74:	4904      	ldr	r1, [pc, #16]	@ (8014e88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014e76:	4805      	ldr	r0, [pc, #20]	@ (8014e8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014e78:	f7ff fd68 	bl	801494c <USBD_GetString>
  }
  return USBD_StrDesc;
 8014e7c:	4b02      	ldr	r3, [pc, #8]	@ (8014e88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014e7e:	4618      	mov	r0, r3
 8014e80:	3708      	adds	r7, #8
 8014e82:	46bd      	mov	sp, r7
 8014e84:	bd80      	pop	{r7, pc}
 8014e86:	bf00      	nop
 8014e88:	2400af9c 	.word	0x2400af9c
 8014e8c:	080160bc 	.word	0x080160bc

08014e90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b084      	sub	sp, #16
 8014e94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014e96:	4b0f      	ldr	r3, [pc, #60]	@ (8014ed4 <Get_SerialNum+0x44>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8014ed8 <Get_SerialNum+0x48>)
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8014edc <Get_SerialNum+0x4c>)
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014ea8:	68fa      	ldr	r2, [r7, #12]
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	4413      	add	r3, r2
 8014eae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d009      	beq.n	8014eca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014eb6:	2208      	movs	r2, #8
 8014eb8:	4909      	ldr	r1, [pc, #36]	@ (8014ee0 <Get_SerialNum+0x50>)
 8014eba:	68f8      	ldr	r0, [r7, #12]
 8014ebc:	f000 f814 	bl	8014ee8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014ec0:	2204      	movs	r2, #4
 8014ec2:	4908      	ldr	r1, [pc, #32]	@ (8014ee4 <Get_SerialNum+0x54>)
 8014ec4:	68b8      	ldr	r0, [r7, #8]
 8014ec6:	f000 f80f 	bl	8014ee8 <IntToUnicode>
  }
}
 8014eca:	bf00      	nop
 8014ecc:	3710      	adds	r7, #16
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bd80      	pop	{r7, pc}
 8014ed2:	bf00      	nop
 8014ed4:	1ff1e800 	.word	0x1ff1e800
 8014ed8:	1ff1e804 	.word	0x1ff1e804
 8014edc:	1ff1e808 	.word	0x1ff1e808
 8014ee0:	240000f2 	.word	0x240000f2
 8014ee4:	24000102 	.word	0x24000102

08014ee8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014ee8:	b480      	push	{r7}
 8014eea:	b087      	sub	sp, #28
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	60f8      	str	r0, [r7, #12]
 8014ef0:	60b9      	str	r1, [r7, #8]
 8014ef2:	4613      	mov	r3, r2
 8014ef4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014efa:	2300      	movs	r3, #0
 8014efc:	75fb      	strb	r3, [r7, #23]
 8014efe:	e027      	b.n	8014f50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	0f1b      	lsrs	r3, r3, #28
 8014f04:	2b09      	cmp	r3, #9
 8014f06:	d80b      	bhi.n	8014f20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	0f1b      	lsrs	r3, r3, #28
 8014f0c:	b2da      	uxtb	r2, r3
 8014f0e:	7dfb      	ldrb	r3, [r7, #23]
 8014f10:	005b      	lsls	r3, r3, #1
 8014f12:	4619      	mov	r1, r3
 8014f14:	68bb      	ldr	r3, [r7, #8]
 8014f16:	440b      	add	r3, r1
 8014f18:	3230      	adds	r2, #48	@ 0x30
 8014f1a:	b2d2      	uxtb	r2, r2
 8014f1c:	701a      	strb	r2, [r3, #0]
 8014f1e:	e00a      	b.n	8014f36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	0f1b      	lsrs	r3, r3, #28
 8014f24:	b2da      	uxtb	r2, r3
 8014f26:	7dfb      	ldrb	r3, [r7, #23]
 8014f28:	005b      	lsls	r3, r3, #1
 8014f2a:	4619      	mov	r1, r3
 8014f2c:	68bb      	ldr	r3, [r7, #8]
 8014f2e:	440b      	add	r3, r1
 8014f30:	3237      	adds	r2, #55	@ 0x37
 8014f32:	b2d2      	uxtb	r2, r2
 8014f34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	011b      	lsls	r3, r3, #4
 8014f3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014f3c:	7dfb      	ldrb	r3, [r7, #23]
 8014f3e:	005b      	lsls	r3, r3, #1
 8014f40:	3301      	adds	r3, #1
 8014f42:	68ba      	ldr	r2, [r7, #8]
 8014f44:	4413      	add	r3, r2
 8014f46:	2200      	movs	r2, #0
 8014f48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014f4a:	7dfb      	ldrb	r3, [r7, #23]
 8014f4c:	3301      	adds	r3, #1
 8014f4e:	75fb      	strb	r3, [r7, #23]
 8014f50:	7dfa      	ldrb	r2, [r7, #23]
 8014f52:	79fb      	ldrb	r3, [r7, #7]
 8014f54:	429a      	cmp	r2, r3
 8014f56:	d3d3      	bcc.n	8014f00 <IntToUnicode+0x18>
  }
}
 8014f58:	bf00      	nop
 8014f5a:	bf00      	nop
 8014f5c:	371c      	adds	r7, #28
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f64:	4770      	bx	lr
	...

08014f68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b0ba      	sub	sp, #232	@ 0xe8
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014f70:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8014f74:	2200      	movs	r2, #0
 8014f76:	601a      	str	r2, [r3, #0]
 8014f78:	605a      	str	r2, [r3, #4]
 8014f7a:	609a      	str	r2, [r3, #8]
 8014f7c:	60da      	str	r2, [r3, #12]
 8014f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014f80:	f107 0310 	add.w	r3, r7, #16
 8014f84:	22c0      	movs	r2, #192	@ 0xc0
 8014f86:	2100      	movs	r1, #0
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f000 fb47 	bl	801561c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	4a2c      	ldr	r2, [pc, #176]	@ (8015044 <HAL_PCD_MspInit+0xdc>)
 8014f94:	4293      	cmp	r3, r2
 8014f96:	d151      	bne.n	801503c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8014f98:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8014f9c:	f04f 0300 	mov.w	r3, #0
 8014fa0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8014fa4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8014fa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014fac:	f107 0310 	add.w	r3, r7, #16
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	f7f8 f8bb 	bl	800d12c <HAL_RCCEx_PeriphCLKConfig>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d001      	beq.n	8014fc0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8014fbc:	f7ec fb46 	bl	800164c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8014fc0:	f7f7 f8be 	bl	800c140 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014fc4:	4b20      	ldr	r3, [pc, #128]	@ (8015048 <HAL_PCD_MspInit+0xe0>)
 8014fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014fca:	4a1f      	ldr	r2, [pc, #124]	@ (8015048 <HAL_PCD_MspInit+0xe0>)
 8014fcc:	f043 0301 	orr.w	r3, r3, #1
 8014fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8014fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8015048 <HAL_PCD_MspInit+0xe0>)
 8014fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014fda:	f003 0301 	and.w	r3, r3, #1
 8014fde:	60fb      	str	r3, [r7, #12]
 8014fe0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014fe2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8014fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014fea:	2302      	movs	r3, #2
 8014fec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8014ffc:	230a      	movs	r3, #10
 8014ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015002:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8015006:	4619      	mov	r1, r3
 8015008:	4810      	ldr	r0, [pc, #64]	@ (801504c <HAL_PCD_MspInit+0xe4>)
 801500a:	f7f1 f9cb 	bl	80063a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801500e:	4b0e      	ldr	r3, [pc, #56]	@ (8015048 <HAL_PCD_MspInit+0xe0>)
 8015010:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8015014:	4a0c      	ldr	r2, [pc, #48]	@ (8015048 <HAL_PCD_MspInit+0xe0>)
 8015016:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801501a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801501e:	4b0a      	ldr	r3, [pc, #40]	@ (8015048 <HAL_PCD_MspInit+0xe0>)
 8015020:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8015024:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015028:	60bb      	str	r3, [r7, #8]
 801502a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801502c:	2200      	movs	r2, #0
 801502e:	2100      	movs	r1, #0
 8015030:	2065      	movs	r0, #101	@ 0x65
 8015032:	f7ed fb24 	bl	800267e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015036:	2065      	movs	r0, #101	@ 0x65
 8015038:	f7ed fb3b 	bl	80026b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801503c:	bf00      	nop
 801503e:	37e8      	adds	r7, #232	@ 0xe8
 8015040:	46bd      	mov	sp, r7
 8015042:	bd80      	pop	{r7, pc}
 8015044:	40080000 	.word	0x40080000
 8015048:	58024400 	.word	0x58024400
 801504c:	58020000 	.word	0x58020000

08015050 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b082      	sub	sp, #8
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8015064:	4619      	mov	r1, r3
 8015066:	4610      	mov	r0, r2
 8015068:	f7fe fae3 	bl	8013632 <USBD_LL_SetupStage>
}
 801506c:	bf00      	nop
 801506e:	3708      	adds	r7, #8
 8015070:	46bd      	mov	sp, r7
 8015072:	bd80      	pop	{r7, pc}

08015074 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b082      	sub	sp, #8
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
 801507c:	460b      	mov	r3, r1
 801507e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8015086:	78fa      	ldrb	r2, [r7, #3]
 8015088:	6879      	ldr	r1, [r7, #4]
 801508a:	4613      	mov	r3, r2
 801508c:	00db      	lsls	r3, r3, #3
 801508e:	4413      	add	r3, r2
 8015090:	009b      	lsls	r3, r3, #2
 8015092:	440b      	add	r3, r1
 8015094:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8015098:	681a      	ldr	r2, [r3, #0]
 801509a:	78fb      	ldrb	r3, [r7, #3]
 801509c:	4619      	mov	r1, r3
 801509e:	f7fe fb1d 	bl	80136dc <USBD_LL_DataOutStage>
}
 80150a2:	bf00      	nop
 80150a4:	3708      	adds	r7, #8
 80150a6:	46bd      	mov	sp, r7
 80150a8:	bd80      	pop	{r7, pc}

080150aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80150aa:	b580      	push	{r7, lr}
 80150ac:	b082      	sub	sp, #8
 80150ae:	af00      	add	r7, sp, #0
 80150b0:	6078      	str	r0, [r7, #4]
 80150b2:	460b      	mov	r3, r1
 80150b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80150bc:	78fa      	ldrb	r2, [r7, #3]
 80150be:	6879      	ldr	r1, [r7, #4]
 80150c0:	4613      	mov	r3, r2
 80150c2:	00db      	lsls	r3, r3, #3
 80150c4:	4413      	add	r3, r2
 80150c6:	009b      	lsls	r3, r3, #2
 80150c8:	440b      	add	r3, r1
 80150ca:	3320      	adds	r3, #32
 80150cc:	681a      	ldr	r2, [r3, #0]
 80150ce:	78fb      	ldrb	r3, [r7, #3]
 80150d0:	4619      	mov	r1, r3
 80150d2:	f7fe fbb6 	bl	8013842 <USBD_LL_DataInStage>
}
 80150d6:	bf00      	nop
 80150d8:	3708      	adds	r7, #8
 80150da:	46bd      	mov	sp, r7
 80150dc:	bd80      	pop	{r7, pc}

080150de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80150de:	b580      	push	{r7, lr}
 80150e0:	b082      	sub	sp, #8
 80150e2:	af00      	add	r7, sp, #0
 80150e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80150ec:	4618      	mov	r0, r3
 80150ee:	f7fe fcf0 	bl	8013ad2 <USBD_LL_SOF>
}
 80150f2:	bf00      	nop
 80150f4:	3708      	adds	r7, #8
 80150f6:	46bd      	mov	sp, r7
 80150f8:	bd80      	pop	{r7, pc}

080150fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80150fa:	b580      	push	{r7, lr}
 80150fc:	b084      	sub	sp, #16
 80150fe:	af00      	add	r7, sp, #0
 8015100:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015102:	2301      	movs	r3, #1
 8015104:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	79db      	ldrb	r3, [r3, #7]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d102      	bne.n	8015114 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801510e:	2300      	movs	r3, #0
 8015110:	73fb      	strb	r3, [r7, #15]
 8015112:	e008      	b.n	8015126 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	79db      	ldrb	r3, [r3, #7]
 8015118:	2b02      	cmp	r3, #2
 801511a:	d102      	bne.n	8015122 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801511c:	2301      	movs	r3, #1
 801511e:	73fb      	strb	r3, [r7, #15]
 8015120:	e001      	b.n	8015126 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015122:	f7ec fa93 	bl	800164c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801512c:	7bfa      	ldrb	r2, [r7, #15]
 801512e:	4611      	mov	r1, r2
 8015130:	4618      	mov	r0, r3
 8015132:	f7fe fc8a 	bl	8013a4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801513c:	4618      	mov	r0, r3
 801513e:	f7fe fc32 	bl	80139a6 <USBD_LL_Reset>
}
 8015142:	bf00      	nop
 8015144:	3710      	adds	r7, #16
 8015146:	46bd      	mov	sp, r7
 8015148:	bd80      	pop	{r7, pc}
	...

0801514c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b082      	sub	sp, #8
 8015150:	af00      	add	r7, sp, #0
 8015152:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801515a:	4618      	mov	r0, r3
 801515c:	f7fe fc85 	bl	8013a6a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	687a      	ldr	r2, [r7, #4]
 801516c:	6812      	ldr	r2, [r2, #0]
 801516e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015172:	f043 0301 	orr.w	r3, r3, #1
 8015176:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	7adb      	ldrb	r3, [r3, #11]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d005      	beq.n	801518c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015180:	4b04      	ldr	r3, [pc, #16]	@ (8015194 <HAL_PCD_SuspendCallback+0x48>)
 8015182:	691b      	ldr	r3, [r3, #16]
 8015184:	4a03      	ldr	r2, [pc, #12]	@ (8015194 <HAL_PCD_SuspendCallback+0x48>)
 8015186:	f043 0306 	orr.w	r3, r3, #6
 801518a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801518c:	bf00      	nop
 801518e:	3708      	adds	r7, #8
 8015190:	46bd      	mov	sp, r7
 8015192:	bd80      	pop	{r7, pc}
 8015194:	e000ed00 	.word	0xe000ed00

08015198 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015198:	b580      	push	{r7, lr}
 801519a:	b082      	sub	sp, #8
 801519c:	af00      	add	r7, sp, #0
 801519e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80151a6:	4618      	mov	r0, r3
 80151a8:	f7fe fc7b 	bl	8013aa2 <USBD_LL_Resume>
}
 80151ac:	bf00      	nop
 80151ae:	3708      	adds	r7, #8
 80151b0:	46bd      	mov	sp, r7
 80151b2:	bd80      	pop	{r7, pc}

080151b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b082      	sub	sp, #8
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	6078      	str	r0, [r7, #4]
 80151bc:	460b      	mov	r3, r1
 80151be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80151c6:	78fa      	ldrb	r2, [r7, #3]
 80151c8:	4611      	mov	r1, r2
 80151ca:	4618      	mov	r0, r3
 80151cc:	f7fe fcd3 	bl	8013b76 <USBD_LL_IsoOUTIncomplete>
}
 80151d0:	bf00      	nop
 80151d2:	3708      	adds	r7, #8
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bd80      	pop	{r7, pc}

080151d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80151d8:	b580      	push	{r7, lr}
 80151da:	b082      	sub	sp, #8
 80151dc:	af00      	add	r7, sp, #0
 80151de:	6078      	str	r0, [r7, #4]
 80151e0:	460b      	mov	r3, r1
 80151e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80151ea:	78fa      	ldrb	r2, [r7, #3]
 80151ec:	4611      	mov	r1, r2
 80151ee:	4618      	mov	r0, r3
 80151f0:	f7fe fc8f 	bl	8013b12 <USBD_LL_IsoINIncomplete>
}
 80151f4:	bf00      	nop
 80151f6:	3708      	adds	r7, #8
 80151f8:	46bd      	mov	sp, r7
 80151fa:	bd80      	pop	{r7, pc}

080151fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80151fc:	b580      	push	{r7, lr}
 80151fe:	b082      	sub	sp, #8
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801520a:	4618      	mov	r0, r3
 801520c:	f7fe fce5 	bl	8013bda <USBD_LL_DevConnected>
}
 8015210:	bf00      	nop
 8015212:	3708      	adds	r7, #8
 8015214:	46bd      	mov	sp, r7
 8015216:	bd80      	pop	{r7, pc}

08015218 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015218:	b580      	push	{r7, lr}
 801521a:	b082      	sub	sp, #8
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015226:	4618      	mov	r0, r3
 8015228:	f7fe fce2 	bl	8013bf0 <USBD_LL_DevDisconnected>
}
 801522c:	bf00      	nop
 801522e:	3708      	adds	r7, #8
 8015230:	46bd      	mov	sp, r7
 8015232:	bd80      	pop	{r7, pc}

08015234 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b082      	sub	sp, #8
 8015238:	af00      	add	r7, sp, #0
 801523a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	781b      	ldrb	r3, [r3, #0]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d13e      	bne.n	80152c2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015244:	4a21      	ldr	r2, [pc, #132]	@ (80152cc <USBD_LL_Init+0x98>)
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	4a1f      	ldr	r2, [pc, #124]	@ (80152cc <USBD_LL_Init+0x98>)
 8015250:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015254:	4b1d      	ldr	r3, [pc, #116]	@ (80152cc <USBD_LL_Init+0x98>)
 8015256:	4a1e      	ldr	r2, [pc, #120]	@ (80152d0 <USBD_LL_Init+0x9c>)
 8015258:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801525a:	4b1c      	ldr	r3, [pc, #112]	@ (80152cc <USBD_LL_Init+0x98>)
 801525c:	2209      	movs	r2, #9
 801525e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015260:	4b1a      	ldr	r3, [pc, #104]	@ (80152cc <USBD_LL_Init+0x98>)
 8015262:	2202      	movs	r2, #2
 8015264:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015266:	4b19      	ldr	r3, [pc, #100]	@ (80152cc <USBD_LL_Init+0x98>)
 8015268:	2200      	movs	r2, #0
 801526a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801526c:	4b17      	ldr	r3, [pc, #92]	@ (80152cc <USBD_LL_Init+0x98>)
 801526e:	2202      	movs	r2, #2
 8015270:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015272:	4b16      	ldr	r3, [pc, #88]	@ (80152cc <USBD_LL_Init+0x98>)
 8015274:	2200      	movs	r2, #0
 8015276:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015278:	4b14      	ldr	r3, [pc, #80]	@ (80152cc <USBD_LL_Init+0x98>)
 801527a:	2200      	movs	r2, #0
 801527c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801527e:	4b13      	ldr	r3, [pc, #76]	@ (80152cc <USBD_LL_Init+0x98>)
 8015280:	2200      	movs	r2, #0
 8015282:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8015284:	4b11      	ldr	r3, [pc, #68]	@ (80152cc <USBD_LL_Init+0x98>)
 8015286:	2200      	movs	r2, #0
 8015288:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801528a:	4b10      	ldr	r3, [pc, #64]	@ (80152cc <USBD_LL_Init+0x98>)
 801528c:	2200      	movs	r2, #0
 801528e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015290:	4b0e      	ldr	r3, [pc, #56]	@ (80152cc <USBD_LL_Init+0x98>)
 8015292:	2200      	movs	r2, #0
 8015294:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015296:	480d      	ldr	r0, [pc, #52]	@ (80152cc <USBD_LL_Init+0x98>)
 8015298:	f7f5 fc78 	bl	800ab8c <HAL_PCD_Init>
 801529c:	4603      	mov	r3, r0
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d001      	beq.n	80152a6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80152a2:	f7ec f9d3 	bl	800164c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80152a6:	2180      	movs	r1, #128	@ 0x80
 80152a8:	4808      	ldr	r0, [pc, #32]	@ (80152cc <USBD_LL_Init+0x98>)
 80152aa:	f7f6 fece 	bl	800c04a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80152ae:	2240      	movs	r2, #64	@ 0x40
 80152b0:	2100      	movs	r1, #0
 80152b2:	4806      	ldr	r0, [pc, #24]	@ (80152cc <USBD_LL_Init+0x98>)
 80152b4:	f7f6 fe82 	bl	800bfbc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80152b8:	2280      	movs	r2, #128	@ 0x80
 80152ba:	2101      	movs	r1, #1
 80152bc:	4803      	ldr	r0, [pc, #12]	@ (80152cc <USBD_LL_Init+0x98>)
 80152be:	f7f6 fe7d 	bl	800bfbc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80152c2:	2300      	movs	r3, #0
}
 80152c4:	4618      	mov	r0, r3
 80152c6:	3708      	adds	r7, #8
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bd80      	pop	{r7, pc}
 80152cc:	2400b19c 	.word	0x2400b19c
 80152d0:	40080000 	.word	0x40080000

080152d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b084      	sub	sp, #16
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80152dc:	2300      	movs	r3, #0
 80152de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80152e0:	2300      	movs	r3, #0
 80152e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80152ea:	4618      	mov	r0, r3
 80152ec:	f7f5 fd5a 	bl	800ada4 <HAL_PCD_Start>
 80152f0:	4603      	mov	r3, r0
 80152f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80152f4:	7bfb      	ldrb	r3, [r7, #15]
 80152f6:	4618      	mov	r0, r3
 80152f8:	f000 f942 	bl	8015580 <USBD_Get_USB_Status>
 80152fc:	4603      	mov	r3, r0
 80152fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015300:	7bbb      	ldrb	r3, [r7, #14]
}
 8015302:	4618      	mov	r0, r3
 8015304:	3710      	adds	r7, #16
 8015306:	46bd      	mov	sp, r7
 8015308:	bd80      	pop	{r7, pc}

0801530a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801530a:	b580      	push	{r7, lr}
 801530c:	b084      	sub	sp, #16
 801530e:	af00      	add	r7, sp, #0
 8015310:	6078      	str	r0, [r7, #4]
 8015312:	4608      	mov	r0, r1
 8015314:	4611      	mov	r1, r2
 8015316:	461a      	mov	r2, r3
 8015318:	4603      	mov	r3, r0
 801531a:	70fb      	strb	r3, [r7, #3]
 801531c:	460b      	mov	r3, r1
 801531e:	70bb      	strb	r3, [r7, #2]
 8015320:	4613      	mov	r3, r2
 8015322:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015324:	2300      	movs	r3, #0
 8015326:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015328:	2300      	movs	r3, #0
 801532a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015332:	78bb      	ldrb	r3, [r7, #2]
 8015334:	883a      	ldrh	r2, [r7, #0]
 8015336:	78f9      	ldrb	r1, [r7, #3]
 8015338:	f7f6 fa5b 	bl	800b7f2 <HAL_PCD_EP_Open>
 801533c:	4603      	mov	r3, r0
 801533e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015340:	7bfb      	ldrb	r3, [r7, #15]
 8015342:	4618      	mov	r0, r3
 8015344:	f000 f91c 	bl	8015580 <USBD_Get_USB_Status>
 8015348:	4603      	mov	r3, r0
 801534a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801534c:	7bbb      	ldrb	r3, [r7, #14]
}
 801534e:	4618      	mov	r0, r3
 8015350:	3710      	adds	r7, #16
 8015352:	46bd      	mov	sp, r7
 8015354:	bd80      	pop	{r7, pc}

08015356 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015356:	b580      	push	{r7, lr}
 8015358:	b084      	sub	sp, #16
 801535a:	af00      	add	r7, sp, #0
 801535c:	6078      	str	r0, [r7, #4]
 801535e:	460b      	mov	r3, r1
 8015360:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015362:	2300      	movs	r3, #0
 8015364:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015366:	2300      	movs	r3, #0
 8015368:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015370:	78fa      	ldrb	r2, [r7, #3]
 8015372:	4611      	mov	r1, r2
 8015374:	4618      	mov	r0, r3
 8015376:	f7f6 faa6 	bl	800b8c6 <HAL_PCD_EP_Close>
 801537a:	4603      	mov	r3, r0
 801537c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801537e:	7bfb      	ldrb	r3, [r7, #15]
 8015380:	4618      	mov	r0, r3
 8015382:	f000 f8fd 	bl	8015580 <USBD_Get_USB_Status>
 8015386:	4603      	mov	r3, r0
 8015388:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801538a:	7bbb      	ldrb	r3, [r7, #14]
}
 801538c:	4618      	mov	r0, r3
 801538e:	3710      	adds	r7, #16
 8015390:	46bd      	mov	sp, r7
 8015392:	bd80      	pop	{r7, pc}

08015394 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015394:	b580      	push	{r7, lr}
 8015396:	b084      	sub	sp, #16
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
 801539c:	460b      	mov	r3, r1
 801539e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80153a0:	2300      	movs	r3, #0
 80153a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80153a4:	2300      	movs	r3, #0
 80153a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80153ae:	78fa      	ldrb	r2, [r7, #3]
 80153b0:	4611      	mov	r1, r2
 80153b2:	4618      	mov	r0, r3
 80153b4:	f7f6 fb5e 	bl	800ba74 <HAL_PCD_EP_SetStall>
 80153b8:	4603      	mov	r3, r0
 80153ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80153bc:	7bfb      	ldrb	r3, [r7, #15]
 80153be:	4618      	mov	r0, r3
 80153c0:	f000 f8de 	bl	8015580 <USBD_Get_USB_Status>
 80153c4:	4603      	mov	r3, r0
 80153c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80153c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80153ca:	4618      	mov	r0, r3
 80153cc:	3710      	adds	r7, #16
 80153ce:	46bd      	mov	sp, r7
 80153d0:	bd80      	pop	{r7, pc}

080153d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80153d2:	b580      	push	{r7, lr}
 80153d4:	b084      	sub	sp, #16
 80153d6:	af00      	add	r7, sp, #0
 80153d8:	6078      	str	r0, [r7, #4]
 80153da:	460b      	mov	r3, r1
 80153dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80153de:	2300      	movs	r3, #0
 80153e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80153e2:	2300      	movs	r3, #0
 80153e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80153ec:	78fa      	ldrb	r2, [r7, #3]
 80153ee:	4611      	mov	r1, r2
 80153f0:	4618      	mov	r0, r3
 80153f2:	f7f6 fba2 	bl	800bb3a <HAL_PCD_EP_ClrStall>
 80153f6:	4603      	mov	r3, r0
 80153f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80153fa:	7bfb      	ldrb	r3, [r7, #15]
 80153fc:	4618      	mov	r0, r3
 80153fe:	f000 f8bf 	bl	8015580 <USBD_Get_USB_Status>
 8015402:	4603      	mov	r3, r0
 8015404:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015406:	7bbb      	ldrb	r3, [r7, #14]
}
 8015408:	4618      	mov	r0, r3
 801540a:	3710      	adds	r7, #16
 801540c:	46bd      	mov	sp, r7
 801540e:	bd80      	pop	{r7, pc}

08015410 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015410:	b480      	push	{r7}
 8015412:	b085      	sub	sp, #20
 8015414:	af00      	add	r7, sp, #0
 8015416:	6078      	str	r0, [r7, #4]
 8015418:	460b      	mov	r3, r1
 801541a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015422:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015424:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015428:	2b00      	cmp	r3, #0
 801542a:	da0b      	bge.n	8015444 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801542c:	78fb      	ldrb	r3, [r7, #3]
 801542e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015432:	68f9      	ldr	r1, [r7, #12]
 8015434:	4613      	mov	r3, r2
 8015436:	00db      	lsls	r3, r3, #3
 8015438:	4413      	add	r3, r2
 801543a:	009b      	lsls	r3, r3, #2
 801543c:	440b      	add	r3, r1
 801543e:	3316      	adds	r3, #22
 8015440:	781b      	ldrb	r3, [r3, #0]
 8015442:	e00b      	b.n	801545c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015444:	78fb      	ldrb	r3, [r7, #3]
 8015446:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801544a:	68f9      	ldr	r1, [r7, #12]
 801544c:	4613      	mov	r3, r2
 801544e:	00db      	lsls	r3, r3, #3
 8015450:	4413      	add	r3, r2
 8015452:	009b      	lsls	r3, r3, #2
 8015454:	440b      	add	r3, r1
 8015456:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801545a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801545c:	4618      	mov	r0, r3
 801545e:	3714      	adds	r7, #20
 8015460:	46bd      	mov	sp, r7
 8015462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015466:	4770      	bx	lr

08015468 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b084      	sub	sp, #16
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
 8015470:	460b      	mov	r3, r1
 8015472:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015474:	2300      	movs	r3, #0
 8015476:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015478:	2300      	movs	r3, #0
 801547a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015482:	78fa      	ldrb	r2, [r7, #3]
 8015484:	4611      	mov	r1, r2
 8015486:	4618      	mov	r0, r3
 8015488:	f7f6 f98f 	bl	800b7aa <HAL_PCD_SetAddress>
 801548c:	4603      	mov	r3, r0
 801548e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015490:	7bfb      	ldrb	r3, [r7, #15]
 8015492:	4618      	mov	r0, r3
 8015494:	f000 f874 	bl	8015580 <USBD_Get_USB_Status>
 8015498:	4603      	mov	r3, r0
 801549a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801549c:	7bbb      	ldrb	r3, [r7, #14]
}
 801549e:	4618      	mov	r0, r3
 80154a0:	3710      	adds	r7, #16
 80154a2:	46bd      	mov	sp, r7
 80154a4:	bd80      	pop	{r7, pc}

080154a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80154a6:	b580      	push	{r7, lr}
 80154a8:	b086      	sub	sp, #24
 80154aa:	af00      	add	r7, sp, #0
 80154ac:	60f8      	str	r0, [r7, #12]
 80154ae:	607a      	str	r2, [r7, #4]
 80154b0:	603b      	str	r3, [r7, #0]
 80154b2:	460b      	mov	r3, r1
 80154b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80154b6:	2300      	movs	r3, #0
 80154b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80154ba:	2300      	movs	r3, #0
 80154bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80154c4:	7af9      	ldrb	r1, [r7, #11]
 80154c6:	683b      	ldr	r3, [r7, #0]
 80154c8:	687a      	ldr	r2, [r7, #4]
 80154ca:	f7f6 fa99 	bl	800ba00 <HAL_PCD_EP_Transmit>
 80154ce:	4603      	mov	r3, r0
 80154d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80154d2:	7dfb      	ldrb	r3, [r7, #23]
 80154d4:	4618      	mov	r0, r3
 80154d6:	f000 f853 	bl	8015580 <USBD_Get_USB_Status>
 80154da:	4603      	mov	r3, r0
 80154dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80154de:	7dbb      	ldrb	r3, [r7, #22]
}
 80154e0:	4618      	mov	r0, r3
 80154e2:	3718      	adds	r7, #24
 80154e4:	46bd      	mov	sp, r7
 80154e6:	bd80      	pop	{r7, pc}

080154e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b086      	sub	sp, #24
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	60f8      	str	r0, [r7, #12]
 80154f0:	607a      	str	r2, [r7, #4]
 80154f2:	603b      	str	r3, [r7, #0]
 80154f4:	460b      	mov	r3, r1
 80154f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80154f8:	2300      	movs	r3, #0
 80154fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80154fc:	2300      	movs	r3, #0
 80154fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015506:	7af9      	ldrb	r1, [r7, #11]
 8015508:	683b      	ldr	r3, [r7, #0]
 801550a:	687a      	ldr	r2, [r7, #4]
 801550c:	f7f6 fa25 	bl	800b95a <HAL_PCD_EP_Receive>
 8015510:	4603      	mov	r3, r0
 8015512:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015514:	7dfb      	ldrb	r3, [r7, #23]
 8015516:	4618      	mov	r0, r3
 8015518:	f000 f832 	bl	8015580 <USBD_Get_USB_Status>
 801551c:	4603      	mov	r3, r0
 801551e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015520:	7dbb      	ldrb	r3, [r7, #22]
}
 8015522:	4618      	mov	r0, r3
 8015524:	3718      	adds	r7, #24
 8015526:	46bd      	mov	sp, r7
 8015528:	bd80      	pop	{r7, pc}

0801552a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801552a:	b580      	push	{r7, lr}
 801552c:	b082      	sub	sp, #8
 801552e:	af00      	add	r7, sp, #0
 8015530:	6078      	str	r0, [r7, #4]
 8015532:	460b      	mov	r3, r1
 8015534:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801553c:	78fa      	ldrb	r2, [r7, #3]
 801553e:	4611      	mov	r1, r2
 8015540:	4618      	mov	r0, r3
 8015542:	f7f6 fa45 	bl	800b9d0 <HAL_PCD_EP_GetRxCount>
 8015546:	4603      	mov	r3, r0
}
 8015548:	4618      	mov	r0, r3
 801554a:	3708      	adds	r7, #8
 801554c:	46bd      	mov	sp, r7
 801554e:	bd80      	pop	{r7, pc}

08015550 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015550:	b480      	push	{r7}
 8015552:	b083      	sub	sp, #12
 8015554:	af00      	add	r7, sp, #0
 8015556:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015558:	4b03      	ldr	r3, [pc, #12]	@ (8015568 <USBD_static_malloc+0x18>)
}
 801555a:	4618      	mov	r0, r3
 801555c:	370c      	adds	r7, #12
 801555e:	46bd      	mov	sp, r7
 8015560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015564:	4770      	bx	lr
 8015566:	bf00      	nop
 8015568:	2400b680 	.word	0x2400b680

0801556c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801556c:	b480      	push	{r7}
 801556e:	b083      	sub	sp, #12
 8015570:	af00      	add	r7, sp, #0
 8015572:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8015574:	bf00      	nop
 8015576:	370c      	adds	r7, #12
 8015578:	46bd      	mov	sp, r7
 801557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801557e:	4770      	bx	lr

08015580 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015580:	b480      	push	{r7}
 8015582:	b085      	sub	sp, #20
 8015584:	af00      	add	r7, sp, #0
 8015586:	4603      	mov	r3, r0
 8015588:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801558a:	2300      	movs	r3, #0
 801558c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801558e:	79fb      	ldrb	r3, [r7, #7]
 8015590:	2b03      	cmp	r3, #3
 8015592:	d817      	bhi.n	80155c4 <USBD_Get_USB_Status+0x44>
 8015594:	a201      	add	r2, pc, #4	@ (adr r2, 801559c <USBD_Get_USB_Status+0x1c>)
 8015596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801559a:	bf00      	nop
 801559c:	080155ad 	.word	0x080155ad
 80155a0:	080155b3 	.word	0x080155b3
 80155a4:	080155b9 	.word	0x080155b9
 80155a8:	080155bf 	.word	0x080155bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80155ac:	2300      	movs	r3, #0
 80155ae:	73fb      	strb	r3, [r7, #15]
    break;
 80155b0:	e00b      	b.n	80155ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80155b2:	2303      	movs	r3, #3
 80155b4:	73fb      	strb	r3, [r7, #15]
    break;
 80155b6:	e008      	b.n	80155ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80155b8:	2301      	movs	r3, #1
 80155ba:	73fb      	strb	r3, [r7, #15]
    break;
 80155bc:	e005      	b.n	80155ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80155be:	2303      	movs	r3, #3
 80155c0:	73fb      	strb	r3, [r7, #15]
    break;
 80155c2:	e002      	b.n	80155ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80155c4:	2303      	movs	r3, #3
 80155c6:	73fb      	strb	r3, [r7, #15]
    break;
 80155c8:	bf00      	nop
  }
  return usb_status;
 80155ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80155cc:	4618      	mov	r0, r3
 80155ce:	3714      	adds	r7, #20
 80155d0:	46bd      	mov	sp, r7
 80155d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d6:	4770      	bx	lr

080155d8 <siprintf>:
 80155d8:	b40e      	push	{r1, r2, r3}
 80155da:	b510      	push	{r4, lr}
 80155dc:	b09d      	sub	sp, #116	@ 0x74
 80155de:	ab1f      	add	r3, sp, #124	@ 0x7c
 80155e0:	9002      	str	r0, [sp, #8]
 80155e2:	9006      	str	r0, [sp, #24]
 80155e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80155e8:	480a      	ldr	r0, [pc, #40]	@ (8015614 <siprintf+0x3c>)
 80155ea:	9107      	str	r1, [sp, #28]
 80155ec:	9104      	str	r1, [sp, #16]
 80155ee:	490a      	ldr	r1, [pc, #40]	@ (8015618 <siprintf+0x40>)
 80155f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80155f4:	9105      	str	r1, [sp, #20]
 80155f6:	2400      	movs	r4, #0
 80155f8:	a902      	add	r1, sp, #8
 80155fa:	6800      	ldr	r0, [r0, #0]
 80155fc:	9301      	str	r3, [sp, #4]
 80155fe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8015600:	f000 f9a2 	bl	8015948 <_svfiprintf_r>
 8015604:	9b02      	ldr	r3, [sp, #8]
 8015606:	701c      	strb	r4, [r3, #0]
 8015608:	b01d      	add	sp, #116	@ 0x74
 801560a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801560e:	b003      	add	sp, #12
 8015610:	4770      	bx	lr
 8015612:	bf00      	nop
 8015614:	2400010c 	.word	0x2400010c
 8015618:	ffff0208 	.word	0xffff0208

0801561c <memset>:
 801561c:	4402      	add	r2, r0
 801561e:	4603      	mov	r3, r0
 8015620:	4293      	cmp	r3, r2
 8015622:	d100      	bne.n	8015626 <memset+0xa>
 8015624:	4770      	bx	lr
 8015626:	f803 1b01 	strb.w	r1, [r3], #1
 801562a:	e7f9      	b.n	8015620 <memset+0x4>

0801562c <__errno>:
 801562c:	4b01      	ldr	r3, [pc, #4]	@ (8015634 <__errno+0x8>)
 801562e:	6818      	ldr	r0, [r3, #0]
 8015630:	4770      	bx	lr
 8015632:	bf00      	nop
 8015634:	2400010c 	.word	0x2400010c

08015638 <__libc_init_array>:
 8015638:	b570      	push	{r4, r5, r6, lr}
 801563a:	4d0d      	ldr	r5, [pc, #52]	@ (8015670 <__libc_init_array+0x38>)
 801563c:	4c0d      	ldr	r4, [pc, #52]	@ (8015674 <__libc_init_array+0x3c>)
 801563e:	1b64      	subs	r4, r4, r5
 8015640:	10a4      	asrs	r4, r4, #2
 8015642:	2600      	movs	r6, #0
 8015644:	42a6      	cmp	r6, r4
 8015646:	d109      	bne.n	801565c <__libc_init_array+0x24>
 8015648:	4d0b      	ldr	r5, [pc, #44]	@ (8015678 <__libc_init_array+0x40>)
 801564a:	4c0c      	ldr	r4, [pc, #48]	@ (801567c <__libc_init_array+0x44>)
 801564c:	f000 fc64 	bl	8015f18 <_init>
 8015650:	1b64      	subs	r4, r4, r5
 8015652:	10a4      	asrs	r4, r4, #2
 8015654:	2600      	movs	r6, #0
 8015656:	42a6      	cmp	r6, r4
 8015658:	d105      	bne.n	8015666 <__libc_init_array+0x2e>
 801565a:	bd70      	pop	{r4, r5, r6, pc}
 801565c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015660:	4798      	blx	r3
 8015662:	3601      	adds	r6, #1
 8015664:	e7ee      	b.n	8015644 <__libc_init_array+0xc>
 8015666:	f855 3b04 	ldr.w	r3, [r5], #4
 801566a:	4798      	blx	r3
 801566c:	3601      	adds	r6, #1
 801566e:	e7f2      	b.n	8015656 <__libc_init_array+0x1e>
 8015670:	080163a8 	.word	0x080163a8
 8015674:	080163a8 	.word	0x080163a8
 8015678:	080163a8 	.word	0x080163a8
 801567c:	080163ac 	.word	0x080163ac

08015680 <__retarget_lock_acquire_recursive>:
 8015680:	4770      	bx	lr

08015682 <__retarget_lock_release_recursive>:
 8015682:	4770      	bx	lr

08015684 <memcpy>:
 8015684:	440a      	add	r2, r1
 8015686:	4291      	cmp	r1, r2
 8015688:	f100 33ff 	add.w	r3, r0, #4294967295
 801568c:	d100      	bne.n	8015690 <memcpy+0xc>
 801568e:	4770      	bx	lr
 8015690:	b510      	push	{r4, lr}
 8015692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015696:	f803 4f01 	strb.w	r4, [r3, #1]!
 801569a:	4291      	cmp	r1, r2
 801569c:	d1f9      	bne.n	8015692 <memcpy+0xe>
 801569e:	bd10      	pop	{r4, pc}

080156a0 <_free_r>:
 80156a0:	b538      	push	{r3, r4, r5, lr}
 80156a2:	4605      	mov	r5, r0
 80156a4:	2900      	cmp	r1, #0
 80156a6:	d041      	beq.n	801572c <_free_r+0x8c>
 80156a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80156ac:	1f0c      	subs	r4, r1, #4
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	bfb8      	it	lt
 80156b2:	18e4      	addlt	r4, r4, r3
 80156b4:	f000 f8e0 	bl	8015878 <__malloc_lock>
 80156b8:	4a1d      	ldr	r2, [pc, #116]	@ (8015730 <_free_r+0x90>)
 80156ba:	6813      	ldr	r3, [r2, #0]
 80156bc:	b933      	cbnz	r3, 80156cc <_free_r+0x2c>
 80156be:	6063      	str	r3, [r4, #4]
 80156c0:	6014      	str	r4, [r2, #0]
 80156c2:	4628      	mov	r0, r5
 80156c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156c8:	f000 b8dc 	b.w	8015884 <__malloc_unlock>
 80156cc:	42a3      	cmp	r3, r4
 80156ce:	d908      	bls.n	80156e2 <_free_r+0x42>
 80156d0:	6820      	ldr	r0, [r4, #0]
 80156d2:	1821      	adds	r1, r4, r0
 80156d4:	428b      	cmp	r3, r1
 80156d6:	bf01      	itttt	eq
 80156d8:	6819      	ldreq	r1, [r3, #0]
 80156da:	685b      	ldreq	r3, [r3, #4]
 80156dc:	1809      	addeq	r1, r1, r0
 80156de:	6021      	streq	r1, [r4, #0]
 80156e0:	e7ed      	b.n	80156be <_free_r+0x1e>
 80156e2:	461a      	mov	r2, r3
 80156e4:	685b      	ldr	r3, [r3, #4]
 80156e6:	b10b      	cbz	r3, 80156ec <_free_r+0x4c>
 80156e8:	42a3      	cmp	r3, r4
 80156ea:	d9fa      	bls.n	80156e2 <_free_r+0x42>
 80156ec:	6811      	ldr	r1, [r2, #0]
 80156ee:	1850      	adds	r0, r2, r1
 80156f0:	42a0      	cmp	r0, r4
 80156f2:	d10b      	bne.n	801570c <_free_r+0x6c>
 80156f4:	6820      	ldr	r0, [r4, #0]
 80156f6:	4401      	add	r1, r0
 80156f8:	1850      	adds	r0, r2, r1
 80156fa:	4283      	cmp	r3, r0
 80156fc:	6011      	str	r1, [r2, #0]
 80156fe:	d1e0      	bne.n	80156c2 <_free_r+0x22>
 8015700:	6818      	ldr	r0, [r3, #0]
 8015702:	685b      	ldr	r3, [r3, #4]
 8015704:	6053      	str	r3, [r2, #4]
 8015706:	4408      	add	r0, r1
 8015708:	6010      	str	r0, [r2, #0]
 801570a:	e7da      	b.n	80156c2 <_free_r+0x22>
 801570c:	d902      	bls.n	8015714 <_free_r+0x74>
 801570e:	230c      	movs	r3, #12
 8015710:	602b      	str	r3, [r5, #0]
 8015712:	e7d6      	b.n	80156c2 <_free_r+0x22>
 8015714:	6820      	ldr	r0, [r4, #0]
 8015716:	1821      	adds	r1, r4, r0
 8015718:	428b      	cmp	r3, r1
 801571a:	bf04      	itt	eq
 801571c:	6819      	ldreq	r1, [r3, #0]
 801571e:	685b      	ldreq	r3, [r3, #4]
 8015720:	6063      	str	r3, [r4, #4]
 8015722:	bf04      	itt	eq
 8015724:	1809      	addeq	r1, r1, r0
 8015726:	6021      	streq	r1, [r4, #0]
 8015728:	6054      	str	r4, [r2, #4]
 801572a:	e7ca      	b.n	80156c2 <_free_r+0x22>
 801572c:	bd38      	pop	{r3, r4, r5, pc}
 801572e:	bf00      	nop
 8015730:	2400b9e4 	.word	0x2400b9e4

08015734 <sbrk_aligned>:
 8015734:	b570      	push	{r4, r5, r6, lr}
 8015736:	4e0f      	ldr	r6, [pc, #60]	@ (8015774 <sbrk_aligned+0x40>)
 8015738:	460c      	mov	r4, r1
 801573a:	6831      	ldr	r1, [r6, #0]
 801573c:	4605      	mov	r5, r0
 801573e:	b911      	cbnz	r1, 8015746 <sbrk_aligned+0x12>
 8015740:	f000 fba4 	bl	8015e8c <_sbrk_r>
 8015744:	6030      	str	r0, [r6, #0]
 8015746:	4621      	mov	r1, r4
 8015748:	4628      	mov	r0, r5
 801574a:	f000 fb9f 	bl	8015e8c <_sbrk_r>
 801574e:	1c43      	adds	r3, r0, #1
 8015750:	d103      	bne.n	801575a <sbrk_aligned+0x26>
 8015752:	f04f 34ff 	mov.w	r4, #4294967295
 8015756:	4620      	mov	r0, r4
 8015758:	bd70      	pop	{r4, r5, r6, pc}
 801575a:	1cc4      	adds	r4, r0, #3
 801575c:	f024 0403 	bic.w	r4, r4, #3
 8015760:	42a0      	cmp	r0, r4
 8015762:	d0f8      	beq.n	8015756 <sbrk_aligned+0x22>
 8015764:	1a21      	subs	r1, r4, r0
 8015766:	4628      	mov	r0, r5
 8015768:	f000 fb90 	bl	8015e8c <_sbrk_r>
 801576c:	3001      	adds	r0, #1
 801576e:	d1f2      	bne.n	8015756 <sbrk_aligned+0x22>
 8015770:	e7ef      	b.n	8015752 <sbrk_aligned+0x1e>
 8015772:	bf00      	nop
 8015774:	2400b9e0 	.word	0x2400b9e0

08015778 <_malloc_r>:
 8015778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801577c:	1ccd      	adds	r5, r1, #3
 801577e:	f025 0503 	bic.w	r5, r5, #3
 8015782:	3508      	adds	r5, #8
 8015784:	2d0c      	cmp	r5, #12
 8015786:	bf38      	it	cc
 8015788:	250c      	movcc	r5, #12
 801578a:	2d00      	cmp	r5, #0
 801578c:	4606      	mov	r6, r0
 801578e:	db01      	blt.n	8015794 <_malloc_r+0x1c>
 8015790:	42a9      	cmp	r1, r5
 8015792:	d904      	bls.n	801579e <_malloc_r+0x26>
 8015794:	230c      	movs	r3, #12
 8015796:	6033      	str	r3, [r6, #0]
 8015798:	2000      	movs	r0, #0
 801579a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801579e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015874 <_malloc_r+0xfc>
 80157a2:	f000 f869 	bl	8015878 <__malloc_lock>
 80157a6:	f8d8 3000 	ldr.w	r3, [r8]
 80157aa:	461c      	mov	r4, r3
 80157ac:	bb44      	cbnz	r4, 8015800 <_malloc_r+0x88>
 80157ae:	4629      	mov	r1, r5
 80157b0:	4630      	mov	r0, r6
 80157b2:	f7ff ffbf 	bl	8015734 <sbrk_aligned>
 80157b6:	1c43      	adds	r3, r0, #1
 80157b8:	4604      	mov	r4, r0
 80157ba:	d158      	bne.n	801586e <_malloc_r+0xf6>
 80157bc:	f8d8 4000 	ldr.w	r4, [r8]
 80157c0:	4627      	mov	r7, r4
 80157c2:	2f00      	cmp	r7, #0
 80157c4:	d143      	bne.n	801584e <_malloc_r+0xd6>
 80157c6:	2c00      	cmp	r4, #0
 80157c8:	d04b      	beq.n	8015862 <_malloc_r+0xea>
 80157ca:	6823      	ldr	r3, [r4, #0]
 80157cc:	4639      	mov	r1, r7
 80157ce:	4630      	mov	r0, r6
 80157d0:	eb04 0903 	add.w	r9, r4, r3
 80157d4:	f000 fb5a 	bl	8015e8c <_sbrk_r>
 80157d8:	4581      	cmp	r9, r0
 80157da:	d142      	bne.n	8015862 <_malloc_r+0xea>
 80157dc:	6821      	ldr	r1, [r4, #0]
 80157de:	1a6d      	subs	r5, r5, r1
 80157e0:	4629      	mov	r1, r5
 80157e2:	4630      	mov	r0, r6
 80157e4:	f7ff ffa6 	bl	8015734 <sbrk_aligned>
 80157e8:	3001      	adds	r0, #1
 80157ea:	d03a      	beq.n	8015862 <_malloc_r+0xea>
 80157ec:	6823      	ldr	r3, [r4, #0]
 80157ee:	442b      	add	r3, r5
 80157f0:	6023      	str	r3, [r4, #0]
 80157f2:	f8d8 3000 	ldr.w	r3, [r8]
 80157f6:	685a      	ldr	r2, [r3, #4]
 80157f8:	bb62      	cbnz	r2, 8015854 <_malloc_r+0xdc>
 80157fa:	f8c8 7000 	str.w	r7, [r8]
 80157fe:	e00f      	b.n	8015820 <_malloc_r+0xa8>
 8015800:	6822      	ldr	r2, [r4, #0]
 8015802:	1b52      	subs	r2, r2, r5
 8015804:	d420      	bmi.n	8015848 <_malloc_r+0xd0>
 8015806:	2a0b      	cmp	r2, #11
 8015808:	d917      	bls.n	801583a <_malloc_r+0xc2>
 801580a:	1961      	adds	r1, r4, r5
 801580c:	42a3      	cmp	r3, r4
 801580e:	6025      	str	r5, [r4, #0]
 8015810:	bf18      	it	ne
 8015812:	6059      	strne	r1, [r3, #4]
 8015814:	6863      	ldr	r3, [r4, #4]
 8015816:	bf08      	it	eq
 8015818:	f8c8 1000 	streq.w	r1, [r8]
 801581c:	5162      	str	r2, [r4, r5]
 801581e:	604b      	str	r3, [r1, #4]
 8015820:	4630      	mov	r0, r6
 8015822:	f000 f82f 	bl	8015884 <__malloc_unlock>
 8015826:	f104 000b 	add.w	r0, r4, #11
 801582a:	1d23      	adds	r3, r4, #4
 801582c:	f020 0007 	bic.w	r0, r0, #7
 8015830:	1ac2      	subs	r2, r0, r3
 8015832:	bf1c      	itt	ne
 8015834:	1a1b      	subne	r3, r3, r0
 8015836:	50a3      	strne	r3, [r4, r2]
 8015838:	e7af      	b.n	801579a <_malloc_r+0x22>
 801583a:	6862      	ldr	r2, [r4, #4]
 801583c:	42a3      	cmp	r3, r4
 801583e:	bf0c      	ite	eq
 8015840:	f8c8 2000 	streq.w	r2, [r8]
 8015844:	605a      	strne	r2, [r3, #4]
 8015846:	e7eb      	b.n	8015820 <_malloc_r+0xa8>
 8015848:	4623      	mov	r3, r4
 801584a:	6864      	ldr	r4, [r4, #4]
 801584c:	e7ae      	b.n	80157ac <_malloc_r+0x34>
 801584e:	463c      	mov	r4, r7
 8015850:	687f      	ldr	r7, [r7, #4]
 8015852:	e7b6      	b.n	80157c2 <_malloc_r+0x4a>
 8015854:	461a      	mov	r2, r3
 8015856:	685b      	ldr	r3, [r3, #4]
 8015858:	42a3      	cmp	r3, r4
 801585a:	d1fb      	bne.n	8015854 <_malloc_r+0xdc>
 801585c:	2300      	movs	r3, #0
 801585e:	6053      	str	r3, [r2, #4]
 8015860:	e7de      	b.n	8015820 <_malloc_r+0xa8>
 8015862:	230c      	movs	r3, #12
 8015864:	6033      	str	r3, [r6, #0]
 8015866:	4630      	mov	r0, r6
 8015868:	f000 f80c 	bl	8015884 <__malloc_unlock>
 801586c:	e794      	b.n	8015798 <_malloc_r+0x20>
 801586e:	6005      	str	r5, [r0, #0]
 8015870:	e7d6      	b.n	8015820 <_malloc_r+0xa8>
 8015872:	bf00      	nop
 8015874:	2400b9e4 	.word	0x2400b9e4

08015878 <__malloc_lock>:
 8015878:	4801      	ldr	r0, [pc, #4]	@ (8015880 <__malloc_lock+0x8>)
 801587a:	f7ff bf01 	b.w	8015680 <__retarget_lock_acquire_recursive>
 801587e:	bf00      	nop
 8015880:	2400b9dc 	.word	0x2400b9dc

08015884 <__malloc_unlock>:
 8015884:	4801      	ldr	r0, [pc, #4]	@ (801588c <__malloc_unlock+0x8>)
 8015886:	f7ff befc 	b.w	8015682 <__retarget_lock_release_recursive>
 801588a:	bf00      	nop
 801588c:	2400b9dc 	.word	0x2400b9dc

08015890 <__ssputs_r>:
 8015890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015894:	688e      	ldr	r6, [r1, #8]
 8015896:	461f      	mov	r7, r3
 8015898:	42be      	cmp	r6, r7
 801589a:	680b      	ldr	r3, [r1, #0]
 801589c:	4682      	mov	sl, r0
 801589e:	460c      	mov	r4, r1
 80158a0:	4690      	mov	r8, r2
 80158a2:	d82d      	bhi.n	8015900 <__ssputs_r+0x70>
 80158a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80158a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80158ac:	d026      	beq.n	80158fc <__ssputs_r+0x6c>
 80158ae:	6965      	ldr	r5, [r4, #20]
 80158b0:	6909      	ldr	r1, [r1, #16]
 80158b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80158b6:	eba3 0901 	sub.w	r9, r3, r1
 80158ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80158be:	1c7b      	adds	r3, r7, #1
 80158c0:	444b      	add	r3, r9
 80158c2:	106d      	asrs	r5, r5, #1
 80158c4:	429d      	cmp	r5, r3
 80158c6:	bf38      	it	cc
 80158c8:	461d      	movcc	r5, r3
 80158ca:	0553      	lsls	r3, r2, #21
 80158cc:	d527      	bpl.n	801591e <__ssputs_r+0x8e>
 80158ce:	4629      	mov	r1, r5
 80158d0:	f7ff ff52 	bl	8015778 <_malloc_r>
 80158d4:	4606      	mov	r6, r0
 80158d6:	b360      	cbz	r0, 8015932 <__ssputs_r+0xa2>
 80158d8:	6921      	ldr	r1, [r4, #16]
 80158da:	464a      	mov	r2, r9
 80158dc:	f7ff fed2 	bl	8015684 <memcpy>
 80158e0:	89a3      	ldrh	r3, [r4, #12]
 80158e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80158e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80158ea:	81a3      	strh	r3, [r4, #12]
 80158ec:	6126      	str	r6, [r4, #16]
 80158ee:	6165      	str	r5, [r4, #20]
 80158f0:	444e      	add	r6, r9
 80158f2:	eba5 0509 	sub.w	r5, r5, r9
 80158f6:	6026      	str	r6, [r4, #0]
 80158f8:	60a5      	str	r5, [r4, #8]
 80158fa:	463e      	mov	r6, r7
 80158fc:	42be      	cmp	r6, r7
 80158fe:	d900      	bls.n	8015902 <__ssputs_r+0x72>
 8015900:	463e      	mov	r6, r7
 8015902:	6820      	ldr	r0, [r4, #0]
 8015904:	4632      	mov	r2, r6
 8015906:	4641      	mov	r1, r8
 8015908:	f000 faa6 	bl	8015e58 <memmove>
 801590c:	68a3      	ldr	r3, [r4, #8]
 801590e:	1b9b      	subs	r3, r3, r6
 8015910:	60a3      	str	r3, [r4, #8]
 8015912:	6823      	ldr	r3, [r4, #0]
 8015914:	4433      	add	r3, r6
 8015916:	6023      	str	r3, [r4, #0]
 8015918:	2000      	movs	r0, #0
 801591a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801591e:	462a      	mov	r2, r5
 8015920:	f000 fac4 	bl	8015eac <_realloc_r>
 8015924:	4606      	mov	r6, r0
 8015926:	2800      	cmp	r0, #0
 8015928:	d1e0      	bne.n	80158ec <__ssputs_r+0x5c>
 801592a:	6921      	ldr	r1, [r4, #16]
 801592c:	4650      	mov	r0, sl
 801592e:	f7ff feb7 	bl	80156a0 <_free_r>
 8015932:	230c      	movs	r3, #12
 8015934:	f8ca 3000 	str.w	r3, [sl]
 8015938:	89a3      	ldrh	r3, [r4, #12]
 801593a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801593e:	81a3      	strh	r3, [r4, #12]
 8015940:	f04f 30ff 	mov.w	r0, #4294967295
 8015944:	e7e9      	b.n	801591a <__ssputs_r+0x8a>
	...

08015948 <_svfiprintf_r>:
 8015948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801594c:	4698      	mov	r8, r3
 801594e:	898b      	ldrh	r3, [r1, #12]
 8015950:	061b      	lsls	r3, r3, #24
 8015952:	b09d      	sub	sp, #116	@ 0x74
 8015954:	4607      	mov	r7, r0
 8015956:	460d      	mov	r5, r1
 8015958:	4614      	mov	r4, r2
 801595a:	d510      	bpl.n	801597e <_svfiprintf_r+0x36>
 801595c:	690b      	ldr	r3, [r1, #16]
 801595e:	b973      	cbnz	r3, 801597e <_svfiprintf_r+0x36>
 8015960:	2140      	movs	r1, #64	@ 0x40
 8015962:	f7ff ff09 	bl	8015778 <_malloc_r>
 8015966:	6028      	str	r0, [r5, #0]
 8015968:	6128      	str	r0, [r5, #16]
 801596a:	b930      	cbnz	r0, 801597a <_svfiprintf_r+0x32>
 801596c:	230c      	movs	r3, #12
 801596e:	603b      	str	r3, [r7, #0]
 8015970:	f04f 30ff 	mov.w	r0, #4294967295
 8015974:	b01d      	add	sp, #116	@ 0x74
 8015976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801597a:	2340      	movs	r3, #64	@ 0x40
 801597c:	616b      	str	r3, [r5, #20]
 801597e:	2300      	movs	r3, #0
 8015980:	9309      	str	r3, [sp, #36]	@ 0x24
 8015982:	2320      	movs	r3, #32
 8015984:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015988:	f8cd 800c 	str.w	r8, [sp, #12]
 801598c:	2330      	movs	r3, #48	@ 0x30
 801598e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015b2c <_svfiprintf_r+0x1e4>
 8015992:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015996:	f04f 0901 	mov.w	r9, #1
 801599a:	4623      	mov	r3, r4
 801599c:	469a      	mov	sl, r3
 801599e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80159a2:	b10a      	cbz	r2, 80159a8 <_svfiprintf_r+0x60>
 80159a4:	2a25      	cmp	r2, #37	@ 0x25
 80159a6:	d1f9      	bne.n	801599c <_svfiprintf_r+0x54>
 80159a8:	ebba 0b04 	subs.w	fp, sl, r4
 80159ac:	d00b      	beq.n	80159c6 <_svfiprintf_r+0x7e>
 80159ae:	465b      	mov	r3, fp
 80159b0:	4622      	mov	r2, r4
 80159b2:	4629      	mov	r1, r5
 80159b4:	4638      	mov	r0, r7
 80159b6:	f7ff ff6b 	bl	8015890 <__ssputs_r>
 80159ba:	3001      	adds	r0, #1
 80159bc:	f000 80a7 	beq.w	8015b0e <_svfiprintf_r+0x1c6>
 80159c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80159c2:	445a      	add	r2, fp
 80159c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80159c6:	f89a 3000 	ldrb.w	r3, [sl]
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	f000 809f 	beq.w	8015b0e <_svfiprintf_r+0x1c6>
 80159d0:	2300      	movs	r3, #0
 80159d2:	f04f 32ff 	mov.w	r2, #4294967295
 80159d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80159da:	f10a 0a01 	add.w	sl, sl, #1
 80159de:	9304      	str	r3, [sp, #16]
 80159e0:	9307      	str	r3, [sp, #28]
 80159e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80159e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80159e8:	4654      	mov	r4, sl
 80159ea:	2205      	movs	r2, #5
 80159ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159f0:	484e      	ldr	r0, [pc, #312]	@ (8015b2c <_svfiprintf_r+0x1e4>)
 80159f2:	f7ea fc7d 	bl	80002f0 <memchr>
 80159f6:	9a04      	ldr	r2, [sp, #16]
 80159f8:	b9d8      	cbnz	r0, 8015a32 <_svfiprintf_r+0xea>
 80159fa:	06d0      	lsls	r0, r2, #27
 80159fc:	bf44      	itt	mi
 80159fe:	2320      	movmi	r3, #32
 8015a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015a04:	0711      	lsls	r1, r2, #28
 8015a06:	bf44      	itt	mi
 8015a08:	232b      	movmi	r3, #43	@ 0x2b
 8015a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8015a12:	2b2a      	cmp	r3, #42	@ 0x2a
 8015a14:	d015      	beq.n	8015a42 <_svfiprintf_r+0xfa>
 8015a16:	9a07      	ldr	r2, [sp, #28]
 8015a18:	4654      	mov	r4, sl
 8015a1a:	2000      	movs	r0, #0
 8015a1c:	f04f 0c0a 	mov.w	ip, #10
 8015a20:	4621      	mov	r1, r4
 8015a22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015a26:	3b30      	subs	r3, #48	@ 0x30
 8015a28:	2b09      	cmp	r3, #9
 8015a2a:	d94b      	bls.n	8015ac4 <_svfiprintf_r+0x17c>
 8015a2c:	b1b0      	cbz	r0, 8015a5c <_svfiprintf_r+0x114>
 8015a2e:	9207      	str	r2, [sp, #28]
 8015a30:	e014      	b.n	8015a5c <_svfiprintf_r+0x114>
 8015a32:	eba0 0308 	sub.w	r3, r0, r8
 8015a36:	fa09 f303 	lsl.w	r3, r9, r3
 8015a3a:	4313      	orrs	r3, r2
 8015a3c:	9304      	str	r3, [sp, #16]
 8015a3e:	46a2      	mov	sl, r4
 8015a40:	e7d2      	b.n	80159e8 <_svfiprintf_r+0xa0>
 8015a42:	9b03      	ldr	r3, [sp, #12]
 8015a44:	1d19      	adds	r1, r3, #4
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	9103      	str	r1, [sp, #12]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	bfbb      	ittet	lt
 8015a4e:	425b      	neglt	r3, r3
 8015a50:	f042 0202 	orrlt.w	r2, r2, #2
 8015a54:	9307      	strge	r3, [sp, #28]
 8015a56:	9307      	strlt	r3, [sp, #28]
 8015a58:	bfb8      	it	lt
 8015a5a:	9204      	strlt	r2, [sp, #16]
 8015a5c:	7823      	ldrb	r3, [r4, #0]
 8015a5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8015a60:	d10a      	bne.n	8015a78 <_svfiprintf_r+0x130>
 8015a62:	7863      	ldrb	r3, [r4, #1]
 8015a64:	2b2a      	cmp	r3, #42	@ 0x2a
 8015a66:	d132      	bne.n	8015ace <_svfiprintf_r+0x186>
 8015a68:	9b03      	ldr	r3, [sp, #12]
 8015a6a:	1d1a      	adds	r2, r3, #4
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	9203      	str	r2, [sp, #12]
 8015a70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015a74:	3402      	adds	r4, #2
 8015a76:	9305      	str	r3, [sp, #20]
 8015a78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015b3c <_svfiprintf_r+0x1f4>
 8015a7c:	7821      	ldrb	r1, [r4, #0]
 8015a7e:	2203      	movs	r2, #3
 8015a80:	4650      	mov	r0, sl
 8015a82:	f7ea fc35 	bl	80002f0 <memchr>
 8015a86:	b138      	cbz	r0, 8015a98 <_svfiprintf_r+0x150>
 8015a88:	9b04      	ldr	r3, [sp, #16]
 8015a8a:	eba0 000a 	sub.w	r0, r0, sl
 8015a8e:	2240      	movs	r2, #64	@ 0x40
 8015a90:	4082      	lsls	r2, r0
 8015a92:	4313      	orrs	r3, r2
 8015a94:	3401      	adds	r4, #1
 8015a96:	9304      	str	r3, [sp, #16]
 8015a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a9c:	4824      	ldr	r0, [pc, #144]	@ (8015b30 <_svfiprintf_r+0x1e8>)
 8015a9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015aa2:	2206      	movs	r2, #6
 8015aa4:	f7ea fc24 	bl	80002f0 <memchr>
 8015aa8:	2800      	cmp	r0, #0
 8015aaa:	d036      	beq.n	8015b1a <_svfiprintf_r+0x1d2>
 8015aac:	4b21      	ldr	r3, [pc, #132]	@ (8015b34 <_svfiprintf_r+0x1ec>)
 8015aae:	bb1b      	cbnz	r3, 8015af8 <_svfiprintf_r+0x1b0>
 8015ab0:	9b03      	ldr	r3, [sp, #12]
 8015ab2:	3307      	adds	r3, #7
 8015ab4:	f023 0307 	bic.w	r3, r3, #7
 8015ab8:	3308      	adds	r3, #8
 8015aba:	9303      	str	r3, [sp, #12]
 8015abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015abe:	4433      	add	r3, r6
 8015ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8015ac2:	e76a      	b.n	801599a <_svfiprintf_r+0x52>
 8015ac4:	fb0c 3202 	mla	r2, ip, r2, r3
 8015ac8:	460c      	mov	r4, r1
 8015aca:	2001      	movs	r0, #1
 8015acc:	e7a8      	b.n	8015a20 <_svfiprintf_r+0xd8>
 8015ace:	2300      	movs	r3, #0
 8015ad0:	3401      	adds	r4, #1
 8015ad2:	9305      	str	r3, [sp, #20]
 8015ad4:	4619      	mov	r1, r3
 8015ad6:	f04f 0c0a 	mov.w	ip, #10
 8015ada:	4620      	mov	r0, r4
 8015adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ae0:	3a30      	subs	r2, #48	@ 0x30
 8015ae2:	2a09      	cmp	r2, #9
 8015ae4:	d903      	bls.n	8015aee <_svfiprintf_r+0x1a6>
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d0c6      	beq.n	8015a78 <_svfiprintf_r+0x130>
 8015aea:	9105      	str	r1, [sp, #20]
 8015aec:	e7c4      	b.n	8015a78 <_svfiprintf_r+0x130>
 8015aee:	fb0c 2101 	mla	r1, ip, r1, r2
 8015af2:	4604      	mov	r4, r0
 8015af4:	2301      	movs	r3, #1
 8015af6:	e7f0      	b.n	8015ada <_svfiprintf_r+0x192>
 8015af8:	ab03      	add	r3, sp, #12
 8015afa:	9300      	str	r3, [sp, #0]
 8015afc:	462a      	mov	r2, r5
 8015afe:	4b0e      	ldr	r3, [pc, #56]	@ (8015b38 <_svfiprintf_r+0x1f0>)
 8015b00:	a904      	add	r1, sp, #16
 8015b02:	4638      	mov	r0, r7
 8015b04:	f3af 8000 	nop.w
 8015b08:	1c42      	adds	r2, r0, #1
 8015b0a:	4606      	mov	r6, r0
 8015b0c:	d1d6      	bne.n	8015abc <_svfiprintf_r+0x174>
 8015b0e:	89ab      	ldrh	r3, [r5, #12]
 8015b10:	065b      	lsls	r3, r3, #25
 8015b12:	f53f af2d 	bmi.w	8015970 <_svfiprintf_r+0x28>
 8015b16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015b18:	e72c      	b.n	8015974 <_svfiprintf_r+0x2c>
 8015b1a:	ab03      	add	r3, sp, #12
 8015b1c:	9300      	str	r3, [sp, #0]
 8015b1e:	462a      	mov	r2, r5
 8015b20:	4b05      	ldr	r3, [pc, #20]	@ (8015b38 <_svfiprintf_r+0x1f0>)
 8015b22:	a904      	add	r1, sp, #16
 8015b24:	4638      	mov	r0, r7
 8015b26:	f000 f879 	bl	8015c1c <_printf_i>
 8015b2a:	e7ed      	b.n	8015b08 <_svfiprintf_r+0x1c0>
 8015b2c:	0801636c 	.word	0x0801636c
 8015b30:	08016376 	.word	0x08016376
 8015b34:	00000000 	.word	0x00000000
 8015b38:	08015891 	.word	0x08015891
 8015b3c:	08016372 	.word	0x08016372

08015b40 <_printf_common>:
 8015b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b44:	4616      	mov	r6, r2
 8015b46:	4698      	mov	r8, r3
 8015b48:	688a      	ldr	r2, [r1, #8]
 8015b4a:	690b      	ldr	r3, [r1, #16]
 8015b4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015b50:	4293      	cmp	r3, r2
 8015b52:	bfb8      	it	lt
 8015b54:	4613      	movlt	r3, r2
 8015b56:	6033      	str	r3, [r6, #0]
 8015b58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015b5c:	4607      	mov	r7, r0
 8015b5e:	460c      	mov	r4, r1
 8015b60:	b10a      	cbz	r2, 8015b66 <_printf_common+0x26>
 8015b62:	3301      	adds	r3, #1
 8015b64:	6033      	str	r3, [r6, #0]
 8015b66:	6823      	ldr	r3, [r4, #0]
 8015b68:	0699      	lsls	r1, r3, #26
 8015b6a:	bf42      	ittt	mi
 8015b6c:	6833      	ldrmi	r3, [r6, #0]
 8015b6e:	3302      	addmi	r3, #2
 8015b70:	6033      	strmi	r3, [r6, #0]
 8015b72:	6825      	ldr	r5, [r4, #0]
 8015b74:	f015 0506 	ands.w	r5, r5, #6
 8015b78:	d106      	bne.n	8015b88 <_printf_common+0x48>
 8015b7a:	f104 0a19 	add.w	sl, r4, #25
 8015b7e:	68e3      	ldr	r3, [r4, #12]
 8015b80:	6832      	ldr	r2, [r6, #0]
 8015b82:	1a9b      	subs	r3, r3, r2
 8015b84:	42ab      	cmp	r3, r5
 8015b86:	dc26      	bgt.n	8015bd6 <_printf_common+0x96>
 8015b88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015b8c:	6822      	ldr	r2, [r4, #0]
 8015b8e:	3b00      	subs	r3, #0
 8015b90:	bf18      	it	ne
 8015b92:	2301      	movne	r3, #1
 8015b94:	0692      	lsls	r2, r2, #26
 8015b96:	d42b      	bmi.n	8015bf0 <_printf_common+0xb0>
 8015b98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015b9c:	4641      	mov	r1, r8
 8015b9e:	4638      	mov	r0, r7
 8015ba0:	47c8      	blx	r9
 8015ba2:	3001      	adds	r0, #1
 8015ba4:	d01e      	beq.n	8015be4 <_printf_common+0xa4>
 8015ba6:	6823      	ldr	r3, [r4, #0]
 8015ba8:	6922      	ldr	r2, [r4, #16]
 8015baa:	f003 0306 	and.w	r3, r3, #6
 8015bae:	2b04      	cmp	r3, #4
 8015bb0:	bf02      	ittt	eq
 8015bb2:	68e5      	ldreq	r5, [r4, #12]
 8015bb4:	6833      	ldreq	r3, [r6, #0]
 8015bb6:	1aed      	subeq	r5, r5, r3
 8015bb8:	68a3      	ldr	r3, [r4, #8]
 8015bba:	bf0c      	ite	eq
 8015bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015bc0:	2500      	movne	r5, #0
 8015bc2:	4293      	cmp	r3, r2
 8015bc4:	bfc4      	itt	gt
 8015bc6:	1a9b      	subgt	r3, r3, r2
 8015bc8:	18ed      	addgt	r5, r5, r3
 8015bca:	2600      	movs	r6, #0
 8015bcc:	341a      	adds	r4, #26
 8015bce:	42b5      	cmp	r5, r6
 8015bd0:	d11a      	bne.n	8015c08 <_printf_common+0xc8>
 8015bd2:	2000      	movs	r0, #0
 8015bd4:	e008      	b.n	8015be8 <_printf_common+0xa8>
 8015bd6:	2301      	movs	r3, #1
 8015bd8:	4652      	mov	r2, sl
 8015bda:	4641      	mov	r1, r8
 8015bdc:	4638      	mov	r0, r7
 8015bde:	47c8      	blx	r9
 8015be0:	3001      	adds	r0, #1
 8015be2:	d103      	bne.n	8015bec <_printf_common+0xac>
 8015be4:	f04f 30ff 	mov.w	r0, #4294967295
 8015be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bec:	3501      	adds	r5, #1
 8015bee:	e7c6      	b.n	8015b7e <_printf_common+0x3e>
 8015bf0:	18e1      	adds	r1, r4, r3
 8015bf2:	1c5a      	adds	r2, r3, #1
 8015bf4:	2030      	movs	r0, #48	@ 0x30
 8015bf6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015bfa:	4422      	add	r2, r4
 8015bfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015c00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015c04:	3302      	adds	r3, #2
 8015c06:	e7c7      	b.n	8015b98 <_printf_common+0x58>
 8015c08:	2301      	movs	r3, #1
 8015c0a:	4622      	mov	r2, r4
 8015c0c:	4641      	mov	r1, r8
 8015c0e:	4638      	mov	r0, r7
 8015c10:	47c8      	blx	r9
 8015c12:	3001      	adds	r0, #1
 8015c14:	d0e6      	beq.n	8015be4 <_printf_common+0xa4>
 8015c16:	3601      	adds	r6, #1
 8015c18:	e7d9      	b.n	8015bce <_printf_common+0x8e>
	...

08015c1c <_printf_i>:
 8015c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015c20:	7e0f      	ldrb	r7, [r1, #24]
 8015c22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015c24:	2f78      	cmp	r7, #120	@ 0x78
 8015c26:	4691      	mov	r9, r2
 8015c28:	4680      	mov	r8, r0
 8015c2a:	460c      	mov	r4, r1
 8015c2c:	469a      	mov	sl, r3
 8015c2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015c32:	d807      	bhi.n	8015c44 <_printf_i+0x28>
 8015c34:	2f62      	cmp	r7, #98	@ 0x62
 8015c36:	d80a      	bhi.n	8015c4e <_printf_i+0x32>
 8015c38:	2f00      	cmp	r7, #0
 8015c3a:	f000 80d1 	beq.w	8015de0 <_printf_i+0x1c4>
 8015c3e:	2f58      	cmp	r7, #88	@ 0x58
 8015c40:	f000 80b8 	beq.w	8015db4 <_printf_i+0x198>
 8015c44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015c48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015c4c:	e03a      	b.n	8015cc4 <_printf_i+0xa8>
 8015c4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015c52:	2b15      	cmp	r3, #21
 8015c54:	d8f6      	bhi.n	8015c44 <_printf_i+0x28>
 8015c56:	a101      	add	r1, pc, #4	@ (adr r1, 8015c5c <_printf_i+0x40>)
 8015c58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015c5c:	08015cb5 	.word	0x08015cb5
 8015c60:	08015cc9 	.word	0x08015cc9
 8015c64:	08015c45 	.word	0x08015c45
 8015c68:	08015c45 	.word	0x08015c45
 8015c6c:	08015c45 	.word	0x08015c45
 8015c70:	08015c45 	.word	0x08015c45
 8015c74:	08015cc9 	.word	0x08015cc9
 8015c78:	08015c45 	.word	0x08015c45
 8015c7c:	08015c45 	.word	0x08015c45
 8015c80:	08015c45 	.word	0x08015c45
 8015c84:	08015c45 	.word	0x08015c45
 8015c88:	08015dc7 	.word	0x08015dc7
 8015c8c:	08015cf3 	.word	0x08015cf3
 8015c90:	08015d81 	.word	0x08015d81
 8015c94:	08015c45 	.word	0x08015c45
 8015c98:	08015c45 	.word	0x08015c45
 8015c9c:	08015de9 	.word	0x08015de9
 8015ca0:	08015c45 	.word	0x08015c45
 8015ca4:	08015cf3 	.word	0x08015cf3
 8015ca8:	08015c45 	.word	0x08015c45
 8015cac:	08015c45 	.word	0x08015c45
 8015cb0:	08015d89 	.word	0x08015d89
 8015cb4:	6833      	ldr	r3, [r6, #0]
 8015cb6:	1d1a      	adds	r2, r3, #4
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	6032      	str	r2, [r6, #0]
 8015cbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015cc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015cc4:	2301      	movs	r3, #1
 8015cc6:	e09c      	b.n	8015e02 <_printf_i+0x1e6>
 8015cc8:	6833      	ldr	r3, [r6, #0]
 8015cca:	6820      	ldr	r0, [r4, #0]
 8015ccc:	1d19      	adds	r1, r3, #4
 8015cce:	6031      	str	r1, [r6, #0]
 8015cd0:	0606      	lsls	r6, r0, #24
 8015cd2:	d501      	bpl.n	8015cd8 <_printf_i+0xbc>
 8015cd4:	681d      	ldr	r5, [r3, #0]
 8015cd6:	e003      	b.n	8015ce0 <_printf_i+0xc4>
 8015cd8:	0645      	lsls	r5, r0, #25
 8015cda:	d5fb      	bpl.n	8015cd4 <_printf_i+0xb8>
 8015cdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015ce0:	2d00      	cmp	r5, #0
 8015ce2:	da03      	bge.n	8015cec <_printf_i+0xd0>
 8015ce4:	232d      	movs	r3, #45	@ 0x2d
 8015ce6:	426d      	negs	r5, r5
 8015ce8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015cec:	4858      	ldr	r0, [pc, #352]	@ (8015e50 <_printf_i+0x234>)
 8015cee:	230a      	movs	r3, #10
 8015cf0:	e011      	b.n	8015d16 <_printf_i+0xfa>
 8015cf2:	6821      	ldr	r1, [r4, #0]
 8015cf4:	6833      	ldr	r3, [r6, #0]
 8015cf6:	0608      	lsls	r0, r1, #24
 8015cf8:	f853 5b04 	ldr.w	r5, [r3], #4
 8015cfc:	d402      	bmi.n	8015d04 <_printf_i+0xe8>
 8015cfe:	0649      	lsls	r1, r1, #25
 8015d00:	bf48      	it	mi
 8015d02:	b2ad      	uxthmi	r5, r5
 8015d04:	2f6f      	cmp	r7, #111	@ 0x6f
 8015d06:	4852      	ldr	r0, [pc, #328]	@ (8015e50 <_printf_i+0x234>)
 8015d08:	6033      	str	r3, [r6, #0]
 8015d0a:	bf14      	ite	ne
 8015d0c:	230a      	movne	r3, #10
 8015d0e:	2308      	moveq	r3, #8
 8015d10:	2100      	movs	r1, #0
 8015d12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015d16:	6866      	ldr	r6, [r4, #4]
 8015d18:	60a6      	str	r6, [r4, #8]
 8015d1a:	2e00      	cmp	r6, #0
 8015d1c:	db05      	blt.n	8015d2a <_printf_i+0x10e>
 8015d1e:	6821      	ldr	r1, [r4, #0]
 8015d20:	432e      	orrs	r6, r5
 8015d22:	f021 0104 	bic.w	r1, r1, #4
 8015d26:	6021      	str	r1, [r4, #0]
 8015d28:	d04b      	beq.n	8015dc2 <_printf_i+0x1a6>
 8015d2a:	4616      	mov	r6, r2
 8015d2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8015d30:	fb03 5711 	mls	r7, r3, r1, r5
 8015d34:	5dc7      	ldrb	r7, [r0, r7]
 8015d36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015d3a:	462f      	mov	r7, r5
 8015d3c:	42bb      	cmp	r3, r7
 8015d3e:	460d      	mov	r5, r1
 8015d40:	d9f4      	bls.n	8015d2c <_printf_i+0x110>
 8015d42:	2b08      	cmp	r3, #8
 8015d44:	d10b      	bne.n	8015d5e <_printf_i+0x142>
 8015d46:	6823      	ldr	r3, [r4, #0]
 8015d48:	07df      	lsls	r7, r3, #31
 8015d4a:	d508      	bpl.n	8015d5e <_printf_i+0x142>
 8015d4c:	6923      	ldr	r3, [r4, #16]
 8015d4e:	6861      	ldr	r1, [r4, #4]
 8015d50:	4299      	cmp	r1, r3
 8015d52:	bfde      	ittt	le
 8015d54:	2330      	movle	r3, #48	@ 0x30
 8015d56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015d5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015d5e:	1b92      	subs	r2, r2, r6
 8015d60:	6122      	str	r2, [r4, #16]
 8015d62:	f8cd a000 	str.w	sl, [sp]
 8015d66:	464b      	mov	r3, r9
 8015d68:	aa03      	add	r2, sp, #12
 8015d6a:	4621      	mov	r1, r4
 8015d6c:	4640      	mov	r0, r8
 8015d6e:	f7ff fee7 	bl	8015b40 <_printf_common>
 8015d72:	3001      	adds	r0, #1
 8015d74:	d14a      	bne.n	8015e0c <_printf_i+0x1f0>
 8015d76:	f04f 30ff 	mov.w	r0, #4294967295
 8015d7a:	b004      	add	sp, #16
 8015d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d80:	6823      	ldr	r3, [r4, #0]
 8015d82:	f043 0320 	orr.w	r3, r3, #32
 8015d86:	6023      	str	r3, [r4, #0]
 8015d88:	4832      	ldr	r0, [pc, #200]	@ (8015e54 <_printf_i+0x238>)
 8015d8a:	2778      	movs	r7, #120	@ 0x78
 8015d8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015d90:	6823      	ldr	r3, [r4, #0]
 8015d92:	6831      	ldr	r1, [r6, #0]
 8015d94:	061f      	lsls	r7, r3, #24
 8015d96:	f851 5b04 	ldr.w	r5, [r1], #4
 8015d9a:	d402      	bmi.n	8015da2 <_printf_i+0x186>
 8015d9c:	065f      	lsls	r7, r3, #25
 8015d9e:	bf48      	it	mi
 8015da0:	b2ad      	uxthmi	r5, r5
 8015da2:	6031      	str	r1, [r6, #0]
 8015da4:	07d9      	lsls	r1, r3, #31
 8015da6:	bf44      	itt	mi
 8015da8:	f043 0320 	orrmi.w	r3, r3, #32
 8015dac:	6023      	strmi	r3, [r4, #0]
 8015dae:	b11d      	cbz	r5, 8015db8 <_printf_i+0x19c>
 8015db0:	2310      	movs	r3, #16
 8015db2:	e7ad      	b.n	8015d10 <_printf_i+0xf4>
 8015db4:	4826      	ldr	r0, [pc, #152]	@ (8015e50 <_printf_i+0x234>)
 8015db6:	e7e9      	b.n	8015d8c <_printf_i+0x170>
 8015db8:	6823      	ldr	r3, [r4, #0]
 8015dba:	f023 0320 	bic.w	r3, r3, #32
 8015dbe:	6023      	str	r3, [r4, #0]
 8015dc0:	e7f6      	b.n	8015db0 <_printf_i+0x194>
 8015dc2:	4616      	mov	r6, r2
 8015dc4:	e7bd      	b.n	8015d42 <_printf_i+0x126>
 8015dc6:	6833      	ldr	r3, [r6, #0]
 8015dc8:	6825      	ldr	r5, [r4, #0]
 8015dca:	6961      	ldr	r1, [r4, #20]
 8015dcc:	1d18      	adds	r0, r3, #4
 8015dce:	6030      	str	r0, [r6, #0]
 8015dd0:	062e      	lsls	r6, r5, #24
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	d501      	bpl.n	8015dda <_printf_i+0x1be>
 8015dd6:	6019      	str	r1, [r3, #0]
 8015dd8:	e002      	b.n	8015de0 <_printf_i+0x1c4>
 8015dda:	0668      	lsls	r0, r5, #25
 8015ddc:	d5fb      	bpl.n	8015dd6 <_printf_i+0x1ba>
 8015dde:	8019      	strh	r1, [r3, #0]
 8015de0:	2300      	movs	r3, #0
 8015de2:	6123      	str	r3, [r4, #16]
 8015de4:	4616      	mov	r6, r2
 8015de6:	e7bc      	b.n	8015d62 <_printf_i+0x146>
 8015de8:	6833      	ldr	r3, [r6, #0]
 8015dea:	1d1a      	adds	r2, r3, #4
 8015dec:	6032      	str	r2, [r6, #0]
 8015dee:	681e      	ldr	r6, [r3, #0]
 8015df0:	6862      	ldr	r2, [r4, #4]
 8015df2:	2100      	movs	r1, #0
 8015df4:	4630      	mov	r0, r6
 8015df6:	f7ea fa7b 	bl	80002f0 <memchr>
 8015dfa:	b108      	cbz	r0, 8015e00 <_printf_i+0x1e4>
 8015dfc:	1b80      	subs	r0, r0, r6
 8015dfe:	6060      	str	r0, [r4, #4]
 8015e00:	6863      	ldr	r3, [r4, #4]
 8015e02:	6123      	str	r3, [r4, #16]
 8015e04:	2300      	movs	r3, #0
 8015e06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015e0a:	e7aa      	b.n	8015d62 <_printf_i+0x146>
 8015e0c:	6923      	ldr	r3, [r4, #16]
 8015e0e:	4632      	mov	r2, r6
 8015e10:	4649      	mov	r1, r9
 8015e12:	4640      	mov	r0, r8
 8015e14:	47d0      	blx	sl
 8015e16:	3001      	adds	r0, #1
 8015e18:	d0ad      	beq.n	8015d76 <_printf_i+0x15a>
 8015e1a:	6823      	ldr	r3, [r4, #0]
 8015e1c:	079b      	lsls	r3, r3, #30
 8015e1e:	d413      	bmi.n	8015e48 <_printf_i+0x22c>
 8015e20:	68e0      	ldr	r0, [r4, #12]
 8015e22:	9b03      	ldr	r3, [sp, #12]
 8015e24:	4298      	cmp	r0, r3
 8015e26:	bfb8      	it	lt
 8015e28:	4618      	movlt	r0, r3
 8015e2a:	e7a6      	b.n	8015d7a <_printf_i+0x15e>
 8015e2c:	2301      	movs	r3, #1
 8015e2e:	4632      	mov	r2, r6
 8015e30:	4649      	mov	r1, r9
 8015e32:	4640      	mov	r0, r8
 8015e34:	47d0      	blx	sl
 8015e36:	3001      	adds	r0, #1
 8015e38:	d09d      	beq.n	8015d76 <_printf_i+0x15a>
 8015e3a:	3501      	adds	r5, #1
 8015e3c:	68e3      	ldr	r3, [r4, #12]
 8015e3e:	9903      	ldr	r1, [sp, #12]
 8015e40:	1a5b      	subs	r3, r3, r1
 8015e42:	42ab      	cmp	r3, r5
 8015e44:	dcf2      	bgt.n	8015e2c <_printf_i+0x210>
 8015e46:	e7eb      	b.n	8015e20 <_printf_i+0x204>
 8015e48:	2500      	movs	r5, #0
 8015e4a:	f104 0619 	add.w	r6, r4, #25
 8015e4e:	e7f5      	b.n	8015e3c <_printf_i+0x220>
 8015e50:	0801637d 	.word	0x0801637d
 8015e54:	0801638e 	.word	0x0801638e

08015e58 <memmove>:
 8015e58:	4288      	cmp	r0, r1
 8015e5a:	b510      	push	{r4, lr}
 8015e5c:	eb01 0402 	add.w	r4, r1, r2
 8015e60:	d902      	bls.n	8015e68 <memmove+0x10>
 8015e62:	4284      	cmp	r4, r0
 8015e64:	4623      	mov	r3, r4
 8015e66:	d807      	bhi.n	8015e78 <memmove+0x20>
 8015e68:	1e43      	subs	r3, r0, #1
 8015e6a:	42a1      	cmp	r1, r4
 8015e6c:	d008      	beq.n	8015e80 <memmove+0x28>
 8015e6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015e72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015e76:	e7f8      	b.n	8015e6a <memmove+0x12>
 8015e78:	4402      	add	r2, r0
 8015e7a:	4601      	mov	r1, r0
 8015e7c:	428a      	cmp	r2, r1
 8015e7e:	d100      	bne.n	8015e82 <memmove+0x2a>
 8015e80:	bd10      	pop	{r4, pc}
 8015e82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015e86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015e8a:	e7f7      	b.n	8015e7c <memmove+0x24>

08015e8c <_sbrk_r>:
 8015e8c:	b538      	push	{r3, r4, r5, lr}
 8015e8e:	4d06      	ldr	r5, [pc, #24]	@ (8015ea8 <_sbrk_r+0x1c>)
 8015e90:	2300      	movs	r3, #0
 8015e92:	4604      	mov	r4, r0
 8015e94:	4608      	mov	r0, r1
 8015e96:	602b      	str	r3, [r5, #0]
 8015e98:	f7ec f93a 	bl	8002110 <_sbrk>
 8015e9c:	1c43      	adds	r3, r0, #1
 8015e9e:	d102      	bne.n	8015ea6 <_sbrk_r+0x1a>
 8015ea0:	682b      	ldr	r3, [r5, #0]
 8015ea2:	b103      	cbz	r3, 8015ea6 <_sbrk_r+0x1a>
 8015ea4:	6023      	str	r3, [r4, #0]
 8015ea6:	bd38      	pop	{r3, r4, r5, pc}
 8015ea8:	2400b9d8 	.word	0x2400b9d8

08015eac <_realloc_r>:
 8015eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015eb0:	4607      	mov	r7, r0
 8015eb2:	4614      	mov	r4, r2
 8015eb4:	460d      	mov	r5, r1
 8015eb6:	b921      	cbnz	r1, 8015ec2 <_realloc_r+0x16>
 8015eb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ebc:	4611      	mov	r1, r2
 8015ebe:	f7ff bc5b 	b.w	8015778 <_malloc_r>
 8015ec2:	b92a      	cbnz	r2, 8015ed0 <_realloc_r+0x24>
 8015ec4:	f7ff fbec 	bl	80156a0 <_free_r>
 8015ec8:	4625      	mov	r5, r4
 8015eca:	4628      	mov	r0, r5
 8015ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ed0:	f000 f81a 	bl	8015f08 <_malloc_usable_size_r>
 8015ed4:	4284      	cmp	r4, r0
 8015ed6:	4606      	mov	r6, r0
 8015ed8:	d802      	bhi.n	8015ee0 <_realloc_r+0x34>
 8015eda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015ede:	d8f4      	bhi.n	8015eca <_realloc_r+0x1e>
 8015ee0:	4621      	mov	r1, r4
 8015ee2:	4638      	mov	r0, r7
 8015ee4:	f7ff fc48 	bl	8015778 <_malloc_r>
 8015ee8:	4680      	mov	r8, r0
 8015eea:	b908      	cbnz	r0, 8015ef0 <_realloc_r+0x44>
 8015eec:	4645      	mov	r5, r8
 8015eee:	e7ec      	b.n	8015eca <_realloc_r+0x1e>
 8015ef0:	42b4      	cmp	r4, r6
 8015ef2:	4622      	mov	r2, r4
 8015ef4:	4629      	mov	r1, r5
 8015ef6:	bf28      	it	cs
 8015ef8:	4632      	movcs	r2, r6
 8015efa:	f7ff fbc3 	bl	8015684 <memcpy>
 8015efe:	4629      	mov	r1, r5
 8015f00:	4638      	mov	r0, r7
 8015f02:	f7ff fbcd 	bl	80156a0 <_free_r>
 8015f06:	e7f1      	b.n	8015eec <_realloc_r+0x40>

08015f08 <_malloc_usable_size_r>:
 8015f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f0c:	1f18      	subs	r0, r3, #4
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	bfbc      	itt	lt
 8015f12:	580b      	ldrlt	r3, [r1, r0]
 8015f14:	18c0      	addlt	r0, r0, r3
 8015f16:	4770      	bx	lr

08015f18 <_init>:
 8015f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f1a:	bf00      	nop
 8015f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f1e:	bc08      	pop	{r3}
 8015f20:	469e      	mov	lr, r3
 8015f22:	4770      	bx	lr

08015f24 <_fini>:
 8015f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f26:	bf00      	nop
 8015f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f2a:	bc08      	pop	{r3}
 8015f2c:	469e      	mov	lr, r3
 8015f2e:	4770      	bx	lr
