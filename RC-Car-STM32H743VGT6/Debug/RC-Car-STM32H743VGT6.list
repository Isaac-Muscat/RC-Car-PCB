
RC-Car-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aed8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  0801b178  0801b178  0001c178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ba2c  0801ba2c  0001ca2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ba34  0801ba34  0001ca34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801ba38  0801ba38  0001ca38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002e4  24000000  0801ba3c  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000277c0  240002e4  0801bd20  0001d2e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24027aa4  0801bd20  0001daa4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001d2e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f993  00000000  00000000  0001d312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005933  00000000  00000000  0004cca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022b8  00000000  00000000  000525d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001b12  00000000  00000000  00054890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e06e  00000000  00000000  000563a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000321df  00000000  00000000  00094410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00172ea7  00000000  00000000  000c65ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00239496  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a444  00000000  00000000  002394dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  00243920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002e4 	.word	0x240002e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801b160 	.word	0x0801b160

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002e8 	.word	0x240002e8
 80002dc:	0801b160 	.word	0x0801b160

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006c0:	f3bf 8f4f 	dsb	sy
}
 80006c4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <__NVIC_SystemReset+0x24>)
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006ce:	4904      	ldr	r1, [pc, #16]	@ (80006e0 <__NVIC_SystemReset+0x24>)
 80006d0:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <__NVIC_SystemReset+0x28>)
 80006d2:	4313      	orrs	r3, r2
 80006d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80006d6:	f3bf 8f4f 	dsb	sy
}
 80006da:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <__NVIC_SystemReset+0x20>
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	05fa0004 	.word	0x05fa0004

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006ee:	f001 fdaf 	bl	8002250 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f002 fe49 	bl	8003388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f93d 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f000 fda5 	bl	8001248 <MX_GPIO_Init>
  MX_DMA_Init();
 80006fe:	f000 fd4b 	bl	8001198 <MX_DMA_Init>
  MX_MDMA_Init();
 8000702:	f000 fd81 	bl	8001208 <MX_MDMA_Init>
  MX_USART1_UART_Init();
 8000706:	f000 fcf5 	bl	80010f4 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800070a:	f017 f9c7 	bl	8017a9c <MX_USB_DEVICE_Init>
  MX_DCMI_Init();
 800070e:	f000 f9ab 	bl	8000a68 <MX_DCMI_Init>
  MX_I2C2_Init();
 8000712:	f000 f9df 	bl	8000ad4 <MX_I2C2_Init>
  MX_TIM14_Init();
 8000716:	f000 fca1 	bl	800105c <MX_TIM14_Init>
  MX_TIM2_Init();
 800071a:	f000 fb13 	bl	8000d44 <MX_TIM2_Init>
  MX_TIM4_Init();
 800071e:	f000 fbe7 	bl	8000ef0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000722:	f000 fa81 	bl	8000c28 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000726:	f000 fb7d 	bl	8000e24 <MX_TIM3_Init>
  MX_JPEG_Init();
 800072a:	f000 fa13 	bl	8000b54 <MX_JPEG_Init>
  MX_SPI2_Init();
 800072e:	f000 fa25 	bl	8000b7c <MX_SPI2_Init>
  MX_TIM5_Init();
 8000732:	f000 fc43 	bl	8000fbc <MX_TIM5_Init>
//			  //HAL_UART_Transmit(&huart1, usb_msg, strlen(usb_msg), 1000);
//		  }
//	}

	// ------------------------------------------------------------ SETUP INA229 -- //
  	hina229.spi_handle = &hspi2;
 8000736:	4b78      	ldr	r3, [pc, #480]	@ (8000918 <main+0x230>)
 8000738:	4a78      	ldr	r2, [pc, #480]	@ (800091c <main+0x234>)
 800073a:	601a      	str	r2, [r3, #0]
  	hina229.cs_gpio_handle = INA_CS_GPIO_Port;
 800073c:	4b76      	ldr	r3, [pc, #472]	@ (8000918 <main+0x230>)
 800073e:	4a78      	ldr	r2, [pc, #480]	@ (8000920 <main+0x238>)
 8000740:	605a      	str	r2, [r3, #4]
  	hina229.cs_gpio_pin = INA_CS_Pin;
 8000742:	4b75      	ldr	r3, [pc, #468]	@ (8000918 <main+0x230>)
 8000744:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000748:	811a      	strh	r2, [r3, #8]

	if (INA229_Init(&hina229)) {
 800074a:	4873      	ldr	r0, [pc, #460]	@ (8000918 <main+0x230>)
 800074c:	f002 fd8b 	bl	8003266 <INA229_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d00e      	beq.n	8000774 <main+0x8c>
		sprintf(ssd_msg, " Failed to Init INA229");
 8000756:	4973      	ldr	r1, [pc, #460]	@ (8000924 <main+0x23c>)
 8000758:	4873      	ldr	r0, [pc, #460]	@ (8000928 <main+0x240>)
 800075a:	f018 fcf5 	bl	8019148 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 800075e:	4872      	ldr	r0, [pc, #456]	@ (8000928 <main+0x240>)
 8000760:	f7ff fe0e 	bl	8000380 <strlen>
 8000764:	4603      	mov	r3, r0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	4619      	mov	r1, r3
 800076a:	486f      	ldr	r0, [pc, #444]	@ (8000928 <main+0x240>)
 800076c:	f001 fb9f 	bl	8001eae <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000770:	f7ff ffa4 	bl	80006bc <__NVIC_SystemReset>
	}

	// ------------------------------------------------------------ SETUP CAMERA INTERFACE -- //
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// XCLK - Start the camera's core clock
 8000774:	2100      	movs	r1, #0
 8000776:	486d      	ldr	r0, [pc, #436]	@ (800092c <main+0x244>)
 8000778:	f010 fab0 	bl	8010cdc <HAL_TIM_PWM_Start>
	// X 		  COM15 [6] = 1 (Data range [00-FF])
	// X 		  COM15 [5] = 0 (RGB 565)
	// X 		  COM15 [4] = 1 (RGB 565)
	uint8_t cam_regCache;

	cam_regCache = 0b00001000;
 800077c:	2308      	movs	r3, #8
 800077e:	71fb      	strb	r3, [r7, #7]
	while (CAM_SetRegister(0x0C, cam_regCache, 0)) {}
 8000780:	bf00      	nop
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2200      	movs	r2, #0
 8000786:	4619      	mov	r1, r3
 8000788:	200c      	movs	r0, #12
 800078a:	f001 fc19 	bl	8001fc0 <CAM_SetRegister>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d1f6      	bne.n	8000782 <main+0x9a>

	cam_regCache = 0b00010000;
 8000794:	2310      	movs	r3, #16
 8000796:	71fb      	strb	r3, [r7, #7]
	while (CAM_SetRegister(0x12, cam_regCache, 0)) {}
 8000798:	bf00      	nop
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2200      	movs	r2, #0
 800079e:	4619      	mov	r1, r3
 80007a0:	2012      	movs	r0, #18
 80007a2:	f001 fc0d 	bl	8001fc0 <CAM_SetRegister>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d1f6      	bne.n	800079a <main+0xb2>

	cam_regCache = 0b10000110;
 80007ac:	2386      	movs	r3, #134	@ 0x86
 80007ae:	71fb      	strb	r3, [r7, #7]
	while (CAM_SetRegister(0x32, cam_regCache, 0)) {}
 80007b0:	bf00      	nop
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2200      	movs	r2, #0
 80007b6:	4619      	mov	r1, r3
 80007b8:	2032      	movs	r0, #50	@ 0x32
 80007ba:	f001 fc01 	bl	8001fc0 <CAM_SetRegister>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1f6      	bne.n	80007b2 <main+0xca>
	//while (CAM_SetRegister(0x40, cam_regCache, 0)) {}

	// ------------------------------------------------------------ SETUP JPEG ENCODING -- //
	// Set the CONFIG
	JPEG_ConfTypeDef* jpeg_config;
	jpeg_config->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
	//jpeg_config->ColorSpace = JPEG_YCBCR_COLORSPACE;
	//jpeg_config->ChromaSubsampling = JPEG_422_SUBSAMPLING;
	jpeg_config->ImageWidth = jpeg_mcu_widths[jpeg_quality]*8;
 80007ca:	4b59      	ldr	r3, [pc, #356]	@ (8000930 <main+0x248>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b58      	ldr	r3, [pc, #352]	@ (8000934 <main+0x24c>)
 80007d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	461a      	mov	r2, r3
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	60da      	str	r2, [r3, #12]
	jpeg_config->ImageHeight = jpeg_mcu_heights[jpeg_quality]*8;
 80007de:	4b54      	ldr	r3, [pc, #336]	@ (8000930 <main+0x248>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	4b54      	ldr	r3, [pc, #336]	@ (8000938 <main+0x250>)
 80007e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	461a      	mov	r2, r3
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	609a      	str	r2, [r3, #8]
	jpeg_config->ImageQuality = JPEG_QUALITY;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	2214      	movs	r2, #20
 80007f6:	611a      	str	r2, [r3, #16]
	HAL_JPEG_ConfigEncoding(&hjpeg, jpeg_config);
 80007f8:	6839      	ldr	r1, [r7, #0]
 80007fa:	4850      	ldr	r0, [pc, #320]	@ (800093c <main+0x254>)
 80007fc:	f008 fd0c 	bl	8009218 <HAL_JPEG_ConfigEncoding>

	// ------------------------------------------------------------ SETUP WATCHDOG TIMER-- //
	if (HAL_TIM_Base_Start_IT(&htim5) != HAL_OK)
 8000800:	484f      	ldr	r0, [pc, #316]	@ (8000940 <main+0x258>)
 8000802:	f010 f99b 	bl	8010b3c <HAL_TIM_Base_Start_IT>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00e      	beq.n	800082a <main+0x142>
	{
		sprintf(ssd_msg, " Failed to Start Watchdog");
 800080c:	494d      	ldr	r1, [pc, #308]	@ (8000944 <main+0x25c>)
 800080e:	4846      	ldr	r0, [pc, #280]	@ (8000928 <main+0x240>)
 8000810:	f018 fc9a 	bl	8019148 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8000814:	4844      	ldr	r0, [pc, #272]	@ (8000928 <main+0x240>)
 8000816:	f7ff fdb3 	bl	8000380 <strlen>
 800081a:	4603      	mov	r3, r0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	4619      	mov	r1, r3
 8000820:	4841      	ldr	r0, [pc, #260]	@ (8000928 <main+0x240>)
 8000822:	f001 fb44 	bl	8001eae <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000826:	f7ff ff49 	bl	80006bc <__NVIC_SystemReset>
		while (1) {}
	}

	// ------------------------------------------------------------ SETUP XBEE -- //
	hxbee.uart_handle = &huart1;
 800082a:	4b47      	ldr	r3, [pc, #284]	@ (8000948 <main+0x260>)
 800082c:	4a47      	ldr	r2, [pc, #284]	@ (800094c <main+0x264>)
 800082e:	601a      	str	r2, [r3, #0]
	hxbee.pktRx_max = 2;
 8000830:	4b45      	ldr	r3, [pc, #276]	@ (8000948 <main+0x260>)
 8000832:	2202      	movs	r2, #2
 8000834:	761a      	strb	r2, [r3, #24]
	hxbee.pktTx_max = 2;
 8000836:	4b44      	ldr	r3, [pc, #272]	@ (8000948 <main+0x260>)
 8000838:	2202      	movs	r2, #2
 800083a:	f883 2020 	strb.w	r2, [r3, #32]

	if (XBEE_Init(&hxbee)) {
 800083e:	4842      	ldr	r0, [pc, #264]	@ (8000948 <main+0x260>)
 8000840:	f014 ff49 	bl	80156d6 <XBEE_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d00e      	beq.n	8000868 <main+0x180>
		sprintf(ssd_msg, " Failed to Init XBEE");
 800084a:	4941      	ldr	r1, [pc, #260]	@ (8000950 <main+0x268>)
 800084c:	4836      	ldr	r0, [pc, #216]	@ (8000928 <main+0x240>)
 800084e:	f018 fc7b 	bl	8019148 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8000852:	4835      	ldr	r0, [pc, #212]	@ (8000928 <main+0x240>)
 8000854:	f7ff fd94 	bl	8000380 <strlen>
 8000858:	4603      	mov	r3, r0
 800085a:	b2db      	uxtb	r3, r3
 800085c:	4619      	mov	r1, r3
 800085e:	4832      	ldr	r0, [pc, #200]	@ (8000928 <main+0x240>)
 8000860:	f001 fb25 	bl	8001eae <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000864:	f7ff ff2a 	bl	80006bc <__NVIC_SystemReset>
	}

	// SETUP MOTOR
	TIM2->CCR1 = 0;
 8000868:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800086c:	2200      	movs	r2, #0
 800086e:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = 0;
 8000870:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000874:	2200      	movs	r2, #0
 8000876:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR4 = 0;
 8000878:	4b36      	ldr	r3, [pc, #216]	@ (8000954 <main+0x26c>)
 800087a:	2200      	movs	r2, #0
 800087c:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM4->CCR3 = 0;
 800087e:	4b35      	ldr	r3, [pc, #212]	@ (8000954 <main+0x26c>)
 8000880:	2200      	movs	r2, #0
 8000882:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // LEFT_PWM_1
 8000884:	2100      	movs	r1, #0
 8000886:	4834      	ldr	r0, [pc, #208]	@ (8000958 <main+0x270>)
 8000888:	f010 fa28 	bl	8010cdc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // RIGHT_PWM_1
 800088c:	2104      	movs	r1, #4
 800088e:	4832      	ldr	r0, [pc, #200]	@ (8000958 <main+0x270>)
 8000890:	f010 fa24 	bl	8010cdc <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // LEFT_PWM_2
 8000894:	210c      	movs	r1, #12
 8000896:	4831      	ldr	r0, [pc, #196]	@ (800095c <main+0x274>)
 8000898:	f010 fa20 	bl	8010cdc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // RIGHT_PWM_2
 800089c:	2108      	movs	r1, #8
 800089e:	482f      	ldr	r0, [pc, #188]	@ (800095c <main+0x274>)
 80008a0:	f010 fa1c 	bl	8010cdc <HAL_TIM_PWM_Start>

	// Setup lights
	TIM1->CCR4 = 1000; // 0 - 2000
 80008a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000960 <main+0x278>)
 80008a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008aa:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM3->CCR4 = 1000;
 80008ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000964 <main+0x27c>)
 80008ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b2:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM3->CCR3 = 1000;
 80008b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000964 <main+0x27c>)
 80008b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2->CCR4 = 1000;
 80008bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008c4:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // LIGHTS_PWM_1
 80008c6:	210c      	movs	r1, #12
 80008c8:	4827      	ldr	r0, [pc, #156]	@ (8000968 <main+0x280>)
 80008ca:	f010 fa07 	bl	8010cdc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // LIGHTS_PWM_2
 80008ce:	210c      	movs	r1, #12
 80008d0:	4826      	ldr	r0, [pc, #152]	@ (800096c <main+0x284>)
 80008d2:	f010 fa03 	bl	8010cdc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // LIGHTS_PWM_3
 80008d6:	2108      	movs	r1, #8
 80008d8:	4824      	ldr	r0, [pc, #144]	@ (800096c <main+0x284>)
 80008da:	f010 f9ff 	bl	8010cdc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // LIGHTS_PWM_4
 80008de:	2108      	movs	r1, #8
 80008e0:	481d      	ldr	r0, [pc, #116]	@ (8000958 <main+0x270>)
 80008e2:	f010 f9fb 	bl	8010cdc <HAL_TIM_PWM_Start>

	// Delay for goofiness
	HAL_Delay(1000);
 80008e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008ea:	f002 fddf 	bl	80034ac <HAL_Delay>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); // Motor_en
 80008ee:	2200      	movs	r2, #0
 80008f0:	2108      	movs	r1, #8
 80008f2:	481f      	ldr	r0, [pc, #124]	@ (8000970 <main+0x288>)
 80008f4:	f006 ff28 	bl	8007748 <HAL_GPIO_WritePin>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		SCH_XBeeRX();	// Handle radio recieve
 80008f8:	f000 fd66 	bl	80013c8 <SCH_XBeeRX>
		SCH_CTRL();		// Handle control signals
 80008fc:	f000 ff30 	bl	8001760 <SCH_CTRL>
		SCH_PowerMon();	// Power Monitoring
 8000900:	f001 f886 	bl	8001a10 <SCH_PowerMon>
		SCH_Camera();	// Take a picture if camera idle
 8000904:	f001 f8d6 	bl	8001ab4 <SCH_Camera>
		SCH_JPEG();		// Convert JPEG if camera ready to present
 8000908:	f001 f914 	bl	8001b34 <SCH_JPEG>
		SCH_XBeeTX();	// Transmit JPEG if JPEG ready
 800090c:	f000 fe8e 	bl	800162c <SCH_XBeeTX>

		SCH_DEBUG();
 8000910:	f001 f950 	bl	8001bb4 <SCH_DEBUG>
		SCH_XBeeRX();	// Handle radio recieve
 8000914:	bf00      	nop
 8000916:	e7ef      	b.n	80008f8 <main+0x210>
 8000918:	2400094c 	.word	0x2400094c
 800091c:	2400054c 	.word	0x2400054c
 8000920:	58020800 	.word	0x58020800
 8000924:	0801b178 	.word	0x0801b178
 8000928:	240008e4 	.word	0x240008e4
 800092c:	24000750 	.word	0x24000750
 8000930:	24025d3c 	.word	0x24025d3c
 8000934:	24000004 	.word	0x24000004
 8000938:	2400000c 	.word	0x2400000c
 800093c:	2400041c 	.word	0x2400041c
 8000940:	24000704 	.word	0x24000704
 8000944:	0801b190 	.word	0x0801b190
 8000948:	24025d40 	.word	0x24025d40
 800094c:	2400079c 	.word	0x2400079c
 8000950:	0801b1ac 	.word	0x0801b1ac
 8000954:	40000800 	.word	0x40000800
 8000958:	24000620 	.word	0x24000620
 800095c:	240006b8 	.word	0x240006b8
 8000960:	40010000 	.word	0x40010000
 8000964:	40000400 	.word	0x40000400
 8000968:	240005d4 	.word	0x240005d4
 800096c:	2400066c 	.word	0x2400066c
 8000970:	58020000 	.word	0x58020000

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b09c      	sub	sp, #112	@ 0x70
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097e:	224c      	movs	r2, #76	@ 0x4c
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f018 fc45 	bl	8019212 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2220      	movs	r2, #32
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f018 fc3f 	bl	8019212 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000994:	2002      	movs	r0, #2
 8000996:	f00c fbb1 	bl	800d0fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b30      	ldr	r3, [pc, #192]	@ (8000a60 <SystemClock_Config+0xec>)
 80009a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009a2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a60 <SystemClock_Config+0xec>)
 80009a4:	f023 0301 	bic.w	r3, r3, #1
 80009a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000a60 <SystemClock_Config+0xec>)
 80009ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000a64 <SystemClock_Config+0xf0>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a2a      	ldr	r2, [pc, #168]	@ (8000a64 <SystemClock_Config+0xf0>)
 80009ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b28      	ldr	r3, [pc, #160]	@ (8000a64 <SystemClock_Config+0xf0>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009cc:	bf00      	nop
 80009ce:	4b25      	ldr	r3, [pc, #148]	@ (8000a64 <SystemClock_Config+0xf0>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009da:	d1f8      	bne.n	80009ce <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009dc:	2301      	movs	r3, #1
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e6:	2302      	movs	r3, #2
 80009e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ea:	2302      	movs	r3, #2
 80009ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80009f2:	2318      	movs	r3, #24
 80009f4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009f6:	2302      	movs	r3, #2
 80009f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80009fa:	2306      	movs	r3, #6
 80009fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a02:	230c      	movs	r3, #12
 8000a04:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a12:	4618      	mov	r0, r3
 8000a14:	f00c fbbc 	bl	800d190 <HAL_RCC_OscConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a1e:	f001 fc43 	bl	80022a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a22:	233f      	movs	r3, #63	@ 0x3f
 8000a24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a26:	2303      	movs	r3, #3
 8000a28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a32:	2340      	movs	r3, #64	@ 0x40
 8000a34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a36:	2340      	movs	r3, #64	@ 0x40
 8000a38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a3e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a40:	2340      	movs	r3, #64	@ 0x40
 8000a42:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2102      	movs	r1, #2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f00c fffb 	bl	800da44 <HAL_RCC_ClockConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000a54:	f001 fc28 	bl	80022a8 <Error_Handler>
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3770      	adds	r7, #112	@ 0x70
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	58000400 	.word	0x58000400
 8000a64:	58024800 	.word	0x58024800

08000a68 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000a6c:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a6e:	4a18      	ldr	r2, [pc, #96]	@ (8000ad0 <MX_DCMI_Init+0x68>)
 8000a70:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000a72:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000a78:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000a7e:	4b13      	ldr	r3, [pc, #76]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a80:	2280      	movs	r2, #128	@ 0x80
 8000a82:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000a84:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000a96:	4b0d      	ldr	r3, [pc, #52]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_OTHER;
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000aa2:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_EVEN;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000aa6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000aaa:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000aac:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000ab8:	4804      	ldr	r0, [pc, #16]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000aba:	f002 feaf 	bl	800381c <HAL_DCMI_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_DCMI_Init+0x60>
  {
    Error_Handler();
 8000ac4:	f001 fbf0 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	24000300 	.word	0x24000300
 8000ad0:	48020000 	.word	0x48020000

08000ad4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000ada:	4a1c      	ldr	r2, [pc, #112]	@ (8000b4c <MX_I2C2_Init+0x78>)
 8000adc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b50 <MX_I2C2_Init+0x7c>)
 8000ae2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aea:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af0:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000af6:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b0e:	480e      	ldr	r0, [pc, #56]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000b10:	f006 fe34 	bl	800777c <HAL_I2C_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b1a:	f001 fbc5 	bl	80022a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4809      	ldr	r0, [pc, #36]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000b22:	f008 fa5f 	bl	8008fe4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b2c:	f001 fbbc 	bl	80022a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b30:	2100      	movs	r1, #0
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000b34:	f008 faa1 	bl	800907a <HAL_I2CEx_ConfigDigitalFilter>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b3e:	f001 fbb3 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	240003c8 	.word	0x240003c8
 8000b4c:	40005800 	.word	0x40005800
 8000b50:	00c0eaff 	.word	0x00c0eaff

08000b54 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <MX_JPEG_Init+0x20>)
 8000b5a:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <MX_JPEG_Init+0x24>)
 8000b5c:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	@ (8000b74 <MX_JPEG_Init+0x20>)
 8000b60:	f008 fad8 	bl	8009114 <HAL_JPEG_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000b6a:	f001 fb9d 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2400041c 	.word	0x2400041c
 8000b78:	52003000 	.word	0x52003000

08000b7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b80:	4b27      	ldr	r3, [pc, #156]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000b82:	4a28      	ldr	r2, [pc, #160]	@ (8000c24 <MX_SPI2_Init+0xa8>)
 8000b84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b86:	4b26      	ldr	r3, [pc, #152]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000b88:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b8e:	4b24      	ldr	r3, [pc, #144]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b94:	4b22      	ldr	r3, [pc, #136]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000b96:	2207      	movs	r2, #7
 8000b98:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b9a:	4b21      	ldr	r3, [pc, #132]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000b9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ba0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000baa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000bae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bb2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000bb6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb8:	4b19      	ldr	r3, [pc, #100]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bbe:	4b18      	ldr	r3, [pc, #96]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc4:	4b16      	ldr	r3, [pc, #88]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000bca:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000bd0:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bd6:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bdc:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000be2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000be8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bee:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c00:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c0c:	4804      	ldr	r0, [pc, #16]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000c0e:	f00f f8d1 	bl	800fdb4 <HAL_SPI_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000c18:	f001 fb46 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	2400054c 	.word	0x2400054c
 8000c24:	40003800 	.word	0x40003800

08000c28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b096      	sub	sp, #88	@ 0x58
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c3a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
 8000c4a:	615a      	str	r2, [r3, #20]
 8000c4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	222c      	movs	r2, #44	@ 0x2c
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f018 fadc 	bl	8019212 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c5a:	4b38      	ldr	r3, [pc, #224]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c5c:	4a38      	ldr	r2, [pc, #224]	@ (8000d40 <MX_TIM1_Init+0x118>)
 8000c5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c60:	4b36      	ldr	r3, [pc, #216]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c66:	4b35      	ldr	r3, [pc, #212]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000c6c:	4b33      	ldr	r3, [pc, #204]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c6e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000c72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c74:	4b31      	ldr	r3, [pc, #196]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c7a:	4b30      	ldr	r3, [pc, #192]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c80:	4b2e      	ldr	r3, [pc, #184]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c86:	482d      	ldr	r0, [pc, #180]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c88:	f00f ffd0 	bl	8010c2c <HAL_TIM_PWM_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000c92:	f001 fb09 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c96:	2300      	movs	r3, #0
 8000c98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ca2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4824      	ldr	r0, [pc, #144]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000caa:	f011 f8a5 	bl	8011df8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000cb4:	f001 faf8 	bl	80022a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb8:	2360      	movs	r3, #96	@ 0x60
 8000cba:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cd0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cd4:	220c      	movs	r2, #12
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4818      	ldr	r0, [pc, #96]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000cda:	f010 fa15 	bl	8011108 <HAL_TIM_PWM_ConfigChannel>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000ce4:	f001 fae0 	bl	80022a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4807      	ldr	r0, [pc, #28]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000d1e:	f011 f8f9 	bl	8011f14 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000d28:	f001 fabe 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d2c:	4803      	ldr	r0, [pc, #12]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000d2e:	f001 fe75 	bl	8002a1c <HAL_TIM_MspPostInit>

}
 8000d32:	bf00      	nop
 8000d34:	3758      	adds	r7, #88	@ 0x58
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	240005d4 	.word	0x240005d4
 8000d40:	40010000 	.word	0x40010000

08000d44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d56:	463b      	mov	r3, r7
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
 8000d64:	615a      	str	r2, [r3, #20]
 8000d66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d68:	4b2d      	ldr	r3, [pc, #180]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000d6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d70:	4b2b      	ldr	r3, [pc, #172]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d76:	4b2a      	ldr	r3, [pc, #168]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000d7c:	4b28      	ldr	r3, [pc, #160]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000d7e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d84:	4b26      	ldr	r3, [pc, #152]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8a:	4b25      	ldr	r3, [pc, #148]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d90:	4823      	ldr	r0, [pc, #140]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000d92:	f00f ff4b 	bl	8010c2c <HAL_TIM_PWM_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000d9c:	f001 fa84 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	481c      	ldr	r0, [pc, #112]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000db0:	f011 f822 	bl	8011df8 <HAL_TIMEx_MasterConfigSynchronization>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000dba:	f001 fa75 	bl	80022a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dbe:	2360      	movs	r3, #96	@ 0x60
 8000dc0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dce:	463b      	mov	r3, r7
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4812      	ldr	r0, [pc, #72]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000dd6:	f010 f997 	bl	8011108 <HAL_TIM_PWM_ConfigChannel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000de0:	f001 fa62 	bl	80022a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000de4:	463b      	mov	r3, r7
 8000de6:	2204      	movs	r2, #4
 8000de8:	4619      	mov	r1, r3
 8000dea:	480d      	ldr	r0, [pc, #52]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000dec:	f010 f98c 	bl	8011108 <HAL_TIM_PWM_ConfigChannel>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000df6:	f001 fa57 	bl	80022a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	2208      	movs	r2, #8
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4807      	ldr	r0, [pc, #28]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000e02:	f010 f981 	bl	8011108 <HAL_TIM_PWM_ConfigChannel>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000e0c:	f001 fa4c 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e10:	4803      	ldr	r0, [pc, #12]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000e12:	f001 fe03 	bl	8002a1c <HAL_TIM_MspPostInit>

}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	@ 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	24000620 	.word	0x24000620

08000e24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	@ 0x28
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e36:	463b      	mov	r3, r7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
 8000e44:	615a      	str	r2, [r3, #20]
 8000e46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e48:	4b27      	ldr	r3, [pc, #156]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e4a:	4a28      	ldr	r2, [pc, #160]	@ (8000eec <MX_TIM3_Init+0xc8>)
 8000e4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e54:	4b24      	ldr	r3, [pc, #144]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000e5a:	4b23      	ldr	r3, [pc, #140]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e5c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e62:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e6e:	481e      	ldr	r0, [pc, #120]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e70:	f00f fedc 	bl	8010c2c <HAL_TIM_PWM_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000e7a:	f001 fa15 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4816      	ldr	r0, [pc, #88]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e8e:	f010 ffb3 	bl	8011df8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000e98:	f001 fa06 	bl	80022a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9c:	2360      	movs	r3, #96	@ 0x60
 8000e9e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	2208      	movs	r2, #8
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480d      	ldr	r0, [pc, #52]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000eb4:	f010 f928 	bl	8011108 <HAL_TIM_PWM_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000ebe:	f001 f9f3 	bl	80022a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	220c      	movs	r2, #12
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4807      	ldr	r0, [pc, #28]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000eca:	f010 f91d 	bl	8011108 <HAL_TIM_PWM_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000ed4:	f001 f9e8 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ed8:	4803      	ldr	r0, [pc, #12]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000eda:	f001 fd9f 	bl	8002a1c <HAL_TIM_MspPostInit>

}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	@ 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2400066c 	.word	0x2400066c
 8000eec:	40000400 	.word	0x40000400

08000ef0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	@ 0x28
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f02:	463b      	mov	r3, r7
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
 8000f10:	615a      	str	r2, [r3, #20]
 8000f12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f14:	4b27      	ldr	r3, [pc, #156]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f16:	4a28      	ldr	r2, [pc, #160]	@ (8000fb8 <MX_TIM4_Init+0xc8>)
 8000f18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f1a:	4b26      	ldr	r3, [pc, #152]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f20:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000f26:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f28:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000f2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2e:	4b21      	ldr	r3, [pc, #132]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f34:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f3a:	481e      	ldr	r0, [pc, #120]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f3c:	f00f fe76 	bl	8010c2c <HAL_TIM_PWM_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000f46:	f001 f9af 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4816      	ldr	r0, [pc, #88]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f5a:	f010 ff4d 	bl	8011df8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000f64:	f001 f9a0 	bl	80022a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f68:	2360      	movs	r3, #96	@ 0x60
 8000f6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	2208      	movs	r2, #8
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480d      	ldr	r0, [pc, #52]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f80:	f010 f8c2 	bl	8011108 <HAL_TIM_PWM_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000f8a:	f001 f98d 	bl	80022a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f8e:	463b      	mov	r3, r7
 8000f90:	220c      	movs	r2, #12
 8000f92:	4619      	mov	r1, r3
 8000f94:	4807      	ldr	r0, [pc, #28]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f96:	f010 f8b7 	bl	8011108 <HAL_TIM_PWM_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000fa0:	f001 f982 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000fa4:	4803      	ldr	r0, [pc, #12]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000fa6:	f001 fd39 	bl	8002a1c <HAL_TIM_MspPostInit>

}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	@ 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	240006b8 	.word	0x240006b8
 8000fb8:	40000800 	.word	0x40000800

08000fbc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc2:	f107 0310 	add.w	r3, r7, #16
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000fda:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8001054 <MX_TIM5_Init+0x98>)
 8000fde:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 7499998;
 8000fec:	4b18      	ldr	r3, [pc, #96]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000fee:	4a1a      	ldr	r2, [pc, #104]	@ (8001058 <MX_TIM5_Init+0x9c>)
 8000ff0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff2:	4b17      	ldr	r3, [pc, #92]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff8:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ffe:	4814      	ldr	r0, [pc, #80]	@ (8001050 <MX_TIM5_Init+0x94>)
 8001000:	f00f fd45 	bl	8010a8e <HAL_TIM_Base_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800100a:	f001 f94d 	bl	80022a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001012:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4619      	mov	r1, r3
 800101a:	480d      	ldr	r0, [pc, #52]	@ (8001050 <MX_TIM5_Init+0x94>)
 800101c:	f010 f988 	bl	8011330 <HAL_TIM_ConfigClockSource>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001026:	f001 f93f 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	4619      	mov	r1, r3
 8001036:	4806      	ldr	r0, [pc, #24]	@ (8001050 <MX_TIM5_Init+0x94>)
 8001038:	f010 fede 	bl	8011df8 <HAL_TIMEx_MasterConfigSynchronization>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001042:	f001 f931 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	3720      	adds	r7, #32
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	24000704 	.word	0x24000704
 8001054:	40000c00 	.word	0x40000c00
 8001058:	007270de 	.word	0x007270de

0800105c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
 8001070:	615a      	str	r2, [r3, #20]
 8001072:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001074:	4b1d      	ldr	r3, [pc, #116]	@ (80010ec <MX_TIM14_Init+0x90>)
 8001076:	4a1e      	ldr	r2, [pc, #120]	@ (80010f0 <MX_TIM14_Init+0x94>)
 8001078:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800107a:	4b1c      	ldr	r3, [pc, #112]	@ (80010ec <MX_TIM14_Init+0x90>)
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001080:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <MX_TIM14_Init+0x90>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5;
 8001086:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <MX_TIM14_Init+0x90>)
 8001088:	2205      	movs	r2, #5
 800108a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <MX_TIM14_Init+0x90>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001092:	4b16      	ldr	r3, [pc, #88]	@ (80010ec <MX_TIM14_Init+0x90>)
 8001094:	2280      	movs	r2, #128	@ 0x80
 8001096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001098:	4814      	ldr	r0, [pc, #80]	@ (80010ec <MX_TIM14_Init+0x90>)
 800109a:	f00f fcf8 	bl	8010a8e <HAL_TIM_Base_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 80010a4:	f001 f900 	bl	80022a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80010a8:	4810      	ldr	r0, [pc, #64]	@ (80010ec <MX_TIM14_Init+0x90>)
 80010aa:	f00f fdbf 	bl	8010c2c <HAL_TIM_PWM_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 80010b4:	f001 f8f8 	bl	80022a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b8:	2360      	movs	r3, #96	@ 0x60
 80010ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3;
 80010bc:	2303      	movs	r3, #3
 80010be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80010c4:	2304      	movs	r3, #4
 80010c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	4619      	mov	r1, r3
 80010ce:	4807      	ldr	r0, [pc, #28]	@ (80010ec <MX_TIM14_Init+0x90>)
 80010d0:	f010 f81a 	bl	8011108 <HAL_TIM_PWM_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 80010da:	f001 f8e5 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80010de:	4803      	ldr	r0, [pc, #12]	@ (80010ec <MX_TIM14_Init+0x90>)
 80010e0:	f001 fc9c 	bl	8002a1c <HAL_TIM_MspPostInit>

}
 80010e4:	bf00      	nop
 80010e6:	3720      	adds	r7, #32
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	24000750 	.word	0x24000750
 80010f0:	40002000 	.word	0x40002000

080010f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010f8:	4b24      	ldr	r3, [pc, #144]	@ (800118c <MX_USART1_UART_Init+0x98>)
 80010fa:	4a25      	ldr	r2, [pc, #148]	@ (8001190 <MX_USART1_UART_Init+0x9c>)
 80010fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 111111;
 80010fe:	4b23      	ldr	r3, [pc, #140]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001100:	4a24      	ldr	r2, [pc, #144]	@ (8001194 <MX_USART1_UART_Init+0xa0>)
 8001102:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001104:	4b21      	ldr	r3, [pc, #132]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800110a:	4b20      	ldr	r3, [pc, #128]	@ (800118c <MX_USART1_UART_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001110:	4b1e      	ldr	r3, [pc, #120]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001116:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001118:	220c      	movs	r2, #12
 800111a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111c:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <MX_USART1_UART_Init+0x98>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001122:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001124:	2200      	movs	r2, #0
 8001126:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001128:	4b18      	ldr	r3, [pc, #96]	@ (800118c <MX_USART1_UART_Init+0x98>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800112e:	4b17      	ldr	r3, [pc, #92]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001134:	4b15      	ldr	r3, [pc, #84]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001136:	2220      	movs	r2, #32
 8001138:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800113a:	4b14      	ldr	r3, [pc, #80]	@ (800118c <MX_USART1_UART_Init+0x98>)
 800113c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001140:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001142:	4812      	ldr	r0, [pc, #72]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001144:	f010 ff82 	bl	801204c <HAL_UART_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 800114e:	f001 f8ab 	bl	80022a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001152:	2100      	movs	r1, #0
 8001154:	480d      	ldr	r0, [pc, #52]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001156:	f012 fe9c 	bl	8013e92 <HAL_UARTEx_SetTxFifoThreshold>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8001160:	f001 f8a2 	bl	80022a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001164:	2100      	movs	r1, #0
 8001166:	4809      	ldr	r0, [pc, #36]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001168:	f012 fed1 	bl	8013f0e <HAL_UARTEx_SetRxFifoThreshold>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8001172:	f001 f899 	bl	80022a8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001178:	f012 fe50 	bl	8013e1c <HAL_UARTEx_EnableFifoMode>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8001182:	f001 f891 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	2400079c 	.word	0x2400079c
 8001190:	40011000 	.word	0x40011000
 8001194:	0001b207 	.word	0x0001b207

08001198 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119e:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <MX_DMA_Init+0x6c>)
 80011a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011a4:	4a17      	ldr	r2, [pc, #92]	@ (8001204 <MX_DMA_Init+0x6c>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011ae:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <MX_DMA_Init+0x6c>)
 80011b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <MX_DMA_Init+0x6c>)
 80011be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011c2:	4a10      	ldr	r2, [pc, #64]	@ (8001204 <MX_DMA_Init+0x6c>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001204 <MX_DMA_Init+0x6c>)
 80011ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	200b      	movs	r0, #11
 80011e0:	f002 fa6f 	bl	80036c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011e4:	200b      	movs	r0, #11
 80011e6:	f002 fa86 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	2038      	movs	r0, #56	@ 0x38
 80011f0:	f002 fa67 	bl	80036c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011f4:	2038      	movs	r0, #56	@ 0x38
 80011f6:	f002 fa7e 	bl	80036f6 <HAL_NVIC_EnableIRQ>

}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	58024400 	.word	0x58024400

08001208 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 800120e:	4b0d      	ldr	r3, [pc, #52]	@ (8001244 <MX_MDMA_Init+0x3c>)
 8001210:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001214:	4a0b      	ldr	r2, [pc, #44]	@ (8001244 <MX_MDMA_Init+0x3c>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800121e:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <MX_MDMA_Init+0x3c>)
 8001220:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	207a      	movs	r0, #122	@ 0x7a
 8001232:	f002 fa46 	bl	80036c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001236:	207a      	movs	r0, #122	@ 0x7a
 8001238:	f002 fa5d 	bl	80036f6 <HAL_NVIC_EnableIRQ>

}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	58024400 	.word	0x58024400

08001248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08c      	sub	sp, #48	@ 0x30
 800124c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800125e:	4b52      	ldr	r3, [pc, #328]	@ (80013a8 <MX_GPIO_Init+0x160>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001264:	4a50      	ldr	r2, [pc, #320]	@ (80013a8 <MX_GPIO_Init+0x160>)
 8001266:	f043 0310 	orr.w	r3, r3, #16
 800126a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800126e:	4b4e      	ldr	r3, [pc, #312]	@ (80013a8 <MX_GPIO_Init+0x160>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127c:	4b4a      	ldr	r3, [pc, #296]	@ (80013a8 <MX_GPIO_Init+0x160>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001282:	4a49      	ldr	r2, [pc, #292]	@ (80013a8 <MX_GPIO_Init+0x160>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800128c:	4b46      	ldr	r3, [pc, #280]	@ (80013a8 <MX_GPIO_Init+0x160>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129a:	4b43      	ldr	r3, [pc, #268]	@ (80013a8 <MX_GPIO_Init+0x160>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a0:	4a41      	ldr	r2, [pc, #260]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012aa:	4b3f      	ldr	r3, [pc, #252]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b8:	4b3b      	ldr	r3, [pc, #236]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012be:	4a3a      	ldr	r2, [pc, #232]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c8:	4b37      	ldr	r3, [pc, #220]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	4b34      	ldr	r3, [pc, #208]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012dc:	4a32      	ldr	r2, [pc, #200]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012de:	f043 0302 	orr.w	r3, r3, #2
 80012e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e6:	4b30      	ldr	r3, [pc, #192]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f4:	4b2c      	ldr	r3, [pc, #176]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fa:	4a2b      	ldr	r2, [pc, #172]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001304:	4b28      	ldr	r3, [pc, #160]	@ (80013a8 <MX_GPIO_Init+0x160>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_CS_Pin|INA_CS_Pin, GPIO_PIN_SET);
 8001312:	2201      	movs	r2, #1
 8001314:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001318:	4824      	ldr	r0, [pc, #144]	@ (80013ac <MX_GPIO_Init+0x164>)
 800131a:	f006 fa15 	bl	8007748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800131e:	2201      	movs	r2, #1
 8001320:	2108      	movs	r1, #8
 8001322:	4823      	ldr	r0, [pc, #140]	@ (80013b0 <MX_GPIO_Init+0x168>)
 8001324:	f006 fa10 	bl	8007748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	2101      	movs	r1, #1
 800132c:	4821      	ldr	r0, [pc, #132]	@ (80013b4 <MX_GPIO_Init+0x16c>)
 800132e:	f006 fa0b 	bl	8007748 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_CS_Pin INA_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin|INA_CS_Pin;
 8001332:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2301      	movs	r3, #1
 800133a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	4619      	mov	r1, r3
 800134a:	4818      	ldr	r0, [pc, #96]	@ (80013ac <MX_GPIO_Init+0x164>)
 800134c:	f006 f84c 	bl	80073e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001350:	2301      	movs	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	4812      	ldr	r0, [pc, #72]	@ (80013ac <MX_GPIO_Init+0x164>)
 8001364:	f006 f840 	bl	80073e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001368:	2308      	movs	r3, #8
 800136a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	2301      	movs	r3, #1
 800136e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4619      	mov	r1, r3
 800137e:	480c      	ldr	r0, [pc, #48]	@ (80013b0 <MX_GPIO_Init+0x168>)
 8001380:	f006 f832 	bl	80073e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001384:	2301      	movs	r3, #1
 8001386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	4806      	ldr	r0, [pc, #24]	@ (80013b4 <MX_GPIO_Init+0x16c>)
 800139c:	f006 f824 	bl	80073e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013a0:	bf00      	nop
 80013a2:	3730      	adds	r7, #48	@ 0x30
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	58024400 	.word	0x58024400
 80013ac:	58020800 	.word	0x58020800
 80013b0:	58020000 	.word	0x58020000
 80013b4:	58020c00 	.word	0x58020c00

080013b8 <NetworkTimeout>:

/* USER CODE BEGIN 4 */

// Watchdog Fucntions
void NetworkTimeout() {
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
	// TEMPORARY: DISABLE THIS FOR TESTING
	return;
 80013bc:	bf00      	nop
			// DEBUG
			sprintf(ssd_msg, "Network Dead!\n");
			WriteDebug(ssd_msg, strlen(ssd_msg));
		}
	}
}
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <SCH_XBeeRX>:

// ------------------------------------------------------------ SCHEDULING FUNCTIONS -- //
void SCH_XBeeRX() {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
	uint8_t *packet;
	uint16_t byte_num;
	if (XBEE_RXPacket(&hxbee, &packet, &byte_num)) {
 80013ce:	1cba      	adds	r2, r7, #2
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4886      	ldr	r0, [pc, #536]	@ (80015f0 <SCH_XBeeRX+0x228>)
 80013d6:	f014 f9d1 	bl	801577c <XBEE_RXPacket>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f040 80ff 	bne.w	80015e0 <SCH_XBeeRX+0x218>
		return;
	}

	// Network active, reset the watchdog
	if (wdog_network >= WDOG_NETWORK_CUTOFF) {
 80013e2:	4b84      	ldr	r3, [pc, #528]	@ (80015f4 <SCH_XBeeRX+0x22c>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d90c      	bls.n	8001404 <SCH_XBeeRX+0x3c>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); // Motor_en
		// DEBUG
		sprintf(ssd_msg, "Network Alive!\n");
 80013ea:	4983      	ldr	r1, [pc, #524]	@ (80015f8 <SCH_XBeeRX+0x230>)
 80013ec:	4883      	ldr	r0, [pc, #524]	@ (80015fc <SCH_XBeeRX+0x234>)
 80013ee:	f017 feab 	bl	8019148 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 80013f2:	4882      	ldr	r0, [pc, #520]	@ (80015fc <SCH_XBeeRX+0x234>)
 80013f4:	f7fe ffc4 	bl	8000380 <strlen>
 80013f8:	4603      	mov	r3, r0
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	4619      	mov	r1, r3
 80013fe:	487f      	ldr	r0, [pc, #508]	@ (80015fc <SCH_XBeeRX+0x234>)
 8001400:	f000 fd55 	bl	8001eae <WriteDebug>
	}
	wdog_network = 0;
 8001404:	4b7b      	ldr	r3, [pc, #492]	@ (80015f4 <SCH_XBeeRX+0x22c>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]

	// Parse the packet
	if (byte_num == 0xFFFF) {
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001410:	4293      	cmp	r3, r2
 8001412:	f040 80e6 	bne.w	80015e2 <SCH_XBeeRX+0x21a>
		// Configuration Packet
		if (packet[1] != jpeg_quality) {
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3301      	adds	r3, #1
 800141a:	781a      	ldrb	r2, [r3, #0]
 800141c:	4b78      	ldr	r3, [pc, #480]	@ (8001600 <SCH_XBeeRX+0x238>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d027      	beq.n	8001474 <SCH_XBeeRX+0xac>
			// JPEG QUALITY CHANGED
			jpeg_quality = packet[1];
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	785a      	ldrb	r2, [r3, #1]
 8001428:	4b75      	ldr	r3, [pc, #468]	@ (8001600 <SCH_XBeeRX+0x238>)
 800142a:	701a      	strb	r2, [r3, #0]
			// Reconfigure the JPEG HW
			JPEG_ConfTypeDef* jpeg_config;
			jpeg_config->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
			jpeg_config->ImageWidth = jpeg_mcu_widths[jpeg_quality]*8;
 8001432:	4b73      	ldr	r3, [pc, #460]	@ (8001600 <SCH_XBeeRX+0x238>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	4b72      	ldr	r3, [pc, #456]	@ (8001604 <SCH_XBeeRX+0x23c>)
 800143a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	461a      	mov	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	60da      	str	r2, [r3, #12]
			jpeg_config->ImageHeight = jpeg_mcu_heights[jpeg_quality]*8;
 8001446:	4b6e      	ldr	r3, [pc, #440]	@ (8001600 <SCH_XBeeRX+0x238>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	4b6e      	ldr	r3, [pc, #440]	@ (8001608 <SCH_XBeeRX+0x240>)
 800144e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	461a      	mov	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	609a      	str	r2, [r3, #8]
			jpeg_config->ImageQuality = JPEG_QUALITY;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2214      	movs	r2, #20
 800145e:	611a      	str	r2, [r3, #16]
			HAL_JPEG_ConfigEncoding(&hjpeg, jpeg_config);
 8001460:	68f9      	ldr	r1, [r7, #12]
 8001462:	486a      	ldr	r0, [pc, #424]	@ (800160c <SCH_XBeeRX+0x244>)
 8001464:	f007 fed8 	bl	8009218 <HAL_JPEG_ConfigEncoding>

			jpeg_state = 0;	// Invalidate current JPEG
 8001468:	4b69      	ldr	r3, [pc, #420]	@ (8001610 <SCH_XBeeRX+0x248>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
			tx_state = 2;	// Flag a header re-transmit
 800146e:	4b69      	ldr	r3, [pc, #420]	@ (8001614 <SCH_XBeeRX+0x24c>)
 8001470:	2202      	movs	r2, #2
 8001472:	701a      	strb	r2, [r3, #0]
		}

		// Don't process high power systems if the overcurrent protection is active
		if (overcurrent_protState) {
 8001474:	4b68      	ldr	r3, [pc, #416]	@ (8001618 <SCH_XBeeRX+0x250>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d015      	beq.n	80014a8 <SCH_XBeeRX+0xe0>
			// KILL THE LIGHTS
			// LIGHTS (0-2000)
			TIM1->CCR4 = 0; // L1
 800147c:	4b67      	ldr	r3, [pc, #412]	@ (800161c <SCH_XBeeRX+0x254>)
 800147e:	2200      	movs	r2, #0
 8001480:	641a      	str	r2, [r3, #64]	@ 0x40
			TIM3->CCR4 = 0; // L2
 8001482:	4b67      	ldr	r3, [pc, #412]	@ (8001620 <SCH_XBeeRX+0x258>)
 8001484:	2200      	movs	r2, #0
 8001486:	641a      	str	r2, [r3, #64]	@ 0x40
			TIM3->CCR3 = 0; // L3
 8001488:	4b65      	ldr	r3, [pc, #404]	@ (8001620 <SCH_XBeeRX+0x258>)
 800148a:	2200      	movs	r2, #0
 800148c:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM2->CCR4 = 0; // L4
 800148e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001492:	2200      	movs	r2, #0
 8001494:	641a      	str	r2, [r3, #64]	@ 0x40

			// KILL THE MOTORS (ABIDE BY CTRL RULES)
			ctrl_input[0] = 0; // Motor 1
 8001496:	4b63      	ldr	r3, [pc, #396]	@ (8001624 <SCH_XBeeRX+0x25c>)
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
			ctrl_input[1] = 0; // Motor 2
 800149e:	4b61      	ldr	r3, [pc, #388]	@ (8001624 <SCH_XBeeRX+0x25c>)
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	e09c      	b.n	80015e2 <SCH_XBeeRX+0x21a>

		} else {
			// LIGHTS (0-2000)
			TIM1->CCR4 = packet[3]*500; // L1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3303      	adds	r3, #3
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014b4:	fb03 f202 	mul.w	r2, r3, r2
 80014b8:	4b58      	ldr	r3, [pc, #352]	@ (800161c <SCH_XBeeRX+0x254>)
 80014ba:	641a      	str	r2, [r3, #64]	@ 0x40
			TIM3->CCR4 = packet[4]*500; // L2
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3304      	adds	r3, #4
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014c8:	fb03 f202 	mul.w	r2, r3, r2
 80014cc:	4b54      	ldr	r3, [pc, #336]	@ (8001620 <SCH_XBeeRX+0x258>)
 80014ce:	641a      	str	r2, [r3, #64]	@ 0x40
			TIM3->CCR3 = packet[5]*500; // L3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3305      	adds	r3, #5
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014dc:	fb03 f202 	mul.w	r2, r3, r2
 80014e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001620 <SCH_XBeeRX+0x258>)
 80014e2:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM2->CCR4 = packet[6]*500; // L4
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3306      	adds	r3, #6
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014f0:	fb03 f202 	mul.w	r2, r3, r2
 80014f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014f8:	641a      	str	r2, [r3, #64]	@ 0x40


			// TANK CONTROL (THIS IS EXTREMELY IMPORTANT)
			uint8_t motor1_dir = packet[0x0A];	// DIR_LEFT
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	7a9b      	ldrb	r3, [r3, #10]
 80014fe:	72fb      	strb	r3, [r7, #11]
			uint8_t motor2_dir = packet[0x09];	// DIR_RIGHT
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7a5b      	ldrb	r3, [r3, #9]
 8001504:	72bb      	strb	r3, [r7, #10]

			// Use the direction to set the desired power output
			// 0-255 >> REMAP >> 0-2000
			if (motor1_dir)
 8001506:	7afb      	ldrb	r3, [r7, #11]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d018      	beq.n	800153e <SCH_XBeeRX+0x176>
				ctrl_input[0] = -((float)packet[0x08])*20.0/2.55;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3308      	adds	r3, #8
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800151a:	eef1 7a67 	vneg.f32	s15, s15
 800151e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001522:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 8001526:	ee27 6b06 	vmul.f64	d6, d7, d6
 800152a:	ed9f 5b2f 	vldr	d5, [pc, #188]	@ 80015e8 <SCH_XBeeRX+0x220>
 800152e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001532:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001536:	4b3b      	ldr	r3, [pc, #236]	@ (8001624 <SCH_XBeeRX+0x25c>)
 8001538:	edc3 7a00 	vstr	s15, [r3]
 800153c:	e015      	b.n	800156a <SCH_XBeeRX+0x1a2>
			else
				ctrl_input[0] = ((float)packet[0x08])*20.0/2.55;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3308      	adds	r3, #8
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	ee07 3a90 	vmov	s15, r3
 8001548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800154c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001550:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 8001554:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001558:	ed9f 5b23 	vldr	d5, [pc, #140]	@ 80015e8 <SCH_XBeeRX+0x220>
 800155c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001560:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001564:	4b2f      	ldr	r3, [pc, #188]	@ (8001624 <SCH_XBeeRX+0x25c>)
 8001566:	edc3 7a00 	vstr	s15, [r3]

			if (motor2_dir)
 800156a:	7abb      	ldrb	r3, [r7, #10]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d016      	beq.n	800159e <SCH_XBeeRX+0x1d6>
				ctrl_input[1] = ((float)packet[0x07])*20.0/2.55;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3307      	adds	r3, #7
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	ee07 3a90 	vmov	s15, r3
 800157a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800157e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001582:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 8001586:	ee27 6b06 	vmul.f64	d6, d7, d6
 800158a:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 80015e8 <SCH_XBeeRX+0x220>
 800158e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001592:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001596:	4b23      	ldr	r3, [pc, #140]	@ (8001624 <SCH_XBeeRX+0x25c>)
 8001598:	edc3 7a01 	vstr	s15, [r3, #4]
 800159c:	e017      	b.n	80015ce <SCH_XBeeRX+0x206>
			else
				ctrl_input[1] = -((float)packet[0x07])*20.0/2.55;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3307      	adds	r3, #7
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ac:	eef1 7a67 	vneg.f32	s15, s15
 80015b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015b4:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 80015b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015bc:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 80015e8 <SCH_XBeeRX+0x220>
 80015c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015c8:	4b16      	ldr	r3, [pc, #88]	@ (8001624 <SCH_XBeeRX+0x25c>)
 80015ca:	edc3 7a01 	vstr	s15, [r3, #4]

			ctrl_inputLast[0] = ctrl_input[0];
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <SCH_XBeeRX+0x25c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a15      	ldr	r2, [pc, #84]	@ (8001628 <SCH_XBeeRX+0x260>)
 80015d4:	6013      	str	r3, [r2, #0]
			ctrl_inputLast[1] = ctrl_input[1];
 80015d6:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <SCH_XBeeRX+0x25c>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4a13      	ldr	r2, [pc, #76]	@ (8001628 <SCH_XBeeRX+0x260>)
 80015dc:	6053      	str	r3, [r2, #4]
 80015de:	e000      	b.n	80015e2 <SCH_XBeeRX+0x21a>
		return;
 80015e0:	bf00      	nop
		}
	}
}
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	66666666 	.word	0x66666666
 80015ec:	40046666 	.word	0x40046666
 80015f0:	24025d40 	.word	0x24025d40
 80015f4:	240008a8 	.word	0x240008a8
 80015f8:	0801b1c4 	.word	0x0801b1c4
 80015fc:	240008e4 	.word	0x240008e4
 8001600:	24025d3c 	.word	0x24025d3c
 8001604:	24000004 	.word	0x24000004
 8001608:	2400000c 	.word	0x2400000c
 800160c:	2400041c 	.word	0x2400041c
 8001610:	24025d36 	.word	0x24025d36
 8001614:	24025d66 	.word	0x24025d66
 8001618:	240008a9 	.word	0x240008a9
 800161c:	40010000 	.word	0x40010000
 8001620:	40000400 	.word	0x40000400
 8001624:	240008c4 	.word	0x240008c4
 8001628:	240008cc 	.word	0x240008cc

0800162c <SCH_XBeeTX>:

void SCH_XBeeTX() {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0

	// Early exit if the JPEG isn't ready, nothing to transmit
	if (jpeg_state != 2)
 8001632:	4b44      	ldr	r3, [pc, #272]	@ (8001744 <SCH_XBeeTX+0x118>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d17a      	bne.n	8001732 <SCH_XBeeTX+0x106>
		return;

	// Get delta time, there has to be a delay for the TX to work properly
	uint32_t delta_t = DeltaTime(sch_tim_tx);
 800163c:	4b42      	ldr	r3, [pc, #264]	@ (8001748 <SCH_XBeeTX+0x11c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f000 fc1d 	bl	8001e80 <DeltaTime>
 8001646:	6078      	str	r0, [r7, #4]
	if (delta_t < SCH_MS_TX) return;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b04      	cmp	r3, #4
 800164c:	d973      	bls.n	8001736 <SCH_XBeeTX+0x10a>

	if (tx_state == 0)
 800164e:	4b3f      	ldr	r3, [pc, #252]	@ (800174c <SCH_XBeeTX+0x120>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <SCH_XBeeTX+0x32>
		tx_state = 1;	// If Idle, Flag as transmitting IMAGE
 8001658:	4b3c      	ldr	r3, [pc, #240]	@ (800174c <SCH_XBeeTX+0x120>)
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]

	if (tx_state == 1) {
 800165e:	4b3b      	ldr	r3, [pc, #236]	@ (800174c <SCH_XBeeTX+0x120>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b01      	cmp	r3, #1
 8001666:	d112      	bne.n	800168e <SCH_XBeeTX+0x62>
		// Send an IMAGE packet
		// Image packet numbers:  0000, 0001, 0002, ...
		if (XBEE_TXPacket(&hxbee, jpeg_out + tx_byte*UART_TXSIZE + JPEG_HEADERSIZE, tx_byte)) {
 8001668:	4b39      	ldr	r3, [pc, #228]	@ (8001750 <SCH_XBeeTX+0x124>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	b29b      	uxth	r3, r3
 800166e:	019b      	lsls	r3, r3, #6
 8001670:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 8001674:	4a37      	ldr	r2, [pc, #220]	@ (8001754 <SCH_XBeeTX+0x128>)
 8001676:	4413      	add	r3, r2
 8001678:	4a35      	ldr	r2, [pc, #212]	@ (8001750 <SCH_XBeeTX+0x124>)
 800167a:	8812      	ldrh	r2, [r2, #0]
 800167c:	b292      	uxth	r2, r2
 800167e:	4619      	mov	r1, r3
 8001680:	4835      	ldr	r0, [pc, #212]	@ (8001758 <SCH_XBeeTX+0x12c>)
 8001682:	f014 f8eb 	bl	801585c <XBEE_TXPacket>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d01a      	beq.n	80016c2 <SCH_XBeeTX+0x96>
			return;
 800168c:	e056      	b.n	800173c <SCH_XBeeTX+0x110>
		}
	} else if (tx_state == 2) {
 800168e:	4b2f      	ldr	r3, [pc, #188]	@ (800174c <SCH_XBeeTX+0x120>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d114      	bne.n	80016c2 <SCH_XBeeTX+0x96>
		// Send a HEADER packet
		// Header packet numbers: FFFE, FFFD, FFFC, ...
		if (XBEE_TXPacket(&hxbee, jpeg_out + tx_byte*UART_TXSIZE, 0xFFFF - (tx_byte+1))) {
 8001698:	4b2d      	ldr	r3, [pc, #180]	@ (8001750 <SCH_XBeeTX+0x124>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	b29b      	uxth	r3, r3
 800169e:	019b      	lsls	r3, r3, #6
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001754 <SCH_XBeeTX+0x128>)
 80016a4:	18d1      	adds	r1, r2, r3
 80016a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001750 <SCH_XBeeTX+0x124>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	f06f 0301 	mvn.w	r3, #1
 80016b0:	1a9b      	subs	r3, r3, r2
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	461a      	mov	r2, r3
 80016b6:	4828      	ldr	r0, [pc, #160]	@ (8001758 <SCH_XBeeTX+0x12c>)
 80016b8:	f014 f8d0 	bl	801585c <XBEE_TXPacket>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d13b      	bne.n	800173a <SCH_XBeeTX+0x10e>
			return;
		}
	}

	// Update the timer for the next DT period
	sch_tim_tx = HAL_GetTick();
 80016c2:	f001 fee7 	bl	8003494 <HAL_GetTick>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001748 <SCH_XBeeTX+0x11c>)
 80016ca:	6013      	str	r3, [r2, #0]
	tx_byte++;
 80016cc:	4b20      	ldr	r3, [pc, #128]	@ (8001750 <SCH_XBeeTX+0x124>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	3301      	adds	r3, #1
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <SCH_XBeeTX+0x124>)
 80016d8:	801a      	strh	r2, [r3, #0]

	// IMAGE Transmission complete
	if (tx_state == 1 && tx_byte > (jpeg_size - JPEG_HEADERSIZE) / UART_TXSIZE + 1) {
 80016da:	4b1c      	ldr	r3, [pc, #112]	@ (800174c <SCH_XBeeTX+0x120>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d115      	bne.n	8001710 <SCH_XBeeTX+0xe4>
 80016e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001750 <SCH_XBeeTX+0x124>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b1b      	ldr	r3, [pc, #108]	@ (800175c <SCH_XBeeTX+0x130>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 80016f4:	099b      	lsrs	r3, r3, #6
 80016f6:	3301      	adds	r3, #1
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d909      	bls.n	8001710 <SCH_XBeeTX+0xe4>
		tx_state = 0;	// Flag the radio as idle
 80016fc:	4b13      	ldr	r3, [pc, #76]	@ (800174c <SCH_XBeeTX+0x120>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
		tx_byte = 0;	// Reset the packet counter to 0
 8001702:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <SCH_XBeeTX+0x124>)
 8001704:	2200      	movs	r2, #0
 8001706:	801a      	strh	r2, [r3, #0]
		jpeg_state = 0;	// Flag the JPEG as idle
 8001708:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <SCH_XBeeTX+0x118>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
		return;
 800170e:	e015      	b.n	800173c <SCH_XBeeTX+0x110>
	}

	// HEADER Transmission complete
	if (tx_state == 2 && tx_byte > JPEG_HEADERSIZE / UART_TXSIZE + 1) {
 8001710:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <SCH_XBeeTX+0x120>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d110      	bne.n	800173c <SCH_XBeeTX+0x110>
 800171a:	4b0d      	ldr	r3, [pc, #52]	@ (8001750 <SCH_XBeeTX+0x124>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	b29b      	uxth	r3, r3
 8001720:	2b09      	cmp	r3, #9
 8001722:	d90b      	bls.n	800173c <SCH_XBeeTX+0x110>
		tx_state = 0;	// Flag the radio as idle
 8001724:	4b09      	ldr	r3, [pc, #36]	@ (800174c <SCH_XBeeTX+0x120>)
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
		tx_byte = 0;	// Reset the packet counter to 0
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <SCH_XBeeTX+0x124>)
 800172c:	2200      	movs	r2, #0
 800172e:	801a      	strh	r2, [r3, #0]
		return;
 8001730:	e004      	b.n	800173c <SCH_XBeeTX+0x110>
		return;
 8001732:	bf00      	nop
 8001734:	e002      	b.n	800173c <SCH_XBeeTX+0x110>
	if (delta_t < SCH_MS_TX) return;
 8001736:	bf00      	nop
 8001738:	e000      	b.n	800173c <SCH_XBeeTX+0x110>
			return;
 800173a:	bf00      	nop

//	for (uint16_t i = 0; i < ((jpeg_size - JPEG_HEADERSIZE) / UART_TXSIZE) + 1; i++) {
//		XBEE_TXPacket(&hxbee, jpeg_out + i*UART_TXSIZE + JPEG_HEADERSIZE, i);
//		HAL_Delay(5);
//	}
}
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	24025d36 	.word	0x24025d36
 8001748:	240008b4 	.word	0x240008b4
 800174c:	24025d66 	.word	0x24025d66
 8001750:	24025d64 	.word	0x24025d64
 8001754:	24013370 	.word	0x24013370
 8001758:	24025d40 	.word	0x24025d40
 800175c:	24025d38 	.word	0x24025d38

08001760 <SCH_CTRL>:

void SCH_CTRL() {
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
	uint32_t delta_t = DeltaTime(sch_tim_ctrl);
 8001766:	4ba0      	ldr	r3, [pc, #640]	@ (80019e8 <SCH_CTRL+0x288>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f000 fb88 	bl	8001e80 <DeltaTime>
 8001770:	60b8      	str	r0, [r7, #8]
	sch_tim_ctrl = HAL_GetTick();
 8001772:	f001 fe8f 	bl	8003494 <HAL_GetTick>
 8001776:	4603      	mov	r3, r0
 8001778:	4a9b      	ldr	r2, [pc, #620]	@ (80019e8 <SCH_CTRL+0x288>)
 800177a:	6013      	str	r3, [r2, #0]

	// This is how much the power level of the motors can change right now
	float maxAllowablePwrDelta = CTRL_MAX_PWRDELTA_PERSECOND*((float)delta_t/1000.0);
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	ee07 3a90 	vmov	s15, r3
 8001782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001786:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800178a:	ed9f 5b95 	vldr	d5, [pc, #596]	@ 80019e0 <SCH_CTRL+0x280>
 800178e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001792:	ed9f 6b93 	vldr	d6, [pc, #588]	@ 80019e0 <SCH_CTRL+0x280>
 8001796:	ee27 7b06 	vmul.f64	d7, d7, d6
 800179a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800179e:	edc7 7a01 	vstr	s15, [r7, #4]
	for (uint8_t i = 0; i < 2; i++) {
 80017a2:	2300      	movs	r3, #0
 80017a4:	73fb      	strb	r3, [r7, #15]
 80017a6:	e0e8      	b.n	800197a <SCH_CTRL+0x21a>
		// Correct the control signals if they somehow go out of bounds
		if (ctrl_input[i] >  2000.0) ctrl_input[i] =  2000.0;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	4a90      	ldr	r2, [pc, #576]	@ (80019ec <SCH_CTRL+0x28c>)
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 80019f0 <SCH_CTRL+0x290>
 80017b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	dd05      	ble.n	80017ce <SCH_CTRL+0x6e>
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	4a89      	ldr	r2, [pc, #548]	@ (80019ec <SCH_CTRL+0x28c>)
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	4a8a      	ldr	r2, [pc, #552]	@ (80019f4 <SCH_CTRL+0x294>)
 80017cc:	601a      	str	r2, [r3, #0]
		if (ctrl_input[i] < -2000.0) ctrl_input[i] = -2000.0;
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	4a86      	ldr	r2, [pc, #536]	@ (80019ec <SCH_CTRL+0x28c>)
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 80019f8 <SCH_CTRL+0x298>
 80017de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e6:	d505      	bpl.n	80017f4 <SCH_CTRL+0x94>
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	4a80      	ldr	r2, [pc, #512]	@ (80019ec <SCH_CTRL+0x28c>)
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	4a82      	ldr	r2, [pc, #520]	@ (80019fc <SCH_CTRL+0x29c>)
 80017f2:	601a      	str	r2, [r3, #0]

		float delta = ctrl_input[i] - ctrl_output[i];
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	4a7d      	ldr	r2, [pc, #500]	@ (80019ec <SCH_CTRL+0x28c>)
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	ed93 7a00 	vldr	s14, [r3]
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	4a7f      	ldr	r2, [pc, #508]	@ (8001a00 <SCH_CTRL+0x2a0>)
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001810:	edc7 7a00 	vstr	s15, [r7]
		if (delta > 0) {
 8001814:	edd7 7a00 	vldr	s15, [r7]
 8001818:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800181c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001820:	dd24      	ble.n	800186c <SCH_CTRL+0x10c>
			if (maxAllowablePwrDelta >= delta)
 8001822:	ed97 7a01 	vldr	s14, [r7, #4]
 8001826:	edd7 7a00 	vldr	s15, [r7]
 800182a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800182e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001832:	db0a      	blt.n	800184a <SCH_CTRL+0xea>
				ctrl_output[i] = ctrl_input[i];
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	496c      	ldr	r1, [pc, #432]	@ (80019ec <SCH_CTRL+0x28c>)
 800183a:	0092      	lsls	r2, r2, #2
 800183c:	440a      	add	r2, r1
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	496f      	ldr	r1, [pc, #444]	@ (8001a00 <SCH_CTRL+0x2a0>)
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	e036      	b.n	80018b8 <SCH_CTRL+0x158>
			else
				ctrl_output[i] += maxAllowablePwrDelta;
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	4a6c      	ldr	r2, [pc, #432]	@ (8001a00 <SCH_CTRL+0x2a0>)
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	ed93 7a00 	vldr	s14, [r3]
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	edd7 7a01 	vldr	s15, [r7, #4]
 800185c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001860:	4a67      	ldr	r2, [pc, #412]	@ (8001a00 <SCH_CTRL+0x2a0>)
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	edc3 7a00 	vstr	s15, [r3]
 800186a:	e025      	b.n	80018b8 <SCH_CTRL+0x158>
		} else {
			if (maxAllowablePwrDelta >= -delta)
 800186c:	edd7 7a00 	vldr	s15, [r7]
 8001870:	eef1 7a67 	vneg.f32	s15, s15
 8001874:	ed97 7a01 	vldr	s14, [r7, #4]
 8001878:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001880:	db0a      	blt.n	8001898 <SCH_CTRL+0x138>
				ctrl_output[i] = ctrl_input[i];
 8001882:	7bfa      	ldrb	r2, [r7, #15]
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	4959      	ldr	r1, [pc, #356]	@ (80019ec <SCH_CTRL+0x28c>)
 8001888:	0092      	lsls	r2, r2, #2
 800188a:	440a      	add	r2, r1
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	495c      	ldr	r1, [pc, #368]	@ (8001a00 <SCH_CTRL+0x2a0>)
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	e00f      	b.n	80018b8 <SCH_CTRL+0x158>
			else
				ctrl_output[i] -= maxAllowablePwrDelta;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	4a59      	ldr	r2, [pc, #356]	@ (8001a00 <SCH_CTRL+0x2a0>)
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	ed93 7a00 	vldr	s14, [r3]
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80018aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ae:	4a54      	ldr	r2, [pc, #336]	@ (8001a00 <SCH_CTRL+0x2a0>)
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	edc3 7a00 	vstr	s15, [r3]
		}

		// Correct the output signals if they somehow go out of bounds
		if (ctrl_output[i] >  2000.0) ctrl_output[i] =  2000.0;
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	4a51      	ldr	r2, [pc, #324]	@ (8001a00 <SCH_CTRL+0x2a0>)
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80019f0 <SCH_CTRL+0x290>
 80018c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	dd05      	ble.n	80018de <SCH_CTRL+0x17e>
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	4a4a      	ldr	r2, [pc, #296]	@ (8001a00 <SCH_CTRL+0x2a0>)
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	4a46      	ldr	r2, [pc, #280]	@ (80019f4 <SCH_CTRL+0x294>)
 80018dc:	601a      	str	r2, [r3, #0]
		if (ctrl_output[i] < -2000.0) ctrl_output[i] = -2000.0;
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	4a47      	ldr	r2, [pc, #284]	@ (8001a00 <SCH_CTRL+0x2a0>)
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	edd3 7a00 	vldr	s15, [r3]
 80018ea:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80019f8 <SCH_CTRL+0x298>
 80018ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f6:	d505      	bpl.n	8001904 <SCH_CTRL+0x1a4>
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	4a41      	ldr	r2, [pc, #260]	@ (8001a00 <SCH_CTRL+0x2a0>)
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	4a3e      	ldr	r2, [pc, #248]	@ (80019fc <SCH_CTRL+0x29c>)
 8001902:	601a      	str	r2, [r3, #0]

		// Turn the interpolated values into actual PWM levels
		ctrl_output_dir[i] = ctrl_output[i] >= 0;
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	4a3e      	ldr	r2, [pc, #248]	@ (8001a00 <SCH_CTRL+0x2a0>)
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	edd3 7a00 	vldr	s15, [r3]
 8001910:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001918:	bfac      	ite	ge
 800191a:	2301      	movge	r3, #1
 800191c:	2300      	movlt	r3, #0
 800191e:	b2da      	uxtb	r2, r3
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	4611      	mov	r1, r2
 8001924:	4a37      	ldr	r2, [pc, #220]	@ (8001a04 <SCH_CTRL+0x2a4>)
 8001926:	54d1      	strb	r1, [r2, r3]
		if (ctrl_output_dir[i])
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	4a36      	ldr	r2, [pc, #216]	@ (8001a04 <SCH_CTRL+0x2a4>)
 800192c:	5cd3      	ldrb	r3, [r2, r3]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00f      	beq.n	8001952 <SCH_CTRL+0x1f2>
			ctrl_output_mag[i] = (uint16_t)(ctrl_output[i]);
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	4a32      	ldr	r2, [pc, #200]	@ (8001a00 <SCH_CTRL+0x2a0>)
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	edd3 7a00 	vldr	s15, [r3]
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001944:	ee17 2a90 	vmov	r2, s15
 8001948:	b291      	uxth	r1, r2
 800194a:	4a2f      	ldr	r2, [pc, #188]	@ (8001a08 <SCH_CTRL+0x2a8>)
 800194c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001950:	e010      	b.n	8001974 <SCH_CTRL+0x214>
		else
			ctrl_output_mag[i] = (uint16_t)(-ctrl_output[i]);
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	4a2a      	ldr	r2, [pc, #168]	@ (8001a00 <SCH_CTRL+0x2a0>)
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	eef1 7a67 	vneg.f32	s15, s15
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001968:	ee17 2a90 	vmov	r2, s15
 800196c:	b291      	uxth	r1, r2
 800196e:	4a26      	ldr	r2, [pc, #152]	@ (8001a08 <SCH_CTRL+0x2a8>)
 8001970:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < 2; i++) {
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	3301      	adds	r3, #1
 8001978:	73fb      	strb	r3, [r7, #15]
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	2b01      	cmp	r3, #1
 800197e:	f67f af13 	bls.w	80017a8 <SCH_CTRL+0x48>
	}

	// Toggle the motors
	if (ctrl_output_dir[0]) {
 8001982:	4b20      	ldr	r3, [pc, #128]	@ (8001a04 <SCH_CTRL+0x2a4>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d009      	beq.n	800199e <SCH_CTRL+0x23e>
		TIM2->CCR1 = 0;
 800198a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800198e:	2200      	movs	r2, #0
 8001990:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM2->CCR2 = ctrl_output_mag[0];
 8001992:	4b1d      	ldr	r3, [pc, #116]	@ (8001a08 <SCH_CTRL+0x2a8>)
 8001994:	881a      	ldrh	r2, [r3, #0]
 8001996:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800199a:	639a      	str	r2, [r3, #56]	@ 0x38
 800199c:	e008      	b.n	80019b0 <SCH_CTRL+0x250>
	} else {
		TIM2->CCR1 = ctrl_output_mag[0];
 800199e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <SCH_CTRL+0x2a8>)
 80019a0:	881a      	ldrh	r2, [r3, #0]
 80019a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019a6:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM2->CCR2 = 0;
 80019a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019ac:	2200      	movs	r2, #0
 80019ae:	639a      	str	r2, [r3, #56]	@ 0x38
	}

	if (ctrl_output_dir[1]) {
 80019b0:	4b14      	ldr	r3, [pc, #80]	@ (8001a04 <SCH_CTRL+0x2a4>)
 80019b2:	785b      	ldrb	r3, [r3, #1]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d007      	beq.n	80019c8 <SCH_CTRL+0x268>
		TIM4->CCR3 = 0;
 80019b8:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <SCH_CTRL+0x2ac>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM4->CCR4 = ctrl_output_mag[1];
 80019be:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <SCH_CTRL+0x2a8>)
 80019c0:	885a      	ldrh	r2, [r3, #2]
 80019c2:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <SCH_CTRL+0x2ac>)
 80019c4:	641a      	str	r2, [r3, #64]	@ 0x40
	} else {
		TIM4->CCR3 = ctrl_output_mag[1];
		TIM4->CCR4 = 0;
	}
}
 80019c6:	e006      	b.n	80019d6 <SCH_CTRL+0x276>
		TIM4->CCR3 = ctrl_output_mag[1];
 80019c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <SCH_CTRL+0x2a8>)
 80019ca:	885a      	ldrh	r2, [r3, #2]
 80019cc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a0c <SCH_CTRL+0x2ac>)
 80019ce:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM4->CCR4 = 0;
 80019d0:	4b0e      	ldr	r3, [pc, #56]	@ (8001a0c <SCH_CTRL+0x2ac>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	00000000 	.word	0x00000000
 80019e4:	408f4000 	.word	0x408f4000
 80019e8:	240008b8 	.word	0x240008b8
 80019ec:	240008c4 	.word	0x240008c4
 80019f0:	44fa0000 	.word	0x44fa0000
 80019f4:	44fa0000 	.word	0x44fa0000
 80019f8:	c4fa0000 	.word	0xc4fa0000
 80019fc:	c4fa0000 	.word	0xc4fa0000
 8001a00:	240008d4 	.word	0x240008d4
 8001a04:	240008e0 	.word	0x240008e0
 8001a08:	240008dc 	.word	0x240008dc
 8001a0c:	40000800 	.word	0x40000800

08001a10 <SCH_PowerMon>:

void SCH_PowerMon() {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	INA229_Get(&hina229);
 8001a14:	4821      	ldr	r0, [pc, #132]	@ (8001a9c <SCH_PowerMon+0x8c>)
 8001a16:	f001 fc53 	bl	80032c0 <INA229_Get>

	if (hina229.voltage > debug_peakVoltage) debug_peakVoltage = hina229.voltage;
 8001a1a:	4b20      	ldr	r3, [pc, #128]	@ (8001a9c <SCH_PowerMon+0x8c>)
 8001a1c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a20:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa0 <SCH_PowerMon+0x90>)
 8001a22:	edd3 7a00 	vldr	s15, [r3]
 8001a26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2e:	dd03      	ble.n	8001a38 <SCH_PowerMon+0x28>
 8001a30:	4b1a      	ldr	r3, [pc, #104]	@ (8001a9c <SCH_PowerMon+0x8c>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4a1a      	ldr	r2, [pc, #104]	@ (8001aa0 <SCH_PowerMon+0x90>)
 8001a36:	6013      	str	r3, [r2, #0]
	if (hina229.current > debug_peakCurrent) debug_peakCurrent = hina229.current;
 8001a38:	4b18      	ldr	r3, [pc, #96]	@ (8001a9c <SCH_PowerMon+0x8c>)
 8001a3a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a3e:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <SCH_PowerMon+0x94>)
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4c:	dd03      	ble.n	8001a56 <SCH_PowerMon+0x46>
 8001a4e:	4b13      	ldr	r3, [pc, #76]	@ (8001a9c <SCH_PowerMon+0x8c>)
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	4a14      	ldr	r2, [pc, #80]	@ (8001aa4 <SCH_PowerMon+0x94>)
 8001a54:	6013      	str	r3, [r2, #0]

	if (hina229.current >= OVERCURRENT_PROTLIMIT) {
 8001a56:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <SCH_PowerMon+0x8c>)
 8001a58:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a5c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001a60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a68:	db0b      	blt.n	8001a82 <SCH_PowerMon+0x72>
		overcurrent_protState = 1;
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa8 <SCH_PowerMon+0x98>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
		ctrl_input[0] = 0;
 8001a70:	4b0e      	ldr	r3, [pc, #56]	@ (8001aac <SCH_PowerMon+0x9c>)
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
		ctrl_input[1] = 0;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <SCH_PowerMon+0x9c>)
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	605a      	str	r2, [r3, #4]
		overcurrent_protState = 0;
		ctrl_input[0] = ctrl_inputLast[0];
		ctrl_input[1] = ctrl_inputLast[1];
	}

}
 8001a80:	e00a      	b.n	8001a98 <SCH_PowerMon+0x88>
		overcurrent_protState = 0;
 8001a82:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <SCH_PowerMon+0x98>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
		ctrl_input[0] = ctrl_inputLast[0];
 8001a88:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <SCH_PowerMon+0xa0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	@ (8001aac <SCH_PowerMon+0x9c>)
 8001a8e:	6013      	str	r3, [r2, #0]
		ctrl_input[1] = ctrl_inputLast[1];
 8001a90:	4b07      	ldr	r3, [pc, #28]	@ (8001ab0 <SCH_PowerMon+0xa0>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	4a05      	ldr	r2, [pc, #20]	@ (8001aac <SCH_PowerMon+0x9c>)
 8001a96:	6053      	str	r3, [r2, #4]
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	2400094c 	.word	0x2400094c
 8001aa0:	240008ac 	.word	0x240008ac
 8001aa4:	240008b0 	.word	0x240008b0
 8001aa8:	240008a9 	.word	0x240008a9
 8001aac:	240008c4 	.word	0x240008c4
 8001ab0:	240008cc 	.word	0x240008cc

08001ab4 <SCH_Camera>:

void SCH_Camera() {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
	if (camera_state != 0) return;	// Exit if the camera is capturing, queued, or has un-encoded data
 8001aba:	4b18      	ldr	r3, [pc, #96]	@ (8001b1c <SCH_Camera+0x68>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d124      	bne.n	8001b0e <SCH_Camera+0x5a>
	if (jpeg_state != 0) return;	// Exit if the JPEG is processing (camera DMA can corrupt the working buffer of JPEG)
 8001ac4:	4b16      	ldr	r3, [pc, #88]	@ (8001b20 <SCH_Camera+0x6c>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d121      	bne.n	8001b12 <SCH_Camera+0x5e>

	// Take a snapshot
	uint8_t ovStat = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, camera_mem, CAM_GRAYSIZE / 4);
 8001ace:	4a15      	ldr	r2, [pc, #84]	@ (8001b24 <SCH_Camera+0x70>)
 8001ad0:	f644 2371 	movw	r3, #19057	@ 0x4a71
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	4814      	ldr	r0, [pc, #80]	@ (8001b28 <SCH_Camera+0x74>)
 8001ad8:	f001 ff1a 	bl	8003910 <HAL_DCMI_Start_DMA>
 8001adc:	4603      	mov	r3, r0
 8001ade:	71fb      	strb	r3, [r7, #7]
	if (ovStat) {
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00f      	beq.n	8001b06 <SCH_Camera+0x52>
		sprintf(ssd_msg, "DCMI/DMA ERROR - Code 0x%X\r\n", ovStat);
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4910      	ldr	r1, [pc, #64]	@ (8001b2c <SCH_Camera+0x78>)
 8001aec:	4810      	ldr	r0, [pc, #64]	@ (8001b30 <SCH_Camera+0x7c>)
 8001aee:	f017 fb2b 	bl	8019148 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8001af2:	480f      	ldr	r0, [pc, #60]	@ (8001b30 <SCH_Camera+0x7c>)
 8001af4:	f7fe fc44 	bl	8000380 <strlen>
 8001af8:	4603      	mov	r3, r0
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	4619      	mov	r1, r3
 8001afe:	480c      	ldr	r0, [pc, #48]	@ (8001b30 <SCH_Camera+0x7c>)
 8001b00:	f000 f9d5 	bl	8001eae <WriteDebug>
		return;
 8001b04:	e006      	b.n	8001b14 <SCH_Camera+0x60>
	}

	camera_state = 1;	// Flag Camera as DMA Queued
 8001b06:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <SCH_Camera+0x68>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]
 8001b0c:	e002      	b.n	8001b14 <SCH_Camera+0x60>
	if (camera_state != 0) return;	// Exit if the camera is capturing, queued, or has un-encoded data
 8001b0e:	bf00      	nop
 8001b10:	e000      	b.n	8001b14 <SCH_Camera+0x60>
	if (jpeg_state != 0) return;	// Exit if the JPEG is processing (camera DMA can corrupt the working buffer of JPEG)
 8001b12:	bf00      	nop
}
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2401332a 	.word	0x2401332a
 8001b20:	24025d36 	.word	0x24025d36
 8001b24:	24000964 	.word	0x24000964
 8001b28:	24000300 	.word	0x24000300
 8001b2c:	0801b1d4 	.word	0x0801b1d4
 8001b30:	240008e4 	.word	0x240008e4

08001b34 <SCH_JPEG>:

void SCH_JPEG() {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af02      	add	r7, sp, #8

	if (jpeg_state != 0) return;	// Exit if the JPEG is already processing
 8001b3a:	4b16      	ldr	r3, [pc, #88]	@ (8001b94 <SCH_JPEG+0x60>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d120      	bne.n	8001b86 <SCH_JPEG+0x52>
	if (camera_state != 3) return;	// Exit if the camera does not have a new image to present
 8001b44:	4b14      	ldr	r3, [pc, #80]	@ (8001b98 <SCH_JPEG+0x64>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d11d      	bne.n	8001b8a <SCH_JPEG+0x56>
	if (tx_state == 1) return;		// Exit if the radio is transmitting
 8001b4e:	4b13      	ldr	r3, [pc, #76]	@ (8001b9c <SCH_JPEG+0x68>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d01a      	beq.n	8001b8e <SCH_JPEG+0x5a>

	camera_state = 0;	// flag the camera as idle, it won't start again until the JPEG is done
 8001b58:	4b0f      	ldr	r3, [pc, #60]	@ (8001b98 <SCH_JPEG+0x64>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
	jpeg_state = 1;		// flag JPG as encoding
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <SCH_JPEG+0x60>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]

	jpeg_block = 0;		// Reset the JEPG block idx
 8001b64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <SCH_JPEG+0x6c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
	jpeg_size = 0;		// Reset the JPEG size counter
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba4 <SCH_JPEG+0x70>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]

	GenerateJPEGMCUBlock();
 8001b70:	f000 facc 	bl	800210c <GenerateJPEGMCUBlock>
	HAL_JPEG_Encode_DMA(&hjpeg, jpeg_mcu, 64, jpeg_out, JPEG_OUTBUF_SIZE);
 8001b74:	2340      	movs	r3, #64	@ 0x40
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba8 <SCH_JPEG+0x74>)
 8001b7a:	2240      	movs	r2, #64	@ 0x40
 8001b7c:	490b      	ldr	r1, [pc, #44]	@ (8001bac <SCH_JPEG+0x78>)
 8001b7e:	480c      	ldr	r0, [pc, #48]	@ (8001bb0 <SCH_JPEG+0x7c>)
 8001b80:	f007 fd82 	bl	8009688 <HAL_JPEG_Encode_DMA>
 8001b84:	e004      	b.n	8001b90 <SCH_JPEG+0x5c>
	if (jpeg_state != 0) return;	// Exit if the JPEG is already processing
 8001b86:	bf00      	nop
 8001b88:	e002      	b.n	8001b90 <SCH_JPEG+0x5c>
	if (camera_state != 3) return;	// Exit if the camera does not have a new image to present
 8001b8a:	bf00      	nop
 8001b8c:	e000      	b.n	8001b90 <SCH_JPEG+0x5c>
	if (tx_state == 1) return;		// Exit if the radio is transmitting
 8001b8e:	bf00      	nop
}
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	24025d36 	.word	0x24025d36
 8001b98:	2401332a 	.word	0x2401332a
 8001b9c:	24025d66 	.word	0x24025d66
 8001ba0:	2401336c 	.word	0x2401336c
 8001ba4:	24025d38 	.word	0x24025d38
 8001ba8:	24013370 	.word	0x24013370
 8001bac:	2401332c 	.word	0x2401332c
 8001bb0:	2400041c 	.word	0x2400041c

08001bb4 <SCH_DEBUG>:

void SCH_DEBUG() {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af04      	add	r7, sp, #16
	uint32_t delta_t = DeltaTime(sch_tim_debug);
 8001bba:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf4 <SCH_DEBUG+0x140>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f95e 	bl	8001e80 <DeltaTime>
 8001bc4:	60b8      	str	r0, [r7, #8]
	if (delta_t < SCH_MS_DEBUG)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b31      	cmp	r3, #49	@ 0x31
 8001bca:	f240 808e 	bls.w	8001cea <SCH_DEBUG+0x136>
		return;

	debug_ctr++;
 8001bce:	4b4a      	ldr	r3, [pc, #296]	@ (8001cf8 <SCH_DEBUG+0x144>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	4a48      	ldr	r2, [pc, #288]	@ (8001cf8 <SCH_DEBUG+0x144>)
 8001bd6:	6013      	str	r3, [r2, #0]

	if (debug_ctr >= 60) {
 8001bd8:	4b47      	ldr	r3, [pc, #284]	@ (8001cf8 <SCH_DEBUG+0x144>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b3b      	cmp	r3, #59	@ 0x3b
 8001bde:	d954      	bls.n	8001c8a <SCH_DEBUG+0xd6>
		debug_ctr = 0;
 8001be0:	4b45      	ldr	r3, [pc, #276]	@ (8001cf8 <SCH_DEBUG+0x144>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i < 2; i++) {
 8001be6:	2300      	movs	r3, #0
 8001be8:	73fb      	strb	r3, [r7, #15]
 8001bea:	e04b      	b.n	8001c84 <SCH_DEBUG+0xd0>
			uint8_t polarity = rand()%2;
 8001bec:	f016 fd76 	bl	80186dc <rand>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	bfb8      	it	lt
 8001bfa:	425b      	neglt	r3, r3
 8001bfc:	71fb      	strb	r3, [r7, #7]
			if (polarity)
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d018      	beq.n	8001c36 <SCH_DEBUG+0x82>
				ctrl_input[i] = (float)(rand()%2000);
 8001c04:	f016 fd6a 	bl	80186dc <rand>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4a3c      	ldr	r2, [pc, #240]	@ (8001cfc <SCH_DEBUG+0x148>)
 8001c0c:	fb82 1203 	smull	r1, r2, r2, r3
 8001c10:	11d1      	asrs	r1, r2, #7
 8001c12:	17da      	asrs	r2, r3, #31
 8001c14:	1a8a      	subs	r2, r1, r2
 8001c16:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001c1a:	fb01 f202 	mul.w	r2, r1, r2
 8001c1e:	1a9a      	subs	r2, r3, r2
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	ee07 2a90 	vmov	s15, r2
 8001c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2a:	4a35      	ldr	r2, [pc, #212]	@ (8001d00 <SCH_DEBUG+0x14c>)
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	edc3 7a00 	vstr	s15, [r3]
 8001c34:	e019      	b.n	8001c6a <SCH_DEBUG+0xb6>
			else
				ctrl_input[i] = -(float)(rand()%2000);
 8001c36:	f016 fd51 	bl	80186dc <rand>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4a2f      	ldr	r2, [pc, #188]	@ (8001cfc <SCH_DEBUG+0x148>)
 8001c3e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c42:	11d1      	asrs	r1, r2, #7
 8001c44:	17da      	asrs	r2, r3, #31
 8001c46:	1a8a      	subs	r2, r1, r2
 8001c48:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001c4c:	fb01 f202 	mul.w	r2, r1, r2
 8001c50:	1a9a      	subs	r2, r3, r2
 8001c52:	ee07 2a90 	vmov	s15, r2
 8001c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	eef1 7a67 	vneg.f32	s15, s15
 8001c60:	4a27      	ldr	r2, [pc, #156]	@ (8001d00 <SCH_DEBUG+0x14c>)
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	edc3 7a00 	vstr	s15, [r3]

			ctrl_inputLast[i] = ctrl_input[i];
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	4924      	ldr	r1, [pc, #144]	@ (8001d00 <SCH_DEBUG+0x14c>)
 8001c70:	0092      	lsls	r2, r2, #2
 8001c72:	440a      	add	r2, r1
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	4923      	ldr	r1, [pc, #140]	@ (8001d04 <SCH_DEBUG+0x150>)
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i < 2; i++) {
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	3301      	adds	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d9b0      	bls.n	8001bec <SCH_DEBUG+0x38>
		}
	}

	// Print Motor CTRL states
	sprintf(ssd_msg, "L: %04d - R: %04d\nV: %.2f, A: %.2f\n", ctrl_output_mag[0], ctrl_output_mag[1], debug_peakVoltage, debug_peakCurrent);
 8001c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d08 <SCH_DEBUG+0x154>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4b1d      	ldr	r3, [pc, #116]	@ (8001d08 <SCH_DEBUG+0x154>)
 8001c92:	885b      	ldrh	r3, [r3, #2]
 8001c94:	4619      	mov	r1, r3
 8001c96:	4b1d      	ldr	r3, [pc, #116]	@ (8001d0c <SCH_DEBUG+0x158>)
 8001c98:	edd3 7a00 	vldr	s15, [r3]
 8001c9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d10 <SCH_DEBUG+0x15c>)
 8001ca2:	edd3 6a00 	vldr	s13, [r3]
 8001ca6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001caa:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001cae:	ed8d 7b00 	vstr	d7, [sp]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4917      	ldr	r1, [pc, #92]	@ (8001d14 <SCH_DEBUG+0x160>)
 8001cb6:	4818      	ldr	r0, [pc, #96]	@ (8001d18 <SCH_DEBUG+0x164>)
 8001cb8:	f017 fa46 	bl	8019148 <siprintf>

	// Print Power levels
	//sprintf(ssd_msg, "V: %.2f, A: %f\n", hina229.voltage, hina229.current);
	WriteDebug(ssd_msg, strlen(ssd_msg));
 8001cbc:	4816      	ldr	r0, [pc, #88]	@ (8001d18 <SCH_DEBUG+0x164>)
 8001cbe:	f7fe fb5f 	bl	8000380 <strlen>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4813      	ldr	r0, [pc, #76]	@ (8001d18 <SCH_DEBUG+0x164>)
 8001cca:	f000 f8f0 	bl	8001eae <WriteDebug>

	debug_peakVoltage = 0;
 8001cce:	4b0f      	ldr	r3, [pc, #60]	@ (8001d0c <SCH_DEBUG+0x158>)
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
	debug_peakCurrent = 0;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <SCH_DEBUG+0x15c>)
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]

	sch_tim_debug = HAL_GetTick();
 8001cde:	f001 fbd9 	bl	8003494 <HAL_GetTick>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4a03      	ldr	r2, [pc, #12]	@ (8001cf4 <SCH_DEBUG+0x140>)
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	e000      	b.n	8001cec <SCH_DEBUG+0x138>
		return;
 8001cea:	bf00      	nop
}
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	240008bc 	.word	0x240008bc
 8001cf8:	240008c0 	.word	0x240008c0
 8001cfc:	10624dd3 	.word	0x10624dd3
 8001d00:	240008c4 	.word	0x240008c4
 8001d04:	240008cc 	.word	0x240008cc
 8001d08:	240008dc 	.word	0x240008dc
 8001d0c:	240008ac 	.word	0x240008ac
 8001d10:	240008b0 	.word	0x240008b0
 8001d14:	0801b1f4 	.word	0x0801b1f4
 8001d18:	240008e4 	.word	0x240008e4

08001d1c <HAL_DCMI_VsyncEventCallback>:

// ------------------------------------------------------------ OVERRIDE CALLBACKS -- //
// Frame captured event, called when the DMA buffer is full of new frame data
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	if (!camera_state) return;	// Do nothing if the camera is IDLE
 8001d24:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <HAL_DCMI_VsyncEventCallback+0x44>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d014      	beq.n	8001d58 <HAL_DCMI_VsyncEventCallback+0x3c>

	if (camera_state == 1) {	// Transition flag to CAPTURING
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d60 <HAL_DCMI_VsyncEventCallback+0x44>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d103      	bne.n	8001d40 <HAL_DCMI_VsyncEventCallback+0x24>
		camera_state = 2;
 8001d38:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <HAL_DCMI_VsyncEventCallback+0x44>)
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	701a      	strb	r2, [r3, #0]
		return;
 8001d3e:	e00c      	b.n	8001d5a <HAL_DCMI_VsyncEventCallback+0x3e>
	}

	if (camera_state == 2) {	// Transition flag to READY
 8001d40:	4b07      	ldr	r3, [pc, #28]	@ (8001d60 <HAL_DCMI_VsyncEventCallback+0x44>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d107      	bne.n	8001d5a <HAL_DCMI_VsyncEventCallback+0x3e>
		HAL_DCMI_Stop(hdcmi);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f001 fea2 	bl	8003a94 <HAL_DCMI_Stop>
		camera_state = 3;
 8001d50:	4b03      	ldr	r3, [pc, #12]	@ (8001d60 <HAL_DCMI_VsyncEventCallback+0x44>)
 8001d52:	2203      	movs	r2, #3
 8001d54:	701a      	strb	r2, [r3, #0]
		return;
 8001d56:	e000      	b.n	8001d5a <HAL_DCMI_VsyncEventCallback+0x3e>
	if (!camera_state) return;	// Do nothing if the camera is IDLE
 8001d58:	bf00      	nop
	}
}
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	2401332a 	.word	0x2401332a

08001d64 <HAL_UART_RxCpltCallback>:

// ------------------------------------------------------------ OVERRIDE UART DMA CALLBACKS -- //
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	XBEE_RX_DMACallback(&hxbee);
 8001d6c:	4803      	ldr	r0, [pc, #12]	@ (8001d7c <HAL_UART_RxCpltCallback+0x18>)
 8001d6e:	f013 fddf 	bl	8015930 <XBEE_RX_DMACallback>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	24025d40 	.word	0x24025d40

08001d80 <HAL_JPEG_GetDataCallback>:

// JPEG hardware is requesting the next MCU block
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]

	// Restock the input buffer with new MCU
	if (GenerateJPEGMCUBlock()) {
 8001d8a:	f000 f9bf 	bl	800210c <GenerateJPEGMCUBlock>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d013      	beq.n	8001dbc <HAL_JPEG_GetDataCallback+0x3c>
		// ERROR while generating MCU, probable memory leak - recover JPEG peripheral by restarting
		jpeg_state = 0;	// Flag JPEG as idle
 8001d94:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd0 <HAL_JPEG_GetDataCallback+0x50>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
		jpeg_block = 0;	// Reset the JPEG block IDX
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <HAL_JPEG_GetDataCallback+0x54>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]

		sprintf(ssd_msg, "JPEG OVERRUN\n");
 8001da0:	490d      	ldr	r1, [pc, #52]	@ (8001dd8 <HAL_JPEG_GetDataCallback+0x58>)
 8001da2:	480e      	ldr	r0, [pc, #56]	@ (8001ddc <HAL_JPEG_GetDataCallback+0x5c>)
 8001da4:	f017 f9d0 	bl	8019148 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8001da8:	480c      	ldr	r0, [pc, #48]	@ (8001ddc <HAL_JPEG_GetDataCallback+0x5c>)
 8001daa:	f7fe fae9 	bl	8000380 <strlen>
 8001dae:	4603      	mov	r3, r0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	4619      	mov	r1, r3
 8001db4:	4809      	ldr	r0, [pc, #36]	@ (8001ddc <HAL_JPEG_GetDataCallback+0x5c>)
 8001db6:	f000 f87a 	bl	8001eae <WriteDebug>
	}
	else {
		// Configure the buffer to be the same as before, it's contents have changed
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
	}
}
 8001dba:	e004      	b.n	8001dc6 <HAL_JPEG_GetDataCallback+0x46>
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
 8001dbc:	2240      	movs	r2, #64	@ 0x40
 8001dbe:	4908      	ldr	r1, [pc, #32]	@ (8001de0 <HAL_JPEG_GetDataCallback+0x60>)
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f007 fd29 	bl	8009818 <HAL_JPEG_ConfigInputBuffer>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	24025d36 	.word	0x24025d36
 8001dd4:	2401336c 	.word	0x2401336c
 8001dd8:	0801b218 	.word	0x0801b218
 8001ddc:	240008e4 	.word	0x240008e4
 8001de0:	2401332c 	.word	0x2401332c

08001de4 <HAL_JPEG_DataReadyCallback>:

// JPEG hardware is requesting a larger output buffer.
// This is done to manage JPEG output size, give it a buffer only as large as required
void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
	// Setup new output buffer location (part of contiguous super-buffer)
	jpeg_size += JPEG_OUTBUF_SIZE;
 8001df0:	4b08      	ldr	r3, [pc, #32]	@ (8001e14 <HAL_JPEG_DataReadyCallback+0x30>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	3340      	adds	r3, #64	@ 0x40
 8001df6:	4a07      	ldr	r2, [pc, #28]	@ (8001e14 <HAL_JPEG_DataReadyCallback+0x30>)
 8001df8:	6013      	str	r3, [r2, #0]
	HAL_JPEG_ConfigOutputBuffer(hjpeg, jpeg_out + jpeg_size, JPEG_OUTBUF_SIZE);
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_JPEG_DataReadyCallback+0x30>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a06      	ldr	r2, [pc, #24]	@ (8001e18 <HAL_JPEG_DataReadyCallback+0x34>)
 8001e00:	4413      	add	r3, r2
 8001e02:	2240      	movs	r2, #64	@ 0x40
 8001e04:	4619      	mov	r1, r3
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f007 fd18 	bl	800983c <HAL_JPEG_ConfigOutputBuffer>
}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	24025d38 	.word	0x24025d38
 8001e18:	24013370 	.word	0x24013370

08001e1c <HAL_JPEG_EncodeCpltCallback>:

// JPEG hardware has completed the current image
void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg) {
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	jpeg_state = 2;	// Flag JPEG as ready
 8001e24:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <HAL_JPEG_EncodeCpltCallback+0x20>)
 8001e26:	2202      	movs	r2, #2
 8001e28:	701a      	strb	r2, [r3, #0]
	jpeg_block = 0;	// Reset the JPEG block IDX
 8001e2a:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <HAL_JPEG_EncodeCpltCallback+0x24>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
//	sprintf(ssd_msg, "JPEG DONE\n");
//	WriteDebug(ssd_msg, strlen(ssd_msg));
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	24025d36 	.word	0x24025d36
 8001e40:	2401336c 	.word	0x2401336c

08001e44 <HAL_JPEG_ErrorCallback>:

// JPEG hardware encountered an error
void HAL_JPEG_ErrorCallback (JPEG_HandleTypeDef * hjpeg) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
	sprintf(ssd_msg, " JPEG ERROR");
 8001e4c:	4909      	ldr	r1, [pc, #36]	@ (8001e74 <HAL_JPEG_ErrorCallback+0x30>)
 8001e4e:	480a      	ldr	r0, [pc, #40]	@ (8001e78 <HAL_JPEG_ErrorCallback+0x34>)
 8001e50:	f017 f97a 	bl	8019148 <siprintf>
	WriteDebug(ssd_msg, strlen(ssd_msg));
 8001e54:	4808      	ldr	r0, [pc, #32]	@ (8001e78 <HAL_JPEG_ErrorCallback+0x34>)
 8001e56:	f7fe fa93 	bl	8000380 <strlen>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4805      	ldr	r0, [pc, #20]	@ (8001e78 <HAL_JPEG_ErrorCallback+0x34>)
 8001e62:	f000 f824 	bl	8001eae <WriteDebug>
	//HAL_JPEG_Abort(&hjpeg);
	jpeg_state = 0;	// Flag JPEG as idle
 8001e66:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <HAL_JPEG_ErrorCallback+0x38>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	0801b228 	.word	0x0801b228
 8001e78:	240008e4 	.word	0x240008e4
 8001e7c:	24025d36 	.word	0x24025d36

08001e80 <DeltaTime>:

// ------------------------------------------------------------ UTILITY FUNCTIONS -- //
uint32_t DeltaTime(uint32_t start_t) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	uint32_t now_t = HAL_GetTick();
 8001e88:	f001 fb04 	bl	8003494 <HAL_GetTick>
 8001e8c:	60f8      	str	r0, [r7, #12]
	if (now_t < start_t) {
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d204      	bcs.n	8001ea0 <DeltaTime+0x20>
		// Overflow has occurred
		return (0xFFFFFFFF - start_t) + now_t;
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	e002      	b.n	8001ea6 <DeltaTime+0x26>
	}

	return now_t - start_t;
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	1ad3      	subs	r3, r2, r3
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <WriteDebug>:

// Transmit wrapper, this is for continuity across Controller project which debugs by printing to OLEDs
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	70fb      	strb	r3, [r7, #3]
	CDC_Transmit_FS(str_ptr, str_len);
 8001eba:	78fb      	ldrb	r3, [r7, #3]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f015 fed6 	bl	8017c70 <CDC_Transmit_FS>
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <CAM_GetRegister>:

HAL_StatusTypeDef CAM_GetRegister(uint8_t addr, uint8_t* pData, uint8_t haltOnError) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b09e      	sub	sp, #120	@ 0x78
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	6039      	str	r1, [r7, #0]
 8001ed6:	71fb      	strb	r3, [r7, #7]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ov_result;
	uint8_t usb_msg[100] = {0};
 8001edc:	f107 0308 	add.w	r3, r7, #8
 8001ee0:	2264      	movs	r2, #100	@ 0x64
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f017 f994 	bl	8019212 <memset>

	ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_READ, &addr, 1, 100);
 8001eea:	1dfa      	adds	r2, r7, #7
 8001eec:	2364      	movs	r3, #100	@ 0x64
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	2143      	movs	r1, #67	@ 0x43
 8001ef4:	482f      	ldr	r0, [pc, #188]	@ (8001fb4 <CAM_GetRegister+0xe8>)
 8001ef6:	f005 fcdd 	bl	80078b4 <HAL_I2C_Master_Transmit>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (ov_result) {
 8001f00:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d020      	beq.n	8001f4a <CAM_GetRegister+0x7e>
		if (haltOnError) {
 8001f08:	79bb      	ldrb	r3, [r7, #6]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d01a      	beq.n	8001f44 <CAM_GetRegister+0x78>
			sprintf(usb_msg, "TX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	461a      	mov	r2, r3
 8001f12:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001f16:	f107 0008 	add.w	r0, r7, #8
 8001f1a:	4927      	ldr	r1, [pc, #156]	@ (8001fb8 <CAM_GetRegister+0xec>)
 8001f1c:	f017 f914 	bl	8019148 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001f20:	f107 0308 	add.w	r3, r7, #8
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fa2b 	bl	8000380 <strlen>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	f107 0308 	add.w	r3, r7, #8
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f015 fe9c 	bl	8017c70 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8001f38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f3c:	f001 fab6 	bl	80034ac <HAL_Delay>
			while (1) {
 8001f40:	bf00      	nop
 8001f42:	e7ed      	b.n	8001f20 <CAM_GetRegister+0x54>
			}
		}
		return ov_result;
 8001f44:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001f48:	e030      	b.n	8001fac <CAM_GetRegister+0xe0>
	}


	ov_result = HAL_I2C_Master_Receive(&hi2c2, OV7670_ADDR_READ, pData, 1, 100);
 8001f4a:	2364      	movs	r3, #100	@ 0x64
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	2301      	movs	r3, #1
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	2143      	movs	r1, #67	@ 0x43
 8001f54:	4817      	ldr	r0, [pc, #92]	@ (8001fb4 <CAM_GetRegister+0xe8>)
 8001f56:	f005 fdc5 	bl	8007ae4 <HAL_I2C_Master_Receive>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (ov_result) {
 8001f60:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d020      	beq.n	8001faa <CAM_GetRegister+0xde>
		if (haltOnError) {
 8001f68:	79bb      	ldrb	r3, [r7, #6]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d01a      	beq.n	8001fa4 <CAM_GetRegister+0xd8>
			sprintf(usb_msg, "RX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	461a      	mov	r2, r3
 8001f72:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001f76:	f107 0008 	add.w	r0, r7, #8
 8001f7a:	4910      	ldr	r1, [pc, #64]	@ (8001fbc <CAM_GetRegister+0xf0>)
 8001f7c:	f017 f8e4 	bl	8019148 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001f80:	f107 0308 	add.w	r3, r7, #8
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe f9fb 	bl	8000380 <strlen>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	f107 0308 	add.w	r3, r7, #8
 8001f90:	4611      	mov	r1, r2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f015 fe6c 	bl	8017c70 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8001f98:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f9c:	f001 fa86 	bl	80034ac <HAL_Delay>
			while (1) {
 8001fa0:	bf00      	nop
 8001fa2:	e7ed      	b.n	8001f80 <CAM_GetRegister+0xb4>
			}
		}
		return ov_result;
 8001fa4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001fa8:	e000      	b.n	8001fac <CAM_GetRegister+0xe0>
	}


	return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3770      	adds	r7, #112	@ 0x70
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	240003c8 	.word	0x240003c8
 8001fb8:	0801b234 	.word	0x0801b234
 8001fbc:	0801b270 	.word	0x0801b270

08001fc0 <CAM_SetRegister>:

HAL_StatusTypeDef CAM_SetRegister(uint8_t addr, uint8_t data, uint8_t haltOnError) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b0a0      	sub	sp, #128	@ 0x80
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	71bb      	strb	r3, [r7, #6]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef ov_result;
	uint8_t usb_msg[100] = {0};
 8001fd2:	f107 0310 	add.w	r3, r7, #16
 8001fd6:	2264      	movs	r2, #100	@ 0x64
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f017 f919 	bl	8019212 <memset>

	uint8_t reg_set[2] = {addr, data};
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	733b      	strb	r3, [r7, #12]
 8001fe4:	79bb      	ldrb	r3, [r7, #6]
 8001fe6:	737b      	strb	r3, [r7, #13]

	ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_WRITE, reg_set, 2, 100);
 8001fe8:	f107 020c 	add.w	r2, r7, #12
 8001fec:	2364      	movs	r3, #100	@ 0x64
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	2142      	movs	r1, #66	@ 0x42
 8001ff4:	4841      	ldr	r0, [pc, #260]	@ (80020fc <CAM_SetRegister+0x13c>)
 8001ff6:	f005 fc5d 	bl	80078b4 <HAL_I2C_Master_Transmit>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (ov_result) {
 8002000:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002004:	2b00      	cmp	r3, #0
 8002006:	d01f      	beq.n	8002048 <CAM_SetRegister+0x88>
		if (haltOnError) {
 8002008:	797b      	ldrb	r3, [r7, #5]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d019      	beq.n	8002042 <CAM_SetRegister+0x82>
			sprintf(usb_msg, "TX ERROR: Cannot write camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 800200e:	79fa      	ldrb	r2, [r7, #7]
 8002010:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002014:	f107 0010 	add.w	r0, r7, #16
 8002018:	4939      	ldr	r1, [pc, #228]	@ (8002100 <CAM_SetRegister+0x140>)
 800201a:	f017 f895 	bl	8019148 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 800201e:	f107 0310 	add.w	r3, r7, #16
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe f9ac 	bl	8000380 <strlen>
 8002028:	4602      	mov	r2, r0
 800202a:	f107 0310 	add.w	r3, r7, #16
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f015 fe1d 	bl	8017c70 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8002036:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800203a:	f001 fa37 	bl	80034ac <HAL_Delay>
			while (1) {
 800203e:	bf00      	nop
 8002040:	e7ed      	b.n	800201e <CAM_SetRegister+0x5e>
			}
		}
		return ov_result;
 8002042:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002046:	e054      	b.n	80020f2 <CAM_SetRegister+0x132>
	}

	// Confirm write
	uint8_t reg_get = 0x00;
 8002048:	2300      	movs	r3, #0
 800204a:	72fb      	strb	r3, [r7, #11]
	ov_result = CAM_GetRegister(addr, &reg_get, 1);
 800204c:	f107 010b 	add.w	r1, r7, #11
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	2201      	movs	r2, #1
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff39 	bl	8001ecc <CAM_GetRegister>
 800205a:	4603      	mov	r3, r0
 800205c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (ov_result) {
 8002060:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01f      	beq.n	80020a8 <CAM_SetRegister+0xe8>
		if (haltOnError) {
 8002068:	797b      	ldrb	r3, [r7, #5]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d019      	beq.n	80020a2 <CAM_SetRegister+0xe2>
			sprintf(usb_msg, "CF ERROR: Cannot confirm camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 800206e:	79fa      	ldrb	r2, [r7, #7]
 8002070:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002074:	f107 0010 	add.w	r0, r7, #16
 8002078:	4922      	ldr	r1, [pc, #136]	@ (8002104 <CAM_SetRegister+0x144>)
 800207a:	f017 f865 	bl	8019148 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 800207e:	f107 0310 	add.w	r3, r7, #16
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe f97c 	bl	8000380 <strlen>
 8002088:	4602      	mov	r2, r0
 800208a:	f107 0310 	add.w	r3, r7, #16
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f015 fded 	bl	8017c70 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8002096:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800209a:	f001 fa07 	bl	80034ac <HAL_Delay>
			while (1) {
 800209e:	bf00      	nop
 80020a0:	e7ed      	b.n	800207e <CAM_SetRegister+0xbe>
			}
		}
		else {
			return ov_result;
 80020a2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80020a6:	e024      	b.n	80020f2 <CAM_SetRegister+0x132>
		}
	}

	if (reg_get != data) {
 80020a8:	7afb      	ldrb	r3, [r7, #11]
 80020aa:	79ba      	ldrb	r2, [r7, #6]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d01f      	beq.n	80020f0 <CAM_SetRegister+0x130>
		// Error, bad write
		if (haltOnError) {
 80020b0:	797b      	ldrb	r3, [r7, #5]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d01a      	beq.n	80020ec <CAM_SetRegister+0x12c>
			sprintf(usb_msg, "CF ERROR: Bad write to register 0x%X - EXPECTED 0x%X, GOT 0x%X\r\n", addr, data, reg_get);
 80020b6:	79fa      	ldrb	r2, [r7, #7]
 80020b8:	79bb      	ldrb	r3, [r7, #6]
 80020ba:	7af9      	ldrb	r1, [r7, #11]
 80020bc:	f107 0010 	add.w	r0, r7, #16
 80020c0:	9100      	str	r1, [sp, #0]
 80020c2:	4911      	ldr	r1, [pc, #68]	@ (8002108 <CAM_SetRegister+0x148>)
 80020c4:	f017 f840 	bl	8019148 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe f957 	bl	8000380 <strlen>
 80020d2:	4602      	mov	r2, r0
 80020d4:	f107 0310 	add.w	r3, r7, #16
 80020d8:	4611      	mov	r1, r2
 80020da:	4618      	mov	r0, r3
 80020dc:	f015 fdc8 	bl	8017c70 <CDC_Transmit_FS>
				HAL_Delay(1000);
 80020e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020e4:	f001 f9e2 	bl	80034ac <HAL_Delay>
			while (1) {
 80020e8:	bf00      	nop
 80020ea:	e7ed      	b.n	80020c8 <CAM_SetRegister+0x108>
			}
		}
		return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <CAM_SetRegister+0x132>
	}

	return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3778      	adds	r7, #120	@ 0x78
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	240003c8 	.word	0x240003c8
 8002100:	0801b2ac 	.word	0x0801b2ac
 8002104:	0801b2e8 	.word	0x0801b2e8
 8002108:	0801b324 	.word	0x0801b324

0800210c <GenerateJPEGMCUBlock>:

// GENERATE JPEG MCU BLOCK
uint8_t GenerateJPEGMCUBlock() {
 800210c:	b480      	push	{r7}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
	// Don't go over the bounds of the specified MCU area
	if (jpeg_block > jpeg_mcu_widths[jpeg_quality]*jpeg_mcu_heights[jpeg_quality]) { return 1; }
 8002112:	4b47      	ldr	r3, [pc, #284]	@ (8002230 <GenerateJPEGMCUBlock+0x124>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	4b46      	ldr	r3, [pc, #280]	@ (8002234 <GenerateJPEGMCUBlock+0x128>)
 800211a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800211e:	461a      	mov	r2, r3
 8002120:	4b43      	ldr	r3, [pc, #268]	@ (8002230 <GenerateJPEGMCUBlock+0x124>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	4b44      	ldr	r3, [pc, #272]	@ (8002238 <GenerateJPEGMCUBlock+0x12c>)
 8002128:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800212c:	fb02 f303 	mul.w	r3, r2, r3
 8002130:	461a      	mov	r2, r3
 8002132:	4b42      	ldr	r3, [pc, #264]	@ (800223c <GenerateJPEGMCUBlock+0x130>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d201      	bcs.n	800213e <GenerateJPEGMCUBlock+0x32>
 800213a:	2301      	movs	r3, #1
 800213c:	e072      	b.n	8002224 <GenerateJPEGMCUBlock+0x118>

	int xStart = (jpeg_block % jpeg_mcu_widths[jpeg_quality]) * 8;
 800213e:	4b3f      	ldr	r3, [pc, #252]	@ (800223c <GenerateJPEGMCUBlock+0x130>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a3b      	ldr	r2, [pc, #236]	@ (8002230 <GenerateJPEGMCUBlock+0x124>)
 8002144:	7812      	ldrb	r2, [r2, #0]
 8002146:	4611      	mov	r1, r2
 8002148:	4a3a      	ldr	r2, [pc, #232]	@ (8002234 <GenerateJPEGMCUBlock+0x128>)
 800214a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800214e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002152:	fb01 f202 	mul.w	r2, r1, r2
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	60bb      	str	r3, [r7, #8]
	int yStart = (jpeg_block / jpeg_mcu_widths[jpeg_quality]) * 8;
 800215c:	4b37      	ldr	r3, [pc, #220]	@ (800223c <GenerateJPEGMCUBlock+0x130>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a33      	ldr	r2, [pc, #204]	@ (8002230 <GenerateJPEGMCUBlock+0x124>)
 8002162:	7812      	ldrb	r2, [r2, #0]
 8002164:	4611      	mov	r1, r2
 8002166:	4a33      	ldr	r2, [pc, #204]	@ (8002234 <GenerateJPEGMCUBlock+0x128>)
 8002168:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800216c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	607b      	str	r3, [r7, #4]
	int i = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
	for (int y = yStart; y < yStart + 8; y++) {
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	e047      	b.n	800220e <GenerateJPEGMCUBlock+0x102>
		uint16_t cached_y = y*jpeg_scaleFactors[jpeg_quality];
 800217e:	4b2c      	ldr	r3, [pc, #176]	@ (8002230 <GenerateJPEGMCUBlock+0x124>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	4b2e      	ldr	r3, [pc, #184]	@ (8002240 <GenerateJPEGMCUBlock+0x134>)
 8002186:	5c9b      	ldrb	r3, [r3, r2]
 8002188:	461a      	mov	r2, r3
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	b29b      	uxth	r3, r3
 800218e:	fb12 f303 	smulbb	r3, r2, r3
 8002192:	807b      	strh	r3, [r7, #2]

		for (int x = xStart; x < xStart + 8; x++) {
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	e031      	b.n	80021fe <GenerateJPEGMCUBlock+0xf2>
			uint16_t cached_x = x*jpeg_scaleFactors[jpeg_quality] + camera_vshift;
 800219a:	4b25      	ldr	r3, [pc, #148]	@ (8002230 <GenerateJPEGMCUBlock+0x124>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	4b27      	ldr	r3, [pc, #156]	@ (8002240 <GenerateJPEGMCUBlock+0x134>)
 80021a2:	5c9b      	ldrb	r3, [r3, r2]
 80021a4:	461a      	mov	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	fb12 f303 	smulbb	r3, r2, r3
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	4b24      	ldr	r3, [pc, #144]	@ (8002244 <GenerateJPEGMCUBlock+0x138>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	803b      	strh	r3, [r7, #0]
			// Pad to 8x8
			if (cached_x >= CAM_WIDTH || cached_y >= CAM_HEIGHT) {
 80021ba:	883b      	ldrh	r3, [r7, #0]
 80021bc:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 80021c0:	d802      	bhi.n	80021c8 <GenerateJPEGMCUBlock+0xbc>
 80021c2:	887b      	ldrh	r3, [r7, #2]
 80021c4:	2bf1      	cmp	r3, #241	@ 0xf1
 80021c6:	d905      	bls.n	80021d4 <GenerateJPEGMCUBlock+0xc8>
				jpeg_mcu[i] = 0x00;
 80021c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002248 <GenerateJPEGMCUBlock+0x13c>)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	4413      	add	r3, r2
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
 80021d2:	e00e      	b.n	80021f2 <GenerateJPEGMCUBlock+0xe6>
			} else {
				jpeg_mcu[i] = camera_mem[cached_x + cached_y * CAM_WIDTH];
 80021d4:	8839      	ldrh	r1, [r7, #0]
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	019a      	lsls	r2, r3, #6
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	440b      	add	r3, r1
 80021e4:	4a19      	ldr	r2, [pc, #100]	@ (800224c <GenerateJPEGMCUBlock+0x140>)
 80021e6:	5cd1      	ldrb	r1, [r2, r3]
 80021e8:	4a17      	ldr	r2, [pc, #92]	@ (8002248 <GenerateJPEGMCUBlock+0x13c>)
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	4413      	add	r3, r2
 80021ee:	460a      	mov	r2, r1
 80021f0:	701a      	strb	r2, [r3, #0]
			}
			i++;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	3301      	adds	r3, #1
 80021f6:	617b      	str	r3, [r7, #20]
		for (int x = xStart; x < xStart + 8; x++) {
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3301      	adds	r3, #1
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	3307      	adds	r3, #7
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	429a      	cmp	r2, r3
 8002206:	ddc8      	ble.n	800219a <GenerateJPEGMCUBlock+0x8e>
	for (int y = yStart; y < yStart + 8; y++) {
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	3301      	adds	r3, #1
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3307      	adds	r3, #7
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	429a      	cmp	r2, r3
 8002216:	ddb2      	ble.n	800217e <GenerateJPEGMCUBlock+0x72>
		}
	}
	jpeg_block++;
 8002218:	4b08      	ldr	r3, [pc, #32]	@ (800223c <GenerateJPEGMCUBlock+0x130>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	3301      	adds	r3, #1
 800221e:	4a07      	ldr	r2, [pc, #28]	@ (800223c <GenerateJPEGMCUBlock+0x130>)
 8002220:	6013      	str	r3, [r2, #0]
	return 0;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	371c      	adds	r7, #28
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	24025d3c 	.word	0x24025d3c
 8002234:	24000004 	.word	0x24000004
 8002238:	2400000c 	.word	0x2400000c
 800223c:	2401336c 	.word	0x2401336c
 8002240:	24000014 	.word	0x24000014
 8002244:	24000000 	.word	0x24000000
 8002248:	2401332c 	.word	0x2401332c
 800224c:	24000964 	.word	0x24000964

08002250 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002256:	463b      	mov	r3, r7
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002262:	f001 fa63 	bl	800372c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002266:	2301      	movs	r3, #1
 8002268:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800226a:	2300      	movs	r3, #0
 800226c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800226e:	2300      	movs	r3, #0
 8002270:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002272:	231f      	movs	r3, #31
 8002274:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002276:	2387      	movs	r3, #135	@ 0x87
 8002278:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800227a:	2300      	movs	r3, #0
 800227c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800227e:	2300      	movs	r3, #0
 8002280:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002282:	2301      	movs	r3, #1
 8002284:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002286:	2301      	movs	r3, #1
 8002288:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002292:	463b      	mov	r3, r7
 8002294:	4618      	mov	r0, r3
 8002296:	f001 fa81 	bl	800379c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800229a:	2004      	movs	r0, #4
 800229c:	f001 fa5e 	bl	800375c <HAL_MPU_Enable>

}
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022ac:	b672      	cpsid	i
}
 80022ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <Error_Handler+0x8>

080022b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ba:	4b0a      	ldr	r3, [pc, #40]	@ (80022e4 <HAL_MspInit+0x30>)
 80022bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022c0:	4a08      	ldr	r2, [pc, #32]	@ (80022e4 <HAL_MspInit+0x30>)
 80022c2:	f043 0302 	orr.w	r3, r3, #2
 80022c6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80022ca:	4b06      	ldr	r3, [pc, #24]	@ (80022e4 <HAL_MspInit+0x30>)
 80022cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	58024400 	.word	0x58024400

080022e8 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08e      	sub	sp, #56	@ 0x38
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a79      	ldr	r2, [pc, #484]	@ (80024ec <HAL_DCMI_MspInit+0x204>)
 8002306:	4293      	cmp	r3, r2
 8002308:	f040 80ec 	bne.w	80024e4 <HAL_DCMI_MspInit+0x1fc>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800230c:	4b78      	ldr	r3, [pc, #480]	@ (80024f0 <HAL_DCMI_MspInit+0x208>)
 800230e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002312:	4a77      	ldr	r2, [pc, #476]	@ (80024f0 <HAL_DCMI_MspInit+0x208>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800231c:	4b74      	ldr	r3, [pc, #464]	@ (80024f0 <HAL_DCMI_MspInit+0x208>)
 800231e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	623b      	str	r3, [r7, #32]
 8002328:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800232a:	4b71      	ldr	r3, [pc, #452]	@ (80024f0 <HAL_DCMI_MspInit+0x208>)
 800232c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002330:	4a6f      	ldr	r2, [pc, #444]	@ (80024f0 <HAL_DCMI_MspInit+0x208>)
 8002332:	f043 0310 	orr.w	r3, r3, #16
 8002336:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800233a:	4b6d      	ldr	r3, [pc, #436]	@ (80024f0 <HAL_DCMI_MspInit+0x208>)
 800233c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002340:	f003 0310 	and.w	r3, r3, #16
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002348:	4b69      	ldr	r3, [pc, #420]	@ (80024f0 <HAL_DCMI_MspInit+0x208>)
 800234a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800234e:	4a68      	ldr	r2, [pc, #416]	@ (80024f0 <HAL_DCMI_MspInit+0x208>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002358:	4b65      	ldr	r3, [pc, #404]	@ (80024f0 <HAL_DCMI_MspInit+0x208>)
 800235a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	61bb      	str	r3, [r7, #24]
 8002364:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002366:	4b62      	ldr	r3, [pc, #392]	@ (80024f0 <HAL_DCMI_MspInit+0x208>)
 8002368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800236c:	4a60      	ldr	r2, [pc, #384]	@ (80024f0 <HAL_DCMI_MspInit+0x208>)
 800236e:	f043 0304 	orr.w	r3, r3, #4
 8002372:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002376:	4b5e      	ldr	r3, [pc, #376]	@ (80024f0 <HAL_DCMI_MspInit+0x208>)
 8002378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002384:	4b5a      	ldr	r3, [pc, #360]	@ (80024f0 <HAL_DCMI_MspInit+0x208>)
 8002386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800238a:	4a59      	ldr	r2, [pc, #356]	@ (80024f0 <HAL_DCMI_MspInit+0x208>)
 800238c:	f043 0308 	orr.w	r3, r3, #8
 8002390:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002394:	4b56      	ldr	r3, [pc, #344]	@ (80024f0 <HAL_DCMI_MspInit+0x208>)
 8002396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a2:	4b53      	ldr	r3, [pc, #332]	@ (80024f0 <HAL_DCMI_MspInit+0x208>)
 80023a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a8:	4a51      	ldr	r2, [pc, #324]	@ (80024f0 <HAL_DCMI_MspInit+0x208>)
 80023aa:	f043 0302 	orr.w	r3, r3, #2
 80023ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023b2:	4b4f      	ldr	r3, [pc, #316]	@ (80024f0 <HAL_DCMI_MspInit+0x208>)
 80023b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 80023c0:	2373      	movs	r3, #115	@ 0x73
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c4:	2302      	movs	r3, #2
 80023c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023cc:	2300      	movs	r3, #0
 80023ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80023d0:	230d      	movs	r3, #13
 80023d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023d8:	4619      	mov	r1, r3
 80023da:	4846      	ldr	r0, [pc, #280]	@ (80024f4 <HAL_DCMI_MspInit+0x20c>)
 80023dc:	f005 f804 	bl	80073e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80023e0:	2350      	movs	r3, #80	@ 0x50
 80023e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ec:	2300      	movs	r3, #0
 80023ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80023f0:	230d      	movs	r3, #13
 80023f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023f8:	4619      	mov	r1, r3
 80023fa:	483f      	ldr	r0, [pc, #252]	@ (80024f8 <HAL_DCMI_MspInit+0x210>)
 80023fc:	f004 fff4 	bl	80073e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002400:	23c0      	movs	r3, #192	@ 0xc0
 8002402:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002404:	2302      	movs	r3, #2
 8002406:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240c:	2300      	movs	r3, #0
 800240e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002410:	230d      	movs	r3, #13
 8002412:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002414:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002418:	4619      	mov	r1, r3
 800241a:	4838      	ldr	r0, [pc, #224]	@ (80024fc <HAL_DCMI_MspInit+0x214>)
 800241c:	f004 ffe4 	bl	80073e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002420:	2308      	movs	r3, #8
 8002422:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242c:	2300      	movs	r3, #0
 800242e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002430:	230d      	movs	r3, #13
 8002432:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002434:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002438:	4619      	mov	r1, r3
 800243a:	4831      	ldr	r0, [pc, #196]	@ (8002500 <HAL_DCMI_MspInit+0x218>)
 800243c:	f004 ffd4 	bl	80073e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002440:	2380      	movs	r3, #128	@ 0x80
 8002442:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244c:	2300      	movs	r3, #0
 800244e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002450:	230d      	movs	r3, #13
 8002452:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002454:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002458:	4619      	mov	r1, r3
 800245a:	482a      	ldr	r0, [pc, #168]	@ (8002504 <HAL_DCMI_MspInit+0x21c>)
 800245c:	f004 ffc4 	bl	80073e8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8002460:	4b29      	ldr	r3, [pc, #164]	@ (8002508 <HAL_DCMI_MspInit+0x220>)
 8002462:	4a2a      	ldr	r2, [pc, #168]	@ (800250c <HAL_DCMI_MspInit+0x224>)
 8002464:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8002466:	4b28      	ldr	r3, [pc, #160]	@ (8002508 <HAL_DCMI_MspInit+0x220>)
 8002468:	224b      	movs	r2, #75	@ 0x4b
 800246a:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800246c:	4b26      	ldr	r3, [pc, #152]	@ (8002508 <HAL_DCMI_MspInit+0x220>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002472:	4b25      	ldr	r3, [pc, #148]	@ (8002508 <HAL_DCMI_MspInit+0x220>)
 8002474:	2200      	movs	r2, #0
 8002476:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002478:	4b23      	ldr	r3, [pc, #140]	@ (8002508 <HAL_DCMI_MspInit+0x220>)
 800247a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800247e:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002480:	4b21      	ldr	r3, [pc, #132]	@ (8002508 <HAL_DCMI_MspInit+0x220>)
 8002482:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002486:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002488:	4b1f      	ldr	r3, [pc, #124]	@ (8002508 <HAL_DCMI_MspInit+0x220>)
 800248a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800248e:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8002490:	4b1d      	ldr	r3, [pc, #116]	@ (8002508 <HAL_DCMI_MspInit+0x220>)
 8002492:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002496:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8002498:	4b1b      	ldr	r3, [pc, #108]	@ (8002508 <HAL_DCMI_MspInit+0x220>)
 800249a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800249e:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80024a0:	4b19      	ldr	r3, [pc, #100]	@ (8002508 <HAL_DCMI_MspInit+0x220>)
 80024a2:	2204      	movs	r2, #4
 80024a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80024a6:	4b18      	ldr	r3, [pc, #96]	@ (8002508 <HAL_DCMI_MspInit+0x220>)
 80024a8:	2203      	movs	r2, #3
 80024aa:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 80024ac:	4b16      	ldr	r3, [pc, #88]	@ (8002508 <HAL_DCMI_MspInit+0x220>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80024b2:	4b15      	ldr	r3, [pc, #84]	@ (8002508 <HAL_DCMI_MspInit+0x220>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80024b8:	4813      	ldr	r0, [pc, #76]	@ (8002508 <HAL_DCMI_MspInit+0x220>)
 80024ba:	f001 fc9b 	bl	8003df4 <HAL_DMA_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_DCMI_MspInit+0x1e0>
    {
      Error_Handler();
 80024c4:	f7ff fef0 	bl	80022a8 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002508 <HAL_DCMI_MspInit+0x220>)
 80024cc:	649a      	str	r2, [r3, #72]	@ 0x48
 80024ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002508 <HAL_DCMI_MspInit+0x220>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80024d4:	2200      	movs	r2, #0
 80024d6:	2100      	movs	r1, #0
 80024d8:	204e      	movs	r0, #78	@ 0x4e
 80024da:	f001 f8f2 	bl	80036c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80024de:	204e      	movs	r0, #78	@ 0x4e
 80024e0:	f001 f909 	bl	80036f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 80024e4:	bf00      	nop
 80024e6:	3738      	adds	r7, #56	@ 0x38
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	48020000 	.word	0x48020000
 80024f0:	58024400 	.word	0x58024400
 80024f4:	58021000 	.word	0x58021000
 80024f8:	58020000 	.word	0x58020000
 80024fc:	58020800 	.word	0x58020800
 8002500:	58020c00 	.word	0x58020c00
 8002504:	58020400 	.word	0x58020400
 8002508:	24000350 	.word	0x24000350
 800250c:	40020010 	.word	0x40020010

08002510 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b0ba      	sub	sp, #232	@ 0xe8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002528:	f107 0310 	add.w	r3, r7, #16
 800252c:	22c0      	movs	r2, #192	@ 0xc0
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f016 fe6e 	bl	8019212 <memset>
  if(hi2c->Instance==I2C2)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a38      	ldr	r2, [pc, #224]	@ (800261c <HAL_I2C_MspInit+0x10c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d169      	bne.n	8002614 <HAL_I2C_MspInit+0x104>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002540:	f04f 0208 	mov.w	r2, #8
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 800254c:	2302      	movs	r3, #2
 800254e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 12;
 8002550:	230c      	movs	r3, #12
 8002552:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002554:	2302      	movs	r3, #2
 8002556:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002558:	2302      	movs	r3, #2
 800255a:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 800255c:	2303      	movs	r3, #3
 800255e:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002560:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002564:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002566:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800256a:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8002570:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002574:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002578:	f107 0310 	add.w	r3, r7, #16
 800257c:	4618      	mov	r0, r3
 800257e:	f00b fded 	bl	800e15c <HAL_RCCEx_PeriphCLKConfig>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_I2C_MspInit+0x7c>
    {
      Error_Handler();
 8002588:	f7ff fe8e 	bl	80022a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800258c:	4b24      	ldr	r3, [pc, #144]	@ (8002620 <HAL_I2C_MspInit+0x110>)
 800258e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002592:	4a23      	ldr	r2, [pc, #140]	@ (8002620 <HAL_I2C_MspInit+0x110>)
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800259c:	4b20      	ldr	r3, [pc, #128]	@ (8002620 <HAL_I2C_MspInit+0x110>)
 800259e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80025ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025b2:	2312      	movs	r3, #18
 80025b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025b8:	2301      	movs	r3, #1
 80025ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025be:	2303      	movs	r3, #3
 80025c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025c4:	2304      	movs	r3, #4
 80025c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025ce:	4619      	mov	r1, r3
 80025d0:	4814      	ldr	r0, [pc, #80]	@ (8002624 <HAL_I2C_MspInit+0x114>)
 80025d2:	f004 ff09 	bl	80073e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025d6:	4b12      	ldr	r3, [pc, #72]	@ (8002620 <HAL_I2C_MspInit+0x110>)
 80025d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025dc:	4a10      	ldr	r2, [pc, #64]	@ (8002620 <HAL_I2C_MspInit+0x110>)
 80025de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80025e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002620 <HAL_I2C_MspInit+0x110>)
 80025e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2100      	movs	r1, #0
 80025f8:	2021      	movs	r0, #33	@ 0x21
 80025fa:	f001 f862 	bl	80036c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80025fe:	2021      	movs	r0, #33	@ 0x21
 8002600:	f001 f879 	bl	80036f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002604:	2200      	movs	r2, #0
 8002606:	2100      	movs	r1, #0
 8002608:	2022      	movs	r0, #34	@ 0x22
 800260a:	f001 f85a 	bl	80036c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800260e:	2022      	movs	r0, #34	@ 0x22
 8002610:	f001 f871 	bl	80036f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002614:	bf00      	nop
 8002616:	37e8      	adds	r7, #232	@ 0xe8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40005800 	.word	0x40005800
 8002620:	58024400 	.word	0x58024400
 8002624:	58020400 	.word	0x58020400

08002628 <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a55      	ldr	r2, [pc, #340]	@ (800278c <HAL_JPEG_MspInit+0x164>)
 8002636:	4293      	cmp	r3, r2
 8002638:	f040 80a3 	bne.w	8002782 <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 800263c:	4b54      	ldr	r3, [pc, #336]	@ (8002790 <HAL_JPEG_MspInit+0x168>)
 800263e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002642:	4a53      	ldr	r2, [pc, #332]	@ (8002790 <HAL_JPEG_MspInit+0x168>)
 8002644:	f043 0320 	orr.w	r3, r3, #32
 8002648:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800264c:	4b50      	ldr	r3, [pc, #320]	@ (8002790 <HAL_JPEG_MspInit+0x168>)
 800264e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 800265a:	4b4e      	ldr	r3, [pc, #312]	@ (8002794 <HAL_JPEG_MspInit+0x16c>)
 800265c:	4a4e      	ldr	r2, [pc, #312]	@ (8002798 <HAL_JPEG_MspInit+0x170>)
 800265e:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8002660:	4b4c      	ldr	r3, [pc, #304]	@ (8002794 <HAL_JPEG_MspInit+0x16c>)
 8002662:	2211      	movs	r2, #17
 8002664:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8002666:	4b4b      	ldr	r3, [pc, #300]	@ (8002794 <HAL_JPEG_MspInit+0x16c>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 800266c:	4b49      	ldr	r3, [pc, #292]	@ (8002794 <HAL_JPEG_MspInit+0x16c>)
 800266e:	2240      	movs	r2, #64	@ 0x40
 8002670:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002672:	4b48      	ldr	r3, [pc, #288]	@ (8002794 <HAL_JPEG_MspInit+0x16c>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8002678:	4b46      	ldr	r3, [pc, #280]	@ (8002794 <HAL_JPEG_MspInit+0x16c>)
 800267a:	2202      	movs	r2, #2
 800267c:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 800267e:	4b45      	ldr	r3, [pc, #276]	@ (8002794 <HAL_JPEG_MspInit+0x16c>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8002684:	4b43      	ldr	r3, [pc, #268]	@ (8002794 <HAL_JPEG_MspInit+0x16c>)
 8002686:	2200      	movs	r2, #0
 8002688:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800268a:	4b42      	ldr	r3, [pc, #264]	@ (8002794 <HAL_JPEG_MspInit+0x16c>)
 800268c:	2280      	movs	r2, #128	@ 0x80
 800268e:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002690:	4b40      	ldr	r3, [pc, #256]	@ (8002794 <HAL_JPEG_MspInit+0x16c>)
 8002692:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002696:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8002698:	4b3e      	ldr	r3, [pc, #248]	@ (8002794 <HAL_JPEG_MspInit+0x16c>)
 800269a:	2220      	movs	r2, #32
 800269c:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800269e:	4b3d      	ldr	r3, [pc, #244]	@ (8002794 <HAL_JPEG_MspInit+0x16c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80026a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002794 <HAL_JPEG_MspInit+0x16c>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 80026aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002794 <HAL_JPEG_MspInit+0x16c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80026b0:	4b38      	ldr	r3, [pc, #224]	@ (8002794 <HAL_JPEG_MspInit+0x16c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80026b6:	4837      	ldr	r0, [pc, #220]	@ (8002794 <HAL_JPEG_MspInit+0x16c>)
 80026b8:	f008 fede 	bl	800b478 <HAL_MDMA_Init>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 80026c2:	f7ff fdf1 	bl	80022a8 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 80026c6:	2200      	movs	r2, #0
 80026c8:	2100      	movs	r1, #0
 80026ca:	4832      	ldr	r0, [pc, #200]	@ (8002794 <HAL_JPEG_MspInit+0x16c>)
 80026cc:	f008 ff20 	bl	800b510 <HAL_MDMA_ConfigPostRequestMask>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 80026d6:	f7ff fde7 	bl	80022a8 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a2d      	ldr	r2, [pc, #180]	@ (8002794 <HAL_JPEG_MspInit+0x16c>)
 80026de:	631a      	str	r2, [r3, #48]	@ 0x30
 80026e0:	4a2c      	ldr	r2, [pc, #176]	@ (8002794 <HAL_JPEG_MspInit+0x16c>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 80026e6:	4b2d      	ldr	r3, [pc, #180]	@ (800279c <HAL_JPEG_MspInit+0x174>)
 80026e8:	4a2d      	ldr	r2, [pc, #180]	@ (80027a0 <HAL_JPEG_MspInit+0x178>)
 80026ea:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 80026ec:	4b2b      	ldr	r3, [pc, #172]	@ (800279c <HAL_JPEG_MspInit+0x174>)
 80026ee:	2214      	movs	r2, #20
 80026f0:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80026f2:	4b2a      	ldr	r3, [pc, #168]	@ (800279c <HAL_JPEG_MspInit+0x174>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 80026f8:	4b28      	ldr	r3, [pc, #160]	@ (800279c <HAL_JPEG_MspInit+0x174>)
 80026fa:	2240      	movs	r2, #64	@ 0x40
 80026fc:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80026fe:	4b27      	ldr	r3, [pc, #156]	@ (800279c <HAL_JPEG_MspInit+0x174>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8002704:	4b25      	ldr	r3, [pc, #148]	@ (800279c <HAL_JPEG_MspInit+0x174>)
 8002706:	2200      	movs	r2, #0
 8002708:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 800270a:	4b24      	ldr	r3, [pc, #144]	@ (800279c <HAL_JPEG_MspInit+0x174>)
 800270c:	2208      	movs	r2, #8
 800270e:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8002710:	4b22      	ldr	r3, [pc, #136]	@ (800279c <HAL_JPEG_MspInit+0x174>)
 8002712:	2220      	movs	r2, #32
 8002714:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8002716:	4b21      	ldr	r3, [pc, #132]	@ (800279c <HAL_JPEG_MspInit+0x174>)
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800271c:	4b1f      	ldr	r3, [pc, #124]	@ (800279c <HAL_JPEG_MspInit+0x174>)
 800271e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002722:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 8002724:	4b1d      	ldr	r3, [pc, #116]	@ (800279c <HAL_JPEG_MspInit+0x174>)
 8002726:	2204      	movs	r2, #4
 8002728:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800272a:	4b1c      	ldr	r3, [pc, #112]	@ (800279c <HAL_JPEG_MspInit+0x174>)
 800272c:	2200      	movs	r2, #0
 800272e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002730:	4b1a      	ldr	r3, [pc, #104]	@ (800279c <HAL_JPEG_MspInit+0x174>)
 8002732:	2200      	movs	r2, #0
 8002734:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 8002736:	4b19      	ldr	r3, [pc, #100]	@ (800279c <HAL_JPEG_MspInit+0x174>)
 8002738:	2200      	movs	r2, #0
 800273a:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 800273c:	4b17      	ldr	r3, [pc, #92]	@ (800279c <HAL_JPEG_MspInit+0x174>)
 800273e:	2200      	movs	r2, #0
 8002740:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 8002742:	4816      	ldr	r0, [pc, #88]	@ (800279c <HAL_JPEG_MspInit+0x174>)
 8002744:	f008 fe98 	bl	800b478 <HAL_MDMA_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 800274e:	f7ff fdab 	bl	80022a8 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 8002752:	2200      	movs	r2, #0
 8002754:	2100      	movs	r1, #0
 8002756:	4811      	ldr	r0, [pc, #68]	@ (800279c <HAL_JPEG_MspInit+0x174>)
 8002758:	f008 feda 	bl	800b510 <HAL_MDMA_ConfigPostRequestMask>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 8002762:	f7ff fda1 	bl	80022a8 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a0c      	ldr	r2, [pc, #48]	@ (800279c <HAL_JPEG_MspInit+0x174>)
 800276a:	635a      	str	r2, [r3, #52]	@ 0x34
 800276c:	4a0b      	ldr	r2, [pc, #44]	@ (800279c <HAL_JPEG_MspInit+0x174>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	2079      	movs	r0, #121	@ 0x79
 8002778:	f000 ffa3 	bl	80036c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800277c:	2079      	movs	r0, #121	@ 0x79
 800277e:	f000 ffba 	bl	80036f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	52003000 	.word	0x52003000
 8002790:	58024400 	.word	0x58024400
 8002794:	24000474 	.word	0x24000474
 8002798:	52000040 	.word	0x52000040
 800279c:	240004e0 	.word	0x240004e0
 80027a0:	52000080 	.word	0x52000080

080027a4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b0bc      	sub	sp, #240	@ 0xf0
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027bc:	f107 0318 	add.w	r3, r7, #24
 80027c0:	22c0      	movs	r2, #192	@ 0xc0
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f016 fd24 	bl	8019212 <memset>
  if(hspi->Instance==SPI2)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a38      	ldr	r2, [pc, #224]	@ (80028b0 <HAL_SPI_MspInit+0x10c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d169      	bne.n	80028a8 <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80027d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027e4:	f107 0318 	add.w	r3, r7, #24
 80027e8:	4618      	mov	r0, r3
 80027ea:	f00b fcb7 	bl	800e15c <HAL_RCCEx_PeriphCLKConfig>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80027f4:	f7ff fd58 	bl	80022a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027f8:	4b2e      	ldr	r3, [pc, #184]	@ (80028b4 <HAL_SPI_MspInit+0x110>)
 80027fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027fe:	4a2d      	ldr	r2, [pc, #180]	@ (80028b4 <HAL_SPI_MspInit+0x110>)
 8002800:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002804:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002808:	4b2a      	ldr	r3, [pc, #168]	@ (80028b4 <HAL_SPI_MspInit+0x110>)
 800280a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800280e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002816:	4b27      	ldr	r3, [pc, #156]	@ (80028b4 <HAL_SPI_MspInit+0x110>)
 8002818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800281c:	4a25      	ldr	r2, [pc, #148]	@ (80028b4 <HAL_SPI_MspInit+0x110>)
 800281e:	f043 0304 	orr.w	r3, r3, #4
 8002822:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002826:	4b23      	ldr	r3, [pc, #140]	@ (80028b4 <HAL_SPI_MspInit+0x110>)
 8002828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002834:	4b1f      	ldr	r3, [pc, #124]	@ (80028b4 <HAL_SPI_MspInit+0x110>)
 8002836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800283a:	4a1e      	ldr	r2, [pc, #120]	@ (80028b4 <HAL_SPI_MspInit+0x110>)
 800283c:	f043 0302 	orr.w	r3, r3, #2
 8002840:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002844:	4b1b      	ldr	r3, [pc, #108]	@ (80028b4 <HAL_SPI_MspInit+0x110>)
 8002846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002852:	2306      	movs	r3, #6
 8002854:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002858:	2302      	movs	r3, #2
 800285a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002864:	2300      	movs	r3, #0
 8002866:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800286a:	2305      	movs	r3, #5
 800286c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002870:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002874:	4619      	mov	r1, r3
 8002876:	4810      	ldr	r0, [pc, #64]	@ (80028b8 <HAL_SPI_MspInit+0x114>)
 8002878:	f004 fdb6 	bl	80073e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800287c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002880:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002884:	2302      	movs	r3, #2
 8002886:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2300      	movs	r3, #0
 8002892:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002896:	2305      	movs	r3, #5
 8002898:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800289c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80028a0:	4619      	mov	r1, r3
 80028a2:	4806      	ldr	r0, [pc, #24]	@ (80028bc <HAL_SPI_MspInit+0x118>)
 80028a4:	f004 fda0 	bl	80073e8 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80028a8:	bf00      	nop
 80028aa:	37f0      	adds	r7, #240	@ 0xf0
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40003800 	.word	0x40003800
 80028b4:	58024400 	.word	0x58024400
 80028b8:	58020800 	.word	0x58020800
 80028bc:	58020400 	.word	0x58020400

080028c0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a2b      	ldr	r2, [pc, #172]	@ (800297c <HAL_TIM_PWM_MspInit+0xbc>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d10f      	bne.n	80028f2 <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002980 <HAL_TIM_PWM_MspInit+0xc0>)
 80028d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028d8:	4a29      	ldr	r2, [pc, #164]	@ (8002980 <HAL_TIM_PWM_MspInit+0xc0>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028e2:	4b27      	ldr	r3, [pc, #156]	@ (8002980 <HAL_TIM_PWM_MspInit+0xc0>)
 80028e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028f0:	e03d      	b.n	800296e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028fa:	d10f      	bne.n	800291c <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028fc:	4b20      	ldr	r3, [pc, #128]	@ (8002980 <HAL_TIM_PWM_MspInit+0xc0>)
 80028fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002902:	4a1f      	ldr	r2, [pc, #124]	@ (8002980 <HAL_TIM_PWM_MspInit+0xc0>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800290c:	4b1c      	ldr	r3, [pc, #112]	@ (8002980 <HAL_TIM_PWM_MspInit+0xc0>)
 800290e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]
}
 800291a:	e028      	b.n	800296e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a18      	ldr	r2, [pc, #96]	@ (8002984 <HAL_TIM_PWM_MspInit+0xc4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d10f      	bne.n	8002946 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002926:	4b16      	ldr	r3, [pc, #88]	@ (8002980 <HAL_TIM_PWM_MspInit+0xc0>)
 8002928:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800292c:	4a14      	ldr	r2, [pc, #80]	@ (8002980 <HAL_TIM_PWM_MspInit+0xc0>)
 800292e:	f043 0302 	orr.w	r3, r3, #2
 8002932:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002936:	4b12      	ldr	r3, [pc, #72]	@ (8002980 <HAL_TIM_PWM_MspInit+0xc0>)
 8002938:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
}
 8002944:	e013      	b.n	800296e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a0f      	ldr	r2, [pc, #60]	@ (8002988 <HAL_TIM_PWM_MspInit+0xc8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d10e      	bne.n	800296e <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002950:	4b0b      	ldr	r3, [pc, #44]	@ (8002980 <HAL_TIM_PWM_MspInit+0xc0>)
 8002952:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002956:	4a0a      	ldr	r2, [pc, #40]	@ (8002980 <HAL_TIM_PWM_MspInit+0xc0>)
 8002958:	f043 0304 	orr.w	r3, r3, #4
 800295c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002960:	4b07      	ldr	r3, [pc, #28]	@ (8002980 <HAL_TIM_PWM_MspInit+0xc0>)
 8002962:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]
}
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40010000 	.word	0x40010000
 8002980:	58024400 	.word	0x58024400
 8002984:	40000400 	.word	0x40000400
 8002988:	40000800 	.word	0x40000800

0800298c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1d      	ldr	r2, [pc, #116]	@ (8002a10 <HAL_TIM_Base_MspInit+0x84>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d117      	bne.n	80029ce <HAL_TIM_Base_MspInit+0x42>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800299e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a14 <HAL_TIM_Base_MspInit+0x88>)
 80029a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a14 <HAL_TIM_Base_MspInit+0x88>)
 80029a6:	f043 0308 	orr.w	r3, r3, #8
 80029aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80029ae:	4b19      	ldr	r3, [pc, #100]	@ (8002a14 <HAL_TIM_Base_MspInit+0x88>)
 80029b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80029bc:	2200      	movs	r2, #0
 80029be:	2100      	movs	r1, #0
 80029c0:	2032      	movs	r0, #50	@ 0x32
 80029c2:	f000 fe7e 	bl	80036c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80029c6:	2032      	movs	r0, #50	@ 0x32
 80029c8:	f000 fe95 	bl	80036f6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 80029cc:	e01b      	b.n	8002a06 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM14)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a11      	ldr	r2, [pc, #68]	@ (8002a18 <HAL_TIM_Base_MspInit+0x8c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d116      	bne.n	8002a06 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80029d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a14 <HAL_TIM_Base_MspInit+0x88>)
 80029da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029de:	4a0d      	ldr	r2, [pc, #52]	@ (8002a14 <HAL_TIM_Base_MspInit+0x88>)
 80029e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80029e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002a14 <HAL_TIM_Base_MspInit+0x88>)
 80029ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2100      	movs	r1, #0
 80029fa:	202d      	movs	r0, #45	@ 0x2d
 80029fc:	f000 fe61 	bl	80036c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002a00:	202d      	movs	r0, #45	@ 0x2d
 8002a02:	f000 fe78 	bl	80036f6 <HAL_NVIC_EnableIRQ>
}
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40000c00 	.word	0x40000c00
 8002a14:	58024400 	.word	0x58024400
 8002a18:	40002000 	.word	0x40002000

08002a1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08c      	sub	sp, #48	@ 0x30
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	f107 031c 	add.w	r3, r7, #28
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a5d      	ldr	r2, [pc, #372]	@ (8002bb0 <HAL_TIM_MspPostInit+0x194>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d120      	bne.n	8002a80 <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a3e:	4b5d      	ldr	r3, [pc, #372]	@ (8002bb4 <HAL_TIM_MspPostInit+0x198>)
 8002a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a44:	4a5b      	ldr	r2, [pc, #364]	@ (8002bb4 <HAL_TIM_MspPostInit+0x198>)
 8002a46:	f043 0310 	orr.w	r3, r3, #16
 8002a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a4e:	4b59      	ldr	r3, [pc, #356]	@ (8002bb4 <HAL_TIM_MspPostInit+0x198>)
 8002a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	61bb      	str	r3, [r7, #24]
 8002a5a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002a5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a62:	2302      	movs	r3, #2
 8002a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a72:	f107 031c 	add.w	r3, r7, #28
 8002a76:	4619      	mov	r1, r3
 8002a78:	484f      	ldr	r0, [pc, #316]	@ (8002bb8 <HAL_TIM_MspPostInit+0x19c>)
 8002a7a:	f004 fcb5 	bl	80073e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002a7e:	e093      	b.n	8002ba8 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a88:	d11f      	bne.n	8002aca <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb4 <HAL_TIM_MspPostInit+0x198>)
 8002a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a90:	4a48      	ldr	r2, [pc, #288]	@ (8002bb4 <HAL_TIM_MspPostInit+0x198>)
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a9a:	4b46      	ldr	r3, [pc, #280]	@ (8002bb4 <HAL_TIM_MspPostInit+0x198>)
 8002a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002aa8:	2307      	movs	r3, #7
 8002aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aac:	2302      	movs	r3, #2
 8002aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002abc:	f107 031c 	add.w	r3, r7, #28
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	483e      	ldr	r0, [pc, #248]	@ (8002bbc <HAL_TIM_MspPostInit+0x1a0>)
 8002ac4:	f004 fc90 	bl	80073e8 <HAL_GPIO_Init>
}
 8002ac8:	e06e      	b.n	8002ba8 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM3)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a3c      	ldr	r2, [pc, #240]	@ (8002bc0 <HAL_TIM_MspPostInit+0x1a4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d11f      	bne.n	8002b14 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad4:	4b37      	ldr	r3, [pc, #220]	@ (8002bb4 <HAL_TIM_MspPostInit+0x198>)
 8002ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ada:	4a36      	ldr	r2, [pc, #216]	@ (8002bb4 <HAL_TIM_MspPostInit+0x198>)
 8002adc:	f043 0302 	orr.w	r3, r3, #2
 8002ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ae4:	4b33      	ldr	r3, [pc, #204]	@ (8002bb4 <HAL_TIM_MspPostInit+0x198>)
 8002ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002af2:	2303      	movs	r3, #3
 8002af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af6:	2302      	movs	r3, #2
 8002af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afe:	2300      	movs	r3, #0
 8002b00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b02:	2302      	movs	r3, #2
 8002b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b06:	f107 031c 	add.w	r3, r7, #28
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	482d      	ldr	r0, [pc, #180]	@ (8002bc4 <HAL_TIM_MspPostInit+0x1a8>)
 8002b0e:	f004 fc6b 	bl	80073e8 <HAL_GPIO_Init>
}
 8002b12:	e049      	b.n	8002ba8 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM4)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a2b      	ldr	r2, [pc, #172]	@ (8002bc8 <HAL_TIM_MspPostInit+0x1ac>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d120      	bne.n	8002b60 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1e:	4b25      	ldr	r3, [pc, #148]	@ (8002bb4 <HAL_TIM_MspPostInit+0x198>)
 8002b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b24:	4a23      	ldr	r2, [pc, #140]	@ (8002bb4 <HAL_TIM_MspPostInit+0x198>)
 8002b26:	f043 0302 	orr.w	r3, r3, #2
 8002b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b2e:	4b21      	ldr	r3, [pc, #132]	@ (8002bb4 <HAL_TIM_MspPostInit+0x198>)
 8002b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b3c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	2302      	movs	r3, #2
 8002b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b52:	f107 031c 	add.w	r3, r7, #28
 8002b56:	4619      	mov	r1, r3
 8002b58:	481a      	ldr	r0, [pc, #104]	@ (8002bc4 <HAL_TIM_MspPostInit+0x1a8>)
 8002b5a:	f004 fc45 	bl	80073e8 <HAL_GPIO_Init>
}
 8002b5e:	e023      	b.n	8002ba8 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM14)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a19      	ldr	r2, [pc, #100]	@ (8002bcc <HAL_TIM_MspPostInit+0x1b0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d11e      	bne.n	8002ba8 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6a:	4b12      	ldr	r3, [pc, #72]	@ (8002bb4 <HAL_TIM_MspPostInit+0x198>)
 8002b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b70:	4a10      	ldr	r2, [pc, #64]	@ (8002bb4 <HAL_TIM_MspPostInit+0x198>)
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb4 <HAL_TIM_MspPostInit+0x198>)
 8002b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b88:	2380      	movs	r3, #128	@ 0x80
 8002b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b94:	2300      	movs	r3, #0
 8002b96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002b98:	2309      	movs	r3, #9
 8002b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9c:	f107 031c 	add.w	r3, r7, #28
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4806      	ldr	r0, [pc, #24]	@ (8002bbc <HAL_TIM_MspPostInit+0x1a0>)
 8002ba4:	f004 fc20 	bl	80073e8 <HAL_GPIO_Init>
}
 8002ba8:	bf00      	nop
 8002baa:	3730      	adds	r7, #48	@ 0x30
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40010000 	.word	0x40010000
 8002bb4:	58024400 	.word	0x58024400
 8002bb8:	58021000 	.word	0x58021000
 8002bbc:	58020000 	.word	0x58020000
 8002bc0:	40000400 	.word	0x40000400
 8002bc4:	58020400 	.word	0x58020400
 8002bc8:	40000800 	.word	0x40000800
 8002bcc:	40002000 	.word	0x40002000

08002bd0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b0ba      	sub	sp, #232	@ 0xe8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	22c0      	movs	r2, #192	@ 0xc0
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f016 fb0e 	bl	8019212 <memset>
  if(huart->Instance==USART1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a43      	ldr	r2, [pc, #268]	@ (8002d08 <HAL_UART_MspInit+0x138>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d17e      	bne.n	8002cfe <HAL_UART_MspInit+0x12e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c00:	f04f 0201 	mov.w	r2, #1
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c12:	f107 0310 	add.w	r3, r7, #16
 8002c16:	4618      	mov	r0, r3
 8002c18:	f00b faa0 	bl	800e15c <HAL_RCCEx_PeriphCLKConfig>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002c22:	f7ff fb41 	bl	80022a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c26:	4b39      	ldr	r3, [pc, #228]	@ (8002d0c <HAL_UART_MspInit+0x13c>)
 8002c28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c2c:	4a37      	ldr	r2, [pc, #220]	@ (8002d0c <HAL_UART_MspInit+0x13c>)
 8002c2e:	f043 0310 	orr.w	r3, r3, #16
 8002c32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002c36:	4b35      	ldr	r3, [pc, #212]	@ (8002d0c <HAL_UART_MspInit+0x13c>)
 8002c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c44:	4b31      	ldr	r3, [pc, #196]	@ (8002d0c <HAL_UART_MspInit+0x13c>)
 8002c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c4a:	4a30      	ldr	r2, [pc, #192]	@ (8002d0c <HAL_UART_MspInit+0x13c>)
 8002c4c:	f043 0302 	orr.w	r3, r3, #2
 8002c50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c54:	4b2d      	ldr	r3, [pc, #180]	@ (8002d0c <HAL_UART_MspInit+0x13c>)
 8002c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002c62:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002c66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c76:	2300      	movs	r3, #0
 8002c78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c82:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c86:	4619      	mov	r1, r3
 8002c88:	4821      	ldr	r0, [pc, #132]	@ (8002d10 <HAL_UART_MspInit+0x140>)
 8002c8a:	f004 fbad 	bl	80073e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 8002c8e:	4b21      	ldr	r3, [pc, #132]	@ (8002d14 <HAL_UART_MspInit+0x144>)
 8002c90:	4a21      	ldr	r2, [pc, #132]	@ (8002d18 <HAL_UART_MspInit+0x148>)
 8002c92:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002c94:	4b1f      	ldr	r3, [pc, #124]	@ (8002d14 <HAL_UART_MspInit+0x144>)
 8002c96:	2229      	movs	r2, #41	@ 0x29
 8002c98:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d14 <HAL_UART_MspInit+0x144>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8002d14 <HAL_UART_MspInit+0x144>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d14 <HAL_UART_MspInit+0x144>)
 8002ca8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cac:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cae:	4b19      	ldr	r3, [pc, #100]	@ (8002d14 <HAL_UART_MspInit+0x144>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cb4:	4b17      	ldr	r3, [pc, #92]	@ (8002d14 <HAL_UART_MspInit+0x144>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002cba:	4b16      	ldr	r3, [pc, #88]	@ (8002d14 <HAL_UART_MspInit+0x144>)
 8002cbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cc0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002cc2:	4b14      	ldr	r3, [pc, #80]	@ (8002d14 <HAL_UART_MspInit+0x144>)
 8002cc4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002cc8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cca:	4b12      	ldr	r3, [pc, #72]	@ (8002d14 <HAL_UART_MspInit+0x144>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002cd0:	4810      	ldr	r0, [pc, #64]	@ (8002d14 <HAL_UART_MspInit+0x144>)
 8002cd2:	f001 f88f 	bl	8003df4 <HAL_DMA_Init>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8002cdc:	f7ff fae4 	bl	80022a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8002d14 <HAL_UART_MspInit+0x144>)
 8002ce4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8002d14 <HAL_UART_MspInit+0x144>)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	2025      	movs	r0, #37	@ 0x25
 8002cf4:	f000 fce5 	bl	80036c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cf8:	2025      	movs	r0, #37	@ 0x25
 8002cfa:	f000 fcfc 	bl	80036f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002cfe:	bf00      	nop
 8002d00:	37e8      	adds	r7, #232	@ 0xe8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40011000 	.word	0x40011000
 8002d0c:	58024400 	.word	0x58024400
 8002d10:	58020400 	.word	0x58020400
 8002d14:	24000830 	.word	0x24000830
 8002d18:	40020410 	.word	0x40020410

08002d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d20:	bf00      	nop
 8002d22:	e7fd      	b.n	8002d20 <NMI_Handler+0x4>

08002d24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d28:	bf00      	nop
 8002d2a:	e7fd      	b.n	8002d28 <HardFault_Handler+0x4>

08002d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <MemManage_Handler+0x4>

08002d34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d38:	bf00      	nop
 8002d3a:	e7fd      	b.n	8002d38 <BusFault_Handler+0x4>

08002d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d40:	bf00      	nop
 8002d42:	e7fd      	b.n	8002d40 <UsageFault_Handler+0x4>

08002d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d72:	f000 fb7b 	bl	800346c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002d80:	4802      	ldr	r0, [pc, #8]	@ (8002d8c <DMA1_Stream0_IRQHandler+0x10>)
 8002d82:	f002 fb61 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	24000350 	.word	0x24000350

08002d90 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002d94:	4802      	ldr	r0, [pc, #8]	@ (8002da0 <I2C2_EV_IRQHandler+0x10>)
 8002d96:	f004 ff9b 	bl	8007cd0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	240003c8 	.word	0x240003c8

08002da4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002da8:	4802      	ldr	r0, [pc, #8]	@ (8002db4 <I2C2_ER_IRQHandler+0x10>)
 8002daa:	f004 ffab 	bl	8007d04 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	240003c8 	.word	0x240003c8

08002db8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002dbc:	4802      	ldr	r0, [pc, #8]	@ (8002dc8 <USART1_IRQHandler+0x10>)
 8002dbe:	f00f fa6f 	bl	80122a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	2400079c 	.word	0x2400079c

08002dcc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002dd0:	4802      	ldr	r0, [pc, #8]	@ (8002ddc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002dd2:	f00e f891 	bl	8010ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	24000750 	.word	0x24000750

08002de0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  NetworkTimeout();
 8002de4:	f7fe fae8 	bl	80013b8 <NetworkTimeout>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002de8:	4802      	ldr	r0, [pc, #8]	@ (8002df4 <TIM5_IRQHandler+0x14>)
 8002dea:	f00e f885 	bl	8010ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	24000704 	.word	0x24000704

08002df8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002dfc:	4802      	ldr	r0, [pc, #8]	@ (8002e08 <DMA2_Stream0_IRQHandler+0x10>)
 8002dfe:	f002 fb23 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	24000830 	.word	0x24000830

08002e0c <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002e10:	4802      	ldr	r0, [pc, #8]	@ (8002e1c <DCMI_IRQHandler+0x10>)
 8002e12:	f000 fe9f 	bl	8003b54 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	24000300 	.word	0x24000300

08002e20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002e24:	4802      	ldr	r0, [pc, #8]	@ (8002e30 <OTG_FS_IRQHandler+0x10>)
 8002e26:	f009 f80a 	bl	800be3e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	24027254 	.word	0x24027254

08002e34 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8002e38:	4802      	ldr	r0, [pc, #8]	@ (8002e44 <JPEG_IRQHandler+0x10>)
 8002e3a:	f006 fd26 	bl	800988a <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	2400041c 	.word	0x2400041c

08002e48 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8002e4c:	4803      	ldr	r0, [pc, #12]	@ (8002e5c <MDMA_IRQHandler+0x14>)
 8002e4e:	f008 fc59 	bl	800b704 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 8002e52:	4803      	ldr	r0, [pc, #12]	@ (8002e60 <MDMA_IRQHandler+0x18>)
 8002e54:	f008 fc56 	bl	800b704 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	24000474 	.word	0x24000474
 8002e60:	240004e0 	.word	0x240004e0

08002e64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return 1;
 8002e68:	2301      	movs	r3, #1
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <_kill>:

int _kill(int pid, int sig)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e7e:	f016 fa2b 	bl	80192d8 <__errno>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2216      	movs	r2, #22
 8002e86:	601a      	str	r2, [r3, #0]
  return -1;
 8002e88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <_exit>:

void _exit (int status)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff ffe7 	bl	8002e74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ea6:	bf00      	nop
 8002ea8:	e7fd      	b.n	8002ea6 <_exit+0x12>

08002eaa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b086      	sub	sp, #24
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	e00a      	b.n	8002ed2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ebc:	f3af 8000 	nop.w
 8002ec0:	4601      	mov	r1, r0
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	60ba      	str	r2, [r7, #8]
 8002ec8:	b2ca      	uxtb	r2, r1
 8002eca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	dbf0      	blt.n	8002ebc <_read+0x12>
  }

  return len;
 8002eda:	687b      	ldr	r3, [r7, #4]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	e009      	b.n	8002f0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	60ba      	str	r2, [r7, #8]
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	3301      	adds	r3, #1
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	dbf1      	blt.n	8002ef6 <_write+0x12>
  }
  return len;
 8002f12:	687b      	ldr	r3, [r7, #4]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <_close>:

int _close(int file)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f44:	605a      	str	r2, [r3, #4]
  return 0;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <_isatty>:

int _isatty(int file)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f5c:	2301      	movs	r3, #1
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b085      	sub	sp, #20
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f8c:	4a14      	ldr	r2, [pc, #80]	@ (8002fe0 <_sbrk+0x5c>)
 8002f8e:	4b15      	ldr	r3, [pc, #84]	@ (8002fe4 <_sbrk+0x60>)
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f98:	4b13      	ldr	r3, [pc, #76]	@ (8002fe8 <_sbrk+0x64>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d102      	bne.n	8002fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fa0:	4b11      	ldr	r3, [pc, #68]	@ (8002fe8 <_sbrk+0x64>)
 8002fa2:	4a12      	ldr	r2, [pc, #72]	@ (8002fec <_sbrk+0x68>)
 8002fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fa6:	4b10      	ldr	r3, [pc, #64]	@ (8002fe8 <_sbrk+0x64>)
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d207      	bcs.n	8002fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fb4:	f016 f990 	bl	80192d8 <__errno>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	220c      	movs	r2, #12
 8002fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc2:	e009      	b.n	8002fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fc4:	4b08      	ldr	r3, [pc, #32]	@ (8002fe8 <_sbrk+0x64>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fca:	4b07      	ldr	r3, [pc, #28]	@ (8002fe8 <_sbrk+0x64>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	4a05      	ldr	r2, [pc, #20]	@ (8002fe8 <_sbrk+0x64>)
 8002fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	24080000 	.word	0x24080000
 8002fe4:	00000400 	.word	0x00000400
 8002fe8:	24025d68 	.word	0x24025d68
 8002fec:	24027aa8 	.word	0x24027aa8

08002ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ff4:	4b43      	ldr	r3, [pc, #268]	@ (8003104 <SystemInit+0x114>)
 8002ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffa:	4a42      	ldr	r2, [pc, #264]	@ (8003104 <SystemInit+0x114>)
 8002ffc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003000:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003004:	4b40      	ldr	r3, [pc, #256]	@ (8003108 <SystemInit+0x118>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	2b06      	cmp	r3, #6
 800300e:	d807      	bhi.n	8003020 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003010:	4b3d      	ldr	r3, [pc, #244]	@ (8003108 <SystemInit+0x118>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f023 030f 	bic.w	r3, r3, #15
 8003018:	4a3b      	ldr	r2, [pc, #236]	@ (8003108 <SystemInit+0x118>)
 800301a:	f043 0307 	orr.w	r3, r3, #7
 800301e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003020:	4b3a      	ldr	r3, [pc, #232]	@ (800310c <SystemInit+0x11c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a39      	ldr	r2, [pc, #228]	@ (800310c <SystemInit+0x11c>)
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800302c:	4b37      	ldr	r3, [pc, #220]	@ (800310c <SystemInit+0x11c>)
 800302e:	2200      	movs	r2, #0
 8003030:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003032:	4b36      	ldr	r3, [pc, #216]	@ (800310c <SystemInit+0x11c>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4935      	ldr	r1, [pc, #212]	@ (800310c <SystemInit+0x11c>)
 8003038:	4b35      	ldr	r3, [pc, #212]	@ (8003110 <SystemInit+0x120>)
 800303a:	4013      	ands	r3, r2
 800303c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800303e:	4b32      	ldr	r3, [pc, #200]	@ (8003108 <SystemInit+0x118>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d007      	beq.n	800305a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800304a:	4b2f      	ldr	r3, [pc, #188]	@ (8003108 <SystemInit+0x118>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 030f 	bic.w	r3, r3, #15
 8003052:	4a2d      	ldr	r2, [pc, #180]	@ (8003108 <SystemInit+0x118>)
 8003054:	f043 0307 	orr.w	r3, r3, #7
 8003058:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800305a:	4b2c      	ldr	r3, [pc, #176]	@ (800310c <SystemInit+0x11c>)
 800305c:	2200      	movs	r2, #0
 800305e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003060:	4b2a      	ldr	r3, [pc, #168]	@ (800310c <SystemInit+0x11c>)
 8003062:	2200      	movs	r2, #0
 8003064:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003066:	4b29      	ldr	r3, [pc, #164]	@ (800310c <SystemInit+0x11c>)
 8003068:	2200      	movs	r2, #0
 800306a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800306c:	4b27      	ldr	r3, [pc, #156]	@ (800310c <SystemInit+0x11c>)
 800306e:	4a29      	ldr	r2, [pc, #164]	@ (8003114 <SystemInit+0x124>)
 8003070:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003072:	4b26      	ldr	r3, [pc, #152]	@ (800310c <SystemInit+0x11c>)
 8003074:	4a28      	ldr	r2, [pc, #160]	@ (8003118 <SystemInit+0x128>)
 8003076:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003078:	4b24      	ldr	r3, [pc, #144]	@ (800310c <SystemInit+0x11c>)
 800307a:	4a28      	ldr	r2, [pc, #160]	@ (800311c <SystemInit+0x12c>)
 800307c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800307e:	4b23      	ldr	r3, [pc, #140]	@ (800310c <SystemInit+0x11c>)
 8003080:	2200      	movs	r2, #0
 8003082:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003084:	4b21      	ldr	r3, [pc, #132]	@ (800310c <SystemInit+0x11c>)
 8003086:	4a25      	ldr	r2, [pc, #148]	@ (800311c <SystemInit+0x12c>)
 8003088:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800308a:	4b20      	ldr	r3, [pc, #128]	@ (800310c <SystemInit+0x11c>)
 800308c:	2200      	movs	r2, #0
 800308e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003090:	4b1e      	ldr	r3, [pc, #120]	@ (800310c <SystemInit+0x11c>)
 8003092:	4a22      	ldr	r2, [pc, #136]	@ (800311c <SystemInit+0x12c>)
 8003094:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003096:	4b1d      	ldr	r3, [pc, #116]	@ (800310c <SystemInit+0x11c>)
 8003098:	2200      	movs	r2, #0
 800309a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800309c:	4b1b      	ldr	r3, [pc, #108]	@ (800310c <SystemInit+0x11c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a1a      	ldr	r2, [pc, #104]	@ (800310c <SystemInit+0x11c>)
 80030a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80030a8:	4b18      	ldr	r3, [pc, #96]	@ (800310c <SystemInit+0x11c>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80030ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003120 <SystemInit+0x130>)
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003124 <SystemInit+0x134>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030ba:	d202      	bcs.n	80030c2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80030bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003128 <SystemInit+0x138>)
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80030c2:	4b12      	ldr	r3, [pc, #72]	@ (800310c <SystemInit+0x11c>)
 80030c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80030c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d113      	bne.n	80030f8 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80030d0:	4b0e      	ldr	r3, [pc, #56]	@ (800310c <SystemInit+0x11c>)
 80030d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80030d6:	4a0d      	ldr	r2, [pc, #52]	@ (800310c <SystemInit+0x11c>)
 80030d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80030e0:	4b12      	ldr	r3, [pc, #72]	@ (800312c <SystemInit+0x13c>)
 80030e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80030e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80030e8:	4b08      	ldr	r3, [pc, #32]	@ (800310c <SystemInit+0x11c>)
 80030ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80030ee:	4a07      	ldr	r2, [pc, #28]	@ (800310c <SystemInit+0x11c>)
 80030f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80030f8:	bf00      	nop
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	e000ed00 	.word	0xe000ed00
 8003108:	52002000 	.word	0x52002000
 800310c:	58024400 	.word	0x58024400
 8003110:	eaf6ed7f 	.word	0xeaf6ed7f
 8003114:	02020200 	.word	0x02020200
 8003118:	01ff0000 	.word	0x01ff0000
 800311c:	01010280 	.word	0x01010280
 8003120:	5c001000 	.word	0x5c001000
 8003124:	ffff0000 	.word	0xffff0000
 8003128:	51008108 	.word	0x51008108
 800312c:	52004000 	.word	0x52004000

08003130 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8003134:	4b09      	ldr	r3, [pc, #36]	@ (800315c <ExitRun0Mode+0x2c>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4a08      	ldr	r2, [pc, #32]	@ (800315c <ExitRun0Mode+0x2c>)
 800313a:	f043 0302 	orr.w	r3, r3, #2
 800313e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8003140:	bf00      	nop
 8003142:	4b06      	ldr	r3, [pc, #24]	@ (800315c <ExitRun0Mode+0x2c>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f9      	beq.n	8003142 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800314e:	bf00      	nop
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	58024800 	.word	0x58024800

08003160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003160:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800319c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8003164:	f7ff ffe4 	bl	8003130 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003168:	f7ff ff42 	bl	8002ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800316c:	480c      	ldr	r0, [pc, #48]	@ (80031a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800316e:	490d      	ldr	r1, [pc, #52]	@ (80031a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003170:	4a0d      	ldr	r2, [pc, #52]	@ (80031a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003174:	e002      	b.n	800317c <LoopCopyDataInit>

08003176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800317a:	3304      	adds	r3, #4

0800317c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800317c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800317e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003180:	d3f9      	bcc.n	8003176 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003182:	4a0a      	ldr	r2, [pc, #40]	@ (80031ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003184:	4c0a      	ldr	r4, [pc, #40]	@ (80031b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003188:	e001      	b.n	800318e <LoopFillZerobss>

0800318a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800318a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800318c:	3204      	adds	r2, #4

0800318e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800318e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003190:	d3fb      	bcc.n	800318a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003192:	f016 f8a7 	bl	80192e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003196:	f7fd faa7 	bl	80006e8 <main>
  bx  lr
 800319a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800319c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80031a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80031a4:	240002e4 	.word	0x240002e4
  ldr r2, =_sidata
 80031a8:	0801ba3c 	.word	0x0801ba3c
  ldr r2, =_sbss
 80031ac:	240002e4 	.word	0x240002e4
  ldr r4, =_ebss
 80031b0:	24027aa4 	.word	0x24027aa4

080031b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031b4:	e7fe      	b.n	80031b4 <ADC3_IRQHandler>

080031b6 <INA229_ReadRegister>:
// ------------------------------------------------------------------------------------

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t INA229_ReadRegister(INA229_HandleTypeDef *ina229, uint8_t addr, uint8_t *pRead, uint8_t len) {
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b086      	sub	sp, #24
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	461a      	mov	r2, r3
 80031c2:	460b      	mov	r3, r1
 80031c4:	72fb      	strb	r3, [r7, #11]
 80031c6:	4613      	mov	r3, r2
 80031c8:	72bb      	strb	r3, [r7, #10]
	// A5 A4 A3 A2 A1 A0 XX RR
	uint8_t dataToWrite = (addr << 2) | 0b1;
 80031ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	b25b      	sxtb	r3, r3
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	b25b      	sxtb	r3, r3
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	75bb      	strb	r3, [r7, #22]
	uint8_t ret = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	75fb      	strb	r3, [r7, #23]

	// Assert the CS low
	HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_RESET);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6858      	ldr	r0, [r3, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	891b      	ldrh	r3, [r3, #8]
 80031e8:	2200      	movs	r2, #0
 80031ea:	4619      	mov	r1, r3
 80031ec:	f004 faac 	bl	8007748 <HAL_GPIO_WritePin>

	ret = HAL_SPI_Transmit(ina229->spi_handle, &dataToWrite, 1, 100);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	f107 0116 	add.w	r1, r7, #22
 80031f8:	2364      	movs	r3, #100	@ 0x64
 80031fa:	2201      	movs	r2, #1
 80031fc:	f00c fefe 	bl	800fffc <HAL_SPI_Transmit>
 8003200:	4603      	mov	r3, r0
 8003202:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 8003204:	7dfb      	ldrb	r3, [r7, #23]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d009      	beq.n	800321e <INA229_ReadRegister+0x68>
		// Release the CS
		HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_SET);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6858      	ldr	r0, [r3, #4]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	891b      	ldrh	r3, [r3, #8]
 8003212:	2201      	movs	r2, #1
 8003214:	4619      	mov	r1, r3
 8003216:	f004 fa97 	bl	8007748 <HAL_GPIO_WritePin>
		return ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e01f      	b.n	800325e <INA229_ReadRegister+0xa8>
	}

	ret = HAL_SPI_Receive(ina229->spi_handle, pRead, len, 100);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	7abb      	ldrb	r3, [r7, #10]
 8003224:	b29a      	uxth	r2, r3
 8003226:	2364      	movs	r3, #100	@ 0x64
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	f00d f8d5 	bl	80103d8 <HAL_SPI_Receive>
 800322e:	4603      	mov	r3, r0
 8003230:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 8003232:	7dfb      	ldrb	r3, [r7, #23]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d009      	beq.n	800324c <INA229_ReadRegister+0x96>
		// Release the CS
		HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_SET);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6858      	ldr	r0, [r3, #4]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	891b      	ldrh	r3, [r3, #8]
 8003240:	2201      	movs	r2, #1
 8003242:	4619      	mov	r1, r3
 8003244:	f004 fa80 	bl	8007748 <HAL_GPIO_WritePin>
		return  ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e008      	b.n	800325e <INA229_ReadRegister+0xa8>
	}

	// Release the CS
	HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_SET);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6858      	ldr	r0, [r3, #4]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	891b      	ldrh	r3, [r3, #8]
 8003254:	2201      	movs	r2, #1
 8003256:	4619      	mov	r1, r3
 8003258:	f004 fa76 	bl	8007748 <HAL_GPIO_WritePin>

	return SUCCESS;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <INA229_Init>:
	HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_SET);

	return SUCCESS;
}

uint8_t INA229_Init(INA229_HandleTypeDef *ina229) {
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
	// SHUNT_CAL = 0x1000 at start, this is correct for R_shunt of 0.002 OHMs

	//uint8_t readVal[2];
	//INA229_ReadRegister(ina229, 0x01, readVal, 2);

	return SUCCESS;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <Register24_Int32>:

uint32_t Register24_Int32(uint8_t* pData) {
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
	uint32_t out = 0;
 8003284:	2300      	movs	r3, #0
 8003286:	60fb      	str	r3, [r7, #12]
	// Switch endianess from result
	out |= (uint32_t)(pData[2]);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3302      	adds	r3, #2
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]
	out |= (uint32_t)(pData[1]) << 8;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3301      	adds	r3, #1
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	021b      	lsls	r3, r3, #8
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
	out |= (uint32_t)(pData[0]) << 16;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	041b      	lsls	r3, r3, #16
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]

	return out;
 80032b0:	68fb      	ldr	r3, [r7, #12]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <INA229_Get>:

uint8_t INA229_Get(INA229_HandleTypeDef *ina229) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	// Get all the power variables
	uint8_t ret = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	77fb      	strb	r3, [r7, #31]

	// ----- VOLTAGE ----- //

	// Get the VBUS register value, 24 bit
	uint8_t vbus_reg[3];
	ret = INA229_ReadRegister(ina229, 0x05, vbus_reg, 3);
 80032cc:	f107 020c 	add.w	r2, r7, #12
 80032d0:	2303      	movs	r3, #3
 80032d2:	2105      	movs	r1, #5
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7ff ff6e 	bl	80031b6 <INA229_ReadRegister>
 80032da:	4603      	mov	r3, r0
 80032dc:	77fb      	strb	r3, [r7, #31]

	// Covnert register raw to uint
	uint32_t vbus_raw = Register24_Int32(vbus_reg);
 80032de:	f107 030c 	add.w	r3, r7, #12
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff ffca 	bl	800327c <Register24_Int32>
 80032e8:	61b8      	str	r0, [r7, #24]
	vbus_raw >>= 4;	// Shift out the reserved bits
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	61bb      	str	r3, [r7, #24]

	// Conversion factor
	ina229->voltage = vbus_raw * 0.0001953125;
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	ee07 3a90 	vmov	s15, r3
 80032f6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80032fa:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8003378 <INA229_Get+0xb8>
 80032fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003302:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	edc3 7a03 	vstr	s15, [r3, #12]

	// ----- CURRENT ----- //

	// Get the VBUS register value, 24 bit
	uint8_t cur_reg[3];
	ret = INA229_ReadRegister(ina229, 0x07, cur_reg, 3);
 800330c:	f107 0208 	add.w	r2, r7, #8
 8003310:	2303      	movs	r3, #3
 8003312:	2107      	movs	r1, #7
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff ff4e 	bl	80031b6 <INA229_ReadRegister>
 800331a:	4603      	mov	r3, r0
 800331c:	77fb      	strb	r3, [r7, #31]

	// Covnert register raw to uint
	uint32_t cur_raw = Register24_Int32(cur_reg);
 800331e:	f107 0308 	add.w	r3, r7, #8
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff ffaa 	bl	800327c <Register24_Int32>
 8003328:	6178      	str	r0, [r7, #20]

	int32_t cur_signed = (cur_raw << 8) | 0b111111111111;	// Pad LSBs with 1's for 2's compliment to be acurate
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	021a      	lsls	r2, r3, #8
 800332e:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
	cur_signed /= 4096;										// Shift out the reserved bits while respecting negativity (equiv. >> 12)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	da01      	bge.n	8003340 <INA229_Get+0x80>
 800333c:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8003340:	131b      	asrs	r3, r3, #12
 8003342:	613b      	str	r3, [r7, #16]

	// Conversion factor
	ina229->current = cur_signed * 0.00015625;
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800334e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8003380 <INA229_Get+0xc0>
 8003352:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003356:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	edc3 7a04 	vstr	s15, [r3, #16]

	if (ret) return ret;
 8003360:	7ffb      	ldrb	r3, [r7, #31]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <INA229_Get+0xaa>
 8003366:	7ffb      	ldrb	r3, [r7, #31]
 8003368:	e7ff      	b.n	800336a <INA229_Get+0xaa>
}
 800336a:	4618      	mov	r0, r3
 800336c:	3720      	adds	r7, #32
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	f3af 8000 	nop.w
 8003378:	9999999a 	.word	0x9999999a
 800337c:	3f299999 	.word	0x3f299999
 8003380:	47ae147b 	.word	0x47ae147b
 8003384:	3f247ae1 	.word	0x3f247ae1

08003388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800338e:	2003      	movs	r0, #3
 8003390:	f000 f98c 	bl	80036ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003394:	f00a fd0c 	bl	800ddb0 <HAL_RCC_GetSysClockFreq>
 8003398:	4602      	mov	r2, r0
 800339a:	4b15      	ldr	r3, [pc, #84]	@ (80033f0 <HAL_Init+0x68>)
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	4913      	ldr	r1, [pc, #76]	@ (80033f4 <HAL_Init+0x6c>)
 80033a6:	5ccb      	ldrb	r3, [r1, r3]
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
 80033b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033b2:	4b0f      	ldr	r3, [pc, #60]	@ (80033f0 <HAL_Init+0x68>)
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	4a0e      	ldr	r2, [pc, #56]	@ (80033f4 <HAL_Init+0x6c>)
 80033bc:	5cd3      	ldrb	r3, [r2, r3]
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	fa22 f303 	lsr.w	r3, r2, r3
 80033c8:	4a0b      	ldr	r2, [pc, #44]	@ (80033f8 <HAL_Init+0x70>)
 80033ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033cc:	4a0b      	ldr	r2, [pc, #44]	@ (80033fc <HAL_Init+0x74>)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033d2:	200f      	movs	r0, #15
 80033d4:	f000 f814 	bl	8003400 <HAL_InitTick>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e002      	b.n	80033e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80033e2:	f7fe ff67 	bl	80022b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	58024400 	.word	0x58024400
 80033f4:	0801b3c0 	.word	0x0801b3c0
 80033f8:	2400001c 	.word	0x2400001c
 80033fc:	24000018 	.word	0x24000018

08003400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003408:	4b15      	ldr	r3, [pc, #84]	@ (8003460 <HAL_InitTick+0x60>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e021      	b.n	8003458 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003414:	4b13      	ldr	r3, [pc, #76]	@ (8003464 <HAL_InitTick+0x64>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4b11      	ldr	r3, [pc, #68]	@ (8003460 <HAL_InitTick+0x60>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	4619      	mov	r1, r3
 800341e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003422:	fbb3 f3f1 	udiv	r3, r3, r1
 8003426:	fbb2 f3f3 	udiv	r3, r2, r3
 800342a:	4618      	mov	r0, r3
 800342c:	f000 f971 	bl	8003712 <HAL_SYSTICK_Config>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e00e      	b.n	8003458 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b0f      	cmp	r3, #15
 800343e:	d80a      	bhi.n	8003456 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003440:	2200      	movs	r2, #0
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	f04f 30ff 	mov.w	r0, #4294967295
 8003448:	f000 f93b 	bl	80036c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800344c:	4a06      	ldr	r2, [pc, #24]	@ (8003468 <HAL_InitTick+0x68>)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	e000      	b.n	8003458 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
}
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	24000024 	.word	0x24000024
 8003464:	24000018 	.word	0x24000018
 8003468:	24000020 	.word	0x24000020

0800346c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003470:	4b06      	ldr	r3, [pc, #24]	@ (800348c <HAL_IncTick+0x20>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <HAL_IncTick+0x24>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4413      	add	r3, r2
 800347c:	4a04      	ldr	r2, [pc, #16]	@ (8003490 <HAL_IncTick+0x24>)
 800347e:	6013      	str	r3, [r2, #0]
}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	24000024 	.word	0x24000024
 8003490:	24025d6c 	.word	0x24025d6c

08003494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return uwTick;
 8003498:	4b03      	ldr	r3, [pc, #12]	@ (80034a8 <HAL_GetTick+0x14>)
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	24025d6c 	.word	0x24025d6c

080034ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034b4:	f7ff ffee 	bl	8003494 <HAL_GetTick>
 80034b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c4:	d005      	beq.n	80034d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034c6:	4b0a      	ldr	r3, [pc, #40]	@ (80034f0 <HAL_Delay+0x44>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4413      	add	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034d2:	bf00      	nop
 80034d4:	f7ff ffde 	bl	8003494 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d8f7      	bhi.n	80034d4 <HAL_Delay+0x28>
  {
  }
}
 80034e4:	bf00      	nop
 80034e6:	bf00      	nop
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	24000024 	.word	0x24000024

080034f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80034f8:	4b03      	ldr	r3, [pc, #12]	@ (8003508 <HAL_GetREVID+0x14>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	0c1b      	lsrs	r3, r3, #16
}
 80034fe:	4618      	mov	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	5c001000 	.word	0x5c001000

0800350c <__NVIC_SetPriorityGrouping>:
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800351c:	4b0b      	ldr	r3, [pc, #44]	@ (800354c <__NVIC_SetPriorityGrouping+0x40>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003528:	4013      	ands	r3, r2
 800352a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003534:	4b06      	ldr	r3, [pc, #24]	@ (8003550 <__NVIC_SetPriorityGrouping+0x44>)
 8003536:	4313      	orrs	r3, r2
 8003538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800353a:	4a04      	ldr	r2, [pc, #16]	@ (800354c <__NVIC_SetPriorityGrouping+0x40>)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	60d3      	str	r3, [r2, #12]
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000ed00 	.word	0xe000ed00
 8003550:	05fa0000 	.word	0x05fa0000

08003554 <__NVIC_GetPriorityGrouping>:
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003558:	4b04      	ldr	r3, [pc, #16]	@ (800356c <__NVIC_GetPriorityGrouping+0x18>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	0a1b      	lsrs	r3, r3, #8
 800355e:	f003 0307 	and.w	r3, r3, #7
}
 8003562:	4618      	mov	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <__NVIC_EnableIRQ>:
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800357a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800357e:	2b00      	cmp	r3, #0
 8003580:	db0b      	blt.n	800359a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003582:	88fb      	ldrh	r3, [r7, #6]
 8003584:	f003 021f 	and.w	r2, r3, #31
 8003588:	4907      	ldr	r1, [pc, #28]	@ (80035a8 <__NVIC_EnableIRQ+0x38>)
 800358a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	2001      	movs	r0, #1
 8003592:	fa00 f202 	lsl.w	r2, r0, r2
 8003596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	e000e100 	.word	0xe000e100

080035ac <__NVIC_SetPriority>:
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	6039      	str	r1, [r7, #0]
 80035b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80035b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	db0a      	blt.n	80035d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	490c      	ldr	r1, [pc, #48]	@ (80035f8 <__NVIC_SetPriority+0x4c>)
 80035c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035ca:	0112      	lsls	r2, r2, #4
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	440b      	add	r3, r1
 80035d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80035d4:	e00a      	b.n	80035ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	4908      	ldr	r1, [pc, #32]	@ (80035fc <__NVIC_SetPriority+0x50>)
 80035dc:	88fb      	ldrh	r3, [r7, #6]
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	3b04      	subs	r3, #4
 80035e4:	0112      	lsls	r2, r2, #4
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	440b      	add	r3, r1
 80035ea:	761a      	strb	r2, [r3, #24]
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	e000e100 	.word	0xe000e100
 80035fc:	e000ed00 	.word	0xe000ed00

08003600 <NVIC_EncodePriority>:
{
 8003600:	b480      	push	{r7}
 8003602:	b089      	sub	sp, #36	@ 0x24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f1c3 0307 	rsb	r3, r3, #7
 800361a:	2b04      	cmp	r3, #4
 800361c:	bf28      	it	cs
 800361e:	2304      	movcs	r3, #4
 8003620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3304      	adds	r3, #4
 8003626:	2b06      	cmp	r3, #6
 8003628:	d902      	bls.n	8003630 <NVIC_EncodePriority+0x30>
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	3b03      	subs	r3, #3
 800362e:	e000      	b.n	8003632 <NVIC_EncodePriority+0x32>
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003634:	f04f 32ff 	mov.w	r2, #4294967295
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43da      	mvns	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	401a      	ands	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003648:	f04f 31ff 	mov.w	r1, #4294967295
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	fa01 f303 	lsl.w	r3, r1, r3
 8003652:	43d9      	mvns	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003658:	4313      	orrs	r3, r2
}
 800365a:	4618      	mov	r0, r3
 800365c:	3724      	adds	r7, #36	@ 0x24
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3b01      	subs	r3, #1
 8003674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003678:	d301      	bcc.n	800367e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800367a:	2301      	movs	r3, #1
 800367c:	e00f      	b.n	800369e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800367e:	4a0a      	ldr	r2, [pc, #40]	@ (80036a8 <SysTick_Config+0x40>)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3b01      	subs	r3, #1
 8003684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003686:	210f      	movs	r1, #15
 8003688:	f04f 30ff 	mov.w	r0, #4294967295
 800368c:	f7ff ff8e 	bl	80035ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003690:	4b05      	ldr	r3, [pc, #20]	@ (80036a8 <SysTick_Config+0x40>)
 8003692:	2200      	movs	r2, #0
 8003694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003696:	4b04      	ldr	r3, [pc, #16]	@ (80036a8 <SysTick_Config+0x40>)
 8003698:	2207      	movs	r2, #7
 800369a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	e000e010 	.word	0xe000e010

080036ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff ff29 	bl	800350c <__NVIC_SetPriorityGrouping>
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b086      	sub	sp, #24
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	4603      	mov	r3, r0
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
 80036ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036d0:	f7ff ff40 	bl	8003554 <__NVIC_GetPriorityGrouping>
 80036d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	6978      	ldr	r0, [r7, #20]
 80036dc:	f7ff ff90 	bl	8003600 <NVIC_EncodePriority>
 80036e0:	4602      	mov	r2, r0
 80036e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ff5f 	bl	80035ac <__NVIC_SetPriority>
}
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	4603      	mov	r3, r0
 80036fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003700:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ff33 	bl	8003570 <__NVIC_EnableIRQ>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff ffa4 	bl	8003668 <SysTick_Config>
 8003720:	4603      	mov	r3, r0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003730:	f3bf 8f5f 	dmb	sy
}
 8003734:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003736:	4b07      	ldr	r3, [pc, #28]	@ (8003754 <HAL_MPU_Disable+0x28>)
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373a:	4a06      	ldr	r2, [pc, #24]	@ (8003754 <HAL_MPU_Disable+0x28>)
 800373c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003740:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003742:	4b05      	ldr	r3, [pc, #20]	@ (8003758 <HAL_MPU_Disable+0x2c>)
 8003744:	2200      	movs	r2, #0
 8003746:	605a      	str	r2, [r3, #4]
}
 8003748:	bf00      	nop
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	e000ed00 	.word	0xe000ed00
 8003758:	e000ed90 	.word	0xe000ed90

0800375c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003764:	4a0b      	ldr	r2, [pc, #44]	@ (8003794 <HAL_MPU_Enable+0x38>)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800376e:	4b0a      	ldr	r3, [pc, #40]	@ (8003798 <HAL_MPU_Enable+0x3c>)
 8003770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003772:	4a09      	ldr	r2, [pc, #36]	@ (8003798 <HAL_MPU_Enable+0x3c>)
 8003774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003778:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800377a:	f3bf 8f4f 	dsb	sy
}
 800377e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003780:	f3bf 8f6f 	isb	sy
}
 8003784:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	e000ed90 	.word	0xe000ed90
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	785a      	ldrb	r2, [r3, #1]
 80037a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003818 <HAL_MPU_ConfigRegion+0x7c>)
 80037aa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80037ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003818 <HAL_MPU_ConfigRegion+0x7c>)
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	4a19      	ldr	r2, [pc, #100]	@ (8003818 <HAL_MPU_ConfigRegion+0x7c>)
 80037b2:	f023 0301 	bic.w	r3, r3, #1
 80037b6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80037b8:	4a17      	ldr	r2, [pc, #92]	@ (8003818 <HAL_MPU_ConfigRegion+0x7c>)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	7b1b      	ldrb	r3, [r3, #12]
 80037c4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	7adb      	ldrb	r3, [r3, #11]
 80037ca:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80037cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	7a9b      	ldrb	r3, [r3, #10]
 80037d2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80037d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	7b5b      	ldrb	r3, [r3, #13]
 80037da:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80037dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	7b9b      	ldrb	r3, [r3, #14]
 80037e2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80037e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	7bdb      	ldrb	r3, [r3, #15]
 80037ea:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80037ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	7a5b      	ldrb	r3, [r3, #9]
 80037f2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80037f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7a1b      	ldrb	r3, [r3, #8]
 80037fa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80037fc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	7812      	ldrb	r2, [r2, #0]
 8003802:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003804:	4a04      	ldr	r2, [pc, #16]	@ (8003818 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003806:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003808:	6113      	str	r3, [r2, #16]
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	e000ed90 	.word	0xe000ed90

0800381c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e069      	b.n	8003902 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d102      	bne.n	8003840 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fe fd54 	bl	80022e8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6819      	ldr	r1, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	4b2a      	ldr	r3, [pc, #168]	@ (800390c <HAL_DCMI_Init+0xf0>)
 8003862:	400b      	ands	r3, r1
 8003864:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6819      	ldr	r1, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800387a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003886:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003892:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003898:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800389e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80038aa:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b10      	cmp	r3, #16
 80038ba:	d112      	bne.n	80038e2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	7f1b      	ldrb	r3, [r3, #28]
 80038c0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	7f5b      	ldrb	r3, [r3, #29]
 80038c6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80038c8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	7f9b      	ldrb	r3, [r3, #30]
 80038ce:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80038d0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	7fdb      	ldrb	r3, [r3, #31]
 80038d8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80038de:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80038e0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 021e 	orr.w	r2, r2, #30
 80038f0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	ffe0f007 	.word	0xffe0f007

08003910 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b088      	sub	sp, #32
 8003914:	af02      	add	r7, sp, #8
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
 800391c:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_DCMI_Start_DMA+0x1c>
 8003928:	2302      	movs	r3, #2
 800392a:	e0ab      	b.n	8003a84 <HAL_DCMI_Start_DMA+0x174>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800394a:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0202 	bic.w	r2, r2, #2
 800395a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6819      	ldr	r1, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	430a      	orrs	r2, r1
 800396a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003970:	4a46      	ldr	r2, [pc, #280]	@ (8003a8c <HAL_DCMI_Start_DMA+0x17c>)
 8003972:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003978:	4a45      	ldr	r2, [pc, #276]	@ (8003a90 <HAL_DCMI_Start_DMA+0x180>)
 800397a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003980:	2200      	movs	r2, #0
 8003982:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039a2:	d219      	bcs.n	80039d8 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3328      	adds	r3, #40	@ 0x28
 80039ae:	4619      	mov	r1, r3
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	f000 fd7a 	bl	80044ac <HAL_DMA_Start_IT>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d055      	beq.n	8003a6a <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2240      	movs	r2, #64	@ 0x40
 80039c2:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e055      	b.n	8003a84 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039dc:	4a2b      	ldr	r2, [pc, #172]	@ (8003a8c <HAL_DCMI_Start_DMA+0x17c>)
 80039de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 80039f2:	e009      	b.n	8003a08 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f8:	085a      	lsrs	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a02:	005a      	lsls	r2, r3, #1
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a10:	d2f0      	bcs.n	80039f4 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a16:	1e9a      	subs	r2, r3, #2
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3328      	adds	r3, #40	@ 0x28
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	f003 f81f 	bl	8006a88 <HAL_DMAEx_MultiBufferStart_IT>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00c      	beq.n	8003a6a <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2240      	movs	r2, #64	@ 0x40
 8003a54:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e00c      	b.n	8003a84 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 0201 	orr.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	08003c95 	.word	0x08003c95
 8003a90:	08003dbb 	.word	0x08003dbb

08003a94 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8003a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b4c <HAL_DCMI_Stop+0xb8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b50 <HAL_DCMI_Stop+0xbc>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	0a5b      	lsrs	r3, r3, #9
 8003aa8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003aac:	fb02 f303 	mul.w	r3, r2, r3
 8003ab0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_DCMI_Stop+0x30>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e03f      	b.n	8003b44 <HAL_DCMI_Stop+0xb0>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0201 	bic.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d108      	bne.n	8003b02 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af4:	f043 0220 	orr.w	r2, r3, #32
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	72fb      	strb	r3, [r7, #11]
      break;
 8003b00:	e006      	b.n	8003b10 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e9      	bne.n	8003ae4 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 ff2b 	bl	8004980 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 8003b42:	7afb      	ldrb	r3, [r7, #11]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	24000018 	.word	0x24000018
 8003b50:	10624dd3 	.word	0x10624dd3

08003b54 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d016      	beq.n	8003b9c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2204      	movs	r2, #4
 8003b74:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b7a:	f043 0202 	orr.w	r2, r3, #2
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2204      	movs	r2, #4
 8003b86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b8e:	4a31      	ldr	r2, [pc, #196]	@ (8003c54 <HAL_DCMI_IRQHandler+0x100>)
 8003b90:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b96:	4618      	mov	r0, r3
 8003b98:	f001 fa10 	bl	8004fbc <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d016      	beq.n	8003bd4 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2202      	movs	r2, #2
 8003bac:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bb2:	f043 0201 	orr.w	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc6:	4a23      	ldr	r2, [pc, #140]	@ (8003c54 <HAL_DCMI_IRQHandler+0x100>)
 8003bc8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f001 f9f4 	bl	8004fbc <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 0310 	and.w	r3, r3, #16
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d006      	beq.n	8003bec <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2210      	movs	r2, #16
 8003be4:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f840 	bl	8003c6c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d006      	beq.n	8003c04 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2208      	movs	r2, #8
 8003bfc:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fe f88c 	bl	8001d1c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01d      	beq.n	8003c4a <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d107      	bne.n	8003c2c <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 021e 	bic.w	r2, r2, #30
 8003c2a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0201 	bic.w	r2, r2, #1
 8003c3a:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2201      	movs	r2, #1
 8003c42:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f81b 	bl	8003c80 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8003c4a:	bf00      	nop
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	08003dbb 	.word	0x08003dbb

08003c58 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca0:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d043      	beq.n	8003d32 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cb6:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d118      	bne.n	8003cf6 <DCMI_DMAXferCplt+0x62>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d015      	beq.n	8003cf6 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cdc:	00da      	lsls	r2, r3, #3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	f003 fa2d 	bl	8007144 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cee:	1e5a      	subs	r2, r3, #1
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	639a      	str	r2, [r3, #56]	@ 0x38
 8003cf4:	e044      	b.n	8003d80 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d13c      	bne.n	8003d80 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d18:	00da      	lsls	r2, r3, #3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	2201      	movs	r2, #1
 8003d20:	4619      	mov	r1, r3
 8003d22:	f003 fa0f 	bl	8007144 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d2a:	1e5a      	subs	r2, r3, #1
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d30:	e026      	b.n	8003d80 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d006      	beq.n	8003d50 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003d4c:	60da      	str	r2, [r3, #12]
 8003d4e:	e017      	b.n	8003d80 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10f      	bne.n	8003d80 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d64:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6a:	0099      	lsls	r1, r3, #2
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	440a      	add	r2, r1
 8003d76:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d112      	bne.n	8003db2 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0201 	orr.w	r2, r2, #1
 8003d9a:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d103      	bne.n	8003db2 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8003db2:	bf00      	nop
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc6:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d009      	beq.n	8003de6 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f7ff ff36 	bl	8003c58 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8003dec:	bf00      	nop
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003dfc:	f7ff fb4a 	bl	8003494 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e316      	b.n	800443a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a66      	ldr	r2, [pc, #408]	@ (8003fac <HAL_DMA_Init+0x1b8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d04a      	beq.n	8003eac <HAL_DMA_Init+0xb8>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a65      	ldr	r2, [pc, #404]	@ (8003fb0 <HAL_DMA_Init+0x1bc>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d045      	beq.n	8003eac <HAL_DMA_Init+0xb8>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a63      	ldr	r2, [pc, #396]	@ (8003fb4 <HAL_DMA_Init+0x1c0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d040      	beq.n	8003eac <HAL_DMA_Init+0xb8>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a62      	ldr	r2, [pc, #392]	@ (8003fb8 <HAL_DMA_Init+0x1c4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d03b      	beq.n	8003eac <HAL_DMA_Init+0xb8>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a60      	ldr	r2, [pc, #384]	@ (8003fbc <HAL_DMA_Init+0x1c8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d036      	beq.n	8003eac <HAL_DMA_Init+0xb8>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a5f      	ldr	r2, [pc, #380]	@ (8003fc0 <HAL_DMA_Init+0x1cc>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d031      	beq.n	8003eac <HAL_DMA_Init+0xb8>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a5d      	ldr	r2, [pc, #372]	@ (8003fc4 <HAL_DMA_Init+0x1d0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d02c      	beq.n	8003eac <HAL_DMA_Init+0xb8>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a5c      	ldr	r2, [pc, #368]	@ (8003fc8 <HAL_DMA_Init+0x1d4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d027      	beq.n	8003eac <HAL_DMA_Init+0xb8>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a5a      	ldr	r2, [pc, #360]	@ (8003fcc <HAL_DMA_Init+0x1d8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d022      	beq.n	8003eac <HAL_DMA_Init+0xb8>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a59      	ldr	r2, [pc, #356]	@ (8003fd0 <HAL_DMA_Init+0x1dc>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d01d      	beq.n	8003eac <HAL_DMA_Init+0xb8>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a57      	ldr	r2, [pc, #348]	@ (8003fd4 <HAL_DMA_Init+0x1e0>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d018      	beq.n	8003eac <HAL_DMA_Init+0xb8>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a56      	ldr	r2, [pc, #344]	@ (8003fd8 <HAL_DMA_Init+0x1e4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d013      	beq.n	8003eac <HAL_DMA_Init+0xb8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a54      	ldr	r2, [pc, #336]	@ (8003fdc <HAL_DMA_Init+0x1e8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00e      	beq.n	8003eac <HAL_DMA_Init+0xb8>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a53      	ldr	r2, [pc, #332]	@ (8003fe0 <HAL_DMA_Init+0x1ec>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d009      	beq.n	8003eac <HAL_DMA_Init+0xb8>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a51      	ldr	r2, [pc, #324]	@ (8003fe4 <HAL_DMA_Init+0x1f0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d004      	beq.n	8003eac <HAL_DMA_Init+0xb8>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a50      	ldr	r2, [pc, #320]	@ (8003fe8 <HAL_DMA_Init+0x1f4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d101      	bne.n	8003eb0 <HAL_DMA_Init+0xbc>
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <HAL_DMA_Init+0xbe>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 813b 	beq.w	800412e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a37      	ldr	r2, [pc, #220]	@ (8003fac <HAL_DMA_Init+0x1b8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d04a      	beq.n	8003f68 <HAL_DMA_Init+0x174>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a36      	ldr	r2, [pc, #216]	@ (8003fb0 <HAL_DMA_Init+0x1bc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d045      	beq.n	8003f68 <HAL_DMA_Init+0x174>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a34      	ldr	r2, [pc, #208]	@ (8003fb4 <HAL_DMA_Init+0x1c0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d040      	beq.n	8003f68 <HAL_DMA_Init+0x174>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a33      	ldr	r2, [pc, #204]	@ (8003fb8 <HAL_DMA_Init+0x1c4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d03b      	beq.n	8003f68 <HAL_DMA_Init+0x174>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a31      	ldr	r2, [pc, #196]	@ (8003fbc <HAL_DMA_Init+0x1c8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d036      	beq.n	8003f68 <HAL_DMA_Init+0x174>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a30      	ldr	r2, [pc, #192]	@ (8003fc0 <HAL_DMA_Init+0x1cc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d031      	beq.n	8003f68 <HAL_DMA_Init+0x174>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a2e      	ldr	r2, [pc, #184]	@ (8003fc4 <HAL_DMA_Init+0x1d0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d02c      	beq.n	8003f68 <HAL_DMA_Init+0x174>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a2d      	ldr	r2, [pc, #180]	@ (8003fc8 <HAL_DMA_Init+0x1d4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d027      	beq.n	8003f68 <HAL_DMA_Init+0x174>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8003fcc <HAL_DMA_Init+0x1d8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d022      	beq.n	8003f68 <HAL_DMA_Init+0x174>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a2a      	ldr	r2, [pc, #168]	@ (8003fd0 <HAL_DMA_Init+0x1dc>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d01d      	beq.n	8003f68 <HAL_DMA_Init+0x174>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a28      	ldr	r2, [pc, #160]	@ (8003fd4 <HAL_DMA_Init+0x1e0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d018      	beq.n	8003f68 <HAL_DMA_Init+0x174>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a27      	ldr	r2, [pc, #156]	@ (8003fd8 <HAL_DMA_Init+0x1e4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d013      	beq.n	8003f68 <HAL_DMA_Init+0x174>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a25      	ldr	r2, [pc, #148]	@ (8003fdc <HAL_DMA_Init+0x1e8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00e      	beq.n	8003f68 <HAL_DMA_Init+0x174>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a24      	ldr	r2, [pc, #144]	@ (8003fe0 <HAL_DMA_Init+0x1ec>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d009      	beq.n	8003f68 <HAL_DMA_Init+0x174>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a22      	ldr	r2, [pc, #136]	@ (8003fe4 <HAL_DMA_Init+0x1f0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d004      	beq.n	8003f68 <HAL_DMA_Init+0x174>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a21      	ldr	r2, [pc, #132]	@ (8003fe8 <HAL_DMA_Init+0x1f4>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d108      	bne.n	8003f7a <HAL_DMA_Init+0x186>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	e007      	b.n	8003f8a <HAL_DMA_Init+0x196>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0201 	bic.w	r2, r2, #1
 8003f88:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f8a:	e02f      	b.n	8003fec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f8c:	f7ff fa82 	bl	8003494 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b05      	cmp	r3, #5
 8003f98:	d928      	bls.n	8003fec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e246      	b.n	800443a <HAL_DMA_Init+0x646>
 8003fac:	40020010 	.word	0x40020010
 8003fb0:	40020028 	.word	0x40020028
 8003fb4:	40020040 	.word	0x40020040
 8003fb8:	40020058 	.word	0x40020058
 8003fbc:	40020070 	.word	0x40020070
 8003fc0:	40020088 	.word	0x40020088
 8003fc4:	400200a0 	.word	0x400200a0
 8003fc8:	400200b8 	.word	0x400200b8
 8003fcc:	40020410 	.word	0x40020410
 8003fd0:	40020428 	.word	0x40020428
 8003fd4:	40020440 	.word	0x40020440
 8003fd8:	40020458 	.word	0x40020458
 8003fdc:	40020470 	.word	0x40020470
 8003fe0:	40020488 	.word	0x40020488
 8003fe4:	400204a0 	.word	0x400204a0
 8003fe8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1c8      	bne.n	8003f8c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4b83      	ldr	r3, [pc, #524]	@ (8004214 <HAL_DMA_Init+0x420>)
 8004006:	4013      	ands	r3, r2
 8004008:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004012:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800401e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800402a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403c:	2b04      	cmp	r3, #4
 800403e:	d107      	bne.n	8004050 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004048:	4313      	orrs	r3, r2
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004050:	4b71      	ldr	r3, [pc, #452]	@ (8004218 <HAL_DMA_Init+0x424>)
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	4b71      	ldr	r3, [pc, #452]	@ (800421c <HAL_DMA_Init+0x428>)
 8004056:	4013      	ands	r3, r2
 8004058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800405c:	d328      	bcc.n	80040b0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b28      	cmp	r3, #40	@ 0x28
 8004064:	d903      	bls.n	800406e <HAL_DMA_Init+0x27a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b2e      	cmp	r3, #46	@ 0x2e
 800406c:	d917      	bls.n	800409e <HAL_DMA_Init+0x2aa>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b3e      	cmp	r3, #62	@ 0x3e
 8004074:	d903      	bls.n	800407e <HAL_DMA_Init+0x28a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b42      	cmp	r3, #66	@ 0x42
 800407c:	d90f      	bls.n	800409e <HAL_DMA_Init+0x2aa>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b46      	cmp	r3, #70	@ 0x46
 8004084:	d903      	bls.n	800408e <HAL_DMA_Init+0x29a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b48      	cmp	r3, #72	@ 0x48
 800408c:	d907      	bls.n	800409e <HAL_DMA_Init+0x2aa>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b4e      	cmp	r3, #78	@ 0x4e
 8004094:	d905      	bls.n	80040a2 <HAL_DMA_Init+0x2ae>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b52      	cmp	r3, #82	@ 0x52
 800409c:	d801      	bhi.n	80040a2 <HAL_DMA_Init+0x2ae>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <HAL_DMA_Init+0x2b0>
 80040a2:	2300      	movs	r3, #0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040ae:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f023 0307 	bic.w	r3, r3, #7
 80040c6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d117      	bne.n	800410a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00e      	beq.n	800410a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f002 fb41 	bl	8006774 <DMA_CheckFifoParam>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2240      	movs	r2, #64	@ 0x40
 80040fc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e197      	b.n	800443a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f002 fa7c 	bl	8006610 <DMA_CalcBaseAndBitshift>
 8004118:	4603      	mov	r3, r0
 800411a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	223f      	movs	r2, #63	@ 0x3f
 8004126:	409a      	lsls	r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	609a      	str	r2, [r3, #8]
 800412c:	e0cd      	b.n	80042ca <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a3b      	ldr	r2, [pc, #236]	@ (8004220 <HAL_DMA_Init+0x42c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d022      	beq.n	800417e <HAL_DMA_Init+0x38a>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a39      	ldr	r2, [pc, #228]	@ (8004224 <HAL_DMA_Init+0x430>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d01d      	beq.n	800417e <HAL_DMA_Init+0x38a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a38      	ldr	r2, [pc, #224]	@ (8004228 <HAL_DMA_Init+0x434>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d018      	beq.n	800417e <HAL_DMA_Init+0x38a>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a36      	ldr	r2, [pc, #216]	@ (800422c <HAL_DMA_Init+0x438>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d013      	beq.n	800417e <HAL_DMA_Init+0x38a>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a35      	ldr	r2, [pc, #212]	@ (8004230 <HAL_DMA_Init+0x43c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00e      	beq.n	800417e <HAL_DMA_Init+0x38a>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a33      	ldr	r2, [pc, #204]	@ (8004234 <HAL_DMA_Init+0x440>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d009      	beq.n	800417e <HAL_DMA_Init+0x38a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a32      	ldr	r2, [pc, #200]	@ (8004238 <HAL_DMA_Init+0x444>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d004      	beq.n	800417e <HAL_DMA_Init+0x38a>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a30      	ldr	r2, [pc, #192]	@ (800423c <HAL_DMA_Init+0x448>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d101      	bne.n	8004182 <HAL_DMA_Init+0x38e>
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <HAL_DMA_Init+0x390>
 8004182:	2300      	movs	r3, #0
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 8097 	beq.w	80042b8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a24      	ldr	r2, [pc, #144]	@ (8004220 <HAL_DMA_Init+0x42c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d021      	beq.n	80041d8 <HAL_DMA_Init+0x3e4>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a22      	ldr	r2, [pc, #136]	@ (8004224 <HAL_DMA_Init+0x430>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d01c      	beq.n	80041d8 <HAL_DMA_Init+0x3e4>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a21      	ldr	r2, [pc, #132]	@ (8004228 <HAL_DMA_Init+0x434>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d017      	beq.n	80041d8 <HAL_DMA_Init+0x3e4>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a1f      	ldr	r2, [pc, #124]	@ (800422c <HAL_DMA_Init+0x438>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d012      	beq.n	80041d8 <HAL_DMA_Init+0x3e4>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004230 <HAL_DMA_Init+0x43c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00d      	beq.n	80041d8 <HAL_DMA_Init+0x3e4>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004234 <HAL_DMA_Init+0x440>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d008      	beq.n	80041d8 <HAL_DMA_Init+0x3e4>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004238 <HAL_DMA_Init+0x444>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d003      	beq.n	80041d8 <HAL_DMA_Init+0x3e4>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a19      	ldr	r2, [pc, #100]	@ (800423c <HAL_DMA_Init+0x448>)
 80041d6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	4b13      	ldr	r3, [pc, #76]	@ (8004240 <HAL_DMA_Init+0x44c>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2b40      	cmp	r3, #64	@ 0x40
 80041fe:	d021      	beq.n	8004244 <HAL_DMA_Init+0x450>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b80      	cmp	r3, #128	@ 0x80
 8004206:	d102      	bne.n	800420e <HAL_DMA_Init+0x41a>
 8004208:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800420c:	e01b      	b.n	8004246 <HAL_DMA_Init+0x452>
 800420e:	2300      	movs	r3, #0
 8004210:	e019      	b.n	8004246 <HAL_DMA_Init+0x452>
 8004212:	bf00      	nop
 8004214:	fe10803f 	.word	0xfe10803f
 8004218:	5c001000 	.word	0x5c001000
 800421c:	ffff0000 	.word	0xffff0000
 8004220:	58025408 	.word	0x58025408
 8004224:	5802541c 	.word	0x5802541c
 8004228:	58025430 	.word	0x58025430
 800422c:	58025444 	.word	0x58025444
 8004230:	58025458 	.word	0x58025458
 8004234:	5802546c 	.word	0x5802546c
 8004238:	58025480 	.word	0x58025480
 800423c:	58025494 	.word	0x58025494
 8004240:	fffe000f 	.word	0xfffe000f
 8004244:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	68d2      	ldr	r2, [r2, #12]
 800424a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800424c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004254:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800425c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004264:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800426c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004274:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	4b6e      	ldr	r3, [pc, #440]	@ (8004444 <HAL_DMA_Init+0x650>)
 800428c:	4413      	add	r3, r2
 800428e:	4a6e      	ldr	r2, [pc, #440]	@ (8004448 <HAL_DMA_Init+0x654>)
 8004290:	fba2 2303 	umull	r2, r3, r2, r3
 8004294:	091b      	lsrs	r3, r3, #4
 8004296:	009a      	lsls	r2, r3, #2
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f002 f9b7 	bl	8006610 <DMA_CalcBaseAndBitshift>
 80042a2:	4603      	mov	r3, r0
 80042a4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	2201      	movs	r2, #1
 80042b0:	409a      	lsls	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	605a      	str	r2, [r3, #4]
 80042b6:	e008      	b.n	80042ca <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2240      	movs	r2, #64	@ 0x40
 80042bc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2203      	movs	r2, #3
 80042c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e0b7      	b.n	800443a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a5f      	ldr	r2, [pc, #380]	@ (800444c <HAL_DMA_Init+0x658>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d072      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a5d      	ldr	r2, [pc, #372]	@ (8004450 <HAL_DMA_Init+0x65c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d06d      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a5c      	ldr	r2, [pc, #368]	@ (8004454 <HAL_DMA_Init+0x660>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d068      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a5a      	ldr	r2, [pc, #360]	@ (8004458 <HAL_DMA_Init+0x664>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d063      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a59      	ldr	r2, [pc, #356]	@ (800445c <HAL_DMA_Init+0x668>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d05e      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a57      	ldr	r2, [pc, #348]	@ (8004460 <HAL_DMA_Init+0x66c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d059      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a56      	ldr	r2, [pc, #344]	@ (8004464 <HAL_DMA_Init+0x670>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d054      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a54      	ldr	r2, [pc, #336]	@ (8004468 <HAL_DMA_Init+0x674>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d04f      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a53      	ldr	r2, [pc, #332]	@ (800446c <HAL_DMA_Init+0x678>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d04a      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a51      	ldr	r2, [pc, #324]	@ (8004470 <HAL_DMA_Init+0x67c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d045      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a50      	ldr	r2, [pc, #320]	@ (8004474 <HAL_DMA_Init+0x680>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d040      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a4e      	ldr	r2, [pc, #312]	@ (8004478 <HAL_DMA_Init+0x684>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d03b      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a4d      	ldr	r2, [pc, #308]	@ (800447c <HAL_DMA_Init+0x688>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d036      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a4b      	ldr	r2, [pc, #300]	@ (8004480 <HAL_DMA_Init+0x68c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d031      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a4a      	ldr	r2, [pc, #296]	@ (8004484 <HAL_DMA_Init+0x690>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d02c      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a48      	ldr	r2, [pc, #288]	@ (8004488 <HAL_DMA_Init+0x694>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d027      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a47      	ldr	r2, [pc, #284]	@ (800448c <HAL_DMA_Init+0x698>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d022      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a45      	ldr	r2, [pc, #276]	@ (8004490 <HAL_DMA_Init+0x69c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d01d      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a44      	ldr	r2, [pc, #272]	@ (8004494 <HAL_DMA_Init+0x6a0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d018      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a42      	ldr	r2, [pc, #264]	@ (8004498 <HAL_DMA_Init+0x6a4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a41      	ldr	r2, [pc, #260]	@ (800449c <HAL_DMA_Init+0x6a8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00e      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a3f      	ldr	r2, [pc, #252]	@ (80044a0 <HAL_DMA_Init+0x6ac>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d009      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a3e      	ldr	r2, [pc, #248]	@ (80044a4 <HAL_DMA_Init+0x6b0>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d004      	beq.n	80043ba <HAL_DMA_Init+0x5c6>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a3c      	ldr	r2, [pc, #240]	@ (80044a8 <HAL_DMA_Init+0x6b4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d101      	bne.n	80043be <HAL_DMA_Init+0x5ca>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <HAL_DMA_Init+0x5cc>
 80043be:	2300      	movs	r3, #0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d032      	beq.n	800442a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f002 fa51 	bl	800686c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b80      	cmp	r3, #128	@ 0x80
 80043d0:	d102      	bne.n	80043d8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80043ec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d010      	beq.n	8004418 <HAL_DMA_Init+0x624>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b08      	cmp	r3, #8
 80043fc:	d80c      	bhi.n	8004418 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f002 face 	bl	80069a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004414:	605a      	str	r2, [r3, #4]
 8004416:	e008      	b.n	800442a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	a7fdabf8 	.word	0xa7fdabf8
 8004448:	cccccccd 	.word	0xcccccccd
 800444c:	40020010 	.word	0x40020010
 8004450:	40020028 	.word	0x40020028
 8004454:	40020040 	.word	0x40020040
 8004458:	40020058 	.word	0x40020058
 800445c:	40020070 	.word	0x40020070
 8004460:	40020088 	.word	0x40020088
 8004464:	400200a0 	.word	0x400200a0
 8004468:	400200b8 	.word	0x400200b8
 800446c:	40020410 	.word	0x40020410
 8004470:	40020428 	.word	0x40020428
 8004474:	40020440 	.word	0x40020440
 8004478:	40020458 	.word	0x40020458
 800447c:	40020470 	.word	0x40020470
 8004480:	40020488 	.word	0x40020488
 8004484:	400204a0 	.word	0x400204a0
 8004488:	400204b8 	.word	0x400204b8
 800448c:	58025408 	.word	0x58025408
 8004490:	5802541c 	.word	0x5802541c
 8004494:	58025430 	.word	0x58025430
 8004498:	58025444 	.word	0x58025444
 800449c:	58025458 	.word	0x58025458
 80044a0:	5802546c 	.word	0x5802546c
 80044a4:	58025480 	.word	0x58025480
 80044a8:	58025494 	.word	0x58025494

080044ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e226      	b.n	8004916 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_DMA_Start_IT+0x2a>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e21f      	b.n	8004916 <HAL_DMA_Start_IT+0x46a>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	f040 820a 	bne.w	8004900 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a68      	ldr	r2, [pc, #416]	@ (80046a0 <HAL_DMA_Start_IT+0x1f4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d04a      	beq.n	800459a <HAL_DMA_Start_IT+0xee>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a66      	ldr	r2, [pc, #408]	@ (80046a4 <HAL_DMA_Start_IT+0x1f8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d045      	beq.n	800459a <HAL_DMA_Start_IT+0xee>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a65      	ldr	r2, [pc, #404]	@ (80046a8 <HAL_DMA_Start_IT+0x1fc>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d040      	beq.n	800459a <HAL_DMA_Start_IT+0xee>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a63      	ldr	r2, [pc, #396]	@ (80046ac <HAL_DMA_Start_IT+0x200>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d03b      	beq.n	800459a <HAL_DMA_Start_IT+0xee>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a62      	ldr	r2, [pc, #392]	@ (80046b0 <HAL_DMA_Start_IT+0x204>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d036      	beq.n	800459a <HAL_DMA_Start_IT+0xee>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a60      	ldr	r2, [pc, #384]	@ (80046b4 <HAL_DMA_Start_IT+0x208>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d031      	beq.n	800459a <HAL_DMA_Start_IT+0xee>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a5f      	ldr	r2, [pc, #380]	@ (80046b8 <HAL_DMA_Start_IT+0x20c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d02c      	beq.n	800459a <HAL_DMA_Start_IT+0xee>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a5d      	ldr	r2, [pc, #372]	@ (80046bc <HAL_DMA_Start_IT+0x210>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d027      	beq.n	800459a <HAL_DMA_Start_IT+0xee>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a5c      	ldr	r2, [pc, #368]	@ (80046c0 <HAL_DMA_Start_IT+0x214>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d022      	beq.n	800459a <HAL_DMA_Start_IT+0xee>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a5a      	ldr	r2, [pc, #360]	@ (80046c4 <HAL_DMA_Start_IT+0x218>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d01d      	beq.n	800459a <HAL_DMA_Start_IT+0xee>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a59      	ldr	r2, [pc, #356]	@ (80046c8 <HAL_DMA_Start_IT+0x21c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d018      	beq.n	800459a <HAL_DMA_Start_IT+0xee>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a57      	ldr	r2, [pc, #348]	@ (80046cc <HAL_DMA_Start_IT+0x220>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d013      	beq.n	800459a <HAL_DMA_Start_IT+0xee>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a56      	ldr	r2, [pc, #344]	@ (80046d0 <HAL_DMA_Start_IT+0x224>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00e      	beq.n	800459a <HAL_DMA_Start_IT+0xee>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a54      	ldr	r2, [pc, #336]	@ (80046d4 <HAL_DMA_Start_IT+0x228>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d009      	beq.n	800459a <HAL_DMA_Start_IT+0xee>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a53      	ldr	r2, [pc, #332]	@ (80046d8 <HAL_DMA_Start_IT+0x22c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d004      	beq.n	800459a <HAL_DMA_Start_IT+0xee>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a51      	ldr	r2, [pc, #324]	@ (80046dc <HAL_DMA_Start_IT+0x230>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d108      	bne.n	80045ac <HAL_DMA_Start_IT+0x100>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0201 	bic.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	e007      	b.n	80045bc <HAL_DMA_Start_IT+0x110>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0201 	bic.w	r2, r2, #1
 80045ba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	68b9      	ldr	r1, [r7, #8]
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f001 fe78 	bl	80062b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a34      	ldr	r2, [pc, #208]	@ (80046a0 <HAL_DMA_Start_IT+0x1f4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d04a      	beq.n	8004668 <HAL_DMA_Start_IT+0x1bc>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a33      	ldr	r2, [pc, #204]	@ (80046a4 <HAL_DMA_Start_IT+0x1f8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d045      	beq.n	8004668 <HAL_DMA_Start_IT+0x1bc>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a31      	ldr	r2, [pc, #196]	@ (80046a8 <HAL_DMA_Start_IT+0x1fc>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d040      	beq.n	8004668 <HAL_DMA_Start_IT+0x1bc>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a30      	ldr	r2, [pc, #192]	@ (80046ac <HAL_DMA_Start_IT+0x200>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d03b      	beq.n	8004668 <HAL_DMA_Start_IT+0x1bc>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a2e      	ldr	r2, [pc, #184]	@ (80046b0 <HAL_DMA_Start_IT+0x204>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d036      	beq.n	8004668 <HAL_DMA_Start_IT+0x1bc>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a2d      	ldr	r2, [pc, #180]	@ (80046b4 <HAL_DMA_Start_IT+0x208>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d031      	beq.n	8004668 <HAL_DMA_Start_IT+0x1bc>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a2b      	ldr	r2, [pc, #172]	@ (80046b8 <HAL_DMA_Start_IT+0x20c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d02c      	beq.n	8004668 <HAL_DMA_Start_IT+0x1bc>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a2a      	ldr	r2, [pc, #168]	@ (80046bc <HAL_DMA_Start_IT+0x210>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d027      	beq.n	8004668 <HAL_DMA_Start_IT+0x1bc>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a28      	ldr	r2, [pc, #160]	@ (80046c0 <HAL_DMA_Start_IT+0x214>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d022      	beq.n	8004668 <HAL_DMA_Start_IT+0x1bc>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a27      	ldr	r2, [pc, #156]	@ (80046c4 <HAL_DMA_Start_IT+0x218>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d01d      	beq.n	8004668 <HAL_DMA_Start_IT+0x1bc>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a25      	ldr	r2, [pc, #148]	@ (80046c8 <HAL_DMA_Start_IT+0x21c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d018      	beq.n	8004668 <HAL_DMA_Start_IT+0x1bc>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a24      	ldr	r2, [pc, #144]	@ (80046cc <HAL_DMA_Start_IT+0x220>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d013      	beq.n	8004668 <HAL_DMA_Start_IT+0x1bc>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a22      	ldr	r2, [pc, #136]	@ (80046d0 <HAL_DMA_Start_IT+0x224>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d00e      	beq.n	8004668 <HAL_DMA_Start_IT+0x1bc>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a21      	ldr	r2, [pc, #132]	@ (80046d4 <HAL_DMA_Start_IT+0x228>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d009      	beq.n	8004668 <HAL_DMA_Start_IT+0x1bc>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a1f      	ldr	r2, [pc, #124]	@ (80046d8 <HAL_DMA_Start_IT+0x22c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d004      	beq.n	8004668 <HAL_DMA_Start_IT+0x1bc>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a1e      	ldr	r2, [pc, #120]	@ (80046dc <HAL_DMA_Start_IT+0x230>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d101      	bne.n	800466c <HAL_DMA_Start_IT+0x1c0>
 8004668:	2301      	movs	r3, #1
 800466a:	e000      	b.n	800466e <HAL_DMA_Start_IT+0x1c2>
 800466c:	2300      	movs	r3, #0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d036      	beq.n	80046e0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f023 021e 	bic.w	r2, r3, #30
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0216 	orr.w	r2, r2, #22
 8004684:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d03e      	beq.n	800470c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f042 0208 	orr.w	r2, r2, #8
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	e035      	b.n	800470c <HAL_DMA_Start_IT+0x260>
 80046a0:	40020010 	.word	0x40020010
 80046a4:	40020028 	.word	0x40020028
 80046a8:	40020040 	.word	0x40020040
 80046ac:	40020058 	.word	0x40020058
 80046b0:	40020070 	.word	0x40020070
 80046b4:	40020088 	.word	0x40020088
 80046b8:	400200a0 	.word	0x400200a0
 80046bc:	400200b8 	.word	0x400200b8
 80046c0:	40020410 	.word	0x40020410
 80046c4:	40020428 	.word	0x40020428
 80046c8:	40020440 	.word	0x40020440
 80046cc:	40020458 	.word	0x40020458
 80046d0:	40020470 	.word	0x40020470
 80046d4:	40020488 	.word	0x40020488
 80046d8:	400204a0 	.word	0x400204a0
 80046dc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f023 020e 	bic.w	r2, r3, #14
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 020a 	orr.w	r2, r2, #10
 80046f2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d007      	beq.n	800470c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0204 	orr.w	r2, r2, #4
 800470a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a83      	ldr	r2, [pc, #524]	@ (8004920 <HAL_DMA_Start_IT+0x474>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d072      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a82      	ldr	r2, [pc, #520]	@ (8004924 <HAL_DMA_Start_IT+0x478>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d06d      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a80      	ldr	r2, [pc, #512]	@ (8004928 <HAL_DMA_Start_IT+0x47c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d068      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a7f      	ldr	r2, [pc, #508]	@ (800492c <HAL_DMA_Start_IT+0x480>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d063      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a7d      	ldr	r2, [pc, #500]	@ (8004930 <HAL_DMA_Start_IT+0x484>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d05e      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a7c      	ldr	r2, [pc, #496]	@ (8004934 <HAL_DMA_Start_IT+0x488>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d059      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a7a      	ldr	r2, [pc, #488]	@ (8004938 <HAL_DMA_Start_IT+0x48c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d054      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a79      	ldr	r2, [pc, #484]	@ (800493c <HAL_DMA_Start_IT+0x490>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d04f      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a77      	ldr	r2, [pc, #476]	@ (8004940 <HAL_DMA_Start_IT+0x494>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d04a      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a76      	ldr	r2, [pc, #472]	@ (8004944 <HAL_DMA_Start_IT+0x498>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d045      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a74      	ldr	r2, [pc, #464]	@ (8004948 <HAL_DMA_Start_IT+0x49c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d040      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a73      	ldr	r2, [pc, #460]	@ (800494c <HAL_DMA_Start_IT+0x4a0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d03b      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a71      	ldr	r2, [pc, #452]	@ (8004950 <HAL_DMA_Start_IT+0x4a4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d036      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a70      	ldr	r2, [pc, #448]	@ (8004954 <HAL_DMA_Start_IT+0x4a8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d031      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a6e      	ldr	r2, [pc, #440]	@ (8004958 <HAL_DMA_Start_IT+0x4ac>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d02c      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a6d      	ldr	r2, [pc, #436]	@ (800495c <HAL_DMA_Start_IT+0x4b0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d027      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a6b      	ldr	r2, [pc, #428]	@ (8004960 <HAL_DMA_Start_IT+0x4b4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d022      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a6a      	ldr	r2, [pc, #424]	@ (8004964 <HAL_DMA_Start_IT+0x4b8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d01d      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a68      	ldr	r2, [pc, #416]	@ (8004968 <HAL_DMA_Start_IT+0x4bc>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d018      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a67      	ldr	r2, [pc, #412]	@ (800496c <HAL_DMA_Start_IT+0x4c0>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d013      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a65      	ldr	r2, [pc, #404]	@ (8004970 <HAL_DMA_Start_IT+0x4c4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00e      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a64      	ldr	r2, [pc, #400]	@ (8004974 <HAL_DMA_Start_IT+0x4c8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d009      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a62      	ldr	r2, [pc, #392]	@ (8004978 <HAL_DMA_Start_IT+0x4cc>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d004      	beq.n	80047fc <HAL_DMA_Start_IT+0x350>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a61      	ldr	r2, [pc, #388]	@ (800497c <HAL_DMA_Start_IT+0x4d0>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d101      	bne.n	8004800 <HAL_DMA_Start_IT+0x354>
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <HAL_DMA_Start_IT+0x356>
 8004800:	2300      	movs	r3, #0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d01a      	beq.n	800483c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004822:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004828:	2b00      	cmp	r3, #0
 800482a:	d007      	beq.n	800483c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004836:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800483a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a37      	ldr	r2, [pc, #220]	@ (8004920 <HAL_DMA_Start_IT+0x474>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d04a      	beq.n	80048dc <HAL_DMA_Start_IT+0x430>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a36      	ldr	r2, [pc, #216]	@ (8004924 <HAL_DMA_Start_IT+0x478>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d045      	beq.n	80048dc <HAL_DMA_Start_IT+0x430>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a34      	ldr	r2, [pc, #208]	@ (8004928 <HAL_DMA_Start_IT+0x47c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d040      	beq.n	80048dc <HAL_DMA_Start_IT+0x430>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a33      	ldr	r2, [pc, #204]	@ (800492c <HAL_DMA_Start_IT+0x480>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d03b      	beq.n	80048dc <HAL_DMA_Start_IT+0x430>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a31      	ldr	r2, [pc, #196]	@ (8004930 <HAL_DMA_Start_IT+0x484>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d036      	beq.n	80048dc <HAL_DMA_Start_IT+0x430>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a30      	ldr	r2, [pc, #192]	@ (8004934 <HAL_DMA_Start_IT+0x488>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d031      	beq.n	80048dc <HAL_DMA_Start_IT+0x430>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a2e      	ldr	r2, [pc, #184]	@ (8004938 <HAL_DMA_Start_IT+0x48c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d02c      	beq.n	80048dc <HAL_DMA_Start_IT+0x430>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a2d      	ldr	r2, [pc, #180]	@ (800493c <HAL_DMA_Start_IT+0x490>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d027      	beq.n	80048dc <HAL_DMA_Start_IT+0x430>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a2b      	ldr	r2, [pc, #172]	@ (8004940 <HAL_DMA_Start_IT+0x494>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d022      	beq.n	80048dc <HAL_DMA_Start_IT+0x430>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a2a      	ldr	r2, [pc, #168]	@ (8004944 <HAL_DMA_Start_IT+0x498>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d01d      	beq.n	80048dc <HAL_DMA_Start_IT+0x430>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a28      	ldr	r2, [pc, #160]	@ (8004948 <HAL_DMA_Start_IT+0x49c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d018      	beq.n	80048dc <HAL_DMA_Start_IT+0x430>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a27      	ldr	r2, [pc, #156]	@ (800494c <HAL_DMA_Start_IT+0x4a0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d013      	beq.n	80048dc <HAL_DMA_Start_IT+0x430>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a25      	ldr	r2, [pc, #148]	@ (8004950 <HAL_DMA_Start_IT+0x4a4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00e      	beq.n	80048dc <HAL_DMA_Start_IT+0x430>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a24      	ldr	r2, [pc, #144]	@ (8004954 <HAL_DMA_Start_IT+0x4a8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d009      	beq.n	80048dc <HAL_DMA_Start_IT+0x430>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a22      	ldr	r2, [pc, #136]	@ (8004958 <HAL_DMA_Start_IT+0x4ac>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d004      	beq.n	80048dc <HAL_DMA_Start_IT+0x430>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a21      	ldr	r2, [pc, #132]	@ (800495c <HAL_DMA_Start_IT+0x4b0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d108      	bne.n	80048ee <HAL_DMA_Start_IT+0x442>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	e012      	b.n	8004914 <HAL_DMA_Start_IT+0x468>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0201 	orr.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	e009      	b.n	8004914 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004906:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004914:	7dfb      	ldrb	r3, [r7, #23]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40020010 	.word	0x40020010
 8004924:	40020028 	.word	0x40020028
 8004928:	40020040 	.word	0x40020040
 800492c:	40020058 	.word	0x40020058
 8004930:	40020070 	.word	0x40020070
 8004934:	40020088 	.word	0x40020088
 8004938:	400200a0 	.word	0x400200a0
 800493c:	400200b8 	.word	0x400200b8
 8004940:	40020410 	.word	0x40020410
 8004944:	40020428 	.word	0x40020428
 8004948:	40020440 	.word	0x40020440
 800494c:	40020458 	.word	0x40020458
 8004950:	40020470 	.word	0x40020470
 8004954:	40020488 	.word	0x40020488
 8004958:	400204a0 	.word	0x400204a0
 800495c:	400204b8 	.word	0x400204b8
 8004960:	58025408 	.word	0x58025408
 8004964:	5802541c 	.word	0x5802541c
 8004968:	58025430 	.word	0x58025430
 800496c:	58025444 	.word	0x58025444
 8004970:	58025458 	.word	0x58025458
 8004974:	5802546c 	.word	0x5802546c
 8004978:	58025480 	.word	0x58025480
 800497c:	58025494 	.word	0x58025494

08004980 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004988:	f7fe fd84 	bl	8003494 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e2dc      	b.n	8004f52 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d008      	beq.n	80049b6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2280      	movs	r2, #128	@ 0x80
 80049a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e2cd      	b.n	8004f52 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a76      	ldr	r2, [pc, #472]	@ (8004b94 <HAL_DMA_Abort+0x214>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d04a      	beq.n	8004a56 <HAL_DMA_Abort+0xd6>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a74      	ldr	r2, [pc, #464]	@ (8004b98 <HAL_DMA_Abort+0x218>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d045      	beq.n	8004a56 <HAL_DMA_Abort+0xd6>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a73      	ldr	r2, [pc, #460]	@ (8004b9c <HAL_DMA_Abort+0x21c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d040      	beq.n	8004a56 <HAL_DMA_Abort+0xd6>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a71      	ldr	r2, [pc, #452]	@ (8004ba0 <HAL_DMA_Abort+0x220>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d03b      	beq.n	8004a56 <HAL_DMA_Abort+0xd6>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a70      	ldr	r2, [pc, #448]	@ (8004ba4 <HAL_DMA_Abort+0x224>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d036      	beq.n	8004a56 <HAL_DMA_Abort+0xd6>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a6e      	ldr	r2, [pc, #440]	@ (8004ba8 <HAL_DMA_Abort+0x228>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d031      	beq.n	8004a56 <HAL_DMA_Abort+0xd6>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a6d      	ldr	r2, [pc, #436]	@ (8004bac <HAL_DMA_Abort+0x22c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d02c      	beq.n	8004a56 <HAL_DMA_Abort+0xd6>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a6b      	ldr	r2, [pc, #428]	@ (8004bb0 <HAL_DMA_Abort+0x230>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d027      	beq.n	8004a56 <HAL_DMA_Abort+0xd6>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a6a      	ldr	r2, [pc, #424]	@ (8004bb4 <HAL_DMA_Abort+0x234>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d022      	beq.n	8004a56 <HAL_DMA_Abort+0xd6>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a68      	ldr	r2, [pc, #416]	@ (8004bb8 <HAL_DMA_Abort+0x238>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d01d      	beq.n	8004a56 <HAL_DMA_Abort+0xd6>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a67      	ldr	r2, [pc, #412]	@ (8004bbc <HAL_DMA_Abort+0x23c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d018      	beq.n	8004a56 <HAL_DMA_Abort+0xd6>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a65      	ldr	r2, [pc, #404]	@ (8004bc0 <HAL_DMA_Abort+0x240>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d013      	beq.n	8004a56 <HAL_DMA_Abort+0xd6>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a64      	ldr	r2, [pc, #400]	@ (8004bc4 <HAL_DMA_Abort+0x244>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00e      	beq.n	8004a56 <HAL_DMA_Abort+0xd6>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a62      	ldr	r2, [pc, #392]	@ (8004bc8 <HAL_DMA_Abort+0x248>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d009      	beq.n	8004a56 <HAL_DMA_Abort+0xd6>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a61      	ldr	r2, [pc, #388]	@ (8004bcc <HAL_DMA_Abort+0x24c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d004      	beq.n	8004a56 <HAL_DMA_Abort+0xd6>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a5f      	ldr	r2, [pc, #380]	@ (8004bd0 <HAL_DMA_Abort+0x250>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d101      	bne.n	8004a5a <HAL_DMA_Abort+0xda>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <HAL_DMA_Abort+0xdc>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d013      	beq.n	8004a88 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 021e 	bic.w	r2, r2, #30
 8004a6e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695a      	ldr	r2, [r3, #20]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a7e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	e00a      	b.n	8004a9e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 020e 	bic.w	r2, r2, #14
 8004a96:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a3c      	ldr	r2, [pc, #240]	@ (8004b94 <HAL_DMA_Abort+0x214>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d072      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a3a      	ldr	r2, [pc, #232]	@ (8004b98 <HAL_DMA_Abort+0x218>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d06d      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a39      	ldr	r2, [pc, #228]	@ (8004b9c <HAL_DMA_Abort+0x21c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d068      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a37      	ldr	r2, [pc, #220]	@ (8004ba0 <HAL_DMA_Abort+0x220>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d063      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a36      	ldr	r2, [pc, #216]	@ (8004ba4 <HAL_DMA_Abort+0x224>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d05e      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a34      	ldr	r2, [pc, #208]	@ (8004ba8 <HAL_DMA_Abort+0x228>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d059      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a33      	ldr	r2, [pc, #204]	@ (8004bac <HAL_DMA_Abort+0x22c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d054      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a31      	ldr	r2, [pc, #196]	@ (8004bb0 <HAL_DMA_Abort+0x230>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d04f      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a30      	ldr	r2, [pc, #192]	@ (8004bb4 <HAL_DMA_Abort+0x234>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d04a      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a2e      	ldr	r2, [pc, #184]	@ (8004bb8 <HAL_DMA_Abort+0x238>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d045      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a2d      	ldr	r2, [pc, #180]	@ (8004bbc <HAL_DMA_Abort+0x23c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d040      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a2b      	ldr	r2, [pc, #172]	@ (8004bc0 <HAL_DMA_Abort+0x240>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d03b      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8004bc4 <HAL_DMA_Abort+0x244>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d036      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a28      	ldr	r2, [pc, #160]	@ (8004bc8 <HAL_DMA_Abort+0x248>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d031      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a27      	ldr	r2, [pc, #156]	@ (8004bcc <HAL_DMA_Abort+0x24c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d02c      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a25      	ldr	r2, [pc, #148]	@ (8004bd0 <HAL_DMA_Abort+0x250>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d027      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a24      	ldr	r2, [pc, #144]	@ (8004bd4 <HAL_DMA_Abort+0x254>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d022      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a22      	ldr	r2, [pc, #136]	@ (8004bd8 <HAL_DMA_Abort+0x258>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d01d      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a21      	ldr	r2, [pc, #132]	@ (8004bdc <HAL_DMA_Abort+0x25c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d018      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1f      	ldr	r2, [pc, #124]	@ (8004be0 <HAL_DMA_Abort+0x260>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d013      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8004be4 <HAL_DMA_Abort+0x264>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00e      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1c      	ldr	r2, [pc, #112]	@ (8004be8 <HAL_DMA_Abort+0x268>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d009      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1b      	ldr	r2, [pc, #108]	@ (8004bec <HAL_DMA_Abort+0x26c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d004      	beq.n	8004b8e <HAL_DMA_Abort+0x20e>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a19      	ldr	r2, [pc, #100]	@ (8004bf0 <HAL_DMA_Abort+0x270>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d132      	bne.n	8004bf4 <HAL_DMA_Abort+0x274>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e031      	b.n	8004bf6 <HAL_DMA_Abort+0x276>
 8004b92:	bf00      	nop
 8004b94:	40020010 	.word	0x40020010
 8004b98:	40020028 	.word	0x40020028
 8004b9c:	40020040 	.word	0x40020040
 8004ba0:	40020058 	.word	0x40020058
 8004ba4:	40020070 	.word	0x40020070
 8004ba8:	40020088 	.word	0x40020088
 8004bac:	400200a0 	.word	0x400200a0
 8004bb0:	400200b8 	.word	0x400200b8
 8004bb4:	40020410 	.word	0x40020410
 8004bb8:	40020428 	.word	0x40020428
 8004bbc:	40020440 	.word	0x40020440
 8004bc0:	40020458 	.word	0x40020458
 8004bc4:	40020470 	.word	0x40020470
 8004bc8:	40020488 	.word	0x40020488
 8004bcc:	400204a0 	.word	0x400204a0
 8004bd0:	400204b8 	.word	0x400204b8
 8004bd4:	58025408 	.word	0x58025408
 8004bd8:	5802541c 	.word	0x5802541c
 8004bdc:	58025430 	.word	0x58025430
 8004be0:	58025444 	.word	0x58025444
 8004be4:	58025458 	.word	0x58025458
 8004be8:	5802546c 	.word	0x5802546c
 8004bec:	58025480 	.word	0x58025480
 8004bf0:	58025494 	.word	0x58025494
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d007      	beq.n	8004c0a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c08:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a6d      	ldr	r2, [pc, #436]	@ (8004dc4 <HAL_DMA_Abort+0x444>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d04a      	beq.n	8004caa <HAL_DMA_Abort+0x32a>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a6b      	ldr	r2, [pc, #428]	@ (8004dc8 <HAL_DMA_Abort+0x448>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d045      	beq.n	8004caa <HAL_DMA_Abort+0x32a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a6a      	ldr	r2, [pc, #424]	@ (8004dcc <HAL_DMA_Abort+0x44c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d040      	beq.n	8004caa <HAL_DMA_Abort+0x32a>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a68      	ldr	r2, [pc, #416]	@ (8004dd0 <HAL_DMA_Abort+0x450>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d03b      	beq.n	8004caa <HAL_DMA_Abort+0x32a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a67      	ldr	r2, [pc, #412]	@ (8004dd4 <HAL_DMA_Abort+0x454>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d036      	beq.n	8004caa <HAL_DMA_Abort+0x32a>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a65      	ldr	r2, [pc, #404]	@ (8004dd8 <HAL_DMA_Abort+0x458>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d031      	beq.n	8004caa <HAL_DMA_Abort+0x32a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a64      	ldr	r2, [pc, #400]	@ (8004ddc <HAL_DMA_Abort+0x45c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d02c      	beq.n	8004caa <HAL_DMA_Abort+0x32a>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a62      	ldr	r2, [pc, #392]	@ (8004de0 <HAL_DMA_Abort+0x460>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d027      	beq.n	8004caa <HAL_DMA_Abort+0x32a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a61      	ldr	r2, [pc, #388]	@ (8004de4 <HAL_DMA_Abort+0x464>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d022      	beq.n	8004caa <HAL_DMA_Abort+0x32a>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a5f      	ldr	r2, [pc, #380]	@ (8004de8 <HAL_DMA_Abort+0x468>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d01d      	beq.n	8004caa <HAL_DMA_Abort+0x32a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a5e      	ldr	r2, [pc, #376]	@ (8004dec <HAL_DMA_Abort+0x46c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d018      	beq.n	8004caa <HAL_DMA_Abort+0x32a>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a5c      	ldr	r2, [pc, #368]	@ (8004df0 <HAL_DMA_Abort+0x470>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d013      	beq.n	8004caa <HAL_DMA_Abort+0x32a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a5b      	ldr	r2, [pc, #364]	@ (8004df4 <HAL_DMA_Abort+0x474>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00e      	beq.n	8004caa <HAL_DMA_Abort+0x32a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a59      	ldr	r2, [pc, #356]	@ (8004df8 <HAL_DMA_Abort+0x478>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d009      	beq.n	8004caa <HAL_DMA_Abort+0x32a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a58      	ldr	r2, [pc, #352]	@ (8004dfc <HAL_DMA_Abort+0x47c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d004      	beq.n	8004caa <HAL_DMA_Abort+0x32a>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a56      	ldr	r2, [pc, #344]	@ (8004e00 <HAL_DMA_Abort+0x480>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d108      	bne.n	8004cbc <HAL_DMA_Abort+0x33c>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0201 	bic.w	r2, r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	e007      	b.n	8004ccc <HAL_DMA_Abort+0x34c>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0201 	bic.w	r2, r2, #1
 8004cca:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004ccc:	e013      	b.n	8004cf6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cce:	f7fe fbe1 	bl	8003494 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b05      	cmp	r3, #5
 8004cda:	d90c      	bls.n	8004cf6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2203      	movs	r2, #3
 8004ce6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e12d      	b.n	8004f52 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e5      	bne.n	8004cce <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a2f      	ldr	r2, [pc, #188]	@ (8004dc4 <HAL_DMA_Abort+0x444>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d04a      	beq.n	8004da2 <HAL_DMA_Abort+0x422>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a2d      	ldr	r2, [pc, #180]	@ (8004dc8 <HAL_DMA_Abort+0x448>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d045      	beq.n	8004da2 <HAL_DMA_Abort+0x422>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a2c      	ldr	r2, [pc, #176]	@ (8004dcc <HAL_DMA_Abort+0x44c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d040      	beq.n	8004da2 <HAL_DMA_Abort+0x422>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a2a      	ldr	r2, [pc, #168]	@ (8004dd0 <HAL_DMA_Abort+0x450>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d03b      	beq.n	8004da2 <HAL_DMA_Abort+0x422>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a29      	ldr	r2, [pc, #164]	@ (8004dd4 <HAL_DMA_Abort+0x454>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d036      	beq.n	8004da2 <HAL_DMA_Abort+0x422>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a27      	ldr	r2, [pc, #156]	@ (8004dd8 <HAL_DMA_Abort+0x458>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d031      	beq.n	8004da2 <HAL_DMA_Abort+0x422>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a26      	ldr	r2, [pc, #152]	@ (8004ddc <HAL_DMA_Abort+0x45c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d02c      	beq.n	8004da2 <HAL_DMA_Abort+0x422>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a24      	ldr	r2, [pc, #144]	@ (8004de0 <HAL_DMA_Abort+0x460>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d027      	beq.n	8004da2 <HAL_DMA_Abort+0x422>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a23      	ldr	r2, [pc, #140]	@ (8004de4 <HAL_DMA_Abort+0x464>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d022      	beq.n	8004da2 <HAL_DMA_Abort+0x422>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a21      	ldr	r2, [pc, #132]	@ (8004de8 <HAL_DMA_Abort+0x468>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d01d      	beq.n	8004da2 <HAL_DMA_Abort+0x422>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a20      	ldr	r2, [pc, #128]	@ (8004dec <HAL_DMA_Abort+0x46c>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d018      	beq.n	8004da2 <HAL_DMA_Abort+0x422>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1e      	ldr	r2, [pc, #120]	@ (8004df0 <HAL_DMA_Abort+0x470>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d013      	beq.n	8004da2 <HAL_DMA_Abort+0x422>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a1d      	ldr	r2, [pc, #116]	@ (8004df4 <HAL_DMA_Abort+0x474>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00e      	beq.n	8004da2 <HAL_DMA_Abort+0x422>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a1b      	ldr	r2, [pc, #108]	@ (8004df8 <HAL_DMA_Abort+0x478>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d009      	beq.n	8004da2 <HAL_DMA_Abort+0x422>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a1a      	ldr	r2, [pc, #104]	@ (8004dfc <HAL_DMA_Abort+0x47c>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d004      	beq.n	8004da2 <HAL_DMA_Abort+0x422>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a18      	ldr	r2, [pc, #96]	@ (8004e00 <HAL_DMA_Abort+0x480>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d101      	bne.n	8004da6 <HAL_DMA_Abort+0x426>
 8004da2:	2301      	movs	r3, #1
 8004da4:	e000      	b.n	8004da8 <HAL_DMA_Abort+0x428>
 8004da6:	2300      	movs	r3, #0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d02b      	beq.n	8004e04 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db6:	f003 031f 	and.w	r3, r3, #31
 8004dba:	223f      	movs	r2, #63	@ 0x3f
 8004dbc:	409a      	lsls	r2, r3
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	609a      	str	r2, [r3, #8]
 8004dc2:	e02a      	b.n	8004e1a <HAL_DMA_Abort+0x49a>
 8004dc4:	40020010 	.word	0x40020010
 8004dc8:	40020028 	.word	0x40020028
 8004dcc:	40020040 	.word	0x40020040
 8004dd0:	40020058 	.word	0x40020058
 8004dd4:	40020070 	.word	0x40020070
 8004dd8:	40020088 	.word	0x40020088
 8004ddc:	400200a0 	.word	0x400200a0
 8004de0:	400200b8 	.word	0x400200b8
 8004de4:	40020410 	.word	0x40020410
 8004de8:	40020428 	.word	0x40020428
 8004dec:	40020440 	.word	0x40020440
 8004df0:	40020458 	.word	0x40020458
 8004df4:	40020470 	.word	0x40020470
 8004df8:	40020488 	.word	0x40020488
 8004dfc:	400204a0 	.word	0x400204a0
 8004e00:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e08:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e0e:	f003 031f 	and.w	r3, r3, #31
 8004e12:	2201      	movs	r2, #1
 8004e14:	409a      	lsls	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a4f      	ldr	r2, [pc, #316]	@ (8004f5c <HAL_DMA_Abort+0x5dc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d072      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a4d      	ldr	r2, [pc, #308]	@ (8004f60 <HAL_DMA_Abort+0x5e0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d06d      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a4c      	ldr	r2, [pc, #304]	@ (8004f64 <HAL_DMA_Abort+0x5e4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d068      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a4a      	ldr	r2, [pc, #296]	@ (8004f68 <HAL_DMA_Abort+0x5e8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d063      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a49      	ldr	r2, [pc, #292]	@ (8004f6c <HAL_DMA_Abort+0x5ec>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d05e      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a47      	ldr	r2, [pc, #284]	@ (8004f70 <HAL_DMA_Abort+0x5f0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d059      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a46      	ldr	r2, [pc, #280]	@ (8004f74 <HAL_DMA_Abort+0x5f4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d054      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a44      	ldr	r2, [pc, #272]	@ (8004f78 <HAL_DMA_Abort+0x5f8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d04f      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a43      	ldr	r2, [pc, #268]	@ (8004f7c <HAL_DMA_Abort+0x5fc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d04a      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a41      	ldr	r2, [pc, #260]	@ (8004f80 <HAL_DMA_Abort+0x600>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d045      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a40      	ldr	r2, [pc, #256]	@ (8004f84 <HAL_DMA_Abort+0x604>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d040      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a3e      	ldr	r2, [pc, #248]	@ (8004f88 <HAL_DMA_Abort+0x608>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d03b      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a3d      	ldr	r2, [pc, #244]	@ (8004f8c <HAL_DMA_Abort+0x60c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d036      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a3b      	ldr	r2, [pc, #236]	@ (8004f90 <HAL_DMA_Abort+0x610>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d031      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a3a      	ldr	r2, [pc, #232]	@ (8004f94 <HAL_DMA_Abort+0x614>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d02c      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a38      	ldr	r2, [pc, #224]	@ (8004f98 <HAL_DMA_Abort+0x618>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d027      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a37      	ldr	r2, [pc, #220]	@ (8004f9c <HAL_DMA_Abort+0x61c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d022      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a35      	ldr	r2, [pc, #212]	@ (8004fa0 <HAL_DMA_Abort+0x620>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d01d      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a34      	ldr	r2, [pc, #208]	@ (8004fa4 <HAL_DMA_Abort+0x624>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d018      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a32      	ldr	r2, [pc, #200]	@ (8004fa8 <HAL_DMA_Abort+0x628>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d013      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a31      	ldr	r2, [pc, #196]	@ (8004fac <HAL_DMA_Abort+0x62c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00e      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a2f      	ldr	r2, [pc, #188]	@ (8004fb0 <HAL_DMA_Abort+0x630>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d009      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a2e      	ldr	r2, [pc, #184]	@ (8004fb4 <HAL_DMA_Abort+0x634>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d004      	beq.n	8004f0a <HAL_DMA_Abort+0x58a>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a2c      	ldr	r2, [pc, #176]	@ (8004fb8 <HAL_DMA_Abort+0x638>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d101      	bne.n	8004f0e <HAL_DMA_Abort+0x58e>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e000      	b.n	8004f10 <HAL_DMA_Abort+0x590>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d015      	beq.n	8004f40 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004f1c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00c      	beq.n	8004f40 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f34:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004f3e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40020010 	.word	0x40020010
 8004f60:	40020028 	.word	0x40020028
 8004f64:	40020040 	.word	0x40020040
 8004f68:	40020058 	.word	0x40020058
 8004f6c:	40020070 	.word	0x40020070
 8004f70:	40020088 	.word	0x40020088
 8004f74:	400200a0 	.word	0x400200a0
 8004f78:	400200b8 	.word	0x400200b8
 8004f7c:	40020410 	.word	0x40020410
 8004f80:	40020428 	.word	0x40020428
 8004f84:	40020440 	.word	0x40020440
 8004f88:	40020458 	.word	0x40020458
 8004f8c:	40020470 	.word	0x40020470
 8004f90:	40020488 	.word	0x40020488
 8004f94:	400204a0 	.word	0x400204a0
 8004f98:	400204b8 	.word	0x400204b8
 8004f9c:	58025408 	.word	0x58025408
 8004fa0:	5802541c 	.word	0x5802541c
 8004fa4:	58025430 	.word	0x58025430
 8004fa8:	58025444 	.word	0x58025444
 8004fac:	58025458 	.word	0x58025458
 8004fb0:	5802546c 	.word	0x5802546c
 8004fb4:	58025480 	.word	0x58025480
 8004fb8:	58025494 	.word	0x58025494

08004fbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e237      	b.n	800543e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d004      	beq.n	8004fe4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2280      	movs	r2, #128	@ 0x80
 8004fde:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e22c      	b.n	800543e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a5c      	ldr	r2, [pc, #368]	@ (800515c <HAL_DMA_Abort_IT+0x1a0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d04a      	beq.n	8005084 <HAL_DMA_Abort_IT+0xc8>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a5b      	ldr	r2, [pc, #364]	@ (8005160 <HAL_DMA_Abort_IT+0x1a4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d045      	beq.n	8005084 <HAL_DMA_Abort_IT+0xc8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a59      	ldr	r2, [pc, #356]	@ (8005164 <HAL_DMA_Abort_IT+0x1a8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d040      	beq.n	8005084 <HAL_DMA_Abort_IT+0xc8>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a58      	ldr	r2, [pc, #352]	@ (8005168 <HAL_DMA_Abort_IT+0x1ac>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d03b      	beq.n	8005084 <HAL_DMA_Abort_IT+0xc8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a56      	ldr	r2, [pc, #344]	@ (800516c <HAL_DMA_Abort_IT+0x1b0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d036      	beq.n	8005084 <HAL_DMA_Abort_IT+0xc8>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a55      	ldr	r2, [pc, #340]	@ (8005170 <HAL_DMA_Abort_IT+0x1b4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d031      	beq.n	8005084 <HAL_DMA_Abort_IT+0xc8>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a53      	ldr	r2, [pc, #332]	@ (8005174 <HAL_DMA_Abort_IT+0x1b8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d02c      	beq.n	8005084 <HAL_DMA_Abort_IT+0xc8>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a52      	ldr	r2, [pc, #328]	@ (8005178 <HAL_DMA_Abort_IT+0x1bc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d027      	beq.n	8005084 <HAL_DMA_Abort_IT+0xc8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a50      	ldr	r2, [pc, #320]	@ (800517c <HAL_DMA_Abort_IT+0x1c0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d022      	beq.n	8005084 <HAL_DMA_Abort_IT+0xc8>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a4f      	ldr	r2, [pc, #316]	@ (8005180 <HAL_DMA_Abort_IT+0x1c4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d01d      	beq.n	8005084 <HAL_DMA_Abort_IT+0xc8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a4d      	ldr	r2, [pc, #308]	@ (8005184 <HAL_DMA_Abort_IT+0x1c8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d018      	beq.n	8005084 <HAL_DMA_Abort_IT+0xc8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a4c      	ldr	r2, [pc, #304]	@ (8005188 <HAL_DMA_Abort_IT+0x1cc>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d013      	beq.n	8005084 <HAL_DMA_Abort_IT+0xc8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a4a      	ldr	r2, [pc, #296]	@ (800518c <HAL_DMA_Abort_IT+0x1d0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00e      	beq.n	8005084 <HAL_DMA_Abort_IT+0xc8>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a49      	ldr	r2, [pc, #292]	@ (8005190 <HAL_DMA_Abort_IT+0x1d4>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d009      	beq.n	8005084 <HAL_DMA_Abort_IT+0xc8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a47      	ldr	r2, [pc, #284]	@ (8005194 <HAL_DMA_Abort_IT+0x1d8>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d004      	beq.n	8005084 <HAL_DMA_Abort_IT+0xc8>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a46      	ldr	r2, [pc, #280]	@ (8005198 <HAL_DMA_Abort_IT+0x1dc>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d101      	bne.n	8005088 <HAL_DMA_Abort_IT+0xcc>
 8005084:	2301      	movs	r3, #1
 8005086:	e000      	b.n	800508a <HAL_DMA_Abort_IT+0xce>
 8005088:	2300      	movs	r3, #0
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 8086 	beq.w	800519c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2204      	movs	r2, #4
 8005094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a2f      	ldr	r2, [pc, #188]	@ (800515c <HAL_DMA_Abort_IT+0x1a0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d04a      	beq.n	8005138 <HAL_DMA_Abort_IT+0x17c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a2e      	ldr	r2, [pc, #184]	@ (8005160 <HAL_DMA_Abort_IT+0x1a4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d045      	beq.n	8005138 <HAL_DMA_Abort_IT+0x17c>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a2c      	ldr	r2, [pc, #176]	@ (8005164 <HAL_DMA_Abort_IT+0x1a8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d040      	beq.n	8005138 <HAL_DMA_Abort_IT+0x17c>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a2b      	ldr	r2, [pc, #172]	@ (8005168 <HAL_DMA_Abort_IT+0x1ac>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d03b      	beq.n	8005138 <HAL_DMA_Abort_IT+0x17c>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a29      	ldr	r2, [pc, #164]	@ (800516c <HAL_DMA_Abort_IT+0x1b0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d036      	beq.n	8005138 <HAL_DMA_Abort_IT+0x17c>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a28      	ldr	r2, [pc, #160]	@ (8005170 <HAL_DMA_Abort_IT+0x1b4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d031      	beq.n	8005138 <HAL_DMA_Abort_IT+0x17c>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a26      	ldr	r2, [pc, #152]	@ (8005174 <HAL_DMA_Abort_IT+0x1b8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d02c      	beq.n	8005138 <HAL_DMA_Abort_IT+0x17c>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a25      	ldr	r2, [pc, #148]	@ (8005178 <HAL_DMA_Abort_IT+0x1bc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d027      	beq.n	8005138 <HAL_DMA_Abort_IT+0x17c>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a23      	ldr	r2, [pc, #140]	@ (800517c <HAL_DMA_Abort_IT+0x1c0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d022      	beq.n	8005138 <HAL_DMA_Abort_IT+0x17c>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a22      	ldr	r2, [pc, #136]	@ (8005180 <HAL_DMA_Abort_IT+0x1c4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d01d      	beq.n	8005138 <HAL_DMA_Abort_IT+0x17c>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a20      	ldr	r2, [pc, #128]	@ (8005184 <HAL_DMA_Abort_IT+0x1c8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d018      	beq.n	8005138 <HAL_DMA_Abort_IT+0x17c>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1f      	ldr	r2, [pc, #124]	@ (8005188 <HAL_DMA_Abort_IT+0x1cc>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d013      	beq.n	8005138 <HAL_DMA_Abort_IT+0x17c>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1d      	ldr	r2, [pc, #116]	@ (800518c <HAL_DMA_Abort_IT+0x1d0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00e      	beq.n	8005138 <HAL_DMA_Abort_IT+0x17c>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1c      	ldr	r2, [pc, #112]	@ (8005190 <HAL_DMA_Abort_IT+0x1d4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d009      	beq.n	8005138 <HAL_DMA_Abort_IT+0x17c>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1a      	ldr	r2, [pc, #104]	@ (8005194 <HAL_DMA_Abort_IT+0x1d8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d004      	beq.n	8005138 <HAL_DMA_Abort_IT+0x17c>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a19      	ldr	r2, [pc, #100]	@ (8005198 <HAL_DMA_Abort_IT+0x1dc>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d108      	bne.n	800514a <HAL_DMA_Abort_IT+0x18e>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0201 	bic.w	r2, r2, #1
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	e178      	b.n	800543c <HAL_DMA_Abort_IT+0x480>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0201 	bic.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	e16f      	b.n	800543c <HAL_DMA_Abort_IT+0x480>
 800515c:	40020010 	.word	0x40020010
 8005160:	40020028 	.word	0x40020028
 8005164:	40020040 	.word	0x40020040
 8005168:	40020058 	.word	0x40020058
 800516c:	40020070 	.word	0x40020070
 8005170:	40020088 	.word	0x40020088
 8005174:	400200a0 	.word	0x400200a0
 8005178:	400200b8 	.word	0x400200b8
 800517c:	40020410 	.word	0x40020410
 8005180:	40020428 	.word	0x40020428
 8005184:	40020440 	.word	0x40020440
 8005188:	40020458 	.word	0x40020458
 800518c:	40020470 	.word	0x40020470
 8005190:	40020488 	.word	0x40020488
 8005194:	400204a0 	.word	0x400204a0
 8005198:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 020e 	bic.w	r2, r2, #14
 80051aa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a6c      	ldr	r2, [pc, #432]	@ (8005364 <HAL_DMA_Abort_IT+0x3a8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d04a      	beq.n	800524c <HAL_DMA_Abort_IT+0x290>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a6b      	ldr	r2, [pc, #428]	@ (8005368 <HAL_DMA_Abort_IT+0x3ac>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d045      	beq.n	800524c <HAL_DMA_Abort_IT+0x290>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a69      	ldr	r2, [pc, #420]	@ (800536c <HAL_DMA_Abort_IT+0x3b0>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d040      	beq.n	800524c <HAL_DMA_Abort_IT+0x290>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a68      	ldr	r2, [pc, #416]	@ (8005370 <HAL_DMA_Abort_IT+0x3b4>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d03b      	beq.n	800524c <HAL_DMA_Abort_IT+0x290>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a66      	ldr	r2, [pc, #408]	@ (8005374 <HAL_DMA_Abort_IT+0x3b8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d036      	beq.n	800524c <HAL_DMA_Abort_IT+0x290>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a65      	ldr	r2, [pc, #404]	@ (8005378 <HAL_DMA_Abort_IT+0x3bc>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d031      	beq.n	800524c <HAL_DMA_Abort_IT+0x290>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a63      	ldr	r2, [pc, #396]	@ (800537c <HAL_DMA_Abort_IT+0x3c0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d02c      	beq.n	800524c <HAL_DMA_Abort_IT+0x290>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a62      	ldr	r2, [pc, #392]	@ (8005380 <HAL_DMA_Abort_IT+0x3c4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d027      	beq.n	800524c <HAL_DMA_Abort_IT+0x290>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a60      	ldr	r2, [pc, #384]	@ (8005384 <HAL_DMA_Abort_IT+0x3c8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d022      	beq.n	800524c <HAL_DMA_Abort_IT+0x290>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a5f      	ldr	r2, [pc, #380]	@ (8005388 <HAL_DMA_Abort_IT+0x3cc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d01d      	beq.n	800524c <HAL_DMA_Abort_IT+0x290>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a5d      	ldr	r2, [pc, #372]	@ (800538c <HAL_DMA_Abort_IT+0x3d0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d018      	beq.n	800524c <HAL_DMA_Abort_IT+0x290>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a5c      	ldr	r2, [pc, #368]	@ (8005390 <HAL_DMA_Abort_IT+0x3d4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d013      	beq.n	800524c <HAL_DMA_Abort_IT+0x290>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a5a      	ldr	r2, [pc, #360]	@ (8005394 <HAL_DMA_Abort_IT+0x3d8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d00e      	beq.n	800524c <HAL_DMA_Abort_IT+0x290>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a59      	ldr	r2, [pc, #356]	@ (8005398 <HAL_DMA_Abort_IT+0x3dc>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d009      	beq.n	800524c <HAL_DMA_Abort_IT+0x290>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a57      	ldr	r2, [pc, #348]	@ (800539c <HAL_DMA_Abort_IT+0x3e0>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d004      	beq.n	800524c <HAL_DMA_Abort_IT+0x290>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a56      	ldr	r2, [pc, #344]	@ (80053a0 <HAL_DMA_Abort_IT+0x3e4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d108      	bne.n	800525e <HAL_DMA_Abort_IT+0x2a2>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0201 	bic.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	e007      	b.n	800526e <HAL_DMA_Abort_IT+0x2b2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0201 	bic.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a3c      	ldr	r2, [pc, #240]	@ (8005364 <HAL_DMA_Abort_IT+0x3a8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d072      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a3a      	ldr	r2, [pc, #232]	@ (8005368 <HAL_DMA_Abort_IT+0x3ac>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d06d      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a39      	ldr	r2, [pc, #228]	@ (800536c <HAL_DMA_Abort_IT+0x3b0>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d068      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a37      	ldr	r2, [pc, #220]	@ (8005370 <HAL_DMA_Abort_IT+0x3b4>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d063      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a36      	ldr	r2, [pc, #216]	@ (8005374 <HAL_DMA_Abort_IT+0x3b8>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d05e      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a34      	ldr	r2, [pc, #208]	@ (8005378 <HAL_DMA_Abort_IT+0x3bc>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d059      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a33      	ldr	r2, [pc, #204]	@ (800537c <HAL_DMA_Abort_IT+0x3c0>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d054      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a31      	ldr	r2, [pc, #196]	@ (8005380 <HAL_DMA_Abort_IT+0x3c4>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d04f      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a30      	ldr	r2, [pc, #192]	@ (8005384 <HAL_DMA_Abort_IT+0x3c8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d04a      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a2e      	ldr	r2, [pc, #184]	@ (8005388 <HAL_DMA_Abort_IT+0x3cc>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d045      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a2d      	ldr	r2, [pc, #180]	@ (800538c <HAL_DMA_Abort_IT+0x3d0>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d040      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a2b      	ldr	r2, [pc, #172]	@ (8005390 <HAL_DMA_Abort_IT+0x3d4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d03b      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a2a      	ldr	r2, [pc, #168]	@ (8005394 <HAL_DMA_Abort_IT+0x3d8>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d036      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a28      	ldr	r2, [pc, #160]	@ (8005398 <HAL_DMA_Abort_IT+0x3dc>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d031      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a27      	ldr	r2, [pc, #156]	@ (800539c <HAL_DMA_Abort_IT+0x3e0>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d02c      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a25      	ldr	r2, [pc, #148]	@ (80053a0 <HAL_DMA_Abort_IT+0x3e4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d027      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a24      	ldr	r2, [pc, #144]	@ (80053a4 <HAL_DMA_Abort_IT+0x3e8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d022      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a22      	ldr	r2, [pc, #136]	@ (80053a8 <HAL_DMA_Abort_IT+0x3ec>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d01d      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a21      	ldr	r2, [pc, #132]	@ (80053ac <HAL_DMA_Abort_IT+0x3f0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d018      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a1f      	ldr	r2, [pc, #124]	@ (80053b0 <HAL_DMA_Abort_IT+0x3f4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d013      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a1e      	ldr	r2, [pc, #120]	@ (80053b4 <HAL_DMA_Abort_IT+0x3f8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00e      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a1c      	ldr	r2, [pc, #112]	@ (80053b8 <HAL_DMA_Abort_IT+0x3fc>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d009      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a1b      	ldr	r2, [pc, #108]	@ (80053bc <HAL_DMA_Abort_IT+0x400>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d004      	beq.n	800535e <HAL_DMA_Abort_IT+0x3a2>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a19      	ldr	r2, [pc, #100]	@ (80053c0 <HAL_DMA_Abort_IT+0x404>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d132      	bne.n	80053c4 <HAL_DMA_Abort_IT+0x408>
 800535e:	2301      	movs	r3, #1
 8005360:	e031      	b.n	80053c6 <HAL_DMA_Abort_IT+0x40a>
 8005362:	bf00      	nop
 8005364:	40020010 	.word	0x40020010
 8005368:	40020028 	.word	0x40020028
 800536c:	40020040 	.word	0x40020040
 8005370:	40020058 	.word	0x40020058
 8005374:	40020070 	.word	0x40020070
 8005378:	40020088 	.word	0x40020088
 800537c:	400200a0 	.word	0x400200a0
 8005380:	400200b8 	.word	0x400200b8
 8005384:	40020410 	.word	0x40020410
 8005388:	40020428 	.word	0x40020428
 800538c:	40020440 	.word	0x40020440
 8005390:	40020458 	.word	0x40020458
 8005394:	40020470 	.word	0x40020470
 8005398:	40020488 	.word	0x40020488
 800539c:	400204a0 	.word	0x400204a0
 80053a0:	400204b8 	.word	0x400204b8
 80053a4:	58025408 	.word	0x58025408
 80053a8:	5802541c 	.word	0x5802541c
 80053ac:	58025430 	.word	0x58025430
 80053b0:	58025444 	.word	0x58025444
 80053b4:	58025458 	.word	0x58025458
 80053b8:	5802546c 	.word	0x5802546c
 80053bc:	58025480 	.word	0x58025480
 80053c0:	58025494 	.word	0x58025494
 80053c4:	2300      	movs	r3, #0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d028      	beq.n	800541c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053d8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053de:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e4:	f003 031f 	and.w	r3, r3, #31
 80053e8:	2201      	movs	r2, #1
 80053ea:	409a      	lsls	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80053f8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00c      	beq.n	800541c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800540c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005410:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800541a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005430:	2b00      	cmp	r3, #0
 8005432:	d003      	beq.n	800543c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop

08005448 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b08a      	sub	sp, #40	@ 0x28
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005454:	4b67      	ldr	r3, [pc, #412]	@ (80055f4 <HAL_DMA_IRQHandler+0x1ac>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a67      	ldr	r2, [pc, #412]	@ (80055f8 <HAL_DMA_IRQHandler+0x1b0>)
 800545a:	fba2 2303 	umull	r2, r3, r2, r3
 800545e:	0a9b      	lsrs	r3, r3, #10
 8005460:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005466:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800546c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a5f      	ldr	r2, [pc, #380]	@ (80055fc <HAL_DMA_IRQHandler+0x1b4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d04a      	beq.n	800551a <HAL_DMA_IRQHandler+0xd2>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a5d      	ldr	r2, [pc, #372]	@ (8005600 <HAL_DMA_IRQHandler+0x1b8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d045      	beq.n	800551a <HAL_DMA_IRQHandler+0xd2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a5c      	ldr	r2, [pc, #368]	@ (8005604 <HAL_DMA_IRQHandler+0x1bc>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d040      	beq.n	800551a <HAL_DMA_IRQHandler+0xd2>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a5a      	ldr	r2, [pc, #360]	@ (8005608 <HAL_DMA_IRQHandler+0x1c0>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d03b      	beq.n	800551a <HAL_DMA_IRQHandler+0xd2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a59      	ldr	r2, [pc, #356]	@ (800560c <HAL_DMA_IRQHandler+0x1c4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d036      	beq.n	800551a <HAL_DMA_IRQHandler+0xd2>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a57      	ldr	r2, [pc, #348]	@ (8005610 <HAL_DMA_IRQHandler+0x1c8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d031      	beq.n	800551a <HAL_DMA_IRQHandler+0xd2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a56      	ldr	r2, [pc, #344]	@ (8005614 <HAL_DMA_IRQHandler+0x1cc>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d02c      	beq.n	800551a <HAL_DMA_IRQHandler+0xd2>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a54      	ldr	r2, [pc, #336]	@ (8005618 <HAL_DMA_IRQHandler+0x1d0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d027      	beq.n	800551a <HAL_DMA_IRQHandler+0xd2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a53      	ldr	r2, [pc, #332]	@ (800561c <HAL_DMA_IRQHandler+0x1d4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d022      	beq.n	800551a <HAL_DMA_IRQHandler+0xd2>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a51      	ldr	r2, [pc, #324]	@ (8005620 <HAL_DMA_IRQHandler+0x1d8>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d01d      	beq.n	800551a <HAL_DMA_IRQHandler+0xd2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a50      	ldr	r2, [pc, #320]	@ (8005624 <HAL_DMA_IRQHandler+0x1dc>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d018      	beq.n	800551a <HAL_DMA_IRQHandler+0xd2>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a4e      	ldr	r2, [pc, #312]	@ (8005628 <HAL_DMA_IRQHandler+0x1e0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d013      	beq.n	800551a <HAL_DMA_IRQHandler+0xd2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a4d      	ldr	r2, [pc, #308]	@ (800562c <HAL_DMA_IRQHandler+0x1e4>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d00e      	beq.n	800551a <HAL_DMA_IRQHandler+0xd2>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a4b      	ldr	r2, [pc, #300]	@ (8005630 <HAL_DMA_IRQHandler+0x1e8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d009      	beq.n	800551a <HAL_DMA_IRQHandler+0xd2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a4a      	ldr	r2, [pc, #296]	@ (8005634 <HAL_DMA_IRQHandler+0x1ec>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d004      	beq.n	800551a <HAL_DMA_IRQHandler+0xd2>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a48      	ldr	r2, [pc, #288]	@ (8005638 <HAL_DMA_IRQHandler+0x1f0>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d101      	bne.n	800551e <HAL_DMA_IRQHandler+0xd6>
 800551a:	2301      	movs	r3, #1
 800551c:	e000      	b.n	8005520 <HAL_DMA_IRQHandler+0xd8>
 800551e:	2300      	movs	r3, #0
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 842b 	beq.w	8005d7c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800552a:	f003 031f 	and.w	r3, r3, #31
 800552e:	2208      	movs	r2, #8
 8005530:	409a      	lsls	r2, r3
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	4013      	ands	r3, r2
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 80a2 	beq.w	8005680 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a2e      	ldr	r2, [pc, #184]	@ (80055fc <HAL_DMA_IRQHandler+0x1b4>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d04a      	beq.n	80055dc <HAL_DMA_IRQHandler+0x194>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a2d      	ldr	r2, [pc, #180]	@ (8005600 <HAL_DMA_IRQHandler+0x1b8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d045      	beq.n	80055dc <HAL_DMA_IRQHandler+0x194>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a2b      	ldr	r2, [pc, #172]	@ (8005604 <HAL_DMA_IRQHandler+0x1bc>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d040      	beq.n	80055dc <HAL_DMA_IRQHandler+0x194>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a2a      	ldr	r2, [pc, #168]	@ (8005608 <HAL_DMA_IRQHandler+0x1c0>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d03b      	beq.n	80055dc <HAL_DMA_IRQHandler+0x194>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a28      	ldr	r2, [pc, #160]	@ (800560c <HAL_DMA_IRQHandler+0x1c4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d036      	beq.n	80055dc <HAL_DMA_IRQHandler+0x194>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a27      	ldr	r2, [pc, #156]	@ (8005610 <HAL_DMA_IRQHandler+0x1c8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d031      	beq.n	80055dc <HAL_DMA_IRQHandler+0x194>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a25      	ldr	r2, [pc, #148]	@ (8005614 <HAL_DMA_IRQHandler+0x1cc>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d02c      	beq.n	80055dc <HAL_DMA_IRQHandler+0x194>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a24      	ldr	r2, [pc, #144]	@ (8005618 <HAL_DMA_IRQHandler+0x1d0>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d027      	beq.n	80055dc <HAL_DMA_IRQHandler+0x194>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a22      	ldr	r2, [pc, #136]	@ (800561c <HAL_DMA_IRQHandler+0x1d4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d022      	beq.n	80055dc <HAL_DMA_IRQHandler+0x194>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a21      	ldr	r2, [pc, #132]	@ (8005620 <HAL_DMA_IRQHandler+0x1d8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d01d      	beq.n	80055dc <HAL_DMA_IRQHandler+0x194>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005624 <HAL_DMA_IRQHandler+0x1dc>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d018      	beq.n	80055dc <HAL_DMA_IRQHandler+0x194>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005628 <HAL_DMA_IRQHandler+0x1e0>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d013      	beq.n	80055dc <HAL_DMA_IRQHandler+0x194>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a1c      	ldr	r2, [pc, #112]	@ (800562c <HAL_DMA_IRQHandler+0x1e4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d00e      	beq.n	80055dc <HAL_DMA_IRQHandler+0x194>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005630 <HAL_DMA_IRQHandler+0x1e8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d009      	beq.n	80055dc <HAL_DMA_IRQHandler+0x194>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a19      	ldr	r2, [pc, #100]	@ (8005634 <HAL_DMA_IRQHandler+0x1ec>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d004      	beq.n	80055dc <HAL_DMA_IRQHandler+0x194>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a18      	ldr	r2, [pc, #96]	@ (8005638 <HAL_DMA_IRQHandler+0x1f0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d12f      	bne.n	800563c <HAL_DMA_IRQHandler+0x1f4>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0304 	and.w	r3, r3, #4
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	bf14      	ite	ne
 80055ea:	2301      	movne	r3, #1
 80055ec:	2300      	moveq	r3, #0
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	e02e      	b.n	8005650 <HAL_DMA_IRQHandler+0x208>
 80055f2:	bf00      	nop
 80055f4:	24000018 	.word	0x24000018
 80055f8:	1b4e81b5 	.word	0x1b4e81b5
 80055fc:	40020010 	.word	0x40020010
 8005600:	40020028 	.word	0x40020028
 8005604:	40020040 	.word	0x40020040
 8005608:	40020058 	.word	0x40020058
 800560c:	40020070 	.word	0x40020070
 8005610:	40020088 	.word	0x40020088
 8005614:	400200a0 	.word	0x400200a0
 8005618:	400200b8 	.word	0x400200b8
 800561c:	40020410 	.word	0x40020410
 8005620:	40020428 	.word	0x40020428
 8005624:	40020440 	.word	0x40020440
 8005628:	40020458 	.word	0x40020458
 800562c:	40020470 	.word	0x40020470
 8005630:	40020488 	.word	0x40020488
 8005634:	400204a0 	.word	0x400204a0
 8005638:	400204b8 	.word	0x400204b8
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	2b00      	cmp	r3, #0
 8005648:	bf14      	ite	ne
 800564a:	2301      	movne	r3, #1
 800564c:	2300      	moveq	r3, #0
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d015      	beq.n	8005680 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0204 	bic.w	r2, r2, #4
 8005662:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005668:	f003 031f 	and.w	r3, r3, #31
 800566c:	2208      	movs	r2, #8
 800566e:	409a      	lsls	r2, r3
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005678:	f043 0201 	orr.w	r2, r3, #1
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005684:	f003 031f 	and.w	r3, r3, #31
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	fa22 f303 	lsr.w	r3, r2, r3
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d06e      	beq.n	8005774 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a69      	ldr	r2, [pc, #420]	@ (8005840 <HAL_DMA_IRQHandler+0x3f8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d04a      	beq.n	8005736 <HAL_DMA_IRQHandler+0x2ee>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a67      	ldr	r2, [pc, #412]	@ (8005844 <HAL_DMA_IRQHandler+0x3fc>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d045      	beq.n	8005736 <HAL_DMA_IRQHandler+0x2ee>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a66      	ldr	r2, [pc, #408]	@ (8005848 <HAL_DMA_IRQHandler+0x400>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d040      	beq.n	8005736 <HAL_DMA_IRQHandler+0x2ee>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a64      	ldr	r2, [pc, #400]	@ (800584c <HAL_DMA_IRQHandler+0x404>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d03b      	beq.n	8005736 <HAL_DMA_IRQHandler+0x2ee>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a63      	ldr	r2, [pc, #396]	@ (8005850 <HAL_DMA_IRQHandler+0x408>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d036      	beq.n	8005736 <HAL_DMA_IRQHandler+0x2ee>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a61      	ldr	r2, [pc, #388]	@ (8005854 <HAL_DMA_IRQHandler+0x40c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d031      	beq.n	8005736 <HAL_DMA_IRQHandler+0x2ee>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a60      	ldr	r2, [pc, #384]	@ (8005858 <HAL_DMA_IRQHandler+0x410>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d02c      	beq.n	8005736 <HAL_DMA_IRQHandler+0x2ee>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a5e      	ldr	r2, [pc, #376]	@ (800585c <HAL_DMA_IRQHandler+0x414>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d027      	beq.n	8005736 <HAL_DMA_IRQHandler+0x2ee>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a5d      	ldr	r2, [pc, #372]	@ (8005860 <HAL_DMA_IRQHandler+0x418>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d022      	beq.n	8005736 <HAL_DMA_IRQHandler+0x2ee>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a5b      	ldr	r2, [pc, #364]	@ (8005864 <HAL_DMA_IRQHandler+0x41c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d01d      	beq.n	8005736 <HAL_DMA_IRQHandler+0x2ee>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a5a      	ldr	r2, [pc, #360]	@ (8005868 <HAL_DMA_IRQHandler+0x420>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d018      	beq.n	8005736 <HAL_DMA_IRQHandler+0x2ee>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a58      	ldr	r2, [pc, #352]	@ (800586c <HAL_DMA_IRQHandler+0x424>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d013      	beq.n	8005736 <HAL_DMA_IRQHandler+0x2ee>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a57      	ldr	r2, [pc, #348]	@ (8005870 <HAL_DMA_IRQHandler+0x428>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d00e      	beq.n	8005736 <HAL_DMA_IRQHandler+0x2ee>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a55      	ldr	r2, [pc, #340]	@ (8005874 <HAL_DMA_IRQHandler+0x42c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d009      	beq.n	8005736 <HAL_DMA_IRQHandler+0x2ee>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a54      	ldr	r2, [pc, #336]	@ (8005878 <HAL_DMA_IRQHandler+0x430>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d004      	beq.n	8005736 <HAL_DMA_IRQHandler+0x2ee>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a52      	ldr	r2, [pc, #328]	@ (800587c <HAL_DMA_IRQHandler+0x434>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d10a      	bne.n	800574c <HAL_DMA_IRQHandler+0x304>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005740:	2b00      	cmp	r3, #0
 8005742:	bf14      	ite	ne
 8005744:	2301      	movne	r3, #1
 8005746:	2300      	moveq	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	e003      	b.n	8005754 <HAL_DMA_IRQHandler+0x30c>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2300      	movs	r3, #0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00d      	beq.n	8005774 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800575c:	f003 031f 	and.w	r3, r3, #31
 8005760:	2201      	movs	r2, #1
 8005762:	409a      	lsls	r2, r3
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800576c:	f043 0202 	orr.w	r2, r3, #2
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	2204      	movs	r2, #4
 800577e:	409a      	lsls	r2, r3
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	4013      	ands	r3, r2
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 808f 	beq.w	80058a8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a2c      	ldr	r2, [pc, #176]	@ (8005840 <HAL_DMA_IRQHandler+0x3f8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d04a      	beq.n	800582a <HAL_DMA_IRQHandler+0x3e2>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a2a      	ldr	r2, [pc, #168]	@ (8005844 <HAL_DMA_IRQHandler+0x3fc>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d045      	beq.n	800582a <HAL_DMA_IRQHandler+0x3e2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a29      	ldr	r2, [pc, #164]	@ (8005848 <HAL_DMA_IRQHandler+0x400>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d040      	beq.n	800582a <HAL_DMA_IRQHandler+0x3e2>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a27      	ldr	r2, [pc, #156]	@ (800584c <HAL_DMA_IRQHandler+0x404>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d03b      	beq.n	800582a <HAL_DMA_IRQHandler+0x3e2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a26      	ldr	r2, [pc, #152]	@ (8005850 <HAL_DMA_IRQHandler+0x408>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d036      	beq.n	800582a <HAL_DMA_IRQHandler+0x3e2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a24      	ldr	r2, [pc, #144]	@ (8005854 <HAL_DMA_IRQHandler+0x40c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d031      	beq.n	800582a <HAL_DMA_IRQHandler+0x3e2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a23      	ldr	r2, [pc, #140]	@ (8005858 <HAL_DMA_IRQHandler+0x410>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d02c      	beq.n	800582a <HAL_DMA_IRQHandler+0x3e2>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a21      	ldr	r2, [pc, #132]	@ (800585c <HAL_DMA_IRQHandler+0x414>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d027      	beq.n	800582a <HAL_DMA_IRQHandler+0x3e2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a20      	ldr	r2, [pc, #128]	@ (8005860 <HAL_DMA_IRQHandler+0x418>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d022      	beq.n	800582a <HAL_DMA_IRQHandler+0x3e2>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a1e      	ldr	r2, [pc, #120]	@ (8005864 <HAL_DMA_IRQHandler+0x41c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d01d      	beq.n	800582a <HAL_DMA_IRQHandler+0x3e2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a1d      	ldr	r2, [pc, #116]	@ (8005868 <HAL_DMA_IRQHandler+0x420>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d018      	beq.n	800582a <HAL_DMA_IRQHandler+0x3e2>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a1b      	ldr	r2, [pc, #108]	@ (800586c <HAL_DMA_IRQHandler+0x424>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <HAL_DMA_IRQHandler+0x3e2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a1a      	ldr	r2, [pc, #104]	@ (8005870 <HAL_DMA_IRQHandler+0x428>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00e      	beq.n	800582a <HAL_DMA_IRQHandler+0x3e2>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a18      	ldr	r2, [pc, #96]	@ (8005874 <HAL_DMA_IRQHandler+0x42c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d009      	beq.n	800582a <HAL_DMA_IRQHandler+0x3e2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a17      	ldr	r2, [pc, #92]	@ (8005878 <HAL_DMA_IRQHandler+0x430>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d004      	beq.n	800582a <HAL_DMA_IRQHandler+0x3e2>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a15      	ldr	r2, [pc, #84]	@ (800587c <HAL_DMA_IRQHandler+0x434>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d12a      	bne.n	8005880 <HAL_DMA_IRQHandler+0x438>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	bf14      	ite	ne
 8005838:	2301      	movne	r3, #1
 800583a:	2300      	moveq	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	e023      	b.n	8005888 <HAL_DMA_IRQHandler+0x440>
 8005840:	40020010 	.word	0x40020010
 8005844:	40020028 	.word	0x40020028
 8005848:	40020040 	.word	0x40020040
 800584c:	40020058 	.word	0x40020058
 8005850:	40020070 	.word	0x40020070
 8005854:	40020088 	.word	0x40020088
 8005858:	400200a0 	.word	0x400200a0
 800585c:	400200b8 	.word	0x400200b8
 8005860:	40020410 	.word	0x40020410
 8005864:	40020428 	.word	0x40020428
 8005868:	40020440 	.word	0x40020440
 800586c:	40020458 	.word	0x40020458
 8005870:	40020470 	.word	0x40020470
 8005874:	40020488 	.word	0x40020488
 8005878:	400204a0 	.word	0x400204a0
 800587c:	400204b8 	.word	0x400204b8
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2300      	movs	r3, #0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00d      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	2204      	movs	r2, #4
 8005896:	409a      	lsls	r2, r3
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a0:	f043 0204 	orr.w	r2, r3, #4
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ac:	f003 031f 	and.w	r3, r3, #31
 80058b0:	2210      	movs	r2, #16
 80058b2:	409a      	lsls	r2, r3
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	4013      	ands	r3, r2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 80a6 	beq.w	8005a0a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a85      	ldr	r2, [pc, #532]	@ (8005ad8 <HAL_DMA_IRQHandler+0x690>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d04a      	beq.n	800595e <HAL_DMA_IRQHandler+0x516>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a83      	ldr	r2, [pc, #524]	@ (8005adc <HAL_DMA_IRQHandler+0x694>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d045      	beq.n	800595e <HAL_DMA_IRQHandler+0x516>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a82      	ldr	r2, [pc, #520]	@ (8005ae0 <HAL_DMA_IRQHandler+0x698>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d040      	beq.n	800595e <HAL_DMA_IRQHandler+0x516>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a80      	ldr	r2, [pc, #512]	@ (8005ae4 <HAL_DMA_IRQHandler+0x69c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d03b      	beq.n	800595e <HAL_DMA_IRQHandler+0x516>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a7f      	ldr	r2, [pc, #508]	@ (8005ae8 <HAL_DMA_IRQHandler+0x6a0>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d036      	beq.n	800595e <HAL_DMA_IRQHandler+0x516>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a7d      	ldr	r2, [pc, #500]	@ (8005aec <HAL_DMA_IRQHandler+0x6a4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d031      	beq.n	800595e <HAL_DMA_IRQHandler+0x516>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a7c      	ldr	r2, [pc, #496]	@ (8005af0 <HAL_DMA_IRQHandler+0x6a8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d02c      	beq.n	800595e <HAL_DMA_IRQHandler+0x516>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a7a      	ldr	r2, [pc, #488]	@ (8005af4 <HAL_DMA_IRQHandler+0x6ac>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d027      	beq.n	800595e <HAL_DMA_IRQHandler+0x516>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a79      	ldr	r2, [pc, #484]	@ (8005af8 <HAL_DMA_IRQHandler+0x6b0>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d022      	beq.n	800595e <HAL_DMA_IRQHandler+0x516>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a77      	ldr	r2, [pc, #476]	@ (8005afc <HAL_DMA_IRQHandler+0x6b4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d01d      	beq.n	800595e <HAL_DMA_IRQHandler+0x516>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a76      	ldr	r2, [pc, #472]	@ (8005b00 <HAL_DMA_IRQHandler+0x6b8>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d018      	beq.n	800595e <HAL_DMA_IRQHandler+0x516>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a74      	ldr	r2, [pc, #464]	@ (8005b04 <HAL_DMA_IRQHandler+0x6bc>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d013      	beq.n	800595e <HAL_DMA_IRQHandler+0x516>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a73      	ldr	r2, [pc, #460]	@ (8005b08 <HAL_DMA_IRQHandler+0x6c0>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d00e      	beq.n	800595e <HAL_DMA_IRQHandler+0x516>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a71      	ldr	r2, [pc, #452]	@ (8005b0c <HAL_DMA_IRQHandler+0x6c4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d009      	beq.n	800595e <HAL_DMA_IRQHandler+0x516>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a70      	ldr	r2, [pc, #448]	@ (8005b10 <HAL_DMA_IRQHandler+0x6c8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d004      	beq.n	800595e <HAL_DMA_IRQHandler+0x516>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a6e      	ldr	r2, [pc, #440]	@ (8005b14 <HAL_DMA_IRQHandler+0x6cc>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d10a      	bne.n	8005974 <HAL_DMA_IRQHandler+0x52c>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0308 	and.w	r3, r3, #8
 8005968:	2b00      	cmp	r3, #0
 800596a:	bf14      	ite	ne
 800596c:	2301      	movne	r3, #1
 800596e:	2300      	moveq	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	e009      	b.n	8005988 <HAL_DMA_IRQHandler+0x540>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b00      	cmp	r3, #0
 8005980:	bf14      	ite	ne
 8005982:	2301      	movne	r3, #1
 8005984:	2300      	moveq	r3, #0
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d03e      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005990:	f003 031f 	and.w	r3, r3, #31
 8005994:	2210      	movs	r2, #16
 8005996:	409a      	lsls	r2, r3
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d018      	beq.n	80059dc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d108      	bne.n	80059ca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d024      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	4798      	blx	r3
 80059c8:	e01f      	b.n	8005a0a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d01b      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	4798      	blx	r3
 80059da:	e016      	b.n	8005a0a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d107      	bne.n	80059fa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0208 	bic.w	r2, r2, #8
 80059f8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a0e:	f003 031f 	and.w	r3, r3, #31
 8005a12:	2220      	movs	r2, #32
 8005a14:	409a      	lsls	r2, r3
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 8110 	beq.w	8005c40 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a2c      	ldr	r2, [pc, #176]	@ (8005ad8 <HAL_DMA_IRQHandler+0x690>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d04a      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0x678>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a2b      	ldr	r2, [pc, #172]	@ (8005adc <HAL_DMA_IRQHandler+0x694>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d045      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0x678>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a29      	ldr	r2, [pc, #164]	@ (8005ae0 <HAL_DMA_IRQHandler+0x698>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d040      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0x678>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a28      	ldr	r2, [pc, #160]	@ (8005ae4 <HAL_DMA_IRQHandler+0x69c>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d03b      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0x678>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a26      	ldr	r2, [pc, #152]	@ (8005ae8 <HAL_DMA_IRQHandler+0x6a0>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d036      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0x678>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a25      	ldr	r2, [pc, #148]	@ (8005aec <HAL_DMA_IRQHandler+0x6a4>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d031      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0x678>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a23      	ldr	r2, [pc, #140]	@ (8005af0 <HAL_DMA_IRQHandler+0x6a8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d02c      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0x678>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a22      	ldr	r2, [pc, #136]	@ (8005af4 <HAL_DMA_IRQHandler+0x6ac>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d027      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0x678>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a20      	ldr	r2, [pc, #128]	@ (8005af8 <HAL_DMA_IRQHandler+0x6b0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d022      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0x678>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a1f      	ldr	r2, [pc, #124]	@ (8005afc <HAL_DMA_IRQHandler+0x6b4>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d01d      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0x678>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a1d      	ldr	r2, [pc, #116]	@ (8005b00 <HAL_DMA_IRQHandler+0x6b8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d018      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0x678>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a1c      	ldr	r2, [pc, #112]	@ (8005b04 <HAL_DMA_IRQHandler+0x6bc>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d013      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0x678>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8005b08 <HAL_DMA_IRQHandler+0x6c0>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d00e      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0x678>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a19      	ldr	r2, [pc, #100]	@ (8005b0c <HAL_DMA_IRQHandler+0x6c4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d009      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0x678>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a17      	ldr	r2, [pc, #92]	@ (8005b10 <HAL_DMA_IRQHandler+0x6c8>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d004      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0x678>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a16      	ldr	r2, [pc, #88]	@ (8005b14 <HAL_DMA_IRQHandler+0x6cc>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d12b      	bne.n	8005b18 <HAL_DMA_IRQHandler+0x6d0>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0310 	and.w	r3, r3, #16
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	bf14      	ite	ne
 8005ace:	2301      	movne	r3, #1
 8005ad0:	2300      	moveq	r3, #0
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	e02a      	b.n	8005b2c <HAL_DMA_IRQHandler+0x6e4>
 8005ad6:	bf00      	nop
 8005ad8:	40020010 	.word	0x40020010
 8005adc:	40020028 	.word	0x40020028
 8005ae0:	40020040 	.word	0x40020040
 8005ae4:	40020058 	.word	0x40020058
 8005ae8:	40020070 	.word	0x40020070
 8005aec:	40020088 	.word	0x40020088
 8005af0:	400200a0 	.word	0x400200a0
 8005af4:	400200b8 	.word	0x400200b8
 8005af8:	40020410 	.word	0x40020410
 8005afc:	40020428 	.word	0x40020428
 8005b00:	40020440 	.word	0x40020440
 8005b04:	40020458 	.word	0x40020458
 8005b08:	40020470 	.word	0x40020470
 8005b0c:	40020488 	.word	0x40020488
 8005b10:	400204a0 	.word	0x400204a0
 8005b14:	400204b8 	.word	0x400204b8
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	bf14      	ite	ne
 8005b26:	2301      	movne	r3, #1
 8005b28:	2300      	moveq	r3, #0
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 8087 	beq.w	8005c40 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b36:	f003 031f 	and.w	r3, r3, #31
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	409a      	lsls	r2, r3
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	d139      	bne.n	8005bc2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0216 	bic.w	r2, r2, #22
 8005b5c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	695a      	ldr	r2, [r3, #20]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b6c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d103      	bne.n	8005b7e <HAL_DMA_IRQHandler+0x736>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d007      	beq.n	8005b8e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0208 	bic.w	r2, r2, #8
 8005b8c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b92:	f003 031f 	and.w	r3, r3, #31
 8005b96:	223f      	movs	r2, #63	@ 0x3f
 8005b98:	409a      	lsls	r2, r3
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 834a 	beq.w	800624c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	4798      	blx	r3
          }
          return;
 8005bc0:	e344      	b.n	800624c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d018      	beq.n	8005c02 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d108      	bne.n	8005bf0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d02c      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	4798      	blx	r3
 8005bee:	e027      	b.n	8005c40 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d023      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	4798      	blx	r3
 8005c00:	e01e      	b.n	8005c40 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10f      	bne.n	8005c30 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0210 	bic.w	r2, r2, #16
 8005c1e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 8306 	beq.w	8006256 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 8088 	beq.w	8005d68 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2204      	movs	r2, #4
 8005c5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a7a      	ldr	r2, [pc, #488]	@ (8005e50 <HAL_DMA_IRQHandler+0xa08>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d04a      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x8b8>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a79      	ldr	r2, [pc, #484]	@ (8005e54 <HAL_DMA_IRQHandler+0xa0c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d045      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x8b8>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a77      	ldr	r2, [pc, #476]	@ (8005e58 <HAL_DMA_IRQHandler+0xa10>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d040      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x8b8>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a76      	ldr	r2, [pc, #472]	@ (8005e5c <HAL_DMA_IRQHandler+0xa14>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d03b      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x8b8>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a74      	ldr	r2, [pc, #464]	@ (8005e60 <HAL_DMA_IRQHandler+0xa18>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d036      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x8b8>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a73      	ldr	r2, [pc, #460]	@ (8005e64 <HAL_DMA_IRQHandler+0xa1c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d031      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x8b8>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a71      	ldr	r2, [pc, #452]	@ (8005e68 <HAL_DMA_IRQHandler+0xa20>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d02c      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x8b8>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a70      	ldr	r2, [pc, #448]	@ (8005e6c <HAL_DMA_IRQHandler+0xa24>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d027      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x8b8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a6e      	ldr	r2, [pc, #440]	@ (8005e70 <HAL_DMA_IRQHandler+0xa28>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d022      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x8b8>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a6d      	ldr	r2, [pc, #436]	@ (8005e74 <HAL_DMA_IRQHandler+0xa2c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d01d      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x8b8>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a6b      	ldr	r2, [pc, #428]	@ (8005e78 <HAL_DMA_IRQHandler+0xa30>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d018      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x8b8>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a6a      	ldr	r2, [pc, #424]	@ (8005e7c <HAL_DMA_IRQHandler+0xa34>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d013      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x8b8>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a68      	ldr	r2, [pc, #416]	@ (8005e80 <HAL_DMA_IRQHandler+0xa38>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d00e      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x8b8>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a67      	ldr	r2, [pc, #412]	@ (8005e84 <HAL_DMA_IRQHandler+0xa3c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d009      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x8b8>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a65      	ldr	r2, [pc, #404]	@ (8005e88 <HAL_DMA_IRQHandler+0xa40>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d004      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x8b8>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a64      	ldr	r2, [pc, #400]	@ (8005e8c <HAL_DMA_IRQHandler+0xa44>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d108      	bne.n	8005d12 <HAL_DMA_IRQHandler+0x8ca>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0201 	bic.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	e007      	b.n	8005d22 <HAL_DMA_IRQHandler+0x8da>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0201 	bic.w	r2, r2, #1
 8005d20:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	3301      	adds	r3, #1
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d307      	bcc.n	8005d3e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1f2      	bne.n	8005d22 <HAL_DMA_IRQHandler+0x8da>
 8005d3c:	e000      	b.n	8005d40 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005d3e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d004      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2203      	movs	r2, #3
 8005d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005d56:	e003      	b.n	8005d60 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 8272 	beq.w	8006256 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	4798      	blx	r3
 8005d7a:	e26c      	b.n	8006256 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a43      	ldr	r2, [pc, #268]	@ (8005e90 <HAL_DMA_IRQHandler+0xa48>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d022      	beq.n	8005dcc <HAL_DMA_IRQHandler+0x984>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a42      	ldr	r2, [pc, #264]	@ (8005e94 <HAL_DMA_IRQHandler+0xa4c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d01d      	beq.n	8005dcc <HAL_DMA_IRQHandler+0x984>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a40      	ldr	r2, [pc, #256]	@ (8005e98 <HAL_DMA_IRQHandler+0xa50>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d018      	beq.n	8005dcc <HAL_DMA_IRQHandler+0x984>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a3f      	ldr	r2, [pc, #252]	@ (8005e9c <HAL_DMA_IRQHandler+0xa54>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d013      	beq.n	8005dcc <HAL_DMA_IRQHandler+0x984>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a3d      	ldr	r2, [pc, #244]	@ (8005ea0 <HAL_DMA_IRQHandler+0xa58>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d00e      	beq.n	8005dcc <HAL_DMA_IRQHandler+0x984>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a3c      	ldr	r2, [pc, #240]	@ (8005ea4 <HAL_DMA_IRQHandler+0xa5c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d009      	beq.n	8005dcc <HAL_DMA_IRQHandler+0x984>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a3a      	ldr	r2, [pc, #232]	@ (8005ea8 <HAL_DMA_IRQHandler+0xa60>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d004      	beq.n	8005dcc <HAL_DMA_IRQHandler+0x984>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a39      	ldr	r2, [pc, #228]	@ (8005eac <HAL_DMA_IRQHandler+0xa64>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d101      	bne.n	8005dd0 <HAL_DMA_IRQHandler+0x988>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e000      	b.n	8005dd2 <HAL_DMA_IRQHandler+0x98a>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 823f 	beq.w	8006256 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de4:	f003 031f 	and.w	r3, r3, #31
 8005de8:	2204      	movs	r2, #4
 8005dea:	409a      	lsls	r2, r3
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	4013      	ands	r3, r2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 80cd 	beq.w	8005f90 <HAL_DMA_IRQHandler+0xb48>
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 80c7 	beq.w	8005f90 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e06:	f003 031f 	and.w	r3, r3, #31
 8005e0a:	2204      	movs	r2, #4
 8005e0c:	409a      	lsls	r2, r3
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d049      	beq.n	8005eb0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d109      	bne.n	8005e3a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 8210 	beq.w	8006250 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e38:	e20a      	b.n	8006250 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 8206 	beq.w	8006250 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e4c:	e200      	b.n	8006250 <HAL_DMA_IRQHandler+0xe08>
 8005e4e:	bf00      	nop
 8005e50:	40020010 	.word	0x40020010
 8005e54:	40020028 	.word	0x40020028
 8005e58:	40020040 	.word	0x40020040
 8005e5c:	40020058 	.word	0x40020058
 8005e60:	40020070 	.word	0x40020070
 8005e64:	40020088 	.word	0x40020088
 8005e68:	400200a0 	.word	0x400200a0
 8005e6c:	400200b8 	.word	0x400200b8
 8005e70:	40020410 	.word	0x40020410
 8005e74:	40020428 	.word	0x40020428
 8005e78:	40020440 	.word	0x40020440
 8005e7c:	40020458 	.word	0x40020458
 8005e80:	40020470 	.word	0x40020470
 8005e84:	40020488 	.word	0x40020488
 8005e88:	400204a0 	.word	0x400204a0
 8005e8c:	400204b8 	.word	0x400204b8
 8005e90:	58025408 	.word	0x58025408
 8005e94:	5802541c 	.word	0x5802541c
 8005e98:	58025430 	.word	0x58025430
 8005e9c:	58025444 	.word	0x58025444
 8005ea0:	58025458 	.word	0x58025458
 8005ea4:	5802546c 	.word	0x5802546c
 8005ea8:	58025480 	.word	0x58025480
 8005eac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d160      	bne.n	8005f7c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a7f      	ldr	r2, [pc, #508]	@ (80060bc <HAL_DMA_IRQHandler+0xc74>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d04a      	beq.n	8005f5a <HAL_DMA_IRQHandler+0xb12>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a7d      	ldr	r2, [pc, #500]	@ (80060c0 <HAL_DMA_IRQHandler+0xc78>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d045      	beq.n	8005f5a <HAL_DMA_IRQHandler+0xb12>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a7c      	ldr	r2, [pc, #496]	@ (80060c4 <HAL_DMA_IRQHandler+0xc7c>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d040      	beq.n	8005f5a <HAL_DMA_IRQHandler+0xb12>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a7a      	ldr	r2, [pc, #488]	@ (80060c8 <HAL_DMA_IRQHandler+0xc80>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d03b      	beq.n	8005f5a <HAL_DMA_IRQHandler+0xb12>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a79      	ldr	r2, [pc, #484]	@ (80060cc <HAL_DMA_IRQHandler+0xc84>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d036      	beq.n	8005f5a <HAL_DMA_IRQHandler+0xb12>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a77      	ldr	r2, [pc, #476]	@ (80060d0 <HAL_DMA_IRQHandler+0xc88>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d031      	beq.n	8005f5a <HAL_DMA_IRQHandler+0xb12>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a76      	ldr	r2, [pc, #472]	@ (80060d4 <HAL_DMA_IRQHandler+0xc8c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d02c      	beq.n	8005f5a <HAL_DMA_IRQHandler+0xb12>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a74      	ldr	r2, [pc, #464]	@ (80060d8 <HAL_DMA_IRQHandler+0xc90>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d027      	beq.n	8005f5a <HAL_DMA_IRQHandler+0xb12>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a73      	ldr	r2, [pc, #460]	@ (80060dc <HAL_DMA_IRQHandler+0xc94>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d022      	beq.n	8005f5a <HAL_DMA_IRQHandler+0xb12>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a71      	ldr	r2, [pc, #452]	@ (80060e0 <HAL_DMA_IRQHandler+0xc98>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d01d      	beq.n	8005f5a <HAL_DMA_IRQHandler+0xb12>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a70      	ldr	r2, [pc, #448]	@ (80060e4 <HAL_DMA_IRQHandler+0xc9c>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d018      	beq.n	8005f5a <HAL_DMA_IRQHandler+0xb12>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a6e      	ldr	r2, [pc, #440]	@ (80060e8 <HAL_DMA_IRQHandler+0xca0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d013      	beq.n	8005f5a <HAL_DMA_IRQHandler+0xb12>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a6d      	ldr	r2, [pc, #436]	@ (80060ec <HAL_DMA_IRQHandler+0xca4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d00e      	beq.n	8005f5a <HAL_DMA_IRQHandler+0xb12>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a6b      	ldr	r2, [pc, #428]	@ (80060f0 <HAL_DMA_IRQHandler+0xca8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d009      	beq.n	8005f5a <HAL_DMA_IRQHandler+0xb12>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a6a      	ldr	r2, [pc, #424]	@ (80060f4 <HAL_DMA_IRQHandler+0xcac>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d004      	beq.n	8005f5a <HAL_DMA_IRQHandler+0xb12>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a68      	ldr	r2, [pc, #416]	@ (80060f8 <HAL_DMA_IRQHandler+0xcb0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d108      	bne.n	8005f6c <HAL_DMA_IRQHandler+0xb24>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0208 	bic.w	r2, r2, #8
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	e007      	b.n	8005f7c <HAL_DMA_IRQHandler+0xb34>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0204 	bic.w	r2, r2, #4
 8005f7a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 8165 	beq.w	8006250 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f8e:	e15f      	b.n	8006250 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f94:	f003 031f 	and.w	r3, r3, #31
 8005f98:	2202      	movs	r2, #2
 8005f9a:	409a      	lsls	r2, r3
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 80c5 	beq.w	8006130 <HAL_DMA_IRQHandler+0xce8>
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 80bf 	beq.w	8006130 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fb6:	f003 031f 	and.w	r3, r3, #31
 8005fba:	2202      	movs	r2, #2
 8005fbc:	409a      	lsls	r2, r3
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d018      	beq.n	8005ffe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d109      	bne.n	8005fea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 813a 	beq.w	8006254 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fe8:	e134      	b.n	8006254 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 8130 	beq.w	8006254 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ffc:	e12a      	b.n	8006254 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f003 0320 	and.w	r3, r3, #32
 8006004:	2b00      	cmp	r3, #0
 8006006:	f040 8089 	bne.w	800611c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a2b      	ldr	r2, [pc, #172]	@ (80060bc <HAL_DMA_IRQHandler+0xc74>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d04a      	beq.n	80060aa <HAL_DMA_IRQHandler+0xc62>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a29      	ldr	r2, [pc, #164]	@ (80060c0 <HAL_DMA_IRQHandler+0xc78>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d045      	beq.n	80060aa <HAL_DMA_IRQHandler+0xc62>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a28      	ldr	r2, [pc, #160]	@ (80060c4 <HAL_DMA_IRQHandler+0xc7c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d040      	beq.n	80060aa <HAL_DMA_IRQHandler+0xc62>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a26      	ldr	r2, [pc, #152]	@ (80060c8 <HAL_DMA_IRQHandler+0xc80>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d03b      	beq.n	80060aa <HAL_DMA_IRQHandler+0xc62>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a25      	ldr	r2, [pc, #148]	@ (80060cc <HAL_DMA_IRQHandler+0xc84>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d036      	beq.n	80060aa <HAL_DMA_IRQHandler+0xc62>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a23      	ldr	r2, [pc, #140]	@ (80060d0 <HAL_DMA_IRQHandler+0xc88>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d031      	beq.n	80060aa <HAL_DMA_IRQHandler+0xc62>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a22      	ldr	r2, [pc, #136]	@ (80060d4 <HAL_DMA_IRQHandler+0xc8c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d02c      	beq.n	80060aa <HAL_DMA_IRQHandler+0xc62>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a20      	ldr	r2, [pc, #128]	@ (80060d8 <HAL_DMA_IRQHandler+0xc90>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d027      	beq.n	80060aa <HAL_DMA_IRQHandler+0xc62>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a1f      	ldr	r2, [pc, #124]	@ (80060dc <HAL_DMA_IRQHandler+0xc94>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d022      	beq.n	80060aa <HAL_DMA_IRQHandler+0xc62>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a1d      	ldr	r2, [pc, #116]	@ (80060e0 <HAL_DMA_IRQHandler+0xc98>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d01d      	beq.n	80060aa <HAL_DMA_IRQHandler+0xc62>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a1c      	ldr	r2, [pc, #112]	@ (80060e4 <HAL_DMA_IRQHandler+0xc9c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d018      	beq.n	80060aa <HAL_DMA_IRQHandler+0xc62>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a1a      	ldr	r2, [pc, #104]	@ (80060e8 <HAL_DMA_IRQHandler+0xca0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d013      	beq.n	80060aa <HAL_DMA_IRQHandler+0xc62>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a19      	ldr	r2, [pc, #100]	@ (80060ec <HAL_DMA_IRQHandler+0xca4>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00e      	beq.n	80060aa <HAL_DMA_IRQHandler+0xc62>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a17      	ldr	r2, [pc, #92]	@ (80060f0 <HAL_DMA_IRQHandler+0xca8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d009      	beq.n	80060aa <HAL_DMA_IRQHandler+0xc62>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a16      	ldr	r2, [pc, #88]	@ (80060f4 <HAL_DMA_IRQHandler+0xcac>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d004      	beq.n	80060aa <HAL_DMA_IRQHandler+0xc62>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a14      	ldr	r2, [pc, #80]	@ (80060f8 <HAL_DMA_IRQHandler+0xcb0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d128      	bne.n	80060fc <HAL_DMA_IRQHandler+0xcb4>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0214 	bic.w	r2, r2, #20
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	e027      	b.n	800610c <HAL_DMA_IRQHandler+0xcc4>
 80060bc:	40020010 	.word	0x40020010
 80060c0:	40020028 	.word	0x40020028
 80060c4:	40020040 	.word	0x40020040
 80060c8:	40020058 	.word	0x40020058
 80060cc:	40020070 	.word	0x40020070
 80060d0:	40020088 	.word	0x40020088
 80060d4:	400200a0 	.word	0x400200a0
 80060d8:	400200b8 	.word	0x400200b8
 80060dc:	40020410 	.word	0x40020410
 80060e0:	40020428 	.word	0x40020428
 80060e4:	40020440 	.word	0x40020440
 80060e8:	40020458 	.word	0x40020458
 80060ec:	40020470 	.word	0x40020470
 80060f0:	40020488 	.word	0x40020488
 80060f4:	400204a0 	.word	0x400204a0
 80060f8:	400204b8 	.word	0x400204b8
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 020a 	bic.w	r2, r2, #10
 800610a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 8097 	beq.w	8006254 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800612e:	e091      	b.n	8006254 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006134:	f003 031f 	and.w	r3, r3, #31
 8006138:	2208      	movs	r2, #8
 800613a:	409a      	lsls	r2, r3
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	4013      	ands	r3, r2
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 8088 	beq.w	8006256 <HAL_DMA_IRQHandler+0xe0e>
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f003 0308 	and.w	r3, r3, #8
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 8082 	beq.w	8006256 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a41      	ldr	r2, [pc, #260]	@ (800625c <HAL_DMA_IRQHandler+0xe14>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d04a      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xdaa>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a3f      	ldr	r2, [pc, #252]	@ (8006260 <HAL_DMA_IRQHandler+0xe18>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d045      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xdaa>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a3e      	ldr	r2, [pc, #248]	@ (8006264 <HAL_DMA_IRQHandler+0xe1c>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d040      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xdaa>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a3c      	ldr	r2, [pc, #240]	@ (8006268 <HAL_DMA_IRQHandler+0xe20>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d03b      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xdaa>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a3b      	ldr	r2, [pc, #236]	@ (800626c <HAL_DMA_IRQHandler+0xe24>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d036      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xdaa>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a39      	ldr	r2, [pc, #228]	@ (8006270 <HAL_DMA_IRQHandler+0xe28>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d031      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xdaa>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a38      	ldr	r2, [pc, #224]	@ (8006274 <HAL_DMA_IRQHandler+0xe2c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d02c      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xdaa>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a36      	ldr	r2, [pc, #216]	@ (8006278 <HAL_DMA_IRQHandler+0xe30>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d027      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xdaa>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a35      	ldr	r2, [pc, #212]	@ (800627c <HAL_DMA_IRQHandler+0xe34>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d022      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xdaa>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a33      	ldr	r2, [pc, #204]	@ (8006280 <HAL_DMA_IRQHandler+0xe38>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d01d      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xdaa>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a32      	ldr	r2, [pc, #200]	@ (8006284 <HAL_DMA_IRQHandler+0xe3c>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d018      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xdaa>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a30      	ldr	r2, [pc, #192]	@ (8006288 <HAL_DMA_IRQHandler+0xe40>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d013      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xdaa>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a2f      	ldr	r2, [pc, #188]	@ (800628c <HAL_DMA_IRQHandler+0xe44>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d00e      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xdaa>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a2d      	ldr	r2, [pc, #180]	@ (8006290 <HAL_DMA_IRQHandler+0xe48>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d009      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xdaa>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a2c      	ldr	r2, [pc, #176]	@ (8006294 <HAL_DMA_IRQHandler+0xe4c>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d004      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xdaa>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a2a      	ldr	r2, [pc, #168]	@ (8006298 <HAL_DMA_IRQHandler+0xe50>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d108      	bne.n	8006204 <HAL_DMA_IRQHandler+0xdbc>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 021c 	bic.w	r2, r2, #28
 8006200:	601a      	str	r2, [r3, #0]
 8006202:	e007      	b.n	8006214 <HAL_DMA_IRQHandler+0xdcc>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 020e 	bic.w	r2, r2, #14
 8006212:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006218:	f003 031f 	and.w	r3, r3, #31
 800621c:	2201      	movs	r2, #1
 800621e:	409a      	lsls	r2, r3
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800623e:	2b00      	cmp	r3, #0
 8006240:	d009      	beq.n	8006256 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	4798      	blx	r3
 800624a:	e004      	b.n	8006256 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800624c:	bf00      	nop
 800624e:	e002      	b.n	8006256 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006250:	bf00      	nop
 8006252:	e000      	b.n	8006256 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006254:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006256:	3728      	adds	r7, #40	@ 0x28
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	40020010 	.word	0x40020010
 8006260:	40020028 	.word	0x40020028
 8006264:	40020040 	.word	0x40020040
 8006268:	40020058 	.word	0x40020058
 800626c:	40020070 	.word	0x40020070
 8006270:	40020088 	.word	0x40020088
 8006274:	400200a0 	.word	0x400200a0
 8006278:	400200b8 	.word	0x400200b8
 800627c:	40020410 	.word	0x40020410
 8006280:	40020428 	.word	0x40020428
 8006284:	40020440 	.word	0x40020440
 8006288:	40020458 	.word	0x40020458
 800628c:	40020470 	.word	0x40020470
 8006290:	40020488 	.word	0x40020488
 8006294:	400204a0 	.word	0x400204a0
 8006298:	400204b8 	.word	0x400204b8

0800629c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80062aa:	b2db      	uxtb	r3, r3
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
 80062c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a7f      	ldr	r2, [pc, #508]	@ (80064d4 <DMA_SetConfig+0x21c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d072      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a7d      	ldr	r2, [pc, #500]	@ (80064d8 <DMA_SetConfig+0x220>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d06d      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a7c      	ldr	r2, [pc, #496]	@ (80064dc <DMA_SetConfig+0x224>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d068      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a7a      	ldr	r2, [pc, #488]	@ (80064e0 <DMA_SetConfig+0x228>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d063      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a79      	ldr	r2, [pc, #484]	@ (80064e4 <DMA_SetConfig+0x22c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d05e      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a77      	ldr	r2, [pc, #476]	@ (80064e8 <DMA_SetConfig+0x230>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d059      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a76      	ldr	r2, [pc, #472]	@ (80064ec <DMA_SetConfig+0x234>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d054      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a74      	ldr	r2, [pc, #464]	@ (80064f0 <DMA_SetConfig+0x238>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d04f      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a73      	ldr	r2, [pc, #460]	@ (80064f4 <DMA_SetConfig+0x23c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d04a      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a71      	ldr	r2, [pc, #452]	@ (80064f8 <DMA_SetConfig+0x240>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d045      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a70      	ldr	r2, [pc, #448]	@ (80064fc <DMA_SetConfig+0x244>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d040      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a6e      	ldr	r2, [pc, #440]	@ (8006500 <DMA_SetConfig+0x248>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d03b      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a6d      	ldr	r2, [pc, #436]	@ (8006504 <DMA_SetConfig+0x24c>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d036      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a6b      	ldr	r2, [pc, #428]	@ (8006508 <DMA_SetConfig+0x250>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d031      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a6a      	ldr	r2, [pc, #424]	@ (800650c <DMA_SetConfig+0x254>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d02c      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a68      	ldr	r2, [pc, #416]	@ (8006510 <DMA_SetConfig+0x258>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d027      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a67      	ldr	r2, [pc, #412]	@ (8006514 <DMA_SetConfig+0x25c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d022      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a65      	ldr	r2, [pc, #404]	@ (8006518 <DMA_SetConfig+0x260>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d01d      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a64      	ldr	r2, [pc, #400]	@ (800651c <DMA_SetConfig+0x264>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d018      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a62      	ldr	r2, [pc, #392]	@ (8006520 <DMA_SetConfig+0x268>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d013      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a61      	ldr	r2, [pc, #388]	@ (8006524 <DMA_SetConfig+0x26c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d00e      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a5f      	ldr	r2, [pc, #380]	@ (8006528 <DMA_SetConfig+0x270>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d009      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a5e      	ldr	r2, [pc, #376]	@ (800652c <DMA_SetConfig+0x274>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d004      	beq.n	80063c2 <DMA_SetConfig+0x10a>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a5c      	ldr	r2, [pc, #368]	@ (8006530 <DMA_SetConfig+0x278>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d101      	bne.n	80063c6 <DMA_SetConfig+0x10e>
 80063c2:	2301      	movs	r3, #1
 80063c4:	e000      	b.n	80063c8 <DMA_SetConfig+0x110>
 80063c6:	2300      	movs	r3, #0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00d      	beq.n	80063e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80063d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d004      	beq.n	80063e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80063e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a39      	ldr	r2, [pc, #228]	@ (80064d4 <DMA_SetConfig+0x21c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d04a      	beq.n	8006488 <DMA_SetConfig+0x1d0>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a38      	ldr	r2, [pc, #224]	@ (80064d8 <DMA_SetConfig+0x220>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d045      	beq.n	8006488 <DMA_SetConfig+0x1d0>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a36      	ldr	r2, [pc, #216]	@ (80064dc <DMA_SetConfig+0x224>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d040      	beq.n	8006488 <DMA_SetConfig+0x1d0>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a35      	ldr	r2, [pc, #212]	@ (80064e0 <DMA_SetConfig+0x228>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d03b      	beq.n	8006488 <DMA_SetConfig+0x1d0>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a33      	ldr	r2, [pc, #204]	@ (80064e4 <DMA_SetConfig+0x22c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d036      	beq.n	8006488 <DMA_SetConfig+0x1d0>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a32      	ldr	r2, [pc, #200]	@ (80064e8 <DMA_SetConfig+0x230>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d031      	beq.n	8006488 <DMA_SetConfig+0x1d0>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a30      	ldr	r2, [pc, #192]	@ (80064ec <DMA_SetConfig+0x234>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d02c      	beq.n	8006488 <DMA_SetConfig+0x1d0>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a2f      	ldr	r2, [pc, #188]	@ (80064f0 <DMA_SetConfig+0x238>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d027      	beq.n	8006488 <DMA_SetConfig+0x1d0>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a2d      	ldr	r2, [pc, #180]	@ (80064f4 <DMA_SetConfig+0x23c>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d022      	beq.n	8006488 <DMA_SetConfig+0x1d0>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a2c      	ldr	r2, [pc, #176]	@ (80064f8 <DMA_SetConfig+0x240>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d01d      	beq.n	8006488 <DMA_SetConfig+0x1d0>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a2a      	ldr	r2, [pc, #168]	@ (80064fc <DMA_SetConfig+0x244>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d018      	beq.n	8006488 <DMA_SetConfig+0x1d0>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a29      	ldr	r2, [pc, #164]	@ (8006500 <DMA_SetConfig+0x248>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d013      	beq.n	8006488 <DMA_SetConfig+0x1d0>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a27      	ldr	r2, [pc, #156]	@ (8006504 <DMA_SetConfig+0x24c>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d00e      	beq.n	8006488 <DMA_SetConfig+0x1d0>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a26      	ldr	r2, [pc, #152]	@ (8006508 <DMA_SetConfig+0x250>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d009      	beq.n	8006488 <DMA_SetConfig+0x1d0>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a24      	ldr	r2, [pc, #144]	@ (800650c <DMA_SetConfig+0x254>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d004      	beq.n	8006488 <DMA_SetConfig+0x1d0>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a23      	ldr	r2, [pc, #140]	@ (8006510 <DMA_SetConfig+0x258>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d101      	bne.n	800648c <DMA_SetConfig+0x1d4>
 8006488:	2301      	movs	r3, #1
 800648a:	e000      	b.n	800648e <DMA_SetConfig+0x1d6>
 800648c:	2300      	movs	r3, #0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d059      	beq.n	8006546 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006496:	f003 031f 	and.w	r3, r3, #31
 800649a:	223f      	movs	r2, #63	@ 0x3f
 800649c:	409a      	lsls	r2, r3
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80064b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	2b40      	cmp	r3, #64	@ 0x40
 80064c0:	d138      	bne.n	8006534 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80064d2:	e086      	b.n	80065e2 <DMA_SetConfig+0x32a>
 80064d4:	40020010 	.word	0x40020010
 80064d8:	40020028 	.word	0x40020028
 80064dc:	40020040 	.word	0x40020040
 80064e0:	40020058 	.word	0x40020058
 80064e4:	40020070 	.word	0x40020070
 80064e8:	40020088 	.word	0x40020088
 80064ec:	400200a0 	.word	0x400200a0
 80064f0:	400200b8 	.word	0x400200b8
 80064f4:	40020410 	.word	0x40020410
 80064f8:	40020428 	.word	0x40020428
 80064fc:	40020440 	.word	0x40020440
 8006500:	40020458 	.word	0x40020458
 8006504:	40020470 	.word	0x40020470
 8006508:	40020488 	.word	0x40020488
 800650c:	400204a0 	.word	0x400204a0
 8006510:	400204b8 	.word	0x400204b8
 8006514:	58025408 	.word	0x58025408
 8006518:	5802541c 	.word	0x5802541c
 800651c:	58025430 	.word	0x58025430
 8006520:	58025444 	.word	0x58025444
 8006524:	58025458 	.word	0x58025458
 8006528:	5802546c 	.word	0x5802546c
 800652c:	58025480 	.word	0x58025480
 8006530:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	60da      	str	r2, [r3, #12]
}
 8006544:	e04d      	b.n	80065e2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a29      	ldr	r2, [pc, #164]	@ (80065f0 <DMA_SetConfig+0x338>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d022      	beq.n	8006596 <DMA_SetConfig+0x2de>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a27      	ldr	r2, [pc, #156]	@ (80065f4 <DMA_SetConfig+0x33c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d01d      	beq.n	8006596 <DMA_SetConfig+0x2de>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a26      	ldr	r2, [pc, #152]	@ (80065f8 <DMA_SetConfig+0x340>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d018      	beq.n	8006596 <DMA_SetConfig+0x2de>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a24      	ldr	r2, [pc, #144]	@ (80065fc <DMA_SetConfig+0x344>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d013      	beq.n	8006596 <DMA_SetConfig+0x2de>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a23      	ldr	r2, [pc, #140]	@ (8006600 <DMA_SetConfig+0x348>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00e      	beq.n	8006596 <DMA_SetConfig+0x2de>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a21      	ldr	r2, [pc, #132]	@ (8006604 <DMA_SetConfig+0x34c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d009      	beq.n	8006596 <DMA_SetConfig+0x2de>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a20      	ldr	r2, [pc, #128]	@ (8006608 <DMA_SetConfig+0x350>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d004      	beq.n	8006596 <DMA_SetConfig+0x2de>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a1e      	ldr	r2, [pc, #120]	@ (800660c <DMA_SetConfig+0x354>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d101      	bne.n	800659a <DMA_SetConfig+0x2e2>
 8006596:	2301      	movs	r3, #1
 8006598:	e000      	b.n	800659c <DMA_SetConfig+0x2e4>
 800659a:	2300      	movs	r3, #0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d020      	beq.n	80065e2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065a4:	f003 031f 	and.w	r3, r3, #31
 80065a8:	2201      	movs	r2, #1
 80065aa:	409a      	lsls	r2, r3
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	683a      	ldr	r2, [r7, #0]
 80065b6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	2b40      	cmp	r3, #64	@ 0x40
 80065be:	d108      	bne.n	80065d2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	60da      	str	r2, [r3, #12]
}
 80065d0:	e007      	b.n	80065e2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	60da      	str	r2, [r3, #12]
}
 80065e2:	bf00      	nop
 80065e4:	371c      	adds	r7, #28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	58025408 	.word	0x58025408
 80065f4:	5802541c 	.word	0x5802541c
 80065f8:	58025430 	.word	0x58025430
 80065fc:	58025444 	.word	0x58025444
 8006600:	58025458 	.word	0x58025458
 8006604:	5802546c 	.word	0x5802546c
 8006608:	58025480 	.word	0x58025480
 800660c:	58025494 	.word	0x58025494

08006610 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a42      	ldr	r2, [pc, #264]	@ (8006728 <DMA_CalcBaseAndBitshift+0x118>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d04a      	beq.n	80066b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a41      	ldr	r2, [pc, #260]	@ (800672c <DMA_CalcBaseAndBitshift+0x11c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d045      	beq.n	80066b8 <DMA_CalcBaseAndBitshift+0xa8>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a3f      	ldr	r2, [pc, #252]	@ (8006730 <DMA_CalcBaseAndBitshift+0x120>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d040      	beq.n	80066b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a3e      	ldr	r2, [pc, #248]	@ (8006734 <DMA_CalcBaseAndBitshift+0x124>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d03b      	beq.n	80066b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a3c      	ldr	r2, [pc, #240]	@ (8006738 <DMA_CalcBaseAndBitshift+0x128>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d036      	beq.n	80066b8 <DMA_CalcBaseAndBitshift+0xa8>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a3b      	ldr	r2, [pc, #236]	@ (800673c <DMA_CalcBaseAndBitshift+0x12c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d031      	beq.n	80066b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a39      	ldr	r2, [pc, #228]	@ (8006740 <DMA_CalcBaseAndBitshift+0x130>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d02c      	beq.n	80066b8 <DMA_CalcBaseAndBitshift+0xa8>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a38      	ldr	r2, [pc, #224]	@ (8006744 <DMA_CalcBaseAndBitshift+0x134>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d027      	beq.n	80066b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a36      	ldr	r2, [pc, #216]	@ (8006748 <DMA_CalcBaseAndBitshift+0x138>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d022      	beq.n	80066b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a35      	ldr	r2, [pc, #212]	@ (800674c <DMA_CalcBaseAndBitshift+0x13c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d01d      	beq.n	80066b8 <DMA_CalcBaseAndBitshift+0xa8>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a33      	ldr	r2, [pc, #204]	@ (8006750 <DMA_CalcBaseAndBitshift+0x140>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d018      	beq.n	80066b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a32      	ldr	r2, [pc, #200]	@ (8006754 <DMA_CalcBaseAndBitshift+0x144>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d013      	beq.n	80066b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a30      	ldr	r2, [pc, #192]	@ (8006758 <DMA_CalcBaseAndBitshift+0x148>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d00e      	beq.n	80066b8 <DMA_CalcBaseAndBitshift+0xa8>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a2f      	ldr	r2, [pc, #188]	@ (800675c <DMA_CalcBaseAndBitshift+0x14c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d009      	beq.n	80066b8 <DMA_CalcBaseAndBitshift+0xa8>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a2d      	ldr	r2, [pc, #180]	@ (8006760 <DMA_CalcBaseAndBitshift+0x150>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d004      	beq.n	80066b8 <DMA_CalcBaseAndBitshift+0xa8>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a2c      	ldr	r2, [pc, #176]	@ (8006764 <DMA_CalcBaseAndBitshift+0x154>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d101      	bne.n	80066bc <DMA_CalcBaseAndBitshift+0xac>
 80066b8:	2301      	movs	r3, #1
 80066ba:	e000      	b.n	80066be <DMA_CalcBaseAndBitshift+0xae>
 80066bc:	2300      	movs	r3, #0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d024      	beq.n	800670c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	3b10      	subs	r3, #16
 80066ca:	4a27      	ldr	r2, [pc, #156]	@ (8006768 <DMA_CalcBaseAndBitshift+0x158>)
 80066cc:	fba2 2303 	umull	r2, r3, r2, r3
 80066d0:	091b      	lsrs	r3, r3, #4
 80066d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	4a24      	ldr	r2, [pc, #144]	@ (800676c <DMA_CalcBaseAndBitshift+0x15c>)
 80066dc:	5cd3      	ldrb	r3, [r2, r3]
 80066de:	461a      	mov	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	d908      	bls.n	80066fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	461a      	mov	r2, r3
 80066f0:	4b1f      	ldr	r3, [pc, #124]	@ (8006770 <DMA_CalcBaseAndBitshift+0x160>)
 80066f2:	4013      	ands	r3, r2
 80066f4:	1d1a      	adds	r2, r3, #4
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80066fa:	e00d      	b.n	8006718 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	461a      	mov	r2, r3
 8006702:	4b1b      	ldr	r3, [pc, #108]	@ (8006770 <DMA_CalcBaseAndBitshift+0x160>)
 8006704:	4013      	ands	r3, r2
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	6593      	str	r3, [r2, #88]	@ 0x58
 800670a:	e005      	b.n	8006718 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800671c:	4618      	mov	r0, r3
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr
 8006728:	40020010 	.word	0x40020010
 800672c:	40020028 	.word	0x40020028
 8006730:	40020040 	.word	0x40020040
 8006734:	40020058 	.word	0x40020058
 8006738:	40020070 	.word	0x40020070
 800673c:	40020088 	.word	0x40020088
 8006740:	400200a0 	.word	0x400200a0
 8006744:	400200b8 	.word	0x400200b8
 8006748:	40020410 	.word	0x40020410
 800674c:	40020428 	.word	0x40020428
 8006750:	40020440 	.word	0x40020440
 8006754:	40020458 	.word	0x40020458
 8006758:	40020470 	.word	0x40020470
 800675c:	40020488 	.word	0x40020488
 8006760:	400204a0 	.word	0x400204a0
 8006764:	400204b8 	.word	0x400204b8
 8006768:	aaaaaaab 	.word	0xaaaaaaab
 800676c:	0801b3d0 	.word	0x0801b3d0
 8006770:	fffffc00 	.word	0xfffffc00

08006774 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d120      	bne.n	80067ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678c:	2b03      	cmp	r3, #3
 800678e:	d858      	bhi.n	8006842 <DMA_CheckFifoParam+0xce>
 8006790:	a201      	add	r2, pc, #4	@ (adr r2, 8006798 <DMA_CheckFifoParam+0x24>)
 8006792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006796:	bf00      	nop
 8006798:	080067a9 	.word	0x080067a9
 800679c:	080067bb 	.word	0x080067bb
 80067a0:	080067a9 	.word	0x080067a9
 80067a4:	08006843 	.word	0x08006843
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d048      	beq.n	8006846 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067b8:	e045      	b.n	8006846 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80067c2:	d142      	bne.n	800684a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067c8:	e03f      	b.n	800684a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067d2:	d123      	bne.n	800681c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d838      	bhi.n	800684e <DMA_CheckFifoParam+0xda>
 80067dc:	a201      	add	r2, pc, #4	@ (adr r2, 80067e4 <DMA_CheckFifoParam+0x70>)
 80067de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e2:	bf00      	nop
 80067e4:	080067f5 	.word	0x080067f5
 80067e8:	080067fb 	.word	0x080067fb
 80067ec:	080067f5 	.word	0x080067f5
 80067f0:	0800680d 	.word	0x0800680d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	73fb      	strb	r3, [r7, #15]
        break;
 80067f8:	e030      	b.n	800685c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d025      	beq.n	8006852 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800680a:	e022      	b.n	8006852 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006810:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006814:	d11f      	bne.n	8006856 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800681a:	e01c      	b.n	8006856 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006820:	2b02      	cmp	r3, #2
 8006822:	d902      	bls.n	800682a <DMA_CheckFifoParam+0xb6>
 8006824:	2b03      	cmp	r3, #3
 8006826:	d003      	beq.n	8006830 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006828:	e018      	b.n	800685c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	73fb      	strb	r3, [r7, #15]
        break;
 800682e:	e015      	b.n	800685c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006834:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00e      	beq.n	800685a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	73fb      	strb	r3, [r7, #15]
    break;
 8006840:	e00b      	b.n	800685a <DMA_CheckFifoParam+0xe6>
        break;
 8006842:	bf00      	nop
 8006844:	e00a      	b.n	800685c <DMA_CheckFifoParam+0xe8>
        break;
 8006846:	bf00      	nop
 8006848:	e008      	b.n	800685c <DMA_CheckFifoParam+0xe8>
        break;
 800684a:	bf00      	nop
 800684c:	e006      	b.n	800685c <DMA_CheckFifoParam+0xe8>
        break;
 800684e:	bf00      	nop
 8006850:	e004      	b.n	800685c <DMA_CheckFifoParam+0xe8>
        break;
 8006852:	bf00      	nop
 8006854:	e002      	b.n	800685c <DMA_CheckFifoParam+0xe8>
        break;
 8006856:	bf00      	nop
 8006858:	e000      	b.n	800685c <DMA_CheckFifoParam+0xe8>
    break;
 800685a:	bf00      	nop
    }
  }

  return status;
 800685c:	7bfb      	ldrb	r3, [r7, #15]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop

0800686c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a38      	ldr	r2, [pc, #224]	@ (8006960 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d022      	beq.n	80068ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a36      	ldr	r2, [pc, #216]	@ (8006964 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d01d      	beq.n	80068ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a35      	ldr	r2, [pc, #212]	@ (8006968 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d018      	beq.n	80068ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a33      	ldr	r2, [pc, #204]	@ (800696c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d013      	beq.n	80068ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a32      	ldr	r2, [pc, #200]	@ (8006970 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d00e      	beq.n	80068ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a30      	ldr	r2, [pc, #192]	@ (8006974 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d009      	beq.n	80068ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a2f      	ldr	r2, [pc, #188]	@ (8006978 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d004      	beq.n	80068ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a2d      	ldr	r2, [pc, #180]	@ (800697c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d101      	bne.n	80068ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80068ca:	2301      	movs	r3, #1
 80068cc:	e000      	b.n	80068d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80068ce:	2300      	movs	r3, #0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d01a      	beq.n	800690a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	3b08      	subs	r3, #8
 80068dc:	4a28      	ldr	r2, [pc, #160]	@ (8006980 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80068de:	fba2 2303 	umull	r2, r3, r2, r3
 80068e2:	091b      	lsrs	r3, r3, #4
 80068e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	4b26      	ldr	r3, [pc, #152]	@ (8006984 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80068ea:	4413      	add	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	461a      	mov	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a24      	ldr	r2, [pc, #144]	@ (8006988 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80068f8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f003 031f 	and.w	r3, r3, #31
 8006900:	2201      	movs	r2, #1
 8006902:	409a      	lsls	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006908:	e024      	b.n	8006954 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	3b10      	subs	r3, #16
 8006912:	4a1e      	ldr	r2, [pc, #120]	@ (800698c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006914:	fba2 2303 	umull	r2, r3, r2, r3
 8006918:	091b      	lsrs	r3, r3, #4
 800691a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	4a1c      	ldr	r2, [pc, #112]	@ (8006990 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d806      	bhi.n	8006932 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	4a1b      	ldr	r2, [pc, #108]	@ (8006994 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d902      	bls.n	8006932 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	3308      	adds	r3, #8
 8006930:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	4b18      	ldr	r3, [pc, #96]	@ (8006998 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006936:	4413      	add	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	461a      	mov	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a16      	ldr	r2, [pc, #88]	@ (800699c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006944:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f003 031f 	and.w	r3, r3, #31
 800694c:	2201      	movs	r2, #1
 800694e:	409a      	lsls	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006954:	bf00      	nop
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	58025408 	.word	0x58025408
 8006964:	5802541c 	.word	0x5802541c
 8006968:	58025430 	.word	0x58025430
 800696c:	58025444 	.word	0x58025444
 8006970:	58025458 	.word	0x58025458
 8006974:	5802546c 	.word	0x5802546c
 8006978:	58025480 	.word	0x58025480
 800697c:	58025494 	.word	0x58025494
 8006980:	cccccccd 	.word	0xcccccccd
 8006984:	16009600 	.word	0x16009600
 8006988:	58025880 	.word	0x58025880
 800698c:	aaaaaaab 	.word	0xaaaaaaab
 8006990:	400204b8 	.word	0x400204b8
 8006994:	4002040f 	.word	0x4002040f
 8006998:	10008200 	.word	0x10008200
 800699c:	40020880 	.word	0x40020880

080069a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d04a      	beq.n	8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d847      	bhi.n	8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a25      	ldr	r2, [pc, #148]	@ (8006a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d022      	beq.n	8006a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a24      	ldr	r2, [pc, #144]	@ (8006a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d01d      	beq.n	8006a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a22      	ldr	r2, [pc, #136]	@ (8006a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d018      	beq.n	8006a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a21      	ldr	r2, [pc, #132]	@ (8006a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d013      	beq.n	8006a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a1f      	ldr	r2, [pc, #124]	@ (8006a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d00e      	beq.n	8006a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a1e      	ldr	r2, [pc, #120]	@ (8006a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d009      	beq.n	8006a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a1c      	ldr	r2, [pc, #112]	@ (8006a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d004      	beq.n	8006a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a1b      	ldr	r2, [pc, #108]	@ (8006a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d101      	bne.n	8006a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e000      	b.n	8006a12 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006a10:	2300      	movs	r3, #0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	4b17      	ldr	r3, [pc, #92]	@ (8006a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	461a      	mov	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a15      	ldr	r2, [pc, #84]	@ (8006a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006a28:	671a      	str	r2, [r3, #112]	@ 0x70
 8006a2a:	e009      	b.n	8006a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	4b14      	ldr	r3, [pc, #80]	@ (8006a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006a30:	4413      	add	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	461a      	mov	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a11      	ldr	r2, [pc, #68]	@ (8006a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006a3e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	3b01      	subs	r3, #1
 8006a44:	2201      	movs	r2, #1
 8006a46:	409a      	lsls	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006a4c:	bf00      	nop
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	58025408 	.word	0x58025408
 8006a5c:	5802541c 	.word	0x5802541c
 8006a60:	58025430 	.word	0x58025430
 8006a64:	58025444 	.word	0x58025444
 8006a68:	58025458 	.word	0x58025458
 8006a6c:	5802546c 	.word	0x5802546c
 8006a70:	58025480 	.word	0x58025480
 8006a74:	58025494 	.word	0x58025494
 8006a78:	1600963f 	.word	0x1600963f
 8006a7c:	58025940 	.word	0x58025940
 8006a80:	1000823f 	.word	0x1000823f
 8006a84:	40020940 	.word	0x40020940

08006a88 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
 8006a94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	2b80      	cmp	r3, #128	@ 0x80
 8006aa0:	d105      	bne.n	8006aae <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006aa8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e315      	b.n	80070da <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e30e      	b.n	80070da <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	f040 82fd 	bne.w	80070cc <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a82      	ldr	r2, [pc, #520]	@ (8006cf0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d04a      	beq.n	8006b80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a81      	ldr	r2, [pc, #516]	@ (8006cf4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d045      	beq.n	8006b80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a7f      	ldr	r2, [pc, #508]	@ (8006cf8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d040      	beq.n	8006b80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a7e      	ldr	r2, [pc, #504]	@ (8006cfc <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d03b      	beq.n	8006b80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a7c      	ldr	r2, [pc, #496]	@ (8006d00 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d036      	beq.n	8006b80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a7b      	ldr	r2, [pc, #492]	@ (8006d04 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d031      	beq.n	8006b80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a79      	ldr	r2, [pc, #484]	@ (8006d08 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d02c      	beq.n	8006b80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a78      	ldr	r2, [pc, #480]	@ (8006d0c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d027      	beq.n	8006b80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a76      	ldr	r2, [pc, #472]	@ (8006d10 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d022      	beq.n	8006b80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a75      	ldr	r2, [pc, #468]	@ (8006d14 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d01d      	beq.n	8006b80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a73      	ldr	r2, [pc, #460]	@ (8006d18 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d018      	beq.n	8006b80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a72      	ldr	r2, [pc, #456]	@ (8006d1c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d013      	beq.n	8006b80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a70      	ldr	r2, [pc, #448]	@ (8006d20 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00e      	beq.n	8006b80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a6f      	ldr	r2, [pc, #444]	@ (8006d24 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d009      	beq.n	8006b80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a6d      	ldr	r2, [pc, #436]	@ (8006d28 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d004      	beq.n	8006b80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a6c      	ldr	r2, [pc, #432]	@ (8006d2c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d101      	bne.n	8006b84 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8006b84:	2300      	movs	r3, #0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d018      	beq.n	8006bbc <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006b98:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ba6:	3308      	adds	r3, #8
 8006ba8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bae:	f003 031f 	and.w	r3, r3, #31
 8006bb2:	223f      	movs	r2, #63	@ 0x3f
 8006bb4:	409a      	lsls	r2, r3
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	601a      	str	r2, [r3, #0]
 8006bba:	e018      	b.n	8006bee <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6819      	ldr	r1, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	f248 0320 	movw	r3, #32800	@ 0x8020
 8006bca:	430b      	orrs	r3, r1
 8006bcc:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bda:	3304      	adds	r3, #4
 8006bdc:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006be2:	f003 031f 	and.w	r3, r3, #31
 8006be6:	2201      	movs	r2, #1
 8006be8:	409a      	lsls	r2, r3
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	68b9      	ldr	r1, [r7, #8]
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 fb41 	bl	800727c <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a3c      	ldr	r2, [pc, #240]	@ (8006cf0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d072      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a3a      	ldr	r2, [pc, #232]	@ (8006cf4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d06d      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a39      	ldr	r2, [pc, #228]	@ (8006cf8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d068      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a37      	ldr	r2, [pc, #220]	@ (8006cfc <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d063      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a36      	ldr	r2, [pc, #216]	@ (8006d00 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d05e      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a34      	ldr	r2, [pc, #208]	@ (8006d04 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d059      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a33      	ldr	r2, [pc, #204]	@ (8006d08 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d054      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a31      	ldr	r2, [pc, #196]	@ (8006d0c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d04f      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a30      	ldr	r2, [pc, #192]	@ (8006d10 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d04a      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a2e      	ldr	r2, [pc, #184]	@ (8006d14 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d045      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a2d      	ldr	r2, [pc, #180]	@ (8006d18 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d040      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a2b      	ldr	r2, [pc, #172]	@ (8006d1c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d03b      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a2a      	ldr	r2, [pc, #168]	@ (8006d20 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d036      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a28      	ldr	r2, [pc, #160]	@ (8006d24 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d031      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a27      	ldr	r2, [pc, #156]	@ (8006d28 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d02c      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a25      	ldr	r2, [pc, #148]	@ (8006d2c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d027      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a24      	ldr	r2, [pc, #144]	@ (8006d30 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d022      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a22      	ldr	r2, [pc, #136]	@ (8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d01d      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a21      	ldr	r2, [pc, #132]	@ (8006d38 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d018      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8006d3c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d013      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8006d40 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d00e      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8006d44 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d009      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a1b      	ldr	r2, [pc, #108]	@ (8006d48 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d004      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a19      	ldr	r2, [pc, #100]	@ (8006d4c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d132      	bne.n	8006d50 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e031      	b.n	8006d52 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8006cee:	bf00      	nop
 8006cf0:	40020010 	.word	0x40020010
 8006cf4:	40020028 	.word	0x40020028
 8006cf8:	40020040 	.word	0x40020040
 8006cfc:	40020058 	.word	0x40020058
 8006d00:	40020070 	.word	0x40020070
 8006d04:	40020088 	.word	0x40020088
 8006d08:	400200a0 	.word	0x400200a0
 8006d0c:	400200b8 	.word	0x400200b8
 8006d10:	40020410 	.word	0x40020410
 8006d14:	40020428 	.word	0x40020428
 8006d18:	40020440 	.word	0x40020440
 8006d1c:	40020458 	.word	0x40020458
 8006d20:	40020470 	.word	0x40020470
 8006d24:	40020488 	.word	0x40020488
 8006d28:	400204a0 	.word	0x400204a0
 8006d2c:	400204b8 	.word	0x400204b8
 8006d30:	58025408 	.word	0x58025408
 8006d34:	5802541c 	.word	0x5802541c
 8006d38:	58025430 	.word	0x58025430
 8006d3c:	58025444 	.word	0x58025444
 8006d40:	58025458 	.word	0x58025458
 8006d44:	5802546c 	.word	0x5802546c
 8006d48:	58025480 	.word	0x58025480
 8006d4c:	58025494 	.word	0x58025494
 8006d50:	2300      	movs	r3, #0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00d      	beq.n	8006d72 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006d5e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d004      	beq.n	8006d72 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006d70:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a3b      	ldr	r2, [pc, #236]	@ (8006e64 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d04a      	beq.n	8006e12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a39      	ldr	r2, [pc, #228]	@ (8006e68 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d045      	beq.n	8006e12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a38      	ldr	r2, [pc, #224]	@ (8006e6c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d040      	beq.n	8006e12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a36      	ldr	r2, [pc, #216]	@ (8006e70 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d03b      	beq.n	8006e12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a35      	ldr	r2, [pc, #212]	@ (8006e74 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d036      	beq.n	8006e12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a33      	ldr	r2, [pc, #204]	@ (8006e78 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d031      	beq.n	8006e12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a32      	ldr	r2, [pc, #200]	@ (8006e7c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d02c      	beq.n	8006e12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a30      	ldr	r2, [pc, #192]	@ (8006e80 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d027      	beq.n	8006e12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a2f      	ldr	r2, [pc, #188]	@ (8006e84 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d022      	beq.n	8006e12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8006e88 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d01d      	beq.n	8006e12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a2c      	ldr	r2, [pc, #176]	@ (8006e8c <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d018      	beq.n	8006e12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a2a      	ldr	r2, [pc, #168]	@ (8006e90 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d013      	beq.n	8006e12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a29      	ldr	r2, [pc, #164]	@ (8006e94 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d00e      	beq.n	8006e12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a27      	ldr	r2, [pc, #156]	@ (8006e98 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d009      	beq.n	8006e12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a26      	ldr	r2, [pc, #152]	@ (8006e9c <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d004      	beq.n	8006e12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a24      	ldr	r2, [pc, #144]	@ (8006ea0 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d101      	bne.n	8006e16 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8006e16:	2300      	movs	r3, #0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d043      	beq.n	8006ea4 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f023 021e 	bic.w	r2, r3, #30
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f042 0216 	orr.w	r2, r2, #22
 8006e2e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695a      	ldr	r2, [r3, #20]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006e3e:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d103      	bne.n	8006e50 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d043      	beq.n	8006ed8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0208 	orr.w	r2, r2, #8
 8006e5e:	601a      	str	r2, [r3, #0]
 8006e60:	e03a      	b.n	8006ed8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8006e62:	bf00      	nop
 8006e64:	40020010 	.word	0x40020010
 8006e68:	40020028 	.word	0x40020028
 8006e6c:	40020040 	.word	0x40020040
 8006e70:	40020058 	.word	0x40020058
 8006e74:	40020070 	.word	0x40020070
 8006e78:	40020088 	.word	0x40020088
 8006e7c:	400200a0 	.word	0x400200a0
 8006e80:	400200b8 	.word	0x400200b8
 8006e84:	40020410 	.word	0x40020410
 8006e88:	40020428 	.word	0x40020428
 8006e8c:	40020440 	.word	0x40020440
 8006e90:	40020458 	.word	0x40020458
 8006e94:	40020470 	.word	0x40020470
 8006e98:	40020488 	.word	0x40020488
 8006e9c:	400204a0 	.word	0x400204a0
 8006ea0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f023 020e 	bic.w	r2, r3, #14
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f042 020a 	orr.w	r2, r2, #10
 8006eb6:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d103      	bne.n	8006ec8 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d007      	beq.n	8006ed8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f042 0204 	orr.w	r2, r2, #4
 8006ed6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a81      	ldr	r2, [pc, #516]	@ (80070e4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d072      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a80      	ldr	r2, [pc, #512]	@ (80070e8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d06d      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a7e      	ldr	r2, [pc, #504]	@ (80070ec <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d068      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a7d      	ldr	r2, [pc, #500]	@ (80070f0 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d063      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a7b      	ldr	r2, [pc, #492]	@ (80070f4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d05e      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a7a      	ldr	r2, [pc, #488]	@ (80070f8 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d059      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a78      	ldr	r2, [pc, #480]	@ (80070fc <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d054      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a77      	ldr	r2, [pc, #476]	@ (8007100 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d04f      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a75      	ldr	r2, [pc, #468]	@ (8007104 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d04a      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a74      	ldr	r2, [pc, #464]	@ (8007108 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d045      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a72      	ldr	r2, [pc, #456]	@ (800710c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d040      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a71      	ldr	r2, [pc, #452]	@ (8007110 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d03b      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a6f      	ldr	r2, [pc, #444]	@ (8007114 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d036      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a6e      	ldr	r2, [pc, #440]	@ (8007118 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d031      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a6c      	ldr	r2, [pc, #432]	@ (800711c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d02c      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a6b      	ldr	r2, [pc, #428]	@ (8007120 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d027      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a69      	ldr	r2, [pc, #420]	@ (8007124 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d022      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a68      	ldr	r2, [pc, #416]	@ (8007128 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d01d      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a66      	ldr	r2, [pc, #408]	@ (800712c <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d018      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a65      	ldr	r2, [pc, #404]	@ (8007130 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d013      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a63      	ldr	r2, [pc, #396]	@ (8007134 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d00e      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a62      	ldr	r2, [pc, #392]	@ (8007138 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d009      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a60      	ldr	r2, [pc, #384]	@ (800713c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d004      	beq.n	8006fc8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a5f      	ldr	r2, [pc, #380]	@ (8007140 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d101      	bne.n	8006fcc <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e000      	b.n	8006fce <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d01a      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d007      	beq.n	8006ff0 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d007      	beq.n	8007008 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007002:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007006:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a35      	ldr	r2, [pc, #212]	@ (80070e4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d04a      	beq.n	80070a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a34      	ldr	r2, [pc, #208]	@ (80070e8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d045      	beq.n	80070a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a32      	ldr	r2, [pc, #200]	@ (80070ec <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d040      	beq.n	80070a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a31      	ldr	r2, [pc, #196]	@ (80070f0 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d03b      	beq.n	80070a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a2f      	ldr	r2, [pc, #188]	@ (80070f4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d036      	beq.n	80070a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a2e      	ldr	r2, [pc, #184]	@ (80070f8 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d031      	beq.n	80070a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a2c      	ldr	r2, [pc, #176]	@ (80070fc <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d02c      	beq.n	80070a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a2b      	ldr	r2, [pc, #172]	@ (8007100 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d027      	beq.n	80070a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a29      	ldr	r2, [pc, #164]	@ (8007104 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d022      	beq.n	80070a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a28      	ldr	r2, [pc, #160]	@ (8007108 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d01d      	beq.n	80070a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a26      	ldr	r2, [pc, #152]	@ (800710c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d018      	beq.n	80070a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a25      	ldr	r2, [pc, #148]	@ (8007110 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d013      	beq.n	80070a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a23      	ldr	r2, [pc, #140]	@ (8007114 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d00e      	beq.n	80070a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a22      	ldr	r2, [pc, #136]	@ (8007118 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d009      	beq.n	80070a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a20      	ldr	r2, [pc, #128]	@ (800711c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d004      	beq.n	80070a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a1f      	ldr	r2, [pc, #124]	@ (8007120 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d108      	bne.n	80070ba <HAL_DMAEx_MultiBufferStart_IT+0x632>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0201 	orr.w	r2, r2, #1
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	e00e      	b.n	80070d8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f042 0201 	orr.w	r2, r2, #1
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	e005      	b.n	80070d8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070d2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80070d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	40020010 	.word	0x40020010
 80070e8:	40020028 	.word	0x40020028
 80070ec:	40020040 	.word	0x40020040
 80070f0:	40020058 	.word	0x40020058
 80070f4:	40020070 	.word	0x40020070
 80070f8:	40020088 	.word	0x40020088
 80070fc:	400200a0 	.word	0x400200a0
 8007100:	400200b8 	.word	0x400200b8
 8007104:	40020410 	.word	0x40020410
 8007108:	40020428 	.word	0x40020428
 800710c:	40020440 	.word	0x40020440
 8007110:	40020458 	.word	0x40020458
 8007114:	40020470 	.word	0x40020470
 8007118:	40020488 	.word	0x40020488
 800711c:	400204a0 	.word	0x400204a0
 8007120:	400204b8 	.word	0x400204b8
 8007124:	58025408 	.word	0x58025408
 8007128:	5802541c 	.word	0x5802541c
 800712c:	58025430 	.word	0x58025430
 8007130:	58025444 	.word	0x58025444
 8007134:	58025458 	.word	0x58025458
 8007138:	5802546c 	.word	0x5802546c
 800713c:	58025480 	.word	0x58025480
 8007140:	58025494 	.word	0x58025494

08007144 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	4613      	mov	r3, r2
 8007150:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a39      	ldr	r2, [pc, #228]	@ (800723c <HAL_DMAEx_ChangeMemory+0xf8>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d04a      	beq.n	80071f2 <HAL_DMAEx_ChangeMemory+0xae>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a37      	ldr	r2, [pc, #220]	@ (8007240 <HAL_DMAEx_ChangeMemory+0xfc>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d045      	beq.n	80071f2 <HAL_DMAEx_ChangeMemory+0xae>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a36      	ldr	r2, [pc, #216]	@ (8007244 <HAL_DMAEx_ChangeMemory+0x100>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d040      	beq.n	80071f2 <HAL_DMAEx_ChangeMemory+0xae>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a34      	ldr	r2, [pc, #208]	@ (8007248 <HAL_DMAEx_ChangeMemory+0x104>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d03b      	beq.n	80071f2 <HAL_DMAEx_ChangeMemory+0xae>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a33      	ldr	r2, [pc, #204]	@ (800724c <HAL_DMAEx_ChangeMemory+0x108>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d036      	beq.n	80071f2 <HAL_DMAEx_ChangeMemory+0xae>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a31      	ldr	r2, [pc, #196]	@ (8007250 <HAL_DMAEx_ChangeMemory+0x10c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d031      	beq.n	80071f2 <HAL_DMAEx_ChangeMemory+0xae>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a30      	ldr	r2, [pc, #192]	@ (8007254 <HAL_DMAEx_ChangeMemory+0x110>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d02c      	beq.n	80071f2 <HAL_DMAEx_ChangeMemory+0xae>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a2e      	ldr	r2, [pc, #184]	@ (8007258 <HAL_DMAEx_ChangeMemory+0x114>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d027      	beq.n	80071f2 <HAL_DMAEx_ChangeMemory+0xae>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a2d      	ldr	r2, [pc, #180]	@ (800725c <HAL_DMAEx_ChangeMemory+0x118>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d022      	beq.n	80071f2 <HAL_DMAEx_ChangeMemory+0xae>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a2b      	ldr	r2, [pc, #172]	@ (8007260 <HAL_DMAEx_ChangeMemory+0x11c>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d01d      	beq.n	80071f2 <HAL_DMAEx_ChangeMemory+0xae>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a2a      	ldr	r2, [pc, #168]	@ (8007264 <HAL_DMAEx_ChangeMemory+0x120>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d018      	beq.n	80071f2 <HAL_DMAEx_ChangeMemory+0xae>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a28      	ldr	r2, [pc, #160]	@ (8007268 <HAL_DMAEx_ChangeMemory+0x124>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d013      	beq.n	80071f2 <HAL_DMAEx_ChangeMemory+0xae>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a27      	ldr	r2, [pc, #156]	@ (800726c <HAL_DMAEx_ChangeMemory+0x128>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d00e      	beq.n	80071f2 <HAL_DMAEx_ChangeMemory+0xae>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a25      	ldr	r2, [pc, #148]	@ (8007270 <HAL_DMAEx_ChangeMemory+0x12c>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d009      	beq.n	80071f2 <HAL_DMAEx_ChangeMemory+0xae>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a24      	ldr	r2, [pc, #144]	@ (8007274 <HAL_DMAEx_ChangeMemory+0x130>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d004      	beq.n	80071f2 <HAL_DMAEx_ChangeMemory+0xae>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a22      	ldr	r2, [pc, #136]	@ (8007278 <HAL_DMAEx_ChangeMemory+0x134>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d101      	bne.n	80071f6 <HAL_DMAEx_ChangeMemory+0xb2>
 80071f2:	2301      	movs	r3, #1
 80071f4:	e000      	b.n	80071f8 <HAL_DMAEx_ChangeMemory+0xb4>
 80071f6:	2300      	movs	r3, #0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00c      	beq.n	8007216 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 80071fc:	79fb      	ldrb	r3, [r7, #7]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d104      	bne.n	800720c <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	60da      	str	r2, [r3, #12]
 800720a:	e010      	b.n	800722e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	611a      	str	r2, [r3, #16]
 8007214:	e00b      	b.n	800722e <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8007216:	79fb      	ldrb	r3, [r7, #7]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d104      	bne.n	8007226 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	60da      	str	r2, [r3, #12]
 8007224:	e003      	b.n	800722e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	40020010 	.word	0x40020010
 8007240:	40020028 	.word	0x40020028
 8007244:	40020040 	.word	0x40020040
 8007248:	40020058 	.word	0x40020058
 800724c:	40020070 	.word	0x40020070
 8007250:	40020088 	.word	0x40020088
 8007254:	400200a0 	.word	0x400200a0
 8007258:	400200b8 	.word	0x400200b8
 800725c:	40020410 	.word	0x40020410
 8007260:	40020428 	.word	0x40020428
 8007264:	40020440 	.word	0x40020440
 8007268:	40020458 	.word	0x40020458
 800726c:	40020470 	.word	0x40020470
 8007270:	40020488 	.word	0x40020488
 8007274:	400204a0 	.word	0x400204a0
 8007278:	400204b8 	.word	0x400204b8

0800727c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a46      	ldr	r2, [pc, #280]	@ (80073a8 <DMA_MultiBufferSetConfig+0x12c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d04a      	beq.n	800732a <DMA_MultiBufferSetConfig+0xae>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a44      	ldr	r2, [pc, #272]	@ (80073ac <DMA_MultiBufferSetConfig+0x130>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d045      	beq.n	800732a <DMA_MultiBufferSetConfig+0xae>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a43      	ldr	r2, [pc, #268]	@ (80073b0 <DMA_MultiBufferSetConfig+0x134>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d040      	beq.n	800732a <DMA_MultiBufferSetConfig+0xae>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a41      	ldr	r2, [pc, #260]	@ (80073b4 <DMA_MultiBufferSetConfig+0x138>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d03b      	beq.n	800732a <DMA_MultiBufferSetConfig+0xae>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a40      	ldr	r2, [pc, #256]	@ (80073b8 <DMA_MultiBufferSetConfig+0x13c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d036      	beq.n	800732a <DMA_MultiBufferSetConfig+0xae>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a3e      	ldr	r2, [pc, #248]	@ (80073bc <DMA_MultiBufferSetConfig+0x140>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d031      	beq.n	800732a <DMA_MultiBufferSetConfig+0xae>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a3d      	ldr	r2, [pc, #244]	@ (80073c0 <DMA_MultiBufferSetConfig+0x144>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d02c      	beq.n	800732a <DMA_MultiBufferSetConfig+0xae>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a3b      	ldr	r2, [pc, #236]	@ (80073c4 <DMA_MultiBufferSetConfig+0x148>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d027      	beq.n	800732a <DMA_MultiBufferSetConfig+0xae>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a3a      	ldr	r2, [pc, #232]	@ (80073c8 <DMA_MultiBufferSetConfig+0x14c>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d022      	beq.n	800732a <DMA_MultiBufferSetConfig+0xae>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a38      	ldr	r2, [pc, #224]	@ (80073cc <DMA_MultiBufferSetConfig+0x150>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d01d      	beq.n	800732a <DMA_MultiBufferSetConfig+0xae>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a37      	ldr	r2, [pc, #220]	@ (80073d0 <DMA_MultiBufferSetConfig+0x154>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d018      	beq.n	800732a <DMA_MultiBufferSetConfig+0xae>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a35      	ldr	r2, [pc, #212]	@ (80073d4 <DMA_MultiBufferSetConfig+0x158>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d013      	beq.n	800732a <DMA_MultiBufferSetConfig+0xae>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a34      	ldr	r2, [pc, #208]	@ (80073d8 <DMA_MultiBufferSetConfig+0x15c>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d00e      	beq.n	800732a <DMA_MultiBufferSetConfig+0xae>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a32      	ldr	r2, [pc, #200]	@ (80073dc <DMA_MultiBufferSetConfig+0x160>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d009      	beq.n	800732a <DMA_MultiBufferSetConfig+0xae>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a31      	ldr	r2, [pc, #196]	@ (80073e0 <DMA_MultiBufferSetConfig+0x164>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d004      	beq.n	800732a <DMA_MultiBufferSetConfig+0xae>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a2f      	ldr	r2, [pc, #188]	@ (80073e4 <DMA_MultiBufferSetConfig+0x168>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d101      	bne.n	800732e <DMA_MultiBufferSetConfig+0xb2>
 800732a:	2301      	movs	r3, #1
 800732c:	e000      	b.n	8007330 <DMA_MultiBufferSetConfig+0xb4>
 800732e:	2300      	movs	r3, #0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d019      	beq.n	8007368 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	2b40      	cmp	r3, #64	@ 0x40
 8007342:	d108      	bne.n	8007356 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8007354:	e021      	b.n	800739a <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	60da      	str	r2, [r3, #12]
}
 8007366:	e018      	b.n	800739a <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	2b40      	cmp	r3, #64	@ 0x40
 8007376:	d108      	bne.n	800738a <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	60da      	str	r2, [r3, #12]
}
 8007388:	e007      	b.n	800739a <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	60da      	str	r2, [r3, #12]
}
 800739a:	bf00      	nop
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	40020010 	.word	0x40020010
 80073ac:	40020028 	.word	0x40020028
 80073b0:	40020040 	.word	0x40020040
 80073b4:	40020058 	.word	0x40020058
 80073b8:	40020070 	.word	0x40020070
 80073bc:	40020088 	.word	0x40020088
 80073c0:	400200a0 	.word	0x400200a0
 80073c4:	400200b8 	.word	0x400200b8
 80073c8:	40020410 	.word	0x40020410
 80073cc:	40020428 	.word	0x40020428
 80073d0:	40020440 	.word	0x40020440
 80073d4:	40020458 	.word	0x40020458
 80073d8:	40020470 	.word	0x40020470
 80073dc:	40020488 	.word	0x40020488
 80073e0:	400204a0 	.word	0x400204a0
 80073e4:	400204b8 	.word	0x400204b8

080073e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b089      	sub	sp, #36	@ 0x24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80073f2:	2300      	movs	r3, #0
 80073f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80073f6:	4b89      	ldr	r3, [pc, #548]	@ (800761c <HAL_GPIO_Init+0x234>)
 80073f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80073fa:	e194      	b.n	8007726 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	2101      	movs	r1, #1
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	fa01 f303 	lsl.w	r3, r1, r3
 8007408:	4013      	ands	r3, r2
 800740a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	2b00      	cmp	r3, #0
 8007410:	f000 8186 	beq.w	8007720 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f003 0303 	and.w	r3, r3, #3
 800741c:	2b01      	cmp	r3, #1
 800741e:	d005      	beq.n	800742c <HAL_GPIO_Init+0x44>
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f003 0303 	and.w	r3, r3, #3
 8007428:	2b02      	cmp	r3, #2
 800742a:	d130      	bne.n	800748e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	005b      	lsls	r3, r3, #1
 8007436:	2203      	movs	r2, #3
 8007438:	fa02 f303 	lsl.w	r3, r2, r3
 800743c:	43db      	mvns	r3, r3
 800743e:	69ba      	ldr	r2, [r7, #24]
 8007440:	4013      	ands	r3, r2
 8007442:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	68da      	ldr	r2, [r3, #12]
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	005b      	lsls	r3, r3, #1
 800744c:	fa02 f303 	lsl.w	r3, r2, r3
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	4313      	orrs	r3, r2
 8007454:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	69ba      	ldr	r2, [r7, #24]
 800745a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007462:	2201      	movs	r2, #1
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	fa02 f303 	lsl.w	r3, r2, r3
 800746a:	43db      	mvns	r3, r3
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	4013      	ands	r3, r2
 8007470:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	091b      	lsrs	r3, r3, #4
 8007478:	f003 0201 	and.w	r2, r3, #1
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	fa02 f303 	lsl.w	r3, r2, r3
 8007482:	69ba      	ldr	r2, [r7, #24]
 8007484:	4313      	orrs	r3, r2
 8007486:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	69ba      	ldr	r2, [r7, #24]
 800748c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f003 0303 	and.w	r3, r3, #3
 8007496:	2b03      	cmp	r3, #3
 8007498:	d017      	beq.n	80074ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	2203      	movs	r2, #3
 80074a6:	fa02 f303 	lsl.w	r3, r2, r3
 80074aa:	43db      	mvns	r3, r3
 80074ac:	69ba      	ldr	r2, [r7, #24]
 80074ae:	4013      	ands	r3, r2
 80074b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	689a      	ldr	r2, [r3, #8]
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	005b      	lsls	r3, r3, #1
 80074ba:	fa02 f303 	lsl.w	r3, r2, r3
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f003 0303 	and.w	r3, r3, #3
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d123      	bne.n	800751e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	08da      	lsrs	r2, r3, #3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	3208      	adds	r2, #8
 80074de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	f003 0307 	and.w	r3, r3, #7
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	220f      	movs	r2, #15
 80074ee:	fa02 f303 	lsl.w	r3, r2, r3
 80074f2:	43db      	mvns	r3, r3
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	4013      	ands	r3, r2
 80074f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	691a      	ldr	r2, [r3, #16]
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	f003 0307 	and.w	r3, r3, #7
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	fa02 f303 	lsl.w	r3, r2, r3
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	4313      	orrs	r3, r2
 800750e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	08da      	lsrs	r2, r3, #3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	3208      	adds	r2, #8
 8007518:	69b9      	ldr	r1, [r7, #24]
 800751a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	005b      	lsls	r3, r3, #1
 8007528:	2203      	movs	r2, #3
 800752a:	fa02 f303 	lsl.w	r3, r2, r3
 800752e:	43db      	mvns	r3, r3
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	4013      	ands	r3, r2
 8007534:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f003 0203 	and.w	r2, r3, #3
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	005b      	lsls	r3, r3, #1
 8007542:	fa02 f303 	lsl.w	r3, r2, r3
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	4313      	orrs	r3, r2
 800754a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 80e0 	beq.w	8007720 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007560:	4b2f      	ldr	r3, [pc, #188]	@ (8007620 <HAL_GPIO_Init+0x238>)
 8007562:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007566:	4a2e      	ldr	r2, [pc, #184]	@ (8007620 <HAL_GPIO_Init+0x238>)
 8007568:	f043 0302 	orr.w	r3, r3, #2
 800756c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007570:	4b2b      	ldr	r3, [pc, #172]	@ (8007620 <HAL_GPIO_Init+0x238>)
 8007572:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	60fb      	str	r3, [r7, #12]
 800757c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800757e:	4a29      	ldr	r2, [pc, #164]	@ (8007624 <HAL_GPIO_Init+0x23c>)
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	089b      	lsrs	r3, r3, #2
 8007584:	3302      	adds	r3, #2
 8007586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800758a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	f003 0303 	and.w	r3, r3, #3
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	220f      	movs	r2, #15
 8007596:	fa02 f303 	lsl.w	r3, r2, r3
 800759a:	43db      	mvns	r3, r3
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	4013      	ands	r3, r2
 80075a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a20      	ldr	r2, [pc, #128]	@ (8007628 <HAL_GPIO_Init+0x240>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d052      	beq.n	8007650 <HAL_GPIO_Init+0x268>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a1f      	ldr	r2, [pc, #124]	@ (800762c <HAL_GPIO_Init+0x244>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d031      	beq.n	8007616 <HAL_GPIO_Init+0x22e>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a1e      	ldr	r2, [pc, #120]	@ (8007630 <HAL_GPIO_Init+0x248>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d02b      	beq.n	8007612 <HAL_GPIO_Init+0x22a>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a1d      	ldr	r2, [pc, #116]	@ (8007634 <HAL_GPIO_Init+0x24c>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d025      	beq.n	800760e <HAL_GPIO_Init+0x226>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007638 <HAL_GPIO_Init+0x250>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d01f      	beq.n	800760a <HAL_GPIO_Init+0x222>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a1b      	ldr	r2, [pc, #108]	@ (800763c <HAL_GPIO_Init+0x254>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d019      	beq.n	8007606 <HAL_GPIO_Init+0x21e>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a1a      	ldr	r2, [pc, #104]	@ (8007640 <HAL_GPIO_Init+0x258>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d013      	beq.n	8007602 <HAL_GPIO_Init+0x21a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a19      	ldr	r2, [pc, #100]	@ (8007644 <HAL_GPIO_Init+0x25c>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d00d      	beq.n	80075fe <HAL_GPIO_Init+0x216>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a18      	ldr	r2, [pc, #96]	@ (8007648 <HAL_GPIO_Init+0x260>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d007      	beq.n	80075fa <HAL_GPIO_Init+0x212>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a17      	ldr	r2, [pc, #92]	@ (800764c <HAL_GPIO_Init+0x264>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d101      	bne.n	80075f6 <HAL_GPIO_Init+0x20e>
 80075f2:	2309      	movs	r3, #9
 80075f4:	e02d      	b.n	8007652 <HAL_GPIO_Init+0x26a>
 80075f6:	230a      	movs	r3, #10
 80075f8:	e02b      	b.n	8007652 <HAL_GPIO_Init+0x26a>
 80075fa:	2308      	movs	r3, #8
 80075fc:	e029      	b.n	8007652 <HAL_GPIO_Init+0x26a>
 80075fe:	2307      	movs	r3, #7
 8007600:	e027      	b.n	8007652 <HAL_GPIO_Init+0x26a>
 8007602:	2306      	movs	r3, #6
 8007604:	e025      	b.n	8007652 <HAL_GPIO_Init+0x26a>
 8007606:	2305      	movs	r3, #5
 8007608:	e023      	b.n	8007652 <HAL_GPIO_Init+0x26a>
 800760a:	2304      	movs	r3, #4
 800760c:	e021      	b.n	8007652 <HAL_GPIO_Init+0x26a>
 800760e:	2303      	movs	r3, #3
 8007610:	e01f      	b.n	8007652 <HAL_GPIO_Init+0x26a>
 8007612:	2302      	movs	r3, #2
 8007614:	e01d      	b.n	8007652 <HAL_GPIO_Init+0x26a>
 8007616:	2301      	movs	r3, #1
 8007618:	e01b      	b.n	8007652 <HAL_GPIO_Init+0x26a>
 800761a:	bf00      	nop
 800761c:	58000080 	.word	0x58000080
 8007620:	58024400 	.word	0x58024400
 8007624:	58000400 	.word	0x58000400
 8007628:	58020000 	.word	0x58020000
 800762c:	58020400 	.word	0x58020400
 8007630:	58020800 	.word	0x58020800
 8007634:	58020c00 	.word	0x58020c00
 8007638:	58021000 	.word	0x58021000
 800763c:	58021400 	.word	0x58021400
 8007640:	58021800 	.word	0x58021800
 8007644:	58021c00 	.word	0x58021c00
 8007648:	58022000 	.word	0x58022000
 800764c:	58022400 	.word	0x58022400
 8007650:	2300      	movs	r3, #0
 8007652:	69fa      	ldr	r2, [r7, #28]
 8007654:	f002 0203 	and.w	r2, r2, #3
 8007658:	0092      	lsls	r2, r2, #2
 800765a:	4093      	lsls	r3, r2
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	4313      	orrs	r3, r2
 8007660:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007662:	4938      	ldr	r1, [pc, #224]	@ (8007744 <HAL_GPIO_Init+0x35c>)
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	089b      	lsrs	r3, r3, #2
 8007668:	3302      	adds	r3, #2
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007670:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	43db      	mvns	r3, r3
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	4013      	ands	r3, r2
 8007680:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800768e:	69ba      	ldr	r2, [r7, #24]
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	4313      	orrs	r3, r2
 8007694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007696:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800769e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	43db      	mvns	r3, r3
 80076aa:	69ba      	ldr	r2, [r7, #24]
 80076ac:	4013      	ands	r3, r2
 80076ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d003      	beq.n	80076c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80076c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	43db      	mvns	r3, r3
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	4013      	ands	r3, r2
 80076da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d003      	beq.n	80076f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	43db      	mvns	r3, r3
 8007700:	69ba      	ldr	r2, [r7, #24]
 8007702:	4013      	ands	r3, r2
 8007704:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007712:	69ba      	ldr	r2, [r7, #24]
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	4313      	orrs	r3, r2
 8007718:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	3301      	adds	r3, #1
 8007724:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	fa22 f303 	lsr.w	r3, r2, r3
 8007730:	2b00      	cmp	r3, #0
 8007732:	f47f ae63 	bne.w	80073fc <HAL_GPIO_Init+0x14>
  }
}
 8007736:	bf00      	nop
 8007738:	bf00      	nop
 800773a:	3724      	adds	r7, #36	@ 0x24
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	58000400 	.word	0x58000400

08007748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	460b      	mov	r3, r1
 8007752:	807b      	strh	r3, [r7, #2]
 8007754:	4613      	mov	r3, r2
 8007756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007758:	787b      	ldrb	r3, [r7, #1]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800775e:	887a      	ldrh	r2, [r7, #2]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007764:	e003      	b.n	800776e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007766:	887b      	ldrh	r3, [r7, #2]
 8007768:	041a      	lsls	r2, r3, #16
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	619a      	str	r2, [r3, #24]
}
 800776e:	bf00      	nop
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
	...

0800777c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e08b      	b.n	80078a6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d106      	bne.n	80077a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7fa feb4 	bl	8002510 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2224      	movs	r2, #36	@ 0x24
 80077ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f022 0201 	bic.w	r2, r2, #1
 80077be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80077cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689a      	ldr	r2, [r3, #8]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80077dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d107      	bne.n	80077f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	689a      	ldr	r2, [r3, #8]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80077f2:	609a      	str	r2, [r3, #8]
 80077f4:	e006      	b.n	8007804 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	689a      	ldr	r2, [r3, #8]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007802:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	2b02      	cmp	r3, #2
 800780a:	d108      	bne.n	800781e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800781a:	605a      	str	r2, [r3, #4]
 800781c:	e007      	b.n	800782e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800782c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6859      	ldr	r1, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	4b1d      	ldr	r3, [pc, #116]	@ (80078b0 <HAL_I2C_Init+0x134>)
 800783a:	430b      	orrs	r3, r1
 800783c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68da      	ldr	r2, [r3, #12]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800784c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	691a      	ldr	r2, [r3, #16]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	430a      	orrs	r2, r1
 8007866:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	69d9      	ldr	r1, [r3, #28]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a1a      	ldr	r2, [r3, #32]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f042 0201 	orr.w	r2, r2, #1
 8007886:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2220      	movs	r2, #32
 8007892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	02008000 	.word	0x02008000

080078b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b088      	sub	sp, #32
 80078b8:	af02      	add	r7, sp, #8
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	607a      	str	r2, [r7, #4]
 80078be:	461a      	mov	r2, r3
 80078c0:	460b      	mov	r3, r1
 80078c2:	817b      	strh	r3, [r7, #10]
 80078c4:	4613      	mov	r3, r2
 80078c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b20      	cmp	r3, #32
 80078d2:	f040 80fd 	bne.w	8007ad0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d101      	bne.n	80078e4 <HAL_I2C_Master_Transmit+0x30>
 80078e0:	2302      	movs	r3, #2
 80078e2:	e0f6      	b.n	8007ad2 <HAL_I2C_Master_Transmit+0x21e>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80078ec:	f7fb fdd2 	bl	8003494 <HAL_GetTick>
 80078f0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	2319      	movs	r3, #25
 80078f8:	2201      	movs	r2, #1
 80078fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f001 f891 	bl	8008a26 <I2C_WaitOnFlagUntilTimeout>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e0e1      	b.n	8007ad2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2221      	movs	r2, #33	@ 0x21
 8007912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2210      	movs	r2, #16
 800791a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	893a      	ldrh	r2, [r7, #8]
 800792e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800793a:	b29b      	uxth	r3, r3
 800793c:	2bff      	cmp	r3, #255	@ 0xff
 800793e:	d906      	bls.n	800794e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	22ff      	movs	r2, #255	@ 0xff
 8007944:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007946:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800794a:	617b      	str	r3, [r7, #20]
 800794c:	e007      	b.n	800795e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007952:	b29a      	uxth	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007958:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800795c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007962:	2b00      	cmp	r3, #0
 8007964:	d024      	beq.n	80079b0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800796a:	781a      	ldrb	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007976:	1c5a      	adds	r2, r3, #1
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007980:	b29b      	uxth	r3, r3
 8007982:	3b01      	subs	r3, #1
 8007984:	b29a      	uxth	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800798e:	3b01      	subs	r3, #1
 8007990:	b29a      	uxth	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800799a:	b2db      	uxtb	r3, r3
 800799c:	3301      	adds	r3, #1
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	8979      	ldrh	r1, [r7, #10]
 80079a2:	4b4e      	ldr	r3, [pc, #312]	@ (8007adc <HAL_I2C_Master_Transmit+0x228>)
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f001 fa8b 	bl	8008ec4 <I2C_TransferConfig>
 80079ae:	e066      	b.n	8007a7e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	8979      	ldrh	r1, [r7, #10]
 80079b8:	4b48      	ldr	r3, [pc, #288]	@ (8007adc <HAL_I2C_Master_Transmit+0x228>)
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f001 fa80 	bl	8008ec4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80079c4:	e05b      	b.n	8007a7e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	6a39      	ldr	r1, [r7, #32]
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	f001 f884 	bl	8008ad8 <I2C_WaitOnTXISFlagUntilTimeout>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d001      	beq.n	80079da <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e07b      	b.n	8007ad2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079de:	781a      	ldrb	r2, [r3, #0]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ea:	1c5a      	adds	r2, r3, #1
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	3b01      	subs	r3, #1
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a02:	3b01      	subs	r3, #1
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d034      	beq.n	8007a7e <HAL_I2C_Master_Transmit+0x1ca>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d130      	bne.n	8007a7e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	2200      	movs	r2, #0
 8007a24:	2180      	movs	r1, #128	@ 0x80
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f000 fffd 	bl	8008a26 <I2C_WaitOnFlagUntilTimeout>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d001      	beq.n	8007a36 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e04d      	b.n	8007ad2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	2bff      	cmp	r3, #255	@ 0xff
 8007a3e:	d90e      	bls.n	8007a5e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	22ff      	movs	r2, #255	@ 0xff
 8007a44:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	8979      	ldrh	r1, [r7, #10]
 8007a4e:	2300      	movs	r3, #0
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f001 fa34 	bl	8008ec4 <I2C_TransferConfig>
 8007a5c:	e00f      	b.n	8007a7e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	8979      	ldrh	r1, [r7, #10]
 8007a70:	2300      	movs	r3, #0
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f001 fa23 	bl	8008ec4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d19e      	bne.n	80079c6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	6a39      	ldr	r1, [r7, #32]
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f001 f86a 	bl	8008b66 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d001      	beq.n	8007a9c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e01a      	b.n	8007ad2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6859      	ldr	r1, [r3, #4]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae0 <HAL_I2C_Master_Transmit+0x22c>)
 8007ab0:	400b      	ands	r3, r1
 8007ab2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007acc:	2300      	movs	r3, #0
 8007ace:	e000      	b.n	8007ad2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007ad0:	2302      	movs	r3, #2
  }
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3718      	adds	r7, #24
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	80002000 	.word	0x80002000
 8007ae0:	fe00e800 	.word	0xfe00e800

08007ae4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af02      	add	r7, sp, #8
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	607a      	str	r2, [r7, #4]
 8007aee:	461a      	mov	r2, r3
 8007af0:	460b      	mov	r3, r1
 8007af2:	817b      	strh	r3, [r7, #10]
 8007af4:	4613      	mov	r3, r2
 8007af6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b20      	cmp	r3, #32
 8007b02:	f040 80db 	bne.w	8007cbc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d101      	bne.n	8007b14 <HAL_I2C_Master_Receive+0x30>
 8007b10:	2302      	movs	r3, #2
 8007b12:	e0d4      	b.n	8007cbe <HAL_I2C_Master_Receive+0x1da>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007b1c:	f7fb fcba 	bl	8003494 <HAL_GetTick>
 8007b20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	2319      	movs	r3, #25
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f000 ff79 	bl	8008a26 <I2C_WaitOnFlagUntilTimeout>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e0bf      	b.n	8007cbe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2222      	movs	r2, #34	@ 0x22
 8007b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2210      	movs	r2, #16
 8007b4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	893a      	ldrh	r2, [r7, #8]
 8007b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	2bff      	cmp	r3, #255	@ 0xff
 8007b6e:	d90e      	bls.n	8007b8e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	22ff      	movs	r2, #255	@ 0xff
 8007b74:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b7a:	b2da      	uxtb	r2, r3
 8007b7c:	8979      	ldrh	r1, [r7, #10]
 8007b7e:	4b52      	ldr	r3, [pc, #328]	@ (8007cc8 <HAL_I2C_Master_Receive+0x1e4>)
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f001 f99c 	bl	8008ec4 <I2C_TransferConfig>
 8007b8c:	e06d      	b.n	8007c6a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	8979      	ldrh	r1, [r7, #10]
 8007ba0:	4b49      	ldr	r3, [pc, #292]	@ (8007cc8 <HAL_I2C_Master_Receive+0x1e4>)
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f001 f98b 	bl	8008ec4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007bae:	e05c      	b.n	8007c6a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	6a39      	ldr	r1, [r7, #32]
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f001 f819 	bl	8008bec <I2C_WaitOnRXNEFlagUntilTimeout>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e07c      	b.n	8007cbe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bce:	b2d2      	uxtb	r2, r2
 8007bd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd6:	1c5a      	adds	r2, r3, #1
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007be0:	3b01      	subs	r3, #1
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d034      	beq.n	8007c6a <HAL_I2C_Master_Receive+0x186>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d130      	bne.n	8007c6a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	2180      	movs	r1, #128	@ 0x80
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f000 ff07 	bl	8008a26 <I2C_WaitOnFlagUntilTimeout>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e04d      	b.n	8007cbe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	2bff      	cmp	r3, #255	@ 0xff
 8007c2a:	d90e      	bls.n	8007c4a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	22ff      	movs	r2, #255	@ 0xff
 8007c30:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	8979      	ldrh	r1, [r7, #10]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f001 f93e 	bl	8008ec4 <I2C_TransferConfig>
 8007c48:	e00f      	b.n	8007c6a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	8979      	ldrh	r1, [r7, #10]
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f001 f92d 	bl	8008ec4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d19d      	bne.n	8007bb0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	6a39      	ldr	r1, [r7, #32]
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f000 ff74 	bl	8008b66 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d001      	beq.n	8007c88 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e01a      	b.n	8007cbe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6859      	ldr	r1, [r3, #4]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8007ccc <HAL_I2C_Master_Receive+0x1e8>)
 8007c9c:	400b      	ands	r3, r1
 8007c9e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	e000      	b.n	8007cbe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007cbc:	2302      	movs	r3, #2
  }
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3718      	adds	r7, #24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	80002400 	.word	0x80002400
 8007ccc:	fe00e800 	.word	0xfe00e800

08007cd0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d005      	beq.n	8007cfc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	68f9      	ldr	r1, [r7, #12]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	4798      	blx	r3
  }
}
 8007cfc:	bf00      	nop
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	0a1b      	lsrs	r3, r3, #8
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d010      	beq.n	8007d4a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	09db      	lsrs	r3, r3, #7
 8007d2c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00a      	beq.n	8007d4a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d38:	f043 0201 	orr.w	r2, r3, #1
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d48:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	0a9b      	lsrs	r3, r3, #10
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d010      	beq.n	8007d78 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	09db      	lsrs	r3, r3, #7
 8007d5a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00a      	beq.n	8007d78 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d66:	f043 0208 	orr.w	r2, r3, #8
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007d76:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	0a5b      	lsrs	r3, r3, #9
 8007d7c:	f003 0301 	and.w	r3, r3, #1
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d010      	beq.n	8007da6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	09db      	lsrs	r3, r3, #7
 8007d88:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00a      	beq.n	8007da6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d94:	f043 0202 	orr.w	r2, r3, #2
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007da4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007daa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f003 030b 	and.w	r3, r3, #11
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8007db6:	68f9      	ldr	r1, [r7, #12]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fcdb 	bl	8008774 <I2C_ITError>
  }
}
 8007dbe:	bf00      	nop
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b083      	sub	sp, #12
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007dce:	bf00      	nop
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b083      	sub	sp, #12
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007de2:	bf00      	nop
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b083      	sub	sp, #12
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	460b      	mov	r3, r1
 8007df8:	70fb      	strb	r3, [r7, #3]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007dfe:	bf00      	nop
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007e12:	bf00      	nop
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b083      	sub	sp, #12
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007e26:	bf00      	nop
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007e3a:	bf00      	nop
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b086      	sub	sp, #24
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	60f8      	str	r0, [r7, #12]
 8007e4e:	60b9      	str	r1, [r7, #8]
 8007e50:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e56:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d101      	bne.n	8007e6a <I2C_Slave_ISR_IT+0x24>
 8007e66:	2302      	movs	r3, #2
 8007e68:	e0ed      	b.n	8008046 <I2C_Slave_ISR_IT+0x200>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	095b      	lsrs	r3, r3, #5
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00a      	beq.n	8007e94 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	095b      	lsrs	r3, r3, #5
 8007e82:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d004      	beq.n	8007e94 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007e8a:	6939      	ldr	r1, [r7, #16]
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f000 f9c1 	bl	8008214 <I2C_ITSlaveCplt>
 8007e92:	e0d3      	b.n	800803c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	091b      	lsrs	r3, r3, #4
 8007e98:	f003 0301 	and.w	r3, r3, #1
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d04d      	beq.n	8007f3c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	091b      	lsrs	r3, r3, #4
 8007ea4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d047      	beq.n	8007f3c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d128      	bne.n	8007f08 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b28      	cmp	r3, #40	@ 0x28
 8007ec0:	d108      	bne.n	8007ed4 <I2C_Slave_ISR_IT+0x8e>
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ec8:	d104      	bne.n	8007ed4 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007eca:	6939      	ldr	r1, [r7, #16]
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 fbfb 	bl	80086c8 <I2C_ITListenCplt>
 8007ed2:	e032      	b.n	8007f3a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b29      	cmp	r3, #41	@ 0x29
 8007ede:	d10e      	bne.n	8007efe <I2C_Slave_ISR_IT+0xb8>
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ee6:	d00a      	beq.n	8007efe <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2210      	movs	r2, #16
 8007eee:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f000 fd56 	bl	80089a2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f000 f92d 	bl	8008156 <I2C_ITSlaveSeqCplt>
 8007efc:	e01d      	b.n	8007f3a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2210      	movs	r2, #16
 8007f04:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007f06:	e096      	b.n	8008036 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2210      	movs	r2, #16
 8007f0e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f14:	f043 0204 	orr.w	r2, r3, #4
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d004      	beq.n	8007f2c <I2C_Slave_ISR_IT+0xe6>
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f28:	f040 8085 	bne.w	8008036 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f30:	4619      	mov	r1, r3
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f000 fc1e 	bl	8008774 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007f38:	e07d      	b.n	8008036 <I2C_Slave_ISR_IT+0x1f0>
 8007f3a:	e07c      	b.n	8008036 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	089b      	lsrs	r3, r3, #2
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d030      	beq.n	8007faa <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	089b      	lsrs	r3, r3, #2
 8007f4c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d02a      	beq.n	8007faa <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d018      	beq.n	8007f90 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f68:	b2d2      	uxtb	r2, r2
 8007f6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f70:	1c5a      	adds	r2, r3, #1
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d14f      	bne.n	800803a <I2C_Slave_ISR_IT+0x1f4>
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007fa0:	d04b      	beq.n	800803a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f000 f8d7 	bl	8008156 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007fa8:	e047      	b.n	800803a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	08db      	lsrs	r3, r3, #3
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00a      	beq.n	8007fcc <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	08db      	lsrs	r3, r3, #3
 8007fba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d004      	beq.n	8007fcc <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007fc2:	6939      	ldr	r1, [r7, #16]
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f000 f842 	bl	800804e <I2C_ITAddrCplt>
 8007fca:	e037      	b.n	800803c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	085b      	lsrs	r3, r3, #1
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d031      	beq.n	800803c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	085b      	lsrs	r3, r3, #1
 8007fdc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d02b      	beq.n	800803c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d018      	beq.n	8008020 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff2:	781a      	ldrb	r2, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008008:	b29b      	uxth	r3, r3
 800800a:	3b01      	subs	r3, #1
 800800c:	b29a      	uxth	r2, r3
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008016:	3b01      	subs	r3, #1
 8008018:	b29a      	uxth	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800801e:	e00d      	b.n	800803c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008026:	d002      	beq.n	800802e <I2C_Slave_ISR_IT+0x1e8>
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d106      	bne.n	800803c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f000 f891 	bl	8008156 <I2C_ITSlaveSeqCplt>
 8008034:	e002      	b.n	800803c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8008036:	bf00      	nop
 8008038:	e000      	b.n	800803c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800803a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3718      	adds	r7, #24
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b084      	sub	sp, #16
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800805e:	b2db      	uxtb	r3, r3
 8008060:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008064:	2b28      	cmp	r3, #40	@ 0x28
 8008066:	d16a      	bne.n	800813e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	0c1b      	lsrs	r3, r3, #16
 8008070:	b2db      	uxtb	r3, r3
 8008072:	f003 0301 	and.w	r3, r3, #1
 8008076:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	0c1b      	lsrs	r3, r3, #16
 8008080:	b29b      	uxth	r3, r3
 8008082:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008086:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	b29b      	uxth	r3, r3
 8008090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008094:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	b29b      	uxth	r3, r3
 800809e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80080a2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d138      	bne.n	800811e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80080ac:	897b      	ldrh	r3, [r7, #10]
 80080ae:	09db      	lsrs	r3, r3, #7
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	89bb      	ldrh	r3, [r7, #12]
 80080b4:	4053      	eors	r3, r2
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	f003 0306 	and.w	r3, r3, #6
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d11c      	bne.n	80080fa <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80080c0:	897b      	ldrh	r3, [r7, #10]
 80080c2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080c8:	1c5a      	adds	r2, r3, #1
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d13b      	bne.n	800814e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2208      	movs	r2, #8
 80080e2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80080ec:	89ba      	ldrh	r2, [r7, #12]
 80080ee:	7bfb      	ldrb	r3, [r7, #15]
 80080f0:	4619      	mov	r1, r3
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7ff fe7b 	bl	8007dee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80080f8:	e029      	b.n	800814e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80080fa:	893b      	ldrh	r3, [r7, #8]
 80080fc:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80080fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 ff10 	bl	8008f28 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008110:	89ba      	ldrh	r2, [r7, #12]
 8008112:	7bfb      	ldrb	r3, [r7, #15]
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7ff fe69 	bl	8007dee <HAL_I2C_AddrCallback>
}
 800811c:	e017      	b.n	800814e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800811e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 ff00 	bl	8008f28 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008130:	89ba      	ldrh	r2, [r7, #12]
 8008132:	7bfb      	ldrb	r3, [r7, #15]
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7ff fe59 	bl	8007dee <HAL_I2C_AddrCallback>
}
 800813c:	e007      	b.n	800814e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2208      	movs	r2, #8
 8008144:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800814e:	bf00      	nop
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b084      	sub	sp, #16
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	0b9b      	lsrs	r3, r3, #14
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	2b00      	cmp	r3, #0
 8008178:	d008      	beq.n	800818c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008188:	601a      	str	r2, [r3, #0]
 800818a:	e00d      	b.n	80081a8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	0bdb      	lsrs	r3, r3, #15
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	d007      	beq.n	80081a8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80081a6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	2b29      	cmp	r3, #41	@ 0x29
 80081b2:	d112      	bne.n	80081da <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2228      	movs	r2, #40	@ 0x28
 80081b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2221      	movs	r2, #33	@ 0x21
 80081c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80081c2:	2101      	movs	r1, #1
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 feaf 	bl	8008f28 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7ff fdf7 	bl	8007dc6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80081d8:	e017      	b.n	800820a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80081e4:	d111      	bne.n	800820a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2228      	movs	r2, #40	@ 0x28
 80081ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2222      	movs	r2, #34	@ 0x22
 80081f2:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80081f4:	2102      	movs	r1, #2
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fe96 	bl	8008f28 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7ff fde8 	bl	8007dda <HAL_I2C_SlaveRxCpltCallback>
}
 800820a:	bf00      	nop
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
	...

08008214 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b086      	sub	sp, #24
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800822e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008236:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2220      	movs	r2, #32
 800823e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008240:	7afb      	ldrb	r3, [r7, #11]
 8008242:	2b21      	cmp	r3, #33	@ 0x21
 8008244:	d002      	beq.n	800824c <I2C_ITSlaveCplt+0x38>
 8008246:	7afb      	ldrb	r3, [r7, #11]
 8008248:	2b29      	cmp	r3, #41	@ 0x29
 800824a:	d108      	bne.n	800825e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800824c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fe69 	bl	8008f28 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2221      	movs	r2, #33	@ 0x21
 800825a:	631a      	str	r2, [r3, #48]	@ 0x30
 800825c:	e019      	b.n	8008292 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800825e:	7afb      	ldrb	r3, [r7, #11]
 8008260:	2b22      	cmp	r3, #34	@ 0x22
 8008262:	d002      	beq.n	800826a <I2C_ITSlaveCplt+0x56>
 8008264:	7afb      	ldrb	r3, [r7, #11]
 8008266:	2b2a      	cmp	r3, #42	@ 0x2a
 8008268:	d108      	bne.n	800827c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800826a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fe5a 	bl	8008f28 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2222      	movs	r2, #34	@ 0x22
 8008278:	631a      	str	r2, [r3, #48]	@ 0x30
 800827a:	e00a      	b.n	8008292 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800827c:	7afb      	ldrb	r3, [r7, #11]
 800827e:	2b28      	cmp	r3, #40	@ 0x28
 8008280:	d107      	bne.n	8008292 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008282:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fe4e 	bl	8008f28 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082a0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	6859      	ldr	r1, [r3, #4]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	4b80      	ldr	r3, [pc, #512]	@ (80084b0 <I2C_ITSlaveCplt+0x29c>)
 80082ae:	400b      	ands	r3, r1
 80082b0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fb75 	bl	80089a2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	0b9b      	lsrs	r3, r3, #14
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d07a      	beq.n	80083ba <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80082d2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 8112 	beq.w	8008502 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a73      	ldr	r2, [pc, #460]	@ (80084b4 <I2C_ITSlaveCplt+0x2a0>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d059      	beq.n	800839e <I2C_ITSlaveCplt+0x18a>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a71      	ldr	r2, [pc, #452]	@ (80084b8 <I2C_ITSlaveCplt+0x2a4>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d053      	beq.n	800839e <I2C_ITSlaveCplt+0x18a>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a6f      	ldr	r2, [pc, #444]	@ (80084bc <I2C_ITSlaveCplt+0x2a8>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d04d      	beq.n	800839e <I2C_ITSlaveCplt+0x18a>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a6d      	ldr	r2, [pc, #436]	@ (80084c0 <I2C_ITSlaveCplt+0x2ac>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d047      	beq.n	800839e <I2C_ITSlaveCplt+0x18a>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a6b      	ldr	r2, [pc, #428]	@ (80084c4 <I2C_ITSlaveCplt+0x2b0>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d041      	beq.n	800839e <I2C_ITSlaveCplt+0x18a>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a69      	ldr	r2, [pc, #420]	@ (80084c8 <I2C_ITSlaveCplt+0x2b4>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d03b      	beq.n	800839e <I2C_ITSlaveCplt+0x18a>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a67      	ldr	r2, [pc, #412]	@ (80084cc <I2C_ITSlaveCplt+0x2b8>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d035      	beq.n	800839e <I2C_ITSlaveCplt+0x18a>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a65      	ldr	r2, [pc, #404]	@ (80084d0 <I2C_ITSlaveCplt+0x2bc>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d02f      	beq.n	800839e <I2C_ITSlaveCplt+0x18a>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a63      	ldr	r2, [pc, #396]	@ (80084d4 <I2C_ITSlaveCplt+0x2c0>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d029      	beq.n	800839e <I2C_ITSlaveCplt+0x18a>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a61      	ldr	r2, [pc, #388]	@ (80084d8 <I2C_ITSlaveCplt+0x2c4>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d023      	beq.n	800839e <I2C_ITSlaveCplt+0x18a>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a5f      	ldr	r2, [pc, #380]	@ (80084dc <I2C_ITSlaveCplt+0x2c8>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d01d      	beq.n	800839e <I2C_ITSlaveCplt+0x18a>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a5d      	ldr	r2, [pc, #372]	@ (80084e0 <I2C_ITSlaveCplt+0x2cc>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d017      	beq.n	800839e <I2C_ITSlaveCplt+0x18a>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a5b      	ldr	r2, [pc, #364]	@ (80084e4 <I2C_ITSlaveCplt+0x2d0>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d011      	beq.n	800839e <I2C_ITSlaveCplt+0x18a>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a59      	ldr	r2, [pc, #356]	@ (80084e8 <I2C_ITSlaveCplt+0x2d4>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d00b      	beq.n	800839e <I2C_ITSlaveCplt+0x18a>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a57      	ldr	r2, [pc, #348]	@ (80084ec <I2C_ITSlaveCplt+0x2d8>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d005      	beq.n	800839e <I2C_ITSlaveCplt+0x18a>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a55      	ldr	r2, [pc, #340]	@ (80084f0 <I2C_ITSlaveCplt+0x2dc>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d105      	bne.n	80083aa <I2C_ITSlaveCplt+0x196>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	e004      	b.n	80083b4 <I2C_ITSlaveCplt+0x1a0>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80083b8:	e0a3      	b.n	8008502 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	0bdb      	lsrs	r3, r3, #15
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	f000 809d 	beq.w	8008502 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80083d6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 8090 	beq.w	8008502 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a32      	ldr	r2, [pc, #200]	@ (80084b4 <I2C_ITSlaveCplt+0x2a0>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d059      	beq.n	80084a2 <I2C_ITSlaveCplt+0x28e>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a30      	ldr	r2, [pc, #192]	@ (80084b8 <I2C_ITSlaveCplt+0x2a4>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d053      	beq.n	80084a2 <I2C_ITSlaveCplt+0x28e>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a2e      	ldr	r2, [pc, #184]	@ (80084bc <I2C_ITSlaveCplt+0x2a8>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d04d      	beq.n	80084a2 <I2C_ITSlaveCplt+0x28e>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a2c      	ldr	r2, [pc, #176]	@ (80084c0 <I2C_ITSlaveCplt+0x2ac>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d047      	beq.n	80084a2 <I2C_ITSlaveCplt+0x28e>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a2a      	ldr	r2, [pc, #168]	@ (80084c4 <I2C_ITSlaveCplt+0x2b0>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d041      	beq.n	80084a2 <I2C_ITSlaveCplt+0x28e>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a28      	ldr	r2, [pc, #160]	@ (80084c8 <I2C_ITSlaveCplt+0x2b4>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d03b      	beq.n	80084a2 <I2C_ITSlaveCplt+0x28e>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a26      	ldr	r2, [pc, #152]	@ (80084cc <I2C_ITSlaveCplt+0x2b8>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d035      	beq.n	80084a2 <I2C_ITSlaveCplt+0x28e>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a24      	ldr	r2, [pc, #144]	@ (80084d0 <I2C_ITSlaveCplt+0x2bc>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d02f      	beq.n	80084a2 <I2C_ITSlaveCplt+0x28e>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a22      	ldr	r2, [pc, #136]	@ (80084d4 <I2C_ITSlaveCplt+0x2c0>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d029      	beq.n	80084a2 <I2C_ITSlaveCplt+0x28e>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a20      	ldr	r2, [pc, #128]	@ (80084d8 <I2C_ITSlaveCplt+0x2c4>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d023      	beq.n	80084a2 <I2C_ITSlaveCplt+0x28e>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a1e      	ldr	r2, [pc, #120]	@ (80084dc <I2C_ITSlaveCplt+0x2c8>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d01d      	beq.n	80084a2 <I2C_ITSlaveCplt+0x28e>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a1c      	ldr	r2, [pc, #112]	@ (80084e0 <I2C_ITSlaveCplt+0x2cc>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d017      	beq.n	80084a2 <I2C_ITSlaveCplt+0x28e>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a1a      	ldr	r2, [pc, #104]	@ (80084e4 <I2C_ITSlaveCplt+0x2d0>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d011      	beq.n	80084a2 <I2C_ITSlaveCplt+0x28e>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a18      	ldr	r2, [pc, #96]	@ (80084e8 <I2C_ITSlaveCplt+0x2d4>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d00b      	beq.n	80084a2 <I2C_ITSlaveCplt+0x28e>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a16      	ldr	r2, [pc, #88]	@ (80084ec <I2C_ITSlaveCplt+0x2d8>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d005      	beq.n	80084a2 <I2C_ITSlaveCplt+0x28e>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a14      	ldr	r2, [pc, #80]	@ (80084f0 <I2C_ITSlaveCplt+0x2dc>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d128      	bne.n	80084f4 <I2C_ITSlaveCplt+0x2e0>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	e027      	b.n	80084fe <I2C_ITSlaveCplt+0x2ea>
 80084ae:	bf00      	nop
 80084b0:	fe00e800 	.word	0xfe00e800
 80084b4:	40020010 	.word	0x40020010
 80084b8:	40020028 	.word	0x40020028
 80084bc:	40020040 	.word	0x40020040
 80084c0:	40020058 	.word	0x40020058
 80084c4:	40020070 	.word	0x40020070
 80084c8:	40020088 	.word	0x40020088
 80084cc:	400200a0 	.word	0x400200a0
 80084d0:	400200b8 	.word	0x400200b8
 80084d4:	40020410 	.word	0x40020410
 80084d8:	40020428 	.word	0x40020428
 80084dc:	40020440 	.word	0x40020440
 80084e0:	40020458 	.word	0x40020458
 80084e4:	40020470 	.word	0x40020470
 80084e8:	40020488 	.word	0x40020488
 80084ec:	400204a0 	.word	0x400204a0
 80084f0:	400204b8 	.word	0x400204b8
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	089b      	lsrs	r3, r3, #2
 8008506:	f003 0301 	and.w	r3, r3, #1
 800850a:	2b00      	cmp	r3, #0
 800850c:	d020      	beq.n	8008550 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f023 0304 	bic.w	r3, r3, #4
 8008514:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008520:	b2d2      	uxtb	r2, r2
 8008522:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008528:	1c5a      	adds	r2, r3, #1
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00c      	beq.n	8008550 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800853a:	3b01      	subs	r3, #1
 800853c:	b29a      	uxth	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008546:	b29b      	uxth	r3, r3
 8008548:	3b01      	subs	r3, #1
 800854a:	b29a      	uxth	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008554:	b29b      	uxth	r3, r3
 8008556:	2b00      	cmp	r3, #0
 8008558:	d005      	beq.n	8008566 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800855e:	f043 0204 	orr.w	r2, r3, #4
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	091b      	lsrs	r3, r3, #4
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	2b00      	cmp	r3, #0
 8008570:	d04a      	beq.n	8008608 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	091b      	lsrs	r3, r3, #4
 8008576:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800857a:	2b00      	cmp	r3, #0
 800857c:	d044      	beq.n	8008608 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008582:	b29b      	uxth	r3, r3
 8008584:	2b00      	cmp	r3, #0
 8008586:	d128      	bne.n	80085da <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800858e:	b2db      	uxtb	r3, r3
 8008590:	2b28      	cmp	r3, #40	@ 0x28
 8008592:	d108      	bne.n	80085a6 <I2C_ITSlaveCplt+0x392>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800859a:	d104      	bne.n	80085a6 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800859c:	6979      	ldr	r1, [r7, #20]
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f892 	bl	80086c8 <I2C_ITListenCplt>
 80085a4:	e030      	b.n	8008608 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b29      	cmp	r3, #41	@ 0x29
 80085b0:	d10e      	bne.n	80085d0 <I2C_ITSlaveCplt+0x3bc>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80085b8:	d00a      	beq.n	80085d0 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2210      	movs	r2, #16
 80085c0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f9ed 	bl	80089a2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f7ff fdc4 	bl	8008156 <I2C_ITSlaveSeqCplt>
 80085ce:	e01b      	b.n	8008608 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2210      	movs	r2, #16
 80085d6:	61da      	str	r2, [r3, #28]
 80085d8:	e016      	b.n	8008608 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2210      	movs	r2, #16
 80085e0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085e6:	f043 0204 	orr.w	r2, r3, #4
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d003      	beq.n	80085fc <I2C_ITSlaveCplt+0x3e8>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085fa:	d105      	bne.n	8008608 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f8b6 	bl	8008774 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800861a:	2b00      	cmp	r3, #0
 800861c:	d010      	beq.n	8008640 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f8a5 	bl	8008774 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b28      	cmp	r3, #40	@ 0x28
 8008634:	d141      	bne.n	80086ba <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008636:	6979      	ldr	r1, [r7, #20]
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f845 	bl	80086c8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800863e:	e03c      	b.n	80086ba <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008644:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008648:	d014      	beq.n	8008674 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f7ff fd83 	bl	8008156 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a1c      	ldr	r2, [pc, #112]	@ (80086c4 <I2C_ITSlaveCplt+0x4b0>)
 8008654:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2220      	movs	r2, #32
 800865a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7ff fbcc 	bl	8007e0a <HAL_I2C_ListenCpltCallback>
}
 8008672:	e022      	b.n	80086ba <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800867a:	b2db      	uxtb	r3, r3
 800867c:	2b22      	cmp	r3, #34	@ 0x22
 800867e:	d10e      	bne.n	800869e <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2220      	movs	r2, #32
 8008684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7ff fb9f 	bl	8007dda <HAL_I2C_SlaveRxCpltCallback>
}
 800869c:	e00d      	b.n	80086ba <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2220      	movs	r2, #32
 80086a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f7ff fb86 	bl	8007dc6 <HAL_I2C_SlaveTxCpltCallback>
}
 80086ba:	bf00      	nop
 80086bc:	3718      	adds	r7, #24
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	ffff0000 	.word	0xffff0000

080086c8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a26      	ldr	r2, [pc, #152]	@ (8008770 <I2C_ITListenCplt+0xa8>)
 80086d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2220      	movs	r2, #32
 80086e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	089b      	lsrs	r3, r3, #2
 80086f8:	f003 0301 	and.w	r3, r3, #1
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d022      	beq.n	8008746 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800870a:	b2d2      	uxtb	r2, r2
 800870c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008712:	1c5a      	adds	r2, r3, #1
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800871c:	2b00      	cmp	r3, #0
 800871e:	d012      	beq.n	8008746 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008724:	3b01      	subs	r3, #1
 8008726:	b29a      	uxth	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008730:	b29b      	uxth	r3, r3
 8008732:	3b01      	subs	r3, #1
 8008734:	b29a      	uxth	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800873e:	f043 0204 	orr.w	r2, r3, #4
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008746:	f248 0103 	movw	r1, #32771	@ 0x8003
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 fbec 	bl	8008f28 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2210      	movs	r2, #16
 8008756:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7ff fb52 	bl	8007e0a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008766:	bf00      	nop
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	ffff0000 	.word	0xffff0000

08008774 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008784:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a6d      	ldr	r2, [pc, #436]	@ (8008948 <I2C_ITError+0x1d4>)
 8008792:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	431a      	orrs	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
 80087a8:	2b28      	cmp	r3, #40	@ 0x28
 80087aa:	d005      	beq.n	80087b8 <I2C_ITError+0x44>
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
 80087ae:	2b29      	cmp	r3, #41	@ 0x29
 80087b0:	d002      	beq.n	80087b8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
 80087b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80087b6:	d10b      	bne.n	80087d0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80087b8:	2103      	movs	r1, #3
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fbb4 	bl	8008f28 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2228      	movs	r2, #40	@ 0x28
 80087c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a60      	ldr	r2, [pc, #384]	@ (800894c <I2C_ITError+0x1d8>)
 80087cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80087ce:	e030      	b.n	8008832 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80087d0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fba7 	bl	8008f28 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f8e1 	bl	80089a2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	2b60      	cmp	r3, #96	@ 0x60
 80087ea:	d01f      	beq.n	800882c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2220      	movs	r2, #32
 80087f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	f003 0320 	and.w	r3, r3, #32
 80087fe:	2b20      	cmp	r3, #32
 8008800:	d114      	bne.n	800882c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	f003 0310 	and.w	r3, r3, #16
 800880c:	2b10      	cmp	r3, #16
 800880e:	d109      	bne.n	8008824 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2210      	movs	r2, #16
 8008816:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800881c:	f043 0204 	orr.w	r2, r3, #4
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2220      	movs	r2, #32
 800882a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008836:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800883c:	2b00      	cmp	r3, #0
 800883e:	d039      	beq.n	80088b4 <I2C_ITError+0x140>
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	2b11      	cmp	r3, #17
 8008844:	d002      	beq.n	800884c <I2C_ITError+0xd8>
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	2b21      	cmp	r3, #33	@ 0x21
 800884a:	d133      	bne.n	80088b4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008856:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800885a:	d107      	bne.n	800886c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800886a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008870:	4618      	mov	r0, r3
 8008872:	f7fd fd13 	bl	800629c <HAL_DMA_GetState>
 8008876:	4603      	mov	r3, r0
 8008878:	2b01      	cmp	r3, #1
 800887a:	d017      	beq.n	80088ac <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008880:	4a33      	ldr	r2, [pc, #204]	@ (8008950 <I2C_ITError+0x1dc>)
 8008882:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008890:	4618      	mov	r0, r3
 8008892:	f7fc fb93 	bl	8004fbc <HAL_DMA_Abort_IT>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d04d      	beq.n	8008938 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80088a6:	4610      	mov	r0, r2
 80088a8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80088aa:	e045      	b.n	8008938 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f851 	bl	8008954 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80088b2:	e041      	b.n	8008938 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d039      	beq.n	8008930 <I2C_ITError+0x1bc>
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	2b12      	cmp	r3, #18
 80088c0:	d002      	beq.n	80088c8 <I2C_ITError+0x154>
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	2b22      	cmp	r3, #34	@ 0x22
 80088c6:	d133      	bne.n	8008930 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80088d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088d6:	d107      	bne.n	80088e8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80088e6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7fd fcd5 	bl	800629c <HAL_DMA_GetState>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d017      	beq.n	8008928 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088fc:	4a14      	ldr	r2, [pc, #80]	@ (8008950 <I2C_ITError+0x1dc>)
 80088fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800890c:	4618      	mov	r0, r3
 800890e:	f7fc fb55 	bl	8004fbc <HAL_DMA_Abort_IT>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d011      	beq.n	800893c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800891c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008922:	4610      	mov	r0, r2
 8008924:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008926:	e009      	b.n	800893c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f813 	bl	8008954 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800892e:	e005      	b.n	800893c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f80f 	bl	8008954 <I2C_TreatErrorCallback>
  }
}
 8008936:	e002      	b.n	800893e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008938:	bf00      	nop
 800893a:	e000      	b.n	800893e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800893c:	bf00      	nop
}
 800893e:	bf00      	nop
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	ffff0000 	.word	0xffff0000
 800894c:	08007e47 	.word	0x08007e47
 8008950:	080089eb 	.word	0x080089eb

08008954 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b60      	cmp	r3, #96	@ 0x60
 8008966:	d10e      	bne.n	8008986 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2220      	movs	r2, #32
 800896c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7ff fa57 	bl	8007e32 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008984:	e009      	b.n	800899a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7ff fa42 	bl	8007e1e <HAL_I2C_ErrorCallback>
}
 800899a:	bf00      	nop
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b083      	sub	sp, #12
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	f003 0302 	and.w	r3, r3, #2
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d103      	bne.n	80089c0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2200      	movs	r2, #0
 80089be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d007      	beq.n	80089de <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	699a      	ldr	r2, [r3, #24]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f042 0201 	orr.w	r2, r2, #1
 80089dc:	619a      	str	r2, [r3, #24]
  }
}
 80089de:	bf00      	nop
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b084      	sub	sp, #16
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d003      	beq.n	8008a08 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a04:	2200      	movs	r2, #0
 8008a06:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a14:	2200      	movs	r2, #0
 8008a16:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f7ff ff9b 	bl	8008954 <I2C_TreatErrorCallback>
}
 8008a1e:	bf00      	nop
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b084      	sub	sp, #16
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	60f8      	str	r0, [r7, #12]
 8008a2e:	60b9      	str	r1, [r7, #8]
 8008a30:	603b      	str	r3, [r7, #0]
 8008a32:	4613      	mov	r3, r2
 8008a34:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a36:	e03b      	b.n	8008ab0 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a38:	69ba      	ldr	r2, [r7, #24]
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f000 f961 	bl	8008d04 <I2C_IsErrorOccurred>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d001      	beq.n	8008a4c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e041      	b.n	8008ad0 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a52:	d02d      	beq.n	8008ab0 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a54:	f7fa fd1e 	bl	8003494 <HAL_GetTick>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d302      	bcc.n	8008a6a <I2C_WaitOnFlagUntilTimeout+0x44>
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d122      	bne.n	8008ab0 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	699a      	ldr	r2, [r3, #24]
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	4013      	ands	r3, r2
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	bf0c      	ite	eq
 8008a7a:	2301      	moveq	r3, #1
 8008a7c:	2300      	movne	r3, #0
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	461a      	mov	r2, r3
 8008a82:	79fb      	ldrb	r3, [r7, #7]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d113      	bne.n	8008ab0 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a8c:	f043 0220 	orr.w	r2, r3, #32
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2220      	movs	r2, #32
 8008a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e00f      	b.n	8008ad0 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	699a      	ldr	r2, [r3, #24]
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	4013      	ands	r3, r2
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	bf0c      	ite	eq
 8008ac0:	2301      	moveq	r3, #1
 8008ac2:	2300      	movne	r3, #0
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	79fb      	ldrb	r3, [r7, #7]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d0b4      	beq.n	8008a38 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008ae4:	e033      	b.n	8008b4e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	68b9      	ldr	r1, [r7, #8]
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f000 f90a 	bl	8008d04 <I2C_IsErrorOccurred>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d001      	beq.n	8008afa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e031      	b.n	8008b5e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b00:	d025      	beq.n	8008b4e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b02:	f7fa fcc7 	bl	8003494 <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d302      	bcc.n	8008b18 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d11a      	bne.n	8008b4e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	f003 0302 	and.w	r3, r3, #2
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d013      	beq.n	8008b4e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b2a:	f043 0220 	orr.w	r2, r3, #32
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2220      	movs	r2, #32
 8008b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e007      	b.n	8008b5e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	699b      	ldr	r3, [r3, #24]
 8008b54:	f003 0302 	and.w	r3, r3, #2
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d1c4      	bne.n	8008ae6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b084      	sub	sp, #16
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	60f8      	str	r0, [r7, #12]
 8008b6e:	60b9      	str	r1, [r7, #8]
 8008b70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b72:	e02f      	b.n	8008bd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	68b9      	ldr	r1, [r7, #8]
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f000 f8c3 	bl	8008d04 <I2C_IsErrorOccurred>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d001      	beq.n	8008b88 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e02d      	b.n	8008be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b88:	f7fa fc84 	bl	8003494 <HAL_GetTick>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	68ba      	ldr	r2, [r7, #8]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d302      	bcc.n	8008b9e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d11a      	bne.n	8008bd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	f003 0320 	and.w	r3, r3, #32
 8008ba8:	2b20      	cmp	r3, #32
 8008baa:	d013      	beq.n	8008bd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bb0:	f043 0220 	orr.w	r2, r3, #32
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2220      	movs	r2, #32
 8008bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e007      	b.n	8008be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	699b      	ldr	r3, [r3, #24]
 8008bda:	f003 0320 	and.w	r3, r3, #32
 8008bde:	2b20      	cmp	r3, #32
 8008be0:	d1c8      	bne.n	8008b74 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008bfc:	e071      	b.n	8008ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	68b9      	ldr	r1, [r7, #8]
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 f87e 	bl	8008d04 <I2C_IsErrorOccurred>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d001      	beq.n	8008c12 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	f003 0320 	and.w	r3, r3, #32
 8008c1c:	2b20      	cmp	r3, #32
 8008c1e:	d13b      	bne.n	8008c98 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008c20:	7dfb      	ldrb	r3, [r7, #23]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d138      	bne.n	8008c98 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	699b      	ldr	r3, [r3, #24]
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b04      	cmp	r3, #4
 8008c32:	d105      	bne.n	8008c40 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	f003 0310 	and.w	r3, r3, #16
 8008c4a:	2b10      	cmp	r3, #16
 8008c4c:	d121      	bne.n	8008c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2210      	movs	r2, #16
 8008c54:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2204      	movs	r2, #4
 8008c5a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2220      	movs	r2, #32
 8008c62:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	6859      	ldr	r1, [r3, #4]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	4b24      	ldr	r3, [pc, #144]	@ (8008d00 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008c70:	400b      	ands	r3, r1
 8008c72:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2220      	movs	r2, #32
 8008c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	75fb      	strb	r3, [r7, #23]
 8008c90:	e002      	b.n	8008c98 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008c98:	f7fa fbfc 	bl	8003494 <HAL_GetTick>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d302      	bcc.n	8008cae <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d119      	bne.n	8008ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d116      	bne.n	8008ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	f003 0304 	and.w	r3, r3, #4
 8008cbe:	2b04      	cmp	r3, #4
 8008cc0:	d00f      	beq.n	8008ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cc6:	f043 0220 	orr.w	r2, r3, #32
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2220      	movs	r2, #32
 8008cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	f003 0304 	and.w	r3, r3, #4
 8008cec:	2b04      	cmp	r3, #4
 8008cee:	d002      	beq.n	8008cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008cf0:	7dfb      	ldrb	r3, [r7, #23]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d083      	beq.n	8008bfe <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8008cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3718      	adds	r7, #24
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	fe00e800 	.word	0xfe00e800

08008d04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b08a      	sub	sp, #40	@ 0x28
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	699b      	ldr	r3, [r3, #24]
 8008d1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	f003 0310 	and.w	r3, r3, #16
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d068      	beq.n	8008e02 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2210      	movs	r2, #16
 8008d36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008d38:	e049      	b.n	8008dce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d40:	d045      	beq.n	8008dce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008d42:	f7fa fba7 	bl	8003494 <HAL_GetTick>
 8008d46:	4602      	mov	r2, r0
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	68ba      	ldr	r2, [r7, #8]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d302      	bcc.n	8008d58 <I2C_IsErrorOccurred+0x54>
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d13a      	bne.n	8008dce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d7a:	d121      	bne.n	8008dc0 <I2C_IsErrorOccurred+0xbc>
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d82:	d01d      	beq.n	8008dc0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008d84:	7cfb      	ldrb	r3, [r7, #19]
 8008d86:	2b20      	cmp	r3, #32
 8008d88:	d01a      	beq.n	8008dc0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008d9a:	f7fa fb7b 	bl	8003494 <HAL_GetTick>
 8008d9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008da0:	e00e      	b.n	8008dc0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008da2:	f7fa fb77 	bl	8003494 <HAL_GetTick>
 8008da6:	4602      	mov	r2, r0
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	2b19      	cmp	r3, #25
 8008dae:	d907      	bls.n	8008dc0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008db0:	6a3b      	ldr	r3, [r7, #32]
 8008db2:	f043 0320 	orr.w	r3, r3, #32
 8008db6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008dbe:	e006      	b.n	8008dce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	f003 0320 	and.w	r3, r3, #32
 8008dca:	2b20      	cmp	r3, #32
 8008dcc:	d1e9      	bne.n	8008da2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	f003 0320 	and.w	r3, r3, #32
 8008dd8:	2b20      	cmp	r3, #32
 8008dda:	d003      	beq.n	8008de4 <I2C_IsErrorOccurred+0xe0>
 8008ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d0aa      	beq.n	8008d3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008de4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d103      	bne.n	8008df4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2220      	movs	r2, #32
 8008df2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008df4:	6a3b      	ldr	r3, [r7, #32]
 8008df6:	f043 0304 	orr.w	r3, r3, #4
 8008dfa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00b      	beq.n	8008e2c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008e14:	6a3b      	ldr	r3, [r7, #32]
 8008e16:	f043 0301 	orr.w	r3, r3, #1
 8008e1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008e24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00b      	beq.n	8008e4e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008e36:	6a3b      	ldr	r3, [r7, #32]
 8008e38:	f043 0308 	orr.w	r3, r3, #8
 8008e3c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008e46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00b      	beq.n	8008e70 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008e58:	6a3b      	ldr	r3, [r7, #32]
 8008e5a:	f043 0302 	orr.w	r3, r3, #2
 8008e5e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008e70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d01c      	beq.n	8008eb2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f7ff fd92 	bl	80089a2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	6859      	ldr	r1, [r3, #4]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	4b0d      	ldr	r3, [pc, #52]	@ (8008ec0 <I2C_IsErrorOccurred+0x1bc>)
 8008e8a:	400b      	ands	r3, r1
 8008e8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e92:	6a3b      	ldr	r3, [r7, #32]
 8008e94:	431a      	orrs	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2220      	movs	r2, #32
 8008e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3728      	adds	r7, #40	@ 0x28
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	fe00e800 	.word	0xfe00e800

08008ec4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b087      	sub	sp, #28
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	607b      	str	r3, [r7, #4]
 8008ece:	460b      	mov	r3, r1
 8008ed0:	817b      	strh	r3, [r7, #10]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008ed6:	897b      	ldrh	r3, [r7, #10]
 8008ed8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008edc:	7a7b      	ldrb	r3, [r7, #9]
 8008ede:	041b      	lsls	r3, r3, #16
 8008ee0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008ee4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008eea:	6a3b      	ldr	r3, [r7, #32]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008ef2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	685a      	ldr	r2, [r3, #4]
 8008efa:	6a3b      	ldr	r3, [r7, #32]
 8008efc:	0d5b      	lsrs	r3, r3, #21
 8008efe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008f02:	4b08      	ldr	r3, [pc, #32]	@ (8008f24 <I2C_TransferConfig+0x60>)
 8008f04:	430b      	orrs	r3, r1
 8008f06:	43db      	mvns	r3, r3
 8008f08:	ea02 0103 	and.w	r1, r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	697a      	ldr	r2, [r7, #20]
 8008f12:	430a      	orrs	r2, r1
 8008f14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008f16:	bf00      	nop
 8008f18:	371c      	adds	r7, #28
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	03ff63ff 	.word	0x03ff63ff

08008f28 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008f34:	2300      	movs	r3, #0
 8008f36:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008f38:	887b      	ldrh	r3, [r7, #2]
 8008f3a:	f003 0301 	and.w	r3, r3, #1
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00f      	beq.n	8008f62 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008f48:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008f56:	2b28      	cmp	r3, #40	@ 0x28
 8008f58:	d003      	beq.n	8008f62 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008f60:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008f62:	887b      	ldrh	r3, [r7, #2]
 8008f64:	f003 0302 	and.w	r3, r3, #2
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00f      	beq.n	8008f8c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008f72:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008f80:	2b28      	cmp	r3, #40	@ 0x28
 8008f82:	d003      	beq.n	8008f8c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008f8a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008f8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	da03      	bge.n	8008f9c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008f9a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008f9c:	887b      	ldrh	r3, [r7, #2]
 8008f9e:	2b10      	cmp	r3, #16
 8008fa0:	d103      	bne.n	8008faa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008fa8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008faa:	887b      	ldrh	r3, [r7, #2]
 8008fac:	2b20      	cmp	r3, #32
 8008fae:	d103      	bne.n	8008fb8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f043 0320 	orr.w	r3, r3, #32
 8008fb6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008fb8:	887b      	ldrh	r3, [r7, #2]
 8008fba:	2b40      	cmp	r3, #64	@ 0x40
 8008fbc:	d103      	bne.n	8008fc6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fc4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	6819      	ldr	r1, [r3, #0]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	43da      	mvns	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	400a      	ands	r2, r1
 8008fd6:	601a      	str	r2, [r3, #0]
}
 8008fd8:	bf00      	nop
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	2b20      	cmp	r3, #32
 8008ff8:	d138      	bne.n	800906c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009000:	2b01      	cmp	r3, #1
 8009002:	d101      	bne.n	8009008 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009004:	2302      	movs	r3, #2
 8009006:	e032      	b.n	800906e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2224      	movs	r2, #36	@ 0x24
 8009014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f022 0201 	bic.w	r2, r2, #1
 8009026:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009036:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	6819      	ldr	r1, [r3, #0]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	430a      	orrs	r2, r1
 8009046:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f042 0201 	orr.w	r2, r2, #1
 8009056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2220      	movs	r2, #32
 800905c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	e000      	b.n	800906e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800906c:	2302      	movs	r3, #2
  }
}
 800906e:	4618      	mov	r0, r3
 8009070:	370c      	adds	r7, #12
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr

0800907a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800907a:	b480      	push	{r7}
 800907c:	b085      	sub	sp, #20
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800908a:	b2db      	uxtb	r3, r3
 800908c:	2b20      	cmp	r3, #32
 800908e:	d139      	bne.n	8009104 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009096:	2b01      	cmp	r3, #1
 8009098:	d101      	bne.n	800909e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800909a:	2302      	movs	r3, #2
 800909c:	e033      	b.n	8009106 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2224      	movs	r2, #36	@ 0x24
 80090aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f022 0201 	bic.w	r2, r2, #1
 80090bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80090cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	021b      	lsls	r3, r3, #8
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f042 0201 	orr.w	r2, r2, #1
 80090ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2220      	movs	r2, #32
 80090f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	e000      	b.n	8009106 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009104:	2302      	movs	r3, #2
  }
}
 8009106:	4618      	mov	r0, r3
 8009108:	3714      	adds	r7, #20
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
	...

08009114 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d101      	bne.n	8009126 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e070      	b.n	8009208 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800912c:	b2db      	uxtb	r3, r3
 800912e:	2b00      	cmp	r3, #0
 8009130:	d106      	bne.n	8009140 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7f9 fa74 	bl	8002628 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2202      	movs	r2, #2
 8009144:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f042 0201 	orr.w	r2, r2, #1
 8009156:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f022 0201 	bic.w	r2, r2, #1
 8009166:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009176:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009186:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009196:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80091a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a19      	ldr	r2, [pc, #100]	@ (8009210 <HAL_JPEG_Init+0xfc>)
 80091ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a18      	ldr	r2, [pc, #96]	@ (8009214 <HAL_JPEG_Init+0x100>)
 80091b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fe97 	bl	8009ef4 <JPEG_Set_HuffEnc_Mem>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d004      	beq.n	80091d6 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e018      	b.n	8009208 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80091e4:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	0801b5b8 	.word	0x0801b5b8
 8009214:	0801b5f8 	.word	0x0801b5f8

08009218 <HAL_JPEG_ConfigEncoding>:
  * @param  pConf pointer to a JPEG_ConfTypeDef structure that contains
  *         the encoding configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_ConfigEncoding(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pConf)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b088      	sub	sp, #32
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  uint32_t vfactor;
  uint32_t hMCU;
  uint32_t vMCU;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pConf == NULL))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d002      	beq.n	800922e <HAL_JPEG_ConfigEncoding+0x16>
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d101      	bne.n	8009232 <HAL_JPEG_ConfigEncoding+0x1a>
  {
    return HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	e191      	b.n	8009556 <HAL_JPEG_ConfigEncoding+0x33e>
    assert_param(IS_JPEG_COLORSPACE(pConf->ColorSpace));
    assert_param(IS_JPEG_CHROMASUBSAMPLING(pConf->ChromaSubsampling));
    assert_param(IS_JPEG_IMAGE_QUALITY(pConf->ImageQuality));

    /* Process Locked */
    __HAL_LOCK(hjpeg);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009238:	2b01      	cmp	r3, #1
 800923a:	d101      	bne.n	8009240 <HAL_JPEG_ConfigEncoding+0x28>
 800923c:	2302      	movs	r3, #2
 800923e:	e18a      	b.n	8009556 <HAL_JPEG_ConfigEncoding+0x33e>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    if (hjpeg->State == HAL_JPEG_STATE_READY)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800924e:	b2db      	uxtb	r3, r3
 8009250:	2b01      	cmp	r3, #1
 8009252:	f040 817b 	bne.w	800954c <HAL_JPEG_ConfigEncoding+0x334>
    {
      hjpeg->State = HAL_JPEG_STATE_BUSY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2202      	movs	r2, #2
 800925a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      hjpeg->Conf.ColorSpace          =  pConf->ColorSpace;
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	605a      	str	r2, [r3, #4]
      hjpeg->Conf.ChromaSubsampling   =  pConf->ChromaSubsampling;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	685a      	ldr	r2, [r3, #4]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	609a      	str	r2, [r3, #8]
      hjpeg->Conf.ImageHeight         =  pConf->ImageHeight;
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	689a      	ldr	r2, [r3, #8]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	60da      	str	r2, [r3, #12]
      hjpeg->Conf.ImageWidth          =  pConf->ImageWidth;
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	68da      	ldr	r2, [r3, #12]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	611a      	str	r2, [r3, #16]
      hjpeg->Conf.ImageQuality        =  pConf->ImageQuality;
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	691a      	ldr	r2, [r3, #16]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	615a      	str	r2, [r3, #20]

      /* Reset the Color Space : by default only one quantization table is used*/
      hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_COLORSPACE;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8009294:	605a      	str	r2, [r3, #4]

      /* Set Number of color components*/
      if (hjpeg->Conf.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d110      	bne.n	80092c0 <HAL_JPEG_ConfigEncoding+0xa8>
      {
        /*Gray Scale is only one component 8x8 blocks i.e 4:4:4*/
        hjpeg->Conf.ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	609a      	str	r2, [r3, #8]

        JPEG_SetColorGrayScale(hjpeg);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f001 f991 	bl	800a5cc <JPEG_SetColorGrayScale>
        /* Set quantization table 0*/
        error = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	3350      	adds	r3, #80	@ 0x50
 80092b4:	461a      	mov	r2, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f001 f89e 	bl	800a3f8 <JPEG_Set_Quantization_Mem>
 80092bc:	61f8      	str	r0, [r7, #28]
 80092be:	e0c5      	b.n	800944c <HAL_JPEG_ConfigEncoding+0x234>
      }
      else if (hjpeg->Conf.ColorSpace == JPEG_YCBCR_COLORSPACE)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	2b10      	cmp	r3, #16
 80092c6:	d166      	bne.n	8009396 <HAL_JPEG_ConfigEncoding+0x17e>
      {
        /*
           Set the Color Space for YCbCr : 2 quantization tables are used
           one for Luminance(Y) and one for both Chrominances (Cb & Cr)
          */
        hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE_0;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f042 0210 	orr.w	r2, r2, #16
 80092d6:	605a      	str	r2, [r3, #4]

        JPEG_SetColorYCBCR(hjpeg);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f001 f8ff 	bl	800a4dc <JPEG_SetColorYCBCR>

        /* Set quantization table 0*/
        error  = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	3350      	adds	r3, #80	@ 0x50
 80092e8:	461a      	mov	r2, r3
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f001 f884 	bl	800a3f8 <JPEG_Set_Quantization_Mem>
 80092f0:	61f8      	str	r0, [r7, #28]
        /*By default quantization table 0 for component 0 and quantization table 1 for both components 1 and 2*/
        error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable1, (hjpeg->Instance->QMEM1));
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	3390      	adds	r3, #144	@ 0x90
 80092fc:	461a      	mov	r2, r3
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f001 f87a 	bl	800a3f8 <JPEG_Set_Quantization_Mem>
 8009304:	4602      	mov	r2, r0
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	4313      	orrs	r3, r2
 800930a:	61fb      	str	r3, [r7, #28]

        if ((hjpeg->Context & JPEG_CONTEXT_CUSTOM_TABLES) != 0UL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009310:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 8099 	beq.w	800944c <HAL_JPEG_ConfigEncoding+0x234>
        {
          /*Use user customized quantization tables , 1 table per component*/
          /* use 3 quantization tables , one for each component*/
          hjpeg->Instance->CONFR1 &= (~JPEG_CONFR1_COLORSPACE);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	685a      	ldr	r2, [r3, #4]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8009328:	605a      	str	r2, [r3, #4]
          hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE_1;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	685a      	ldr	r2, [r3, #4]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f042 0220 	orr.w	r2, r2, #32
 8009338:	605a      	str	r2, [r3, #4]

          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable2, (hjpeg->Instance->QMEM2));
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	33d0      	adds	r3, #208	@ 0xd0
 8009344:	461a      	mov	r2, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f001 f856 	bl	800a3f8 <JPEG_Set_Quantization_Mem>
 800934c:	4602      	mov	r2, r0
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	4313      	orrs	r3, r2
 8009352:	61fb      	str	r3, [r7, #28]

          /*Use Quantization 1 table for component 1*/
          hjpeg->Instance->CONFR5 &= (~JPEG_CONFR5_QT);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	695a      	ldr	r2, [r3, #20]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f022 020c 	bic.w	r2, r2, #12
 8009362:	615a      	str	r2, [r3, #20]
          hjpeg->Instance->CONFR5 |=  JPEG_CONFR5_QT_0;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	695a      	ldr	r2, [r3, #20]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f042 0204 	orr.w	r2, r2, #4
 8009372:	615a      	str	r2, [r3, #20]

          /*Use Quantization 2 table for component 2*/
          hjpeg->Instance->CONFR6 &= (~JPEG_CONFR6_QT);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	699a      	ldr	r2, [r3, #24]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f022 020c 	bic.w	r2, r2, #12
 8009382:	619a      	str	r2, [r3, #24]
          hjpeg->Instance->CONFR6 |=  JPEG_CONFR6_QT_1;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	699a      	ldr	r2, [r3, #24]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f042 0208 	orr.w	r2, r2, #8
 8009392:	619a      	str	r2, [r3, #24]
 8009394:	e05a      	b.n	800944c <HAL_JPEG_ConfigEncoding+0x234>
        }
      }
      else /* ColorSpace == JPEG_CMYK_COLORSPACE */
      {
        JPEG_SetColorCMYK(hjpeg);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f001 f936 	bl	800a608 <JPEG_SetColorCMYK>

        /* Set quantization table 0*/
        error  = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	3350      	adds	r3, #80	@ 0x50
 80093a6:	461a      	mov	r2, r3
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f001 f825 	bl	800a3f8 <JPEG_Set_Quantization_Mem>
 80093ae:	61f8      	str	r0, [r7, #28]
        /*By default quantization table 0 for All components*/

        if ((hjpeg->Context & JPEG_CONTEXT_CUSTOM_TABLES) != 0UL)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d047      	beq.n	800944c <HAL_JPEG_ConfigEncoding+0x234>
        {
          /*Use user customized quantization tables , 1 table per component*/
          /* use 4 quantization tables , one for each component*/
          hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	685a      	ldr	r2, [r3, #4]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80093ca:	605a      	str	r2, [r3, #4]

          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable1, (hjpeg->Instance->QMEM1));
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3390      	adds	r3, #144	@ 0x90
 80093d6:	461a      	mov	r2, r3
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f001 f80d 	bl	800a3f8 <JPEG_Set_Quantization_Mem>
 80093de:	4602      	mov	r2, r0
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	61fb      	str	r3, [r7, #28]
          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable2, (hjpeg->Instance->QMEM2));
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	33d0      	adds	r3, #208	@ 0xd0
 80093f0:	461a      	mov	r2, r3
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f001 f800 	bl	800a3f8 <JPEG_Set_Quantization_Mem>
 80093f8:	4602      	mov	r2, r0
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	61fb      	str	r3, [r7, #28]
          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable3, (hjpeg->Instance->QMEM3));
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800940c:	461a      	mov	r2, r3
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fff2 	bl	800a3f8 <JPEG_Set_Quantization_Mem>
 8009414:	4602      	mov	r2, r0
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	4313      	orrs	r3, r2
 800941a:	61fb      	str	r3, [r7, #28]

          /*Use Quantization 1 table for component 1*/
          hjpeg->Instance->CONFR5 |=  JPEG_CONFR5_QT_0;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	695a      	ldr	r2, [r3, #20]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f042 0204 	orr.w	r2, r2, #4
 800942a:	615a      	str	r2, [r3, #20]

          /*Use Quantization 2 table for component 2*/
          hjpeg->Instance->CONFR6 |=  JPEG_CONFR6_QT_1;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	699a      	ldr	r2, [r3, #24]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f042 0208 	orr.w	r2, r2, #8
 800943a:	619a      	str	r2, [r3, #24]

          /*Use Quantization 3 table for component 3*/
          hjpeg->Instance->CONFR7 |=  JPEG_CONFR7_QT;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	69da      	ldr	r2, [r3, #28]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f042 020c 	orr.w	r2, r2, #12
 800944a:	61da      	str	r2, [r3, #28]
        }
      }

      if (error != 0UL)
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00c      	beq.n	800946c <HAL_JPEG_ConfigEncoding+0x254>
      {
        hjpeg->ErrorCode = HAL_JPEG_ERROR_QUANT_TABLE;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2202      	movs	r2, #2
 8009456:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Process Unlocked */
        __HAL_UNLOCK(hjpeg);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Set the JPEG State to ready */
        hjpeg->State = HAL_JPEG_STATE_READY;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

        return  HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	e074      	b.n	8009556 <HAL_JPEG_ConfigEncoding+0x33e>
      }
      /* Set the image size*/
      /* set the number of lines*/
      MODIFY_REG(hjpeg->Instance->CONFR1, JPEG_CONFR1_YSIZE, ((hjpeg->Conf.ImageHeight & 0x0000FFFFUL) << 16));
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	b299      	uxth	r1, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	041a      	lsls	r2, r3, #16
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	430a      	orrs	r2, r1
 8009480:	605a      	str	r2, [r3, #4]
      /* set the number of pixels per line*/
      MODIFY_REG(hjpeg->Instance->CONFR3, JPEG_CONFR3_XSIZE, ((hjpeg->Conf.ImageWidth & 0x0000FFFFUL) << 16));
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	b299      	uxth	r1, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	041a      	lsls	r2, r3, #16
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	430a      	orrs	r2, r1
 8009496:	60da      	str	r2, [r3, #12]


      if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING) /* 4:2:0*/
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	2b01      	cmp	r3, #1
 800949e:	d104      	bne.n	80094aa <HAL_JPEG_ConfigEncoding+0x292>
      {
        hfactor = 16;
 80094a0:	2310      	movs	r3, #16
 80094a2:	61bb      	str	r3, [r7, #24]
        vfactor = 16;
 80094a4:	2310      	movs	r3, #16
 80094a6:	617b      	str	r3, [r7, #20]
 80094a8:	e00c      	b.n	80094c4 <HAL_JPEG_ConfigEncoding+0x2ac>
      }
      else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING) /* 4:2:2*/
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d104      	bne.n	80094bc <HAL_JPEG_ConfigEncoding+0x2a4>
      {
        hfactor = 16;
 80094b2:	2310      	movs	r3, #16
 80094b4:	61bb      	str	r3, [r7, #24]
        vfactor = 8;
 80094b6:	2308      	movs	r3, #8
 80094b8:	617b      	str	r3, [r7, #20]
 80094ba:	e003      	b.n	80094c4 <HAL_JPEG_ConfigEncoding+0x2ac>
      }
      else /* Default is 8x8 MCU,  4:4:4*/
      {
        hfactor = 8;
 80094bc:	2308      	movs	r3, #8
 80094be:	61bb      	str	r3, [r7, #24]
        vfactor = 8;
 80094c0:	2308      	movs	r3, #8
 80094c2:	617b      	str	r3, [r7, #20]
      }

      hMCU = (hjpeg->Conf.ImageWidth / hfactor);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	691a      	ldr	r2, [r3, #16]
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80094ce:	613b      	str	r3, [r7, #16]
      if ((hjpeg->Conf.ImageWidth % hfactor) != 0UL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	69ba      	ldr	r2, [r7, #24]
 80094d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80094da:	69b9      	ldr	r1, [r7, #24]
 80094dc:	fb01 f202 	mul.w	r2, r1, r2
 80094e0:	1a9b      	subs	r3, r3, r2
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d002      	beq.n	80094ec <HAL_JPEG_ConfigEncoding+0x2d4>
      {
        hMCU++; /*+1 for horizontal incomplete MCU */
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	3301      	adds	r3, #1
 80094ea:	613b      	str	r3, [r7, #16]
      }

      vMCU = (hjpeg->Conf.ImageHeight / vfactor);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	68da      	ldr	r2, [r3, #12]
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f6:	60fb      	str	r3, [r7, #12]
      if ((hjpeg->Conf.ImageHeight % vfactor) != 0UL)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	697a      	ldr	r2, [r7, #20]
 80094fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8009502:	6979      	ldr	r1, [r7, #20]
 8009504:	fb01 f202 	mul.w	r2, r1, r2
 8009508:	1a9b      	subs	r3, r3, r2
 800950a:	2b00      	cmp	r3, #0
 800950c:	d002      	beq.n	8009514 <HAL_JPEG_ConfigEncoding+0x2fc>
      {
        vMCU++; /*+1 for vertical incomplete MCU */
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	3301      	adds	r3, #1
 8009512:	60fb      	str	r3, [r7, #12]
      }

      numberMCU = (hMCU * vMCU) - 1UL; /* Bit Field JPEG_CONFR2_NMCU shall be set to NB_MCU - 1*/
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	fb02 f303 	mul.w	r3, r2, r3
 800951c:	3b01      	subs	r3, #1
 800951e:	60bb      	str	r3, [r7, #8]
      /* Set the number of MCU*/
      hjpeg->Instance->CONFR2 = (numberMCU & JPEG_CONFR2_NMCU);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800952a:	609a      	str	r2, [r3, #8]

      hjpeg->Context |= JPEG_CONTEXT_CONF_ENCODING;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009530:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Set the JPEG State to ready */
      hjpeg->State = HAL_JPEG_STATE_READY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Return function status */
      return HAL_OK;
 8009548:	2300      	movs	r3, #0
 800954a:	e004      	b.n	8009556 <HAL_JPEG_ConfigEncoding+0x33e>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Return function status */
      return HAL_BUSY;
 8009554:	2302      	movs	r3, #2
    }
  }
}
 8009556:	4618      	mov	r0, r3
 8009558:	3720      	adds	r7, #32
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b086      	sub	sp, #24
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
 8009566:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d002      	beq.n	8009574 <HAL_JPEG_GetInfo+0x16>
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d101      	bne.n	8009578 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e083      	b.n	8009680 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	f003 0303 	and.w	r3, r3, #3
 8009582:	2b02      	cmp	r3, #2
 8009584:	d103      	bne.n	800958e <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	2210      	movs	r2, #16
 800958a:	601a      	str	r2, [r3, #0]
 800958c:	e017      	b.n	80095be <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	f003 0303 	and.w	r3, r3, #3
 8009598:	2b00      	cmp	r3, #0
 800959a:	d103      	bne.n	80095a4 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	2200      	movs	r2, #0
 80095a0:	601a      	str	r2, [r3, #0]
 80095a2:	e00c      	b.n	80095be <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f003 0303 	and.w	r3, r3, #3
 80095ae:	2b03      	cmp	r3, #3
 80095b0:	d103      	bne.n	80095ba <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	2230      	movs	r2, #48	@ 0x30
 80095b6:	601a      	str	r2, [r3, #0]
 80095b8:	e001      	b.n	80095be <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e060      	b.n	8009680 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	0c1b      	lsrs	r3, r3, #16
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	0c1b      	lsrs	r3, r3, #16
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2b10      	cmp	r3, #16
 80095e0:	d003      	beq.n	80095ea <HAL_JPEG_GetInfo+0x8c>
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b30      	cmp	r3, #48	@ 0x30
 80095e8:	d140      	bne.n	800966c <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	091b      	lsrs	r3, r3, #4
 80095f2:	f003 030f 	and.w	r3, r3, #15
 80095f6:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	695b      	ldr	r3, [r3, #20]
 80095fe:	091b      	lsrs	r3, r3, #4
 8009600:	f003 030f 	and.w	r3, r3, #15
 8009604:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	699b      	ldr	r3, [r3, #24]
 800960c:	091b      	lsrs	r3, r3, #4
 800960e:	f003 030f 	and.w	r3, r3, #15
 8009612:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	2b01      	cmp	r3, #1
 8009618:	d109      	bne.n	800962e <HAL_JPEG_GetInfo+0xd0>
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d106      	bne.n	800962e <HAL_JPEG_GetInfo+0xd0>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d103      	bne.n	800962e <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	2202      	movs	r2, #2
 800962a:	605a      	str	r2, [r3, #4]
 800962c:	e01d      	b.n	800966a <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d109      	bne.n	8009648 <HAL_JPEG_GetInfo+0xea>
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d106      	bne.n	8009648 <HAL_JPEG_GetInfo+0xea>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d103      	bne.n	8009648 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	2200      	movs	r2, #0
 8009644:	605a      	str	r2, [r3, #4]
 8009646:	e010      	b.n	800966a <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	2b03      	cmp	r3, #3
 800964c:	d109      	bne.n	8009662 <HAL_JPEG_GetInfo+0x104>
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d106      	bne.n	8009662 <HAL_JPEG_GetInfo+0x104>
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d103      	bne.n	8009662 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	2201      	movs	r2, #1
 800965e:	605a      	str	r2, [r3, #4]
 8009660:	e003      	b.n	800966a <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	2200      	movs	r2, #0
 8009666:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009668:	e003      	b.n	8009672 <HAL_JPEG_GetInfo+0x114>
 800966a:	e002      	b.n	8009672 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	2200      	movs	r2, #0
 8009670:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f001 fea2 	bl	800b3bc <JPEG_GetQuality>
 8009678:	4602      	mov	r2, r0
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3718      	adds	r7, #24
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <HAL_JPEG_Encode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Encode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataInMCU, uint32_t InDataLength,
                                       uint8_t *pDataOut, uint32_t OutDataLength)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
 8009694:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataInMCU == NULL) || (pDataOut == NULL))
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d005      	beq.n	80096a8 <HAL_JPEG_Encode_DMA+0x20>
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d002      	beq.n	80096a8 <HAL_JPEG_Encode_DMA+0x20>
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <HAL_JPEG_Encode_DMA+0x24>
  {
    return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e059      	b.n	8009760 <HAL_JPEG_Encode_DMA+0xd8>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d101      	bne.n	80096ba <HAL_JPEG_Encode_DMA+0x32>
 80096b6:	2302      	movs	r3, #2
 80096b8:	e052      	b.n	8009760 <HAL_JPEG_Encode_DMA+0xd8>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2201      	movs	r2, #1
 80096be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State != HAL_JPEG_STATE_READY)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d005      	beq.n	80096da <HAL_JPEG_Encode_DMA+0x52>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 80096d6:	2302      	movs	r3, #2
 80096d8:	e042      	b.n	8009760 <HAL_JPEG_Encode_DMA+0xd8>
  }
  else
  {
    if ((hjpeg->Context & JPEG_CONTEXT_CONF_ENCODING) == JPEG_CONTEXT_CONF_ENCODING)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096e6:	d134      	bne.n	8009752 <HAL_JPEG_Encode_DMA+0xca>
    {
      /*Change JPEG state*/
      hjpeg->State = HAL_JPEG_STATE_BUSY_ENCODING;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2203      	movs	r2, #3
 80096ec:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /*Set the Context to Encode with DMA*/
      hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096f4:	f023 020f 	bic.w	r2, r3, #15
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	655a      	str	r2, [r3, #84]	@ 0x54
      hjpeg->Context |= (JPEG_CONTEXT_ENCODE | JPEG_CONTEXT_DMA);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009700:	f043 020d 	orr.w	r2, r3, #13
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	655a      	str	r2, [r3, #84]	@ 0x54

      /*Store In/out buffers pointers and size*/
      hjpeg->pJpegInBuffPtr = pDataInMCU;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	619a      	str	r2, [r3, #24]
      hjpeg->pJpegOutBuffPtr = pDataOut;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	683a      	ldr	r2, [r7, #0]
 8009712:	61da      	str	r2, [r3, #28]
      hjpeg->InDataLength = InDataLength;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	629a      	str	r2, [r3, #40]	@ 0x28
      hjpeg->OutDataLength = OutDataLength;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	69ba      	ldr	r2, [r7, #24]
 800971e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /*Reset In/out data counter */
      hjpeg->JpegInCount = 0;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2200      	movs	r2, #0
 8009724:	621a      	str	r2, [r3, #32]
      hjpeg->JpegOutCount = 0;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2200      	movs	r2, #0
 800972a:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Init decoding process*/
      JPEG_Init_Process(hjpeg);
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 ffd5 	bl	800a6dc <JPEG_Init_Process>

      /* JPEG encoding process using DMA */
      if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f001 faf6 	bl	800ad24 <JPEG_DMA_StartProcess>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00f      	beq.n	800975e <HAL_JPEG_Encode_DMA+0xd6>
      {
        /* Update State */
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2206      	movs	r2, #6
 8009742:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        /* Process Unlocked */
        __HAL_UNLOCK(hjpeg);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e006      	b.n	8009760 <HAL_JPEG_Encode_DMA+0xd8>

    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e000      	b.n	8009760 <HAL_JPEG_Encode_DMA+0xd8>
    }
  }
  /* Return function status */
  return HAL_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8009768:	b480      	push	{r7}
 800976a:	b085      	sub	sp, #20
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8009772:	2300      	movs	r3, #0
 8009774:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800977a:	f003 030c 	and.w	r3, r3, #12
 800977e:	2b0c      	cmp	r3, #12
 8009780:	d116      	bne.n	80097b0 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	f003 0301 	and.w	r3, r3, #1
 8009788:	2b00      	cmp	r3, #0
 800978a:	d005      	beq.n	8009798 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009790:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	f003 0302 	and.w	r3, r3, #2
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d033      	beq.n	800980a <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097a6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80097ae:	e02c      	b.n	800980a <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097b4:	f003 030c 	and.w	r3, r3, #12
 80097b8:	2b08      	cmp	r3, #8
 80097ba:	d126      	bne.n	800980a <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	f003 0301 	and.w	r3, r3, #1
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d009      	beq.n	80097da <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097ca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f043 0306 	orr.w	r3, r3, #6
 80097d8:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	f003 0302 	and.w	r3, r3, #2
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d009      	beq.n	80097f8 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097e8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 80097f6:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	43da      	mvns	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	400a      	ands	r2, r1
 8009808:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3714      	adds	r7, #20
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009830:	bf00      	nop
 8009832:	3714      	adds	r7, #20
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 800983c:	b480      	push	{r7}
 800983e:	b085      	sub	sp, #20
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8009854:	bf00      	nop
 8009856:	3714      	adds	r7, #20
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 800986a:	bf00      	nop
 800986c:	370c      	adds	r7, #12
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8009876:	b480      	push	{r7}
 8009878:	b083      	sub	sp, #12
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800987e:	bf00      	nop
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr

0800988a <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b082      	sub	sp, #8
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009898:	b2db      	uxtb	r3, r3
 800989a:	3b03      	subs	r3, #3
 800989c:	2b01      	cmp	r3, #1
 800989e:	d813      	bhi.n	80098c8 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098a4:	f003 030c 	and.w	r3, r3, #12
 80098a8:	2b08      	cmp	r3, #8
 80098aa:	d103      	bne.n	80098b4 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 ff89 	bl	800a7c4 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 80098b2:	e00b      	b.n	80098cc <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098b8:	f003 030c 	and.w	r3, r3, #12
 80098bc:	2b0c      	cmp	r3, #12
 80098be:	d105      	bne.n	80098cc <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f001 fac9 	bl	800ae58 <JPEG_DMA_ContinueProcess>
      break;
 80098c6:	e001      	b.n	80098cc <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 80098c8:	bf00      	nop
 80098ca:	e000      	b.n	80098ce <HAL_JPEG_IRQHandler+0x44>
      break;
 80098cc:	bf00      	nop
  }
}
 80098ce:	bf00      	nop
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80098d6:	b480      	push	{r7}
 80098d8:	b08b      	sub	sp, #44	@ 0x2c
 80098da:	af00      	add	r7, sp, #0
 80098dc:	60f8      	str	r0, [r7, #12]
 80098de:	60b9      	str	r1, [r7, #8]
 80098e0:	607a      	str	r2, [r7, #4]
 80098e2:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 80098e4:	2300      	movs	r3, #0
 80098e6:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 80098e8:	2300      	movs	r3, #0
 80098ea:	61fb      	str	r3, [r7, #28]
 80098ec:	e020      	b.n	8009930 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	4413      	add	r3, r2
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 80098f8:	6a3a      	ldr	r2, [r7, #32]
 80098fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fc:	4413      	add	r3, r2
 80098fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009902:	d90f      	bls.n	8009924 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	e055      	b.n	80099b4 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	b2da      	uxtb	r2, r3
 800990c:	68b9      	ldr	r1, [r7, #8]
 800990e:	6a3b      	ldr	r3, [r7, #32]
 8009910:	440b      	add	r3, r1
 8009912:	3201      	adds	r2, #1
 8009914:	b2d2      	uxtb	r2, r2
 8009916:	701a      	strb	r2, [r3, #0]
      p++;
 8009918:	6a3b      	ldr	r3, [r7, #32]
 800991a:	3301      	adds	r3, #1
 800991c:	623b      	str	r3, [r7, #32]
      i--;
 800991e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009920:	3b01      	subs	r3, #1
 8009922:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8009924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1ee      	bne.n	8009908 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	3301      	adds	r3, #1
 800992e:	61fb      	str	r3, [r7, #28]
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	2b0f      	cmp	r3, #15
 8009934:	d9db      	bls.n	80098ee <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8009936:	68ba      	ldr	r2, [r7, #8]
 8009938:	6a3b      	ldr	r3, [r7, #32]
 800993a:	4413      	add	r3, r2
 800993c:	2200      	movs	r2, #0
 800993e:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	6a3a      	ldr	r2, [r7, #32]
 8009944:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8009946:	2300      	movs	r3, #0
 8009948:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	617b      	str	r3, [r7, #20]
  p = 0;
 8009950:	2300      	movs	r3, #0
 8009952:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8009954:	e027      	b.n	80099a6 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	4413      	add	r3, r2
 800995e:	69ba      	ldr	r2, [r7, #24]
 8009960:	601a      	str	r2, [r3, #0]
      p++;
 8009962:	6a3b      	ldr	r3, [r7, #32]
 8009964:	3301      	adds	r3, #1
 8009966:	623b      	str	r3, [r7, #32]
      code++;
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	3301      	adds	r3, #1
 800996c:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	6a3b      	ldr	r3, [r7, #32]
 8009972:	4413      	add	r3, r2
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	461a      	mov	r2, r3
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	4293      	cmp	r3, r2
 800997c:	d0eb      	beq.n	8009956 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	2b1f      	cmp	r3, #31
 8009982:	d901      	bls.n	8009988 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e015      	b.n	80099b4 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8009988:	2201      	movs	r2, #1
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	fa02 f303 	lsl.w	r3, r2, r3
 8009990:	69ba      	ldr	r2, [r7, #24]
 8009992:	429a      	cmp	r2, r3
 8009994:	d301      	bcc.n	800999a <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e00c      	b.n	80099b4 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	005b      	lsls	r3, r3, #1
 800999e:	61bb      	str	r3, [r7, #24]
    si++;
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	3301      	adds	r3, #1
 80099a4:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 80099a6:	68ba      	ldr	r2, [r7, #8]
 80099a8:	6a3b      	ldr	r3, [r7, #32]
 80099aa:	4413      	add	r3, r2
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1dd      	bne.n	800996e <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	372c      	adds	r7, #44	@ 0x2c
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80099cc:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80099d0:	6018      	str	r0, [r3, #0]
 80099d2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80099d6:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80099da:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80099dc:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80099e0:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80099e4:	6818      	ldr	r0, [r3, #0]
 80099e6:	f107 0308 	add.w	r3, r7, #8
 80099ea:	f107 020c 	add.w	r2, r7, #12
 80099ee:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 80099f2:	f7ff ff70 	bl	80098d6 <JPEG_Bits_To_SizeCodes>
 80099f6:	4603      	mov	r3, r0
 80099f8:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 80099fc:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8009a04:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8009a08:	e075      	b.n	8009af6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8009a10:	e067      	b.n	8009ae2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8009a12:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009a16:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009a20:	4413      	add	r3, r2
 8009a22:	3310      	adds	r3, #16
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8009a2a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d103      	bne.n	8009a3a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8009a32:	23a0      	movs	r3, #160	@ 0xa0
 8009a34:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8009a38:	e021      	b.n	8009a7e <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8009a3a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a3e:	2bf0      	cmp	r3, #240	@ 0xf0
 8009a40:	d103      	bne.n	8009a4a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8009a42:	23a1      	movs	r3, #161	@ 0xa1
 8009a44:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8009a48:	e019      	b.n	8009a7e <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8009a4a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a4e:	091b      	lsrs	r3, r3, #4
 8009a50:	f003 030f 	and.w	r3, r3, #15
 8009a54:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8009a58:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a5c:	f003 030f 	and.w	r3, r3, #15
 8009a60:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8009a64:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8009a68:	4613      	mov	r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	4413      	add	r3, r2
 8009a6e:	005b      	lsls	r3, r3, #1
 8009a70:	461a      	mov	r2, r3
 8009a72:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009a76:	4413      	add	r3, r2
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8009a7e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a82:	2ba1      	cmp	r3, #161	@ 0xa1
 8009a84:	d901      	bls.n	8009a8a <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8009a86:	2301      	movs	r3, #1
 8009a88:	e035      	b.n	8009af6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009a8a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009a8e:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009a92:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8009a96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009a9a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009a9e:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009aa2:	6819      	ldr	r1, [r3, #0]
 8009aa4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009aa8:	3328      	adds	r3, #40	@ 0x28
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	440b      	add	r3, r1
 8009aae:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009ab0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009ab4:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8009ab8:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009abc:	4413      	add	r3, r2
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	b2d9      	uxtb	r1, r3
 8009ac4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009ac8:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009ad2:	4413      	add	r3, r2
 8009ad4:	460a      	mov	r2, r1
 8009ad6:	701a      	strb	r2, [r3, #0]
      k++;
 8009ad8:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009adc:	3301      	adds	r3, #1
 8009ade:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8009ae2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009ae6:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d38e      	bcc.n	8009a12 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b0c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009b10:	6018      	str	r0, [r3, #0]
 8009b12:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b16:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009b1a:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009b1c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b20:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009b24:	6818      	ldr	r0, [r3, #0]
 8009b26:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8009b2a:	f107 0208 	add.w	r2, r7, #8
 8009b2e:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8009b32:	f7ff fed0 	bl	80098d6 <JPEG_Bits_To_SizeCodes>
 8009b36:	4603      	mov	r3, r0
 8009b38:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8009b3c:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d002      	beq.n	8009b4a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8009b44:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8009b48:	e048      	b.n	8009bdc <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8009b50:	e03d      	b.n	8009bce <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8009b52:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b56:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009b60:	4413      	add	r3, r2
 8009b62:	3310      	adds	r3, #16
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8009b6a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009b6e:	2b0b      	cmp	r3, #11
 8009b70:	d901      	bls.n	8009b76 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8009b72:	2301      	movs	r3, #1
 8009b74:	e032      	b.n	8009bdc <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009b76:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b7a:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8009b7e:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8009b82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b86:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b8a:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009b8e:	6819      	ldr	r1, [r3, #0]
 8009b90:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009b94:	3302      	adds	r3, #2
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	440b      	add	r3, r1
 8009b9a:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009b9c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009ba0:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8009ba4:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009ba8:	4413      	add	r3, r2
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	3b01      	subs	r3, #1
 8009bae:	b2d9      	uxtb	r1, r3
 8009bb0:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009bb4:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009bbe:	4413      	add	r3, r2
 8009bc0:	460a      	mov	r2, r1
 8009bc2:	701a      	strb	r2, [r3, #0]
      k++;
 8009bc4:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009bc8:	3301      	adds	r3, #1
 8009bca:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8009bce:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8009bd2:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d3bb      	bcc.n	8009b52 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b09a      	sub	sp, #104	@ 0x68
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	60f8      	str	r0, [r7, #12]
 8009bee:	60b9      	str	r1, [r7, #8]
 8009bf0:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d106      	bne.n	8009c0e <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8009c08:	3318      	adds	r3, #24
 8009c0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c0c:	e00f      	b.n	8009c2e <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d106      	bne.n	8009c2a <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8009c24:	3318      	adds	r3, #24
 8009c26:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c28:	e001      	b.n	8009c2e <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e059      	b.n	8009ce2 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d055      	beq.n	8009ce0 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8009c34:	f107 0314 	add.w	r3, r7, #20
 8009c38:	4619      	mov	r1, r3
 8009c3a:	68b8      	ldr	r0, [r7, #8]
 8009c3c:	f7ff ff60 	bl	8009b00 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8009c40:	4603      	mov	r3, r0
 8009c42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8009c46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d002      	beq.n	8009c54 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8009c4e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c52:	e046      	b.n	8009ce2 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8009c54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c56:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8009c58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c5a:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009c5e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009c60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c62:	3304      	adds	r3, #4
 8009c64:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8009c66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c68:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009c6c:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8009c6e:	230c      	movs	r3, #12
 8009c70:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8009c72:	e032      	b.n	8009cda <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8009c74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c76:	3b01      	subs	r3, #1
 8009c78:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8009c7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c7c:	3b04      	subs	r3, #4
 8009c7e:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009c80:	f107 0214 	add.w	r2, r7, #20
 8009c84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c86:	4413      	add	r3, r2
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	021b      	lsls	r3, r3, #8
 8009c8c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009c90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c92:	3302      	adds	r3, #2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	3368      	adds	r3, #104	@ 0x68
 8009c98:	443b      	add	r3, r7
 8009c9a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8009ca4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009caa:	f107 0214 	add.w	r2, r7, #20
 8009cae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cb0:	4413      	add	r3, r2
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	021b      	lsls	r3, r3, #8
 8009cb6:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009cba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cbc:	3302      	adds	r3, #2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	3368      	adds	r3, #104	@ 0x68
 8009cc2:	443b      	add	r3, r7
 8009cc4:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8009cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cd0:	041a      	lsls	r2, r3, #16
 8009cd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cd4:	431a      	orrs	r2, r3
 8009cd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009cd8:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8009cda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d8c9      	bhi.n	8009c74 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3768      	adds	r7, #104	@ 0x68
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
	...

08009cec <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009cf8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009cfc:	6018      	str	r0, [r3, #0]
 8009cfe:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d02:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009d06:	6019      	str	r1, [r3, #0]
 8009d08:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d0c:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8009d10:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8009d12:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d16:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d22:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8009d26:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8009d2a:	6812      	ldr	r2, [r2, #0]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d10c      	bne.n	8009d4a <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009d30:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d34:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d40:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009d44:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8009d48:	e01d      	b.n	8009d86 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8009d4a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d4e:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8009d5a:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8009d5e:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8009d62:	6812      	ldr	r2, [r2, #0]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d10c      	bne.n	8009d82 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009d68:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d6c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8009d78:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009d7c:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8009d80:	e001      	b.n	8009d86 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	e0a8      	b.n	8009ed8 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8009d86:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d8a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f000 80a0 	beq.w	8009ed6 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8009d96:	f107 0214 	add.w	r2, r7, #20
 8009d9a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d9e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009da2:	4611      	mov	r1, r2
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	f7ff fe0b 	bl	80099c0 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8009daa:	4603      	mov	r3, r0
 8009dac:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8009db0:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d002      	beq.n	8009dbe <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8009db8:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8009dbc:	e08c      	b.n	8009ed8 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8009dbe:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009dc2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8009dcc:	e00e      	b.n	8009dec <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8009dce:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009dd2:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009dd6:	601a      	str	r2, [r3, #0]
      addressDef++;
 8009dd8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009ddc:	3304      	adds	r3, #4
 8009dde:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8009de2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009de6:	3301      	adds	r3, #1
 8009de8:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8009dec:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d9ec      	bls.n	8009dce <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8009df4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009df8:	4a3a      	ldr	r2, [pc, #232]	@ (8009ee4 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8009dfa:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009dfc:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e00:	3304      	adds	r3, #4
 8009e02:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8009e06:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e0a:	4a37      	ldr	r2, [pc, #220]	@ (8009ee8 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8009e0c:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009e0e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e12:	3304      	adds	r3, #4
 8009e14:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8009e18:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e1c:	4a33      	ldr	r2, [pc, #204]	@ (8009eec <JPEG_Set_HuffAC_Mem+0x200>)
 8009e1e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009e20:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e24:	3304      	adds	r3, #4
 8009e26:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8009e2a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e2e:	4a30      	ldr	r2, [pc, #192]	@ (8009ef0 <JPEG_Set_HuffAC_Mem+0x204>)
 8009e30:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8009e32:	23a2      	movs	r3, #162	@ 0xa2
 8009e34:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8009e38:	e049      	b.n	8009ece <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8009e3a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8009e44:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009e48:	3b04      	subs	r3, #4
 8009e4a:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8009e4e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009e52:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8009e56:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e5a:	4413      	add	r3, r2
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	021b      	lsls	r3, r3, #8
 8009e60:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009e64:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009e68:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8009e6c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e70:	3328      	adds	r3, #40	@ 0x28
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	440b      	add	r3, r1
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8009e80:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e84:	3b01      	subs	r3, #1
 8009e86:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8009e8a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009e8e:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8009e92:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e96:	4413      	add	r3, r2
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	021b      	lsls	r3, r3, #8
 8009e9c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009ea0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009ea4:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8009ea8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009eac:	3328      	adds	r3, #40	@ 0x28
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	440b      	add	r3, r1
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8009ebc:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8009ec0:	041a      	lsls	r2, r3, #16
 8009ec2:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8009ec6:	431a      	orrs	r2, r3
 8009ec8:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009ecc:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8009ece:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d8b1      	bhi.n	8009e3a <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	0fd10fd0 	.word	0x0fd10fd0
 8009ee8:	0fd30fd2 	.word	0x0fd30fd2
 8009eec:	0fd50fd4 	.word	0x0fd50fd4
 8009ef0:	0fd70fd6 	.word	0x0fd70fd6

08009ef4 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f84d 	bl	8009f9c <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	491f      	ldr	r1, [pc, #124]	@ (8009f8c <JPEG_Set_HuffEnc_Mem+0x98>)
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f7ff feec 	bl	8009cec <JPEG_Set_HuffAC_Mem>
 8009f14:	4603      	mov	r3, r0
 8009f16:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009f18:	7bfb      	ldrb	r3, [r7, #15]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d001      	beq.n	8009f22 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8009f1e:	7bfb      	ldrb	r3, [r7, #15]
 8009f20:	e030      	b.n	8009f84 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	4918      	ldr	r1, [pc, #96]	@ (8009f90 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f7ff fedc 	bl	8009cec <JPEG_Set_HuffAC_Mem>
 8009f34:	4603      	mov	r3, r0
 8009f36:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009f38:	7bfb      	ldrb	r3, [r7, #15]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8009f3e:	7bfb      	ldrb	r3, [r7, #15]
 8009f40:	e020      	b.n	8009f84 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	4911      	ldr	r1, [pc, #68]	@ (8009f94 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f7ff fe49 	bl	8009be6 <JPEG_Set_HuffDC_Mem>
 8009f54:	4603      	mov	r3, r0
 8009f56:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009f58:	7bfb      	ldrb	r3, [r7, #15]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d001      	beq.n	8009f62 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8009f5e:	7bfb      	ldrb	r3, [r7, #15]
 8009f60:	e010      	b.n	8009f84 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	490a      	ldr	r1, [pc, #40]	@ (8009f98 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f7ff fe39 	bl	8009be6 <JPEG_Set_HuffDC_Mem>
 8009f74:	4603      	mov	r3, r0
 8009f76:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d001      	beq.n	8009f82 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8009f7e:	7bfb      	ldrb	r3, [r7, #15]
 8009f80:	e000      	b.n	8009f84 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	0801b410 	.word	0x0801b410
 8009f90:	0801b4c4 	.word	0x0801b4c4
 8009f94:	0801b3d8 	.word	0x0801b3d8
 8009f98:	0801b3f4 	.word	0x0801b3f4

08009f9c <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b08b      	sub	sp, #44	@ 0x2c
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8009fa4:	4b80      	ldr	r3, [pc, #512]	@ (800a1a8 <JPEG_Set_Huff_DHTMem+0x20c>)
 8009fa6:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8009fa8:	4b80      	ldr	r3, [pc, #512]	@ (800a1ac <JPEG_Set_Huff_DHTMem+0x210>)
 8009faa:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8009fac:	4b80      	ldr	r3, [pc, #512]	@ (800a1b0 <JPEG_Set_Huff_DHTMem+0x214>)
 8009fae:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8009fb0:	4b80      	ldr	r3, [pc, #512]	@ (800a1b4 <JPEG_Set_Huff_DHTMem+0x218>)
 8009fb2:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009fbc:	330c      	adds	r3, #12
 8009fbe:	623b      	str	r3, [r7, #32]
  index = 16;
 8009fc0:	2310      	movs	r3, #16
 8009fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009fc4:	e01d      	b.n	800a002 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	697a      	ldr	r2, [r7, #20]
 8009fcc:	5cd3      	ldrb	r3, [r2, r3]
 8009fce:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd2:	3b02      	subs	r3, #2
 8009fd4:	6979      	ldr	r1, [r7, #20]
 8009fd6:	5ccb      	ldrb	r3, [r1, r3]
 8009fd8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009fda:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fde:	3b03      	subs	r3, #3
 8009fe0:	6979      	ldr	r1, [r7, #20]
 8009fe2:	5ccb      	ldrb	r3, [r1, r3]
 8009fe4:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009fe6:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8009fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fea:	3a04      	subs	r2, #4
 8009fec:	6979      	ldr	r1, [r7, #20]
 8009fee:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8009ff0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
 8009ff4:	601a      	str	r2, [r3, #0]
    address--;
 8009ff6:	6a3b      	ldr	r3, [r7, #32]
 8009ff8:	3b04      	subs	r3, #4
 8009ffa:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffe:	3b04      	subs	r3, #4
 800a000:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a004:	2b03      	cmp	r3, #3
 800a006:	d8de      	bhi.n	8009fc6 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a010:	3318      	adds	r3, #24
 800a012:	623b      	str	r3, [r7, #32]
  index = 12;
 800a014:	230c      	movs	r3, #12
 800a016:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a018:	e021      	b.n	800a05e <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a01c:	3b01      	subs	r3, #1
 800a01e:	697a      	ldr	r2, [r7, #20]
 800a020:	4413      	add	r3, r2
 800a022:	7c1b      	ldrb	r3, [r3, #16]
 800a024:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a028:	3b02      	subs	r3, #2
 800a02a:	6979      	ldr	r1, [r7, #20]
 800a02c:	440b      	add	r3, r1
 800a02e:	7c1b      	ldrb	r3, [r3, #16]
 800a030:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a032:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a036:	3b03      	subs	r3, #3
 800a038:	6979      	ldr	r1, [r7, #20]
 800a03a:	440b      	add	r3, r1
 800a03c:	7c1b      	ldrb	r3, [r3, #16]
 800a03e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a040:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800a042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a044:	3a04      	subs	r2, #4
 800a046:	6979      	ldr	r1, [r7, #20]
 800a048:	440a      	add	r2, r1
 800a04a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a04c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a04e:	6a3b      	ldr	r3, [r7, #32]
 800a050:	601a      	str	r2, [r3, #0]
    address--;
 800a052:	6a3b      	ldr	r3, [r7, #32]
 800a054:	3b04      	subs	r3, #4
 800a056:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a05a:	3b04      	subs	r3, #4
 800a05c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a060:	2b03      	cmp	r3, #3
 800a062:	d8da      	bhi.n	800a01a <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a06c:	3328      	adds	r3, #40	@ 0x28
 800a06e:	623b      	str	r3, [r7, #32]
  index = 16;
 800a070:	2310      	movs	r3, #16
 800a072:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a074:	e01d      	b.n	800a0b2 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a078:	3b01      	subs	r3, #1
 800a07a:	69fa      	ldr	r2, [r7, #28]
 800a07c:	5cd3      	ldrb	r3, [r2, r3]
 800a07e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a082:	3b02      	subs	r3, #2
 800a084:	69f9      	ldr	r1, [r7, #28]
 800a086:	5ccb      	ldrb	r3, [r1, r3]
 800a088:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a08a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a08e:	3b03      	subs	r3, #3
 800a090:	69f9      	ldr	r1, [r7, #28]
 800a092:	5ccb      	ldrb	r3, [r1, r3]
 800a094:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a096:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800a098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a09a:	3a04      	subs	r2, #4
 800a09c:	69f9      	ldr	r1, [r7, #28]
 800a09e:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a0a0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	601a      	str	r2, [r3, #0]
    address--;
 800a0a6:	6a3b      	ldr	r3, [r7, #32]
 800a0a8:	3b04      	subs	r3, #4
 800a0aa:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ae:	3b04      	subs	r3, #4
 800a0b0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b4:	2b03      	cmp	r3, #3
 800a0b6:	d8de      	bhi.n	800a076 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a0c0:	33cc      	adds	r3, #204	@ 0xcc
 800a0c2:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a0c4:	6a3b      	ldr	r3, [r7, #32]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	4b3b      	ldr	r3, [pc, #236]	@ (800a1b8 <JPEG_Set_Huff_DHTMem+0x21c>)
 800a0ca:	4013      	ands	r3, r2
 800a0cc:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800a0d4:	021a      	lsls	r2, r3, #8
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	69fa      	ldr	r2, [r7, #28]
 800a0dc:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a0e4:	6a3b      	ldr	r3, [r7, #32]
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800a0ea:	6a3b      	ldr	r3, [r7, #32]
 800a0ec:	3b04      	subs	r3, #4
 800a0ee:	623b      	str	r3, [r7, #32]
  index = 160;
 800a0f0:	23a0      	movs	r3, #160	@ 0xa0
 800a0f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a0f4:	e021      	b.n	800a13a <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	69fa      	ldr	r2, [r7, #28]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	7c1b      	ldrb	r3, [r3, #16]
 800a100:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a104:	3b02      	subs	r3, #2
 800a106:	69f9      	ldr	r1, [r7, #28]
 800a108:	440b      	add	r3, r1
 800a10a:	7c1b      	ldrb	r3, [r3, #16]
 800a10c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a10e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a112:	3b03      	subs	r3, #3
 800a114:	69f9      	ldr	r1, [r7, #28]
 800a116:	440b      	add	r3, r1
 800a118:	7c1b      	ldrb	r3, [r3, #16]
 800a11a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a11c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800a11e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a120:	3a04      	subs	r2, #4
 800a122:	69f9      	ldr	r1, [r7, #28]
 800a124:	440a      	add	r2, r1
 800a126:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a128:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	601a      	str	r2, [r3, #0]
    address--;
 800a12e:	6a3b      	ldr	r3, [r7, #32]
 800a130:	3b04      	subs	r3, #4
 800a132:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a136:	3b04      	subs	r3, #4
 800a138:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13c:	2b03      	cmp	r3, #3
 800a13e:	d8da      	bhi.n	800a0f6 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a148:	33cc      	adds	r3, #204	@ 0xcc
 800a14a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800a14c:	6a3b      	ldr	r3, [r7, #32]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	b29b      	uxth	r3, r3
 800a152:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	785b      	ldrb	r3, [r3, #1]
 800a158:	061a      	lsls	r2, r3, #24
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	431a      	orrs	r2, r3
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	041b      	lsls	r3, r3, #16
 800a164:	4313      	orrs	r3, r2
 800a166:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a168:	6a3b      	ldr	r3, [r7, #32]
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a176:	33dc      	adds	r3, #220	@ 0xdc
 800a178:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a17a:	6a3b      	ldr	r3, [r7, #32]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	4b0e      	ldr	r3, [pc, #56]	@ (800a1b8 <JPEG_Set_Huff_DHTMem+0x21c>)
 800a180:	4013      	ands	r3, r2
 800a182:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	7bdb      	ldrb	r3, [r3, #15]
 800a188:	021a      	lsls	r2, r3, #8
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	693a      	ldr	r2, [r7, #16]
 800a190:	7b92      	ldrb	r2, [r2, #14]
 800a192:	4313      	orrs	r3, r2
 800a194:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800a19c:	6a3b      	ldr	r3, [r7, #32]
 800a19e:	3b04      	subs	r3, #4
 800a1a0:	623b      	str	r3, [r7, #32]
  index = 12;
 800a1a2:	230c      	movs	r3, #12
 800a1a4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a1a6:	e027      	b.n	800a1f8 <JPEG_Set_Huff_DHTMem+0x25c>
 800a1a8:	0801b410 	.word	0x0801b410
 800a1ac:	0801b4c4 	.word	0x0801b4c4
 800a1b0:	0801b3d8 	.word	0x0801b3d8
 800a1b4:	0801b3f4 	.word	0x0801b3f4
 800a1b8:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1be:	3301      	adds	r3, #1
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	5cd3      	ldrb	r3, [r2, r3]
 800a1c4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800a1c6:	6939      	ldr	r1, [r7, #16]
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ca:	440b      	add	r3, r1
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a1d0:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	6939      	ldr	r1, [r7, #16]
 800a1d8:	5ccb      	ldrb	r3, [r1, r3]
 800a1da:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800a1dc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800a1de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1e0:	3a02      	subs	r2, #2
 800a1e2:	6939      	ldr	r1, [r7, #16]
 800a1e4:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a1e6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	601a      	str	r2, [r3, #0]
    address--;
 800a1ec:	6a3b      	ldr	r3, [r7, #32]
 800a1ee:	3b04      	subs	r3, #4
 800a1f0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f4:	3b04      	subs	r3, #4
 800a1f6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1fa:	2b03      	cmp	r3, #3
 800a1fc:	d8de      	bhi.n	800a1bc <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a206:	33dc      	adds	r3, #220	@ 0xdc
 800a208:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800a20a:	6a3b      	ldr	r3, [r7, #32]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	b29b      	uxth	r3, r3
 800a210:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	7c5b      	ldrb	r3, [r3, #17]
 800a216:	061a      	lsls	r2, r3, #24
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	431a      	orrs	r2, r3
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	7c1b      	ldrb	r3, [r3, #16]
 800a220:	041b      	lsls	r3, r3, #16
 800a222:	4313      	orrs	r3, r2
 800a224:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800a226:	6a3b      	ldr	r3, [r7, #32]
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a234:	33e8      	adds	r3, #232	@ 0xe8
 800a236:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800a238:	6a3b      	ldr	r3, [r7, #32]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	4b6d      	ldr	r3, [pc, #436]	@ (800a3f4 <JPEG_Set_Huff_DHTMem+0x458>)
 800a23e:	4013      	ands	r3, r2
 800a240:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	7edb      	ldrb	r3, [r3, #27]
 800a246:	021a      	lsls	r2, r3, #8
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	7e92      	ldrb	r2, [r2, #26]
 800a250:	4313      	orrs	r3, r2
 800a252:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a254:	6a3b      	ldr	r3, [r7, #32]
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800a25a:	6a3b      	ldr	r3, [r7, #32]
 800a25c:	3b04      	subs	r3, #4
 800a25e:	623b      	str	r3, [r7, #32]
  index = 8;
 800a260:	2308      	movs	r3, #8
 800a262:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a264:	e021      	b.n	800a2aa <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a268:	3301      	adds	r3, #1
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	4413      	add	r3, r2
 800a26e:	7c1b      	ldrb	r3, [r3, #16]
 800a270:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800a272:	6939      	ldr	r1, [r7, #16]
 800a274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a276:	440b      	add	r3, r1
 800a278:	3310      	adds	r3, #16
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a27e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a282:	3b01      	subs	r3, #1
 800a284:	6939      	ldr	r1, [r7, #16]
 800a286:	440b      	add	r3, r1
 800a288:	7c1b      	ldrb	r3, [r3, #16]
 800a28a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800a28c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800a28e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a290:	3a02      	subs	r2, #2
 800a292:	6939      	ldr	r1, [r7, #16]
 800a294:	440a      	add	r2, r1
 800a296:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a298:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a29a:	6a3b      	ldr	r3, [r7, #32]
 800a29c:	601a      	str	r2, [r3, #0]
    address--;
 800a29e:	6a3b      	ldr	r3, [r7, #32]
 800a2a0:	3b04      	subs	r3, #4
 800a2a2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a6:	3b04      	subs	r3, #4
 800a2a8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ac:	2b03      	cmp	r3, #3
 800a2ae:	d8da      	bhi.n	800a266 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a2b8:	33e8      	adds	r3, #232	@ 0xe8
 800a2ba:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800a2bc:	6a3b      	ldr	r3, [r7, #32]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	785b      	ldrb	r3, [r3, #1]
 800a2c8:	061a      	lsls	r2, r3, #24
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	431a      	orrs	r2, r3
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	041b      	lsls	r3, r3, #16
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a2d8:	6a3b      	ldr	r3, [r7, #32]
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a2e6:	33f8      	adds	r3, #248	@ 0xf8
 800a2e8:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a2ea:	6a3b      	ldr	r3, [r7, #32]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	4b41      	ldr	r3, [pc, #260]	@ (800a3f4 <JPEG_Set_Huff_DHTMem+0x458>)
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	7bdb      	ldrb	r3, [r3, #15]
 800a2f8:	021a      	lsls	r2, r3, #8
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	69ba      	ldr	r2, [r7, #24]
 800a300:	7b92      	ldrb	r2, [r2, #14]
 800a302:	4313      	orrs	r3, r2
 800a304:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a306:	6a3b      	ldr	r3, [r7, #32]
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800a30c:	6a3b      	ldr	r3, [r7, #32]
 800a30e:	3b04      	subs	r3, #4
 800a310:	623b      	str	r3, [r7, #32]
  index = 12;
 800a312:	230c      	movs	r3, #12
 800a314:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a316:	e01d      	b.n	800a354 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31a:	3301      	adds	r3, #1
 800a31c:	69ba      	ldr	r2, [r7, #24]
 800a31e:	5cd3      	ldrb	r3, [r2, r3]
 800a320:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800a322:	69b9      	ldr	r1, [r7, #24]
 800a324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a326:	440b      	add	r3, r1
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a32c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a330:	3b01      	subs	r3, #1
 800a332:	69b9      	ldr	r1, [r7, #24]
 800a334:	5ccb      	ldrb	r3, [r1, r3]
 800a336:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800a338:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800a33a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a33c:	3a02      	subs	r2, #2
 800a33e:	69b9      	ldr	r1, [r7, #24]
 800a340:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a342:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a344:	6a3b      	ldr	r3, [r7, #32]
 800a346:	601a      	str	r2, [r3, #0]
    address--;
 800a348:	6a3b      	ldr	r3, [r7, #32]
 800a34a:	3b04      	subs	r3, #4
 800a34c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a350:	3b04      	subs	r3, #4
 800a352:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a356:	2b03      	cmp	r3, #3
 800a358:	d8de      	bhi.n	800a318 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a362:	33f8      	adds	r3, #248	@ 0xf8
 800a364:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800a366:	6a3b      	ldr	r3, [r7, #32]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	7c5b      	ldrb	r3, [r3, #17]
 800a372:	061a      	lsls	r2, r3, #24
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	431a      	orrs	r2, r3
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	7c1b      	ldrb	r3, [r3, #16]
 800a37c:	041b      	lsls	r3, r3, #16
 800a37e:	4313      	orrs	r3, r2
 800a380:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800a382:	6a3b      	ldr	r3, [r7, #32]
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a390:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800a394:	623b      	str	r3, [r7, #32]
  index = 160;
 800a396:	23a0      	movs	r3, #160	@ 0xa0
 800a398:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a39a:	e021      	b.n	800a3e0 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a39e:	3301      	adds	r3, #1
 800a3a0:	69ba      	ldr	r2, [r7, #24]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	7c1b      	ldrb	r3, [r3, #16]
 800a3a6:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a3a8:	69b9      	ldr	r1, [r7, #24]
 800a3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ac:	440b      	add	r3, r1
 800a3ae:	3310      	adds	r3, #16
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a3b4:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	69b9      	ldr	r1, [r7, #24]
 800a3bc:	440b      	add	r3, r1
 800a3be:	7c1b      	ldrb	r3, [r3, #16]
 800a3c0:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a3c2:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800a3c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3c6:	3a02      	subs	r2, #2
 800a3c8:	69b9      	ldr	r1, [r7, #24]
 800a3ca:	440a      	add	r2, r1
 800a3cc:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a3ce:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a3d0:	6a3b      	ldr	r3, [r7, #32]
 800a3d2:	601a      	str	r2, [r3, #0]
    address--;
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	3b04      	subs	r3, #4
 800a3d8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3dc:	3b04      	subs	r3, #4
 800a3de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e2:	2b03      	cmp	r3, #3
 800a3e4:	d8da      	bhi.n	800a39c <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800a3e6:	bf00      	nop
 800a3e8:	bf00      	nop
 800a3ea:	372c      	adds	r7, #44	@ 0x2c
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr
 800a3f4:	ffff0000 	.word	0xffff0000

0800a3f8 <JPEG_Set_Quantization_Mem>:
  *         it could be QMEM0, QMEM1, QMEM2 or QMEM3
  * @retval 0 if no error, 1 if error
  */
static uint32_t JPEG_Set_Quantization_Mem(JPEG_HandleTypeDef *hjpeg, uint8_t *QTable,
                                                    __IO uint32_t *QTableAddress)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b08b      	sub	sp, #44	@ 0x2c
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
  uint32_t quantRow;
  uint32_t quantVal;
  uint32_t ScaleFactor;
  __IO uint32_t *tableAddress;

  tableAddress = QTableAddress;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	613b      	str	r3, [r7, #16]

  if ((hjpeg->Conf.ImageQuality >= 50UL) && (hjpeg->Conf.ImageQuality <= 100UL))
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	695b      	ldr	r3, [r3, #20]
 800a40c:	2b31      	cmp	r3, #49	@ 0x31
 800a40e:	d90a      	bls.n	800a426 <JPEG_Set_Quantization_Mem+0x2e>
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	695b      	ldr	r3, [r3, #20]
 800a414:	2b64      	cmp	r3, #100	@ 0x64
 800a416:	d806      	bhi.n	800a426 <JPEG_Set_Quantization_Mem+0x2e>
  {
    ScaleFactor = 200UL - (hjpeg->Conf.ImageQuality * 2UL);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	695b      	ldr	r3, [r3, #20]
 800a41c:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800a420:	005b      	lsls	r3, r3, #1
 800a422:	617b      	str	r3, [r7, #20]
 800a424:	e00d      	b.n	800a442 <JPEG_Set_Quantization_Mem+0x4a>
  }
  else if (hjpeg->Conf.ImageQuality > 0UL)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	695b      	ldr	r3, [r3, #20]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d007      	beq.n	800a43e <JPEG_Set_Quantization_Mem+0x46>
  {
    ScaleFactor = ((uint32_t) 5000) / ((uint32_t) hjpeg->Conf.ImageQuality);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	695b      	ldr	r3, [r3, #20]
 800a432:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a436:	fbb2 f3f3 	udiv	r3, r2, r3
 800a43a:	617b      	str	r3, [r7, #20]
 800a43c:	e001      	b.n	800a442 <JPEG_Set_Quantization_Mem+0x4a>
  }
  else
  {
    return 1UL;
 800a43e:	2301      	movs	r3, #1
 800a440:	e041      	b.n	800a4c6 <JPEG_Set_Quantization_Mem+0xce>
  }

  /*Quantization_table = (Standard_quanization_table * ScaleFactor + 50) / 100*/
  i = 0;
 800a442:	2300      	movs	r3, #0
 800a444:	627b      	str	r3, [r7, #36]	@ 0x24
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a446:	e03a      	b.n	800a4be <JPEG_Set_Quantization_Mem+0xc6>
  {
    quantRow = 0;
 800a448:	2300      	movs	r3, #0
 800a44a:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < 4UL; j++)
 800a44c:	2300      	movs	r3, #0
 800a44e:	623b      	str	r3, [r7, #32]
 800a450:	e029      	b.n	800a4a6 <JPEG_Set_Quantization_Mem+0xae>
    {
      /* Note that the quantization coefficients must be specified in the table in zigzag order */
      quantVal = ((((uint32_t) QTable[JPEG_ZIGZAG_ORDER[i + j]]) * ScaleFactor) + 50UL) / 100UL;
 800a452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a454:	6a3b      	ldr	r3, [r7, #32]
 800a456:	4413      	add	r3, r2
 800a458:	4a1e      	ldr	r2, [pc, #120]	@ (800a4d4 <JPEG_Set_Quantization_Mem+0xdc>)
 800a45a:	5cd3      	ldrb	r3, [r2, r3]
 800a45c:	461a      	mov	r2, r3
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	4413      	add	r3, r2
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	461a      	mov	r2, r3
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	fb02 f303 	mul.w	r3, r2, r3
 800a46c:	3332      	adds	r3, #50	@ 0x32
 800a46e:	4a1a      	ldr	r2, [pc, #104]	@ (800a4d8 <JPEG_Set_Quantization_Mem+0xe0>)
 800a470:	fba2 2303 	umull	r2, r3, r2, r3
 800a474:	095b      	lsrs	r3, r3, #5
 800a476:	61bb      	str	r3, [r7, #24]

      if (quantVal == 0UL)
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d102      	bne.n	800a484 <JPEG_Set_Quantization_Mem+0x8c>
      {
        quantVal = 1UL;
 800a47e:	2301      	movs	r3, #1
 800a480:	61bb      	str	r3, [r7, #24]
 800a482:	e004      	b.n	800a48e <JPEG_Set_Quantization_Mem+0x96>
      }
      else if (quantVal > 255UL)
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	2bff      	cmp	r3, #255	@ 0xff
 800a488:	d901      	bls.n	800a48e <JPEG_Set_Quantization_Mem+0x96>
      {
        quantVal = 255UL;
 800a48a:	23ff      	movs	r3, #255	@ 0xff
 800a48c:	61bb      	str	r3, [r7, #24]
      else
      {
        /* Nothing to do, keep same value of quantVal */
      }

      quantRow |= ((quantVal & 0xFFUL) << (8UL * j));
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	b2da      	uxtb	r2, r3
 800a492:	6a3b      	ldr	r3, [r7, #32]
 800a494:	00db      	lsls	r3, r3, #3
 800a496:	fa02 f303 	lsl.w	r3, r2, r3
 800a49a:	69fa      	ldr	r2, [r7, #28]
 800a49c:	4313      	orrs	r3, r2
 800a49e:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < 4UL; j++)
 800a4a0:	6a3b      	ldr	r3, [r7, #32]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	623b      	str	r3, [r7, #32]
 800a4a6:	6a3b      	ldr	r3, [r7, #32]
 800a4a8:	2b03      	cmp	r3, #3
 800a4aa:	d9d2      	bls.n	800a452 <JPEG_Set_Quantization_Mem+0x5a>
    }

    i += 4UL;
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ae:	3304      	adds	r3, #4
 800a4b0:	627b      	str	r3, [r7, #36]	@ 0x24
    *tableAddress = quantRow;
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	69fa      	ldr	r2, [r7, #28]
 800a4b6:	601a      	str	r2, [r3, #0]
    tableAddress ++;
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	3304      	adds	r3, #4
 800a4bc:	613b      	str	r3, [r7, #16]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c0:	2b3c      	cmp	r3, #60	@ 0x3c
 800a4c2:	d9c1      	bls.n	800a448 <JPEG_Set_Quantization_Mem+0x50>
  }

  /* Return function status */
  return 0UL;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	372c      	adds	r7, #44	@ 0x2c
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	0801b578 	.word	0x0801b578
 800a4d8:	51eb851f 	.word	0x51eb851f

0800a4dc <JPEG_SetColorYCBCR>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorYCBCR(JPEG_HandleTypeDef *hjpeg)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b087      	sub	sp, #28
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  uint32_t ySamplingH;
  uint32_t ySamplingV;
  uint32_t yblockNb;

  /*Set Number of color components to 3*/
  hjpeg->Instance->CONFR1 &=  ~JPEG_CONFR1_NF;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	685a      	ldr	r2, [r3, #4]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f022 0203 	bic.w	r2, r2, #3
 800a4f2:	605a      	str	r2, [r3, #4]
  hjpeg->Instance->CONFR1 |=  JPEG_CONFR1_NF_1;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	685a      	ldr	r2, [r3, #4]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f042 0202 	orr.w	r2, r2, #2
 800a502:	605a      	str	r2, [r3, #4]

  /* compute MCU block size and Y, Cb ,Cr sampling factors*/
  if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d108      	bne.n	800a51e <JPEG_SetColorYCBCR+0x42>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 800a50c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a510:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_1;   /* Vs = 2*/
 800a512:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a516:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x30; /* 4 blocks of 8x8*/
 800a518:	2330      	movs	r3, #48	@ 0x30
 800a51a:	60fb      	str	r3, [r7, #12]
 800a51c:	e014      	b.n	800a548 <JPEG_SetColorYCBCR+0x6c>
  }
  else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	2b02      	cmp	r3, #2
 800a524:	d108      	bne.n	800a538 <JPEG_SetColorYCBCR+0x5c>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 800a526:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a52a:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 800a52c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a530:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x10; /* 2 blocks of 8x8*/
 800a532:	2310      	movs	r3, #16
 800a534:	60fb      	str	r3, [r7, #12]
 800a536:	e007      	b.n	800a548 <JPEG_SetColorYCBCR+0x6c>
  }
  else /*JPEG_444_SUBSAMPLING and default*/
  {
    ySamplingH  = JPEG_CONFR4_HSF_0;   /* Hs = 1*/
 800a538:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a53c:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 800a53e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a542:	613b      	str	r3, [r7, #16]

    yblockNb  = 0; /* 1 block of 8x8*/
 800a544:	2300      	movs	r3, #0
 800a546:	60fb      	str	r3, [r7, #12]
  }

  hjpeg->Instance->CONFR1 &= ~(JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	685a      	ldr	r2, [r3, #4]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f022 02c3 	bic.w	r2, r2, #195	@ 0xc3
 800a556:	605a      	str	r2, [r3, #4]
  hjpeg->Instance->CONFR1 |= (JPEG_CONFR1_NF_1 | JPEG_CONFR1_NS_1);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	685a      	ldr	r2, [r3, #4]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f042 0282 	orr.w	r2, r2, #130	@ 0x82
 800a566:	605a      	str	r2, [r3, #4]

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2200      	movs	r2, #0
 800a56e:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |= (ySamplingH | ySamplingV | (yblockNb & JPEG_CONFR4_NB));
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	6919      	ldr	r1, [r3, #16]
 800a576:	697a      	ldr	r2, [r7, #20]
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	431a      	orrs	r2, r3
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a582:	431a      	orrs	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	430a      	orrs	r2, r1
 800a58a:	611a      	str	r2, [r3, #16]

  /*Reset CONFR5 register*/
  hjpeg->Instance->CONFR5 =  0;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2200      	movs	r2, #0
 800a592:	615a      	str	r2, [r3, #20]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 1*/
  hjpeg->Instance->CONFR5 |= (JPEG_CONFR5_HSF_0 | JPEG_CONFR5_VSF_0 | JPEG_CONFR5_QT_0 | JPEG_CONFR5_HA | JPEG_CONFR5_HD);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6959      	ldr	r1, [r3, #20]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	f241 1307 	movw	r3, #4359	@ 0x1107
 800a5a2:	430b      	orrs	r3, r1
 800a5a4:	6153      	str	r3, [r2, #20]

  /*Reset CONFR6 register*/
  hjpeg->Instance->CONFR6 =  0;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	619a      	str	r2, [r3, #24]
  /*Set Horizental and Vertical  sampling factor and number of blocks for component 2*/
  /* In YCBCR , by default, both chrominance components (component 1 and component 2) use the same Quantization table (table 1) */
  /* In YCBCR , both chrominance components (component 1 and component 2) use the same Huffman tables (table 1) */
  hjpeg->Instance->CONFR6 |= (JPEG_CONFR6_HSF_0 | JPEG_CONFR6_VSF_0 | JPEG_CONFR6_QT_0 | JPEG_CONFR6_HA | JPEG_CONFR6_HD);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	6999      	ldr	r1, [r3, #24]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	f241 1307 	movw	r3, #4359	@ 0x1107
 800a5bc:	430b      	orrs	r3, r1
 800a5be:	6193      	str	r3, [r2, #24]

}
 800a5c0:	bf00      	nop
 800a5c2:	371c      	adds	r7, #28
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <JPEG_SetColorGrayScale>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorGrayScale(JPEG_HandleTypeDef *hjpeg)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  /*Set Number of color components to 1*/
  hjpeg->Instance->CONFR1 &= ~(JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	685a      	ldr	r2, [r3, #4]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f022 02c3 	bic.w	r2, r2, #195	@ 0xc3
 800a5e2:	605a      	str	r2, [r3, #4]

  /*in GrayScale use 1 single Quantization table (Table 0)*/
  /*in GrayScale use only one couple of AC/DC huffman table (table 0)*/

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |=  JPEG_CONFR4_HSF_0 | JPEG_CONFR4_VSF_0 ;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	691a      	ldr	r2, [r3, #16]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 800a5fa:	611a      	str	r2, [r3, #16]
}
 800a5fc:	bf00      	nop
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <JPEG_SetColorCMYK>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorCMYK(JPEG_HandleTypeDef *hjpeg)
{
 800a608:	b480      	push	{r7}
 800a60a:	b087      	sub	sp, #28
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  uint32_t ySamplingH;
  uint32_t ySamplingV;
  uint32_t yblockNb;

  /*Set Number of color components to 4*/
  hjpeg->Instance->CONFR1 |= (JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	685a      	ldr	r2, [r3, #4]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f042 02c3 	orr.w	r2, r2, #195	@ 0xc3
 800a61e:	605a      	str	r2, [r3, #4]

  /* compute MCU block size and Y, Cb ,Cr sampling factors*/
  if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	2b01      	cmp	r3, #1
 800a626:	d108      	bne.n	800a63a <JPEG_SetColorCMYK+0x32>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 800a628:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a62c:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_1;   /* Vs = 2*/
 800a62e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a632:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x30; /* 4 blocks of 8x8*/
 800a634:	2330      	movs	r3, #48	@ 0x30
 800a636:	60fb      	str	r3, [r7, #12]
 800a638:	e014      	b.n	800a664 <JPEG_SetColorCMYK+0x5c>
  }
  else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	2b02      	cmp	r3, #2
 800a640:	d108      	bne.n	800a654 <JPEG_SetColorCMYK+0x4c>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 800a642:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a646:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 800a648:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a64c:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x10; /* 2 blocks of 8x8*/
 800a64e:	2310      	movs	r3, #16
 800a650:	60fb      	str	r3, [r7, #12]
 800a652:	e007      	b.n	800a664 <JPEG_SetColorCMYK+0x5c>
  }
  else /*JPEG_444_SUBSAMPLING and default*/
  {
    ySamplingH  = JPEG_CONFR4_HSF_0;   /* Hs = 1*/
 800a654:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a658:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 800a65a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a65e:	613b      	str	r3, [r7, #16]

    yblockNb  = 0; /* 1 block of 8x8*/
 800a660:	2300      	movs	r3, #0
 800a662:	60fb      	str	r3, [r7, #12]
  }

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2200      	movs	r2, #0
 800a66a:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |= (ySamplingH | ySamplingV | (yblockNb & JPEG_CONFR4_NB));
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	6919      	ldr	r1, [r3, #16]
 800a672:	697a      	ldr	r2, [r7, #20]
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	431a      	orrs	r2, r3
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a67e:	431a      	orrs	r2, r3
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	430a      	orrs	r2, r1
 800a686:	611a      	str	r2, [r3, #16]

  /*Reset CONFR5 register*/
  hjpeg->Instance->CONFR5 =  0;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2200      	movs	r2, #0
 800a68e:	615a      	str	r2, [r3, #20]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 1*/
  hjpeg->Instance->CONFR5 |= (JPEG_CONFR5_HSF_0 | JPEG_CONFR5_VSF_0);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	695a      	ldr	r2, [r3, #20]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 800a69e:	615a      	str	r2, [r3, #20]

  /*Reset CONFR6 register*/
  hjpeg->Instance->CONFR6 =  0;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	619a      	str	r2, [r3, #24]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 2*/
  hjpeg->Instance->CONFR6 |= (JPEG_CONFR6_HSF_0 | JPEG_CONFR6_VSF_0);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	699a      	ldr	r2, [r3, #24]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 800a6b6:	619a      	str	r2, [r3, #24]

  /*Reset CONFR7 register*/
  hjpeg->Instance->CONFR7 =  0;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	61da      	str	r2, [r3, #28]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 3*/
  hjpeg->Instance->CONFR7 |= (JPEG_CONFR7_HSF_0 | JPEG_CONFR7_VSF_0);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	69da      	ldr	r2, [r3, #28]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 800a6ce:	61da      	str	r2, [r3, #28]
}
 800a6d0:	bf00      	nop
 800a6d2:	371c      	adds	r7, #28
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6f4:	f003 0303 	and.w	r3, r3, #3
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d108      	bne.n	800a70e <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	685a      	ldr	r2, [r3, #4]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f042 0208 	orr.w	r2, r2, #8
 800a70a:	605a      	str	r2, [r3, #4]
 800a70c:	e007      	b.n	800a71e <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	685a      	ldr	r2, [r3, #4]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f022 0208 	bic.w	r2, r2, #8
 800a71c:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f022 0201 	bic.w	r2, r2, #1
 800a72c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a73c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a74c:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a75c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a76c:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f042 0201 	orr.w	r2, r2, #1
 800a77c:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a782:	f003 030c 	and.w	r3, r3, #12
 800a786:	2b08      	cmp	r3, #8
 800a788:	d108      	bne.n	800a79c <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 800a798:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800a79a:	e00d      	b.n	800a7b8 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7a0:	f003 030c 	and.w	r3, r3, #12
 800a7a4:	2b0c      	cmp	r3, #12
 800a7a6:	d107      	bne.n	800a7b8 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a7b6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a7b8:	bf00      	nop
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7d0:	f003 0303 	and.w	r3, r3, #3
 800a7d4:	2b02      	cmp	r3, #2
 800a7d6:	d125      	bne.n	800a824 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d01e      	beq.n	800a824 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	3304      	adds	r3, #4
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7fe feb6 	bl	800955e <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	3304      	adds	r3, #4
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f7ff f82e 	bl	8009860 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a812:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a822:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a828:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d116      	bne.n	800a85e <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a836:	f003 0302 	and.w	r3, r3, #2
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d004      	beq.n	800a848 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800a83e:	2108      	movs	r1, #8
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 f988 	bl	800ab56 <JPEG_ReadInputData>
 800a846:	e00a      	b.n	800a85e <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a84e:	f003 0304 	and.w	r3, r3, #4
 800a852:	2b00      	cmp	r3, #0
 800a854:	d003      	beq.n	800a85e <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800a856:	2101      	movs	r1, #1
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 f97c 	bl	800ab56 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a862:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a866:	2b00      	cmp	r3, #0
 800a868:	d116      	bne.n	800a898 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a870:	f003 0308 	and.w	r3, r3, #8
 800a874:	2b00      	cmp	r3, #0
 800a876:	d004      	beq.n	800a882 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800a878:	2108      	movs	r1, #8
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 f864 	bl	800a948 <JPEG_StoreOutputData>
 800a880:	e00a      	b.n	800a898 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a888:	f003 0310 	and.w	r3, r3, #16
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d003      	beq.n	800a898 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800a890:	2101      	movs	r1, #1
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 f858 	bl	800a948 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a89e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a8a2:	2b20      	cmp	r3, #32
 800a8a4:	d14b      	bne.n	800a93e <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f022 0201 	bic.w	r2, r2, #1
 800a8b4:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8ba:	f003 030c 	and.w	r3, r3, #12
 800a8be:	2b08      	cmp	r3, #8
 800a8c0:	d107      	bne.n	800a8d2 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a8d0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a8e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d00a      	beq.n	800a900 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	69d9      	ldr	r1, [r3, #28]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f7f7 fa75 	bl	8001de4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a904:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a90a:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2201      	movs	r2, #1
 800a91e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f003 0303 	and.w	r3, r3, #3
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d103      	bne.n	800a934 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f7fe ffa2 	bl	8009876 <HAL_JPEG_DecodeCpltCallback>
 800a932:	e002      	b.n	800a93a <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f7f7 fa71 	bl	8001e1c <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800a93a:	2301      	movs	r3, #1
 800a93c:	e000      	b.n	800a940 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b086      	sub	sp, #24
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	440b      	add	r3, r1
 800a960:	429a      	cmp	r2, r3
 800a962:	d34b      	bcc.n	800a9fc <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800a964:	2300      	movs	r3, #0
 800a966:	617b      	str	r3, [r7, #20]
 800a968:	e031      	b.n	800a9ce <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a970:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	69da      	ldr	r2, [r3, #28]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a97a:	4413      	add	r3, r2
 800a97c:	68ba      	ldr	r2, [r7, #8]
 800a97e:	b2d2      	uxtb	r2, r2
 800a980:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	0a19      	lsrs	r1, r3, #8
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	69da      	ldr	r2, [r3, #28]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a98e:	3301      	adds	r3, #1
 800a990:	4413      	add	r3, r2
 800a992:	b2ca      	uxtb	r2, r1
 800a994:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	0c19      	lsrs	r1, r3, #16
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	69da      	ldr	r2, [r3, #28]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9a2:	3302      	adds	r3, #2
 800a9a4:	4413      	add	r3, r2
 800a9a6:	b2ca      	uxtb	r2, r1
 800a9a8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	0e19      	lsrs	r1, r3, #24
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	69da      	ldr	r2, [r3, #28]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9b6:	3303      	adds	r3, #3
 800a9b8:	4413      	add	r3, r2
 800a9ba:	b2ca      	uxtb	r2, r1
 800a9bc:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c2:	1d1a      	adds	r2, r3, #4
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	617b      	str	r3, [r7, #20]
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d3c9      	bcc.n	800a96a <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	f040 80b5 	bne.w	800ab4e <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	69d9      	ldr	r1, [r3, #28]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f7f7 f9f8 	bl	8001de4 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800a9fa:	e0a8      	b.n	800ab4e <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa04:	429a      	cmp	r2, r3
 800aa06:	f240 80a2 	bls.w	800ab4e <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa12:	1ad3      	subs	r3, r2, r3
 800aa14:	089b      	lsrs	r3, r3, #2
 800aa16:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800aa18:	2300      	movs	r3, #0
 800aa1a:	617b      	str	r3, [r7, #20]
 800aa1c:	e031      	b.n	800aa82 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa24:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	69da      	ldr	r2, [r3, #28]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa2e:	4413      	add	r3, r2
 800aa30:	68ba      	ldr	r2, [r7, #8]
 800aa32:	b2d2      	uxtb	r2, r2
 800aa34:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	0a19      	lsrs	r1, r3, #8
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	69da      	ldr	r2, [r3, #28]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa42:	3301      	adds	r3, #1
 800aa44:	4413      	add	r3, r2
 800aa46:	b2ca      	uxtb	r2, r1
 800aa48:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	0c19      	lsrs	r1, r3, #16
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	69da      	ldr	r2, [r3, #28]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa56:	3302      	adds	r3, #2
 800aa58:	4413      	add	r3, r2
 800aa5a:	b2ca      	uxtb	r2, r1
 800aa5c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	0e19      	lsrs	r1, r3, #24
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	69da      	ldr	r2, [r3, #28]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa6a:	3303      	adds	r3, #3
 800aa6c:	4413      	add	r3, r2
 800aa6e:	b2ca      	uxtb	r2, r1
 800aa70:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa76:	1d1a      	adds	r2, r3, #4
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	617b      	str	r3, [r7, #20]
 800aa82:	697a      	ldr	r2, [r7, #20]
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d3c9      	bcc.n	800aa1e <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d10b      	bne.n	800aaae <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	69d9      	ldr	r1, [r3, #28]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f7f7 f99f 	bl	8001de4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800aaac:	e04f      	b.n	800ab4e <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab6:	1ad3      	subs	r3, r2, r3
 800aab8:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aac0:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800aac2:	2300      	movs	r3, #0
 800aac4:	617b      	str	r3, [r7, #20]
 800aac6:	e015      	b.n	800aaf4 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f003 0303 	and.w	r3, r3, #3
 800aace:	00db      	lsls	r3, r3, #3
 800aad0:	68ba      	ldr	r2, [r7, #8]
 800aad2:	fa22 f103 	lsr.w	r1, r2, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	69da      	ldr	r2, [r3, #28]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aade:	4413      	add	r3, r2
 800aae0:	b2ca      	uxtb	r2, r1
 800aae2:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aae8:	1c5a      	adds	r2, r3, #1
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	617b      	str	r3, [r7, #20]
 800aaf4:	697a      	ldr	r2, [r7, #20]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d3e5      	bcc.n	800aac8 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	69d9      	ldr	r1, [r3, #28]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab04:	461a      	mov	r2, r3
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f7f7 f96c 	bl	8001de4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f1c3 0304 	rsb	r3, r3, #4
 800ab18:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	617b      	str	r3, [r7, #20]
 800ab1e:	e013      	b.n	800ab48 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	00db      	lsls	r3, r3, #3
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	fa22 f103 	lsr.w	r1, r2, r3
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	69da      	ldr	r2, [r3, #28]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab32:	4413      	add	r3, r2
 800ab34:	b2ca      	uxtb	r2, r1
 800ab36:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab3c:	1c5a      	adds	r2, r3, #1
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	3301      	adds	r3, #1
 800ab46:	617b      	str	r3, [r7, #20]
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	2b03      	cmp	r3, #3
 800ab4c:	d9e8      	bls.n	800ab20 <JPEG_StoreOutputData+0x1d8>
}
 800ab4e:	bf00      	nop
 800ab50:	3718      	adds	r7, #24
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b088      	sub	sp, #32
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
 800ab5e:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800ab60:	2300      	movs	r3, #0
 800ab62:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d002      	beq.n	800ab72 <JPEG_ReadInputData+0x1c>
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d104      	bne.n	800ab7c <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800ab72:	2101      	movs	r1, #1
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f7fe fdf7 	bl	8009768 <HAL_JPEG_Pause>
 800ab7a:	e028      	b.n	800abce <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a1b      	ldr	r3, [r3, #32]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d906      	bls.n	800ab96 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6a1b      	ldr	r3, [r3, #32]
 800ab90:	1ad3      	subs	r3, r2, r3
 800ab92:	61fb      	str	r3, [r7, #28]
 800ab94:	e01b      	b.n	800abce <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a1b      	ldr	r3, [r3, #32]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d115      	bne.n	800abce <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a1b      	ldr	r3, [r3, #32]
 800aba6:	4619      	mov	r1, r3
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7f7 f8e9 	bl	8001d80 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abb2:	2b04      	cmp	r3, #4
 800abb4:	d905      	bls.n	800abc2 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abba:	f023 0203 	bic.w	r2, r3, #3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abcc:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f040 809f 	bne.w	800ad1a <JPEG_ReadInputData+0x1c4>
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f000 809b 	beq.w	800ad1a <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	089b      	lsrs	r3, r3, #2
 800abe8:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800abea:	693a      	ldr	r2, [r7, #16]
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d335      	bcc.n	800ac5e <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800abf2:	2300      	movs	r3, #0
 800abf4:	61bb      	str	r3, [r7, #24]
 800abf6:	e02d      	b.n	800ac54 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a1b      	ldr	r3, [r3, #32]
 800abfc:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	699a      	ldr	r2, [r3, #24]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	4413      	add	r3, r2
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	699a      	ldr	r2, [r3, #24]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	3301      	adds	r3, #1
 800ac12:	4413      	add	r3, r2
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ac18:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6999      	ldr	r1, [r3, #24]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	3302      	adds	r3, #2
 800ac24:	440b      	add	r3, r1
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ac2a:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	699a      	ldr	r2, [r3, #24]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	3303      	adds	r3, #3
 800ac36:	4413      	add	r3, r2
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ac40:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ac42:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6a1b      	ldr	r3, [r3, #32]
 800ac48:	1d1a      	adds	r2, r3, #4
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	3301      	adds	r3, #1
 800ac52:	61bb      	str	r3, [r7, #24]
 800ac54:	69ba      	ldr	r2, [r7, #24]
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d3cd      	bcc.n	800abf8 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800ac5c:	e05d      	b.n	800ad1a <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d035      	beq.n	800acd0 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800ac64:	2300      	movs	r3, #0
 800ac66:	61bb      	str	r3, [r7, #24]
 800ac68:	e02d      	b.n	800acc6 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6a1b      	ldr	r3, [r3, #32]
 800ac6e:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	699a      	ldr	r2, [r3, #24]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	4413      	add	r3, r2
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	699a      	ldr	r2, [r3, #24]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	3301      	adds	r3, #1
 800ac84:	4413      	add	r3, r2
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ac8a:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6999      	ldr	r1, [r3, #24]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	3302      	adds	r3, #2
 800ac96:	440b      	add	r3, r1
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ac9c:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	699a      	ldr	r2, [r3, #24]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	3303      	adds	r3, #3
 800aca8:	4413      	add	r3, r2
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800acb2:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800acb4:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6a1b      	ldr	r3, [r3, #32]
 800acba:	1d1a      	adds	r2, r3, #4
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	3301      	adds	r3, #1
 800acc4:	61bb      	str	r3, [r7, #24]
 800acc6:	69ba      	ldr	r2, [r7, #24]
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	429a      	cmp	r2, r3
 800accc:	d3cd      	bcc.n	800ac6a <JPEG_ReadInputData+0x114>
}
 800acce:	e024      	b.n	800ad1a <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800acd4:	2300      	movs	r3, #0
 800acd6:	61bb      	str	r3, [r7, #24]
 800acd8:	e017      	b.n	800ad0a <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	699a      	ldr	r2, [r3, #24]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a1b      	ldr	r3, [r3, #32]
 800ace2:	4413      	add	r3, r2
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	461a      	mov	r2, r3
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	f003 0303 	and.w	r3, r3, #3
 800acee:	00db      	lsls	r3, r3, #3
 800acf0:	fa02 f303 	lsl.w	r3, r2, r3
 800acf4:	697a      	ldr	r2, [r7, #20]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a1b      	ldr	r3, [r3, #32]
 800acfe:	1c5a      	adds	r2, r3, #1
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	3301      	adds	r3, #1
 800ad08:	61bb      	str	r3, [r7, #24]
 800ad0a:	69ba      	ldr	r2, [r7, #24]
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d3e3      	bcc.n	800acda <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	697a      	ldr	r2, [r7, #20]
 800ad18:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800ad1a:	bf00      	nop
 800ad1c:	3720      	adds	r7, #32
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
	...

0800ad24 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800ad24:	b590      	push	{r4, r7, lr}
 800ad26:	b087      	sub	sp, #28
 800ad28:	af02      	add	r7, sp, #8
 800ad2a:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad32:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad3a:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d804      	bhi.n	800ad50 <JPEG_DMA_StartProcess+0x2c>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad4a:	68ba      	ldr	r2, [r7, #8]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d901      	bls.n	800ad54 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 800ad50:	2301      	movs	r3, #1
 800ad52:	e074      	b.n	800ae3e <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad58:	4a3b      	ldr	r2, [pc, #236]	@ (800ae48 <JPEG_DMA_StartProcess+0x124>)
 800ad5a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad60:	4a3a      	ldr	r2, [pc, #232]	@ (800ae4c <JPEG_DMA_StartProcess+0x128>)
 800ad62:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad68:	4a39      	ldr	r2, [pc, #228]	@ (800ae50 <JPEG_DMA_StartProcess+0x12c>)
 800ad6a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad70:	4a36      	ldr	r2, [pc, #216]	@ (800ae4c <JPEG_DMA_StartProcess+0x128>)
 800ad72:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad78:	4a36      	ldr	r2, [pc, #216]	@ (800ae54 <JPEG_DMA_StartProcess+0x130>)
 800ad7a:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d002      	beq.n	800ad88 <JPEG_DMA_StartProcess+0x64>
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d107      	bne.n	800ad98 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad8c:	f043 0204 	orr.w	r2, r3, #4
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800ad94:	2301      	movs	r3, #1
 800ad96:	e052      	b.n	800ae3e <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ada0:	68f9      	ldr	r1, [r7, #12]
 800ada2:	fbb3 f1f1 	udiv	r1, r3, r1
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	fb00 f101 	mul.w	r1, r0, r1
 800adac:	1a5b      	subs	r3, r3, r1
 800adae:	1ad2      	subs	r2, r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adbc:	68b9      	ldr	r1, [r7, #8]
 800adbe:	fbb3 f1f1 	udiv	r1, r3, r1
 800adc2:	68b8      	ldr	r0, [r7, #8]
 800adc4:	fb00 f101 	mul.w	r1, r0, r1
 800adc8:	1a5b      	subs	r3, r3, r1
 800adca:	1ad2      	subs	r2, r2, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	3344      	adds	r3, #68	@ 0x44
 800adda:	4619      	mov	r1, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	69db      	ldr	r3, [r3, #28]
 800ade0:	461c      	mov	r4, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ade6:	2201      	movs	r2, #1
 800ade8:	9200      	str	r2, [sp, #0]
 800adea:	4622      	mov	r2, r4
 800adec:	f000 fbe2 	bl	800b5b4 <HAL_MDMA_Start_IT>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d007      	beq.n	800ae06 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adfa:	f043 0204 	orr.w	r2, r3, #4
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800ae02:	2301      	movs	r3, #1
 800ae04:	e01b      	b.n	800ae3e <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	4619      	mov	r1, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	3340      	adds	r3, #64	@ 0x40
 800ae16:	461c      	mov	r4, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	9200      	str	r2, [sp, #0]
 800ae20:	4622      	mov	r2, r4
 800ae22:	f000 fbc7 	bl	800b5b4 <HAL_MDMA_Start_IT>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d007      	beq.n	800ae3c <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae30:	f043 0204 	orr.w	r2, r3, #4
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e000      	b.n	800ae3e <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3714      	adds	r7, #20
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd90      	pop	{r4, r7, pc}
 800ae46:	bf00      	nop
 800ae48:	0800b157 	.word	0x0800b157
 800ae4c:	0800b345 	.word	0x0800b345
 800ae50:	0800b283 	.word	0x0800b283
 800ae54:	0800b395 	.word	0x0800b395

0800ae58 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae64:	f003 0303 	and.w	r3, r3, #3
 800ae68:	2b02      	cmp	r3, #2
 800ae6a:	d125      	bne.n	800aeb8 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d01e      	beq.n	800aeb8 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	3304      	adds	r3, #4
 800ae7e:	4619      	mov	r1, r3
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f7fe fb6c 	bl	800955e <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	3304      	adds	r3, #4
 800ae90:	4619      	mov	r1, r3
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7fe fce4 	bl	8009860 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aea6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aeb6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aebe:	f003 0320 	and.w	r3, r3, #32
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d039      	beq.n	800af3a <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeca:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f022 0201 	bic.w	r2, r2, #1
 800aee0:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800aef0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800af00:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d104      	bne.n	800af1a <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af14:	4618      	mov	r0, r3
 800af16:	f000 fbce 	bl	800b6b6 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af22:	b2db      	uxtb	r3, r3
 800af24:	2b02      	cmp	r3, #2
 800af26:	d105      	bne.n	800af34 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af2c:	4618      	mov	r0, r3
 800af2e:	f000 fbc2 	bl	800b6b6 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800af32:	e002      	b.n	800af3a <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 f804 	bl	800af42 <JPEG_DMA_EndProcess>
}
 800af3a:	bf00      	nop
 800af3c:	3708      	adds	r7, #8
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b084      	sub	sp, #16
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	695b      	ldr	r3, [r3, #20]
 800af56:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800af5a:	1ad2      	subs	r2, r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af68:	429a      	cmp	r2, r3
 800af6a:	d10a      	bne.n	800af82 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	69d9      	ldr	r1, [r3, #28]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af74:	461a      	mov	r2, r3
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f7f6 ff34 	bl	8001de4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af88:	f003 0310 	and.w	r3, r3, #16
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d134      	bne.n	800affa <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00a      	beq.n	800afae <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	69d9      	ldr	r1, [r3, #28]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afa0:	461a      	mov	r2, r3
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f7f6 ff1e 	bl	8001de4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2200      	movs	r2, #0
 800afac:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f022 0201 	bic.w	r2, r2, #1
 800afbc:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afc2:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afc8:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f003 0303 	and.w	r3, r3, #3
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	d103      	bne.n	800aff2 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f7fe fc43 	bl	8009876 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800aff0:	e00c      	b.n	800b00c <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7f6 ff12 	bl	8001e1c <HAL_JPEG_EncodeCpltCallback>
}
 800aff8:	e008      	b.n	800b00c <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800affe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b002:	2b00      	cmp	r3, #0
 800b004:	d102      	bne.n	800b00c <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 f804 	bl	800b014 <JPEG_DMA_PollResidualData>
}
 800b00c:	bf00      	nop
 800b00e:	3710      	adds	r7, #16
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800b01c:	2310      	movs	r3, #16
 800b01e:	617b      	str	r3, [r7, #20]
 800b020:	e04f      	b.n	800b0c2 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b026:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d146      	bne.n	800b0bc <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b034:	f003 0310 	and.w	r3, r3, #16
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d03f      	beq.n	800b0bc <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b042:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	69da      	ldr	r2, [r3, #28]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b04c:	4413      	add	r3, r2
 800b04e:	68fa      	ldr	r2, [r7, #12]
 800b050:	b2d2      	uxtb	r2, r2
 800b052:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	0a19      	lsrs	r1, r3, #8
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	69da      	ldr	r2, [r3, #28]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b060:	3301      	adds	r3, #1
 800b062:	4413      	add	r3, r2
 800b064:	b2ca      	uxtb	r2, r1
 800b066:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	0c19      	lsrs	r1, r3, #16
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	69da      	ldr	r2, [r3, #28]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b074:	3302      	adds	r3, #2
 800b076:	4413      	add	r3, r2
 800b078:	b2ca      	uxtb	r2, r1
 800b07a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	0e19      	lsrs	r1, r3, #24
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	69da      	ldr	r2, [r3, #28]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b088:	3303      	adds	r3, #3
 800b08a:	4413      	add	r3, r2
 800b08c:	b2ca      	uxtb	r2, r1
 800b08e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b094:	1d1a      	adds	r2, r3, #4
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d10a      	bne.n	800b0bc <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	69d9      	ldr	r1, [r3, #28]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f7f6 fe97 	bl	8001de4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	617b      	str	r3, [r7, #20]
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d1ac      	bne.n	800b022 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0cc:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0d4:	f003 0310 	and.w	r3, r3, #16
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d004      	beq.n	800b0e6 <JPEG_DMA_PollResidualData+0xd2>
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d133      	bne.n	800b14e <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f022 0201 	bic.w	r2, r2, #1
 800b0f4:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d00a      	beq.n	800b114 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	69d9      	ldr	r1, [r3, #28]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b106:	461a      	mov	r2, r3
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f7f6 fe6b 	bl	8001de4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b118:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b11e:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2201      	movs	r2, #1
 800b132:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	f003 0303 	and.w	r3, r3, #3
 800b13c:	2b02      	cmp	r3, #2
 800b13e:	d103      	bne.n	800b148 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f7fe fb98 	bl	8009876 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800b146:	e002      	b.n	800b14e <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f7f6 fe67 	bl	8001e1c <HAL_JPEG_EncodeCpltCallback>
}
 800b14e:	bf00      	nop
 800b150:	3718      	adds	r7, #24
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800b156:	b590      	push	{r4, r7, lr}
 800b158:	b087      	sub	sp, #28
 800b15a:	af02      	add	r7, sp, #8
 800b15c:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b162:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b172:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b178:	f248 030c 	movw	r3, #32780	@ 0x800c
 800b17c:	4013      	ands	r3, r2
 800b17e:	2b0c      	cmp	r3, #12
 800b180:	d17c      	bne.n	800b27c <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b188:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	695b      	ldr	r3, [r3, #20]
 800b194:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b198:	1ad2      	subs	r2, r2, r3
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	6a1b      	ldr	r3, [r3, #32]
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f7f6 fdeb 	bl	8001d80 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ae:	68ba      	ldr	r2, [r7, #8]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d81f      	bhi.n	800b1f4 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10d      	bne.n	800b1d6 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1be:	f043 0204 	orr.w	r2, r3, #4
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2206      	movs	r2, #6
 800b1ca:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800b1ce:	68f8      	ldr	r0, [r7, #12]
 800b1d0:	f7f6 fe38 	bl	8001e44 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800b1d4:	e052      	b.n	800b27c <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1de:	68b9      	ldr	r1, [r7, #8]
 800b1e0:	fbb3 f1f1 	udiv	r1, r3, r1
 800b1e4:	68b8      	ldr	r0, [r7, #8]
 800b1e6:	fb00 f101 	mul.w	r1, r0, r1
 800b1ea:	1a5b      	subs	r3, r3, r1
 800b1ec:	1ad2      	subs	r2, r2, r3
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	629a      	str	r2, [r3, #40]	@ 0x28
 800b1f2:	e010      	b.n	800b216 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d00c      	beq.n	800b216 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b200:	f003 0303 	and.w	r3, r3, #3
 800b204:	2b00      	cmp	r3, #0
 800b206:	d006      	beq.n	800b216 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b20c:	089b      	lsrs	r3, r3, #2
 800b20e:	3301      	adds	r3, #1
 800b210:	009a      	lsls	r2, r3, #2
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b21a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d124      	bne.n	800b26c <JPEG_MDMAInCpltCallback+0x116>
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b226:	2b00      	cmp	r3, #0
 800b228:	d020      	beq.n	800b26c <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	699b      	ldr	r3, [r3, #24]
 800b232:	4619      	mov	r1, r3
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	3340      	adds	r3, #64	@ 0x40
 800b23a:	461c      	mov	r4, r3
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b240:	2201      	movs	r2, #1
 800b242:	9200      	str	r2, [sp, #0]
 800b244:	4622      	mov	r2, r4
 800b246:	f000 f9b5 	bl	800b5b4 <HAL_MDMA_Start_IT>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d00d      	beq.n	800b26c <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b254:	f043 0204 	orr.w	r2, r3, #4
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2206      	movs	r2, #6
 800b260:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f7f6 fded 	bl	8001e44 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800b26a:	e007      	b.n	800b27c <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b27a:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 800b27c:	3714      	adds	r7, #20
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd90      	pop	{r4, r7, pc}

0800b282 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800b282:	b590      	push	{r4, r7, lr}
 800b284:	b087      	sub	sp, #28
 800b286:	af02      	add	r7, sp, #8
 800b288:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b28e:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b29e:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b2a4:	f248 030c 	movw	r3, #32780	@ 0x800c
 800b2a8:	4013      	ands	r3, r2
 800b2aa:	2b0c      	cmp	r3, #12
 800b2ac:	d147      	bne.n	800b33e <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2b4:	f003 0320 	and.w	r3, r3, #32
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d138      	bne.n	800b32e <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	695b      	ldr	r3, [r3, #20]
 800b2c6:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b2ca:	1ad2      	subs	r2, r2, r3
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	69d9      	ldr	r1, [r3, #28]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2d8:	461a      	mov	r2, r3
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f7f6 fd82 	bl	8001de4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d120      	bne.n	800b32e <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	3344      	adds	r3, #68	@ 0x44
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	69db      	ldr	r3, [r3, #28]
 800b2fc:	461c      	mov	r4, r3
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b302:	2201      	movs	r2, #1
 800b304:	9200      	str	r2, [sp, #0]
 800b306:	4622      	mov	r2, r4
 800b308:	f000 f954 	bl	800b5b4 <HAL_MDMA_Start_IT>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d00d      	beq.n	800b32e <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b316:	f043 0204 	orr.w	r2, r3, #4
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2206      	movs	r2, #6
 800b322:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f7f6 fd8c 	bl	8001e44 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800b32c:	e007      	b.n	800b33e <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b33c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800b33e:	3714      	adds	r7, #20
 800b340:	46bd      	mov	sp, r7
 800b342:	bd90      	pop	{r4, r7, pc}

0800b344 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b350:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f022 0201 	bic.w	r2, r2, #1
 800b360:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b370:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2201      	movs	r2, #1
 800b376:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b37e:	f043 0204 	orr.w	r2, r3, #4
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f7f6 fd5c 	bl	8001e44 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800b38c:	bf00      	nop
 800b38e:	3710      	adds	r7, #16
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3a0:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d002      	beq.n	800b3b4 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	f7ff fdc7 	bl	800af42 <JPEG_DMA_EndProcess>
  }
}
 800b3b4:	bf00      	nop
 800b3b6:	3710      	adds	r7, #16
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b08b      	sub	sp, #44	@ 0x2c
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	3350      	adds	r3, #80	@ 0x50
 800b3ce:	61bb      	str	r3, [r7, #24]

  i = 0;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800b3d4:	e042      	b.n	800b45c <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800b3dc:	2300      	movs	r3, #0
 800b3de:	61fb      	str	r3, [r7, #28]
 800b3e0:	e033      	b.n	800b44a <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	00db      	lsls	r3, r3, #3
 800b3e6:	697a      	ldr	r2, [r7, #20]
 800b3e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d103      	bne.n	800b3fe <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800b3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f8:	3364      	adds	r3, #100	@ 0x64
 800b3fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3fc:	e022      	b.n	800b444 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	2264      	movs	r2, #100	@ 0x64
 800b402:	fb02 f303 	mul.w	r3, r2, r3
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b40a:	6a38      	ldr	r0, [r7, #32]
 800b40c:	69f9      	ldr	r1, [r7, #28]
 800b40e:	4401      	add	r1, r0
 800b410:	4818      	ldr	r0, [pc, #96]	@ (800b474 <JPEG_GetQuality+0xb8>)
 800b412:	5c41      	ldrb	r1, [r0, r1]
 800b414:	440a      	add	r2, r1
 800b416:	7812      	ldrb	r2, [r2, #0]
 800b418:	fbb3 f3f2 	udiv	r3, r3, r2
 800b41c:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2b64      	cmp	r3, #100	@ 0x64
 800b422:	d807      	bhi.n	800b434 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800b42a:	085b      	lsrs	r3, r3, #1
 800b42c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b42e:	4413      	add	r3, r2
 800b430:	627b      	str	r3, [r7, #36]	@ 0x24
 800b432:	e007      	b.n	800b444 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800b434:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b43e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b440:	4413      	add	r3, r2
 800b442:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	3301      	adds	r3, #1
 800b448:	61fb      	str	r3, [r7, #28]
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	2b03      	cmp	r3, #3
 800b44e:	d9c8      	bls.n	800b3e2 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800b450:	6a3b      	ldr	r3, [r7, #32]
 800b452:	3304      	adds	r3, #4
 800b454:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	3304      	adds	r3, #4
 800b45a:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800b45c:	6a3b      	ldr	r3, [r7, #32]
 800b45e:	2b3c      	cmp	r3, #60	@ 0x3c
 800b460:	d9b9      	bls.n	800b3d6 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800b462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b464:	099b      	lsrs	r3, r3, #6
}
 800b466:	4618      	mov	r0, r3
 800b468:	372c      	adds	r7, #44	@ 0x2c
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr
 800b472:	bf00      	nop
 800b474:	0801b578 	.word	0x0801b578

0800b478 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b480:	f7f8 f808 	bl	8003494 <HAL_GetTick>
 800b484:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d101      	bne.n	800b490 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	e03b      	b.n	800b508 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2202      	movs	r2, #2
 800b49c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	68da      	ldr	r2, [r3, #12]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f022 0201 	bic.w	r2, r2, #1
 800b4ae:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b4b0:	e00f      	b.n	800b4d2 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800b4b2:	f7f7 ffef 	bl	8003494 <HAL_GetTick>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	1ad3      	subs	r3, r2, r3
 800b4bc:	2b05      	cmp	r3, #5
 800b4be:	d908      	bls.n	800b4d2 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2240      	movs	r2, #64	@ 0x40
 800b4c4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2203      	movs	r2, #3
 800b4ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e01a      	b.n	800b508 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	68db      	ldr	r3, [r3, #12]
 800b4d8:	f003 0301 	and.w	r3, r3, #1
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d1e8      	bne.n	800b4b2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 fad3 	bl	800ba8c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2201      	movs	r2, #1
 800b502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3710      	adds	r7, #16
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800b510:	b480      	push	{r7}
 800b512:	b087      	sub	sp, #28
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800b51c:	2300      	movs	r3, #0
 800b51e:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d101      	bne.n	800b52a <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	e03e      	b.n	800b5a8 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b530:	2b01      	cmp	r3, #1
 800b532:	d101      	bne.n	800b538 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800b534:	2302      	movs	r3, #2
 800b536:	e037      	b.n	800b5a8 <HAL_MDMA_ConfigPostRequestMask+0x98>
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2201      	movs	r2, #1
 800b53c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b546:	b2db      	uxtb	r3, r3
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d126      	bne.n	800b59a <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b556:	2b00      	cmp	r3, #0
 800b558:	d11c      	bne.n	800b594 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68ba      	ldr	r2, [r7, #8]
 800b560:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d108      	bne.n	800b582 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	691a      	ldr	r2, [r3, #16]
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800b57e:	611a      	str	r2, [r3, #16]
 800b580:	e00d      	b.n	800b59e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	691a      	ldr	r2, [r3, #16]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b590:	611a      	str	r2, [r3, #16]
 800b592:	e004      	b.n	800b59e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800b594:	2301      	movs	r3, #1
 800b596:	75fb      	strb	r3, [r7, #23]
 800b598:	e001      	b.n	800b59e <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b5a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	371c      	adds	r7, #28
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af02      	add	r7, sp, #8
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
 800b5c0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d101      	bne.n	800b5cc <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e070      	b.n	800b6ae <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d101      	bne.n	800b5da <HAL_MDMA_Start_IT+0x26>
 800b5d6:	2302      	movs	r3, #2
 800b5d8:	e069      	b.n	800b6ae <HAL_MDMA_Start_IT+0xfa>
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2201      	movs	r2, #1
 800b5de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d158      	bne.n	800b6a0 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2202      	movs	r2, #2
 800b5f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	68da      	ldr	r2, [r3, #12]
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f022 0201 	bic.w	r2, r2, #1
 800b60a:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	68b9      	ldr	r1, [r7, #8]
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	f000 f9c8 	bl	800b9ac <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	68da      	ldr	r2, [r3, #12]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f042 0206 	orr.w	r2, r2, #6
 800b62a:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b630:	2b00      	cmp	r3, #0
 800b632:	d007      	beq.n	800b644 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	68da      	ldr	r2, [r3, #12]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f042 0210 	orr.w	r2, r2, #16
 800b642:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d007      	beq.n	800b65c <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	68da      	ldr	r2, [r3, #12]
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f042 0208 	orr.w	r2, r2, #8
 800b65a:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b660:	2b00      	cmp	r3, #0
 800b662:	d007      	beq.n	800b674 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	68da      	ldr	r2, [r3, #12]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f042 0220 	orr.w	r2, r2, #32
 800b672:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	68da      	ldr	r2, [r3, #12]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f042 0201 	orr.w	r2, r2, #1
 800b682:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b68c:	d10e      	bne.n	800b6ac <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	68da      	ldr	r2, [r3, #12]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b69c:	60da      	str	r2, [r3, #12]
 800b69e:	e005      	b.n	800b6ac <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 800b6a8:	2302      	movs	r3, #2
 800b6aa:	e000      	b.n	800b6ae <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 800b6ac:	2300      	movs	r3, #0
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3710      	adds	r7, #16
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}

0800b6b6 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800b6b6:	b480      	push	{r7}
 800b6b8:	b083      	sub	sp, #12
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d101      	bne.n	800b6c8 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	e017      	b.n	800b6f8 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	d004      	beq.n	800b6de <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2280      	movs	r2, #128	@ 0x80
 800b6d8:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e00c      	b.n	800b6f8 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2204      	movs	r2, #4
 800b6e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	68da      	ldr	r2, [r3, #12]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f022 0201 	bic.w	r2, r2, #1
 800b6f4:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	370c      	adds	r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b086      	sub	sp, #24
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800b70c:	2300      	movs	r3, #0
 800b70e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b710:	4b91      	ldr	r3, [pc, #580]	@ (800b958 <HAL_MDMA_IRQHandler+0x254>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a91      	ldr	r2, [pc, #580]	@ (800b95c <HAL_MDMA_IRQHandler+0x258>)
 800b716:	fba2 2303 	umull	r2, r3, r2, r3
 800b71a:	0a9b      	lsrs	r3, r3, #10
 800b71c:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	461a      	mov	r2, r3
 800b724:	4b8e      	ldr	r3, [pc, #568]	@ (800b960 <HAL_MDMA_IRQHandler+0x25c>)
 800b726:	4413      	add	r3, r2
 800b728:	099b      	lsrs	r3, r3, #6
 800b72a:	f003 031f 	and.w	r3, r3, #31
 800b72e:	2201      	movs	r2, #1
 800b730:	fa02 f303 	lsl.w	r3, r2, r3
 800b734:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800b736:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	4013      	ands	r3, r2
 800b740:	2b00      	cmp	r3, #0
 800b742:	f000 812d 	beq.w	800b9a0 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f003 0301 	and.w	r3, r3, #1
 800b750:	2b00      	cmp	r3, #0
 800b752:	d054      	beq.n	800b7fe <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	f003 0302 	and.w	r3, r3, #2
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d04d      	beq.n	800b7fe <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	68da      	ldr	r2, [r3, #12]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f022 0202 	bic.w	r2, r2, #2
 800b770:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b780:	2b00      	cmp	r3, #0
 800b782:	d106      	bne.n	800b792 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b788:	f043 0201 	orr.w	r2, r3, #1
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	669a      	str	r2, [r3, #104]	@ 0x68
 800b790:	e005      	b.n	800b79e <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b796:	f043 0202 	orr.w	r2, r3, #2
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d005      	beq.n	800b7b4 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b7ac:	f043 0204 	orr.w	r2, r3, #4
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d005      	beq.n	800b7ca <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b7c2:	f043 0208 	orr.w	r2, r3, #8
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d005      	beq.n	800b7e0 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b7d8:	f043 0210 	orr.w	r2, r3, #16
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d005      	beq.n	800b7f6 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b7ee:	f043 0220 	orr.w	r2, r3, #32
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 0310 	and.w	r3, r3, #16
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d012      	beq.n	800b832 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	f003 0320 	and.w	r3, r3, #32
 800b816:	2b00      	cmp	r3, #0
 800b818:	d00b      	beq.n	800b832 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2210      	movs	r2, #16
 800b820:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b826:	2b00      	cmp	r3, #0
 800b828:	d003      	beq.n	800b832 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f003 0308 	and.w	r3, r3, #8
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d012      	beq.n	800b866 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	68db      	ldr	r3, [r3, #12]
 800b846:	f003 0310 	and.w	r3, r3, #16
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00b      	beq.n	800b866 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2208      	movs	r2, #8
 800b854:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d003      	beq.n	800b866 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f003 0304 	and.w	r3, r3, #4
 800b870:	2b00      	cmp	r3, #0
 800b872:	d012      	beq.n	800b89a <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	f003 0308 	and.w	r3, r3, #8
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00b      	beq.n	800b89a <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2204      	movs	r2, #4
 800b888:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d003      	beq.n	800b89a <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f003 0302 	and.w	r3, r3, #2
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d039      	beq.n	800b91c <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	f003 0304 	and.w	r3, r3, #4
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d032      	beq.n	800b91c <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	68da      	ldr	r2, [r3, #12]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800b8c4:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	2b04      	cmp	r3, #4
 800b8d0:	d110      	bne.n	800b8f4 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d05c      	beq.n	800b9a4 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	4798      	blx	r3
        }
        return;
 800b8f2:	e057      	b.n	800b9a4 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	2202      	movs	r2, #2
 800b8fa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2201      	movs	r2, #1
 800b908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b910:	2b00      	cmp	r3, #0
 800b912:	d003      	beq.n	800b91c <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b920:	2b00      	cmp	r3, #0
 800b922:	d040      	beq.n	800b9a6 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2204      	movs	r2, #4
 800b928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	68da      	ldr	r2, [r3, #12]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f022 0201 	bic.w	r2, r2, #1
 800b93a:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	3301      	adds	r3, #1
 800b940:	60bb      	str	r3, [r7, #8]
 800b942:	697a      	ldr	r2, [r7, #20]
 800b944:	429a      	cmp	r2, r3
 800b946:	d30d      	bcc.n	800b964 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	68db      	ldr	r3, [r3, #12]
 800b94e:	f003 0301 	and.w	r3, r3, #1
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1f2      	bne.n	800b93c <HAL_MDMA_IRQHandler+0x238>
 800b956:	e006      	b.n	800b966 <HAL_MDMA_IRQHandler+0x262>
 800b958:	24000018 	.word	0x24000018
 800b95c:	1b4e81b5 	.word	0x1b4e81b5
 800b960:	adffffc0 	.word	0xadffffc0
        break;
 800b964:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	f003 0301 	and.w	r3, r3, #1
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d004      	beq.n	800b986 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2203      	movs	r2, #3
 800b980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b984:	e003      	b.n	800b98e <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2201      	movs	r2, #1
 800b98a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b992:	2b00      	cmp	r3, #0
 800b994:	d007      	beq.n	800b9a6 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	4798      	blx	r3
 800b99e:	e002      	b.n	800b9a6 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800b9a0:	bf00      	nop
 800b9a2:	e000      	b.n	800b9a6 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800b9a4:	bf00      	nop
    }
  }
}
 800b9a6:	3718      	adds	r7, #24
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b087      	sub	sp, #28
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	607a      	str	r2, [r7, #4]
 800b9b8:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	695a      	ldr	r2, [r3, #20]
 800b9c0:	4b31      	ldr	r3, [pc, #196]	@ (800ba88 <MDMA_SetConfig+0xdc>)
 800b9c2:	4013      	ands	r3, r2
 800b9c4:	683a      	ldr	r2, [r7, #0]
 800b9c6:	f3c2 0110 	ubfx	r1, r2, #0, #17
 800b9ca:	68fa      	ldr	r2, [r7, #12]
 800b9cc:	6812      	ldr	r2, [r2, #0]
 800b9ce:	430b      	orrs	r3, r1
 800b9d0:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	695b      	ldr	r3, [r3, #20]
 800b9d8:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800b9dc:	6a3b      	ldr	r3, [r7, #32]
 800b9de:	3b01      	subs	r3, #1
 800b9e0:	051a      	lsls	r2, r3, #20
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	430a      	orrs	r2, r1
 800b9e8:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	221f      	movs	r2, #31
 800b9f0:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	68ba      	ldr	r2, [r7, #8]
 800ba00:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800ba08:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba10:	d002      	beq.n	800ba18 <MDMA_SetConfig+0x6c>
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d108      	bne.n	800ba2a <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ba26:	629a      	str	r2, [r3, #40]	@ 0x28
 800ba28:	e007      	b.n	800ba3a <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ba38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800ba40:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba48:	d002      	beq.n	800ba50 <MDMA_SetConfig+0xa4>
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d108      	bne.n	800ba62 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800ba5e:	629a      	str	r2, [r3, #40]	@ 0x28
 800ba60:	e007      	b.n	800ba72 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ba70:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800ba7c:	bf00      	nop
 800ba7e:	371c      	adds	r7, #28
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr
 800ba88:	fffe0000 	.word	0xfffe0000

0800ba8c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b085      	sub	sp, #20
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	68d9      	ldr	r1, [r3, #12]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	691a      	ldr	r2, [r3, #16]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	430a      	orrs	r2, r1
 800baa2:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	695a      	ldr	r2, [r3, #20]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	699b      	ldr	r3, [r3, #24]
 800baac:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bab2:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a1b      	ldr	r3, [r3, #32]
 800bab8:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800babe:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac4:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800baca:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bad0:	3b01      	subs	r3, #1
 800bad2:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800bad4:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800bae0:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bae2:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800baec:	d107      	bne.n	800bafe <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	691a      	ldr	r2, [r3, #16]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800bafc:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2200      	movs	r2, #0
 800bb04:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	da11      	bge.n	800bb32 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	695a      	ldr	r2, [r3, #20]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800bb1c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb22:	425b      	negs	r3, r3
 800bb24:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	68fa      	ldr	r2, [r7, #12]
 800bb2c:	b292      	uxth	r2, r2
 800bb2e:	621a      	str	r2, [r3, #32]
 800bb30:	e006      	b.n	800bb40 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb36:	461a      	mov	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	b292      	uxth	r2, r2
 800bb3e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	da15      	bge.n	800bb74 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	695a      	ldr	r2, [r3, #20]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800bb56:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb5c:	425b      	negs	r3, r3
 800bb5e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	6a19      	ldr	r1, [r3, #32]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	041a      	lsls	r2, r3, #16
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	430a      	orrs	r2, r1
 800bb70:	621a      	str	r2, [r3, #32]
 800bb72:	e009      	b.n	800bb88 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	6a19      	ldr	r1, [r3, #32]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb7e:	041a      	lsls	r2, r3, #16
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	430a      	orrs	r2, r1
 800bb86:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb90:	d006      	beq.n	800bba0 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	685a      	ldr	r2, [r3, #4]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	b2d2      	uxtb	r2, r2
 800bb9c:	629a      	str	r2, [r3, #40]	@ 0x28
 800bb9e:	e003      	b.n	800bba8 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2200      	movs	r2, #0
 800bba6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	2200      	movs	r2, #0
 800bbae:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800bbb0:	bf00      	nop
 800bbb2:	3714      	adds	r7, #20
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b086      	sub	sp, #24
 800bbc0:	af02      	add	r7, sp, #8
 800bbc2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d101      	bne.n	800bbce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e0fe      	b.n	800bdcc <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d106      	bne.n	800bbe8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f00c f98c 	bl	8017f00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2203      	movs	r2, #3
 800bbec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f008 fb3c 	bl	8014272 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6818      	ldr	r0, [r3, #0]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	7c1a      	ldrb	r2, [r3, #16]
 800bc02:	f88d 2000 	strb.w	r2, [sp]
 800bc06:	3304      	adds	r3, #4
 800bc08:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bc0a:	f008 fa0d 	bl	8014028 <USB_CoreInit>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d005      	beq.n	800bc20 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2202      	movs	r2, #2
 800bc18:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	e0d5      	b.n	800bdcc <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2100      	movs	r1, #0
 800bc26:	4618      	mov	r0, r3
 800bc28:	f008 fb34 	bl	8014294 <USB_SetCurrentMode>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d005      	beq.n	800bc3e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2202      	movs	r2, #2
 800bc36:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e0c6      	b.n	800bdcc <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bc3e:	2300      	movs	r3, #0
 800bc40:	73fb      	strb	r3, [r7, #15]
 800bc42:	e04a      	b.n	800bcda <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bc44:	7bfa      	ldrb	r2, [r7, #15]
 800bc46:	6879      	ldr	r1, [r7, #4]
 800bc48:	4613      	mov	r3, r2
 800bc4a:	00db      	lsls	r3, r3, #3
 800bc4c:	4413      	add	r3, r2
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	440b      	add	r3, r1
 800bc52:	3315      	adds	r3, #21
 800bc54:	2201      	movs	r2, #1
 800bc56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bc58:	7bfa      	ldrb	r2, [r7, #15]
 800bc5a:	6879      	ldr	r1, [r7, #4]
 800bc5c:	4613      	mov	r3, r2
 800bc5e:	00db      	lsls	r3, r3, #3
 800bc60:	4413      	add	r3, r2
 800bc62:	009b      	lsls	r3, r3, #2
 800bc64:	440b      	add	r3, r1
 800bc66:	3314      	adds	r3, #20
 800bc68:	7bfa      	ldrb	r2, [r7, #15]
 800bc6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800bc6c:	7bfa      	ldrb	r2, [r7, #15]
 800bc6e:	7bfb      	ldrb	r3, [r7, #15]
 800bc70:	b298      	uxth	r0, r3
 800bc72:	6879      	ldr	r1, [r7, #4]
 800bc74:	4613      	mov	r3, r2
 800bc76:	00db      	lsls	r3, r3, #3
 800bc78:	4413      	add	r3, r2
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	440b      	add	r3, r1
 800bc7e:	332e      	adds	r3, #46	@ 0x2e
 800bc80:	4602      	mov	r2, r0
 800bc82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bc84:	7bfa      	ldrb	r2, [r7, #15]
 800bc86:	6879      	ldr	r1, [r7, #4]
 800bc88:	4613      	mov	r3, r2
 800bc8a:	00db      	lsls	r3, r3, #3
 800bc8c:	4413      	add	r3, r2
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	440b      	add	r3, r1
 800bc92:	3318      	adds	r3, #24
 800bc94:	2200      	movs	r2, #0
 800bc96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bc98:	7bfa      	ldrb	r2, [r7, #15]
 800bc9a:	6879      	ldr	r1, [r7, #4]
 800bc9c:	4613      	mov	r3, r2
 800bc9e:	00db      	lsls	r3, r3, #3
 800bca0:	4413      	add	r3, r2
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	440b      	add	r3, r1
 800bca6:	331c      	adds	r3, #28
 800bca8:	2200      	movs	r2, #0
 800bcaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800bcac:	7bfa      	ldrb	r2, [r7, #15]
 800bcae:	6879      	ldr	r1, [r7, #4]
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	00db      	lsls	r3, r3, #3
 800bcb4:	4413      	add	r3, r2
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	440b      	add	r3, r1
 800bcba:	3320      	adds	r3, #32
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bcc0:	7bfa      	ldrb	r2, [r7, #15]
 800bcc2:	6879      	ldr	r1, [r7, #4]
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	00db      	lsls	r3, r3, #3
 800bcc8:	4413      	add	r3, r2
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	440b      	add	r3, r1
 800bcce:	3324      	adds	r3, #36	@ 0x24
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bcd4:	7bfb      	ldrb	r3, [r7, #15]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	73fb      	strb	r3, [r7, #15]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	791b      	ldrb	r3, [r3, #4]
 800bcde:	7bfa      	ldrb	r2, [r7, #15]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d3af      	bcc.n	800bc44 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bce4:	2300      	movs	r3, #0
 800bce6:	73fb      	strb	r3, [r7, #15]
 800bce8:	e044      	b.n	800bd74 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bcea:	7bfa      	ldrb	r2, [r7, #15]
 800bcec:	6879      	ldr	r1, [r7, #4]
 800bcee:	4613      	mov	r3, r2
 800bcf0:	00db      	lsls	r3, r3, #3
 800bcf2:	4413      	add	r3, r2
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	440b      	add	r3, r1
 800bcf8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bd00:	7bfa      	ldrb	r2, [r7, #15]
 800bd02:	6879      	ldr	r1, [r7, #4]
 800bd04:	4613      	mov	r3, r2
 800bd06:	00db      	lsls	r3, r3, #3
 800bd08:	4413      	add	r3, r2
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	440b      	add	r3, r1
 800bd0e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800bd12:	7bfa      	ldrb	r2, [r7, #15]
 800bd14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bd16:	7bfa      	ldrb	r2, [r7, #15]
 800bd18:	6879      	ldr	r1, [r7, #4]
 800bd1a:	4613      	mov	r3, r2
 800bd1c:	00db      	lsls	r3, r3, #3
 800bd1e:	4413      	add	r3, r2
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	440b      	add	r3, r1
 800bd24:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800bd28:	2200      	movs	r2, #0
 800bd2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800bd2c:	7bfa      	ldrb	r2, [r7, #15]
 800bd2e:	6879      	ldr	r1, [r7, #4]
 800bd30:	4613      	mov	r3, r2
 800bd32:	00db      	lsls	r3, r3, #3
 800bd34:	4413      	add	r3, r2
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	440b      	add	r3, r1
 800bd3a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800bd3e:	2200      	movs	r2, #0
 800bd40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800bd42:	7bfa      	ldrb	r2, [r7, #15]
 800bd44:	6879      	ldr	r1, [r7, #4]
 800bd46:	4613      	mov	r3, r2
 800bd48:	00db      	lsls	r3, r3, #3
 800bd4a:	4413      	add	r3, r2
 800bd4c:	009b      	lsls	r3, r3, #2
 800bd4e:	440b      	add	r3, r1
 800bd50:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bd54:	2200      	movs	r2, #0
 800bd56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800bd58:	7bfa      	ldrb	r2, [r7, #15]
 800bd5a:	6879      	ldr	r1, [r7, #4]
 800bd5c:	4613      	mov	r3, r2
 800bd5e:	00db      	lsls	r3, r3, #3
 800bd60:	4413      	add	r3, r2
 800bd62:	009b      	lsls	r3, r3, #2
 800bd64:	440b      	add	r3, r1
 800bd66:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd6e:	7bfb      	ldrb	r3, [r7, #15]
 800bd70:	3301      	adds	r3, #1
 800bd72:	73fb      	strb	r3, [r7, #15]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	791b      	ldrb	r3, [r3, #4]
 800bd78:	7bfa      	ldrb	r2, [r7, #15]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d3b5      	bcc.n	800bcea <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6818      	ldr	r0, [r3, #0]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	7c1a      	ldrb	r2, [r3, #16]
 800bd86:	f88d 2000 	strb.w	r2, [sp]
 800bd8a:	3304      	adds	r3, #4
 800bd8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd8e:	f008 facd 	bl	801432c <USB_DevInit>
 800bd92:	4603      	mov	r3, r0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d005      	beq.n	800bda4 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2202      	movs	r2, #2
 800bd9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bda0:	2301      	movs	r3, #1
 800bda2:	e013      	b.n	800bdcc <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2200      	movs	r2, #0
 800bda8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2201      	movs	r2, #1
 800bdae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	7b1b      	ldrb	r3, [r3, #12]
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d102      	bne.n	800bdc0 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f001 f96e 	bl	800d09c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f009 fb10 	bl	80153ea <USB_DevDisconnect>

  return HAL_OK;
 800bdca:	2300      	movs	r3, #0
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3710      	adds	r7, #16
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d101      	bne.n	800bdf0 <HAL_PCD_Start+0x1c>
 800bdec:	2302      	movs	r3, #2
 800bdee:	e022      	b.n	800be36 <HAL_PCD_Start+0x62>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be00:	2b00      	cmp	r3, #0
 800be02:	d009      	beq.n	800be18 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800be08:	2b01      	cmp	r3, #1
 800be0a:	d105      	bne.n	800be18 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be10:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4618      	mov	r0, r3
 800be1e:	f008 fa17 	bl	8014250 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4618      	mov	r0, r3
 800be28:	f009 fabe 	bl	80153a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800be34:	2300      	movs	r3, #0
}
 800be36:	4618      	mov	r0, r3
 800be38:	3710      	adds	r7, #16
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800be3e:	b590      	push	{r4, r7, lr}
 800be40:	b08d      	sub	sp, #52	@ 0x34
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be4c:	6a3b      	ldr	r3, [r7, #32]
 800be4e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4618      	mov	r0, r3
 800be56:	f009 fb7c 	bl	8015552 <USB_GetMode>
 800be5a:	4603      	mov	r3, r0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f040 84b9 	bne.w	800c7d4 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4618      	mov	r0, r3
 800be68:	f009 fae0 	bl	801542c <USB_ReadInterrupts>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	f000 84af 	beq.w	800c7d2 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	0a1b      	lsrs	r3, r3, #8
 800be7e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4618      	mov	r0, r3
 800be8e:	f009 facd 	bl	801542c <USB_ReadInterrupts>
 800be92:	4603      	mov	r3, r0
 800be94:	f003 0302 	and.w	r3, r3, #2
 800be98:	2b02      	cmp	r3, #2
 800be9a:	d107      	bne.n	800beac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	695a      	ldr	r2, [r3, #20]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f002 0202 	and.w	r2, r2, #2
 800beaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4618      	mov	r0, r3
 800beb2:	f009 fabb 	bl	801542c <USB_ReadInterrupts>
 800beb6:	4603      	mov	r3, r0
 800beb8:	f003 0310 	and.w	r3, r3, #16
 800bebc:	2b10      	cmp	r3, #16
 800bebe:	d161      	bne.n	800bf84 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	699a      	ldr	r2, [r3, #24]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f022 0210 	bic.w	r2, r2, #16
 800bece:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800bed0:	6a3b      	ldr	r3, [r7, #32]
 800bed2:	6a1b      	ldr	r3, [r3, #32]
 800bed4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800bed6:	69bb      	ldr	r3, [r7, #24]
 800bed8:	f003 020f 	and.w	r2, r3, #15
 800bedc:	4613      	mov	r3, r2
 800bede:	00db      	lsls	r3, r3, #3
 800bee0:	4413      	add	r3, r2
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	4413      	add	r3, r2
 800beec:	3304      	adds	r3, #4
 800beee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800bef0:	69bb      	ldr	r3, [r7, #24]
 800bef2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800bef6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800befa:	d124      	bne.n	800bf46 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800befc:	69ba      	ldr	r2, [r7, #24]
 800befe:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800bf02:	4013      	ands	r3, r2
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d035      	beq.n	800bf74 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800bf0c:	69bb      	ldr	r3, [r7, #24]
 800bf0e:	091b      	lsrs	r3, r3, #4
 800bf10:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bf12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	461a      	mov	r2, r3
 800bf1a:	6a38      	ldr	r0, [r7, #32]
 800bf1c:	f009 f8f2 	bl	8015104 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	68da      	ldr	r2, [r3, #12]
 800bf24:	69bb      	ldr	r3, [r7, #24]
 800bf26:	091b      	lsrs	r3, r3, #4
 800bf28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf2c:	441a      	add	r2, r3
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	695a      	ldr	r2, [r3, #20]
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	091b      	lsrs	r3, r3, #4
 800bf3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf3e:	441a      	add	r2, r3
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	615a      	str	r2, [r3, #20]
 800bf44:	e016      	b.n	800bf74 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800bf4c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800bf50:	d110      	bne.n	800bf74 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bf58:	2208      	movs	r2, #8
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	6a38      	ldr	r0, [r7, #32]
 800bf5e:	f009 f8d1 	bl	8015104 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	695a      	ldr	r2, [r3, #20]
 800bf66:	69bb      	ldr	r3, [r7, #24]
 800bf68:	091b      	lsrs	r3, r3, #4
 800bf6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf6e:	441a      	add	r2, r3
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	699a      	ldr	r2, [r3, #24]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f042 0210 	orr.w	r2, r2, #16
 800bf82:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f009 fa4f 	bl	801542c <USB_ReadInterrupts>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bf94:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800bf98:	f040 80a7 	bne.w	800c0ea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f009 fa54 	bl	8015452 <USB_ReadDevAllOutEpInterrupt>
 800bfaa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800bfac:	e099      	b.n	800c0e2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800bfae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfb0:	f003 0301 	and.w	r3, r3, #1
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	f000 808e 	beq.w	800c0d6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfc0:	b2d2      	uxtb	r2, r2
 800bfc2:	4611      	mov	r1, r2
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f009 fa78 	bl	80154ba <USB_ReadDevOutEPInterrupt>
 800bfca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	f003 0301 	and.w	r3, r3, #1
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d00c      	beq.n	800bff0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800bfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd8:	015a      	lsls	r2, r3, #5
 800bfda:	69fb      	ldr	r3, [r7, #28]
 800bfdc:	4413      	add	r3, r2
 800bfde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800bfe8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 fed0 	bl	800cd90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	f003 0308 	and.w	r3, r3, #8
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d00c      	beq.n	800c014 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800bffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bffc:	015a      	lsls	r2, r3, #5
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	4413      	add	r3, r2
 800c002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c006:	461a      	mov	r2, r3
 800c008:	2308      	movs	r3, #8
 800c00a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c00c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 ffa6 	bl	800cf60 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	f003 0310 	and.w	r3, r3, #16
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d008      	beq.n	800c030 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c020:	015a      	lsls	r2, r3, #5
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	4413      	add	r3, r2
 800c026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c02a:	461a      	mov	r2, r3
 800c02c:	2310      	movs	r3, #16
 800c02e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	f003 0302 	and.w	r3, r3, #2
 800c036:	2b00      	cmp	r3, #0
 800c038:	d030      	beq.n	800c09c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800c03a:	6a3b      	ldr	r3, [r7, #32]
 800c03c:	695b      	ldr	r3, [r3, #20]
 800c03e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c042:	2b80      	cmp	r3, #128	@ 0x80
 800c044:	d109      	bne.n	800c05a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800c046:	69fb      	ldr	r3, [r7, #28]
 800c048:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	69fa      	ldr	r2, [r7, #28]
 800c050:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c054:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c058:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800c05a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c05c:	4613      	mov	r3, r2
 800c05e:	00db      	lsls	r3, r3, #3
 800c060:	4413      	add	r3, r2
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	4413      	add	r3, r2
 800c06c:	3304      	adds	r3, #4
 800c06e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	78db      	ldrb	r3, [r3, #3]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d108      	bne.n	800c08a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	2200      	movs	r2, #0
 800c07c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c080:	b2db      	uxtb	r3, r3
 800c082:	4619      	mov	r1, r3
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f00c f861 	bl	801814c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800c08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c08c:	015a      	lsls	r2, r3, #5
 800c08e:	69fb      	ldr	r3, [r7, #28]
 800c090:	4413      	add	r3, r2
 800c092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c096:	461a      	mov	r2, r3
 800c098:	2302      	movs	r3, #2
 800c09a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	f003 0320 	and.w	r3, r3, #32
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d008      	beq.n	800c0b8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0a8:	015a      	lsls	r2, r3, #5
 800c0aa:	69fb      	ldr	r3, [r7, #28]
 800c0ac:	4413      	add	r3, r2
 800c0ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	2320      	movs	r3, #32
 800c0b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d009      	beq.n	800c0d6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c4:	015a      	lsls	r2, r3, #5
 800c0c6:	69fb      	ldr	r3, [r7, #28]
 800c0c8:	4413      	add	r3, r2
 800c0ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c0d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d8:	3301      	adds	r3, #1
 800c0da:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0de:	085b      	lsrs	r3, r3, #1
 800c0e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f47f af62 	bne.w	800bfae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f009 f99c 	bl	801542c <USB_ReadInterrupts>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c0fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c0fe:	f040 80db 	bne.w	800c2b8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4618      	mov	r0, r3
 800c108:	f009 f9bd 	bl	8015486 <USB_ReadDevAllInEpInterrupt>
 800c10c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800c10e:	2300      	movs	r3, #0
 800c110:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800c112:	e0cd      	b.n	800c2b0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c116:	f003 0301 	and.w	r3, r3, #1
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f000 80c2 	beq.w	800c2a4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c126:	b2d2      	uxtb	r2, r2
 800c128:	4611      	mov	r1, r2
 800c12a:	4618      	mov	r0, r3
 800c12c:	f009 f9e3 	bl	80154f6 <USB_ReadDevInEPInterrupt>
 800c130:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	f003 0301 	and.w	r3, r3, #1
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d057      	beq.n	800c1ec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c13e:	f003 030f 	and.w	r3, r3, #15
 800c142:	2201      	movs	r2, #1
 800c144:	fa02 f303 	lsl.w	r3, r2, r3
 800c148:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c14a:	69fb      	ldr	r3, [r7, #28]
 800c14c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c150:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	43db      	mvns	r3, r3
 800c156:	69f9      	ldr	r1, [r7, #28]
 800c158:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c15c:	4013      	ands	r3, r2
 800c15e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c162:	015a      	lsls	r2, r3, #5
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	4413      	add	r3, r2
 800c168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c16c:	461a      	mov	r2, r3
 800c16e:	2301      	movs	r3, #1
 800c170:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	799b      	ldrb	r3, [r3, #6]
 800c176:	2b01      	cmp	r3, #1
 800c178:	d132      	bne.n	800c1e0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c17a:	6879      	ldr	r1, [r7, #4]
 800c17c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c17e:	4613      	mov	r3, r2
 800c180:	00db      	lsls	r3, r3, #3
 800c182:	4413      	add	r3, r2
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	440b      	add	r3, r1
 800c188:	3320      	adds	r3, #32
 800c18a:	6819      	ldr	r1, [r3, #0]
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c190:	4613      	mov	r3, r2
 800c192:	00db      	lsls	r3, r3, #3
 800c194:	4413      	add	r3, r2
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	4403      	add	r3, r0
 800c19a:	331c      	adds	r3, #28
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4419      	add	r1, r3
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1a4:	4613      	mov	r3, r2
 800c1a6:	00db      	lsls	r3, r3, #3
 800c1a8:	4413      	add	r3, r2
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	4403      	add	r3, r0
 800c1ae:	3320      	adds	r3, #32
 800c1b0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d113      	bne.n	800c1e0 <HAL_PCD_IRQHandler+0x3a2>
 800c1b8:	6879      	ldr	r1, [r7, #4]
 800c1ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1bc:	4613      	mov	r3, r2
 800c1be:	00db      	lsls	r3, r3, #3
 800c1c0:	4413      	add	r3, r2
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	440b      	add	r3, r1
 800c1c6:	3324      	adds	r3, #36	@ 0x24
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d108      	bne.n	800c1e0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6818      	ldr	r0, [r3, #0]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c1d8:	461a      	mov	r2, r3
 800c1da:	2101      	movs	r1, #1
 800c1dc:	f009 f9ec 	bl	80155b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f00b ff2b 	bl	8018042 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	f003 0308 	and.w	r3, r3, #8
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d008      	beq.n	800c208 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f8:	015a      	lsls	r2, r3, #5
 800c1fa:	69fb      	ldr	r3, [r7, #28]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c202:	461a      	mov	r2, r3
 800c204:	2308      	movs	r3, #8
 800c206:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	f003 0310 	and.w	r3, r3, #16
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d008      	beq.n	800c224 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c214:	015a      	lsls	r2, r3, #5
 800c216:	69fb      	ldr	r3, [r7, #28]
 800c218:	4413      	add	r3, r2
 800c21a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c21e:	461a      	mov	r2, r3
 800c220:	2310      	movs	r3, #16
 800c222:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d008      	beq.n	800c240 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c230:	015a      	lsls	r2, r3, #5
 800c232:	69fb      	ldr	r3, [r7, #28]
 800c234:	4413      	add	r3, r2
 800c236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c23a:	461a      	mov	r2, r3
 800c23c:	2340      	movs	r3, #64	@ 0x40
 800c23e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	f003 0302 	and.w	r3, r3, #2
 800c246:	2b00      	cmp	r3, #0
 800c248:	d023      	beq.n	800c292 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800c24a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c24c:	6a38      	ldr	r0, [r7, #32]
 800c24e:	f008 f9cb 	bl	80145e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800c252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c254:	4613      	mov	r3, r2
 800c256:	00db      	lsls	r3, r3, #3
 800c258:	4413      	add	r3, r2
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	3310      	adds	r3, #16
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	4413      	add	r3, r2
 800c262:	3304      	adds	r3, #4
 800c264:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	78db      	ldrb	r3, [r3, #3]
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d108      	bne.n	800c280 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	2200      	movs	r2, #0
 800c272:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c276:	b2db      	uxtb	r3, r3
 800c278:	4619      	mov	r1, r3
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f00b ff78 	bl	8018170 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c282:	015a      	lsls	r2, r3, #5
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	4413      	add	r3, r2
 800c288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c28c:	461a      	mov	r2, r3
 800c28e:	2302      	movs	r3, #2
 800c290:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d003      	beq.n	800c2a4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c29c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 fcea 	bl	800cc78 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ac:	085b      	lsrs	r3, r3, #1
 800c2ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	f47f af2e 	bne.w	800c114 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f009 f8b5 	bl	801542c <USB_ReadInterrupts>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c2c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c2cc:	d122      	bne.n	800c314 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c2ce:	69fb      	ldr	r3, [r7, #28]
 800c2d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	69fa      	ldr	r2, [r7, #28]
 800c2d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c2dc:	f023 0301 	bic.w	r3, r3, #1
 800c2e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d108      	bne.n	800c2fe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 fef4 	bl	800d0e4 <HAL_PCDEx_LPM_Callback>
 800c2fc:	e002      	b.n	800c304 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f00b ff16 	bl	8018130 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	695a      	ldr	r2, [r3, #20]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800c312:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4618      	mov	r0, r3
 800c31a:	f009 f887 	bl	801542c <USB_ReadInterrupts>
 800c31e:	4603      	mov	r3, r0
 800c320:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c324:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c328:	d112      	bne.n	800c350 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c32a:	69fb      	ldr	r3, [r7, #28]
 800c32c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c330:	689b      	ldr	r3, [r3, #8]
 800c332:	f003 0301 	and.w	r3, r3, #1
 800c336:	2b01      	cmp	r3, #1
 800c338:	d102      	bne.n	800c340 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f00b fed2 	bl	80180e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	695a      	ldr	r2, [r3, #20]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800c34e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4618      	mov	r0, r3
 800c356:	f009 f869 	bl	801542c <USB_ReadInterrupts>
 800c35a:	4603      	mov	r3, r0
 800c35c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c360:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c364:	d121      	bne.n	800c3aa <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	695a      	ldr	r2, [r3, #20]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800c374:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d111      	bne.n	800c3a4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2201      	movs	r2, #1
 800c384:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c38e:	089b      	lsrs	r3, r3, #2
 800c390:	f003 020f 	and.w	r2, r3, #15
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c39a:	2101      	movs	r1, #1
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 fea1 	bl	800d0e4 <HAL_PCDEx_LPM_Callback>
 800c3a2:	e002      	b.n	800c3aa <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f00b fe9d 	bl	80180e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f009 f83c 	bl	801542c <USB_ReadInterrupts>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c3ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c3be:	f040 80b7 	bne.w	800c530 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c3c2:	69fb      	ldr	r3, [r7, #28]
 800c3c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	69fa      	ldr	r2, [r7, #28]
 800c3cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c3d0:	f023 0301 	bic.w	r3, r3, #1
 800c3d4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2110      	movs	r1, #16
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f008 f903 	bl	80145e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c3e6:	e046      	b.n	800c476 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3ea:	015a      	lsls	r2, r3, #5
 800c3ec:	69fb      	ldr	r3, [r7, #28]
 800c3ee:	4413      	add	r3, r2
 800c3f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c3fa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3fe:	015a      	lsls	r2, r3, #5
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	4413      	add	r3, r2
 800c404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c40c:	0151      	lsls	r1, r2, #5
 800c40e:	69fa      	ldr	r2, [r7, #28]
 800c410:	440a      	add	r2, r1
 800c412:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c416:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c41a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c41e:	015a      	lsls	r2, r3, #5
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	4413      	add	r3, r2
 800c424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c428:	461a      	mov	r2, r3
 800c42a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c42e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c432:	015a      	lsls	r2, r3, #5
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	4413      	add	r3, r2
 800c438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c440:	0151      	lsls	r1, r2, #5
 800c442:	69fa      	ldr	r2, [r7, #28]
 800c444:	440a      	add	r2, r1
 800c446:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c44a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c44e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c452:	015a      	lsls	r2, r3, #5
 800c454:	69fb      	ldr	r3, [r7, #28]
 800c456:	4413      	add	r3, r2
 800c458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c460:	0151      	lsls	r1, r2, #5
 800c462:	69fa      	ldr	r2, [r7, #28]
 800c464:	440a      	add	r2, r1
 800c466:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c46a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c46e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c472:	3301      	adds	r3, #1
 800c474:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	791b      	ldrb	r3, [r3, #4]
 800c47a:	461a      	mov	r2, r3
 800c47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c47e:	4293      	cmp	r3, r2
 800c480:	d3b2      	bcc.n	800c3e8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c482:	69fb      	ldr	r3, [r7, #28]
 800c484:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c488:	69db      	ldr	r3, [r3, #28]
 800c48a:	69fa      	ldr	r2, [r7, #28]
 800c48c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c490:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800c494:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	7bdb      	ldrb	r3, [r3, #15]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d016      	beq.n	800c4cc <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c4a8:	69fa      	ldr	r2, [r7, #28]
 800c4aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c4ae:	f043 030b 	orr.w	r3, r3, #11
 800c4b2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c4b6:	69fb      	ldr	r3, [r7, #28]
 800c4b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4be:	69fa      	ldr	r2, [r7, #28]
 800c4c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c4c4:	f043 030b 	orr.w	r3, r3, #11
 800c4c8:	6453      	str	r3, [r2, #68]	@ 0x44
 800c4ca:	e015      	b.n	800c4f8 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4d2:	695a      	ldr	r2, [r3, #20]
 800c4d4:	69fb      	ldr	r3, [r7, #28]
 800c4d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4da:	4619      	mov	r1, r3
 800c4dc:	f242 032b 	movw	r3, #8235	@ 0x202b
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4ea:	691b      	ldr	r3, [r3, #16]
 800c4ec:	69fa      	ldr	r2, [r7, #28]
 800c4ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c4f2:	f043 030b 	orr.w	r3, r3, #11
 800c4f6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	69fa      	ldr	r2, [r7, #28]
 800c502:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c506:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c50a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6818      	ldr	r0, [r3, #0]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c51a:	461a      	mov	r2, r3
 800c51c:	f009 f84c 	bl	80155b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	695a      	ldr	r2, [r3, #20]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800c52e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4618      	mov	r0, r3
 800c536:	f008 ff79 	bl	801542c <USB_ReadInterrupts>
 800c53a:	4603      	mov	r3, r0
 800c53c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c540:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c544:	d123      	bne.n	800c58e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4618      	mov	r0, r3
 800c54c:	f009 f810 	bl	8015570 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4618      	mov	r0, r3
 800c556:	f008 f8c0 	bl	80146da <USB_GetDevSpeed>
 800c55a:	4603      	mov	r3, r0
 800c55c:	461a      	mov	r2, r3
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681c      	ldr	r4, [r3, #0]
 800c566:	f001 fd9d 	bl	800e0a4 <HAL_RCC_GetHCLKFreq>
 800c56a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c570:	461a      	mov	r2, r3
 800c572:	4620      	mov	r0, r4
 800c574:	f007 fdca 	bl	801410c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f00b fd8a 	bl	8018092 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	695a      	ldr	r2, [r3, #20]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800c58c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4618      	mov	r0, r3
 800c594:	f008 ff4a 	bl	801542c <USB_ReadInterrupts>
 800c598:	4603      	mov	r3, r0
 800c59a:	f003 0308 	and.w	r3, r3, #8
 800c59e:	2b08      	cmp	r3, #8
 800c5a0:	d10a      	bne.n	800c5b8 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f00b fd67 	bl	8018076 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	695a      	ldr	r2, [r3, #20]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f002 0208 	and.w	r2, r2, #8
 800c5b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f008 ff35 	bl	801542c <USB_ReadInterrupts>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5c8:	2b80      	cmp	r3, #128	@ 0x80
 800c5ca:	d123      	bne.n	800c614 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800c5cc:	6a3b      	ldr	r3, [r7, #32]
 800c5ce:	699b      	ldr	r3, [r3, #24]
 800c5d0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c5d4:	6a3b      	ldr	r3, [r7, #32]
 800c5d6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c5d8:	2301      	movs	r3, #1
 800c5da:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5dc:	e014      	b.n	800c608 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800c5de:	6879      	ldr	r1, [r7, #4]
 800c5e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5e2:	4613      	mov	r3, r2
 800c5e4:	00db      	lsls	r3, r3, #3
 800c5e6:	4413      	add	r3, r2
 800c5e8:	009b      	lsls	r3, r3, #2
 800c5ea:	440b      	add	r3, r1
 800c5ec:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d105      	bne.n	800c602 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800c5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 fb0a 	bl	800cc16 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c604:	3301      	adds	r3, #1
 800c606:	627b      	str	r3, [r7, #36]	@ 0x24
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	791b      	ldrb	r3, [r3, #4]
 800c60c:	461a      	mov	r2, r3
 800c60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c610:	4293      	cmp	r3, r2
 800c612:	d3e4      	bcc.n	800c5de <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4618      	mov	r0, r3
 800c61a:	f008 ff07 	bl	801542c <USB_ReadInterrupts>
 800c61e:	4603      	mov	r3, r0
 800c620:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c624:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c628:	d13c      	bne.n	800c6a4 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c62a:	2301      	movs	r3, #1
 800c62c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c62e:	e02b      	b.n	800c688 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800c630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c632:	015a      	lsls	r2, r3, #5
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	4413      	add	r3, r2
 800c638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c640:	6879      	ldr	r1, [r7, #4]
 800c642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c644:	4613      	mov	r3, r2
 800c646:	00db      	lsls	r3, r3, #3
 800c648:	4413      	add	r3, r2
 800c64a:	009b      	lsls	r3, r3, #2
 800c64c:	440b      	add	r3, r1
 800c64e:	3318      	adds	r3, #24
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	2b01      	cmp	r3, #1
 800c654:	d115      	bne.n	800c682 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800c656:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c658:	2b00      	cmp	r3, #0
 800c65a:	da12      	bge.n	800c682 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800c65c:	6879      	ldr	r1, [r7, #4]
 800c65e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c660:	4613      	mov	r3, r2
 800c662:	00db      	lsls	r3, r3, #3
 800c664:	4413      	add	r3, r2
 800c666:	009b      	lsls	r3, r3, #2
 800c668:	440b      	add	r3, r1
 800c66a:	3317      	adds	r3, #23
 800c66c:	2201      	movs	r2, #1
 800c66e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800c670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c672:	b2db      	uxtb	r3, r3
 800c674:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	4619      	mov	r1, r3
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f000 faca 	bl	800cc16 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c684:	3301      	adds	r3, #1
 800c686:	627b      	str	r3, [r7, #36]	@ 0x24
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	791b      	ldrb	r3, [r3, #4]
 800c68c:	461a      	mov	r2, r3
 800c68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c690:	4293      	cmp	r3, r2
 800c692:	d3cd      	bcc.n	800c630 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	695a      	ldr	r2, [r3, #20]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800c6a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f008 febf 	bl	801542c <USB_ReadInterrupts>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c6b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c6b8:	d156      	bne.n	800c768 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6be:	e045      	b.n	800c74c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800c6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c2:	015a      	lsls	r2, r3, #5
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c6d0:	6879      	ldr	r1, [r7, #4]
 800c6d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6d4:	4613      	mov	r3, r2
 800c6d6:	00db      	lsls	r3, r3, #3
 800c6d8:	4413      	add	r3, r2
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	440b      	add	r3, r1
 800c6de:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d12e      	bne.n	800c746 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c6e8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	da2b      	bge.n	800c746 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	0c1a      	lsrs	r2, r3, #16
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800c6f8:	4053      	eors	r3, r2
 800c6fa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d121      	bne.n	800c746 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800c702:	6879      	ldr	r1, [r7, #4]
 800c704:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c706:	4613      	mov	r3, r2
 800c708:	00db      	lsls	r3, r3, #3
 800c70a:	4413      	add	r3, r2
 800c70c:	009b      	lsls	r3, r3, #2
 800c70e:	440b      	add	r3, r1
 800c710:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c714:	2201      	movs	r2, #1
 800c716:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800c718:	6a3b      	ldr	r3, [r7, #32]
 800c71a:	699b      	ldr	r3, [r3, #24]
 800c71c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c720:	6a3b      	ldr	r3, [r7, #32]
 800c722:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800c724:	6a3b      	ldr	r3, [r7, #32]
 800c726:	695b      	ldr	r3, [r3, #20]
 800c728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d10a      	bne.n	800c746 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	69fa      	ldr	r2, [r7, #28]
 800c73a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c73e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c742:	6053      	str	r3, [r2, #4]
            break;
 800c744:	e008      	b.n	800c758 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c748:	3301      	adds	r3, #1
 800c74a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	791b      	ldrb	r3, [r3, #4]
 800c750:	461a      	mov	r2, r3
 800c752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c754:	4293      	cmp	r3, r2
 800c756:	d3b3      	bcc.n	800c6c0 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	695a      	ldr	r2, [r3, #20]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800c766:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4618      	mov	r0, r3
 800c76e:	f008 fe5d 	bl	801542c <USB_ReadInterrupts>
 800c772:	4603      	mov	r3, r0
 800c774:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c77c:	d10a      	bne.n	800c794 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f00b fd08 	bl	8018194 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	695a      	ldr	r2, [r3, #20]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800c792:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4618      	mov	r0, r3
 800c79a:	f008 fe47 	bl	801542c <USB_ReadInterrupts>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	f003 0304 	and.w	r3, r3, #4
 800c7a4:	2b04      	cmp	r3, #4
 800c7a6:	d115      	bne.n	800c7d4 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c7b0:	69bb      	ldr	r3, [r7, #24]
 800c7b2:	f003 0304 	and.w	r3, r3, #4
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d002      	beq.n	800c7c0 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f00b fcf8 	bl	80181b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	6859      	ldr	r1, [r3, #4]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	69ba      	ldr	r2, [r7, #24]
 800c7cc:	430a      	orrs	r2, r1
 800c7ce:	605a      	str	r2, [r3, #4]
 800c7d0:	e000      	b.n	800c7d4 <HAL_PCD_IRQHandler+0x996>
      return;
 800c7d2:	bf00      	nop
    }
  }
}
 800c7d4:	3734      	adds	r7, #52	@ 0x34
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd90      	pop	{r4, r7, pc}

0800c7da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c7da:	b580      	push	{r7, lr}
 800c7dc:	b082      	sub	sp, #8
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d101      	bne.n	800c7f4 <HAL_PCD_SetAddress+0x1a>
 800c7f0:	2302      	movs	r3, #2
 800c7f2:	e012      	b.n	800c81a <HAL_PCD_SetAddress+0x40>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	78fa      	ldrb	r2, [r7, #3]
 800c800:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	78fa      	ldrb	r2, [r7, #3]
 800c808:	4611      	mov	r1, r2
 800c80a:	4618      	mov	r0, r3
 800c80c:	f008 fda6 	bl	801535c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c818:	2300      	movs	r3, #0
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3708      	adds	r7, #8
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}

0800c822 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b084      	sub	sp, #16
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
 800c82a:	4608      	mov	r0, r1
 800c82c:	4611      	mov	r1, r2
 800c82e:	461a      	mov	r2, r3
 800c830:	4603      	mov	r3, r0
 800c832:	70fb      	strb	r3, [r7, #3]
 800c834:	460b      	mov	r3, r1
 800c836:	803b      	strh	r3, [r7, #0]
 800c838:	4613      	mov	r3, r2
 800c83a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800c83c:	2300      	movs	r3, #0
 800c83e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c840:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c844:	2b00      	cmp	r3, #0
 800c846:	da0f      	bge.n	800c868 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c848:	78fb      	ldrb	r3, [r7, #3]
 800c84a:	f003 020f 	and.w	r2, r3, #15
 800c84e:	4613      	mov	r3, r2
 800c850:	00db      	lsls	r3, r3, #3
 800c852:	4413      	add	r3, r2
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	3310      	adds	r3, #16
 800c858:	687a      	ldr	r2, [r7, #4]
 800c85a:	4413      	add	r3, r2
 800c85c:	3304      	adds	r3, #4
 800c85e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2201      	movs	r2, #1
 800c864:	705a      	strb	r2, [r3, #1]
 800c866:	e00f      	b.n	800c888 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c868:	78fb      	ldrb	r3, [r7, #3]
 800c86a:	f003 020f 	and.w	r2, r3, #15
 800c86e:	4613      	mov	r3, r2
 800c870:	00db      	lsls	r3, r3, #3
 800c872:	4413      	add	r3, r2
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	4413      	add	r3, r2
 800c87e:	3304      	adds	r3, #4
 800c880:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2200      	movs	r2, #0
 800c886:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c888:	78fb      	ldrb	r3, [r7, #3]
 800c88a:	f003 030f 	and.w	r3, r3, #15
 800c88e:	b2da      	uxtb	r2, r3
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800c894:	883b      	ldrh	r3, [r7, #0]
 800c896:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	78ba      	ldrb	r2, [r7, #2]
 800c8a2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	785b      	ldrb	r3, [r3, #1]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d004      	beq.n	800c8b6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c8b6:	78bb      	ldrb	r3, [r7, #2]
 800c8b8:	2b02      	cmp	r3, #2
 800c8ba:	d102      	bne.n	800c8c2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d101      	bne.n	800c8d0 <HAL_PCD_EP_Open+0xae>
 800c8cc:	2302      	movs	r3, #2
 800c8ce:	e00e      	b.n	800c8ee <HAL_PCD_EP_Open+0xcc>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	68f9      	ldr	r1, [r7, #12]
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f007 ff20 	bl	8014724 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800c8ec:	7afb      	ldrb	r3, [r7, #11]
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3710      	adds	r7, #16
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}

0800c8f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	b084      	sub	sp, #16
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
 800c8fe:	460b      	mov	r3, r1
 800c900:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c902:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c906:	2b00      	cmp	r3, #0
 800c908:	da0f      	bge.n	800c92a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c90a:	78fb      	ldrb	r3, [r7, #3]
 800c90c:	f003 020f 	and.w	r2, r3, #15
 800c910:	4613      	mov	r3, r2
 800c912:	00db      	lsls	r3, r3, #3
 800c914:	4413      	add	r3, r2
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	3310      	adds	r3, #16
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	4413      	add	r3, r2
 800c91e:	3304      	adds	r3, #4
 800c920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2201      	movs	r2, #1
 800c926:	705a      	strb	r2, [r3, #1]
 800c928:	e00f      	b.n	800c94a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c92a:	78fb      	ldrb	r3, [r7, #3]
 800c92c:	f003 020f 	and.w	r2, r3, #15
 800c930:	4613      	mov	r3, r2
 800c932:	00db      	lsls	r3, r3, #3
 800c934:	4413      	add	r3, r2
 800c936:	009b      	lsls	r3, r3, #2
 800c938:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	4413      	add	r3, r2
 800c940:	3304      	adds	r3, #4
 800c942:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2200      	movs	r2, #0
 800c948:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c94a:	78fb      	ldrb	r3, [r7, #3]
 800c94c:	f003 030f 	and.w	r3, r3, #15
 800c950:	b2da      	uxtb	r2, r3
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c95c:	2b01      	cmp	r3, #1
 800c95e:	d101      	bne.n	800c964 <HAL_PCD_EP_Close+0x6e>
 800c960:	2302      	movs	r3, #2
 800c962:	e00e      	b.n	800c982 <HAL_PCD_EP_Close+0x8c>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2201      	movs	r2, #1
 800c968:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	68f9      	ldr	r1, [r7, #12]
 800c972:	4618      	mov	r0, r3
 800c974:	f007 ff5e 	bl	8014834 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2200      	movs	r2, #0
 800c97c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800c980:	2300      	movs	r3, #0
}
 800c982:	4618      	mov	r0, r3
 800c984:	3710      	adds	r7, #16
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}

0800c98a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c98a:	b580      	push	{r7, lr}
 800c98c:	b086      	sub	sp, #24
 800c98e:	af00      	add	r7, sp, #0
 800c990:	60f8      	str	r0, [r7, #12]
 800c992:	607a      	str	r2, [r7, #4]
 800c994:	603b      	str	r3, [r7, #0]
 800c996:	460b      	mov	r3, r1
 800c998:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c99a:	7afb      	ldrb	r3, [r7, #11]
 800c99c:	f003 020f 	and.w	r2, r3, #15
 800c9a0:	4613      	mov	r3, r2
 800c9a2:	00db      	lsls	r3, r3, #3
 800c9a4:	4413      	add	r3, r2
 800c9a6:	009b      	lsls	r3, r3, #2
 800c9a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c9ac:	68fa      	ldr	r2, [r7, #12]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	3304      	adds	r3, #4
 800c9b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	687a      	ldr	r2, [r7, #4]
 800c9b8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	683a      	ldr	r2, [r7, #0]
 800c9be:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c9cc:	7afb      	ldrb	r3, [r7, #11]
 800c9ce:	f003 030f 	and.w	r3, r3, #15
 800c9d2:	b2da      	uxtb	r2, r3
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	799b      	ldrb	r3, [r3, #6]
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d102      	bne.n	800c9e6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	6818      	ldr	r0, [r3, #0]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	799b      	ldrb	r3, [r3, #6]
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	6979      	ldr	r1, [r7, #20]
 800c9f2:	f007 fffb 	bl	80149ec <USB_EPStartXfer>

  return HAL_OK;
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3718      	adds	r7, #24
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b083      	sub	sp, #12
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	460b      	mov	r3, r1
 800ca0a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ca0c:	78fb      	ldrb	r3, [r7, #3]
 800ca0e:	f003 020f 	and.w	r2, r3, #15
 800ca12:	6879      	ldr	r1, [r7, #4]
 800ca14:	4613      	mov	r3, r2
 800ca16:	00db      	lsls	r3, r3, #3
 800ca18:	4413      	add	r3, r2
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	440b      	add	r3, r1
 800ca1e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800ca22:	681b      	ldr	r3, [r3, #0]
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	370c      	adds	r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b086      	sub	sp, #24
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	607a      	str	r2, [r7, #4]
 800ca3a:	603b      	str	r3, [r7, #0]
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ca40:	7afb      	ldrb	r3, [r7, #11]
 800ca42:	f003 020f 	and.w	r2, r3, #15
 800ca46:	4613      	mov	r3, r2
 800ca48:	00db      	lsls	r3, r3, #3
 800ca4a:	4413      	add	r3, r2
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	3310      	adds	r3, #16
 800ca50:	68fa      	ldr	r2, [r7, #12]
 800ca52:	4413      	add	r3, r2
 800ca54:	3304      	adds	r3, #4
 800ca56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	683a      	ldr	r2, [r7, #0]
 800ca62:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	2200      	movs	r2, #0
 800ca68:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ca70:	7afb      	ldrb	r3, [r7, #11]
 800ca72:	f003 030f 	and.w	r3, r3, #15
 800ca76:	b2da      	uxtb	r2, r3
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	799b      	ldrb	r3, [r3, #6]
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d102      	bne.n	800ca8a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ca84:	687a      	ldr	r2, [r7, #4]
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	6818      	ldr	r0, [r3, #0]
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	799b      	ldrb	r3, [r3, #6]
 800ca92:	461a      	mov	r2, r3
 800ca94:	6979      	ldr	r1, [r7, #20]
 800ca96:	f007 ffa9 	bl	80149ec <USB_EPStartXfer>

  return HAL_OK;
 800ca9a:	2300      	movs	r3, #0
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3718      	adds	r7, #24
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	460b      	mov	r3, r1
 800caae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800cab0:	78fb      	ldrb	r3, [r7, #3]
 800cab2:	f003 030f 	and.w	r3, r3, #15
 800cab6:	687a      	ldr	r2, [r7, #4]
 800cab8:	7912      	ldrb	r2, [r2, #4]
 800caba:	4293      	cmp	r3, r2
 800cabc:	d901      	bls.n	800cac2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cabe:	2301      	movs	r3, #1
 800cac0:	e04f      	b.n	800cb62 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cac2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	da0f      	bge.n	800caea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800caca:	78fb      	ldrb	r3, [r7, #3]
 800cacc:	f003 020f 	and.w	r2, r3, #15
 800cad0:	4613      	mov	r3, r2
 800cad2:	00db      	lsls	r3, r3, #3
 800cad4:	4413      	add	r3, r2
 800cad6:	009b      	lsls	r3, r3, #2
 800cad8:	3310      	adds	r3, #16
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	4413      	add	r3, r2
 800cade:	3304      	adds	r3, #4
 800cae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	2201      	movs	r2, #1
 800cae6:	705a      	strb	r2, [r3, #1]
 800cae8:	e00d      	b.n	800cb06 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800caea:	78fa      	ldrb	r2, [r7, #3]
 800caec:	4613      	mov	r3, r2
 800caee:	00db      	lsls	r3, r3, #3
 800caf0:	4413      	add	r3, r2
 800caf2:	009b      	lsls	r3, r3, #2
 800caf4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	4413      	add	r3, r2
 800cafc:	3304      	adds	r3, #4
 800cafe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2200      	movs	r2, #0
 800cb04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2201      	movs	r2, #1
 800cb0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cb0c:	78fb      	ldrb	r3, [r7, #3]
 800cb0e:	f003 030f 	and.w	r3, r3, #15
 800cb12:	b2da      	uxtb	r2, r3
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d101      	bne.n	800cb26 <HAL_PCD_EP_SetStall+0x82>
 800cb22:	2302      	movs	r3, #2
 800cb24:	e01d      	b.n	800cb62 <HAL_PCD_EP_SetStall+0xbe>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2201      	movs	r2, #1
 800cb2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	68f9      	ldr	r1, [r7, #12]
 800cb34:	4618      	mov	r0, r3
 800cb36:	f008 fb3d 	bl	80151b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cb3a:	78fb      	ldrb	r3, [r7, #3]
 800cb3c:	f003 030f 	and.w	r3, r3, #15
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d109      	bne.n	800cb58 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6818      	ldr	r0, [r3, #0]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	7999      	ldrb	r1, [r3, #6]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cb52:	461a      	mov	r2, r3
 800cb54:	f008 fd30 	bl	80155b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cb60:	2300      	movs	r3, #0
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3710      	adds	r7, #16
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b084      	sub	sp, #16
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
 800cb72:	460b      	mov	r3, r1
 800cb74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cb76:	78fb      	ldrb	r3, [r7, #3]
 800cb78:	f003 030f 	and.w	r3, r3, #15
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	7912      	ldrb	r2, [r2, #4]
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d901      	bls.n	800cb88 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800cb84:	2301      	movs	r3, #1
 800cb86:	e042      	b.n	800cc0e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cb88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	da0f      	bge.n	800cbb0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb90:	78fb      	ldrb	r3, [r7, #3]
 800cb92:	f003 020f 	and.w	r2, r3, #15
 800cb96:	4613      	mov	r3, r2
 800cb98:	00db      	lsls	r3, r3, #3
 800cb9a:	4413      	add	r3, r2
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	3310      	adds	r3, #16
 800cba0:	687a      	ldr	r2, [r7, #4]
 800cba2:	4413      	add	r3, r2
 800cba4:	3304      	adds	r3, #4
 800cba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2201      	movs	r2, #1
 800cbac:	705a      	strb	r2, [r3, #1]
 800cbae:	e00f      	b.n	800cbd0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cbb0:	78fb      	ldrb	r3, [r7, #3]
 800cbb2:	f003 020f 	and.w	r2, r3, #15
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	00db      	lsls	r3, r3, #3
 800cbba:	4413      	add	r3, r2
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cbc2:	687a      	ldr	r2, [r7, #4]
 800cbc4:	4413      	add	r3, r2
 800cbc6:	3304      	adds	r3, #4
 800cbc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cbd6:	78fb      	ldrb	r3, [r7, #3]
 800cbd8:	f003 030f 	and.w	r3, r3, #15
 800cbdc:	b2da      	uxtb	r2, r3
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d101      	bne.n	800cbf0 <HAL_PCD_EP_ClrStall+0x86>
 800cbec:	2302      	movs	r3, #2
 800cbee:	e00e      	b.n	800cc0e <HAL_PCD_EP_ClrStall+0xa4>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	68f9      	ldr	r1, [r7, #12]
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f008 fb46 	bl	8015290 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2200      	movs	r2, #0
 800cc08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cc0c:	2300      	movs	r3, #0
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3710      	adds	r7, #16
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cc16:	b580      	push	{r7, lr}
 800cc18:	b084      	sub	sp, #16
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
 800cc1e:	460b      	mov	r3, r1
 800cc20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800cc22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	da0c      	bge.n	800cc44 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cc2a:	78fb      	ldrb	r3, [r7, #3]
 800cc2c:	f003 020f 	and.w	r2, r3, #15
 800cc30:	4613      	mov	r3, r2
 800cc32:	00db      	lsls	r3, r3, #3
 800cc34:	4413      	add	r3, r2
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	3310      	adds	r3, #16
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	4413      	add	r3, r2
 800cc3e:	3304      	adds	r3, #4
 800cc40:	60fb      	str	r3, [r7, #12]
 800cc42:	e00c      	b.n	800cc5e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cc44:	78fb      	ldrb	r3, [r7, #3]
 800cc46:	f003 020f 	and.w	r2, r3, #15
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	00db      	lsls	r3, r3, #3
 800cc4e:	4413      	add	r3, r2
 800cc50:	009b      	lsls	r3, r3, #2
 800cc52:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cc56:	687a      	ldr	r2, [r7, #4]
 800cc58:	4413      	add	r3, r2
 800cc5a:	3304      	adds	r3, #4
 800cc5c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	68f9      	ldr	r1, [r7, #12]
 800cc64:	4618      	mov	r0, r3
 800cc66:	f008 f965 	bl	8014f34 <USB_EPStopXfer>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800cc6e:	7afb      	ldrb	r3, [r7, #11]
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3710      	adds	r7, #16
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b08a      	sub	sp, #40	@ 0x28
 800cc7c:	af02      	add	r7, sp, #8
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800cc8c:	683a      	ldr	r2, [r7, #0]
 800cc8e:	4613      	mov	r3, r2
 800cc90:	00db      	lsls	r3, r3, #3
 800cc92:	4413      	add	r3, r2
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	3310      	adds	r3, #16
 800cc98:	687a      	ldr	r2, [r7, #4]
 800cc9a:	4413      	add	r3, r2
 800cc9c:	3304      	adds	r3, #4
 800cc9e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	695a      	ldr	r2, [r3, #20]
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	691b      	ldr	r3, [r3, #16]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d901      	bls.n	800ccb0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800ccac:	2301      	movs	r3, #1
 800ccae:	e06b      	b.n	800cd88 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	691a      	ldr	r2, [r3, #16]
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	695b      	ldr	r3, [r3, #20]
 800ccb8:	1ad3      	subs	r3, r2, r3
 800ccba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	689b      	ldr	r3, [r3, #8]
 800ccc0:	69fa      	ldr	r2, [r7, #28]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d902      	bls.n	800cccc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	3303      	adds	r3, #3
 800ccd0:	089b      	lsrs	r3, r3, #2
 800ccd2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ccd4:	e02a      	b.n	800cd2c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	691a      	ldr	r2, [r3, #16]
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	695b      	ldr	r3, [r3, #20]
 800ccde:	1ad3      	subs	r3, r2, r3
 800cce0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	689b      	ldr	r3, [r3, #8]
 800cce6:	69fa      	ldr	r2, [r7, #28]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d902      	bls.n	800ccf2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	689b      	ldr	r3, [r3, #8]
 800ccf0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	3303      	adds	r3, #3
 800ccf6:	089b      	lsrs	r3, r3, #2
 800ccf8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	68d9      	ldr	r1, [r3, #12]
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	b2da      	uxtb	r2, r3
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cd0a:	9300      	str	r3, [sp, #0]
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	6978      	ldr	r0, [r7, #20]
 800cd10:	f008 f9ba 	bl	8015088 <USB_WritePacket>

    ep->xfer_buff  += len;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	68da      	ldr	r2, [r3, #12]
 800cd18:	69fb      	ldr	r3, [r7, #28]
 800cd1a:	441a      	add	r2, r3
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	695a      	ldr	r2, [r3, #20]
 800cd24:	69fb      	ldr	r3, [r7, #28]
 800cd26:	441a      	add	r2, r3
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	015a      	lsls	r2, r3, #5
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	4413      	add	r3, r2
 800cd34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd38:	699b      	ldr	r3, [r3, #24]
 800cd3a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cd3c:	69ba      	ldr	r2, [r7, #24]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d809      	bhi.n	800cd56 <PCD_WriteEmptyTxFifo+0xde>
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	695a      	ldr	r2, [r3, #20]
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	d203      	bcs.n	800cd56 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	691b      	ldr	r3, [r3, #16]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d1bf      	bne.n	800ccd6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	691a      	ldr	r2, [r3, #16]
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	695b      	ldr	r3, [r3, #20]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d811      	bhi.n	800cd86 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	f003 030f 	and.w	r3, r3, #15
 800cd68:	2201      	movs	r2, #1
 800cd6a:	fa02 f303 	lsl.w	r3, r2, r3
 800cd6e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cd76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	43db      	mvns	r3, r3
 800cd7c:	6939      	ldr	r1, [r7, #16]
 800cd7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cd82:	4013      	ands	r3, r2
 800cd84:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800cd86:	2300      	movs	r3, #0
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3720      	adds	r7, #32
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b088      	sub	sp, #32
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cda0:	69fb      	ldr	r3, [r7, #28]
 800cda2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800cda4:	69fb      	ldr	r3, [r7, #28]
 800cda6:	333c      	adds	r3, #60	@ 0x3c
 800cda8:	3304      	adds	r3, #4
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	015a      	lsls	r2, r3, #5
 800cdb2:	69bb      	ldr	r3, [r7, #24]
 800cdb4:	4413      	add	r3, r2
 800cdb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cdba:	689b      	ldr	r3, [r3, #8]
 800cdbc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	799b      	ldrb	r3, [r3, #6]
 800cdc2:	2b01      	cmp	r3, #1
 800cdc4:	d17b      	bne.n	800cebe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	f003 0308 	and.w	r3, r3, #8
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d015      	beq.n	800cdfc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	4a61      	ldr	r2, [pc, #388]	@ (800cf58 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	f240 80b9 	bls.w	800cf4c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	f000 80b3 	beq.w	800cf4c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	015a      	lsls	r2, r3, #5
 800cdea:	69bb      	ldr	r3, [r7, #24]
 800cdec:	4413      	add	r3, r2
 800cdee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cdf8:	6093      	str	r3, [r2, #8]
 800cdfa:	e0a7      	b.n	800cf4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	f003 0320 	and.w	r3, r3, #32
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d009      	beq.n	800ce1a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	015a      	lsls	r2, r3, #5
 800ce0a:	69bb      	ldr	r3, [r7, #24]
 800ce0c:	4413      	add	r3, r2
 800ce0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce12:	461a      	mov	r2, r3
 800ce14:	2320      	movs	r3, #32
 800ce16:	6093      	str	r3, [r2, #8]
 800ce18:	e098      	b.n	800cf4c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	f040 8093 	bne.w	800cf4c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	4a4b      	ldr	r2, [pc, #300]	@ (800cf58 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d90f      	bls.n	800ce4e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d00a      	beq.n	800ce4e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	015a      	lsls	r2, r3, #5
 800ce3c:	69bb      	ldr	r3, [r7, #24]
 800ce3e:	4413      	add	r3, r2
 800ce40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce44:	461a      	mov	r2, r3
 800ce46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce4a:	6093      	str	r3, [r2, #8]
 800ce4c:	e07e      	b.n	800cf4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800ce4e:	683a      	ldr	r2, [r7, #0]
 800ce50:	4613      	mov	r3, r2
 800ce52:	00db      	lsls	r3, r3, #3
 800ce54:	4413      	add	r3, r2
 800ce56:	009b      	lsls	r3, r3, #2
 800ce58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	4413      	add	r3, r2
 800ce60:	3304      	adds	r3, #4
 800ce62:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	6a1a      	ldr	r2, [r3, #32]
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	0159      	lsls	r1, r3, #5
 800ce6c:	69bb      	ldr	r3, [r7, #24]
 800ce6e:	440b      	add	r3, r1
 800ce70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce74:	691b      	ldr	r3, [r3, #16]
 800ce76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ce7a:	1ad2      	subs	r2, r2, r3
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d114      	bne.n	800ceb0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	691b      	ldr	r3, [r3, #16]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d109      	bne.n	800cea2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6818      	ldr	r0, [r3, #0]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ce98:	461a      	mov	r2, r3
 800ce9a:	2101      	movs	r1, #1
 800ce9c:	f008 fb8c 	bl	80155b8 <USB_EP0_OutStart>
 800cea0:	e006      	b.n	800ceb0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	68da      	ldr	r2, [r3, #12]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	695b      	ldr	r3, [r3, #20]
 800ceaa:	441a      	add	r2, r3
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f00b f8a8 	bl	801800c <HAL_PCD_DataOutStageCallback>
 800cebc:	e046      	b.n	800cf4c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	4a26      	ldr	r2, [pc, #152]	@ (800cf5c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d124      	bne.n	800cf10 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d00a      	beq.n	800cee6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	015a      	lsls	r2, r3, #5
 800ced4:	69bb      	ldr	r3, [r7, #24]
 800ced6:	4413      	add	r3, r2
 800ced8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cedc:	461a      	mov	r2, r3
 800cede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cee2:	6093      	str	r3, [r2, #8]
 800cee4:	e032      	b.n	800cf4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	f003 0320 	and.w	r3, r3, #32
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d008      	beq.n	800cf02 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	015a      	lsls	r2, r3, #5
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	4413      	add	r3, r2
 800cef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cefc:	461a      	mov	r2, r3
 800cefe:	2320      	movs	r3, #32
 800cf00:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	4619      	mov	r1, r3
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f00b f87f 	bl	801800c <HAL_PCD_DataOutStageCallback>
 800cf0e:	e01d      	b.n	800cf4c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d114      	bne.n	800cf40 <PCD_EP_OutXfrComplete_int+0x1b0>
 800cf16:	6879      	ldr	r1, [r7, #4]
 800cf18:	683a      	ldr	r2, [r7, #0]
 800cf1a:	4613      	mov	r3, r2
 800cf1c:	00db      	lsls	r3, r3, #3
 800cf1e:	4413      	add	r3, r2
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	440b      	add	r3, r1
 800cf24:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d108      	bne.n	800cf40 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6818      	ldr	r0, [r3, #0]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cf38:	461a      	mov	r2, r3
 800cf3a:	2100      	movs	r1, #0
 800cf3c:	f008 fb3c 	bl	80155b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	b2db      	uxtb	r3, r3
 800cf44:	4619      	mov	r1, r3
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f00b f860 	bl	801800c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800cf4c:	2300      	movs	r3, #0
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3720      	adds	r7, #32
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	4f54300a 	.word	0x4f54300a
 800cf5c:	4f54310a 	.word	0x4f54310a

0800cf60 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b086      	sub	sp, #24
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	333c      	adds	r3, #60	@ 0x3c
 800cf78:	3304      	adds	r3, #4
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	015a      	lsls	r2, r3, #5
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	4413      	add	r3, r2
 800cf86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf8a:	689b      	ldr	r3, [r3, #8]
 800cf8c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	4a15      	ldr	r2, [pc, #84]	@ (800cfe8 <PCD_EP_OutSetupPacket_int+0x88>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d90e      	bls.n	800cfb4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d009      	beq.n	800cfb4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	015a      	lsls	r2, r3, #5
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	4413      	add	r3, r2
 800cfa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfac:	461a      	mov	r2, r3
 800cfae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cfb2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f00b f817 	bl	8017fe8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	4a0a      	ldr	r2, [pc, #40]	@ (800cfe8 <PCD_EP_OutSetupPacket_int+0x88>)
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	d90c      	bls.n	800cfdc <PCD_EP_OutSetupPacket_int+0x7c>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	799b      	ldrb	r3, [r3, #6]
 800cfc6:	2b01      	cmp	r3, #1
 800cfc8:	d108      	bne.n	800cfdc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6818      	ldr	r0, [r3, #0]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cfd4:	461a      	mov	r2, r3
 800cfd6:	2101      	movs	r1, #1
 800cfd8:	f008 faee 	bl	80155b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800cfdc:	2300      	movs	r3, #0
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3718      	adds	r7, #24
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	4f54300a 	.word	0x4f54300a

0800cfec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b085      	sub	sp, #20
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	460b      	mov	r3, r1
 800cff6:	70fb      	strb	r3, [r7, #3]
 800cff8:	4613      	mov	r3, r2
 800cffa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d002:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d004:	78fb      	ldrb	r3, [r7, #3]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d107      	bne.n	800d01a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d00a:	883b      	ldrh	r3, [r7, #0]
 800d00c:	0419      	lsls	r1, r3, #16
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	68ba      	ldr	r2, [r7, #8]
 800d014:	430a      	orrs	r2, r1
 800d016:	629a      	str	r2, [r3, #40]	@ 0x28
 800d018:	e028      	b.n	800d06c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d020:	0c1b      	lsrs	r3, r3, #16
 800d022:	68ba      	ldr	r2, [r7, #8]
 800d024:	4413      	add	r3, r2
 800d026:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d028:	2300      	movs	r3, #0
 800d02a:	73fb      	strb	r3, [r7, #15]
 800d02c:	e00d      	b.n	800d04a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	7bfb      	ldrb	r3, [r7, #15]
 800d034:	3340      	adds	r3, #64	@ 0x40
 800d036:	009b      	lsls	r3, r3, #2
 800d038:	4413      	add	r3, r2
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	0c1b      	lsrs	r3, r3, #16
 800d03e:	68ba      	ldr	r2, [r7, #8]
 800d040:	4413      	add	r3, r2
 800d042:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d044:	7bfb      	ldrb	r3, [r7, #15]
 800d046:	3301      	adds	r3, #1
 800d048:	73fb      	strb	r3, [r7, #15]
 800d04a:	7bfa      	ldrb	r2, [r7, #15]
 800d04c:	78fb      	ldrb	r3, [r7, #3]
 800d04e:	3b01      	subs	r3, #1
 800d050:	429a      	cmp	r2, r3
 800d052:	d3ec      	bcc.n	800d02e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d054:	883b      	ldrh	r3, [r7, #0]
 800d056:	0418      	lsls	r0, r3, #16
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6819      	ldr	r1, [r3, #0]
 800d05c:	78fb      	ldrb	r3, [r7, #3]
 800d05e:	3b01      	subs	r3, #1
 800d060:	68ba      	ldr	r2, [r7, #8]
 800d062:	4302      	orrs	r2, r0
 800d064:	3340      	adds	r3, #64	@ 0x40
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	440b      	add	r3, r1
 800d06a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d06c:	2300      	movs	r3, #0
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3714      	adds	r7, #20
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr

0800d07a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d07a:	b480      	push	{r7}
 800d07c:	b083      	sub	sp, #12
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
 800d082:	460b      	mov	r3, r1
 800d084:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	887a      	ldrh	r2, [r7, #2]
 800d08c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800d08e:	2300      	movs	r3, #0
}
 800d090:	4618      	mov	r0, r3
 800d092:	370c      	adds	r7, #12
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr

0800d09c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b085      	sub	sp, #20
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	699b      	ldr	r3, [r3, #24]
 800d0be:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d0ca:	4b05      	ldr	r3, [pc, #20]	@ (800d0e0 <HAL_PCDEx_ActivateLPM+0x44>)
 800d0cc:	4313      	orrs	r3, r2
 800d0ce:	68fa      	ldr	r2, [r7, #12]
 800d0d0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800d0d2:	2300      	movs	r3, #0
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3714      	adds	r7, #20
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr
 800d0e0:	10000003 	.word	0x10000003

0800d0e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b083      	sub	sp, #12
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	460b      	mov	r3, r1
 800d0ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d0f0:	bf00      	nop
 800d0f2:	370c      	adds	r7, #12
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr

0800d0fc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d104:	4b19      	ldr	r3, [pc, #100]	@ (800d16c <HAL_PWREx_ConfigSupply+0x70>)
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	f003 0304 	and.w	r3, r3, #4
 800d10c:	2b04      	cmp	r3, #4
 800d10e:	d00a      	beq.n	800d126 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d110:	4b16      	ldr	r3, [pc, #88]	@ (800d16c <HAL_PWREx_ConfigSupply+0x70>)
 800d112:	68db      	ldr	r3, [r3, #12]
 800d114:	f003 0307 	and.w	r3, r3, #7
 800d118:	687a      	ldr	r2, [r7, #4]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d001      	beq.n	800d122 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d11e:	2301      	movs	r3, #1
 800d120:	e01f      	b.n	800d162 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d122:	2300      	movs	r3, #0
 800d124:	e01d      	b.n	800d162 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d126:	4b11      	ldr	r3, [pc, #68]	@ (800d16c <HAL_PWREx_ConfigSupply+0x70>)
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	f023 0207 	bic.w	r2, r3, #7
 800d12e:	490f      	ldr	r1, [pc, #60]	@ (800d16c <HAL_PWREx_ConfigSupply+0x70>)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	4313      	orrs	r3, r2
 800d134:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d136:	f7f6 f9ad 	bl	8003494 <HAL_GetTick>
 800d13a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d13c:	e009      	b.n	800d152 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d13e:	f7f6 f9a9 	bl	8003494 <HAL_GetTick>
 800d142:	4602      	mov	r2, r0
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	1ad3      	subs	r3, r2, r3
 800d148:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d14c:	d901      	bls.n	800d152 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d14e:	2301      	movs	r3, #1
 800d150:	e007      	b.n	800d162 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d152:	4b06      	ldr	r3, [pc, #24]	@ (800d16c <HAL_PWREx_ConfigSupply+0x70>)
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d15a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d15e:	d1ee      	bne.n	800d13e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d160:	2300      	movs	r3, #0
}
 800d162:	4618      	mov	r0, r3
 800d164:	3710      	adds	r7, #16
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	58024800 	.word	0x58024800

0800d170 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800d170:	b480      	push	{r7}
 800d172:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800d174:	4b05      	ldr	r3, [pc, #20]	@ (800d18c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d176:	68db      	ldr	r3, [r3, #12]
 800d178:	4a04      	ldr	r2, [pc, #16]	@ (800d18c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d17a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d17e:	60d3      	str	r3, [r2, #12]
}
 800d180:	bf00      	nop
 800d182:	46bd      	mov	sp, r7
 800d184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d188:	4770      	bx	lr
 800d18a:	bf00      	nop
 800d18c:	58024800 	.word	0x58024800

0800d190 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b08c      	sub	sp, #48	@ 0x30
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d102      	bne.n	800d1a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800d19e:	2301      	movs	r3, #1
 800d1a0:	f000 bc48 	b.w	800da34 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f003 0301 	and.w	r3, r3, #1
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f000 8088 	beq.w	800d2c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d1b2:	4b99      	ldr	r3, [pc, #612]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d1b4:	691b      	ldr	r3, [r3, #16]
 800d1b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d1ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d1bc:	4b96      	ldr	r3, [pc, #600]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d1be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d1c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c4:	2b10      	cmp	r3, #16
 800d1c6:	d007      	beq.n	800d1d8 <HAL_RCC_OscConfig+0x48>
 800d1c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ca:	2b18      	cmp	r3, #24
 800d1cc:	d111      	bne.n	800d1f2 <HAL_RCC_OscConfig+0x62>
 800d1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d0:	f003 0303 	and.w	r3, r3, #3
 800d1d4:	2b02      	cmp	r3, #2
 800d1d6:	d10c      	bne.n	800d1f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d1d8:	4b8f      	ldr	r3, [pc, #572]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d06d      	beq.n	800d2c0 <HAL_RCC_OscConfig+0x130>
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d169      	bne.n	800d2c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	f000 bc21 	b.w	800da34 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1fa:	d106      	bne.n	800d20a <HAL_RCC_OscConfig+0x7a>
 800d1fc:	4b86      	ldr	r3, [pc, #536]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a85      	ldr	r2, [pc, #532]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d206:	6013      	str	r3, [r2, #0]
 800d208:	e02e      	b.n	800d268 <HAL_RCC_OscConfig+0xd8>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d10c      	bne.n	800d22c <HAL_RCC_OscConfig+0x9c>
 800d212:	4b81      	ldr	r3, [pc, #516]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4a80      	ldr	r2, [pc, #512]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d218:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d21c:	6013      	str	r3, [r2, #0]
 800d21e:	4b7e      	ldr	r3, [pc, #504]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4a7d      	ldr	r2, [pc, #500]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d224:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d228:	6013      	str	r3, [r2, #0]
 800d22a:	e01d      	b.n	800d268 <HAL_RCC_OscConfig+0xd8>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d234:	d10c      	bne.n	800d250 <HAL_RCC_OscConfig+0xc0>
 800d236:	4b78      	ldr	r3, [pc, #480]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	4a77      	ldr	r2, [pc, #476]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d23c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d240:	6013      	str	r3, [r2, #0]
 800d242:	4b75      	ldr	r3, [pc, #468]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	4a74      	ldr	r2, [pc, #464]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d24c:	6013      	str	r3, [r2, #0]
 800d24e:	e00b      	b.n	800d268 <HAL_RCC_OscConfig+0xd8>
 800d250:	4b71      	ldr	r3, [pc, #452]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	4a70      	ldr	r2, [pc, #448]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d256:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d25a:	6013      	str	r3, [r2, #0]
 800d25c:	4b6e      	ldr	r3, [pc, #440]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4a6d      	ldr	r2, [pc, #436]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d262:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	685b      	ldr	r3, [r3, #4]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d013      	beq.n	800d298 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d270:	f7f6 f910 	bl	8003494 <HAL_GetTick>
 800d274:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d276:	e008      	b.n	800d28a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d278:	f7f6 f90c 	bl	8003494 <HAL_GetTick>
 800d27c:	4602      	mov	r2, r0
 800d27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d280:	1ad3      	subs	r3, r2, r3
 800d282:	2b64      	cmp	r3, #100	@ 0x64
 800d284:	d901      	bls.n	800d28a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d286:	2303      	movs	r3, #3
 800d288:	e3d4      	b.n	800da34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d28a:	4b63      	ldr	r3, [pc, #396]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d292:	2b00      	cmp	r3, #0
 800d294:	d0f0      	beq.n	800d278 <HAL_RCC_OscConfig+0xe8>
 800d296:	e014      	b.n	800d2c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d298:	f7f6 f8fc 	bl	8003494 <HAL_GetTick>
 800d29c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d29e:	e008      	b.n	800d2b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d2a0:	f7f6 f8f8 	bl	8003494 <HAL_GetTick>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a8:	1ad3      	subs	r3, r2, r3
 800d2aa:	2b64      	cmp	r3, #100	@ 0x64
 800d2ac:	d901      	bls.n	800d2b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d2ae:	2303      	movs	r3, #3
 800d2b0:	e3c0      	b.n	800da34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d2b2:	4b59      	ldr	r3, [pc, #356]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d1f0      	bne.n	800d2a0 <HAL_RCC_OscConfig+0x110>
 800d2be:	e000      	b.n	800d2c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d2c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f003 0302 	and.w	r3, r3, #2
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	f000 80ca 	beq.w	800d464 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d2d0:	4b51      	ldr	r3, [pc, #324]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d2d2:	691b      	ldr	r3, [r3, #16]
 800d2d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d2d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d2da:	4b4f      	ldr	r3, [pc, #316]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d2dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2de:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d2e0:	6a3b      	ldr	r3, [r7, #32]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d007      	beq.n	800d2f6 <HAL_RCC_OscConfig+0x166>
 800d2e6:	6a3b      	ldr	r3, [r7, #32]
 800d2e8:	2b18      	cmp	r3, #24
 800d2ea:	d156      	bne.n	800d39a <HAL_RCC_OscConfig+0x20a>
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	f003 0303 	and.w	r3, r3, #3
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d151      	bne.n	800d39a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d2f6:	4b48      	ldr	r3, [pc, #288]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f003 0304 	and.w	r3, r3, #4
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d005      	beq.n	800d30e <HAL_RCC_OscConfig+0x17e>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	68db      	ldr	r3, [r3, #12]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d101      	bne.n	800d30e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800d30a:	2301      	movs	r3, #1
 800d30c:	e392      	b.n	800da34 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d30e:	4b42      	ldr	r3, [pc, #264]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f023 0219 	bic.w	r2, r3, #25
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	68db      	ldr	r3, [r3, #12]
 800d31a:	493f      	ldr	r1, [pc, #252]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d31c:	4313      	orrs	r3, r2
 800d31e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d320:	f7f6 f8b8 	bl	8003494 <HAL_GetTick>
 800d324:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d326:	e008      	b.n	800d33a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d328:	f7f6 f8b4 	bl	8003494 <HAL_GetTick>
 800d32c:	4602      	mov	r2, r0
 800d32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d330:	1ad3      	subs	r3, r2, r3
 800d332:	2b02      	cmp	r3, #2
 800d334:	d901      	bls.n	800d33a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d336:	2303      	movs	r3, #3
 800d338:	e37c      	b.n	800da34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d33a:	4b37      	ldr	r3, [pc, #220]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f003 0304 	and.w	r3, r3, #4
 800d342:	2b00      	cmp	r3, #0
 800d344:	d0f0      	beq.n	800d328 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d346:	f7f6 f8d5 	bl	80034f4 <HAL_GetREVID>
 800d34a:	4603      	mov	r3, r0
 800d34c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d350:	4293      	cmp	r3, r2
 800d352:	d817      	bhi.n	800d384 <HAL_RCC_OscConfig+0x1f4>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	691b      	ldr	r3, [r3, #16]
 800d358:	2b40      	cmp	r3, #64	@ 0x40
 800d35a:	d108      	bne.n	800d36e <HAL_RCC_OscConfig+0x1de>
 800d35c:	4b2e      	ldr	r3, [pc, #184]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d35e:	685b      	ldr	r3, [r3, #4]
 800d360:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800d364:	4a2c      	ldr	r2, [pc, #176]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d36a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d36c:	e07a      	b.n	800d464 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d36e:	4b2a      	ldr	r3, [pc, #168]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	691b      	ldr	r3, [r3, #16]
 800d37a:	031b      	lsls	r3, r3, #12
 800d37c:	4926      	ldr	r1, [pc, #152]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d37e:	4313      	orrs	r3, r2
 800d380:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d382:	e06f      	b.n	800d464 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d384:	4b24      	ldr	r3, [pc, #144]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	691b      	ldr	r3, [r3, #16]
 800d390:	061b      	lsls	r3, r3, #24
 800d392:	4921      	ldr	r1, [pc, #132]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d394:	4313      	orrs	r3, r2
 800d396:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d398:	e064      	b.n	800d464 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	68db      	ldr	r3, [r3, #12]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d047      	beq.n	800d432 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d3a2:	4b1d      	ldr	r3, [pc, #116]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f023 0219 	bic.w	r2, r3, #25
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	491a      	ldr	r1, [pc, #104]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d3b4:	f7f6 f86e 	bl	8003494 <HAL_GetTick>
 800d3b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d3ba:	e008      	b.n	800d3ce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d3bc:	f7f6 f86a 	bl	8003494 <HAL_GetTick>
 800d3c0:	4602      	mov	r2, r0
 800d3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3c4:	1ad3      	subs	r3, r2, r3
 800d3c6:	2b02      	cmp	r3, #2
 800d3c8:	d901      	bls.n	800d3ce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800d3ca:	2303      	movs	r3, #3
 800d3cc:	e332      	b.n	800da34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d3ce:	4b12      	ldr	r3, [pc, #72]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f003 0304 	and.w	r3, r3, #4
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d0f0      	beq.n	800d3bc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d3da:	f7f6 f88b 	bl	80034f4 <HAL_GetREVID>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d819      	bhi.n	800d41c <HAL_RCC_OscConfig+0x28c>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	691b      	ldr	r3, [r3, #16]
 800d3ec:	2b40      	cmp	r3, #64	@ 0x40
 800d3ee:	d108      	bne.n	800d402 <HAL_RCC_OscConfig+0x272>
 800d3f0:	4b09      	ldr	r3, [pc, #36]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800d3f8:	4a07      	ldr	r2, [pc, #28]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d3fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d3fe:	6053      	str	r3, [r2, #4]
 800d400:	e030      	b.n	800d464 <HAL_RCC_OscConfig+0x2d4>
 800d402:	4b05      	ldr	r3, [pc, #20]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	691b      	ldr	r3, [r3, #16]
 800d40e:	031b      	lsls	r3, r3, #12
 800d410:	4901      	ldr	r1, [pc, #4]	@ (800d418 <HAL_RCC_OscConfig+0x288>)
 800d412:	4313      	orrs	r3, r2
 800d414:	604b      	str	r3, [r1, #4]
 800d416:	e025      	b.n	800d464 <HAL_RCC_OscConfig+0x2d4>
 800d418:	58024400 	.word	0x58024400
 800d41c:	4b9a      	ldr	r3, [pc, #616]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	691b      	ldr	r3, [r3, #16]
 800d428:	061b      	lsls	r3, r3, #24
 800d42a:	4997      	ldr	r1, [pc, #604]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d42c:	4313      	orrs	r3, r2
 800d42e:	604b      	str	r3, [r1, #4]
 800d430:	e018      	b.n	800d464 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d432:	4b95      	ldr	r3, [pc, #596]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4a94      	ldr	r2, [pc, #592]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d438:	f023 0301 	bic.w	r3, r3, #1
 800d43c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d43e:	f7f6 f829 	bl	8003494 <HAL_GetTick>
 800d442:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d444:	e008      	b.n	800d458 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d446:	f7f6 f825 	bl	8003494 <HAL_GetTick>
 800d44a:	4602      	mov	r2, r0
 800d44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d44e:	1ad3      	subs	r3, r2, r3
 800d450:	2b02      	cmp	r3, #2
 800d452:	d901      	bls.n	800d458 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800d454:	2303      	movs	r3, #3
 800d456:	e2ed      	b.n	800da34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d458:	4b8b      	ldr	r3, [pc, #556]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f003 0304 	and.w	r3, r3, #4
 800d460:	2b00      	cmp	r3, #0
 800d462:	d1f0      	bne.n	800d446 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f003 0310 	and.w	r3, r3, #16
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	f000 80a9 	beq.w	800d5c4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d472:	4b85      	ldr	r3, [pc, #532]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d474:	691b      	ldr	r3, [r3, #16]
 800d476:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d47a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d47c:	4b82      	ldr	r3, [pc, #520]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d47e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d480:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d482:	69bb      	ldr	r3, [r7, #24]
 800d484:	2b08      	cmp	r3, #8
 800d486:	d007      	beq.n	800d498 <HAL_RCC_OscConfig+0x308>
 800d488:	69bb      	ldr	r3, [r7, #24]
 800d48a:	2b18      	cmp	r3, #24
 800d48c:	d13a      	bne.n	800d504 <HAL_RCC_OscConfig+0x374>
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	f003 0303 	and.w	r3, r3, #3
 800d494:	2b01      	cmp	r3, #1
 800d496:	d135      	bne.n	800d504 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d498:	4b7b      	ldr	r3, [pc, #492]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d005      	beq.n	800d4b0 <HAL_RCC_OscConfig+0x320>
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	69db      	ldr	r3, [r3, #28]
 800d4a8:	2b80      	cmp	r3, #128	@ 0x80
 800d4aa:	d001      	beq.n	800d4b0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	e2c1      	b.n	800da34 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d4b0:	f7f6 f820 	bl	80034f4 <HAL_GetREVID>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d817      	bhi.n	800d4ee <HAL_RCC_OscConfig+0x35e>
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6a1b      	ldr	r3, [r3, #32]
 800d4c2:	2b20      	cmp	r3, #32
 800d4c4:	d108      	bne.n	800d4d8 <HAL_RCC_OscConfig+0x348>
 800d4c6:	4b70      	ldr	r3, [pc, #448]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800d4ce:	4a6e      	ldr	r2, [pc, #440]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d4d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d4d4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d4d6:	e075      	b.n	800d5c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d4d8:	4b6b      	ldr	r3, [pc, #428]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6a1b      	ldr	r3, [r3, #32]
 800d4e4:	069b      	lsls	r3, r3, #26
 800d4e6:	4968      	ldr	r1, [pc, #416]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d4ec:	e06a      	b.n	800d5c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d4ee:	4b66      	ldr	r3, [pc, #408]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d4f0:	68db      	ldr	r3, [r3, #12]
 800d4f2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6a1b      	ldr	r3, [r3, #32]
 800d4fa:	061b      	lsls	r3, r3, #24
 800d4fc:	4962      	ldr	r1, [pc, #392]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d4fe:	4313      	orrs	r3, r2
 800d500:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d502:	e05f      	b.n	800d5c4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	69db      	ldr	r3, [r3, #28]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d042      	beq.n	800d592 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d50c:	4b5e      	ldr	r3, [pc, #376]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4a5d      	ldr	r2, [pc, #372]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d518:	f7f5 ffbc 	bl	8003494 <HAL_GetTick>
 800d51c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d51e:	e008      	b.n	800d532 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d520:	f7f5 ffb8 	bl	8003494 <HAL_GetTick>
 800d524:	4602      	mov	r2, r0
 800d526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d528:	1ad3      	subs	r3, r2, r3
 800d52a:	2b02      	cmp	r3, #2
 800d52c:	d901      	bls.n	800d532 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800d52e:	2303      	movs	r3, #3
 800d530:	e280      	b.n	800da34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d532:	4b55      	ldr	r3, [pc, #340]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d0f0      	beq.n	800d520 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d53e:	f7f5 ffd9 	bl	80034f4 <HAL_GetREVID>
 800d542:	4603      	mov	r3, r0
 800d544:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d548:	4293      	cmp	r3, r2
 800d54a:	d817      	bhi.n	800d57c <HAL_RCC_OscConfig+0x3ec>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6a1b      	ldr	r3, [r3, #32]
 800d550:	2b20      	cmp	r3, #32
 800d552:	d108      	bne.n	800d566 <HAL_RCC_OscConfig+0x3d6>
 800d554:	4b4c      	ldr	r3, [pc, #304]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800d55c:	4a4a      	ldr	r2, [pc, #296]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d55e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d562:	6053      	str	r3, [r2, #4]
 800d564:	e02e      	b.n	800d5c4 <HAL_RCC_OscConfig+0x434>
 800d566:	4b48      	ldr	r3, [pc, #288]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6a1b      	ldr	r3, [r3, #32]
 800d572:	069b      	lsls	r3, r3, #26
 800d574:	4944      	ldr	r1, [pc, #272]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d576:	4313      	orrs	r3, r2
 800d578:	604b      	str	r3, [r1, #4]
 800d57a:	e023      	b.n	800d5c4 <HAL_RCC_OscConfig+0x434>
 800d57c:	4b42      	ldr	r3, [pc, #264]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6a1b      	ldr	r3, [r3, #32]
 800d588:	061b      	lsls	r3, r3, #24
 800d58a:	493f      	ldr	r1, [pc, #252]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d58c:	4313      	orrs	r3, r2
 800d58e:	60cb      	str	r3, [r1, #12]
 800d590:	e018      	b.n	800d5c4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d592:	4b3d      	ldr	r3, [pc, #244]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4a3c      	ldr	r2, [pc, #240]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d598:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d59c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d59e:	f7f5 ff79 	bl	8003494 <HAL_GetTick>
 800d5a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d5a4:	e008      	b.n	800d5b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d5a6:	f7f5 ff75 	bl	8003494 <HAL_GetTick>
 800d5aa:	4602      	mov	r2, r0
 800d5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ae:	1ad3      	subs	r3, r2, r3
 800d5b0:	2b02      	cmp	r3, #2
 800d5b2:	d901      	bls.n	800d5b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800d5b4:	2303      	movs	r3, #3
 800d5b6:	e23d      	b.n	800da34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d5b8:	4b33      	ldr	r3, [pc, #204]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d1f0      	bne.n	800d5a6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	f003 0308 	and.w	r3, r3, #8
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d036      	beq.n	800d63e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	695b      	ldr	r3, [r3, #20]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d019      	beq.n	800d60c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d5d8:	4b2b      	ldr	r3, [pc, #172]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d5da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5dc:	4a2a      	ldr	r2, [pc, #168]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d5de:	f043 0301 	orr.w	r3, r3, #1
 800d5e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d5e4:	f7f5 ff56 	bl	8003494 <HAL_GetTick>
 800d5e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d5ea:	e008      	b.n	800d5fe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d5ec:	f7f5 ff52 	bl	8003494 <HAL_GetTick>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f4:	1ad3      	subs	r3, r2, r3
 800d5f6:	2b02      	cmp	r3, #2
 800d5f8:	d901      	bls.n	800d5fe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800d5fa:	2303      	movs	r3, #3
 800d5fc:	e21a      	b.n	800da34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d5fe:	4b22      	ldr	r3, [pc, #136]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d602:	f003 0302 	and.w	r3, r3, #2
 800d606:	2b00      	cmp	r3, #0
 800d608:	d0f0      	beq.n	800d5ec <HAL_RCC_OscConfig+0x45c>
 800d60a:	e018      	b.n	800d63e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d60c:	4b1e      	ldr	r3, [pc, #120]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d60e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d610:	4a1d      	ldr	r2, [pc, #116]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d612:	f023 0301 	bic.w	r3, r3, #1
 800d616:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d618:	f7f5 ff3c 	bl	8003494 <HAL_GetTick>
 800d61c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d61e:	e008      	b.n	800d632 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d620:	f7f5 ff38 	bl	8003494 <HAL_GetTick>
 800d624:	4602      	mov	r2, r0
 800d626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d628:	1ad3      	subs	r3, r2, r3
 800d62a:	2b02      	cmp	r3, #2
 800d62c:	d901      	bls.n	800d632 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800d62e:	2303      	movs	r3, #3
 800d630:	e200      	b.n	800da34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d632:	4b15      	ldr	r3, [pc, #84]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d636:	f003 0302 	and.w	r3, r3, #2
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d1f0      	bne.n	800d620 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f003 0320 	and.w	r3, r3, #32
 800d646:	2b00      	cmp	r3, #0
 800d648:	d039      	beq.n	800d6be <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	699b      	ldr	r3, [r3, #24]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d01c      	beq.n	800d68c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d652:	4b0d      	ldr	r3, [pc, #52]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	4a0c      	ldr	r2, [pc, #48]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d658:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d65c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d65e:	f7f5 ff19 	bl	8003494 <HAL_GetTick>
 800d662:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d664:	e008      	b.n	800d678 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d666:	f7f5 ff15 	bl	8003494 <HAL_GetTick>
 800d66a:	4602      	mov	r2, r0
 800d66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d66e:	1ad3      	subs	r3, r2, r3
 800d670:	2b02      	cmp	r3, #2
 800d672:	d901      	bls.n	800d678 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800d674:	2303      	movs	r3, #3
 800d676:	e1dd      	b.n	800da34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d678:	4b03      	ldr	r3, [pc, #12]	@ (800d688 <HAL_RCC_OscConfig+0x4f8>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d680:	2b00      	cmp	r3, #0
 800d682:	d0f0      	beq.n	800d666 <HAL_RCC_OscConfig+0x4d6>
 800d684:	e01b      	b.n	800d6be <HAL_RCC_OscConfig+0x52e>
 800d686:	bf00      	nop
 800d688:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d68c:	4b9b      	ldr	r3, [pc, #620]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a9a      	ldr	r2, [pc, #616]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d692:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d696:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d698:	f7f5 fefc 	bl	8003494 <HAL_GetTick>
 800d69c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d69e:	e008      	b.n	800d6b2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d6a0:	f7f5 fef8 	bl	8003494 <HAL_GetTick>
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6a8:	1ad3      	subs	r3, r2, r3
 800d6aa:	2b02      	cmp	r3, #2
 800d6ac:	d901      	bls.n	800d6b2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800d6ae:	2303      	movs	r3, #3
 800d6b0:	e1c0      	b.n	800da34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d6b2:	4b92      	ldr	r3, [pc, #584]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d1f0      	bne.n	800d6a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f003 0304 	and.w	r3, r3, #4
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	f000 8081 	beq.w	800d7ce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d6cc:	4b8c      	ldr	r3, [pc, #560]	@ (800d900 <HAL_RCC_OscConfig+0x770>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a8b      	ldr	r2, [pc, #556]	@ (800d900 <HAL_RCC_OscConfig+0x770>)
 800d6d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d6d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d6d8:	f7f5 fedc 	bl	8003494 <HAL_GetTick>
 800d6dc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d6de:	e008      	b.n	800d6f2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d6e0:	f7f5 fed8 	bl	8003494 <HAL_GetTick>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e8:	1ad3      	subs	r3, r2, r3
 800d6ea:	2b64      	cmp	r3, #100	@ 0x64
 800d6ec:	d901      	bls.n	800d6f2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800d6ee:	2303      	movs	r3, #3
 800d6f0:	e1a0      	b.n	800da34 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d6f2:	4b83      	ldr	r3, [pc, #524]	@ (800d900 <HAL_RCC_OscConfig+0x770>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d0f0      	beq.n	800d6e0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	689b      	ldr	r3, [r3, #8]
 800d702:	2b01      	cmp	r3, #1
 800d704:	d106      	bne.n	800d714 <HAL_RCC_OscConfig+0x584>
 800d706:	4b7d      	ldr	r3, [pc, #500]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d70a:	4a7c      	ldr	r2, [pc, #496]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d70c:	f043 0301 	orr.w	r3, r3, #1
 800d710:	6713      	str	r3, [r2, #112]	@ 0x70
 800d712:	e02d      	b.n	800d770 <HAL_RCC_OscConfig+0x5e0>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d10c      	bne.n	800d736 <HAL_RCC_OscConfig+0x5a6>
 800d71c:	4b77      	ldr	r3, [pc, #476]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d71e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d720:	4a76      	ldr	r2, [pc, #472]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d722:	f023 0301 	bic.w	r3, r3, #1
 800d726:	6713      	str	r3, [r2, #112]	@ 0x70
 800d728:	4b74      	ldr	r3, [pc, #464]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d72a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d72c:	4a73      	ldr	r2, [pc, #460]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d72e:	f023 0304 	bic.w	r3, r3, #4
 800d732:	6713      	str	r3, [r2, #112]	@ 0x70
 800d734:	e01c      	b.n	800d770 <HAL_RCC_OscConfig+0x5e0>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	689b      	ldr	r3, [r3, #8]
 800d73a:	2b05      	cmp	r3, #5
 800d73c:	d10c      	bne.n	800d758 <HAL_RCC_OscConfig+0x5c8>
 800d73e:	4b6f      	ldr	r3, [pc, #444]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d742:	4a6e      	ldr	r2, [pc, #440]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d744:	f043 0304 	orr.w	r3, r3, #4
 800d748:	6713      	str	r3, [r2, #112]	@ 0x70
 800d74a:	4b6c      	ldr	r3, [pc, #432]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d74c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d74e:	4a6b      	ldr	r2, [pc, #428]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d750:	f043 0301 	orr.w	r3, r3, #1
 800d754:	6713      	str	r3, [r2, #112]	@ 0x70
 800d756:	e00b      	b.n	800d770 <HAL_RCC_OscConfig+0x5e0>
 800d758:	4b68      	ldr	r3, [pc, #416]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d75a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d75c:	4a67      	ldr	r2, [pc, #412]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d75e:	f023 0301 	bic.w	r3, r3, #1
 800d762:	6713      	str	r3, [r2, #112]	@ 0x70
 800d764:	4b65      	ldr	r3, [pc, #404]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d768:	4a64      	ldr	r2, [pc, #400]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d76a:	f023 0304 	bic.w	r3, r3, #4
 800d76e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	689b      	ldr	r3, [r3, #8]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d015      	beq.n	800d7a4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d778:	f7f5 fe8c 	bl	8003494 <HAL_GetTick>
 800d77c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d77e:	e00a      	b.n	800d796 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d780:	f7f5 fe88 	bl	8003494 <HAL_GetTick>
 800d784:	4602      	mov	r2, r0
 800d786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d788:	1ad3      	subs	r3, r2, r3
 800d78a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d78e:	4293      	cmp	r3, r2
 800d790:	d901      	bls.n	800d796 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800d792:	2303      	movs	r3, #3
 800d794:	e14e      	b.n	800da34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d796:	4b59      	ldr	r3, [pc, #356]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d79a:	f003 0302 	and.w	r3, r3, #2
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d0ee      	beq.n	800d780 <HAL_RCC_OscConfig+0x5f0>
 800d7a2:	e014      	b.n	800d7ce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d7a4:	f7f5 fe76 	bl	8003494 <HAL_GetTick>
 800d7a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d7aa:	e00a      	b.n	800d7c2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d7ac:	f7f5 fe72 	bl	8003494 <HAL_GetTick>
 800d7b0:	4602      	mov	r2, r0
 800d7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7b4:	1ad3      	subs	r3, r2, r3
 800d7b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d901      	bls.n	800d7c2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800d7be:	2303      	movs	r3, #3
 800d7c0:	e138      	b.n	800da34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d7c2:	4b4e      	ldr	r3, [pc, #312]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d7c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d7c6:	f003 0302 	and.w	r3, r3, #2
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d1ee      	bne.n	800d7ac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	f000 812d 	beq.w	800da32 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d7d8:	4b48      	ldr	r3, [pc, #288]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d7da:	691b      	ldr	r3, [r3, #16]
 800d7dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d7e0:	2b18      	cmp	r3, #24
 800d7e2:	f000 80bd 	beq.w	800d960 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7ea:	2b02      	cmp	r3, #2
 800d7ec:	f040 809e 	bne.w	800d92c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d7f0:	4b42      	ldr	r3, [pc, #264]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	4a41      	ldr	r2, [pc, #260]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d7f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d7fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7fc:	f7f5 fe4a 	bl	8003494 <HAL_GetTick>
 800d800:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d802:	e008      	b.n	800d816 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d804:	f7f5 fe46 	bl	8003494 <HAL_GetTick>
 800d808:	4602      	mov	r2, r0
 800d80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d80c:	1ad3      	subs	r3, r2, r3
 800d80e:	2b02      	cmp	r3, #2
 800d810:	d901      	bls.n	800d816 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800d812:	2303      	movs	r3, #3
 800d814:	e10e      	b.n	800da34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d816:	4b39      	ldr	r3, [pc, #228]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d1f0      	bne.n	800d804 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d822:	4b36      	ldr	r3, [pc, #216]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d824:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d826:	4b37      	ldr	r3, [pc, #220]	@ (800d904 <HAL_RCC_OscConfig+0x774>)
 800d828:	4013      	ands	r3, r2
 800d82a:	687a      	ldr	r2, [r7, #4]
 800d82c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800d82e:	687a      	ldr	r2, [r7, #4]
 800d830:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d832:	0112      	lsls	r2, r2, #4
 800d834:	430a      	orrs	r2, r1
 800d836:	4931      	ldr	r1, [pc, #196]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d838:	4313      	orrs	r3, r2
 800d83a:	628b      	str	r3, [r1, #40]	@ 0x28
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d840:	3b01      	subs	r3, #1
 800d842:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d84a:	3b01      	subs	r3, #1
 800d84c:	025b      	lsls	r3, r3, #9
 800d84e:	b29b      	uxth	r3, r3
 800d850:	431a      	orrs	r2, r3
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d856:	3b01      	subs	r3, #1
 800d858:	041b      	lsls	r3, r3, #16
 800d85a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d85e:	431a      	orrs	r2, r3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d864:	3b01      	subs	r3, #1
 800d866:	061b      	lsls	r3, r3, #24
 800d868:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d86c:	4923      	ldr	r1, [pc, #140]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d86e:	4313      	orrs	r3, r2
 800d870:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d872:	4b22      	ldr	r3, [pc, #136]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d876:	4a21      	ldr	r2, [pc, #132]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d878:	f023 0301 	bic.w	r3, r3, #1
 800d87c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d87e:	4b1f      	ldr	r3, [pc, #124]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d880:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d882:	4b21      	ldr	r3, [pc, #132]	@ (800d908 <HAL_RCC_OscConfig+0x778>)
 800d884:	4013      	ands	r3, r2
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d88a:	00d2      	lsls	r2, r2, #3
 800d88c:	491b      	ldr	r1, [pc, #108]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d88e:	4313      	orrs	r3, r2
 800d890:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d892:	4b1a      	ldr	r3, [pc, #104]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d896:	f023 020c 	bic.w	r2, r3, #12
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d89e:	4917      	ldr	r1, [pc, #92]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d8a4:	4b15      	ldr	r3, [pc, #84]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d8a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8a8:	f023 0202 	bic.w	r2, r3, #2
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8b0:	4912      	ldr	r1, [pc, #72]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d8b6:	4b11      	ldr	r3, [pc, #68]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d8b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8ba:	4a10      	ldr	r2, [pc, #64]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d8bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d8c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d8c2:	4b0e      	ldr	r3, [pc, #56]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d8c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8c6:	4a0d      	ldr	r2, [pc, #52]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d8c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d8cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d8ce:	4b0b      	ldr	r3, [pc, #44]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d8d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8d2:	4a0a      	ldr	r2, [pc, #40]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d8d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d8d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d8da:	4b08      	ldr	r3, [pc, #32]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d8dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8de:	4a07      	ldr	r2, [pc, #28]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d8e0:	f043 0301 	orr.w	r3, r3, #1
 800d8e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d8e6:	4b05      	ldr	r3, [pc, #20]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4a04      	ldr	r2, [pc, #16]	@ (800d8fc <HAL_RCC_OscConfig+0x76c>)
 800d8ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d8f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8f2:	f7f5 fdcf 	bl	8003494 <HAL_GetTick>
 800d8f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d8f8:	e011      	b.n	800d91e <HAL_RCC_OscConfig+0x78e>
 800d8fa:	bf00      	nop
 800d8fc:	58024400 	.word	0x58024400
 800d900:	58024800 	.word	0x58024800
 800d904:	fffffc0c 	.word	0xfffffc0c
 800d908:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d90c:	f7f5 fdc2 	bl	8003494 <HAL_GetTick>
 800d910:	4602      	mov	r2, r0
 800d912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d914:	1ad3      	subs	r3, r2, r3
 800d916:	2b02      	cmp	r3, #2
 800d918:	d901      	bls.n	800d91e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800d91a:	2303      	movs	r3, #3
 800d91c:	e08a      	b.n	800da34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d91e:	4b47      	ldr	r3, [pc, #284]	@ (800da3c <HAL_RCC_OscConfig+0x8ac>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d926:	2b00      	cmp	r3, #0
 800d928:	d0f0      	beq.n	800d90c <HAL_RCC_OscConfig+0x77c>
 800d92a:	e082      	b.n	800da32 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d92c:	4b43      	ldr	r3, [pc, #268]	@ (800da3c <HAL_RCC_OscConfig+0x8ac>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4a42      	ldr	r2, [pc, #264]	@ (800da3c <HAL_RCC_OscConfig+0x8ac>)
 800d932:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d938:	f7f5 fdac 	bl	8003494 <HAL_GetTick>
 800d93c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d93e:	e008      	b.n	800d952 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d940:	f7f5 fda8 	bl	8003494 <HAL_GetTick>
 800d944:	4602      	mov	r2, r0
 800d946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d948:	1ad3      	subs	r3, r2, r3
 800d94a:	2b02      	cmp	r3, #2
 800d94c:	d901      	bls.n	800d952 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800d94e:	2303      	movs	r3, #3
 800d950:	e070      	b.n	800da34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d952:	4b3a      	ldr	r3, [pc, #232]	@ (800da3c <HAL_RCC_OscConfig+0x8ac>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d1f0      	bne.n	800d940 <HAL_RCC_OscConfig+0x7b0>
 800d95e:	e068      	b.n	800da32 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d960:	4b36      	ldr	r3, [pc, #216]	@ (800da3c <HAL_RCC_OscConfig+0x8ac>)
 800d962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d964:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d966:	4b35      	ldr	r3, [pc, #212]	@ (800da3c <HAL_RCC_OscConfig+0x8ac>)
 800d968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d96a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d970:	2b01      	cmp	r3, #1
 800d972:	d031      	beq.n	800d9d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	f003 0203 	and.w	r2, r3, #3
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d97e:	429a      	cmp	r2, r3
 800d980:	d12a      	bne.n	800d9d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	091b      	lsrs	r3, r3, #4
 800d986:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d98e:	429a      	cmp	r2, r3
 800d990:	d122      	bne.n	800d9d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d99c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d11a      	bne.n	800d9d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	0a5b      	lsrs	r3, r3, #9
 800d9a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d111      	bne.n	800d9d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	0c1b      	lsrs	r3, r3, #16
 800d9b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d108      	bne.n	800d9d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	0e1b      	lsrs	r3, r3, #24
 800d9ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d001      	beq.n	800d9dc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800d9d8:	2301      	movs	r3, #1
 800d9da:	e02b      	b.n	800da34 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d9dc:	4b17      	ldr	r3, [pc, #92]	@ (800da3c <HAL_RCC_OscConfig+0x8ac>)
 800d9de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9e0:	08db      	lsrs	r3, r3, #3
 800d9e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d9e6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d9ec:	693a      	ldr	r2, [r7, #16]
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	d01f      	beq.n	800da32 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d9f2:	4b12      	ldr	r3, [pc, #72]	@ (800da3c <HAL_RCC_OscConfig+0x8ac>)
 800d9f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9f6:	4a11      	ldr	r2, [pc, #68]	@ (800da3c <HAL_RCC_OscConfig+0x8ac>)
 800d9f8:	f023 0301 	bic.w	r3, r3, #1
 800d9fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d9fe:	f7f5 fd49 	bl	8003494 <HAL_GetTick>
 800da02:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800da04:	bf00      	nop
 800da06:	f7f5 fd45 	bl	8003494 <HAL_GetTick>
 800da0a:	4602      	mov	r2, r0
 800da0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da0e:	4293      	cmp	r3, r2
 800da10:	d0f9      	beq.n	800da06 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800da12:	4b0a      	ldr	r3, [pc, #40]	@ (800da3c <HAL_RCC_OscConfig+0x8ac>)
 800da14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800da16:	4b0a      	ldr	r3, [pc, #40]	@ (800da40 <HAL_RCC_OscConfig+0x8b0>)
 800da18:	4013      	ands	r3, r2
 800da1a:	687a      	ldr	r2, [r7, #4]
 800da1c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800da1e:	00d2      	lsls	r2, r2, #3
 800da20:	4906      	ldr	r1, [pc, #24]	@ (800da3c <HAL_RCC_OscConfig+0x8ac>)
 800da22:	4313      	orrs	r3, r2
 800da24:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800da26:	4b05      	ldr	r3, [pc, #20]	@ (800da3c <HAL_RCC_OscConfig+0x8ac>)
 800da28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da2a:	4a04      	ldr	r2, [pc, #16]	@ (800da3c <HAL_RCC_OscConfig+0x8ac>)
 800da2c:	f043 0301 	orr.w	r3, r3, #1
 800da30:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800da32:	2300      	movs	r3, #0
}
 800da34:	4618      	mov	r0, r3
 800da36:	3730      	adds	r7, #48	@ 0x30
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	58024400 	.word	0x58024400
 800da40:	ffff0007 	.word	0xffff0007

0800da44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b086      	sub	sp, #24
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d101      	bne.n	800da58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800da54:	2301      	movs	r3, #1
 800da56:	e19c      	b.n	800dd92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800da58:	4b8a      	ldr	r3, [pc, #552]	@ (800dc84 <HAL_RCC_ClockConfig+0x240>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f003 030f 	and.w	r3, r3, #15
 800da60:	683a      	ldr	r2, [r7, #0]
 800da62:	429a      	cmp	r2, r3
 800da64:	d910      	bls.n	800da88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800da66:	4b87      	ldr	r3, [pc, #540]	@ (800dc84 <HAL_RCC_ClockConfig+0x240>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f023 020f 	bic.w	r2, r3, #15
 800da6e:	4985      	ldr	r1, [pc, #532]	@ (800dc84 <HAL_RCC_ClockConfig+0x240>)
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	4313      	orrs	r3, r2
 800da74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800da76:	4b83      	ldr	r3, [pc, #524]	@ (800dc84 <HAL_RCC_ClockConfig+0x240>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	f003 030f 	and.w	r3, r3, #15
 800da7e:	683a      	ldr	r2, [r7, #0]
 800da80:	429a      	cmp	r2, r3
 800da82:	d001      	beq.n	800da88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800da84:	2301      	movs	r3, #1
 800da86:	e184      	b.n	800dd92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f003 0304 	and.w	r3, r3, #4
 800da90:	2b00      	cmp	r3, #0
 800da92:	d010      	beq.n	800dab6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	691a      	ldr	r2, [r3, #16]
 800da98:	4b7b      	ldr	r3, [pc, #492]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800da9a:	699b      	ldr	r3, [r3, #24]
 800da9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d908      	bls.n	800dab6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800daa4:	4b78      	ldr	r3, [pc, #480]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800daa6:	699b      	ldr	r3, [r3, #24]
 800daa8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	691b      	ldr	r3, [r3, #16]
 800dab0:	4975      	ldr	r1, [pc, #468]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800dab2:	4313      	orrs	r3, r2
 800dab4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f003 0308 	and.w	r3, r3, #8
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d010      	beq.n	800dae4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	695a      	ldr	r2, [r3, #20]
 800dac6:	4b70      	ldr	r3, [pc, #448]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800dac8:	69db      	ldr	r3, [r3, #28]
 800daca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dace:	429a      	cmp	r2, r3
 800dad0:	d908      	bls.n	800dae4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800dad2:	4b6d      	ldr	r3, [pc, #436]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800dad4:	69db      	ldr	r3, [r3, #28]
 800dad6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	695b      	ldr	r3, [r3, #20]
 800dade:	496a      	ldr	r1, [pc, #424]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800dae0:	4313      	orrs	r3, r2
 800dae2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f003 0310 	and.w	r3, r3, #16
 800daec:	2b00      	cmp	r3, #0
 800daee:	d010      	beq.n	800db12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	699a      	ldr	r2, [r3, #24]
 800daf4:	4b64      	ldr	r3, [pc, #400]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800daf6:	69db      	ldr	r3, [r3, #28]
 800daf8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d908      	bls.n	800db12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800db00:	4b61      	ldr	r3, [pc, #388]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800db02:	69db      	ldr	r3, [r3, #28]
 800db04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	699b      	ldr	r3, [r3, #24]
 800db0c:	495e      	ldr	r1, [pc, #376]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800db0e:	4313      	orrs	r3, r2
 800db10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f003 0320 	and.w	r3, r3, #32
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d010      	beq.n	800db40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	69da      	ldr	r2, [r3, #28]
 800db22:	4b59      	ldr	r3, [pc, #356]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800db24:	6a1b      	ldr	r3, [r3, #32]
 800db26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d908      	bls.n	800db40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800db2e:	4b56      	ldr	r3, [pc, #344]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800db30:	6a1b      	ldr	r3, [r3, #32]
 800db32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	69db      	ldr	r3, [r3, #28]
 800db3a:	4953      	ldr	r1, [pc, #332]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800db3c:	4313      	orrs	r3, r2
 800db3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f003 0302 	and.w	r3, r3, #2
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d010      	beq.n	800db6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	68da      	ldr	r2, [r3, #12]
 800db50:	4b4d      	ldr	r3, [pc, #308]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800db52:	699b      	ldr	r3, [r3, #24]
 800db54:	f003 030f 	and.w	r3, r3, #15
 800db58:	429a      	cmp	r2, r3
 800db5a:	d908      	bls.n	800db6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800db5c:	4b4a      	ldr	r3, [pc, #296]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800db5e:	699b      	ldr	r3, [r3, #24]
 800db60:	f023 020f 	bic.w	r2, r3, #15
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	68db      	ldr	r3, [r3, #12]
 800db68:	4947      	ldr	r1, [pc, #284]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800db6a:	4313      	orrs	r3, r2
 800db6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f003 0301 	and.w	r3, r3, #1
 800db76:	2b00      	cmp	r3, #0
 800db78:	d055      	beq.n	800dc26 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800db7a:	4b43      	ldr	r3, [pc, #268]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800db7c:	699b      	ldr	r3, [r3, #24]
 800db7e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	689b      	ldr	r3, [r3, #8]
 800db86:	4940      	ldr	r1, [pc, #256]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800db88:	4313      	orrs	r3, r2
 800db8a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	2b02      	cmp	r3, #2
 800db92:	d107      	bne.n	800dba4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800db94:	4b3c      	ldr	r3, [pc, #240]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d121      	bne.n	800dbe4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800dba0:	2301      	movs	r3, #1
 800dba2:	e0f6      	b.n	800dd92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	2b03      	cmp	r3, #3
 800dbaa:	d107      	bne.n	800dbbc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800dbac:	4b36      	ldr	r3, [pc, #216]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d115      	bne.n	800dbe4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	e0ea      	b.n	800dd92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	685b      	ldr	r3, [r3, #4]
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d107      	bne.n	800dbd4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dbc4:	4b30      	ldr	r3, [pc, #192]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d109      	bne.n	800dbe4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	e0de      	b.n	800dd92 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dbd4:	4b2c      	ldr	r3, [pc, #176]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f003 0304 	and.w	r3, r3, #4
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d101      	bne.n	800dbe4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	e0d6      	b.n	800dd92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800dbe4:	4b28      	ldr	r3, [pc, #160]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800dbe6:	691b      	ldr	r3, [r3, #16]
 800dbe8:	f023 0207 	bic.w	r2, r3, #7
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	4925      	ldr	r1, [pc, #148]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dbf6:	f7f5 fc4d 	bl	8003494 <HAL_GetTick>
 800dbfa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dbfc:	e00a      	b.n	800dc14 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dbfe:	f7f5 fc49 	bl	8003494 <HAL_GetTick>
 800dc02:	4602      	mov	r2, r0
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	1ad3      	subs	r3, r2, r3
 800dc08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d901      	bls.n	800dc14 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800dc10:	2303      	movs	r3, #3
 800dc12:	e0be      	b.n	800dd92 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dc14:	4b1c      	ldr	r3, [pc, #112]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800dc16:	691b      	ldr	r3, [r3, #16]
 800dc18:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	00db      	lsls	r3, r3, #3
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d1eb      	bne.n	800dbfe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	f003 0302 	and.w	r3, r3, #2
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d010      	beq.n	800dc54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	68da      	ldr	r2, [r3, #12]
 800dc36:	4b14      	ldr	r3, [pc, #80]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800dc38:	699b      	ldr	r3, [r3, #24]
 800dc3a:	f003 030f 	and.w	r3, r3, #15
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d208      	bcs.n	800dc54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dc42:	4b11      	ldr	r3, [pc, #68]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800dc44:	699b      	ldr	r3, [r3, #24]
 800dc46:	f023 020f 	bic.w	r2, r3, #15
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	490e      	ldr	r1, [pc, #56]	@ (800dc88 <HAL_RCC_ClockConfig+0x244>)
 800dc50:	4313      	orrs	r3, r2
 800dc52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800dc54:	4b0b      	ldr	r3, [pc, #44]	@ (800dc84 <HAL_RCC_ClockConfig+0x240>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f003 030f 	and.w	r3, r3, #15
 800dc5c:	683a      	ldr	r2, [r7, #0]
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d214      	bcs.n	800dc8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dc62:	4b08      	ldr	r3, [pc, #32]	@ (800dc84 <HAL_RCC_ClockConfig+0x240>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f023 020f 	bic.w	r2, r3, #15
 800dc6a:	4906      	ldr	r1, [pc, #24]	@ (800dc84 <HAL_RCC_ClockConfig+0x240>)
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc72:	4b04      	ldr	r3, [pc, #16]	@ (800dc84 <HAL_RCC_ClockConfig+0x240>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	f003 030f 	and.w	r3, r3, #15
 800dc7a:	683a      	ldr	r2, [r7, #0]
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d005      	beq.n	800dc8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800dc80:	2301      	movs	r3, #1
 800dc82:	e086      	b.n	800dd92 <HAL_RCC_ClockConfig+0x34e>
 800dc84:	52002000 	.word	0x52002000
 800dc88:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f003 0304 	and.w	r3, r3, #4
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d010      	beq.n	800dcba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	691a      	ldr	r2, [r3, #16]
 800dc9c:	4b3f      	ldr	r3, [pc, #252]	@ (800dd9c <HAL_RCC_ClockConfig+0x358>)
 800dc9e:	699b      	ldr	r3, [r3, #24]
 800dca0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d208      	bcs.n	800dcba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800dca8:	4b3c      	ldr	r3, [pc, #240]	@ (800dd9c <HAL_RCC_ClockConfig+0x358>)
 800dcaa:	699b      	ldr	r3, [r3, #24]
 800dcac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	691b      	ldr	r3, [r3, #16]
 800dcb4:	4939      	ldr	r1, [pc, #228]	@ (800dd9c <HAL_RCC_ClockConfig+0x358>)
 800dcb6:	4313      	orrs	r3, r2
 800dcb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	f003 0308 	and.w	r3, r3, #8
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d010      	beq.n	800dce8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	695a      	ldr	r2, [r3, #20]
 800dcca:	4b34      	ldr	r3, [pc, #208]	@ (800dd9c <HAL_RCC_ClockConfig+0x358>)
 800dccc:	69db      	ldr	r3, [r3, #28]
 800dcce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d208      	bcs.n	800dce8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800dcd6:	4b31      	ldr	r3, [pc, #196]	@ (800dd9c <HAL_RCC_ClockConfig+0x358>)
 800dcd8:	69db      	ldr	r3, [r3, #28]
 800dcda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	695b      	ldr	r3, [r3, #20]
 800dce2:	492e      	ldr	r1, [pc, #184]	@ (800dd9c <HAL_RCC_ClockConfig+0x358>)
 800dce4:	4313      	orrs	r3, r2
 800dce6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	f003 0310 	and.w	r3, r3, #16
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d010      	beq.n	800dd16 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	699a      	ldr	r2, [r3, #24]
 800dcf8:	4b28      	ldr	r3, [pc, #160]	@ (800dd9c <HAL_RCC_ClockConfig+0x358>)
 800dcfa:	69db      	ldr	r3, [r3, #28]
 800dcfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d208      	bcs.n	800dd16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800dd04:	4b25      	ldr	r3, [pc, #148]	@ (800dd9c <HAL_RCC_ClockConfig+0x358>)
 800dd06:	69db      	ldr	r3, [r3, #28]
 800dd08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	699b      	ldr	r3, [r3, #24]
 800dd10:	4922      	ldr	r1, [pc, #136]	@ (800dd9c <HAL_RCC_ClockConfig+0x358>)
 800dd12:	4313      	orrs	r3, r2
 800dd14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f003 0320 	and.w	r3, r3, #32
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d010      	beq.n	800dd44 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	69da      	ldr	r2, [r3, #28]
 800dd26:	4b1d      	ldr	r3, [pc, #116]	@ (800dd9c <HAL_RCC_ClockConfig+0x358>)
 800dd28:	6a1b      	ldr	r3, [r3, #32]
 800dd2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	d208      	bcs.n	800dd44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800dd32:	4b1a      	ldr	r3, [pc, #104]	@ (800dd9c <HAL_RCC_ClockConfig+0x358>)
 800dd34:	6a1b      	ldr	r3, [r3, #32]
 800dd36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	69db      	ldr	r3, [r3, #28]
 800dd3e:	4917      	ldr	r1, [pc, #92]	@ (800dd9c <HAL_RCC_ClockConfig+0x358>)
 800dd40:	4313      	orrs	r3, r2
 800dd42:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dd44:	f000 f834 	bl	800ddb0 <HAL_RCC_GetSysClockFreq>
 800dd48:	4602      	mov	r2, r0
 800dd4a:	4b14      	ldr	r3, [pc, #80]	@ (800dd9c <HAL_RCC_ClockConfig+0x358>)
 800dd4c:	699b      	ldr	r3, [r3, #24]
 800dd4e:	0a1b      	lsrs	r3, r3, #8
 800dd50:	f003 030f 	and.w	r3, r3, #15
 800dd54:	4912      	ldr	r1, [pc, #72]	@ (800dda0 <HAL_RCC_ClockConfig+0x35c>)
 800dd56:	5ccb      	ldrb	r3, [r1, r3]
 800dd58:	f003 031f 	and.w	r3, r3, #31
 800dd5c:	fa22 f303 	lsr.w	r3, r2, r3
 800dd60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dd62:	4b0e      	ldr	r3, [pc, #56]	@ (800dd9c <HAL_RCC_ClockConfig+0x358>)
 800dd64:	699b      	ldr	r3, [r3, #24]
 800dd66:	f003 030f 	and.w	r3, r3, #15
 800dd6a:	4a0d      	ldr	r2, [pc, #52]	@ (800dda0 <HAL_RCC_ClockConfig+0x35c>)
 800dd6c:	5cd3      	ldrb	r3, [r2, r3]
 800dd6e:	f003 031f 	and.w	r3, r3, #31
 800dd72:	693a      	ldr	r2, [r7, #16]
 800dd74:	fa22 f303 	lsr.w	r3, r2, r3
 800dd78:	4a0a      	ldr	r2, [pc, #40]	@ (800dda4 <HAL_RCC_ClockConfig+0x360>)
 800dd7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800dd7c:	4a0a      	ldr	r2, [pc, #40]	@ (800dda8 <HAL_RCC_ClockConfig+0x364>)
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800dd82:	4b0a      	ldr	r3, [pc, #40]	@ (800ddac <HAL_RCC_ClockConfig+0x368>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7f5 fb3a 	bl	8003400 <HAL_InitTick>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800dd90:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3718      	adds	r7, #24
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	58024400 	.word	0x58024400
 800dda0:	0801b3c0 	.word	0x0801b3c0
 800dda4:	2400001c 	.word	0x2400001c
 800dda8:	24000018 	.word	0x24000018
 800ddac:	24000020 	.word	0x24000020

0800ddb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b089      	sub	sp, #36	@ 0x24
 800ddb4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ddb6:	4bb3      	ldr	r3, [pc, #716]	@ (800e084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddb8:	691b      	ldr	r3, [r3, #16]
 800ddba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ddbe:	2b18      	cmp	r3, #24
 800ddc0:	f200 8155 	bhi.w	800e06e <HAL_RCC_GetSysClockFreq+0x2be>
 800ddc4:	a201      	add	r2, pc, #4	@ (adr r2, 800ddcc <HAL_RCC_GetSysClockFreq+0x1c>)
 800ddc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddca:	bf00      	nop
 800ddcc:	0800de31 	.word	0x0800de31
 800ddd0:	0800e06f 	.word	0x0800e06f
 800ddd4:	0800e06f 	.word	0x0800e06f
 800ddd8:	0800e06f 	.word	0x0800e06f
 800dddc:	0800e06f 	.word	0x0800e06f
 800dde0:	0800e06f 	.word	0x0800e06f
 800dde4:	0800e06f 	.word	0x0800e06f
 800dde8:	0800e06f 	.word	0x0800e06f
 800ddec:	0800de57 	.word	0x0800de57
 800ddf0:	0800e06f 	.word	0x0800e06f
 800ddf4:	0800e06f 	.word	0x0800e06f
 800ddf8:	0800e06f 	.word	0x0800e06f
 800ddfc:	0800e06f 	.word	0x0800e06f
 800de00:	0800e06f 	.word	0x0800e06f
 800de04:	0800e06f 	.word	0x0800e06f
 800de08:	0800e06f 	.word	0x0800e06f
 800de0c:	0800de5d 	.word	0x0800de5d
 800de10:	0800e06f 	.word	0x0800e06f
 800de14:	0800e06f 	.word	0x0800e06f
 800de18:	0800e06f 	.word	0x0800e06f
 800de1c:	0800e06f 	.word	0x0800e06f
 800de20:	0800e06f 	.word	0x0800e06f
 800de24:	0800e06f 	.word	0x0800e06f
 800de28:	0800e06f 	.word	0x0800e06f
 800de2c:	0800de63 	.word	0x0800de63
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de30:	4b94      	ldr	r3, [pc, #592]	@ (800e084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f003 0320 	and.w	r3, r3, #32
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d009      	beq.n	800de50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800de3c:	4b91      	ldr	r3, [pc, #580]	@ (800e084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	08db      	lsrs	r3, r3, #3
 800de42:	f003 0303 	and.w	r3, r3, #3
 800de46:	4a90      	ldr	r2, [pc, #576]	@ (800e088 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800de48:	fa22 f303 	lsr.w	r3, r2, r3
 800de4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800de4e:	e111      	b.n	800e074 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800de50:	4b8d      	ldr	r3, [pc, #564]	@ (800e088 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800de52:	61bb      	str	r3, [r7, #24]
      break;
 800de54:	e10e      	b.n	800e074 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800de56:	4b8d      	ldr	r3, [pc, #564]	@ (800e08c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800de58:	61bb      	str	r3, [r7, #24]
      break;
 800de5a:	e10b      	b.n	800e074 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800de5c:	4b8c      	ldr	r3, [pc, #560]	@ (800e090 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800de5e:	61bb      	str	r3, [r7, #24]
      break;
 800de60:	e108      	b.n	800e074 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800de62:	4b88      	ldr	r3, [pc, #544]	@ (800e084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de66:	f003 0303 	and.w	r3, r3, #3
 800de6a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800de6c:	4b85      	ldr	r3, [pc, #532]	@ (800e084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de70:	091b      	lsrs	r3, r3, #4
 800de72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800de76:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800de78:	4b82      	ldr	r3, [pc, #520]	@ (800e084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de7c:	f003 0301 	and.w	r3, r3, #1
 800de80:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800de82:	4b80      	ldr	r3, [pc, #512]	@ (800e084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de86:	08db      	lsrs	r3, r3, #3
 800de88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de8c:	68fa      	ldr	r2, [r7, #12]
 800de8e:	fb02 f303 	mul.w	r3, r2, r3
 800de92:	ee07 3a90 	vmov	s15, r3
 800de96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de9a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	f000 80e1 	beq.w	800e068 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	2b02      	cmp	r3, #2
 800deaa:	f000 8083 	beq.w	800dfb4 <HAL_RCC_GetSysClockFreq+0x204>
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	2b02      	cmp	r3, #2
 800deb2:	f200 80a1 	bhi.w	800dff8 <HAL_RCC_GetSysClockFreq+0x248>
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d003      	beq.n	800dec4 <HAL_RCC_GetSysClockFreq+0x114>
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	2b01      	cmp	r3, #1
 800dec0:	d056      	beq.n	800df70 <HAL_RCC_GetSysClockFreq+0x1c0>
 800dec2:	e099      	b.n	800dff8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dec4:	4b6f      	ldr	r3, [pc, #444]	@ (800e084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	f003 0320 	and.w	r3, r3, #32
 800decc:	2b00      	cmp	r3, #0
 800dece:	d02d      	beq.n	800df2c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ded0:	4b6c      	ldr	r3, [pc, #432]	@ (800e084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	08db      	lsrs	r3, r3, #3
 800ded6:	f003 0303 	and.w	r3, r3, #3
 800deda:	4a6b      	ldr	r2, [pc, #428]	@ (800e088 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800dedc:	fa22 f303 	lsr.w	r3, r2, r3
 800dee0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	ee07 3a90 	vmov	s15, r3
 800dee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	ee07 3a90 	vmov	s15, r3
 800def2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800def6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800defa:	4b62      	ldr	r3, [pc, #392]	@ (800e084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800defc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800defe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df02:	ee07 3a90 	vmov	s15, r3
 800df06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df0a:	ed97 6a02 	vldr	s12, [r7, #8]
 800df0e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800e094 <HAL_RCC_GetSysClockFreq+0x2e4>
 800df12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df26:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800df2a:	e087      	b.n	800e03c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	ee07 3a90 	vmov	s15, r3
 800df32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df36:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800e098 <HAL_RCC_GetSysClockFreq+0x2e8>
 800df3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df3e:	4b51      	ldr	r3, [pc, #324]	@ (800e084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df46:	ee07 3a90 	vmov	s15, r3
 800df4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df4e:	ed97 6a02 	vldr	s12, [r7, #8]
 800df52:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800e094 <HAL_RCC_GetSysClockFreq+0x2e4>
 800df56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800df6e:	e065      	b.n	800e03c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	ee07 3a90 	vmov	s15, r3
 800df76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df7a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800e09c <HAL_RCC_GetSysClockFreq+0x2ec>
 800df7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df82:	4b40      	ldr	r3, [pc, #256]	@ (800e084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df8a:	ee07 3a90 	vmov	s15, r3
 800df8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df92:	ed97 6a02 	vldr	s12, [r7, #8]
 800df96:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e094 <HAL_RCC_GetSysClockFreq+0x2e4>
 800df9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dfa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dfb2:	e043      	b.n	800e03c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	ee07 3a90 	vmov	s15, r3
 800dfba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfbe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800e0a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800dfc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dfc6:	4b2f      	ldr	r3, [pc, #188]	@ (800e084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dfc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfce:	ee07 3a90 	vmov	s15, r3
 800dfd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfd6:	ed97 6a02 	vldr	s12, [r7, #8]
 800dfda:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800e094 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dfde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dfea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dff2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dff6:	e021      	b.n	800e03c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	ee07 3a90 	vmov	s15, r3
 800dffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e002:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800e09c <HAL_RCC_GetSysClockFreq+0x2ec>
 800e006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e00a:	4b1e      	ldr	r3, [pc, #120]	@ (800e084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e00c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e00e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e012:	ee07 3a90 	vmov	s15, r3
 800e016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e01a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e01e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800e094 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e02a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e02e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e032:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e036:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e03a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e03c:	4b11      	ldr	r3, [pc, #68]	@ (800e084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e03e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e040:	0a5b      	lsrs	r3, r3, #9
 800e042:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e046:	3301      	adds	r3, #1
 800e048:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	ee07 3a90 	vmov	s15, r3
 800e050:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e054:	edd7 6a07 	vldr	s13, [r7, #28]
 800e058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e05c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e060:	ee17 3a90 	vmov	r3, s15
 800e064:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800e066:	e005      	b.n	800e074 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800e068:	2300      	movs	r3, #0
 800e06a:	61bb      	str	r3, [r7, #24]
      break;
 800e06c:	e002      	b.n	800e074 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800e06e:	4b07      	ldr	r3, [pc, #28]	@ (800e08c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e070:	61bb      	str	r3, [r7, #24]
      break;
 800e072:	bf00      	nop
  }

  return sysclockfreq;
 800e074:	69bb      	ldr	r3, [r7, #24]
}
 800e076:	4618      	mov	r0, r3
 800e078:	3724      	adds	r7, #36	@ 0x24
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr
 800e082:	bf00      	nop
 800e084:	58024400 	.word	0x58024400
 800e088:	03d09000 	.word	0x03d09000
 800e08c:	003d0900 	.word	0x003d0900
 800e090:	017d7840 	.word	0x017d7840
 800e094:	46000000 	.word	0x46000000
 800e098:	4c742400 	.word	0x4c742400
 800e09c:	4a742400 	.word	0x4a742400
 800e0a0:	4bbebc20 	.word	0x4bbebc20

0800e0a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e0aa:	f7ff fe81 	bl	800ddb0 <HAL_RCC_GetSysClockFreq>
 800e0ae:	4602      	mov	r2, r0
 800e0b0:	4b10      	ldr	r3, [pc, #64]	@ (800e0f4 <HAL_RCC_GetHCLKFreq+0x50>)
 800e0b2:	699b      	ldr	r3, [r3, #24]
 800e0b4:	0a1b      	lsrs	r3, r3, #8
 800e0b6:	f003 030f 	and.w	r3, r3, #15
 800e0ba:	490f      	ldr	r1, [pc, #60]	@ (800e0f8 <HAL_RCC_GetHCLKFreq+0x54>)
 800e0bc:	5ccb      	ldrb	r3, [r1, r3]
 800e0be:	f003 031f 	and.w	r3, r3, #31
 800e0c2:	fa22 f303 	lsr.w	r3, r2, r3
 800e0c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e0c8:	4b0a      	ldr	r3, [pc, #40]	@ (800e0f4 <HAL_RCC_GetHCLKFreq+0x50>)
 800e0ca:	699b      	ldr	r3, [r3, #24]
 800e0cc:	f003 030f 	and.w	r3, r3, #15
 800e0d0:	4a09      	ldr	r2, [pc, #36]	@ (800e0f8 <HAL_RCC_GetHCLKFreq+0x54>)
 800e0d2:	5cd3      	ldrb	r3, [r2, r3]
 800e0d4:	f003 031f 	and.w	r3, r3, #31
 800e0d8:	687a      	ldr	r2, [r7, #4]
 800e0da:	fa22 f303 	lsr.w	r3, r2, r3
 800e0de:	4a07      	ldr	r2, [pc, #28]	@ (800e0fc <HAL_RCC_GetHCLKFreq+0x58>)
 800e0e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e0e2:	4a07      	ldr	r2, [pc, #28]	@ (800e100 <HAL_RCC_GetHCLKFreq+0x5c>)
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e0e8:	4b04      	ldr	r3, [pc, #16]	@ (800e0fc <HAL_RCC_GetHCLKFreq+0x58>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3708      	adds	r7, #8
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}
 800e0f4:	58024400 	.word	0x58024400
 800e0f8:	0801b3c0 	.word	0x0801b3c0
 800e0fc:	2400001c 	.word	0x2400001c
 800e100:	24000018 	.word	0x24000018

0800e104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e108:	f7ff ffcc 	bl	800e0a4 <HAL_RCC_GetHCLKFreq>
 800e10c:	4602      	mov	r2, r0
 800e10e:	4b06      	ldr	r3, [pc, #24]	@ (800e128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e110:	69db      	ldr	r3, [r3, #28]
 800e112:	091b      	lsrs	r3, r3, #4
 800e114:	f003 0307 	and.w	r3, r3, #7
 800e118:	4904      	ldr	r1, [pc, #16]	@ (800e12c <HAL_RCC_GetPCLK1Freq+0x28>)
 800e11a:	5ccb      	ldrb	r3, [r1, r3]
 800e11c:	f003 031f 	and.w	r3, r3, #31
 800e120:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e124:	4618      	mov	r0, r3
 800e126:	bd80      	pop	{r7, pc}
 800e128:	58024400 	.word	0x58024400
 800e12c:	0801b3c0 	.word	0x0801b3c0

0800e130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e134:	f7ff ffb6 	bl	800e0a4 <HAL_RCC_GetHCLKFreq>
 800e138:	4602      	mov	r2, r0
 800e13a:	4b06      	ldr	r3, [pc, #24]	@ (800e154 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e13c:	69db      	ldr	r3, [r3, #28]
 800e13e:	0a1b      	lsrs	r3, r3, #8
 800e140:	f003 0307 	and.w	r3, r3, #7
 800e144:	4904      	ldr	r1, [pc, #16]	@ (800e158 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e146:	5ccb      	ldrb	r3, [r1, r3]
 800e148:	f003 031f 	and.w	r3, r3, #31
 800e14c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e150:	4618      	mov	r0, r3
 800e152:	bd80      	pop	{r7, pc}
 800e154:	58024400 	.word	0x58024400
 800e158:	0801b3c0 	.word	0x0801b3c0

0800e15c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e15c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e160:	b0ca      	sub	sp, #296	@ 0x128
 800e162:	af00      	add	r7, sp, #0
 800e164:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e168:	2300      	movs	r3, #0
 800e16a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e16e:	2300      	movs	r3, #0
 800e170:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e17c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800e180:	2500      	movs	r5, #0
 800e182:	ea54 0305 	orrs.w	r3, r4, r5
 800e186:	d049      	beq.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800e188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e18c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e18e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e192:	d02f      	beq.n	800e1f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800e194:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e198:	d828      	bhi.n	800e1ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e19a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e19e:	d01a      	beq.n	800e1d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e1a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e1a4:	d822      	bhi.n	800e1ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d003      	beq.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800e1aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e1ae:	d007      	beq.n	800e1c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e1b0:	e01c      	b.n	800e1ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1b2:	4bb8      	ldr	r3, [pc, #736]	@ (800e494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e1b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1b6:	4ab7      	ldr	r2, [pc, #732]	@ (800e494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e1b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e1bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e1be:	e01a      	b.n	800e1f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e1c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1c4:	3308      	adds	r3, #8
 800e1c6:	2102      	movs	r1, #2
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f001 fc8f 	bl	800faec <RCCEx_PLL2_Config>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e1d4:	e00f      	b.n	800e1f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1da:	3328      	adds	r3, #40	@ 0x28
 800e1dc:	2102      	movs	r1, #2
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f001 fd36 	bl	800fc50 <RCCEx_PLL3_Config>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e1ea:	e004      	b.n	800e1f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e1f2:	e000      	b.n	800e1f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800e1f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e1f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d10a      	bne.n	800e214 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e1fe:	4ba5      	ldr	r3, [pc, #660]	@ (800e494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e202:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e20a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e20c:	4aa1      	ldr	r2, [pc, #644]	@ (800e494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e20e:	430b      	orrs	r3, r1
 800e210:	6513      	str	r3, [r2, #80]	@ 0x50
 800e212:	e003      	b.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e214:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e218:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e21c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e224:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800e228:	f04f 0900 	mov.w	r9, #0
 800e22c:	ea58 0309 	orrs.w	r3, r8, r9
 800e230:	d047      	beq.n	800e2c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800e232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e238:	2b04      	cmp	r3, #4
 800e23a:	d82a      	bhi.n	800e292 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e23c:	a201      	add	r2, pc, #4	@ (adr r2, 800e244 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800e23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e242:	bf00      	nop
 800e244:	0800e259 	.word	0x0800e259
 800e248:	0800e267 	.word	0x0800e267
 800e24c:	0800e27d 	.word	0x0800e27d
 800e250:	0800e29b 	.word	0x0800e29b
 800e254:	0800e29b 	.word	0x0800e29b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e258:	4b8e      	ldr	r3, [pc, #568]	@ (800e494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e25a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e25c:	4a8d      	ldr	r2, [pc, #564]	@ (800e494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e25e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e262:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e264:	e01a      	b.n	800e29c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e26a:	3308      	adds	r3, #8
 800e26c:	2100      	movs	r1, #0
 800e26e:	4618      	mov	r0, r3
 800e270:	f001 fc3c 	bl	800faec <RCCEx_PLL2_Config>
 800e274:	4603      	mov	r3, r0
 800e276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e27a:	e00f      	b.n	800e29c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e27c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e280:	3328      	adds	r3, #40	@ 0x28
 800e282:	2100      	movs	r1, #0
 800e284:	4618      	mov	r0, r3
 800e286:	f001 fce3 	bl	800fc50 <RCCEx_PLL3_Config>
 800e28a:	4603      	mov	r3, r0
 800e28c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e290:	e004      	b.n	800e29c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e292:	2301      	movs	r3, #1
 800e294:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e298:	e000      	b.n	800e29c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800e29a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e29c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d10a      	bne.n	800e2ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e2a4:	4b7b      	ldr	r3, [pc, #492]	@ (800e494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e2a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2a8:	f023 0107 	bic.w	r1, r3, #7
 800e2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2b2:	4a78      	ldr	r2, [pc, #480]	@ (800e494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e2b4:	430b      	orrs	r3, r1
 800e2b6:	6513      	str	r3, [r2, #80]	@ 0x50
 800e2b8:	e003      	b.n	800e2c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e2be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800e2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ca:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800e2ce:	f04f 0b00 	mov.w	fp, #0
 800e2d2:	ea5a 030b 	orrs.w	r3, sl, fp
 800e2d6:	d04c      	beq.n	800e372 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800e2d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e2de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e2e2:	d030      	beq.n	800e346 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800e2e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e2e8:	d829      	bhi.n	800e33e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e2ea:	2bc0      	cmp	r3, #192	@ 0xc0
 800e2ec:	d02d      	beq.n	800e34a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800e2ee:	2bc0      	cmp	r3, #192	@ 0xc0
 800e2f0:	d825      	bhi.n	800e33e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e2f2:	2b80      	cmp	r3, #128	@ 0x80
 800e2f4:	d018      	beq.n	800e328 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800e2f6:	2b80      	cmp	r3, #128	@ 0x80
 800e2f8:	d821      	bhi.n	800e33e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d002      	beq.n	800e304 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800e2fe:	2b40      	cmp	r3, #64	@ 0x40
 800e300:	d007      	beq.n	800e312 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800e302:	e01c      	b.n	800e33e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e304:	4b63      	ldr	r3, [pc, #396]	@ (800e494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e308:	4a62      	ldr	r2, [pc, #392]	@ (800e494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e30a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e30e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e310:	e01c      	b.n	800e34c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e316:	3308      	adds	r3, #8
 800e318:	2100      	movs	r1, #0
 800e31a:	4618      	mov	r0, r3
 800e31c:	f001 fbe6 	bl	800faec <RCCEx_PLL2_Config>
 800e320:	4603      	mov	r3, r0
 800e322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e326:	e011      	b.n	800e34c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e32c:	3328      	adds	r3, #40	@ 0x28
 800e32e:	2100      	movs	r1, #0
 800e330:	4618      	mov	r0, r3
 800e332:	f001 fc8d 	bl	800fc50 <RCCEx_PLL3_Config>
 800e336:	4603      	mov	r3, r0
 800e338:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e33c:	e006      	b.n	800e34c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e33e:	2301      	movs	r3, #1
 800e340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e344:	e002      	b.n	800e34c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800e346:	bf00      	nop
 800e348:	e000      	b.n	800e34c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800e34a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e34c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e350:	2b00      	cmp	r3, #0
 800e352:	d10a      	bne.n	800e36a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800e354:	4b4f      	ldr	r3, [pc, #316]	@ (800e494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e358:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800e35c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e362:	4a4c      	ldr	r2, [pc, #304]	@ (800e494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e364:	430b      	orrs	r3, r1
 800e366:	6513      	str	r3, [r2, #80]	@ 0x50
 800e368:	e003      	b.n	800e372 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e36a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e36e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e37a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800e37e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800e382:	2300      	movs	r3, #0
 800e384:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800e388:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800e38c:	460b      	mov	r3, r1
 800e38e:	4313      	orrs	r3, r2
 800e390:	d053      	beq.n	800e43a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800e392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e396:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e39a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e39e:	d035      	beq.n	800e40c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800e3a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e3a4:	d82e      	bhi.n	800e404 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e3a6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e3aa:	d031      	beq.n	800e410 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800e3ac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e3b0:	d828      	bhi.n	800e404 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e3b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e3b6:	d01a      	beq.n	800e3ee <HAL_RCCEx_PeriphCLKConfig+0x292>
 800e3b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e3bc:	d822      	bhi.n	800e404 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d003      	beq.n	800e3ca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800e3c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e3c6:	d007      	beq.n	800e3d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800e3c8:	e01c      	b.n	800e404 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e3ca:	4b32      	ldr	r3, [pc, #200]	@ (800e494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e3cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3ce:	4a31      	ldr	r2, [pc, #196]	@ (800e494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e3d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e3d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e3d6:	e01c      	b.n	800e412 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e3d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3dc:	3308      	adds	r3, #8
 800e3de:	2100      	movs	r1, #0
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f001 fb83 	bl	800faec <RCCEx_PLL2_Config>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e3ec:	e011      	b.n	800e412 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e3ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3f2:	3328      	adds	r3, #40	@ 0x28
 800e3f4:	2100      	movs	r1, #0
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f001 fc2a 	bl	800fc50 <RCCEx_PLL3_Config>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e402:	e006      	b.n	800e412 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e404:	2301      	movs	r3, #1
 800e406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e40a:	e002      	b.n	800e412 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800e40c:	bf00      	nop
 800e40e:	e000      	b.n	800e412 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800e410:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e416:	2b00      	cmp	r3, #0
 800e418:	d10b      	bne.n	800e432 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e41a:	4b1e      	ldr	r3, [pc, #120]	@ (800e494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e41c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e41e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800e422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e426:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e42a:	4a1a      	ldr	r2, [pc, #104]	@ (800e494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e42c:	430b      	orrs	r3, r1
 800e42e:	6593      	str	r3, [r2, #88]	@ 0x58
 800e430:	e003      	b.n	800e43a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e436:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e43a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e442:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800e446:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800e44a:	2300      	movs	r3, #0
 800e44c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800e450:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800e454:	460b      	mov	r3, r1
 800e456:	4313      	orrs	r3, r2
 800e458:	d056      	beq.n	800e508 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800e45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e45e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e462:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e466:	d038      	beq.n	800e4da <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800e468:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e46c:	d831      	bhi.n	800e4d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e46e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e472:	d034      	beq.n	800e4de <HAL_RCCEx_PeriphCLKConfig+0x382>
 800e474:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e478:	d82b      	bhi.n	800e4d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e47a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e47e:	d01d      	beq.n	800e4bc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800e480:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e484:	d825      	bhi.n	800e4d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e486:	2b00      	cmp	r3, #0
 800e488:	d006      	beq.n	800e498 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800e48a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e48e:	d00a      	beq.n	800e4a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800e490:	e01f      	b.n	800e4d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e492:	bf00      	nop
 800e494:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e498:	4ba2      	ldr	r3, [pc, #648]	@ (800e724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e49a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e49c:	4aa1      	ldr	r2, [pc, #644]	@ (800e724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e49e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e4a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e4a4:	e01c      	b.n	800e4e0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4aa:	3308      	adds	r3, #8
 800e4ac:	2100      	movs	r1, #0
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f001 fb1c 	bl	800faec <RCCEx_PLL2_Config>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e4ba:	e011      	b.n	800e4e0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e4bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4c0:	3328      	adds	r3, #40	@ 0x28
 800e4c2:	2100      	movs	r1, #0
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f001 fbc3 	bl	800fc50 <RCCEx_PLL3_Config>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e4d0:	e006      	b.n	800e4e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e4d8:	e002      	b.n	800e4e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800e4da:	bf00      	nop
 800e4dc:	e000      	b.n	800e4e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800e4de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e4e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d10b      	bne.n	800e500 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e4e8:	4b8e      	ldr	r3, [pc, #568]	@ (800e724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e4ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4ec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800e4f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e4f8:	4a8a      	ldr	r2, [pc, #552]	@ (800e724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e4fa:	430b      	orrs	r3, r1
 800e4fc:	6593      	str	r3, [r2, #88]	@ 0x58
 800e4fe:	e003      	b.n	800e508 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e500:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e504:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e510:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800e514:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e518:	2300      	movs	r3, #0
 800e51a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e51e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800e522:	460b      	mov	r3, r1
 800e524:	4313      	orrs	r3, r2
 800e526:	d03a      	beq.n	800e59e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800e528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e52c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e52e:	2b30      	cmp	r3, #48	@ 0x30
 800e530:	d01f      	beq.n	800e572 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800e532:	2b30      	cmp	r3, #48	@ 0x30
 800e534:	d819      	bhi.n	800e56a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800e536:	2b20      	cmp	r3, #32
 800e538:	d00c      	beq.n	800e554 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800e53a:	2b20      	cmp	r3, #32
 800e53c:	d815      	bhi.n	800e56a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d019      	beq.n	800e576 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800e542:	2b10      	cmp	r3, #16
 800e544:	d111      	bne.n	800e56a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e546:	4b77      	ldr	r3, [pc, #476]	@ (800e724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e54a:	4a76      	ldr	r2, [pc, #472]	@ (800e724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e54c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e550:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800e552:	e011      	b.n	800e578 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e558:	3308      	adds	r3, #8
 800e55a:	2102      	movs	r1, #2
 800e55c:	4618      	mov	r0, r3
 800e55e:	f001 fac5 	bl	800faec <RCCEx_PLL2_Config>
 800e562:	4603      	mov	r3, r0
 800e564:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800e568:	e006      	b.n	800e578 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e56a:	2301      	movs	r3, #1
 800e56c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e570:	e002      	b.n	800e578 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800e572:	bf00      	nop
 800e574:	e000      	b.n	800e578 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800e576:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e578:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d10a      	bne.n	800e596 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e580:	4b68      	ldr	r3, [pc, #416]	@ (800e724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e584:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800e588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e58c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e58e:	4a65      	ldr	r2, [pc, #404]	@ (800e724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e590:	430b      	orrs	r3, r1
 800e592:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e594:	e003      	b.n	800e59e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e59a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e59e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800e5aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e5b4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800e5b8:	460b      	mov	r3, r1
 800e5ba:	4313      	orrs	r3, r2
 800e5bc:	d051      	beq.n	800e662 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800e5be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e5c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e5c8:	d035      	beq.n	800e636 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800e5ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e5ce:	d82e      	bhi.n	800e62e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e5d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e5d4:	d031      	beq.n	800e63a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800e5d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e5da:	d828      	bhi.n	800e62e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e5dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e5e0:	d01a      	beq.n	800e618 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800e5e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e5e6:	d822      	bhi.n	800e62e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d003      	beq.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800e5ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5f0:	d007      	beq.n	800e602 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800e5f2:	e01c      	b.n	800e62e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e5f4:	4b4b      	ldr	r3, [pc, #300]	@ (800e724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e5f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5f8:	4a4a      	ldr	r2, [pc, #296]	@ (800e724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e5fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e5fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e600:	e01c      	b.n	800e63c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e606:	3308      	adds	r3, #8
 800e608:	2100      	movs	r1, #0
 800e60a:	4618      	mov	r0, r3
 800e60c:	f001 fa6e 	bl	800faec <RCCEx_PLL2_Config>
 800e610:	4603      	mov	r3, r0
 800e612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e616:	e011      	b.n	800e63c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e61c:	3328      	adds	r3, #40	@ 0x28
 800e61e:	2100      	movs	r1, #0
 800e620:	4618      	mov	r0, r3
 800e622:	f001 fb15 	bl	800fc50 <RCCEx_PLL3_Config>
 800e626:	4603      	mov	r3, r0
 800e628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e62c:	e006      	b.n	800e63c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e62e:	2301      	movs	r3, #1
 800e630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e634:	e002      	b.n	800e63c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e636:	bf00      	nop
 800e638:	e000      	b.n	800e63c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e63a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e63c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e640:	2b00      	cmp	r3, #0
 800e642:	d10a      	bne.n	800e65a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e644:	4b37      	ldr	r3, [pc, #220]	@ (800e724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e648:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800e64c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e652:	4a34      	ldr	r2, [pc, #208]	@ (800e724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e654:	430b      	orrs	r3, r1
 800e656:	6513      	str	r3, [r2, #80]	@ 0x50
 800e658:	e003      	b.n	800e662 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e65a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e65e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800e66e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e672:	2300      	movs	r3, #0
 800e674:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e678:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800e67c:	460b      	mov	r3, r1
 800e67e:	4313      	orrs	r3, r2
 800e680:	d056      	beq.n	800e730 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e686:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e688:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e68c:	d033      	beq.n	800e6f6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800e68e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e692:	d82c      	bhi.n	800e6ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e694:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e698:	d02f      	beq.n	800e6fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800e69a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e69e:	d826      	bhi.n	800e6ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e6a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e6a4:	d02b      	beq.n	800e6fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800e6a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e6aa:	d820      	bhi.n	800e6ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e6ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e6b0:	d012      	beq.n	800e6d8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800e6b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e6b6:	d81a      	bhi.n	800e6ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d022      	beq.n	800e702 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800e6bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e6c0:	d115      	bne.n	800e6ee <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e6c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6c6:	3308      	adds	r3, #8
 800e6c8:	2101      	movs	r1, #1
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f001 fa0e 	bl	800faec <RCCEx_PLL2_Config>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e6d6:	e015      	b.n	800e704 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e6d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6dc:	3328      	adds	r3, #40	@ 0x28
 800e6de:	2101      	movs	r1, #1
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f001 fab5 	bl	800fc50 <RCCEx_PLL3_Config>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e6ec:	e00a      	b.n	800e704 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e6f4:	e006      	b.n	800e704 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e6f6:	bf00      	nop
 800e6f8:	e004      	b.n	800e704 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e6fa:	bf00      	nop
 800e6fc:	e002      	b.n	800e704 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e6fe:	bf00      	nop
 800e700:	e000      	b.n	800e704 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e702:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e704:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d10d      	bne.n	800e728 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e70c:	4b05      	ldr	r3, [pc, #20]	@ (800e724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e70e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e710:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800e714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e718:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e71a:	4a02      	ldr	r2, [pc, #8]	@ (800e724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e71c:	430b      	orrs	r3, r1
 800e71e:	6513      	str	r3, [r2, #80]	@ 0x50
 800e720:	e006      	b.n	800e730 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e722:	bf00      	nop
 800e724:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e728:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e72c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e738:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800e73c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e740:	2300      	movs	r3, #0
 800e742:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e746:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800e74a:	460b      	mov	r3, r1
 800e74c:	4313      	orrs	r3, r2
 800e74e:	d055      	beq.n	800e7fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800e750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e754:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e758:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e75c:	d033      	beq.n	800e7c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800e75e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e762:	d82c      	bhi.n	800e7be <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e768:	d02f      	beq.n	800e7ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800e76a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e76e:	d826      	bhi.n	800e7be <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e770:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e774:	d02b      	beq.n	800e7ce <HAL_RCCEx_PeriphCLKConfig+0x672>
 800e776:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e77a:	d820      	bhi.n	800e7be <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e77c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e780:	d012      	beq.n	800e7a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800e782:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e786:	d81a      	bhi.n	800e7be <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d022      	beq.n	800e7d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800e78c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e790:	d115      	bne.n	800e7be <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e796:	3308      	adds	r3, #8
 800e798:	2101      	movs	r1, #1
 800e79a:	4618      	mov	r0, r3
 800e79c:	f001 f9a6 	bl	800faec <RCCEx_PLL2_Config>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e7a6:	e015      	b.n	800e7d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e7a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7ac:	3328      	adds	r3, #40	@ 0x28
 800e7ae:	2101      	movs	r1, #1
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f001 fa4d 	bl	800fc50 <RCCEx_PLL3_Config>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e7bc:	e00a      	b.n	800e7d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e7c4:	e006      	b.n	800e7d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e7c6:	bf00      	nop
 800e7c8:	e004      	b.n	800e7d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e7ca:	bf00      	nop
 800e7cc:	e002      	b.n	800e7d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e7ce:	bf00      	nop
 800e7d0:	e000      	b.n	800e7d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e7d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e7d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d10b      	bne.n	800e7f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e7dc:	4ba3      	ldr	r3, [pc, #652]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e7de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7e0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e7e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e7ec:	4a9f      	ldr	r2, [pc, #636]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e7ee:	430b      	orrs	r3, r1
 800e7f0:	6593      	str	r3, [r2, #88]	@ 0x58
 800e7f2:	e003      	b.n	800e7fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e7f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e7fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e804:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800e808:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e80c:	2300      	movs	r3, #0
 800e80e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e812:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e816:	460b      	mov	r3, r1
 800e818:	4313      	orrs	r3, r2
 800e81a:	d037      	beq.n	800e88c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800e81c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e822:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e826:	d00e      	beq.n	800e846 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800e828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e82c:	d816      	bhi.n	800e85c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d018      	beq.n	800e864 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800e832:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e836:	d111      	bne.n	800e85c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e838:	4b8c      	ldr	r3, [pc, #560]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e83a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e83c:	4a8b      	ldr	r2, [pc, #556]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e83e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e842:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e844:	e00f      	b.n	800e866 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e84a:	3308      	adds	r3, #8
 800e84c:	2101      	movs	r1, #1
 800e84e:	4618      	mov	r0, r3
 800e850:	f001 f94c 	bl	800faec <RCCEx_PLL2_Config>
 800e854:	4603      	mov	r3, r0
 800e856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e85a:	e004      	b.n	800e866 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e85c:	2301      	movs	r3, #1
 800e85e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e862:	e000      	b.n	800e866 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800e864:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d10a      	bne.n	800e884 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e86e:	4b7f      	ldr	r3, [pc, #508]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e872:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e87a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e87c:	4a7b      	ldr	r2, [pc, #492]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e87e:	430b      	orrs	r3, r1
 800e880:	6513      	str	r3, [r2, #80]	@ 0x50
 800e882:	e003      	b.n	800e88c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e884:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e888:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e88c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e894:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800e898:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e89c:	2300      	movs	r3, #0
 800e89e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e8a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800e8a6:	460b      	mov	r3, r1
 800e8a8:	4313      	orrs	r3, r2
 800e8aa:	d039      	beq.n	800e920 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e8ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e8b2:	2b03      	cmp	r3, #3
 800e8b4:	d81c      	bhi.n	800e8f0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800e8b6:	a201      	add	r2, pc, #4	@ (adr r2, 800e8bc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800e8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8bc:	0800e8f9 	.word	0x0800e8f9
 800e8c0:	0800e8cd 	.word	0x0800e8cd
 800e8c4:	0800e8db 	.word	0x0800e8db
 800e8c8:	0800e8f9 	.word	0x0800e8f9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e8cc:	4b67      	ldr	r3, [pc, #412]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e8ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8d0:	4a66      	ldr	r2, [pc, #408]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e8d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e8d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e8d8:	e00f      	b.n	800e8fa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e8da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8de:	3308      	adds	r3, #8
 800e8e0:	2102      	movs	r1, #2
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f001 f902 	bl	800faec <RCCEx_PLL2_Config>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e8ee:	e004      	b.n	800e8fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e8f6:	e000      	b.n	800e8fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800e8f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e8fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d10a      	bne.n	800e918 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e902:	4b5a      	ldr	r3, [pc, #360]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e906:	f023 0103 	bic.w	r1, r3, #3
 800e90a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e90e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e910:	4a56      	ldr	r2, [pc, #344]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e912:	430b      	orrs	r3, r1
 800e914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e916:	e003      	b.n	800e920 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e91c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e928:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800e92c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e930:	2300      	movs	r3, #0
 800e932:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e936:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800e93a:	460b      	mov	r3, r1
 800e93c:	4313      	orrs	r3, r2
 800e93e:	f000 809f 	beq.w	800ea80 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e942:	4b4b      	ldr	r3, [pc, #300]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	4a4a      	ldr	r2, [pc, #296]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e94c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e94e:	f7f4 fda1 	bl	8003494 <HAL_GetTick>
 800e952:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e956:	e00b      	b.n	800e970 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e958:	f7f4 fd9c 	bl	8003494 <HAL_GetTick>
 800e95c:	4602      	mov	r2, r0
 800e95e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e962:	1ad3      	subs	r3, r2, r3
 800e964:	2b64      	cmp	r3, #100	@ 0x64
 800e966:	d903      	bls.n	800e970 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800e968:	2303      	movs	r3, #3
 800e96a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e96e:	e005      	b.n	800e97c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e970:	4b3f      	ldr	r3, [pc, #252]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d0ed      	beq.n	800e958 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800e97c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e980:	2b00      	cmp	r3, #0
 800e982:	d179      	bne.n	800ea78 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e984:	4b39      	ldr	r3, [pc, #228]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e986:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e98c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e990:	4053      	eors	r3, r2
 800e992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e996:	2b00      	cmp	r3, #0
 800e998:	d015      	beq.n	800e9c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e99a:	4b34      	ldr	r3, [pc, #208]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e99c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e99e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e9a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e9a6:	4b31      	ldr	r3, [pc, #196]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e9aa:	4a30      	ldr	r2, [pc, #192]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e9b0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e9b2:	4b2e      	ldr	r3, [pc, #184]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e9b6:	4a2d      	ldr	r2, [pc, #180]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e9bc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e9be:	4a2b      	ldr	r2, [pc, #172]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e9c4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e9c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e9ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e9d2:	d118      	bne.n	800ea06 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e9d4:	f7f4 fd5e 	bl	8003494 <HAL_GetTick>
 800e9d8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e9dc:	e00d      	b.n	800e9fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e9de:	f7f4 fd59 	bl	8003494 <HAL_GetTick>
 800e9e2:	4602      	mov	r2, r0
 800e9e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e9e8:	1ad2      	subs	r2, r2, r3
 800e9ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d903      	bls.n	800e9fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800e9f2:	2303      	movs	r3, #3
 800e9f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800e9f8:	e005      	b.n	800ea06 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e9fa:	4b1c      	ldr	r3, [pc, #112]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e9fe:	f003 0302 	and.w	r3, r3, #2
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d0eb      	beq.n	800e9de <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800ea06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d129      	bne.n	800ea62 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ea0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ea16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ea1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ea1e:	d10e      	bne.n	800ea3e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800ea20:	4b12      	ldr	r3, [pc, #72]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea22:	691b      	ldr	r3, [r3, #16]
 800ea24:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800ea28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ea30:	091a      	lsrs	r2, r3, #4
 800ea32:	4b10      	ldr	r3, [pc, #64]	@ (800ea74 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800ea34:	4013      	ands	r3, r2
 800ea36:	4a0d      	ldr	r2, [pc, #52]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea38:	430b      	orrs	r3, r1
 800ea3a:	6113      	str	r3, [r2, #16]
 800ea3c:	e005      	b.n	800ea4a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800ea3e:	4b0b      	ldr	r3, [pc, #44]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea40:	691b      	ldr	r3, [r3, #16]
 800ea42:	4a0a      	ldr	r2, [pc, #40]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea44:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ea48:	6113      	str	r3, [r2, #16]
 800ea4a:	4b08      	ldr	r3, [pc, #32]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea4c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ea4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ea56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ea5a:	4a04      	ldr	r2, [pc, #16]	@ (800ea6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea5c:	430b      	orrs	r3, r1
 800ea5e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ea60:	e00e      	b.n	800ea80 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ea62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800ea6a:	e009      	b.n	800ea80 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800ea6c:	58024400 	.word	0x58024400
 800ea70:	58024800 	.word	0x58024800
 800ea74:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ea80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea88:	f002 0301 	and.w	r3, r2, #1
 800ea8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ea90:	2300      	movs	r3, #0
 800ea92:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ea96:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ea9a:	460b      	mov	r3, r1
 800ea9c:	4313      	orrs	r3, r2
 800ea9e:	f000 8089 	beq.w	800ebb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800eaa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eaa6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eaa8:	2b28      	cmp	r3, #40	@ 0x28
 800eaaa:	d86b      	bhi.n	800eb84 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800eaac:	a201      	add	r2, pc, #4	@ (adr r2, 800eab4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800eaae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab2:	bf00      	nop
 800eab4:	0800eb8d 	.word	0x0800eb8d
 800eab8:	0800eb85 	.word	0x0800eb85
 800eabc:	0800eb85 	.word	0x0800eb85
 800eac0:	0800eb85 	.word	0x0800eb85
 800eac4:	0800eb85 	.word	0x0800eb85
 800eac8:	0800eb85 	.word	0x0800eb85
 800eacc:	0800eb85 	.word	0x0800eb85
 800ead0:	0800eb85 	.word	0x0800eb85
 800ead4:	0800eb59 	.word	0x0800eb59
 800ead8:	0800eb85 	.word	0x0800eb85
 800eadc:	0800eb85 	.word	0x0800eb85
 800eae0:	0800eb85 	.word	0x0800eb85
 800eae4:	0800eb85 	.word	0x0800eb85
 800eae8:	0800eb85 	.word	0x0800eb85
 800eaec:	0800eb85 	.word	0x0800eb85
 800eaf0:	0800eb85 	.word	0x0800eb85
 800eaf4:	0800eb6f 	.word	0x0800eb6f
 800eaf8:	0800eb85 	.word	0x0800eb85
 800eafc:	0800eb85 	.word	0x0800eb85
 800eb00:	0800eb85 	.word	0x0800eb85
 800eb04:	0800eb85 	.word	0x0800eb85
 800eb08:	0800eb85 	.word	0x0800eb85
 800eb0c:	0800eb85 	.word	0x0800eb85
 800eb10:	0800eb85 	.word	0x0800eb85
 800eb14:	0800eb8d 	.word	0x0800eb8d
 800eb18:	0800eb85 	.word	0x0800eb85
 800eb1c:	0800eb85 	.word	0x0800eb85
 800eb20:	0800eb85 	.word	0x0800eb85
 800eb24:	0800eb85 	.word	0x0800eb85
 800eb28:	0800eb85 	.word	0x0800eb85
 800eb2c:	0800eb85 	.word	0x0800eb85
 800eb30:	0800eb85 	.word	0x0800eb85
 800eb34:	0800eb8d 	.word	0x0800eb8d
 800eb38:	0800eb85 	.word	0x0800eb85
 800eb3c:	0800eb85 	.word	0x0800eb85
 800eb40:	0800eb85 	.word	0x0800eb85
 800eb44:	0800eb85 	.word	0x0800eb85
 800eb48:	0800eb85 	.word	0x0800eb85
 800eb4c:	0800eb85 	.word	0x0800eb85
 800eb50:	0800eb85 	.word	0x0800eb85
 800eb54:	0800eb8d 	.word	0x0800eb8d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eb58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb5c:	3308      	adds	r3, #8
 800eb5e:	2101      	movs	r1, #1
 800eb60:	4618      	mov	r0, r3
 800eb62:	f000 ffc3 	bl	800faec <RCCEx_PLL2_Config>
 800eb66:	4603      	mov	r3, r0
 800eb68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800eb6c:	e00f      	b.n	800eb8e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eb6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb72:	3328      	adds	r3, #40	@ 0x28
 800eb74:	2101      	movs	r1, #1
 800eb76:	4618      	mov	r0, r3
 800eb78:	f001 f86a 	bl	800fc50 <RCCEx_PLL3_Config>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800eb82:	e004      	b.n	800eb8e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eb84:	2301      	movs	r3, #1
 800eb86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800eb8a:	e000      	b.n	800eb8e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800eb8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d10a      	bne.n	800ebac <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800eb96:	4bbf      	ldr	r3, [pc, #764]	@ (800ee94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800eb98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb9a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800eb9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eba2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eba4:	4abb      	ldr	r2, [pc, #748]	@ (800ee94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800eba6:	430b      	orrs	r3, r1
 800eba8:	6553      	str	r3, [r2, #84]	@ 0x54
 800ebaa:	e003      	b.n	800ebb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ebb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ebb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebbc:	f002 0302 	and.w	r3, r2, #2
 800ebc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ebca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ebce:	460b      	mov	r3, r1
 800ebd0:	4313      	orrs	r3, r2
 800ebd2:	d041      	beq.n	800ec58 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ebd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ebda:	2b05      	cmp	r3, #5
 800ebdc:	d824      	bhi.n	800ec28 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800ebde:	a201      	add	r2, pc, #4	@ (adr r2, 800ebe4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800ebe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebe4:	0800ec31 	.word	0x0800ec31
 800ebe8:	0800ebfd 	.word	0x0800ebfd
 800ebec:	0800ec13 	.word	0x0800ec13
 800ebf0:	0800ec31 	.word	0x0800ec31
 800ebf4:	0800ec31 	.word	0x0800ec31
 800ebf8:	0800ec31 	.word	0x0800ec31
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ebfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec00:	3308      	adds	r3, #8
 800ec02:	2101      	movs	r1, #1
 800ec04:	4618      	mov	r0, r3
 800ec06:	f000 ff71 	bl	800faec <RCCEx_PLL2_Config>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ec10:	e00f      	b.n	800ec32 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ec12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec16:	3328      	adds	r3, #40	@ 0x28
 800ec18:	2101      	movs	r1, #1
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f001 f818 	bl	800fc50 <RCCEx_PLL3_Config>
 800ec20:	4603      	mov	r3, r0
 800ec22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ec26:	e004      	b.n	800ec32 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ec28:	2301      	movs	r3, #1
 800ec2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ec2e:	e000      	b.n	800ec32 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800ec30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d10a      	bne.n	800ec50 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ec3a:	4b96      	ldr	r3, [pc, #600]	@ (800ee94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ec3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec3e:	f023 0107 	bic.w	r1, r3, #7
 800ec42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec48:	4a92      	ldr	r2, [pc, #584]	@ (800ee94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ec4a:	430b      	orrs	r3, r1
 800ec4c:	6553      	str	r3, [r2, #84]	@ 0x54
 800ec4e:	e003      	b.n	800ec58 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ec58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec60:	f002 0304 	and.w	r3, r2, #4
 800ec64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ec68:	2300      	movs	r3, #0
 800ec6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ec6e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800ec72:	460b      	mov	r3, r1
 800ec74:	4313      	orrs	r3, r2
 800ec76:	d044      	beq.n	800ed02 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ec78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ec80:	2b05      	cmp	r3, #5
 800ec82:	d825      	bhi.n	800ecd0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800ec84:	a201      	add	r2, pc, #4	@ (adr r2, 800ec8c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800ec86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec8a:	bf00      	nop
 800ec8c:	0800ecd9 	.word	0x0800ecd9
 800ec90:	0800eca5 	.word	0x0800eca5
 800ec94:	0800ecbb 	.word	0x0800ecbb
 800ec98:	0800ecd9 	.word	0x0800ecd9
 800ec9c:	0800ecd9 	.word	0x0800ecd9
 800eca0:	0800ecd9 	.word	0x0800ecd9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eca8:	3308      	adds	r3, #8
 800ecaa:	2101      	movs	r1, #1
 800ecac:	4618      	mov	r0, r3
 800ecae:	f000 ff1d 	bl	800faec <RCCEx_PLL2_Config>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ecb8:	e00f      	b.n	800ecda <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ecba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecbe:	3328      	adds	r3, #40	@ 0x28
 800ecc0:	2101      	movs	r1, #1
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f000 ffc4 	bl	800fc50 <RCCEx_PLL3_Config>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ecce:	e004      	b.n	800ecda <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ecd6:	e000      	b.n	800ecda <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800ecd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ecda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d10b      	bne.n	800ecfa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ece2:	4b6c      	ldr	r3, [pc, #432]	@ (800ee94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ece4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ece6:	f023 0107 	bic.w	r1, r3, #7
 800ecea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ecf2:	4a68      	ldr	r2, [pc, #416]	@ (800ee94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ecf4:	430b      	orrs	r3, r1
 800ecf6:	6593      	str	r3, [r2, #88]	@ 0x58
 800ecf8:	e003      	b.n	800ed02 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ecfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ecfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ed02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed0a:	f002 0320 	and.w	r3, r2, #32
 800ed0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ed12:	2300      	movs	r3, #0
 800ed14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ed18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	4313      	orrs	r3, r2
 800ed20:	d055      	beq.n	800edce <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ed22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ed2e:	d033      	beq.n	800ed98 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800ed30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ed34:	d82c      	bhi.n	800ed90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ed36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed3a:	d02f      	beq.n	800ed9c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800ed3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed40:	d826      	bhi.n	800ed90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ed42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ed46:	d02b      	beq.n	800eda0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800ed48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ed4c:	d820      	bhi.n	800ed90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ed4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed52:	d012      	beq.n	800ed7a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ed54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed58:	d81a      	bhi.n	800ed90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d022      	beq.n	800eda4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800ed5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ed62:	d115      	bne.n	800ed90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ed64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed68:	3308      	adds	r3, #8
 800ed6a:	2100      	movs	r1, #0
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f000 febd 	bl	800faec <RCCEx_PLL2_Config>
 800ed72:	4603      	mov	r3, r0
 800ed74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ed78:	e015      	b.n	800eda6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ed7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed7e:	3328      	adds	r3, #40	@ 0x28
 800ed80:	2102      	movs	r1, #2
 800ed82:	4618      	mov	r0, r3
 800ed84:	f000 ff64 	bl	800fc50 <RCCEx_PLL3_Config>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ed8e:	e00a      	b.n	800eda6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ed90:	2301      	movs	r3, #1
 800ed92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ed96:	e006      	b.n	800eda6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ed98:	bf00      	nop
 800ed9a:	e004      	b.n	800eda6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ed9c:	bf00      	nop
 800ed9e:	e002      	b.n	800eda6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800eda0:	bf00      	nop
 800eda2:	e000      	b.n	800eda6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800eda4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eda6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d10b      	bne.n	800edc6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800edae:	4b39      	ldr	r3, [pc, #228]	@ (800ee94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800edb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edb2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800edb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800edba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edbe:	4a35      	ldr	r2, [pc, #212]	@ (800ee94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800edc0:	430b      	orrs	r3, r1
 800edc2:	6553      	str	r3, [r2, #84]	@ 0x54
 800edc4:	e003      	b.n	800edce <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800edc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800edca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800edce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800edd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800edda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800edde:	2300      	movs	r3, #0
 800ede0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ede4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800ede8:	460b      	mov	r3, r1
 800edea:	4313      	orrs	r3, r2
 800edec:	d058      	beq.n	800eea0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800edee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800edf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800edf6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800edfa:	d033      	beq.n	800ee64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800edfc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ee00:	d82c      	bhi.n	800ee5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ee02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ee06:	d02f      	beq.n	800ee68 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800ee08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ee0c:	d826      	bhi.n	800ee5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ee0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ee12:	d02b      	beq.n	800ee6c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800ee14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ee18:	d820      	bhi.n	800ee5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ee1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ee1e:	d012      	beq.n	800ee46 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800ee20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ee24:	d81a      	bhi.n	800ee5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d022      	beq.n	800ee70 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800ee2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee2e:	d115      	bne.n	800ee5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ee30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee34:	3308      	adds	r3, #8
 800ee36:	2100      	movs	r1, #0
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f000 fe57 	bl	800faec <RCCEx_PLL2_Config>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ee44:	e015      	b.n	800ee72 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ee46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee4a:	3328      	adds	r3, #40	@ 0x28
 800ee4c:	2102      	movs	r1, #2
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f000 fefe 	bl	800fc50 <RCCEx_PLL3_Config>
 800ee54:	4603      	mov	r3, r0
 800ee56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ee5a:	e00a      	b.n	800ee72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ee62:	e006      	b.n	800ee72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ee64:	bf00      	nop
 800ee66:	e004      	b.n	800ee72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ee68:	bf00      	nop
 800ee6a:	e002      	b.n	800ee72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ee6c:	bf00      	nop
 800ee6e:	e000      	b.n	800ee72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ee70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d10e      	bne.n	800ee98 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ee7a:	4b06      	ldr	r3, [pc, #24]	@ (800ee94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ee7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee7e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800ee82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ee8a:	4a02      	ldr	r2, [pc, #8]	@ (800ee94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ee8c:	430b      	orrs	r3, r1
 800ee8e:	6593      	str	r3, [r2, #88]	@ 0x58
 800ee90:	e006      	b.n	800eea0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800ee92:	bf00      	nop
 800ee94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ee9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800eea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800eeac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800eeb6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800eeba:	460b      	mov	r3, r1
 800eebc:	4313      	orrs	r3, r2
 800eebe:	d055      	beq.n	800ef6c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800eec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eec4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800eec8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800eecc:	d033      	beq.n	800ef36 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800eece:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800eed2:	d82c      	bhi.n	800ef2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800eed4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eed8:	d02f      	beq.n	800ef3a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800eeda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eede:	d826      	bhi.n	800ef2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800eee0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800eee4:	d02b      	beq.n	800ef3e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800eee6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800eeea:	d820      	bhi.n	800ef2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800eeec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800eef0:	d012      	beq.n	800ef18 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800eef2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800eef6:	d81a      	bhi.n	800ef2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d022      	beq.n	800ef42 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800eefc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ef00:	d115      	bne.n	800ef2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ef02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef06:	3308      	adds	r3, #8
 800ef08:	2100      	movs	r1, #0
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f000 fdee 	bl	800faec <RCCEx_PLL2_Config>
 800ef10:	4603      	mov	r3, r0
 800ef12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ef16:	e015      	b.n	800ef44 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ef18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef1c:	3328      	adds	r3, #40	@ 0x28
 800ef1e:	2102      	movs	r1, #2
 800ef20:	4618      	mov	r0, r3
 800ef22:	f000 fe95 	bl	800fc50 <RCCEx_PLL3_Config>
 800ef26:	4603      	mov	r3, r0
 800ef28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ef2c:	e00a      	b.n	800ef44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ef2e:	2301      	movs	r3, #1
 800ef30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ef34:	e006      	b.n	800ef44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ef36:	bf00      	nop
 800ef38:	e004      	b.n	800ef44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ef3a:	bf00      	nop
 800ef3c:	e002      	b.n	800ef44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ef3e:	bf00      	nop
 800ef40:	e000      	b.n	800ef44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ef42:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d10b      	bne.n	800ef64 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ef4c:	4ba1      	ldr	r3, [pc, #644]	@ (800f1d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ef4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef50:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800ef54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ef5c:	4a9d      	ldr	r2, [pc, #628]	@ (800f1d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ef5e:	430b      	orrs	r3, r1
 800ef60:	6593      	str	r3, [r2, #88]	@ 0x58
 800ef62:	e003      	b.n	800ef6c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ef68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ef6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef74:	f002 0308 	and.w	r3, r2, #8
 800ef78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ef82:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800ef86:	460b      	mov	r3, r1
 800ef88:	4313      	orrs	r3, r2
 800ef8a:	d01e      	beq.n	800efca <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800ef8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ef98:	d10c      	bne.n	800efb4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ef9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef9e:	3328      	adds	r3, #40	@ 0x28
 800efa0:	2102      	movs	r1, #2
 800efa2:	4618      	mov	r0, r3
 800efa4:	f000 fe54 	bl	800fc50 <RCCEx_PLL3_Config>
 800efa8:	4603      	mov	r3, r0
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d002      	beq.n	800efb4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800efae:	2301      	movs	r3, #1
 800efb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800efb4:	4b87      	ldr	r3, [pc, #540]	@ (800f1d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800efb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efb8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800efbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800efc4:	4a83      	ldr	r2, [pc, #524]	@ (800f1d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800efc6:	430b      	orrs	r3, r1
 800efc8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800efca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd2:	f002 0310 	and.w	r3, r2, #16
 800efd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800efda:	2300      	movs	r3, #0
 800efdc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800efe0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800efe4:	460b      	mov	r3, r1
 800efe6:	4313      	orrs	r3, r2
 800efe8:	d01e      	beq.n	800f028 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800efea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800eff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eff6:	d10c      	bne.n	800f012 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800eff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800effc:	3328      	adds	r3, #40	@ 0x28
 800effe:	2102      	movs	r1, #2
 800f000:	4618      	mov	r0, r3
 800f002:	f000 fe25 	bl	800fc50 <RCCEx_PLL3_Config>
 800f006:	4603      	mov	r3, r0
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d002      	beq.n	800f012 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800f00c:	2301      	movs	r3, #1
 800f00e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f012:	4b70      	ldr	r3, [pc, #448]	@ (800f1d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f016:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f01e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f022:	4a6c      	ldr	r2, [pc, #432]	@ (800f1d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f024:	430b      	orrs	r3, r1
 800f026:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f030:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800f034:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f038:	2300      	movs	r3, #0
 800f03a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f03e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800f042:	460b      	mov	r3, r1
 800f044:	4313      	orrs	r3, r2
 800f046:	d03e      	beq.n	800f0c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800f048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f04c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f050:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f054:	d022      	beq.n	800f09c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800f056:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f05a:	d81b      	bhi.n	800f094 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d003      	beq.n	800f068 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800f060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f064:	d00b      	beq.n	800f07e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800f066:	e015      	b.n	800f094 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f06c:	3308      	adds	r3, #8
 800f06e:	2100      	movs	r1, #0
 800f070:	4618      	mov	r0, r3
 800f072:	f000 fd3b 	bl	800faec <RCCEx_PLL2_Config>
 800f076:	4603      	mov	r3, r0
 800f078:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f07c:	e00f      	b.n	800f09e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f082:	3328      	adds	r3, #40	@ 0x28
 800f084:	2102      	movs	r1, #2
 800f086:	4618      	mov	r0, r3
 800f088:	f000 fde2 	bl	800fc50 <RCCEx_PLL3_Config>
 800f08c:	4603      	mov	r3, r0
 800f08e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f092:	e004      	b.n	800f09e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f094:	2301      	movs	r3, #1
 800f096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f09a:	e000      	b.n	800f09e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800f09c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f09e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d10b      	bne.n	800f0be <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f0a6:	4b4b      	ldr	r3, [pc, #300]	@ (800f1d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f0a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f0aa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800f0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f0b6:	4a47      	ldr	r2, [pc, #284]	@ (800f1d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f0b8:	430b      	orrs	r3, r1
 800f0ba:	6593      	str	r3, [r2, #88]	@ 0x58
 800f0bc:	e003      	b.n	800f0c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f0c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f0c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ce:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800f0d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f0d8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800f0dc:	460b      	mov	r3, r1
 800f0de:	4313      	orrs	r3, r2
 800f0e0:	d03b      	beq.n	800f15a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800f0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f0ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f0ee:	d01f      	beq.n	800f130 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800f0f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f0f4:	d818      	bhi.n	800f128 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800f0f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f0fa:	d003      	beq.n	800f104 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800f0fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f100:	d007      	beq.n	800f112 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800f102:	e011      	b.n	800f128 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f104:	4b33      	ldr	r3, [pc, #204]	@ (800f1d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f108:	4a32      	ldr	r2, [pc, #200]	@ (800f1d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f10a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f10e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800f110:	e00f      	b.n	800f132 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f116:	3328      	adds	r3, #40	@ 0x28
 800f118:	2101      	movs	r1, #1
 800f11a:	4618      	mov	r0, r3
 800f11c:	f000 fd98 	bl	800fc50 <RCCEx_PLL3_Config>
 800f120:	4603      	mov	r3, r0
 800f122:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800f126:	e004      	b.n	800f132 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f128:	2301      	movs	r3, #1
 800f12a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f12e:	e000      	b.n	800f132 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800f130:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f136:	2b00      	cmp	r3, #0
 800f138:	d10b      	bne.n	800f152 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f13a:	4b26      	ldr	r3, [pc, #152]	@ (800f1d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f13c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f13e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800f142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f14a:	4a22      	ldr	r2, [pc, #136]	@ (800f1d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f14c:	430b      	orrs	r3, r1
 800f14e:	6553      	str	r3, [r2, #84]	@ 0x54
 800f150:	e003      	b.n	800f15a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f156:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f162:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800f166:	673b      	str	r3, [r7, #112]	@ 0x70
 800f168:	2300      	movs	r3, #0
 800f16a:	677b      	str	r3, [r7, #116]	@ 0x74
 800f16c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800f170:	460b      	mov	r3, r1
 800f172:	4313      	orrs	r3, r2
 800f174:	d034      	beq.n	800f1e0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800f176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f17a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d003      	beq.n	800f188 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800f180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f184:	d007      	beq.n	800f196 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800f186:	e011      	b.n	800f1ac <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f188:	4b12      	ldr	r3, [pc, #72]	@ (800f1d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f18a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f18c:	4a11      	ldr	r2, [pc, #68]	@ (800f1d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f18e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f192:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f194:	e00e      	b.n	800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f19a:	3308      	adds	r3, #8
 800f19c:	2102      	movs	r1, #2
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f000 fca4 	bl	800faec <RCCEx_PLL2_Config>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f1aa:	e003      	b.n	800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f1b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f1b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d10d      	bne.n	800f1d8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f1bc:	4b05      	ldr	r3, [pc, #20]	@ (800f1d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f1be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f1c0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f1c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1ca:	4a02      	ldr	r2, [pc, #8]	@ (800f1d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f1cc:	430b      	orrs	r3, r1
 800f1ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f1d0:	e006      	b.n	800f1e0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800f1d2:	bf00      	nop
 800f1d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f1d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f1dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f1e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800f1ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f1f2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800f1f6:	460b      	mov	r3, r1
 800f1f8:	4313      	orrs	r3, r2
 800f1fa:	d00c      	beq.n	800f216 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f1fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f200:	3328      	adds	r3, #40	@ 0x28
 800f202:	2102      	movs	r1, #2
 800f204:	4618      	mov	r0, r3
 800f206:	f000 fd23 	bl	800fc50 <RCCEx_PLL3_Config>
 800f20a:	4603      	mov	r3, r0
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d002      	beq.n	800f216 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800f210:	2301      	movs	r3, #1
 800f212:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f21e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800f222:	663b      	str	r3, [r7, #96]	@ 0x60
 800f224:	2300      	movs	r3, #0
 800f226:	667b      	str	r3, [r7, #100]	@ 0x64
 800f228:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800f22c:	460b      	mov	r3, r1
 800f22e:	4313      	orrs	r3, r2
 800f230:	d038      	beq.n	800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800f232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f23a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f23e:	d018      	beq.n	800f272 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800f240:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f244:	d811      	bhi.n	800f26a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f246:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f24a:	d014      	beq.n	800f276 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800f24c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f250:	d80b      	bhi.n	800f26a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f252:	2b00      	cmp	r3, #0
 800f254:	d011      	beq.n	800f27a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800f256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f25a:	d106      	bne.n	800f26a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f25c:	4bc3      	ldr	r3, [pc, #780]	@ (800f56c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f25e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f260:	4ac2      	ldr	r2, [pc, #776]	@ (800f56c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f262:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f266:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800f268:	e008      	b.n	800f27c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f26a:	2301      	movs	r3, #1
 800f26c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f270:	e004      	b.n	800f27c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f272:	bf00      	nop
 800f274:	e002      	b.n	800f27c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f276:	bf00      	nop
 800f278:	e000      	b.n	800f27c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f27a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f27c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f280:	2b00      	cmp	r3, #0
 800f282:	d10b      	bne.n	800f29c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f284:	4bb9      	ldr	r3, [pc, #740]	@ (800f56c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f288:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f28c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f290:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f294:	4ab5      	ldr	r2, [pc, #724]	@ (800f56c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f296:	430b      	orrs	r3, r1
 800f298:	6553      	str	r3, [r2, #84]	@ 0x54
 800f29a:	e003      	b.n	800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f29c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f2a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f2a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800f2b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f2b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800f2ba:	460b      	mov	r3, r1
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	d009      	beq.n	800f2d4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f2c0:	4baa      	ldr	r3, [pc, #680]	@ (800f56c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f2c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f2c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f2c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f2ce:	4aa7      	ldr	r2, [pc, #668]	@ (800f56c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f2d0:	430b      	orrs	r3, r1
 800f2d2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800f2d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2dc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800f2e0:	653b      	str	r3, [r7, #80]	@ 0x50
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	657b      	str	r3, [r7, #84]	@ 0x54
 800f2e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800f2ea:	460b      	mov	r3, r1
 800f2ec:	4313      	orrs	r3, r2
 800f2ee:	d00a      	beq.n	800f306 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800f2f0:	4b9e      	ldr	r3, [pc, #632]	@ (800f56c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f2f2:	691b      	ldr	r3, [r3, #16]
 800f2f4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800f2f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800f300:	4a9a      	ldr	r2, [pc, #616]	@ (800f56c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f302:	430b      	orrs	r3, r1
 800f304:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f30e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800f312:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f314:	2300      	movs	r3, #0
 800f316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f318:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800f31c:	460b      	mov	r3, r1
 800f31e:	4313      	orrs	r3, r2
 800f320:	d009      	beq.n	800f336 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f322:	4b92      	ldr	r3, [pc, #584]	@ (800f56c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f326:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800f32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f32e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f330:	4a8e      	ldr	r2, [pc, #568]	@ (800f56c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f332:	430b      	orrs	r3, r1
 800f334:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f33e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800f342:	643b      	str	r3, [r7, #64]	@ 0x40
 800f344:	2300      	movs	r3, #0
 800f346:	647b      	str	r3, [r7, #68]	@ 0x44
 800f348:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800f34c:	460b      	mov	r3, r1
 800f34e:	4313      	orrs	r3, r2
 800f350:	d00e      	beq.n	800f370 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f352:	4b86      	ldr	r3, [pc, #536]	@ (800f56c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f354:	691b      	ldr	r3, [r3, #16]
 800f356:	4a85      	ldr	r2, [pc, #532]	@ (800f56c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f358:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f35c:	6113      	str	r3, [r2, #16]
 800f35e:	4b83      	ldr	r3, [pc, #524]	@ (800f56c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f360:	6919      	ldr	r1, [r3, #16]
 800f362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f366:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800f36a:	4a80      	ldr	r2, [pc, #512]	@ (800f56c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f36c:	430b      	orrs	r3, r1
 800f36e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800f370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f378:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800f37c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f37e:	2300      	movs	r3, #0
 800f380:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f382:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800f386:	460b      	mov	r3, r1
 800f388:	4313      	orrs	r3, r2
 800f38a:	d009      	beq.n	800f3a0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800f38c:	4b77      	ldr	r3, [pc, #476]	@ (800f56c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f38e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f390:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800f394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f39a:	4a74      	ldr	r2, [pc, #464]	@ (800f56c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f39c:	430b      	orrs	r3, r1
 800f39e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f3a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800f3ac:	633b      	str	r3, [r7, #48]	@ 0x30
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f3b2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800f3b6:	460b      	mov	r3, r1
 800f3b8:	4313      	orrs	r3, r2
 800f3ba:	d00a      	beq.n	800f3d2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f3bc:	4b6b      	ldr	r3, [pc, #428]	@ (800f56c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f3be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3c0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800f3c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f3cc:	4a67      	ldr	r2, [pc, #412]	@ (800f56c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f3ce:	430b      	orrs	r3, r1
 800f3d0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800f3d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3da:	2100      	movs	r1, #0
 800f3dc:	62b9      	str	r1, [r7, #40]	@ 0x28
 800f3de:	f003 0301 	and.w	r3, r3, #1
 800f3e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f3e4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800f3e8:	460b      	mov	r3, r1
 800f3ea:	4313      	orrs	r3, r2
 800f3ec:	d011      	beq.n	800f412 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f3ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3f2:	3308      	adds	r3, #8
 800f3f4:	2100      	movs	r1, #0
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f000 fb78 	bl	800faec <RCCEx_PLL2_Config>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f406:	2b00      	cmp	r3, #0
 800f408:	d003      	beq.n	800f412 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f40a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f40e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800f412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f41a:	2100      	movs	r1, #0
 800f41c:	6239      	str	r1, [r7, #32]
 800f41e:	f003 0302 	and.w	r3, r3, #2
 800f422:	627b      	str	r3, [r7, #36]	@ 0x24
 800f424:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800f428:	460b      	mov	r3, r1
 800f42a:	4313      	orrs	r3, r2
 800f42c:	d011      	beq.n	800f452 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f42e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f432:	3308      	adds	r3, #8
 800f434:	2101      	movs	r1, #1
 800f436:	4618      	mov	r0, r3
 800f438:	f000 fb58 	bl	800faec <RCCEx_PLL2_Config>
 800f43c:	4603      	mov	r3, r0
 800f43e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f446:	2b00      	cmp	r3, #0
 800f448:	d003      	beq.n	800f452 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f44a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f44e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800f452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f45a:	2100      	movs	r1, #0
 800f45c:	61b9      	str	r1, [r7, #24]
 800f45e:	f003 0304 	and.w	r3, r3, #4
 800f462:	61fb      	str	r3, [r7, #28]
 800f464:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f468:	460b      	mov	r3, r1
 800f46a:	4313      	orrs	r3, r2
 800f46c:	d011      	beq.n	800f492 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f472:	3308      	adds	r3, #8
 800f474:	2102      	movs	r1, #2
 800f476:	4618      	mov	r0, r3
 800f478:	f000 fb38 	bl	800faec <RCCEx_PLL2_Config>
 800f47c:	4603      	mov	r3, r0
 800f47e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f486:	2b00      	cmp	r3, #0
 800f488:	d003      	beq.n	800f492 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f48a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f48e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800f492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f49a:	2100      	movs	r1, #0
 800f49c:	6139      	str	r1, [r7, #16]
 800f49e:	f003 0308 	and.w	r3, r3, #8
 800f4a2:	617b      	str	r3, [r7, #20]
 800f4a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f4a8:	460b      	mov	r3, r1
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	d011      	beq.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f4ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4b2:	3328      	adds	r3, #40	@ 0x28
 800f4b4:	2100      	movs	r1, #0
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f000 fbca 	bl	800fc50 <RCCEx_PLL3_Config>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800f4c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d003      	beq.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f4ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f4ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800f4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4da:	2100      	movs	r1, #0
 800f4dc:	60b9      	str	r1, [r7, #8]
 800f4de:	f003 0310 	and.w	r3, r3, #16
 800f4e2:	60fb      	str	r3, [r7, #12]
 800f4e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	4313      	orrs	r3, r2
 800f4ec:	d011      	beq.n	800f512 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f4ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4f2:	3328      	adds	r3, #40	@ 0x28
 800f4f4:	2101      	movs	r1, #1
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f000 fbaa 	bl	800fc50 <RCCEx_PLL3_Config>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f506:	2b00      	cmp	r3, #0
 800f508:	d003      	beq.n	800f512 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f50a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f50e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800f512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f51a:	2100      	movs	r1, #0
 800f51c:	6039      	str	r1, [r7, #0]
 800f51e:	f003 0320 	and.w	r3, r3, #32
 800f522:	607b      	str	r3, [r7, #4]
 800f524:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f528:	460b      	mov	r3, r1
 800f52a:	4313      	orrs	r3, r2
 800f52c:	d011      	beq.n	800f552 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f52e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f532:	3328      	adds	r3, #40	@ 0x28
 800f534:	2102      	movs	r1, #2
 800f536:	4618      	mov	r0, r3
 800f538:	f000 fb8a 	bl	800fc50 <RCCEx_PLL3_Config>
 800f53c:	4603      	mov	r3, r0
 800f53e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f546:	2b00      	cmp	r3, #0
 800f548:	d003      	beq.n	800f552 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f54a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f54e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800f552:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800f556:	2b00      	cmp	r3, #0
 800f558:	d101      	bne.n	800f55e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800f55a:	2300      	movs	r3, #0
 800f55c:	e000      	b.n	800f560 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800f55e:	2301      	movs	r3, #1
}
 800f560:	4618      	mov	r0, r3
 800f562:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800f566:	46bd      	mov	sp, r7
 800f568:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f56c:	58024400 	.word	0x58024400

0800f570 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f574:	f7fe fd96 	bl	800e0a4 <HAL_RCC_GetHCLKFreq>
 800f578:	4602      	mov	r2, r0
 800f57a:	4b06      	ldr	r3, [pc, #24]	@ (800f594 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f57c:	6a1b      	ldr	r3, [r3, #32]
 800f57e:	091b      	lsrs	r3, r3, #4
 800f580:	f003 0307 	and.w	r3, r3, #7
 800f584:	4904      	ldr	r1, [pc, #16]	@ (800f598 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f586:	5ccb      	ldrb	r3, [r1, r3]
 800f588:	f003 031f 	and.w	r3, r3, #31
 800f58c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f590:	4618      	mov	r0, r3
 800f592:	bd80      	pop	{r7, pc}
 800f594:	58024400 	.word	0x58024400
 800f598:	0801b3c0 	.word	0x0801b3c0

0800f59c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800f59c:	b480      	push	{r7}
 800f59e:	b089      	sub	sp, #36	@ 0x24
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f5a4:	4ba1      	ldr	r3, [pc, #644]	@ (800f82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f5a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5a8:	f003 0303 	and.w	r3, r3, #3
 800f5ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f5ae:	4b9f      	ldr	r3, [pc, #636]	@ (800f82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f5b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5b2:	0b1b      	lsrs	r3, r3, #12
 800f5b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f5b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f5ba:	4b9c      	ldr	r3, [pc, #624]	@ (800f82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5be:	091b      	lsrs	r3, r3, #4
 800f5c0:	f003 0301 	and.w	r3, r3, #1
 800f5c4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f5c6:	4b99      	ldr	r3, [pc, #612]	@ (800f82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f5c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5ca:	08db      	lsrs	r3, r3, #3
 800f5cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f5d0:	693a      	ldr	r2, [r7, #16]
 800f5d2:	fb02 f303 	mul.w	r3, r2, r3
 800f5d6:	ee07 3a90 	vmov	s15, r3
 800f5da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	f000 8111 	beq.w	800f80c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f5ea:	69bb      	ldr	r3, [r7, #24]
 800f5ec:	2b02      	cmp	r3, #2
 800f5ee:	f000 8083 	beq.w	800f6f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f5f2:	69bb      	ldr	r3, [r7, #24]
 800f5f4:	2b02      	cmp	r3, #2
 800f5f6:	f200 80a1 	bhi.w	800f73c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f5fa:	69bb      	ldr	r3, [r7, #24]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d003      	beq.n	800f608 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f600:	69bb      	ldr	r3, [r7, #24]
 800f602:	2b01      	cmp	r3, #1
 800f604:	d056      	beq.n	800f6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f606:	e099      	b.n	800f73c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f608:	4b88      	ldr	r3, [pc, #544]	@ (800f82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	f003 0320 	and.w	r3, r3, #32
 800f610:	2b00      	cmp	r3, #0
 800f612:	d02d      	beq.n	800f670 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f614:	4b85      	ldr	r3, [pc, #532]	@ (800f82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	08db      	lsrs	r3, r3, #3
 800f61a:	f003 0303 	and.w	r3, r3, #3
 800f61e:	4a84      	ldr	r2, [pc, #528]	@ (800f830 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f620:	fa22 f303 	lsr.w	r3, r2, r3
 800f624:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	ee07 3a90 	vmov	s15, r3
 800f62c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	ee07 3a90 	vmov	s15, r3
 800f636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f63a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f63e:	4b7b      	ldr	r3, [pc, #492]	@ (800f82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f646:	ee07 3a90 	vmov	s15, r3
 800f64a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f64e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f652:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f834 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f65a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f65e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f66a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f66e:	e087      	b.n	800f780 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	ee07 3a90 	vmov	s15, r3
 800f676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f67a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f838 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f67e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f682:	4b6a      	ldr	r3, [pc, #424]	@ (800f82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f68a:	ee07 3a90 	vmov	s15, r3
 800f68e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f692:	ed97 6a03 	vldr	s12, [r7, #12]
 800f696:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f834 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f69a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f69e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f6a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f6a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f6aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f6b2:	e065      	b.n	800f780 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	ee07 3a90 	vmov	s15, r3
 800f6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f83c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f6c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f6c6:	4b59      	ldr	r3, [pc, #356]	@ (800f82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6ce:	ee07 3a90 	vmov	s15, r3
 800f6d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800f6da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f834 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f6de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f6e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f6e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f6ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f6ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f6f6:	e043      	b.n	800f780 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	ee07 3a90 	vmov	s15, r3
 800f6fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f702:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f840 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f70a:	4b48      	ldr	r3, [pc, #288]	@ (800f82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f70c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f70e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f712:	ee07 3a90 	vmov	s15, r3
 800f716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f71a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f71e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f834 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f72a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f72e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f732:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f73a:	e021      	b.n	800f780 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	ee07 3a90 	vmov	s15, r3
 800f742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f746:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f83c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f74a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f74e:	4b37      	ldr	r3, [pc, #220]	@ (800f82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f756:	ee07 3a90 	vmov	s15, r3
 800f75a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f75e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f762:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f834 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f76a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f76e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f77a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f77e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f780:	4b2a      	ldr	r3, [pc, #168]	@ (800f82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f784:	0a5b      	lsrs	r3, r3, #9
 800f786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f78a:	ee07 3a90 	vmov	s15, r3
 800f78e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f792:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f79a:	edd7 6a07 	vldr	s13, [r7, #28]
 800f79e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f7a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f7a6:	ee17 2a90 	vmov	r2, s15
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f7ae:	4b1f      	ldr	r3, [pc, #124]	@ (800f82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7b2:	0c1b      	lsrs	r3, r3, #16
 800f7b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f7b8:	ee07 3a90 	vmov	s15, r3
 800f7bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f7c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f7c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800f7cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f7d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f7d4:	ee17 2a90 	vmov	r2, s15
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800f7dc:	4b13      	ldr	r3, [pc, #76]	@ (800f82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7e0:	0e1b      	lsrs	r3, r3, #24
 800f7e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f7e6:	ee07 3a90 	vmov	s15, r3
 800f7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f7f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f7f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800f7fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f7fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f802:	ee17 2a90 	vmov	r2, s15
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f80a:	e008      	b.n	800f81e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2200      	movs	r2, #0
 800f810:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2200      	movs	r2, #0
 800f816:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2200      	movs	r2, #0
 800f81c:	609a      	str	r2, [r3, #8]
}
 800f81e:	bf00      	nop
 800f820:	3724      	adds	r7, #36	@ 0x24
 800f822:	46bd      	mov	sp, r7
 800f824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f828:	4770      	bx	lr
 800f82a:	bf00      	nop
 800f82c:	58024400 	.word	0x58024400
 800f830:	03d09000 	.word	0x03d09000
 800f834:	46000000 	.word	0x46000000
 800f838:	4c742400 	.word	0x4c742400
 800f83c:	4a742400 	.word	0x4a742400
 800f840:	4bbebc20 	.word	0x4bbebc20

0800f844 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800f844:	b480      	push	{r7}
 800f846:	b089      	sub	sp, #36	@ 0x24
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f84c:	4ba1      	ldr	r3, [pc, #644]	@ (800fad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f84e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f850:	f003 0303 	and.w	r3, r3, #3
 800f854:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f856:	4b9f      	ldr	r3, [pc, #636]	@ (800fad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f85a:	0d1b      	lsrs	r3, r3, #20
 800f85c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f860:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f862:	4b9c      	ldr	r3, [pc, #624]	@ (800fad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f866:	0a1b      	lsrs	r3, r3, #8
 800f868:	f003 0301 	and.w	r3, r3, #1
 800f86c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f86e:	4b99      	ldr	r3, [pc, #612]	@ (800fad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f872:	08db      	lsrs	r3, r3, #3
 800f874:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f878:	693a      	ldr	r2, [r7, #16]
 800f87a:	fb02 f303 	mul.w	r3, r2, r3
 800f87e:	ee07 3a90 	vmov	s15, r3
 800f882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f886:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	f000 8111 	beq.w	800fab4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f892:	69bb      	ldr	r3, [r7, #24]
 800f894:	2b02      	cmp	r3, #2
 800f896:	f000 8083 	beq.w	800f9a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f89a:	69bb      	ldr	r3, [r7, #24]
 800f89c:	2b02      	cmp	r3, #2
 800f89e:	f200 80a1 	bhi.w	800f9e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f8a2:	69bb      	ldr	r3, [r7, #24]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d003      	beq.n	800f8b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f8a8:	69bb      	ldr	r3, [r7, #24]
 800f8aa:	2b01      	cmp	r3, #1
 800f8ac:	d056      	beq.n	800f95c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f8ae:	e099      	b.n	800f9e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f8b0:	4b88      	ldr	r3, [pc, #544]	@ (800fad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	f003 0320 	and.w	r3, r3, #32
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d02d      	beq.n	800f918 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f8bc:	4b85      	ldr	r3, [pc, #532]	@ (800fad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	08db      	lsrs	r3, r3, #3
 800f8c2:	f003 0303 	and.w	r3, r3, #3
 800f8c6:	4a84      	ldr	r2, [pc, #528]	@ (800fad8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f8c8:	fa22 f303 	lsr.w	r3, r2, r3
 800f8cc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	ee07 3a90 	vmov	s15, r3
 800f8d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	ee07 3a90 	vmov	s15, r3
 800f8de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f8e6:	4b7b      	ldr	r3, [pc, #492]	@ (800fad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f8e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8ee:	ee07 3a90 	vmov	s15, r3
 800f8f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f8f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800f8fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800fadc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f8fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f90a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f90e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f912:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f916:	e087      	b.n	800fa28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f918:	697b      	ldr	r3, [r7, #20]
 800f91a:	ee07 3a90 	vmov	s15, r3
 800f91e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f922:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800fae0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f92a:	4b6a      	ldr	r3, [pc, #424]	@ (800fad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f92c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f92e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f932:	ee07 3a90 	vmov	s15, r3
 800f936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f93a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f93e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800fadc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f94a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f94e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f952:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f956:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f95a:	e065      	b.n	800fa28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	ee07 3a90 	vmov	s15, r3
 800f962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f966:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800fae4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f96a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f96e:	4b59      	ldr	r3, [pc, #356]	@ (800fad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f976:	ee07 3a90 	vmov	s15, r3
 800f97a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f97e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f982:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800fadc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f98a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f98e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f99a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f99e:	e043      	b.n	800fa28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	ee07 3a90 	vmov	s15, r3
 800f9a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800fae8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800f9ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f9b2:	4b48      	ldr	r3, [pc, #288]	@ (800fad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9ba:	ee07 3a90 	vmov	s15, r3
 800f9be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f9c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f9c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800fadc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f9ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f9ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f9d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f9d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f9da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f9e2:	e021      	b.n	800fa28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	ee07 3a90 	vmov	s15, r3
 800f9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800fae4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f9f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f9f6:	4b37      	ldr	r3, [pc, #220]	@ (800fad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9fe:	ee07 3a90 	vmov	s15, r3
 800fa02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa06:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa0a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800fadc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fa26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800fa28:	4b2a      	ldr	r3, [pc, #168]	@ (800fad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa2c:	0a5b      	lsrs	r3, r3, #9
 800fa2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fa32:	ee07 3a90 	vmov	s15, r3
 800fa36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fa3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fa42:	edd7 6a07 	vldr	s13, [r7, #28]
 800fa46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa4e:	ee17 2a90 	vmov	r2, s15
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800fa56:	4b1f      	ldr	r3, [pc, #124]	@ (800fad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa5a:	0c1b      	lsrs	r3, r3, #16
 800fa5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fa60:	ee07 3a90 	vmov	s15, r3
 800fa64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fa6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fa70:	edd7 6a07 	vldr	s13, [r7, #28]
 800fa74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa7c:	ee17 2a90 	vmov	r2, s15
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800fa84:	4b13      	ldr	r3, [pc, #76]	@ (800fad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa88:	0e1b      	lsrs	r3, r3, #24
 800fa8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fa8e:	ee07 3a90 	vmov	s15, r3
 800fa92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fa9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fa9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800faa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800faa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800faaa:	ee17 2a90 	vmov	r2, s15
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800fab2:	e008      	b.n	800fac6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2200      	movs	r2, #0
 800fab8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2200      	movs	r2, #0
 800fabe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2200      	movs	r2, #0
 800fac4:	609a      	str	r2, [r3, #8]
}
 800fac6:	bf00      	nop
 800fac8:	3724      	adds	r7, #36	@ 0x24
 800faca:	46bd      	mov	sp, r7
 800facc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad0:	4770      	bx	lr
 800fad2:	bf00      	nop
 800fad4:	58024400 	.word	0x58024400
 800fad8:	03d09000 	.word	0x03d09000
 800fadc:	46000000 	.word	0x46000000
 800fae0:	4c742400 	.word	0x4c742400
 800fae4:	4a742400 	.word	0x4a742400
 800fae8:	4bbebc20 	.word	0x4bbebc20

0800faec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b084      	sub	sp, #16
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
 800faf4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800faf6:	2300      	movs	r3, #0
 800faf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fafa:	4b53      	ldr	r3, [pc, #332]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fafc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fafe:	f003 0303 	and.w	r3, r3, #3
 800fb02:	2b03      	cmp	r3, #3
 800fb04:	d101      	bne.n	800fb0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800fb06:	2301      	movs	r3, #1
 800fb08:	e099      	b.n	800fc3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800fb0a:	4b4f      	ldr	r3, [pc, #316]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	4a4e      	ldr	r2, [pc, #312]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fb10:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fb14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fb16:	f7f3 fcbd 	bl	8003494 <HAL_GetTick>
 800fb1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fb1c:	e008      	b.n	800fb30 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fb1e:	f7f3 fcb9 	bl	8003494 <HAL_GetTick>
 800fb22:	4602      	mov	r2, r0
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	1ad3      	subs	r3, r2, r3
 800fb28:	2b02      	cmp	r3, #2
 800fb2a:	d901      	bls.n	800fb30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fb2c:	2303      	movs	r3, #3
 800fb2e:	e086      	b.n	800fc3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fb30:	4b45      	ldr	r3, [pc, #276]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d1f0      	bne.n	800fb1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800fb3c:	4b42      	ldr	r3, [pc, #264]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fb3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb40:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	031b      	lsls	r3, r3, #12
 800fb4a:	493f      	ldr	r1, [pc, #252]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fb4c:	4313      	orrs	r3, r2
 800fb4e:	628b      	str	r3, [r1, #40]	@ 0x28
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	3b01      	subs	r3, #1
 800fb56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	689b      	ldr	r3, [r3, #8]
 800fb5e:	3b01      	subs	r3, #1
 800fb60:	025b      	lsls	r3, r3, #9
 800fb62:	b29b      	uxth	r3, r3
 800fb64:	431a      	orrs	r2, r3
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	68db      	ldr	r3, [r3, #12]
 800fb6a:	3b01      	subs	r3, #1
 800fb6c:	041b      	lsls	r3, r3, #16
 800fb6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800fb72:	431a      	orrs	r2, r3
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	691b      	ldr	r3, [r3, #16]
 800fb78:	3b01      	subs	r3, #1
 800fb7a:	061b      	lsls	r3, r3, #24
 800fb7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800fb80:	4931      	ldr	r1, [pc, #196]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fb82:	4313      	orrs	r3, r2
 800fb84:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800fb86:	4b30      	ldr	r3, [pc, #192]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fb88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	695b      	ldr	r3, [r3, #20]
 800fb92:	492d      	ldr	r1, [pc, #180]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fb94:	4313      	orrs	r3, r2
 800fb96:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800fb98:	4b2b      	ldr	r3, [pc, #172]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fb9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb9c:	f023 0220 	bic.w	r2, r3, #32
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	699b      	ldr	r3, [r3, #24]
 800fba4:	4928      	ldr	r1, [pc, #160]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fba6:	4313      	orrs	r3, r2
 800fba8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800fbaa:	4b27      	ldr	r3, [pc, #156]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fbac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbae:	4a26      	ldr	r2, [pc, #152]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fbb0:	f023 0310 	bic.w	r3, r3, #16
 800fbb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800fbb6:	4b24      	ldr	r3, [pc, #144]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fbb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fbba:	4b24      	ldr	r3, [pc, #144]	@ (800fc4c <RCCEx_PLL2_Config+0x160>)
 800fbbc:	4013      	ands	r3, r2
 800fbbe:	687a      	ldr	r2, [r7, #4]
 800fbc0:	69d2      	ldr	r2, [r2, #28]
 800fbc2:	00d2      	lsls	r2, r2, #3
 800fbc4:	4920      	ldr	r1, [pc, #128]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fbc6:	4313      	orrs	r3, r2
 800fbc8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800fbca:	4b1f      	ldr	r3, [pc, #124]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fbcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbce:	4a1e      	ldr	r2, [pc, #120]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fbd0:	f043 0310 	orr.w	r3, r3, #16
 800fbd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d106      	bne.n	800fbea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800fbdc:	4b1a      	ldr	r3, [pc, #104]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fbde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbe0:	4a19      	ldr	r2, [pc, #100]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fbe2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fbe6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fbe8:	e00f      	b.n	800fc0a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	2b01      	cmp	r3, #1
 800fbee:	d106      	bne.n	800fbfe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800fbf0:	4b15      	ldr	r3, [pc, #84]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fbf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbf4:	4a14      	ldr	r2, [pc, #80]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fbf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fbfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fbfc:	e005      	b.n	800fc0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800fbfe:	4b12      	ldr	r3, [pc, #72]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fc00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc02:	4a11      	ldr	r2, [pc, #68]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fc04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800fc08:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800fc0a:	4b0f      	ldr	r3, [pc, #60]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	4a0e      	ldr	r2, [pc, #56]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fc10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fc14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fc16:	f7f3 fc3d 	bl	8003494 <HAL_GetTick>
 800fc1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fc1c:	e008      	b.n	800fc30 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fc1e:	f7f3 fc39 	bl	8003494 <HAL_GetTick>
 800fc22:	4602      	mov	r2, r0
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	1ad3      	subs	r3, r2, r3
 800fc28:	2b02      	cmp	r3, #2
 800fc2a:	d901      	bls.n	800fc30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800fc2c:	2303      	movs	r3, #3
 800fc2e:	e006      	b.n	800fc3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fc30:	4b05      	ldr	r3, [pc, #20]	@ (800fc48 <RCCEx_PLL2_Config+0x15c>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d0f0      	beq.n	800fc1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800fc3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3710      	adds	r7, #16
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}
 800fc46:	bf00      	nop
 800fc48:	58024400 	.word	0x58024400
 800fc4c:	ffff0007 	.word	0xffff0007

0800fc50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b084      	sub	sp, #16
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
 800fc58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fc5e:	4b53      	ldr	r3, [pc, #332]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fc60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc62:	f003 0303 	and.w	r3, r3, #3
 800fc66:	2b03      	cmp	r3, #3
 800fc68:	d101      	bne.n	800fc6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	e099      	b.n	800fda2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800fc6e:	4b4f      	ldr	r3, [pc, #316]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	4a4e      	ldr	r2, [pc, #312]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fc74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fc78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fc7a:	f7f3 fc0b 	bl	8003494 <HAL_GetTick>
 800fc7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fc80:	e008      	b.n	800fc94 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800fc82:	f7f3 fc07 	bl	8003494 <HAL_GetTick>
 800fc86:	4602      	mov	r2, r0
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	1ad3      	subs	r3, r2, r3
 800fc8c:	2b02      	cmp	r3, #2
 800fc8e:	d901      	bls.n	800fc94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fc90:	2303      	movs	r3, #3
 800fc92:	e086      	b.n	800fda2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fc94:	4b45      	ldr	r3, [pc, #276]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d1f0      	bne.n	800fc82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800fca0:	4b42      	ldr	r3, [pc, #264]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fca4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	051b      	lsls	r3, r3, #20
 800fcae:	493f      	ldr	r1, [pc, #252]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fcb0:	4313      	orrs	r3, r2
 800fcb2:	628b      	str	r3, [r1, #40]	@ 0x28
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	3b01      	subs	r3, #1
 800fcba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	689b      	ldr	r3, [r3, #8]
 800fcc2:	3b01      	subs	r3, #1
 800fcc4:	025b      	lsls	r3, r3, #9
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	431a      	orrs	r2, r3
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	68db      	ldr	r3, [r3, #12]
 800fcce:	3b01      	subs	r3, #1
 800fcd0:	041b      	lsls	r3, r3, #16
 800fcd2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800fcd6:	431a      	orrs	r2, r3
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	691b      	ldr	r3, [r3, #16]
 800fcdc:	3b01      	subs	r3, #1
 800fcde:	061b      	lsls	r3, r3, #24
 800fce0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800fce4:	4931      	ldr	r1, [pc, #196]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fce6:	4313      	orrs	r3, r2
 800fce8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800fcea:	4b30      	ldr	r3, [pc, #192]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fcec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	695b      	ldr	r3, [r3, #20]
 800fcf6:	492d      	ldr	r1, [pc, #180]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fcf8:	4313      	orrs	r3, r2
 800fcfa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800fcfc:	4b2b      	ldr	r3, [pc, #172]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fcfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd00:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	699b      	ldr	r3, [r3, #24]
 800fd08:	4928      	ldr	r1, [pc, #160]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fd0a:	4313      	orrs	r3, r2
 800fd0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800fd0e:	4b27      	ldr	r3, [pc, #156]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fd10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd12:	4a26      	ldr	r2, [pc, #152]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fd14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fd18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800fd1a:	4b24      	ldr	r3, [pc, #144]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fd1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fd1e:	4b24      	ldr	r3, [pc, #144]	@ (800fdb0 <RCCEx_PLL3_Config+0x160>)
 800fd20:	4013      	ands	r3, r2
 800fd22:	687a      	ldr	r2, [r7, #4]
 800fd24:	69d2      	ldr	r2, [r2, #28]
 800fd26:	00d2      	lsls	r2, r2, #3
 800fd28:	4920      	ldr	r1, [pc, #128]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fd2a:	4313      	orrs	r3, r2
 800fd2c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800fd2e:	4b1f      	ldr	r3, [pc, #124]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fd30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd32:	4a1e      	ldr	r2, [pc, #120]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fd34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fd38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d106      	bne.n	800fd4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800fd40:	4b1a      	ldr	r3, [pc, #104]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fd42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd44:	4a19      	ldr	r2, [pc, #100]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fd46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800fd4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fd4c:	e00f      	b.n	800fd6e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	d106      	bne.n	800fd62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800fd54:	4b15      	ldr	r3, [pc, #84]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fd56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd58:	4a14      	ldr	r2, [pc, #80]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fd5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800fd5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fd60:	e005      	b.n	800fd6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800fd62:	4b12      	ldr	r3, [pc, #72]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fd64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd66:	4a11      	ldr	r2, [pc, #68]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fd68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fd6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800fd6e:	4b0f      	ldr	r3, [pc, #60]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	4a0e      	ldr	r2, [pc, #56]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fd74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fd78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fd7a:	f7f3 fb8b 	bl	8003494 <HAL_GetTick>
 800fd7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fd80:	e008      	b.n	800fd94 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800fd82:	f7f3 fb87 	bl	8003494 <HAL_GetTick>
 800fd86:	4602      	mov	r2, r0
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	1ad3      	subs	r3, r2, r3
 800fd8c:	2b02      	cmp	r3, #2
 800fd8e:	d901      	bls.n	800fd94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800fd90:	2303      	movs	r3, #3
 800fd92:	e006      	b.n	800fda2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fd94:	4b05      	ldr	r3, [pc, #20]	@ (800fdac <RCCEx_PLL3_Config+0x15c>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d0f0      	beq.n	800fd82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800fda0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3710      	adds	r7, #16
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	58024400 	.word	0x58024400
 800fdb0:	ffff0007 	.word	0xffff0007

0800fdb4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b084      	sub	sp, #16
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d101      	bne.n	800fdc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	e10f      	b.n	800ffe6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	4a87      	ldr	r2, [pc, #540]	@ (800fff0 <HAL_SPI_Init+0x23c>)
 800fdd2:	4293      	cmp	r3, r2
 800fdd4:	d00f      	beq.n	800fdf6 <HAL_SPI_Init+0x42>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	4a86      	ldr	r2, [pc, #536]	@ (800fff4 <HAL_SPI_Init+0x240>)
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d00a      	beq.n	800fdf6 <HAL_SPI_Init+0x42>
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	4a84      	ldr	r2, [pc, #528]	@ (800fff8 <HAL_SPI_Init+0x244>)
 800fde6:	4293      	cmp	r3, r2
 800fde8:	d005      	beq.n	800fdf6 <HAL_SPI_Init+0x42>
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	68db      	ldr	r3, [r3, #12]
 800fdee:	2b0f      	cmp	r3, #15
 800fdf0:	d901      	bls.n	800fdf6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	e0f7      	b.n	800ffe6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f000 fe2e 	bl	8010a58 <SPI_GetPacketSize>
 800fdfc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	4a7b      	ldr	r2, [pc, #492]	@ (800fff0 <HAL_SPI_Init+0x23c>)
 800fe04:	4293      	cmp	r3, r2
 800fe06:	d00c      	beq.n	800fe22 <HAL_SPI_Init+0x6e>
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	4a79      	ldr	r2, [pc, #484]	@ (800fff4 <HAL_SPI_Init+0x240>)
 800fe0e:	4293      	cmp	r3, r2
 800fe10:	d007      	beq.n	800fe22 <HAL_SPI_Init+0x6e>
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	4a78      	ldr	r2, [pc, #480]	@ (800fff8 <HAL_SPI_Init+0x244>)
 800fe18:	4293      	cmp	r3, r2
 800fe1a:	d002      	beq.n	800fe22 <HAL_SPI_Init+0x6e>
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	2b08      	cmp	r3, #8
 800fe20:	d811      	bhi.n	800fe46 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fe26:	4a72      	ldr	r2, [pc, #456]	@ (800fff0 <HAL_SPI_Init+0x23c>)
 800fe28:	4293      	cmp	r3, r2
 800fe2a:	d009      	beq.n	800fe40 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	4a70      	ldr	r2, [pc, #448]	@ (800fff4 <HAL_SPI_Init+0x240>)
 800fe32:	4293      	cmp	r3, r2
 800fe34:	d004      	beq.n	800fe40 <HAL_SPI_Init+0x8c>
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	4a6f      	ldr	r2, [pc, #444]	@ (800fff8 <HAL_SPI_Init+0x244>)
 800fe3c:	4293      	cmp	r3, r2
 800fe3e:	d104      	bne.n	800fe4a <HAL_SPI_Init+0x96>
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	2b10      	cmp	r3, #16
 800fe44:	d901      	bls.n	800fe4a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800fe46:	2301      	movs	r3, #1
 800fe48:	e0cd      	b.n	800ffe6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800fe50:	b2db      	uxtb	r3, r3
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d106      	bne.n	800fe64 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f7f2 fca0 	bl	80027a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2202      	movs	r2, #2
 800fe68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	681a      	ldr	r2, [r3, #0]
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	f022 0201 	bic.w	r2, r2, #1
 800fe7a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	689b      	ldr	r3, [r3, #8]
 800fe82:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800fe86:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	699b      	ldr	r3, [r3, #24]
 800fe8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fe90:	d119      	bne.n	800fec6 <HAL_SPI_Init+0x112>
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	685b      	ldr	r3, [r3, #4]
 800fe96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fe9a:	d103      	bne.n	800fea4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d008      	beq.n	800feb6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d10c      	bne.n	800fec6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800feb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800feb4:	d107      	bne.n	800fec6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	681a      	ldr	r2, [r3, #0]
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800fec4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	685b      	ldr	r3, [r3, #4]
 800feca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d00f      	beq.n	800fef2 <HAL_SPI_Init+0x13e>
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	68db      	ldr	r3, [r3, #12]
 800fed6:	2b06      	cmp	r3, #6
 800fed8:	d90b      	bls.n	800fef2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	430a      	orrs	r2, r1
 800feee:	601a      	str	r2, [r3, #0]
 800fef0:	e007      	b.n	800ff02 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	681a      	ldr	r2, [r3, #0]
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ff00:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	69da      	ldr	r2, [r3, #28]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff0a:	431a      	orrs	r2, r3
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	431a      	orrs	r2, r3
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff14:	ea42 0103 	orr.w	r1, r2, r3
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	68da      	ldr	r2, [r3, #12]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	430a      	orrs	r2, r1
 800ff22:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff2c:	431a      	orrs	r2, r3
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff32:	431a      	orrs	r2, r3
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	699b      	ldr	r3, [r3, #24]
 800ff38:	431a      	orrs	r2, r3
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	691b      	ldr	r3, [r3, #16]
 800ff3e:	431a      	orrs	r2, r3
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	695b      	ldr	r3, [r3, #20]
 800ff44:	431a      	orrs	r2, r3
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6a1b      	ldr	r3, [r3, #32]
 800ff4a:	431a      	orrs	r2, r3
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	685b      	ldr	r3, [r3, #4]
 800ff50:	431a      	orrs	r2, r3
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ff56:	431a      	orrs	r2, r3
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	689b      	ldr	r3, [r3, #8]
 800ff5c:	431a      	orrs	r2, r3
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ff62:	ea42 0103 	orr.w	r1, r2, r3
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	430a      	orrs	r2, r1
 800ff70:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	685b      	ldr	r3, [r3, #4]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d113      	bne.n	800ffa2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	689b      	ldr	r3, [r3, #8]
 800ff80:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ff8c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	689b      	ldr	r3, [r3, #8]
 800ff94:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ffa0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	f022 0201 	bic.w	r2, r2, #1
 800ffb0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d00a      	beq.n	800ffd4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	68db      	ldr	r3, [r3, #12]
 800ffc4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	430a      	orrs	r2, r1
 800ffd2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2201      	movs	r2, #1
 800ffe0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800ffe4:	2300      	movs	r3, #0
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3710      	adds	r7, #16
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	40013000 	.word	0x40013000
 800fff4:	40003800 	.word	0x40003800
 800fff8:	40003c00 	.word	0x40003c00

0800fffc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b088      	sub	sp, #32
 8010000:	af02      	add	r7, sp, #8
 8010002:	60f8      	str	r0, [r7, #12]
 8010004:	60b9      	str	r1, [r7, #8]
 8010006:	603b      	str	r3, [r7, #0]
 8010008:	4613      	mov	r3, r2
 801000a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	3320      	adds	r3, #32
 8010012:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010014:	f7f3 fa3e 	bl	8003494 <HAL_GetTick>
 8010018:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010020:	b2db      	uxtb	r3, r3
 8010022:	2b01      	cmp	r3, #1
 8010024:	d001      	beq.n	801002a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8010026:	2302      	movs	r3, #2
 8010028:	e1d1      	b.n	80103ce <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d002      	beq.n	8010036 <HAL_SPI_Transmit+0x3a>
 8010030:	88fb      	ldrh	r3, [r7, #6]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d101      	bne.n	801003a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8010036:	2301      	movs	r3, #1
 8010038:	e1c9      	b.n	80103ce <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010040:	2b01      	cmp	r3, #1
 8010042:	d101      	bne.n	8010048 <HAL_SPI_Transmit+0x4c>
 8010044:	2302      	movs	r3, #2
 8010046:	e1c2      	b.n	80103ce <HAL_SPI_Transmit+0x3d2>
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	2201      	movs	r2, #1
 801004c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	2203      	movs	r2, #3
 8010054:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	2200      	movs	r2, #0
 801005c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	68ba      	ldr	r2, [r7, #8]
 8010064:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	88fa      	ldrh	r2, [r7, #6]
 801006a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	88fa      	ldrh	r2, [r7, #6]
 8010072:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	2200      	movs	r2, #0
 801007a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	2200      	movs	r2, #0
 8010080:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	2200      	movs	r2, #0
 8010088:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	2200      	movs	r2, #0
 8010090:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	2200      	movs	r2, #0
 8010096:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	689b      	ldr	r3, [r3, #8]
 801009c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80100a0:	d108      	bne.n	80100b4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80100b0:	601a      	str	r2, [r3, #0]
 80100b2:	e009      	b.n	80100c8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	68db      	ldr	r3, [r3, #12]
 80100ba:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80100c6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	685a      	ldr	r2, [r3, #4]
 80100ce:	4b96      	ldr	r3, [pc, #600]	@ (8010328 <HAL_SPI_Transmit+0x32c>)
 80100d0:	4013      	ands	r3, r2
 80100d2:	88f9      	ldrh	r1, [r7, #6]
 80100d4:	68fa      	ldr	r2, [r7, #12]
 80100d6:	6812      	ldr	r2, [r2, #0]
 80100d8:	430b      	orrs	r3, r1
 80100da:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	681a      	ldr	r2, [r3, #0]
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	f042 0201 	orr.w	r2, r2, #1
 80100ea:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	685b      	ldr	r3, [r3, #4]
 80100f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80100f4:	d107      	bne.n	8010106 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	681a      	ldr	r2, [r3, #0]
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010104:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	68db      	ldr	r3, [r3, #12]
 801010a:	2b0f      	cmp	r3, #15
 801010c:	d947      	bls.n	801019e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801010e:	e03f      	b.n	8010190 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	695b      	ldr	r3, [r3, #20]
 8010116:	f003 0302 	and.w	r3, r3, #2
 801011a:	2b02      	cmp	r3, #2
 801011c:	d114      	bne.n	8010148 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	6812      	ldr	r2, [r2, #0]
 8010128:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801012e:	1d1a      	adds	r2, r3, #4
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801013a:	b29b      	uxth	r3, r3
 801013c:	3b01      	subs	r3, #1
 801013e:	b29a      	uxth	r2, r3
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010146:	e023      	b.n	8010190 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010148:	f7f3 f9a4 	bl	8003494 <HAL_GetTick>
 801014c:	4602      	mov	r2, r0
 801014e:	693b      	ldr	r3, [r7, #16]
 8010150:	1ad3      	subs	r3, r2, r3
 8010152:	683a      	ldr	r2, [r7, #0]
 8010154:	429a      	cmp	r2, r3
 8010156:	d803      	bhi.n	8010160 <HAL_SPI_Transmit+0x164>
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801015e:	d102      	bne.n	8010166 <HAL_SPI_Transmit+0x16a>
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d114      	bne.n	8010190 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010166:	68f8      	ldr	r0, [r7, #12]
 8010168:	f000 fba8 	bl	80108bc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010172:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	2201      	movs	r2, #1
 8010180:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	2200      	movs	r2, #0
 8010188:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801018c:	2303      	movs	r3, #3
 801018e:	e11e      	b.n	80103ce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010196:	b29b      	uxth	r3, r3
 8010198:	2b00      	cmp	r3, #0
 801019a:	d1b9      	bne.n	8010110 <HAL_SPI_Transmit+0x114>
 801019c:	e0f1      	b.n	8010382 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	68db      	ldr	r3, [r3, #12]
 80101a2:	2b07      	cmp	r3, #7
 80101a4:	f240 80e6 	bls.w	8010374 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80101a8:	e05d      	b.n	8010266 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	695b      	ldr	r3, [r3, #20]
 80101b0:	f003 0302 	and.w	r3, r3, #2
 80101b4:	2b02      	cmp	r3, #2
 80101b6:	d132      	bne.n	801021e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80101be:	b29b      	uxth	r3, r3
 80101c0:	2b01      	cmp	r3, #1
 80101c2:	d918      	bls.n	80101f6 <HAL_SPI_Transmit+0x1fa>
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d014      	beq.n	80101f6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	6812      	ldr	r2, [r2, #0]
 80101d6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80101dc:	1d1a      	adds	r2, r3, #4
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80101e8:	b29b      	uxth	r3, r3
 80101ea:	3b02      	subs	r3, #2
 80101ec:	b29a      	uxth	r2, r3
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80101f4:	e037      	b.n	8010266 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80101fa:	881a      	ldrh	r2, [r3, #0]
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010204:	1c9a      	adds	r2, r3, #2
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010210:	b29b      	uxth	r3, r3
 8010212:	3b01      	subs	r3, #1
 8010214:	b29a      	uxth	r2, r3
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801021c:	e023      	b.n	8010266 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801021e:	f7f3 f939 	bl	8003494 <HAL_GetTick>
 8010222:	4602      	mov	r2, r0
 8010224:	693b      	ldr	r3, [r7, #16]
 8010226:	1ad3      	subs	r3, r2, r3
 8010228:	683a      	ldr	r2, [r7, #0]
 801022a:	429a      	cmp	r2, r3
 801022c:	d803      	bhi.n	8010236 <HAL_SPI_Transmit+0x23a>
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010234:	d102      	bne.n	801023c <HAL_SPI_Transmit+0x240>
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d114      	bne.n	8010266 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801023c:	68f8      	ldr	r0, [r7, #12]
 801023e:	f000 fb3d 	bl	80108bc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010248:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	2201      	movs	r2, #1
 8010256:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	2200      	movs	r2, #0
 801025e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010262:	2303      	movs	r3, #3
 8010264:	e0b3      	b.n	80103ce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801026c:	b29b      	uxth	r3, r3
 801026e:	2b00      	cmp	r3, #0
 8010270:	d19b      	bne.n	80101aa <HAL_SPI_Transmit+0x1ae>
 8010272:	e086      	b.n	8010382 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	695b      	ldr	r3, [r3, #20]
 801027a:	f003 0302 	and.w	r3, r3, #2
 801027e:	2b02      	cmp	r3, #2
 8010280:	d154      	bne.n	801032c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010288:	b29b      	uxth	r3, r3
 801028a:	2b03      	cmp	r3, #3
 801028c:	d918      	bls.n	80102c0 <HAL_SPI_Transmit+0x2c4>
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010292:	2b40      	cmp	r3, #64	@ 0x40
 8010294:	d914      	bls.n	80102c0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	6812      	ldr	r2, [r2, #0]
 80102a0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80102a6:	1d1a      	adds	r2, r3, #4
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80102b2:	b29b      	uxth	r3, r3
 80102b4:	3b04      	subs	r3, #4
 80102b6:	b29a      	uxth	r2, r3
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80102be:	e059      	b.n	8010374 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80102c6:	b29b      	uxth	r3, r3
 80102c8:	2b01      	cmp	r3, #1
 80102ca:	d917      	bls.n	80102fc <HAL_SPI_Transmit+0x300>
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d013      	beq.n	80102fc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80102d8:	881a      	ldrh	r2, [r3, #0]
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80102e2:	1c9a      	adds	r2, r3, #2
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80102ee:	b29b      	uxth	r3, r3
 80102f0:	3b02      	subs	r3, #2
 80102f2:	b29a      	uxth	r2, r3
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80102fa:	e03b      	b.n	8010374 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	3320      	adds	r3, #32
 8010306:	7812      	ldrb	r2, [r2, #0]
 8010308:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801030e:	1c5a      	adds	r2, r3, #1
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801031a:	b29b      	uxth	r3, r3
 801031c:	3b01      	subs	r3, #1
 801031e:	b29a      	uxth	r2, r3
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010326:	e025      	b.n	8010374 <HAL_SPI_Transmit+0x378>
 8010328:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801032c:	f7f3 f8b2 	bl	8003494 <HAL_GetTick>
 8010330:	4602      	mov	r2, r0
 8010332:	693b      	ldr	r3, [r7, #16]
 8010334:	1ad3      	subs	r3, r2, r3
 8010336:	683a      	ldr	r2, [r7, #0]
 8010338:	429a      	cmp	r2, r3
 801033a:	d803      	bhi.n	8010344 <HAL_SPI_Transmit+0x348>
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010342:	d102      	bne.n	801034a <HAL_SPI_Transmit+0x34e>
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d114      	bne.n	8010374 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801034a:	68f8      	ldr	r0, [r7, #12]
 801034c:	f000 fab6 	bl	80108bc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010356:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	2201      	movs	r2, #1
 8010364:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	2200      	movs	r2, #0
 801036c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010370:	2303      	movs	r3, #3
 8010372:	e02c      	b.n	80103ce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801037a:	b29b      	uxth	r3, r3
 801037c:	2b00      	cmp	r3, #0
 801037e:	f47f af79 	bne.w	8010274 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	9300      	str	r3, [sp, #0]
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	2200      	movs	r2, #0
 801038a:	2108      	movs	r1, #8
 801038c:	68f8      	ldr	r0, [r7, #12]
 801038e:	f000 fb35 	bl	80109fc <SPI_WaitOnFlagUntilTimeout>
 8010392:	4603      	mov	r3, r0
 8010394:	2b00      	cmp	r3, #0
 8010396:	d007      	beq.n	80103a8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801039e:	f043 0220 	orr.w	r2, r3, #32
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80103a8:	68f8      	ldr	r0, [r7, #12]
 80103aa:	f000 fa87 	bl	80108bc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	2201      	movs	r2, #1
 80103b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	2200      	movs	r2, #0
 80103ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d001      	beq.n	80103cc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80103c8:	2301      	movs	r3, #1
 80103ca:	e000      	b.n	80103ce <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80103cc:	2300      	movs	r3, #0
  }
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3718      	adds	r7, #24
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop

080103d8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b088      	sub	sp, #32
 80103dc:	af00      	add	r7, sp, #0
 80103de:	60f8      	str	r0, [r7, #12]
 80103e0:	60b9      	str	r1, [r7, #8]
 80103e2:	603b      	str	r3, [r7, #0]
 80103e4:	4613      	mov	r3, r2
 80103e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103ec:	095b      	lsrs	r3, r3, #5
 80103ee:	b29b      	uxth	r3, r3
 80103f0:	3301      	adds	r3, #1
 80103f2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	3330      	adds	r3, #48	@ 0x30
 80103fa:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80103fc:	f7f3 f84a 	bl	8003494 <HAL_GetTick>
 8010400:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010408:	b2db      	uxtb	r3, r3
 801040a:	2b01      	cmp	r3, #1
 801040c:	d001      	beq.n	8010412 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 801040e:	2302      	movs	r3, #2
 8010410:	e250      	b.n	80108b4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d002      	beq.n	801041e <HAL_SPI_Receive+0x46>
 8010418:	88fb      	ldrh	r3, [r7, #6]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d101      	bne.n	8010422 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 801041e:	2301      	movs	r3, #1
 8010420:	e248      	b.n	80108b4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010428:	2b01      	cmp	r3, #1
 801042a:	d101      	bne.n	8010430 <HAL_SPI_Receive+0x58>
 801042c:	2302      	movs	r3, #2
 801042e:	e241      	b.n	80108b4 <HAL_SPI_Receive+0x4dc>
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2201      	movs	r2, #1
 8010434:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	2204      	movs	r2, #4
 801043c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	2200      	movs	r2, #0
 8010444:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	68ba      	ldr	r2, [r7, #8]
 801044c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	88fa      	ldrh	r2, [r7, #6]
 8010452:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	88fa      	ldrh	r2, [r7, #6]
 801045a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	2200      	movs	r2, #0
 8010462:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	2200      	movs	r2, #0
 8010468:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	2200      	movs	r2, #0
 8010470:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	2200      	movs	r2, #0
 8010478:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	2200      	movs	r2, #0
 801047e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	689b      	ldr	r3, [r3, #8]
 8010484:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8010488:	d108      	bne.n	801049c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	681a      	ldr	r2, [r3, #0]
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8010498:	601a      	str	r2, [r3, #0]
 801049a:	e009      	b.n	80104b0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	68db      	ldr	r3, [r3, #12]
 80104a2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80104ae:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	685a      	ldr	r2, [r3, #4]
 80104b6:	4b95      	ldr	r3, [pc, #596]	@ (801070c <HAL_SPI_Receive+0x334>)
 80104b8:	4013      	ands	r3, r2
 80104ba:	88f9      	ldrh	r1, [r7, #6]
 80104bc:	68fa      	ldr	r2, [r7, #12]
 80104be:	6812      	ldr	r2, [r2, #0]
 80104c0:	430b      	orrs	r3, r1
 80104c2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	681a      	ldr	r2, [r3, #0]
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	f042 0201 	orr.w	r2, r2, #1
 80104d2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	685b      	ldr	r3, [r3, #4]
 80104d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80104dc:	d107      	bne.n	80104ee <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	681a      	ldr	r2, [r3, #0]
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80104ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	68db      	ldr	r3, [r3, #12]
 80104f2:	2b0f      	cmp	r3, #15
 80104f4:	d96c      	bls.n	80105d0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80104f6:	e064      	b.n	80105c2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	695b      	ldr	r3, [r3, #20]
 80104fe:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	695b      	ldr	r3, [r3, #20]
 8010506:	f003 0301 	and.w	r3, r3, #1
 801050a:	2b01      	cmp	r3, #1
 801050c:	d114      	bne.n	8010538 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	681a      	ldr	r2, [r3, #0]
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010516:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010518:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801051e:	1d1a      	adds	r2, r3, #4
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801052a:	b29b      	uxth	r3, r3
 801052c:	3b01      	subs	r3, #1
 801052e:	b29a      	uxth	r2, r3
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010536:	e044      	b.n	80105c2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801053e:	b29b      	uxth	r3, r3
 8010540:	8bfa      	ldrh	r2, [r7, #30]
 8010542:	429a      	cmp	r2, r3
 8010544:	d919      	bls.n	801057a <HAL_SPI_Receive+0x1a2>
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801054c:	2b00      	cmp	r3, #0
 801054e:	d014      	beq.n	801057a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	681a      	ldr	r2, [r3, #0]
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010558:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801055a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010560:	1d1a      	adds	r2, r3, #4
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801056c:	b29b      	uxth	r3, r3
 801056e:	3b01      	subs	r3, #1
 8010570:	b29a      	uxth	r2, r3
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010578:	e023      	b.n	80105c2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801057a:	f7f2 ff8b 	bl	8003494 <HAL_GetTick>
 801057e:	4602      	mov	r2, r0
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	1ad3      	subs	r3, r2, r3
 8010584:	683a      	ldr	r2, [r7, #0]
 8010586:	429a      	cmp	r2, r3
 8010588:	d803      	bhi.n	8010592 <HAL_SPI_Receive+0x1ba>
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010590:	d102      	bne.n	8010598 <HAL_SPI_Receive+0x1c0>
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d114      	bne.n	80105c2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010598:	68f8      	ldr	r0, [r7, #12]
 801059a:	f000 f98f 	bl	80108bc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80105a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	2201      	movs	r2, #1
 80105b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	2200      	movs	r2, #0
 80105ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80105be:	2303      	movs	r3, #3
 80105c0:	e178      	b.n	80108b4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80105c8:	b29b      	uxth	r3, r3
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d194      	bne.n	80104f8 <HAL_SPI_Receive+0x120>
 80105ce:	e15e      	b.n	801088e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	68db      	ldr	r3, [r3, #12]
 80105d4:	2b07      	cmp	r3, #7
 80105d6:	f240 8153 	bls.w	8010880 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80105da:	e08f      	b.n	80106fc <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	695b      	ldr	r3, [r3, #20]
 80105e2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	695b      	ldr	r3, [r3, #20]
 80105ea:	f003 0301 	and.w	r3, r3, #1
 80105ee:	2b01      	cmp	r3, #1
 80105f0:	d114      	bne.n	801061c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80105f6:	69ba      	ldr	r2, [r7, #24]
 80105f8:	8812      	ldrh	r2, [r2, #0]
 80105fa:	b292      	uxth	r2, r2
 80105fc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010602:	1c9a      	adds	r2, r3, #2
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801060e:	b29b      	uxth	r3, r3
 8010610:	3b01      	subs	r3, #1
 8010612:	b29a      	uxth	r2, r3
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801061a:	e06f      	b.n	80106fc <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010622:	b29b      	uxth	r3, r3
 8010624:	8bfa      	ldrh	r2, [r7, #30]
 8010626:	429a      	cmp	r2, r3
 8010628:	d924      	bls.n	8010674 <HAL_SPI_Receive+0x29c>
 801062a:	693b      	ldr	r3, [r7, #16]
 801062c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010630:	2b00      	cmp	r3, #0
 8010632:	d01f      	beq.n	8010674 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010638:	69ba      	ldr	r2, [r7, #24]
 801063a:	8812      	ldrh	r2, [r2, #0]
 801063c:	b292      	uxth	r2, r2
 801063e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010644:	1c9a      	adds	r2, r3, #2
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801064e:	69ba      	ldr	r2, [r7, #24]
 8010650:	8812      	ldrh	r2, [r2, #0]
 8010652:	b292      	uxth	r2, r2
 8010654:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801065a:	1c9a      	adds	r2, r3, #2
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010666:	b29b      	uxth	r3, r3
 8010668:	3b02      	subs	r3, #2
 801066a:	b29a      	uxth	r2, r3
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010672:	e043      	b.n	80106fc <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801067a:	b29b      	uxth	r3, r3
 801067c:	2b01      	cmp	r3, #1
 801067e:	d119      	bne.n	80106b4 <HAL_SPI_Receive+0x2dc>
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010686:	2b00      	cmp	r3, #0
 8010688:	d014      	beq.n	80106b4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801068e:	69ba      	ldr	r2, [r7, #24]
 8010690:	8812      	ldrh	r2, [r2, #0]
 8010692:	b292      	uxth	r2, r2
 8010694:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801069a:	1c9a      	adds	r2, r3, #2
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80106a6:	b29b      	uxth	r3, r3
 80106a8:	3b01      	subs	r3, #1
 80106aa:	b29a      	uxth	r2, r3
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80106b2:	e023      	b.n	80106fc <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80106b4:	f7f2 feee 	bl	8003494 <HAL_GetTick>
 80106b8:	4602      	mov	r2, r0
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	1ad3      	subs	r3, r2, r3
 80106be:	683a      	ldr	r2, [r7, #0]
 80106c0:	429a      	cmp	r2, r3
 80106c2:	d803      	bhi.n	80106cc <HAL_SPI_Receive+0x2f4>
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ca:	d102      	bne.n	80106d2 <HAL_SPI_Receive+0x2fa>
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d114      	bne.n	80106fc <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80106d2:	68f8      	ldr	r0, [r7, #12]
 80106d4:	f000 f8f2 	bl	80108bc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80106de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	2201      	movs	r2, #1
 80106ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	2200      	movs	r2, #0
 80106f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80106f8:	2303      	movs	r3, #3
 80106fa:	e0db      	b.n	80108b4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010702:	b29b      	uxth	r3, r3
 8010704:	2b00      	cmp	r3, #0
 8010706:	f47f af69 	bne.w	80105dc <HAL_SPI_Receive+0x204>
 801070a:	e0c0      	b.n	801088e <HAL_SPI_Receive+0x4b6>
 801070c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	695b      	ldr	r3, [r3, #20]
 8010716:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	695b      	ldr	r3, [r3, #20]
 801071e:	f003 0301 	and.w	r3, r3, #1
 8010722:	2b01      	cmp	r3, #1
 8010724:	d117      	bne.n	8010756 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010732:	7812      	ldrb	r2, [r2, #0]
 8010734:	b2d2      	uxtb	r2, r2
 8010736:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801073c:	1c5a      	adds	r2, r3, #1
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010748:	b29b      	uxth	r3, r3
 801074a:	3b01      	subs	r3, #1
 801074c:	b29a      	uxth	r2, r3
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010754:	e094      	b.n	8010880 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801075c:	b29b      	uxth	r3, r3
 801075e:	8bfa      	ldrh	r2, [r7, #30]
 8010760:	429a      	cmp	r2, r3
 8010762:	d946      	bls.n	80107f2 <HAL_SPI_Receive+0x41a>
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801076a:	2b00      	cmp	r3, #0
 801076c:	d041      	beq.n	80107f2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801077a:	7812      	ldrb	r2, [r2, #0]
 801077c:	b2d2      	uxtb	r2, r2
 801077e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010784:	1c5a      	adds	r2, r3, #1
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010796:	7812      	ldrb	r2, [r2, #0]
 8010798:	b2d2      	uxtb	r2, r2
 801079a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80107a0:	1c5a      	adds	r2, r3, #1
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80107b2:	7812      	ldrb	r2, [r2, #0]
 80107b4:	b2d2      	uxtb	r2, r2
 80107b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80107bc:	1c5a      	adds	r2, r3, #1
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80107ce:	7812      	ldrb	r2, [r2, #0]
 80107d0:	b2d2      	uxtb	r2, r2
 80107d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80107d8:	1c5a      	adds	r2, r3, #1
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80107e4:	b29b      	uxth	r3, r3
 80107e6:	3b04      	subs	r3, #4
 80107e8:	b29a      	uxth	r2, r3
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80107f0:	e046      	b.n	8010880 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80107f8:	b29b      	uxth	r3, r3
 80107fa:	2b03      	cmp	r3, #3
 80107fc:	d81c      	bhi.n	8010838 <HAL_SPI_Receive+0x460>
 80107fe:	693b      	ldr	r3, [r7, #16]
 8010800:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8010804:	2b00      	cmp	r3, #0
 8010806:	d017      	beq.n	8010838 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010814:	7812      	ldrb	r2, [r2, #0]
 8010816:	b2d2      	uxtb	r2, r2
 8010818:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801081e:	1c5a      	adds	r2, r3, #1
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801082a:	b29b      	uxth	r3, r3
 801082c:	3b01      	subs	r3, #1
 801082e:	b29a      	uxth	r2, r3
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010836:	e023      	b.n	8010880 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010838:	f7f2 fe2c 	bl	8003494 <HAL_GetTick>
 801083c:	4602      	mov	r2, r0
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	1ad3      	subs	r3, r2, r3
 8010842:	683a      	ldr	r2, [r7, #0]
 8010844:	429a      	cmp	r2, r3
 8010846:	d803      	bhi.n	8010850 <HAL_SPI_Receive+0x478>
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801084e:	d102      	bne.n	8010856 <HAL_SPI_Receive+0x47e>
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d114      	bne.n	8010880 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010856:	68f8      	ldr	r0, [r7, #12]
 8010858:	f000 f830 	bl	80108bc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010862:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	2201      	movs	r2, #1
 8010870:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	2200      	movs	r2, #0
 8010878:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801087c:	2303      	movs	r3, #3
 801087e:	e019      	b.n	80108b4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010886:	b29b      	uxth	r3, r3
 8010888:	2b00      	cmp	r3, #0
 801088a:	f47f af41 	bne.w	8010710 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801088e:	68f8      	ldr	r0, [r7, #12]
 8010890:	f000 f814 	bl	80108bc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	2201      	movs	r2, #1
 8010898:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	2200      	movs	r2, #0
 80108a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d001      	beq.n	80108b2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80108ae:	2301      	movs	r3, #1
 80108b0:	e000      	b.n	80108b4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80108b2:	2300      	movs	r3, #0
  }
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	3720      	adds	r7, #32
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80108bc:	b480      	push	{r7}
 80108be:	b085      	sub	sp, #20
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	695b      	ldr	r3, [r3, #20]
 80108ca:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	699a      	ldr	r2, [r3, #24]
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	f042 0208 	orr.w	r2, r2, #8
 80108da:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	699a      	ldr	r2, [r3, #24]
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	f042 0210 	orr.w	r2, r2, #16
 80108ea:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	681a      	ldr	r2, [r3, #0]
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	f022 0201 	bic.w	r2, r2, #1
 80108fa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	6919      	ldr	r1, [r3, #16]
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681a      	ldr	r2, [r3, #0]
 8010906:	4b3c      	ldr	r3, [pc, #240]	@ (80109f8 <SPI_CloseTransfer+0x13c>)
 8010908:	400b      	ands	r3, r1
 801090a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	689a      	ldr	r2, [r3, #8]
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801091a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010922:	b2db      	uxtb	r3, r3
 8010924:	2b04      	cmp	r3, #4
 8010926:	d014      	beq.n	8010952 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	f003 0320 	and.w	r3, r3, #32
 801092e:	2b00      	cmp	r3, #0
 8010930:	d00f      	beq.n	8010952 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010938:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	699a      	ldr	r2, [r3, #24]
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	f042 0220 	orr.w	r2, r2, #32
 8010950:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010958:	b2db      	uxtb	r3, r3
 801095a:	2b03      	cmp	r3, #3
 801095c:	d014      	beq.n	8010988 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010964:	2b00      	cmp	r3, #0
 8010966:	d00f      	beq.n	8010988 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801096e:	f043 0204 	orr.w	r2, r3, #4
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	699a      	ldr	r2, [r3, #24]
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010986:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801098e:	2b00      	cmp	r3, #0
 8010990:	d00f      	beq.n	80109b2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010998:	f043 0201 	orr.w	r2, r3, #1
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	699a      	ldr	r2, [r3, #24]
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80109b0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d00f      	beq.n	80109dc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80109c2:	f043 0208 	orr.w	r2, r3, #8
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	699a      	ldr	r2, [r3, #24]
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80109da:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2200      	movs	r2, #0
 80109e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2200      	movs	r2, #0
 80109e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80109ec:	bf00      	nop
 80109ee:	3714      	adds	r7, #20
 80109f0:	46bd      	mov	sp, r7
 80109f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f6:	4770      	bx	lr
 80109f8:	fffffc90 	.word	0xfffffc90

080109fc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b084      	sub	sp, #16
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	60f8      	str	r0, [r7, #12]
 8010a04:	60b9      	str	r1, [r7, #8]
 8010a06:	603b      	str	r3, [r7, #0]
 8010a08:	4613      	mov	r3, r2
 8010a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010a0c:	e010      	b.n	8010a30 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010a0e:	f7f2 fd41 	bl	8003494 <HAL_GetTick>
 8010a12:	4602      	mov	r2, r0
 8010a14:	69bb      	ldr	r3, [r7, #24]
 8010a16:	1ad3      	subs	r3, r2, r3
 8010a18:	683a      	ldr	r2, [r7, #0]
 8010a1a:	429a      	cmp	r2, r3
 8010a1c:	d803      	bhi.n	8010a26 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a24:	d102      	bne.n	8010a2c <SPI_WaitOnFlagUntilTimeout+0x30>
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d101      	bne.n	8010a30 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010a2c:	2303      	movs	r3, #3
 8010a2e:	e00f      	b.n	8010a50 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	695a      	ldr	r2, [r3, #20]
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	4013      	ands	r3, r2
 8010a3a:	68ba      	ldr	r2, [r7, #8]
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	bf0c      	ite	eq
 8010a40:	2301      	moveq	r3, #1
 8010a42:	2300      	movne	r3, #0
 8010a44:	b2db      	uxtb	r3, r3
 8010a46:	461a      	mov	r2, r3
 8010a48:	79fb      	ldrb	r3, [r7, #7]
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d0df      	beq.n	8010a0e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8010a4e:	2300      	movs	r3, #0
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	3710      	adds	r7, #16
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}

08010a58 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b085      	sub	sp, #20
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a64:	095b      	lsrs	r3, r3, #5
 8010a66:	3301      	adds	r3, #1
 8010a68:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	68db      	ldr	r3, [r3, #12]
 8010a6e:	3301      	adds	r3, #1
 8010a70:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	3307      	adds	r3, #7
 8010a76:	08db      	lsrs	r3, r3, #3
 8010a78:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	68fa      	ldr	r2, [r7, #12]
 8010a7e:	fb02 f303 	mul.w	r3, r2, r3
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	3714      	adds	r7, #20
 8010a86:	46bd      	mov	sp, r7
 8010a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8c:	4770      	bx	lr

08010a8e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010a8e:	b580      	push	{r7, lr}
 8010a90:	b082      	sub	sp, #8
 8010a92:	af00      	add	r7, sp, #0
 8010a94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d101      	bne.n	8010aa0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010a9c:	2301      	movs	r3, #1
 8010a9e:	e049      	b.n	8010b34 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010aa6:	b2db      	uxtb	r3, r3
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d106      	bne.n	8010aba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2200      	movs	r2, #0
 8010ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010ab4:	6878      	ldr	r0, [r7, #4]
 8010ab6:	f7f1 ff69 	bl	800298c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	2202      	movs	r2, #2
 8010abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681a      	ldr	r2, [r3, #0]
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	3304      	adds	r3, #4
 8010aca:	4619      	mov	r1, r3
 8010acc:	4610      	mov	r0, r2
 8010ace:	f000 fd59 	bl	8011584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	2201      	movs	r2, #1
 8010ad6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2201      	movs	r2, #1
 8010ade:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2201      	movs	r2, #1
 8010ae6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	2201      	movs	r2, #1
 8010aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2201      	movs	r2, #1
 8010af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2201      	movs	r2, #1
 8010afe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2201      	movs	r2, #1
 8010b06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	2201      	movs	r2, #1
 8010b0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	2201      	movs	r2, #1
 8010b16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2201      	movs	r2, #1
 8010b1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2201      	movs	r2, #1
 8010b26:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2201      	movs	r2, #1
 8010b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010b32:	2300      	movs	r3, #0
}
 8010b34:	4618      	mov	r0, r3
 8010b36:	3708      	adds	r7, #8
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	bd80      	pop	{r7, pc}

08010b3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010b3c:	b480      	push	{r7}
 8010b3e:	b085      	sub	sp, #20
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010b4a:	b2db      	uxtb	r3, r3
 8010b4c:	2b01      	cmp	r3, #1
 8010b4e:	d001      	beq.n	8010b54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010b50:	2301      	movs	r3, #1
 8010b52:	e054      	b.n	8010bfe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2202      	movs	r2, #2
 8010b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	68da      	ldr	r2, [r3, #12]
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	f042 0201 	orr.w	r2, r2, #1
 8010b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	4a26      	ldr	r2, [pc, #152]	@ (8010c0c <HAL_TIM_Base_Start_IT+0xd0>)
 8010b72:	4293      	cmp	r3, r2
 8010b74:	d022      	beq.n	8010bbc <HAL_TIM_Base_Start_IT+0x80>
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010b7e:	d01d      	beq.n	8010bbc <HAL_TIM_Base_Start_IT+0x80>
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	4a22      	ldr	r2, [pc, #136]	@ (8010c10 <HAL_TIM_Base_Start_IT+0xd4>)
 8010b86:	4293      	cmp	r3, r2
 8010b88:	d018      	beq.n	8010bbc <HAL_TIM_Base_Start_IT+0x80>
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	4a21      	ldr	r2, [pc, #132]	@ (8010c14 <HAL_TIM_Base_Start_IT+0xd8>)
 8010b90:	4293      	cmp	r3, r2
 8010b92:	d013      	beq.n	8010bbc <HAL_TIM_Base_Start_IT+0x80>
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	4a1f      	ldr	r2, [pc, #124]	@ (8010c18 <HAL_TIM_Base_Start_IT+0xdc>)
 8010b9a:	4293      	cmp	r3, r2
 8010b9c:	d00e      	beq.n	8010bbc <HAL_TIM_Base_Start_IT+0x80>
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8010c1c <HAL_TIM_Base_Start_IT+0xe0>)
 8010ba4:	4293      	cmp	r3, r2
 8010ba6:	d009      	beq.n	8010bbc <HAL_TIM_Base_Start_IT+0x80>
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	4a1c      	ldr	r2, [pc, #112]	@ (8010c20 <HAL_TIM_Base_Start_IT+0xe4>)
 8010bae:	4293      	cmp	r3, r2
 8010bb0:	d004      	beq.n	8010bbc <HAL_TIM_Base_Start_IT+0x80>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8010c24 <HAL_TIM_Base_Start_IT+0xe8>)
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	d115      	bne.n	8010be8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	689a      	ldr	r2, [r3, #8]
 8010bc2:	4b19      	ldr	r3, [pc, #100]	@ (8010c28 <HAL_TIM_Base_Start_IT+0xec>)
 8010bc4:	4013      	ands	r3, r2
 8010bc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	2b06      	cmp	r3, #6
 8010bcc:	d015      	beq.n	8010bfa <HAL_TIM_Base_Start_IT+0xbe>
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010bd4:	d011      	beq.n	8010bfa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	681a      	ldr	r2, [r3, #0]
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	f042 0201 	orr.w	r2, r2, #1
 8010be4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010be6:	e008      	b.n	8010bfa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	681a      	ldr	r2, [r3, #0]
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	f042 0201 	orr.w	r2, r2, #1
 8010bf6:	601a      	str	r2, [r3, #0]
 8010bf8:	e000      	b.n	8010bfc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bfa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010bfc:	2300      	movs	r3, #0
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	3714      	adds	r7, #20
 8010c02:	46bd      	mov	sp, r7
 8010c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c08:	4770      	bx	lr
 8010c0a:	bf00      	nop
 8010c0c:	40010000 	.word	0x40010000
 8010c10:	40000400 	.word	0x40000400
 8010c14:	40000800 	.word	0x40000800
 8010c18:	40000c00 	.word	0x40000c00
 8010c1c:	40010400 	.word	0x40010400
 8010c20:	40001800 	.word	0x40001800
 8010c24:	40014000 	.word	0x40014000
 8010c28:	00010007 	.word	0x00010007

08010c2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b082      	sub	sp, #8
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d101      	bne.n	8010c3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010c3a:	2301      	movs	r3, #1
 8010c3c:	e049      	b.n	8010cd2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010c44:	b2db      	uxtb	r3, r3
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d106      	bne.n	8010c58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	f7f1 fe34 	bl	80028c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	2202      	movs	r2, #2
 8010c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681a      	ldr	r2, [r3, #0]
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	3304      	adds	r3, #4
 8010c68:	4619      	mov	r1, r3
 8010c6a:	4610      	mov	r0, r2
 8010c6c:	f000 fc8a 	bl	8011584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2201      	movs	r2, #1
 8010c74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	2201      	movs	r2, #1
 8010c84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2201      	movs	r2, #1
 8010c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2201      	movs	r2, #1
 8010ca4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2201      	movs	r2, #1
 8010cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2201      	movs	r2, #1
 8010cb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2201      	movs	r2, #1
 8010cbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2201      	movs	r2, #1
 8010cc4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2201      	movs	r2, #1
 8010ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010cd0:	2300      	movs	r3, #0
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	3708      	adds	r7, #8
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd80      	pop	{r7, pc}
	...

08010cdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b084      	sub	sp, #16
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
 8010ce4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d109      	bne.n	8010d00 <HAL_TIM_PWM_Start+0x24>
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010cf2:	b2db      	uxtb	r3, r3
 8010cf4:	2b01      	cmp	r3, #1
 8010cf6:	bf14      	ite	ne
 8010cf8:	2301      	movne	r3, #1
 8010cfa:	2300      	moveq	r3, #0
 8010cfc:	b2db      	uxtb	r3, r3
 8010cfe:	e03c      	b.n	8010d7a <HAL_TIM_PWM_Start+0x9e>
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	2b04      	cmp	r3, #4
 8010d04:	d109      	bne.n	8010d1a <HAL_TIM_PWM_Start+0x3e>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8010d0c:	b2db      	uxtb	r3, r3
 8010d0e:	2b01      	cmp	r3, #1
 8010d10:	bf14      	ite	ne
 8010d12:	2301      	movne	r3, #1
 8010d14:	2300      	moveq	r3, #0
 8010d16:	b2db      	uxtb	r3, r3
 8010d18:	e02f      	b.n	8010d7a <HAL_TIM_PWM_Start+0x9e>
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	2b08      	cmp	r3, #8
 8010d1e:	d109      	bne.n	8010d34 <HAL_TIM_PWM_Start+0x58>
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010d26:	b2db      	uxtb	r3, r3
 8010d28:	2b01      	cmp	r3, #1
 8010d2a:	bf14      	ite	ne
 8010d2c:	2301      	movne	r3, #1
 8010d2e:	2300      	moveq	r3, #0
 8010d30:	b2db      	uxtb	r3, r3
 8010d32:	e022      	b.n	8010d7a <HAL_TIM_PWM_Start+0x9e>
 8010d34:	683b      	ldr	r3, [r7, #0]
 8010d36:	2b0c      	cmp	r3, #12
 8010d38:	d109      	bne.n	8010d4e <HAL_TIM_PWM_Start+0x72>
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010d40:	b2db      	uxtb	r3, r3
 8010d42:	2b01      	cmp	r3, #1
 8010d44:	bf14      	ite	ne
 8010d46:	2301      	movne	r3, #1
 8010d48:	2300      	moveq	r3, #0
 8010d4a:	b2db      	uxtb	r3, r3
 8010d4c:	e015      	b.n	8010d7a <HAL_TIM_PWM_Start+0x9e>
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	2b10      	cmp	r3, #16
 8010d52:	d109      	bne.n	8010d68 <HAL_TIM_PWM_Start+0x8c>
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010d5a:	b2db      	uxtb	r3, r3
 8010d5c:	2b01      	cmp	r3, #1
 8010d5e:	bf14      	ite	ne
 8010d60:	2301      	movne	r3, #1
 8010d62:	2300      	moveq	r3, #0
 8010d64:	b2db      	uxtb	r3, r3
 8010d66:	e008      	b.n	8010d7a <HAL_TIM_PWM_Start+0x9e>
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010d6e:	b2db      	uxtb	r3, r3
 8010d70:	2b01      	cmp	r3, #1
 8010d72:	bf14      	ite	ne
 8010d74:	2301      	movne	r3, #1
 8010d76:	2300      	moveq	r3, #0
 8010d78:	b2db      	uxtb	r3, r3
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d001      	beq.n	8010d82 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8010d7e:	2301      	movs	r3, #1
 8010d80:	e0a1      	b.n	8010ec6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d104      	bne.n	8010d92 <HAL_TIM_PWM_Start+0xb6>
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2202      	movs	r2, #2
 8010d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010d90:	e023      	b.n	8010dda <HAL_TIM_PWM_Start+0xfe>
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	2b04      	cmp	r3, #4
 8010d96:	d104      	bne.n	8010da2 <HAL_TIM_PWM_Start+0xc6>
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2202      	movs	r2, #2
 8010d9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010da0:	e01b      	b.n	8010dda <HAL_TIM_PWM_Start+0xfe>
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	2b08      	cmp	r3, #8
 8010da6:	d104      	bne.n	8010db2 <HAL_TIM_PWM_Start+0xd6>
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2202      	movs	r2, #2
 8010dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010db0:	e013      	b.n	8010dda <HAL_TIM_PWM_Start+0xfe>
 8010db2:	683b      	ldr	r3, [r7, #0]
 8010db4:	2b0c      	cmp	r3, #12
 8010db6:	d104      	bne.n	8010dc2 <HAL_TIM_PWM_Start+0xe6>
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2202      	movs	r2, #2
 8010dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010dc0:	e00b      	b.n	8010dda <HAL_TIM_PWM_Start+0xfe>
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	2b10      	cmp	r3, #16
 8010dc6:	d104      	bne.n	8010dd2 <HAL_TIM_PWM_Start+0xf6>
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2202      	movs	r2, #2
 8010dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010dd0:	e003      	b.n	8010dda <HAL_TIM_PWM_Start+0xfe>
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2202      	movs	r2, #2
 8010dd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	2201      	movs	r2, #1
 8010de0:	6839      	ldr	r1, [r7, #0]
 8010de2:	4618      	mov	r0, r3
 8010de4:	f000 ffe2 	bl	8011dac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	4a38      	ldr	r2, [pc, #224]	@ (8010ed0 <HAL_TIM_PWM_Start+0x1f4>)
 8010dee:	4293      	cmp	r3, r2
 8010df0:	d013      	beq.n	8010e1a <HAL_TIM_PWM_Start+0x13e>
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	4a37      	ldr	r2, [pc, #220]	@ (8010ed4 <HAL_TIM_PWM_Start+0x1f8>)
 8010df8:	4293      	cmp	r3, r2
 8010dfa:	d00e      	beq.n	8010e1a <HAL_TIM_PWM_Start+0x13e>
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	4a35      	ldr	r2, [pc, #212]	@ (8010ed8 <HAL_TIM_PWM_Start+0x1fc>)
 8010e02:	4293      	cmp	r3, r2
 8010e04:	d009      	beq.n	8010e1a <HAL_TIM_PWM_Start+0x13e>
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	4a34      	ldr	r2, [pc, #208]	@ (8010edc <HAL_TIM_PWM_Start+0x200>)
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	d004      	beq.n	8010e1a <HAL_TIM_PWM_Start+0x13e>
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	4a32      	ldr	r2, [pc, #200]	@ (8010ee0 <HAL_TIM_PWM_Start+0x204>)
 8010e16:	4293      	cmp	r3, r2
 8010e18:	d101      	bne.n	8010e1e <HAL_TIM_PWM_Start+0x142>
 8010e1a:	2301      	movs	r3, #1
 8010e1c:	e000      	b.n	8010e20 <HAL_TIM_PWM_Start+0x144>
 8010e1e:	2300      	movs	r3, #0
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d007      	beq.n	8010e34 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8010e32:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	4a25      	ldr	r2, [pc, #148]	@ (8010ed0 <HAL_TIM_PWM_Start+0x1f4>)
 8010e3a:	4293      	cmp	r3, r2
 8010e3c:	d022      	beq.n	8010e84 <HAL_TIM_PWM_Start+0x1a8>
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010e46:	d01d      	beq.n	8010e84 <HAL_TIM_PWM_Start+0x1a8>
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	4a25      	ldr	r2, [pc, #148]	@ (8010ee4 <HAL_TIM_PWM_Start+0x208>)
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	d018      	beq.n	8010e84 <HAL_TIM_PWM_Start+0x1a8>
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	4a24      	ldr	r2, [pc, #144]	@ (8010ee8 <HAL_TIM_PWM_Start+0x20c>)
 8010e58:	4293      	cmp	r3, r2
 8010e5a:	d013      	beq.n	8010e84 <HAL_TIM_PWM_Start+0x1a8>
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	4a22      	ldr	r2, [pc, #136]	@ (8010eec <HAL_TIM_PWM_Start+0x210>)
 8010e62:	4293      	cmp	r3, r2
 8010e64:	d00e      	beq.n	8010e84 <HAL_TIM_PWM_Start+0x1a8>
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	4a1a      	ldr	r2, [pc, #104]	@ (8010ed4 <HAL_TIM_PWM_Start+0x1f8>)
 8010e6c:	4293      	cmp	r3, r2
 8010e6e:	d009      	beq.n	8010e84 <HAL_TIM_PWM_Start+0x1a8>
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	4a1e      	ldr	r2, [pc, #120]	@ (8010ef0 <HAL_TIM_PWM_Start+0x214>)
 8010e76:	4293      	cmp	r3, r2
 8010e78:	d004      	beq.n	8010e84 <HAL_TIM_PWM_Start+0x1a8>
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	4a16      	ldr	r2, [pc, #88]	@ (8010ed8 <HAL_TIM_PWM_Start+0x1fc>)
 8010e80:	4293      	cmp	r3, r2
 8010e82:	d115      	bne.n	8010eb0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	689a      	ldr	r2, [r3, #8]
 8010e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8010ef4 <HAL_TIM_PWM_Start+0x218>)
 8010e8c:	4013      	ands	r3, r2
 8010e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	2b06      	cmp	r3, #6
 8010e94:	d015      	beq.n	8010ec2 <HAL_TIM_PWM_Start+0x1e6>
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010e9c:	d011      	beq.n	8010ec2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	681a      	ldr	r2, [r3, #0]
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	f042 0201 	orr.w	r2, r2, #1
 8010eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010eae:	e008      	b.n	8010ec2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	681a      	ldr	r2, [r3, #0]
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	f042 0201 	orr.w	r2, r2, #1
 8010ebe:	601a      	str	r2, [r3, #0]
 8010ec0:	e000      	b.n	8010ec4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ec2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010ec4:	2300      	movs	r3, #0
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	3710      	adds	r7, #16
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	bd80      	pop	{r7, pc}
 8010ece:	bf00      	nop
 8010ed0:	40010000 	.word	0x40010000
 8010ed4:	40010400 	.word	0x40010400
 8010ed8:	40014000 	.word	0x40014000
 8010edc:	40014400 	.word	0x40014400
 8010ee0:	40014800 	.word	0x40014800
 8010ee4:	40000400 	.word	0x40000400
 8010ee8:	40000800 	.word	0x40000800
 8010eec:	40000c00 	.word	0x40000c00
 8010ef0:	40001800 	.word	0x40001800
 8010ef4:	00010007 	.word	0x00010007

08010ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b084      	sub	sp, #16
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	68db      	ldr	r3, [r3, #12]
 8010f06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	691b      	ldr	r3, [r3, #16]
 8010f0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010f10:	68bb      	ldr	r3, [r7, #8]
 8010f12:	f003 0302 	and.w	r3, r3, #2
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d020      	beq.n	8010f5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	f003 0302 	and.w	r3, r3, #2
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d01b      	beq.n	8010f5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	f06f 0202 	mvn.w	r2, #2
 8010f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2201      	movs	r2, #1
 8010f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	699b      	ldr	r3, [r3, #24]
 8010f3a:	f003 0303 	and.w	r3, r3, #3
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d003      	beq.n	8010f4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010f42:	6878      	ldr	r0, [r7, #4]
 8010f44:	f000 fb00 	bl	8011548 <HAL_TIM_IC_CaptureCallback>
 8010f48:	e005      	b.n	8010f56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f000 faf2 	bl	8011534 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f000 fb03 	bl	801155c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	2200      	movs	r2, #0
 8010f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	f003 0304 	and.w	r3, r3, #4
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d020      	beq.n	8010fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	f003 0304 	and.w	r3, r3, #4
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d01b      	beq.n	8010fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	f06f 0204 	mvn.w	r2, #4
 8010f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	2202      	movs	r2, #2
 8010f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	699b      	ldr	r3, [r3, #24]
 8010f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d003      	beq.n	8010f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f000 fada 	bl	8011548 <HAL_TIM_IC_CaptureCallback>
 8010f94:	e005      	b.n	8010fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f96:	6878      	ldr	r0, [r7, #4]
 8010f98:	f000 facc 	bl	8011534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	f000 fadd 	bl	801155c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	f003 0308 	and.w	r3, r3, #8
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d020      	beq.n	8010ff4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	f003 0308 	and.w	r3, r3, #8
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d01b      	beq.n	8010ff4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	f06f 0208 	mvn.w	r2, #8
 8010fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	2204      	movs	r2, #4
 8010fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	69db      	ldr	r3, [r3, #28]
 8010fd2:	f003 0303 	and.w	r3, r3, #3
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d003      	beq.n	8010fe2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f000 fab4 	bl	8011548 <HAL_TIM_IC_CaptureCallback>
 8010fe0:	e005      	b.n	8010fee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fe2:	6878      	ldr	r0, [r7, #4]
 8010fe4:	f000 faa6 	bl	8011534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010fe8:	6878      	ldr	r0, [r7, #4]
 8010fea:	f000 fab7 	bl	801155c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8010ff4:	68bb      	ldr	r3, [r7, #8]
 8010ff6:	f003 0310 	and.w	r3, r3, #16
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d020      	beq.n	8011040 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	f003 0310 	and.w	r3, r3, #16
 8011004:	2b00      	cmp	r3, #0
 8011006:	d01b      	beq.n	8011040 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	f06f 0210 	mvn.w	r2, #16
 8011010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	2208      	movs	r2, #8
 8011016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	69db      	ldr	r3, [r3, #28]
 801101e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011022:	2b00      	cmp	r3, #0
 8011024:	d003      	beq.n	801102e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	f000 fa8e 	bl	8011548 <HAL_TIM_IC_CaptureCallback>
 801102c:	e005      	b.n	801103a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f000 fa80 	bl	8011534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f000 fa91 	bl	801155c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	2200      	movs	r2, #0
 801103e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	f003 0301 	and.w	r3, r3, #1
 8011046:	2b00      	cmp	r3, #0
 8011048:	d00c      	beq.n	8011064 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	f003 0301 	and.w	r3, r3, #1
 8011050:	2b00      	cmp	r3, #0
 8011052:	d007      	beq.n	8011064 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	f06f 0201 	mvn.w	r2, #1
 801105c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f000 fa5e 	bl	8011520 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801106a:	2b00      	cmp	r3, #0
 801106c:	d104      	bne.n	8011078 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8011074:	2b00      	cmp	r3, #0
 8011076:	d00c      	beq.n	8011092 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801107e:	2b00      	cmp	r3, #0
 8011080:	d007      	beq.n	8011092 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801108a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	f000 ffc9 	bl	8012024 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011098:	2b00      	cmp	r3, #0
 801109a:	d00c      	beq.n	80110b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d007      	beq.n	80110b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80110ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f000 ffc1 	bl	8012038 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d00c      	beq.n	80110da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d007      	beq.n	80110da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80110d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f000 fa4b 	bl	8011570 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80110da:	68bb      	ldr	r3, [r7, #8]
 80110dc:	f003 0320 	and.w	r3, r3, #32
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d00c      	beq.n	80110fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	f003 0320 	and.w	r3, r3, #32
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d007      	beq.n	80110fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	f06f 0220 	mvn.w	r2, #32
 80110f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f000 ff89 	bl	8012010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80110fe:	bf00      	nop
 8011100:	3710      	adds	r7, #16
 8011102:	46bd      	mov	sp, r7
 8011104:	bd80      	pop	{r7, pc}
	...

08011108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b086      	sub	sp, #24
 801110c:	af00      	add	r7, sp, #0
 801110e:	60f8      	str	r0, [r7, #12]
 8011110:	60b9      	str	r1, [r7, #8]
 8011112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011114:	2300      	movs	r3, #0
 8011116:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801111e:	2b01      	cmp	r3, #1
 8011120:	d101      	bne.n	8011126 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011122:	2302      	movs	r3, #2
 8011124:	e0ff      	b.n	8011326 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	2201      	movs	r2, #1
 801112a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	2b14      	cmp	r3, #20
 8011132:	f200 80f0 	bhi.w	8011316 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8011136:	a201      	add	r2, pc, #4	@ (adr r2, 801113c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801113c:	08011191 	.word	0x08011191
 8011140:	08011317 	.word	0x08011317
 8011144:	08011317 	.word	0x08011317
 8011148:	08011317 	.word	0x08011317
 801114c:	080111d1 	.word	0x080111d1
 8011150:	08011317 	.word	0x08011317
 8011154:	08011317 	.word	0x08011317
 8011158:	08011317 	.word	0x08011317
 801115c:	08011213 	.word	0x08011213
 8011160:	08011317 	.word	0x08011317
 8011164:	08011317 	.word	0x08011317
 8011168:	08011317 	.word	0x08011317
 801116c:	08011253 	.word	0x08011253
 8011170:	08011317 	.word	0x08011317
 8011174:	08011317 	.word	0x08011317
 8011178:	08011317 	.word	0x08011317
 801117c:	08011295 	.word	0x08011295
 8011180:	08011317 	.word	0x08011317
 8011184:	08011317 	.word	0x08011317
 8011188:	08011317 	.word	0x08011317
 801118c:	080112d5 	.word	0x080112d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	68b9      	ldr	r1, [r7, #8]
 8011196:	4618      	mov	r0, r3
 8011198:	f000 fa94 	bl	80116c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	699a      	ldr	r2, [r3, #24]
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	f042 0208 	orr.w	r2, r2, #8
 80111aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	699a      	ldr	r2, [r3, #24]
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	f022 0204 	bic.w	r2, r2, #4
 80111ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	6999      	ldr	r1, [r3, #24]
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	691a      	ldr	r2, [r3, #16]
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	430a      	orrs	r2, r1
 80111cc:	619a      	str	r2, [r3, #24]
      break;
 80111ce:	e0a5      	b.n	801131c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	68b9      	ldr	r1, [r7, #8]
 80111d6:	4618      	mov	r0, r3
 80111d8:	f000 fb04 	bl	80117e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	699a      	ldr	r2, [r3, #24]
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80111ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	699a      	ldr	r2, [r3, #24]
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80111fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	6999      	ldr	r1, [r3, #24]
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	691b      	ldr	r3, [r3, #16]
 8011206:	021a      	lsls	r2, r3, #8
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	430a      	orrs	r2, r1
 801120e:	619a      	str	r2, [r3, #24]
      break;
 8011210:	e084      	b.n	801131c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	68b9      	ldr	r1, [r7, #8]
 8011218:	4618      	mov	r0, r3
 801121a:	f000 fb6d 	bl	80118f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	69da      	ldr	r2, [r3, #28]
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	f042 0208 	orr.w	r2, r2, #8
 801122c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	69da      	ldr	r2, [r3, #28]
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	f022 0204 	bic.w	r2, r2, #4
 801123c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	69d9      	ldr	r1, [r3, #28]
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	691a      	ldr	r2, [r3, #16]
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	430a      	orrs	r2, r1
 801124e:	61da      	str	r2, [r3, #28]
      break;
 8011250:	e064      	b.n	801131c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	68b9      	ldr	r1, [r7, #8]
 8011258:	4618      	mov	r0, r3
 801125a:	f000 fbd5 	bl	8011a08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	69da      	ldr	r2, [r3, #28]
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801126c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	69da      	ldr	r2, [r3, #28]
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801127c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	69d9      	ldr	r1, [r3, #28]
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	691b      	ldr	r3, [r3, #16]
 8011288:	021a      	lsls	r2, r3, #8
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	430a      	orrs	r2, r1
 8011290:	61da      	str	r2, [r3, #28]
      break;
 8011292:	e043      	b.n	801131c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	68b9      	ldr	r1, [r7, #8]
 801129a:	4618      	mov	r0, r3
 801129c:	f000 fc1e 	bl	8011adc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	f042 0208 	orr.w	r2, r2, #8
 80112ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	f022 0204 	bic.w	r2, r2, #4
 80112be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80112c6:	68bb      	ldr	r3, [r7, #8]
 80112c8:	691a      	ldr	r2, [r3, #16]
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	430a      	orrs	r2, r1
 80112d0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80112d2:	e023      	b.n	801131c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	68b9      	ldr	r1, [r7, #8]
 80112da:	4618      	mov	r0, r3
 80112dc:	f000 fc62 	bl	8011ba4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80112ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80112fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	691b      	ldr	r3, [r3, #16]
 801130a:	021a      	lsls	r2, r3, #8
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	430a      	orrs	r2, r1
 8011312:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8011314:	e002      	b.n	801131c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8011316:	2301      	movs	r3, #1
 8011318:	75fb      	strb	r3, [r7, #23]
      break;
 801131a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	2200      	movs	r2, #0
 8011320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8011324:	7dfb      	ldrb	r3, [r7, #23]
}
 8011326:	4618      	mov	r0, r3
 8011328:	3718      	adds	r7, #24
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}
 801132e:	bf00      	nop

08011330 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b084      	sub	sp, #16
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
 8011338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801133a:	2300      	movs	r3, #0
 801133c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011344:	2b01      	cmp	r3, #1
 8011346:	d101      	bne.n	801134c <HAL_TIM_ConfigClockSource+0x1c>
 8011348:	2302      	movs	r3, #2
 801134a:	e0dc      	b.n	8011506 <HAL_TIM_ConfigClockSource+0x1d6>
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2201      	movs	r2, #1
 8011350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2202      	movs	r2, #2
 8011358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	689b      	ldr	r3, [r3, #8]
 8011362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011364:	68ba      	ldr	r2, [r7, #8]
 8011366:	4b6a      	ldr	r3, [pc, #424]	@ (8011510 <HAL_TIM_ConfigClockSource+0x1e0>)
 8011368:	4013      	ands	r3, r2
 801136a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011372:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	68ba      	ldr	r2, [r7, #8]
 801137a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	4a64      	ldr	r2, [pc, #400]	@ (8011514 <HAL_TIM_ConfigClockSource+0x1e4>)
 8011382:	4293      	cmp	r3, r2
 8011384:	f000 80a9 	beq.w	80114da <HAL_TIM_ConfigClockSource+0x1aa>
 8011388:	4a62      	ldr	r2, [pc, #392]	@ (8011514 <HAL_TIM_ConfigClockSource+0x1e4>)
 801138a:	4293      	cmp	r3, r2
 801138c:	f200 80ae 	bhi.w	80114ec <HAL_TIM_ConfigClockSource+0x1bc>
 8011390:	4a61      	ldr	r2, [pc, #388]	@ (8011518 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011392:	4293      	cmp	r3, r2
 8011394:	f000 80a1 	beq.w	80114da <HAL_TIM_ConfigClockSource+0x1aa>
 8011398:	4a5f      	ldr	r2, [pc, #380]	@ (8011518 <HAL_TIM_ConfigClockSource+0x1e8>)
 801139a:	4293      	cmp	r3, r2
 801139c:	f200 80a6 	bhi.w	80114ec <HAL_TIM_ConfigClockSource+0x1bc>
 80113a0:	4a5e      	ldr	r2, [pc, #376]	@ (801151c <HAL_TIM_ConfigClockSource+0x1ec>)
 80113a2:	4293      	cmp	r3, r2
 80113a4:	f000 8099 	beq.w	80114da <HAL_TIM_ConfigClockSource+0x1aa>
 80113a8:	4a5c      	ldr	r2, [pc, #368]	@ (801151c <HAL_TIM_ConfigClockSource+0x1ec>)
 80113aa:	4293      	cmp	r3, r2
 80113ac:	f200 809e 	bhi.w	80114ec <HAL_TIM_ConfigClockSource+0x1bc>
 80113b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80113b4:	f000 8091 	beq.w	80114da <HAL_TIM_ConfigClockSource+0x1aa>
 80113b8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80113bc:	f200 8096 	bhi.w	80114ec <HAL_TIM_ConfigClockSource+0x1bc>
 80113c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80113c4:	f000 8089 	beq.w	80114da <HAL_TIM_ConfigClockSource+0x1aa>
 80113c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80113cc:	f200 808e 	bhi.w	80114ec <HAL_TIM_ConfigClockSource+0x1bc>
 80113d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80113d4:	d03e      	beq.n	8011454 <HAL_TIM_ConfigClockSource+0x124>
 80113d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80113da:	f200 8087 	bhi.w	80114ec <HAL_TIM_ConfigClockSource+0x1bc>
 80113de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80113e2:	f000 8086 	beq.w	80114f2 <HAL_TIM_ConfigClockSource+0x1c2>
 80113e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80113ea:	d87f      	bhi.n	80114ec <HAL_TIM_ConfigClockSource+0x1bc>
 80113ec:	2b70      	cmp	r3, #112	@ 0x70
 80113ee:	d01a      	beq.n	8011426 <HAL_TIM_ConfigClockSource+0xf6>
 80113f0:	2b70      	cmp	r3, #112	@ 0x70
 80113f2:	d87b      	bhi.n	80114ec <HAL_TIM_ConfigClockSource+0x1bc>
 80113f4:	2b60      	cmp	r3, #96	@ 0x60
 80113f6:	d050      	beq.n	801149a <HAL_TIM_ConfigClockSource+0x16a>
 80113f8:	2b60      	cmp	r3, #96	@ 0x60
 80113fa:	d877      	bhi.n	80114ec <HAL_TIM_ConfigClockSource+0x1bc>
 80113fc:	2b50      	cmp	r3, #80	@ 0x50
 80113fe:	d03c      	beq.n	801147a <HAL_TIM_ConfigClockSource+0x14a>
 8011400:	2b50      	cmp	r3, #80	@ 0x50
 8011402:	d873      	bhi.n	80114ec <HAL_TIM_ConfigClockSource+0x1bc>
 8011404:	2b40      	cmp	r3, #64	@ 0x40
 8011406:	d058      	beq.n	80114ba <HAL_TIM_ConfigClockSource+0x18a>
 8011408:	2b40      	cmp	r3, #64	@ 0x40
 801140a:	d86f      	bhi.n	80114ec <HAL_TIM_ConfigClockSource+0x1bc>
 801140c:	2b30      	cmp	r3, #48	@ 0x30
 801140e:	d064      	beq.n	80114da <HAL_TIM_ConfigClockSource+0x1aa>
 8011410:	2b30      	cmp	r3, #48	@ 0x30
 8011412:	d86b      	bhi.n	80114ec <HAL_TIM_ConfigClockSource+0x1bc>
 8011414:	2b20      	cmp	r3, #32
 8011416:	d060      	beq.n	80114da <HAL_TIM_ConfigClockSource+0x1aa>
 8011418:	2b20      	cmp	r3, #32
 801141a:	d867      	bhi.n	80114ec <HAL_TIM_ConfigClockSource+0x1bc>
 801141c:	2b00      	cmp	r3, #0
 801141e:	d05c      	beq.n	80114da <HAL_TIM_ConfigClockSource+0x1aa>
 8011420:	2b10      	cmp	r3, #16
 8011422:	d05a      	beq.n	80114da <HAL_TIM_ConfigClockSource+0x1aa>
 8011424:	e062      	b.n	80114ec <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011436:	f000 fc99 	bl	8011d6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	689b      	ldr	r3, [r3, #8]
 8011440:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8011448:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	68ba      	ldr	r2, [r7, #8]
 8011450:	609a      	str	r2, [r3, #8]
      break;
 8011452:	e04f      	b.n	80114f4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801145c:	683b      	ldr	r3, [r7, #0]
 801145e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011464:	f000 fc82 	bl	8011d6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	689a      	ldr	r2, [r3, #8]
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8011476:	609a      	str	r2, [r3, #8]
      break;
 8011478:	e03c      	b.n	80114f4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011482:	683b      	ldr	r3, [r7, #0]
 8011484:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011486:	461a      	mov	r2, r3
 8011488:	f000 fbf2 	bl	8011c70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	2150      	movs	r1, #80	@ 0x50
 8011492:	4618      	mov	r0, r3
 8011494:	f000 fc4c 	bl	8011d30 <TIM_ITRx_SetConfig>
      break;
 8011498:	e02c      	b.n	80114f4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80114a2:	683b      	ldr	r3, [r7, #0]
 80114a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80114a6:	461a      	mov	r2, r3
 80114a8:	f000 fc11 	bl	8011cce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	2160      	movs	r1, #96	@ 0x60
 80114b2:	4618      	mov	r0, r3
 80114b4:	f000 fc3c 	bl	8011d30 <TIM_ITRx_SetConfig>
      break;
 80114b8:	e01c      	b.n	80114f4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80114c2:	683b      	ldr	r3, [r7, #0]
 80114c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80114c6:	461a      	mov	r2, r3
 80114c8:	f000 fbd2 	bl	8011c70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	2140      	movs	r1, #64	@ 0x40
 80114d2:	4618      	mov	r0, r3
 80114d4:	f000 fc2c 	bl	8011d30 <TIM_ITRx_SetConfig>
      break;
 80114d8:	e00c      	b.n	80114f4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681a      	ldr	r2, [r3, #0]
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	4619      	mov	r1, r3
 80114e4:	4610      	mov	r0, r2
 80114e6:	f000 fc23 	bl	8011d30 <TIM_ITRx_SetConfig>
      break;
 80114ea:	e003      	b.n	80114f4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80114ec:	2301      	movs	r3, #1
 80114ee:	73fb      	strb	r3, [r7, #15]
      break;
 80114f0:	e000      	b.n	80114f4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80114f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2201      	movs	r2, #1
 80114f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2200      	movs	r2, #0
 8011500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8011504:	7bfb      	ldrb	r3, [r7, #15]
}
 8011506:	4618      	mov	r0, r3
 8011508:	3710      	adds	r7, #16
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}
 801150e:	bf00      	nop
 8011510:	ffceff88 	.word	0xffceff88
 8011514:	00100040 	.word	0x00100040
 8011518:	00100030 	.word	0x00100030
 801151c:	00100020 	.word	0x00100020

08011520 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011520:	b480      	push	{r7}
 8011522:	b083      	sub	sp, #12
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8011528:	bf00      	nop
 801152a:	370c      	adds	r7, #12
 801152c:	46bd      	mov	sp, r7
 801152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011532:	4770      	bx	lr

08011534 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011534:	b480      	push	{r7}
 8011536:	b083      	sub	sp, #12
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801153c:	bf00      	nop
 801153e:	370c      	adds	r7, #12
 8011540:	46bd      	mov	sp, r7
 8011542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011546:	4770      	bx	lr

08011548 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011548:	b480      	push	{r7}
 801154a:	b083      	sub	sp, #12
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011550:	bf00      	nop
 8011552:	370c      	adds	r7, #12
 8011554:	46bd      	mov	sp, r7
 8011556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155a:	4770      	bx	lr

0801155c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801155c:	b480      	push	{r7}
 801155e:	b083      	sub	sp, #12
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011564:	bf00      	nop
 8011566:	370c      	adds	r7, #12
 8011568:	46bd      	mov	sp, r7
 801156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156e:	4770      	bx	lr

08011570 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011570:	b480      	push	{r7}
 8011572:	b083      	sub	sp, #12
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011578:	bf00      	nop
 801157a:	370c      	adds	r7, #12
 801157c:	46bd      	mov	sp, r7
 801157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011582:	4770      	bx	lr

08011584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011584:	b480      	push	{r7}
 8011586:	b085      	sub	sp, #20
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
 801158c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	4a43      	ldr	r2, [pc, #268]	@ (80116a4 <TIM_Base_SetConfig+0x120>)
 8011598:	4293      	cmp	r3, r2
 801159a:	d013      	beq.n	80115c4 <TIM_Base_SetConfig+0x40>
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80115a2:	d00f      	beq.n	80115c4 <TIM_Base_SetConfig+0x40>
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	4a40      	ldr	r2, [pc, #256]	@ (80116a8 <TIM_Base_SetConfig+0x124>)
 80115a8:	4293      	cmp	r3, r2
 80115aa:	d00b      	beq.n	80115c4 <TIM_Base_SetConfig+0x40>
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	4a3f      	ldr	r2, [pc, #252]	@ (80116ac <TIM_Base_SetConfig+0x128>)
 80115b0:	4293      	cmp	r3, r2
 80115b2:	d007      	beq.n	80115c4 <TIM_Base_SetConfig+0x40>
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	4a3e      	ldr	r2, [pc, #248]	@ (80116b0 <TIM_Base_SetConfig+0x12c>)
 80115b8:	4293      	cmp	r3, r2
 80115ba:	d003      	beq.n	80115c4 <TIM_Base_SetConfig+0x40>
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	4a3d      	ldr	r2, [pc, #244]	@ (80116b4 <TIM_Base_SetConfig+0x130>)
 80115c0:	4293      	cmp	r3, r2
 80115c2:	d108      	bne.n	80115d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80115ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	685b      	ldr	r3, [r3, #4]
 80115d0:	68fa      	ldr	r2, [r7, #12]
 80115d2:	4313      	orrs	r3, r2
 80115d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	4a32      	ldr	r2, [pc, #200]	@ (80116a4 <TIM_Base_SetConfig+0x120>)
 80115da:	4293      	cmp	r3, r2
 80115dc:	d01f      	beq.n	801161e <TIM_Base_SetConfig+0x9a>
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80115e4:	d01b      	beq.n	801161e <TIM_Base_SetConfig+0x9a>
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	4a2f      	ldr	r2, [pc, #188]	@ (80116a8 <TIM_Base_SetConfig+0x124>)
 80115ea:	4293      	cmp	r3, r2
 80115ec:	d017      	beq.n	801161e <TIM_Base_SetConfig+0x9a>
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	4a2e      	ldr	r2, [pc, #184]	@ (80116ac <TIM_Base_SetConfig+0x128>)
 80115f2:	4293      	cmp	r3, r2
 80115f4:	d013      	beq.n	801161e <TIM_Base_SetConfig+0x9a>
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	4a2d      	ldr	r2, [pc, #180]	@ (80116b0 <TIM_Base_SetConfig+0x12c>)
 80115fa:	4293      	cmp	r3, r2
 80115fc:	d00f      	beq.n	801161e <TIM_Base_SetConfig+0x9a>
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	4a2c      	ldr	r2, [pc, #176]	@ (80116b4 <TIM_Base_SetConfig+0x130>)
 8011602:	4293      	cmp	r3, r2
 8011604:	d00b      	beq.n	801161e <TIM_Base_SetConfig+0x9a>
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	4a2b      	ldr	r2, [pc, #172]	@ (80116b8 <TIM_Base_SetConfig+0x134>)
 801160a:	4293      	cmp	r3, r2
 801160c:	d007      	beq.n	801161e <TIM_Base_SetConfig+0x9a>
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	4a2a      	ldr	r2, [pc, #168]	@ (80116bc <TIM_Base_SetConfig+0x138>)
 8011612:	4293      	cmp	r3, r2
 8011614:	d003      	beq.n	801161e <TIM_Base_SetConfig+0x9a>
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	4a29      	ldr	r2, [pc, #164]	@ (80116c0 <TIM_Base_SetConfig+0x13c>)
 801161a:	4293      	cmp	r3, r2
 801161c:	d108      	bne.n	8011630 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	68db      	ldr	r3, [r3, #12]
 801162a:	68fa      	ldr	r2, [r7, #12]
 801162c:	4313      	orrs	r3, r2
 801162e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8011636:	683b      	ldr	r3, [r7, #0]
 8011638:	695b      	ldr	r3, [r3, #20]
 801163a:	4313      	orrs	r3, r2
 801163c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	689a      	ldr	r2, [r3, #8]
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	681a      	ldr	r2, [r3, #0]
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	4a14      	ldr	r2, [pc, #80]	@ (80116a4 <TIM_Base_SetConfig+0x120>)
 8011652:	4293      	cmp	r3, r2
 8011654:	d00f      	beq.n	8011676 <TIM_Base_SetConfig+0xf2>
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	4a16      	ldr	r2, [pc, #88]	@ (80116b4 <TIM_Base_SetConfig+0x130>)
 801165a:	4293      	cmp	r3, r2
 801165c:	d00b      	beq.n	8011676 <TIM_Base_SetConfig+0xf2>
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	4a15      	ldr	r2, [pc, #84]	@ (80116b8 <TIM_Base_SetConfig+0x134>)
 8011662:	4293      	cmp	r3, r2
 8011664:	d007      	beq.n	8011676 <TIM_Base_SetConfig+0xf2>
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	4a14      	ldr	r2, [pc, #80]	@ (80116bc <TIM_Base_SetConfig+0x138>)
 801166a:	4293      	cmp	r3, r2
 801166c:	d003      	beq.n	8011676 <TIM_Base_SetConfig+0xf2>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	4a13      	ldr	r2, [pc, #76]	@ (80116c0 <TIM_Base_SetConfig+0x13c>)
 8011672:	4293      	cmp	r3, r2
 8011674:	d103      	bne.n	801167e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	691a      	ldr	r2, [r3, #16]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	f043 0204 	orr.w	r2, r3, #4
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	2201      	movs	r2, #1
 801168e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	68fa      	ldr	r2, [r7, #12]
 8011694:	601a      	str	r2, [r3, #0]
}
 8011696:	bf00      	nop
 8011698:	3714      	adds	r7, #20
 801169a:	46bd      	mov	sp, r7
 801169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a0:	4770      	bx	lr
 80116a2:	bf00      	nop
 80116a4:	40010000 	.word	0x40010000
 80116a8:	40000400 	.word	0x40000400
 80116ac:	40000800 	.word	0x40000800
 80116b0:	40000c00 	.word	0x40000c00
 80116b4:	40010400 	.word	0x40010400
 80116b8:	40014000 	.word	0x40014000
 80116bc:	40014400 	.word	0x40014400
 80116c0:	40014800 	.word	0x40014800

080116c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80116c4:	b480      	push	{r7}
 80116c6:	b087      	sub	sp, #28
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
 80116cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6a1b      	ldr	r3, [r3, #32]
 80116d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	6a1b      	ldr	r3, [r3, #32]
 80116d8:	f023 0201 	bic.w	r2, r3, #1
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	685b      	ldr	r3, [r3, #4]
 80116e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	699b      	ldr	r3, [r3, #24]
 80116ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80116ec:	68fa      	ldr	r2, [r7, #12]
 80116ee:	4b37      	ldr	r3, [pc, #220]	@ (80117cc <TIM_OC1_SetConfig+0x108>)
 80116f0:	4013      	ands	r3, r2
 80116f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	f023 0303 	bic.w	r3, r3, #3
 80116fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	68fa      	ldr	r2, [r7, #12]
 8011702:	4313      	orrs	r3, r2
 8011704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011706:	697b      	ldr	r3, [r7, #20]
 8011708:	f023 0302 	bic.w	r3, r3, #2
 801170c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	689b      	ldr	r3, [r3, #8]
 8011712:	697a      	ldr	r2, [r7, #20]
 8011714:	4313      	orrs	r3, r2
 8011716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	4a2d      	ldr	r2, [pc, #180]	@ (80117d0 <TIM_OC1_SetConfig+0x10c>)
 801171c:	4293      	cmp	r3, r2
 801171e:	d00f      	beq.n	8011740 <TIM_OC1_SetConfig+0x7c>
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	4a2c      	ldr	r2, [pc, #176]	@ (80117d4 <TIM_OC1_SetConfig+0x110>)
 8011724:	4293      	cmp	r3, r2
 8011726:	d00b      	beq.n	8011740 <TIM_OC1_SetConfig+0x7c>
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	4a2b      	ldr	r2, [pc, #172]	@ (80117d8 <TIM_OC1_SetConfig+0x114>)
 801172c:	4293      	cmp	r3, r2
 801172e:	d007      	beq.n	8011740 <TIM_OC1_SetConfig+0x7c>
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	4a2a      	ldr	r2, [pc, #168]	@ (80117dc <TIM_OC1_SetConfig+0x118>)
 8011734:	4293      	cmp	r3, r2
 8011736:	d003      	beq.n	8011740 <TIM_OC1_SetConfig+0x7c>
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	4a29      	ldr	r2, [pc, #164]	@ (80117e0 <TIM_OC1_SetConfig+0x11c>)
 801173c:	4293      	cmp	r3, r2
 801173e:	d10c      	bne.n	801175a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011740:	697b      	ldr	r3, [r7, #20]
 8011742:	f023 0308 	bic.w	r3, r3, #8
 8011746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	68db      	ldr	r3, [r3, #12]
 801174c:	697a      	ldr	r2, [r7, #20]
 801174e:	4313      	orrs	r3, r2
 8011750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011752:	697b      	ldr	r3, [r7, #20]
 8011754:	f023 0304 	bic.w	r3, r3, #4
 8011758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	4a1c      	ldr	r2, [pc, #112]	@ (80117d0 <TIM_OC1_SetConfig+0x10c>)
 801175e:	4293      	cmp	r3, r2
 8011760:	d00f      	beq.n	8011782 <TIM_OC1_SetConfig+0xbe>
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	4a1b      	ldr	r2, [pc, #108]	@ (80117d4 <TIM_OC1_SetConfig+0x110>)
 8011766:	4293      	cmp	r3, r2
 8011768:	d00b      	beq.n	8011782 <TIM_OC1_SetConfig+0xbe>
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	4a1a      	ldr	r2, [pc, #104]	@ (80117d8 <TIM_OC1_SetConfig+0x114>)
 801176e:	4293      	cmp	r3, r2
 8011770:	d007      	beq.n	8011782 <TIM_OC1_SetConfig+0xbe>
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	4a19      	ldr	r2, [pc, #100]	@ (80117dc <TIM_OC1_SetConfig+0x118>)
 8011776:	4293      	cmp	r3, r2
 8011778:	d003      	beq.n	8011782 <TIM_OC1_SetConfig+0xbe>
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	4a18      	ldr	r2, [pc, #96]	@ (80117e0 <TIM_OC1_SetConfig+0x11c>)
 801177e:	4293      	cmp	r3, r2
 8011780:	d111      	bne.n	80117a6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011782:	693b      	ldr	r3, [r7, #16]
 8011784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801178a:	693b      	ldr	r3, [r7, #16]
 801178c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8011790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	695b      	ldr	r3, [r3, #20]
 8011796:	693a      	ldr	r2, [r7, #16]
 8011798:	4313      	orrs	r3, r2
 801179a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	699b      	ldr	r3, [r3, #24]
 80117a0:	693a      	ldr	r2, [r7, #16]
 80117a2:	4313      	orrs	r3, r2
 80117a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	693a      	ldr	r2, [r7, #16]
 80117aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	68fa      	ldr	r2, [r7, #12]
 80117b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	685a      	ldr	r2, [r3, #4]
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	697a      	ldr	r2, [r7, #20]
 80117be:	621a      	str	r2, [r3, #32]
}
 80117c0:	bf00      	nop
 80117c2:	371c      	adds	r7, #28
 80117c4:	46bd      	mov	sp, r7
 80117c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ca:	4770      	bx	lr
 80117cc:	fffeff8f 	.word	0xfffeff8f
 80117d0:	40010000 	.word	0x40010000
 80117d4:	40010400 	.word	0x40010400
 80117d8:	40014000 	.word	0x40014000
 80117dc:	40014400 	.word	0x40014400
 80117e0:	40014800 	.word	0x40014800

080117e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80117e4:	b480      	push	{r7}
 80117e6:	b087      	sub	sp, #28
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
 80117ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	6a1b      	ldr	r3, [r3, #32]
 80117f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	6a1b      	ldr	r3, [r3, #32]
 80117f8:	f023 0210 	bic.w	r2, r3, #16
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	685b      	ldr	r3, [r3, #4]
 8011804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	699b      	ldr	r3, [r3, #24]
 801180a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801180c:	68fa      	ldr	r2, [r7, #12]
 801180e:	4b34      	ldr	r3, [pc, #208]	@ (80118e0 <TIM_OC2_SetConfig+0xfc>)
 8011810:	4013      	ands	r3, r2
 8011812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801181a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801181c:	683b      	ldr	r3, [r7, #0]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	021b      	lsls	r3, r3, #8
 8011822:	68fa      	ldr	r2, [r7, #12]
 8011824:	4313      	orrs	r3, r2
 8011826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	f023 0320 	bic.w	r3, r3, #32
 801182e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	689b      	ldr	r3, [r3, #8]
 8011834:	011b      	lsls	r3, r3, #4
 8011836:	697a      	ldr	r2, [r7, #20]
 8011838:	4313      	orrs	r3, r2
 801183a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	4a29      	ldr	r2, [pc, #164]	@ (80118e4 <TIM_OC2_SetConfig+0x100>)
 8011840:	4293      	cmp	r3, r2
 8011842:	d003      	beq.n	801184c <TIM_OC2_SetConfig+0x68>
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	4a28      	ldr	r2, [pc, #160]	@ (80118e8 <TIM_OC2_SetConfig+0x104>)
 8011848:	4293      	cmp	r3, r2
 801184a:	d10d      	bne.n	8011868 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801184c:	697b      	ldr	r3, [r7, #20]
 801184e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	68db      	ldr	r3, [r3, #12]
 8011858:	011b      	lsls	r3, r3, #4
 801185a:	697a      	ldr	r2, [r7, #20]
 801185c:	4313      	orrs	r3, r2
 801185e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011860:	697b      	ldr	r3, [r7, #20]
 8011862:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011866:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	4a1e      	ldr	r2, [pc, #120]	@ (80118e4 <TIM_OC2_SetConfig+0x100>)
 801186c:	4293      	cmp	r3, r2
 801186e:	d00f      	beq.n	8011890 <TIM_OC2_SetConfig+0xac>
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	4a1d      	ldr	r2, [pc, #116]	@ (80118e8 <TIM_OC2_SetConfig+0x104>)
 8011874:	4293      	cmp	r3, r2
 8011876:	d00b      	beq.n	8011890 <TIM_OC2_SetConfig+0xac>
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	4a1c      	ldr	r2, [pc, #112]	@ (80118ec <TIM_OC2_SetConfig+0x108>)
 801187c:	4293      	cmp	r3, r2
 801187e:	d007      	beq.n	8011890 <TIM_OC2_SetConfig+0xac>
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	4a1b      	ldr	r2, [pc, #108]	@ (80118f0 <TIM_OC2_SetConfig+0x10c>)
 8011884:	4293      	cmp	r3, r2
 8011886:	d003      	beq.n	8011890 <TIM_OC2_SetConfig+0xac>
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	4a1a      	ldr	r2, [pc, #104]	@ (80118f4 <TIM_OC2_SetConfig+0x110>)
 801188c:	4293      	cmp	r3, r2
 801188e:	d113      	bne.n	80118b8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011890:	693b      	ldr	r3, [r7, #16]
 8011892:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8011896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011898:	693b      	ldr	r3, [r7, #16]
 801189a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801189e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80118a0:	683b      	ldr	r3, [r7, #0]
 80118a2:	695b      	ldr	r3, [r3, #20]
 80118a4:	009b      	lsls	r3, r3, #2
 80118a6:	693a      	ldr	r2, [r7, #16]
 80118a8:	4313      	orrs	r3, r2
 80118aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	699b      	ldr	r3, [r3, #24]
 80118b0:	009b      	lsls	r3, r3, #2
 80118b2:	693a      	ldr	r2, [r7, #16]
 80118b4:	4313      	orrs	r3, r2
 80118b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	693a      	ldr	r2, [r7, #16]
 80118bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	68fa      	ldr	r2, [r7, #12]
 80118c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	685a      	ldr	r2, [r3, #4]
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	697a      	ldr	r2, [r7, #20]
 80118d0:	621a      	str	r2, [r3, #32]
}
 80118d2:	bf00      	nop
 80118d4:	371c      	adds	r7, #28
 80118d6:	46bd      	mov	sp, r7
 80118d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118dc:	4770      	bx	lr
 80118de:	bf00      	nop
 80118e0:	feff8fff 	.word	0xfeff8fff
 80118e4:	40010000 	.word	0x40010000
 80118e8:	40010400 	.word	0x40010400
 80118ec:	40014000 	.word	0x40014000
 80118f0:	40014400 	.word	0x40014400
 80118f4:	40014800 	.word	0x40014800

080118f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80118f8:	b480      	push	{r7}
 80118fa:	b087      	sub	sp, #28
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
 8011900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	6a1b      	ldr	r3, [r3, #32]
 8011906:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6a1b      	ldr	r3, [r3, #32]
 801190c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	685b      	ldr	r3, [r3, #4]
 8011918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	69db      	ldr	r3, [r3, #28]
 801191e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011920:	68fa      	ldr	r2, [r7, #12]
 8011922:	4b33      	ldr	r3, [pc, #204]	@ (80119f0 <TIM_OC3_SetConfig+0xf8>)
 8011924:	4013      	ands	r3, r2
 8011926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	f023 0303 	bic.w	r3, r3, #3
 801192e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	68fa      	ldr	r2, [r7, #12]
 8011936:	4313      	orrs	r3, r2
 8011938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801193a:	697b      	ldr	r3, [r7, #20]
 801193c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8011940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	689b      	ldr	r3, [r3, #8]
 8011946:	021b      	lsls	r3, r3, #8
 8011948:	697a      	ldr	r2, [r7, #20]
 801194a:	4313      	orrs	r3, r2
 801194c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	4a28      	ldr	r2, [pc, #160]	@ (80119f4 <TIM_OC3_SetConfig+0xfc>)
 8011952:	4293      	cmp	r3, r2
 8011954:	d003      	beq.n	801195e <TIM_OC3_SetConfig+0x66>
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	4a27      	ldr	r2, [pc, #156]	@ (80119f8 <TIM_OC3_SetConfig+0x100>)
 801195a:	4293      	cmp	r3, r2
 801195c:	d10d      	bne.n	801197a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011964:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011966:	683b      	ldr	r3, [r7, #0]
 8011968:	68db      	ldr	r3, [r3, #12]
 801196a:	021b      	lsls	r3, r3, #8
 801196c:	697a      	ldr	r2, [r7, #20]
 801196e:	4313      	orrs	r3, r2
 8011970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011972:	697b      	ldr	r3, [r7, #20]
 8011974:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8011978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	4a1d      	ldr	r2, [pc, #116]	@ (80119f4 <TIM_OC3_SetConfig+0xfc>)
 801197e:	4293      	cmp	r3, r2
 8011980:	d00f      	beq.n	80119a2 <TIM_OC3_SetConfig+0xaa>
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	4a1c      	ldr	r2, [pc, #112]	@ (80119f8 <TIM_OC3_SetConfig+0x100>)
 8011986:	4293      	cmp	r3, r2
 8011988:	d00b      	beq.n	80119a2 <TIM_OC3_SetConfig+0xaa>
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	4a1b      	ldr	r2, [pc, #108]	@ (80119fc <TIM_OC3_SetConfig+0x104>)
 801198e:	4293      	cmp	r3, r2
 8011990:	d007      	beq.n	80119a2 <TIM_OC3_SetConfig+0xaa>
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	4a1a      	ldr	r2, [pc, #104]	@ (8011a00 <TIM_OC3_SetConfig+0x108>)
 8011996:	4293      	cmp	r3, r2
 8011998:	d003      	beq.n	80119a2 <TIM_OC3_SetConfig+0xaa>
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	4a19      	ldr	r2, [pc, #100]	@ (8011a04 <TIM_OC3_SetConfig+0x10c>)
 801199e:	4293      	cmp	r3, r2
 80119a0:	d113      	bne.n	80119ca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80119a2:	693b      	ldr	r3, [r7, #16]
 80119a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80119a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80119aa:	693b      	ldr	r3, [r7, #16]
 80119ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80119b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80119b2:	683b      	ldr	r3, [r7, #0]
 80119b4:	695b      	ldr	r3, [r3, #20]
 80119b6:	011b      	lsls	r3, r3, #4
 80119b8:	693a      	ldr	r2, [r7, #16]
 80119ba:	4313      	orrs	r3, r2
 80119bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	699b      	ldr	r3, [r3, #24]
 80119c2:	011b      	lsls	r3, r3, #4
 80119c4:	693a      	ldr	r2, [r7, #16]
 80119c6:	4313      	orrs	r3, r2
 80119c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	693a      	ldr	r2, [r7, #16]
 80119ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	68fa      	ldr	r2, [r7, #12]
 80119d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80119d6:	683b      	ldr	r3, [r7, #0]
 80119d8:	685a      	ldr	r2, [r3, #4]
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	697a      	ldr	r2, [r7, #20]
 80119e2:	621a      	str	r2, [r3, #32]
}
 80119e4:	bf00      	nop
 80119e6:	371c      	adds	r7, #28
 80119e8:	46bd      	mov	sp, r7
 80119ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ee:	4770      	bx	lr
 80119f0:	fffeff8f 	.word	0xfffeff8f
 80119f4:	40010000 	.word	0x40010000
 80119f8:	40010400 	.word	0x40010400
 80119fc:	40014000 	.word	0x40014000
 8011a00:	40014400 	.word	0x40014400
 8011a04:	40014800 	.word	0x40014800

08011a08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011a08:	b480      	push	{r7}
 8011a0a:	b087      	sub	sp, #28
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	6a1b      	ldr	r3, [r3, #32]
 8011a16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6a1b      	ldr	r3, [r3, #32]
 8011a1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	685b      	ldr	r3, [r3, #4]
 8011a28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	69db      	ldr	r3, [r3, #28]
 8011a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011a30:	68fa      	ldr	r2, [r7, #12]
 8011a32:	4b24      	ldr	r3, [pc, #144]	@ (8011ac4 <TIM_OC4_SetConfig+0xbc>)
 8011a34:	4013      	ands	r3, r2
 8011a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011a40:	683b      	ldr	r3, [r7, #0]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	021b      	lsls	r3, r3, #8
 8011a46:	68fa      	ldr	r2, [r7, #12]
 8011a48:	4313      	orrs	r3, r2
 8011a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011a4c:	693b      	ldr	r3, [r7, #16]
 8011a4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	689b      	ldr	r3, [r3, #8]
 8011a58:	031b      	lsls	r3, r3, #12
 8011a5a:	693a      	ldr	r2, [r7, #16]
 8011a5c:	4313      	orrs	r3, r2
 8011a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	4a19      	ldr	r2, [pc, #100]	@ (8011ac8 <TIM_OC4_SetConfig+0xc0>)
 8011a64:	4293      	cmp	r3, r2
 8011a66:	d00f      	beq.n	8011a88 <TIM_OC4_SetConfig+0x80>
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	4a18      	ldr	r2, [pc, #96]	@ (8011acc <TIM_OC4_SetConfig+0xc4>)
 8011a6c:	4293      	cmp	r3, r2
 8011a6e:	d00b      	beq.n	8011a88 <TIM_OC4_SetConfig+0x80>
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	4a17      	ldr	r2, [pc, #92]	@ (8011ad0 <TIM_OC4_SetConfig+0xc8>)
 8011a74:	4293      	cmp	r3, r2
 8011a76:	d007      	beq.n	8011a88 <TIM_OC4_SetConfig+0x80>
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	4a16      	ldr	r2, [pc, #88]	@ (8011ad4 <TIM_OC4_SetConfig+0xcc>)
 8011a7c:	4293      	cmp	r3, r2
 8011a7e:	d003      	beq.n	8011a88 <TIM_OC4_SetConfig+0x80>
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	4a15      	ldr	r2, [pc, #84]	@ (8011ad8 <TIM_OC4_SetConfig+0xd0>)
 8011a84:	4293      	cmp	r3, r2
 8011a86:	d109      	bne.n	8011a9c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011a88:	697b      	ldr	r3, [r7, #20]
 8011a8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011a8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011a90:	683b      	ldr	r3, [r7, #0]
 8011a92:	695b      	ldr	r3, [r3, #20]
 8011a94:	019b      	lsls	r3, r3, #6
 8011a96:	697a      	ldr	r2, [r7, #20]
 8011a98:	4313      	orrs	r3, r2
 8011a9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	697a      	ldr	r2, [r7, #20]
 8011aa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	68fa      	ldr	r2, [r7, #12]
 8011aa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011aa8:	683b      	ldr	r3, [r7, #0]
 8011aaa:	685a      	ldr	r2, [r3, #4]
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	693a      	ldr	r2, [r7, #16]
 8011ab4:	621a      	str	r2, [r3, #32]
}
 8011ab6:	bf00      	nop
 8011ab8:	371c      	adds	r7, #28
 8011aba:	46bd      	mov	sp, r7
 8011abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac0:	4770      	bx	lr
 8011ac2:	bf00      	nop
 8011ac4:	feff8fff 	.word	0xfeff8fff
 8011ac8:	40010000 	.word	0x40010000
 8011acc:	40010400 	.word	0x40010400
 8011ad0:	40014000 	.word	0x40014000
 8011ad4:	40014400 	.word	0x40014400
 8011ad8:	40014800 	.word	0x40014800

08011adc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011adc:	b480      	push	{r7}
 8011ade:	b087      	sub	sp, #28
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
 8011ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6a1b      	ldr	r3, [r3, #32]
 8011aea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	6a1b      	ldr	r3, [r3, #32]
 8011af0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	685b      	ldr	r3, [r3, #4]
 8011afc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011b04:	68fa      	ldr	r2, [r7, #12]
 8011b06:	4b21      	ldr	r3, [pc, #132]	@ (8011b8c <TIM_OC5_SetConfig+0xb0>)
 8011b08:	4013      	ands	r3, r2
 8011b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	68fa      	ldr	r2, [r7, #12]
 8011b12:	4313      	orrs	r3, r2
 8011b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8011b1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	689b      	ldr	r3, [r3, #8]
 8011b22:	041b      	lsls	r3, r3, #16
 8011b24:	693a      	ldr	r2, [r7, #16]
 8011b26:	4313      	orrs	r3, r2
 8011b28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	4a18      	ldr	r2, [pc, #96]	@ (8011b90 <TIM_OC5_SetConfig+0xb4>)
 8011b2e:	4293      	cmp	r3, r2
 8011b30:	d00f      	beq.n	8011b52 <TIM_OC5_SetConfig+0x76>
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	4a17      	ldr	r2, [pc, #92]	@ (8011b94 <TIM_OC5_SetConfig+0xb8>)
 8011b36:	4293      	cmp	r3, r2
 8011b38:	d00b      	beq.n	8011b52 <TIM_OC5_SetConfig+0x76>
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	4a16      	ldr	r2, [pc, #88]	@ (8011b98 <TIM_OC5_SetConfig+0xbc>)
 8011b3e:	4293      	cmp	r3, r2
 8011b40:	d007      	beq.n	8011b52 <TIM_OC5_SetConfig+0x76>
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	4a15      	ldr	r2, [pc, #84]	@ (8011b9c <TIM_OC5_SetConfig+0xc0>)
 8011b46:	4293      	cmp	r3, r2
 8011b48:	d003      	beq.n	8011b52 <TIM_OC5_SetConfig+0x76>
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	4a14      	ldr	r2, [pc, #80]	@ (8011ba0 <TIM_OC5_SetConfig+0xc4>)
 8011b4e:	4293      	cmp	r3, r2
 8011b50:	d109      	bne.n	8011b66 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011b52:	697b      	ldr	r3, [r7, #20]
 8011b54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011b58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011b5a:	683b      	ldr	r3, [r7, #0]
 8011b5c:	695b      	ldr	r3, [r3, #20]
 8011b5e:	021b      	lsls	r3, r3, #8
 8011b60:	697a      	ldr	r2, [r7, #20]
 8011b62:	4313      	orrs	r3, r2
 8011b64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	697a      	ldr	r2, [r7, #20]
 8011b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	68fa      	ldr	r2, [r7, #12]
 8011b70:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011b72:	683b      	ldr	r3, [r7, #0]
 8011b74:	685a      	ldr	r2, [r3, #4]
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	693a      	ldr	r2, [r7, #16]
 8011b7e:	621a      	str	r2, [r3, #32]
}
 8011b80:	bf00      	nop
 8011b82:	371c      	adds	r7, #28
 8011b84:	46bd      	mov	sp, r7
 8011b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8a:	4770      	bx	lr
 8011b8c:	fffeff8f 	.word	0xfffeff8f
 8011b90:	40010000 	.word	0x40010000
 8011b94:	40010400 	.word	0x40010400
 8011b98:	40014000 	.word	0x40014000
 8011b9c:	40014400 	.word	0x40014400
 8011ba0:	40014800 	.word	0x40014800

08011ba4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011ba4:	b480      	push	{r7}
 8011ba6:	b087      	sub	sp, #28
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
 8011bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	6a1b      	ldr	r3, [r3, #32]
 8011bb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	6a1b      	ldr	r3, [r3, #32]
 8011bb8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	685b      	ldr	r3, [r3, #4]
 8011bc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011bcc:	68fa      	ldr	r2, [r7, #12]
 8011bce:	4b22      	ldr	r3, [pc, #136]	@ (8011c58 <TIM_OC6_SetConfig+0xb4>)
 8011bd0:	4013      	ands	r3, r2
 8011bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	021b      	lsls	r3, r3, #8
 8011bda:	68fa      	ldr	r2, [r7, #12]
 8011bdc:	4313      	orrs	r3, r2
 8011bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011be0:	693b      	ldr	r3, [r7, #16]
 8011be2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011be6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	689b      	ldr	r3, [r3, #8]
 8011bec:	051b      	lsls	r3, r3, #20
 8011bee:	693a      	ldr	r2, [r7, #16]
 8011bf0:	4313      	orrs	r3, r2
 8011bf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	4a19      	ldr	r2, [pc, #100]	@ (8011c5c <TIM_OC6_SetConfig+0xb8>)
 8011bf8:	4293      	cmp	r3, r2
 8011bfa:	d00f      	beq.n	8011c1c <TIM_OC6_SetConfig+0x78>
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	4a18      	ldr	r2, [pc, #96]	@ (8011c60 <TIM_OC6_SetConfig+0xbc>)
 8011c00:	4293      	cmp	r3, r2
 8011c02:	d00b      	beq.n	8011c1c <TIM_OC6_SetConfig+0x78>
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	4a17      	ldr	r2, [pc, #92]	@ (8011c64 <TIM_OC6_SetConfig+0xc0>)
 8011c08:	4293      	cmp	r3, r2
 8011c0a:	d007      	beq.n	8011c1c <TIM_OC6_SetConfig+0x78>
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	4a16      	ldr	r2, [pc, #88]	@ (8011c68 <TIM_OC6_SetConfig+0xc4>)
 8011c10:	4293      	cmp	r3, r2
 8011c12:	d003      	beq.n	8011c1c <TIM_OC6_SetConfig+0x78>
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	4a15      	ldr	r2, [pc, #84]	@ (8011c6c <TIM_OC6_SetConfig+0xc8>)
 8011c18:	4293      	cmp	r3, r2
 8011c1a:	d109      	bne.n	8011c30 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011c1c:	697b      	ldr	r3, [r7, #20]
 8011c1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011c22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011c24:	683b      	ldr	r3, [r7, #0]
 8011c26:	695b      	ldr	r3, [r3, #20]
 8011c28:	029b      	lsls	r3, r3, #10
 8011c2a:	697a      	ldr	r2, [r7, #20]
 8011c2c:	4313      	orrs	r3, r2
 8011c2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	697a      	ldr	r2, [r7, #20]
 8011c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	68fa      	ldr	r2, [r7, #12]
 8011c3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	685a      	ldr	r2, [r3, #4]
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	693a      	ldr	r2, [r7, #16]
 8011c48:	621a      	str	r2, [r3, #32]
}
 8011c4a:	bf00      	nop
 8011c4c:	371c      	adds	r7, #28
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c54:	4770      	bx	lr
 8011c56:	bf00      	nop
 8011c58:	feff8fff 	.word	0xfeff8fff
 8011c5c:	40010000 	.word	0x40010000
 8011c60:	40010400 	.word	0x40010400
 8011c64:	40014000 	.word	0x40014000
 8011c68:	40014400 	.word	0x40014400
 8011c6c:	40014800 	.word	0x40014800

08011c70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011c70:	b480      	push	{r7}
 8011c72:	b087      	sub	sp, #28
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	60f8      	str	r0, [r7, #12]
 8011c78:	60b9      	str	r1, [r7, #8]
 8011c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	6a1b      	ldr	r3, [r3, #32]
 8011c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	6a1b      	ldr	r3, [r3, #32]
 8011c86:	f023 0201 	bic.w	r2, r3, #1
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	699b      	ldr	r3, [r3, #24]
 8011c92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011c94:	693b      	ldr	r3, [r7, #16]
 8011c96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8011c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	011b      	lsls	r3, r3, #4
 8011ca0:	693a      	ldr	r2, [r7, #16]
 8011ca2:	4313      	orrs	r3, r2
 8011ca4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011ca6:	697b      	ldr	r3, [r7, #20]
 8011ca8:	f023 030a 	bic.w	r3, r3, #10
 8011cac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011cae:	697a      	ldr	r2, [r7, #20]
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	4313      	orrs	r3, r2
 8011cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	693a      	ldr	r2, [r7, #16]
 8011cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	697a      	ldr	r2, [r7, #20]
 8011cc0:	621a      	str	r2, [r3, #32]
}
 8011cc2:	bf00      	nop
 8011cc4:	371c      	adds	r7, #28
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ccc:	4770      	bx	lr

08011cce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011cce:	b480      	push	{r7}
 8011cd0:	b087      	sub	sp, #28
 8011cd2:	af00      	add	r7, sp, #0
 8011cd4:	60f8      	str	r0, [r7, #12]
 8011cd6:	60b9      	str	r1, [r7, #8]
 8011cd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	6a1b      	ldr	r3, [r3, #32]
 8011cde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	6a1b      	ldr	r3, [r3, #32]
 8011ce4:	f023 0210 	bic.w	r2, r3, #16
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	699b      	ldr	r3, [r3, #24]
 8011cf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011cf2:	693b      	ldr	r3, [r7, #16]
 8011cf4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011cf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	031b      	lsls	r3, r3, #12
 8011cfe:	693a      	ldr	r2, [r7, #16]
 8011d00:	4313      	orrs	r3, r2
 8011d02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011d04:	697b      	ldr	r3, [r7, #20]
 8011d06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8011d0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	011b      	lsls	r3, r3, #4
 8011d10:	697a      	ldr	r2, [r7, #20]
 8011d12:	4313      	orrs	r3, r2
 8011d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	693a      	ldr	r2, [r7, #16]
 8011d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	697a      	ldr	r2, [r7, #20]
 8011d20:	621a      	str	r2, [r3, #32]
}
 8011d22:	bf00      	nop
 8011d24:	371c      	adds	r7, #28
 8011d26:	46bd      	mov	sp, r7
 8011d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2c:	4770      	bx	lr
	...

08011d30 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011d30:	b480      	push	{r7}
 8011d32:	b085      	sub	sp, #20
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
 8011d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	689b      	ldr	r3, [r3, #8]
 8011d3e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011d40:	68fa      	ldr	r2, [r7, #12]
 8011d42:	4b09      	ldr	r3, [pc, #36]	@ (8011d68 <TIM_ITRx_SetConfig+0x38>)
 8011d44:	4013      	ands	r3, r2
 8011d46:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011d48:	683a      	ldr	r2, [r7, #0]
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	4313      	orrs	r3, r2
 8011d4e:	f043 0307 	orr.w	r3, r3, #7
 8011d52:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	68fa      	ldr	r2, [r7, #12]
 8011d58:	609a      	str	r2, [r3, #8]
}
 8011d5a:	bf00      	nop
 8011d5c:	3714      	adds	r7, #20
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d64:	4770      	bx	lr
 8011d66:	bf00      	nop
 8011d68:	ffcfff8f 	.word	0xffcfff8f

08011d6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011d6c:	b480      	push	{r7}
 8011d6e:	b087      	sub	sp, #28
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	60f8      	str	r0, [r7, #12]
 8011d74:	60b9      	str	r1, [r7, #8]
 8011d76:	607a      	str	r2, [r7, #4]
 8011d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	689b      	ldr	r3, [r3, #8]
 8011d7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011d86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011d88:	683b      	ldr	r3, [r7, #0]
 8011d8a:	021a      	lsls	r2, r3, #8
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	431a      	orrs	r2, r3
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	4313      	orrs	r3, r2
 8011d94:	697a      	ldr	r2, [r7, #20]
 8011d96:	4313      	orrs	r3, r2
 8011d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	697a      	ldr	r2, [r7, #20]
 8011d9e:	609a      	str	r2, [r3, #8]
}
 8011da0:	bf00      	nop
 8011da2:	371c      	adds	r7, #28
 8011da4:	46bd      	mov	sp, r7
 8011da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011daa:	4770      	bx	lr

08011dac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011dac:	b480      	push	{r7}
 8011dae:	b087      	sub	sp, #28
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	60f8      	str	r0, [r7, #12]
 8011db4:	60b9      	str	r1, [r7, #8]
 8011db6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011db8:	68bb      	ldr	r3, [r7, #8]
 8011dba:	f003 031f 	and.w	r3, r3, #31
 8011dbe:	2201      	movs	r2, #1
 8011dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8011dc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	6a1a      	ldr	r2, [r3, #32]
 8011dca:	697b      	ldr	r3, [r7, #20]
 8011dcc:	43db      	mvns	r3, r3
 8011dce:	401a      	ands	r2, r3
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	6a1a      	ldr	r2, [r3, #32]
 8011dd8:	68bb      	ldr	r3, [r7, #8]
 8011dda:	f003 031f 	and.w	r3, r3, #31
 8011dde:	6879      	ldr	r1, [r7, #4]
 8011de0:	fa01 f303 	lsl.w	r3, r1, r3
 8011de4:	431a      	orrs	r2, r3
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	621a      	str	r2, [r3, #32]
}
 8011dea:	bf00      	nop
 8011dec:	371c      	adds	r7, #28
 8011dee:	46bd      	mov	sp, r7
 8011df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df4:	4770      	bx	lr
	...

08011df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011df8:	b480      	push	{r7}
 8011dfa:	b085      	sub	sp, #20
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
 8011e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011e08:	2b01      	cmp	r3, #1
 8011e0a:	d101      	bne.n	8011e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011e0c:	2302      	movs	r3, #2
 8011e0e:	e06d      	b.n	8011eec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2201      	movs	r2, #1
 8011e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	2202      	movs	r2, #2
 8011e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	685b      	ldr	r3, [r3, #4]
 8011e26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	689b      	ldr	r3, [r3, #8]
 8011e2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	4a30      	ldr	r2, [pc, #192]	@ (8011ef8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011e36:	4293      	cmp	r3, r2
 8011e38:	d004      	beq.n	8011e44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8011efc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011e40:	4293      	cmp	r3, r2
 8011e42:	d108      	bne.n	8011e56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8011e4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	685b      	ldr	r3, [r3, #4]
 8011e50:	68fa      	ldr	r2, [r7, #12]
 8011e52:	4313      	orrs	r3, r2
 8011e54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011e5e:	683b      	ldr	r3, [r7, #0]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	68fa      	ldr	r2, [r7, #12]
 8011e64:	4313      	orrs	r3, r2
 8011e66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	68fa      	ldr	r2, [r7, #12]
 8011e6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	4a20      	ldr	r2, [pc, #128]	@ (8011ef8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011e76:	4293      	cmp	r3, r2
 8011e78:	d022      	beq.n	8011ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011e82:	d01d      	beq.n	8011ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	4a1d      	ldr	r2, [pc, #116]	@ (8011f00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8011e8a:	4293      	cmp	r3, r2
 8011e8c:	d018      	beq.n	8011ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	4a1c      	ldr	r2, [pc, #112]	@ (8011f04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8011e94:	4293      	cmp	r3, r2
 8011e96:	d013      	beq.n	8011ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8011f08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8011e9e:	4293      	cmp	r3, r2
 8011ea0:	d00e      	beq.n	8011ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	4a15      	ldr	r2, [pc, #84]	@ (8011efc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011ea8:	4293      	cmp	r3, r2
 8011eaa:	d009      	beq.n	8011ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	4a16      	ldr	r2, [pc, #88]	@ (8011f0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011eb2:	4293      	cmp	r3, r2
 8011eb4:	d004      	beq.n	8011ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	4a15      	ldr	r2, [pc, #84]	@ (8011f10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011ebc:	4293      	cmp	r3, r2
 8011ebe:	d10c      	bne.n	8011eda <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011ec0:	68bb      	ldr	r3, [r7, #8]
 8011ec2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011ec6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	689b      	ldr	r3, [r3, #8]
 8011ecc:	68ba      	ldr	r2, [r7, #8]
 8011ece:	4313      	orrs	r3, r2
 8011ed0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	68ba      	ldr	r2, [r7, #8]
 8011ed8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	2201      	movs	r2, #1
 8011ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011eea:	2300      	movs	r3, #0
}
 8011eec:	4618      	mov	r0, r3
 8011eee:	3714      	adds	r7, #20
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef6:	4770      	bx	lr
 8011ef8:	40010000 	.word	0x40010000
 8011efc:	40010400 	.word	0x40010400
 8011f00:	40000400 	.word	0x40000400
 8011f04:	40000800 	.word	0x40000800
 8011f08:	40000c00 	.word	0x40000c00
 8011f0c:	40001800 	.word	0x40001800
 8011f10:	40014000 	.word	0x40014000

08011f14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011f14:	b480      	push	{r7}
 8011f16:	b085      	sub	sp, #20
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
 8011f1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011f1e:	2300      	movs	r3, #0
 8011f20:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011f28:	2b01      	cmp	r3, #1
 8011f2a:	d101      	bne.n	8011f30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011f2c:	2302      	movs	r3, #2
 8011f2e:	e065      	b.n	8011ffc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	2201      	movs	r2, #1
 8011f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	68db      	ldr	r3, [r3, #12]
 8011f42:	4313      	orrs	r3, r2
 8011f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	689b      	ldr	r3, [r3, #8]
 8011f50:	4313      	orrs	r3, r2
 8011f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	685b      	ldr	r3, [r3, #4]
 8011f5e:	4313      	orrs	r3, r2
 8011f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8011f68:	683b      	ldr	r3, [r7, #0]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	4313      	orrs	r3, r2
 8011f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	691b      	ldr	r3, [r3, #16]
 8011f7a:	4313      	orrs	r3, r2
 8011f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	695b      	ldr	r3, [r3, #20]
 8011f88:	4313      	orrs	r3, r2
 8011f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f96:	4313      	orrs	r3, r2
 8011f98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	699b      	ldr	r3, [r3, #24]
 8011fa4:	041b      	lsls	r3, r3, #16
 8011fa6:	4313      	orrs	r3, r2
 8011fa8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	4a16      	ldr	r2, [pc, #88]	@ (8012008 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8011fb0:	4293      	cmp	r3, r2
 8011fb2:	d004      	beq.n	8011fbe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	4a14      	ldr	r2, [pc, #80]	@ (801200c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8011fba:	4293      	cmp	r3, r2
 8011fbc:	d115      	bne.n	8011fea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8011fc4:	683b      	ldr	r3, [r7, #0]
 8011fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fc8:	051b      	lsls	r3, r3, #20
 8011fca:	4313      	orrs	r3, r2
 8011fcc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	69db      	ldr	r3, [r3, #28]
 8011fd8:	4313      	orrs	r3, r2
 8011fda:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8011fe2:	683b      	ldr	r3, [r7, #0]
 8011fe4:	6a1b      	ldr	r3, [r3, #32]
 8011fe6:	4313      	orrs	r3, r2
 8011fe8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	68fa      	ldr	r2, [r7, #12]
 8011ff0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011ffa:	2300      	movs	r3, #0
}
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3714      	adds	r7, #20
 8012000:	46bd      	mov	sp, r7
 8012002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012006:	4770      	bx	lr
 8012008:	40010000 	.word	0x40010000
 801200c:	40010400 	.word	0x40010400

08012010 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012010:	b480      	push	{r7}
 8012012:	b083      	sub	sp, #12
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012018:	bf00      	nop
 801201a:	370c      	adds	r7, #12
 801201c:	46bd      	mov	sp, r7
 801201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012022:	4770      	bx	lr

08012024 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012024:	b480      	push	{r7}
 8012026:	b083      	sub	sp, #12
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801202c:	bf00      	nop
 801202e:	370c      	adds	r7, #12
 8012030:	46bd      	mov	sp, r7
 8012032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012036:	4770      	bx	lr

08012038 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012038:	b480      	push	{r7}
 801203a:	b083      	sub	sp, #12
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012040:	bf00      	nop
 8012042:	370c      	adds	r7, #12
 8012044:	46bd      	mov	sp, r7
 8012046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204a:	4770      	bx	lr

0801204c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b082      	sub	sp, #8
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d101      	bne.n	801205e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801205a:	2301      	movs	r3, #1
 801205c:	e042      	b.n	80120e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012064:	2b00      	cmp	r3, #0
 8012066:	d106      	bne.n	8012076 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	2200      	movs	r2, #0
 801206c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f7f0 fdad 	bl	8002bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	2224      	movs	r2, #36	@ 0x24
 801207a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	681a      	ldr	r2, [r3, #0]
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	f022 0201 	bic.w	r2, r2, #1
 801208c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012092:	2b00      	cmp	r3, #0
 8012094:	d002      	beq.n	801209c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8012096:	6878      	ldr	r0, [r7, #4]
 8012098:	f001 fa6a 	bl	8013570 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801209c:	6878      	ldr	r0, [r7, #4]
 801209e:	f000 fcff 	bl	8012aa0 <UART_SetConfig>
 80120a2:	4603      	mov	r3, r0
 80120a4:	2b01      	cmp	r3, #1
 80120a6:	d101      	bne.n	80120ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80120a8:	2301      	movs	r3, #1
 80120aa:	e01b      	b.n	80120e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	685a      	ldr	r2, [r3, #4]
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80120ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	689a      	ldr	r2, [r3, #8]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80120ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	681a      	ldr	r2, [r3, #0]
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	f042 0201 	orr.w	r2, r2, #1
 80120da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f001 fae9 	bl	80136b4 <UART_CheckIdleState>
 80120e2:	4603      	mov	r3, r0
}
 80120e4:	4618      	mov	r0, r3
 80120e6:	3708      	adds	r7, #8
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}

080120ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b08a      	sub	sp, #40	@ 0x28
 80120f0:	af02      	add	r7, sp, #8
 80120f2:	60f8      	str	r0, [r7, #12]
 80120f4:	60b9      	str	r1, [r7, #8]
 80120f6:	603b      	str	r3, [r7, #0]
 80120f8:	4613      	mov	r3, r2
 80120fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012102:	2b20      	cmp	r3, #32
 8012104:	d17b      	bne.n	80121fe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8012106:	68bb      	ldr	r3, [r7, #8]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d002      	beq.n	8012112 <HAL_UART_Transmit+0x26>
 801210c:	88fb      	ldrh	r3, [r7, #6]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d101      	bne.n	8012116 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8012112:	2301      	movs	r3, #1
 8012114:	e074      	b.n	8012200 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	2200      	movs	r2, #0
 801211a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	2221      	movs	r2, #33	@ 0x21
 8012122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012126:	f7f1 f9b5 	bl	8003494 <HAL_GetTick>
 801212a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	88fa      	ldrh	r2, [r7, #6]
 8012130:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	88fa      	ldrh	r2, [r7, #6]
 8012138:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	689b      	ldr	r3, [r3, #8]
 8012140:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012144:	d108      	bne.n	8012158 <HAL_UART_Transmit+0x6c>
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	691b      	ldr	r3, [r3, #16]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d104      	bne.n	8012158 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801214e:	2300      	movs	r3, #0
 8012150:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012152:	68bb      	ldr	r3, [r7, #8]
 8012154:	61bb      	str	r3, [r7, #24]
 8012156:	e003      	b.n	8012160 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8012158:	68bb      	ldr	r3, [r7, #8]
 801215a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801215c:	2300      	movs	r3, #0
 801215e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012160:	e030      	b.n	80121c4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	9300      	str	r3, [sp, #0]
 8012166:	697b      	ldr	r3, [r7, #20]
 8012168:	2200      	movs	r2, #0
 801216a:	2180      	movs	r1, #128	@ 0x80
 801216c:	68f8      	ldr	r0, [r7, #12]
 801216e:	f001 fb4b 	bl	8013808 <UART_WaitOnFlagUntilTimeout>
 8012172:	4603      	mov	r3, r0
 8012174:	2b00      	cmp	r3, #0
 8012176:	d005      	beq.n	8012184 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	2220      	movs	r2, #32
 801217c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8012180:	2303      	movs	r3, #3
 8012182:	e03d      	b.n	8012200 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8012184:	69fb      	ldr	r3, [r7, #28]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d10b      	bne.n	80121a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801218a:	69bb      	ldr	r3, [r7, #24]
 801218c:	881b      	ldrh	r3, [r3, #0]
 801218e:	461a      	mov	r2, r3
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012198:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801219a:	69bb      	ldr	r3, [r7, #24]
 801219c:	3302      	adds	r3, #2
 801219e:	61bb      	str	r3, [r7, #24]
 80121a0:	e007      	b.n	80121b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80121a2:	69fb      	ldr	r3, [r7, #28]
 80121a4:	781a      	ldrb	r2, [r3, #0]
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80121ac:	69fb      	ldr	r3, [r7, #28]
 80121ae:	3301      	adds	r3, #1
 80121b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80121b8:	b29b      	uxth	r3, r3
 80121ba:	3b01      	subs	r3, #1
 80121bc:	b29a      	uxth	r2, r3
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80121ca:	b29b      	uxth	r3, r3
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d1c8      	bne.n	8012162 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80121d0:	683b      	ldr	r3, [r7, #0]
 80121d2:	9300      	str	r3, [sp, #0]
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	2200      	movs	r2, #0
 80121d8:	2140      	movs	r1, #64	@ 0x40
 80121da:	68f8      	ldr	r0, [r7, #12]
 80121dc:	f001 fb14 	bl	8013808 <UART_WaitOnFlagUntilTimeout>
 80121e0:	4603      	mov	r3, r0
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d005      	beq.n	80121f2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	2220      	movs	r2, #32
 80121ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80121ee:	2303      	movs	r3, #3
 80121f0:	e006      	b.n	8012200 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	2220      	movs	r2, #32
 80121f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80121fa:	2300      	movs	r3, #0
 80121fc:	e000      	b.n	8012200 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80121fe:	2302      	movs	r3, #2
  }
}
 8012200:	4618      	mov	r0, r3
 8012202:	3720      	adds	r7, #32
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}

08012208 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b08a      	sub	sp, #40	@ 0x28
 801220c:	af00      	add	r7, sp, #0
 801220e:	60f8      	str	r0, [r7, #12]
 8012210:	60b9      	str	r1, [r7, #8]
 8012212:	4613      	mov	r3, r2
 8012214:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801221c:	2b20      	cmp	r3, #32
 801221e:	d137      	bne.n	8012290 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8012220:	68bb      	ldr	r3, [r7, #8]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d002      	beq.n	801222c <HAL_UART_Receive_DMA+0x24>
 8012226:	88fb      	ldrh	r3, [r7, #6]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d101      	bne.n	8012230 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 801222c:	2301      	movs	r3, #1
 801222e:	e030      	b.n	8012292 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	2200      	movs	r2, #0
 8012234:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	4a18      	ldr	r2, [pc, #96]	@ (801229c <HAL_UART_Receive_DMA+0x94>)
 801223c:	4293      	cmp	r3, r2
 801223e:	d01f      	beq.n	8012280 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	685b      	ldr	r3, [r3, #4]
 8012246:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801224a:	2b00      	cmp	r3, #0
 801224c:	d018      	beq.n	8012280 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012254:	697b      	ldr	r3, [r7, #20]
 8012256:	e853 3f00 	ldrex	r3, [r3]
 801225a:	613b      	str	r3, [r7, #16]
   return(result);
 801225c:	693b      	ldr	r3, [r7, #16]
 801225e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8012262:	627b      	str	r3, [r7, #36]	@ 0x24
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	461a      	mov	r2, r3
 801226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801226c:	623b      	str	r3, [r7, #32]
 801226e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012270:	69f9      	ldr	r1, [r7, #28]
 8012272:	6a3a      	ldr	r2, [r7, #32]
 8012274:	e841 2300 	strex	r3, r2, [r1]
 8012278:	61bb      	str	r3, [r7, #24]
   return(result);
 801227a:	69bb      	ldr	r3, [r7, #24]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d1e6      	bne.n	801224e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8012280:	88fb      	ldrh	r3, [r7, #6]
 8012282:	461a      	mov	r2, r3
 8012284:	68b9      	ldr	r1, [r7, #8]
 8012286:	68f8      	ldr	r0, [r7, #12]
 8012288:	f001 fb2c 	bl	80138e4 <UART_Start_Receive_DMA>
 801228c:	4603      	mov	r3, r0
 801228e:	e000      	b.n	8012292 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012290:	2302      	movs	r3, #2
  }
}
 8012292:	4618      	mov	r0, r3
 8012294:	3728      	adds	r7, #40	@ 0x28
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}
 801229a:	bf00      	nop
 801229c:	58000c00 	.word	0x58000c00

080122a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b0ba      	sub	sp, #232	@ 0xe8
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	69db      	ldr	r3, [r3, #28]
 80122ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	689b      	ldr	r3, [r3, #8]
 80122c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80122c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80122ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 80122ce:	4013      	ands	r3, r2
 80122d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80122d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d11b      	bne.n	8012314 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80122dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80122e0:	f003 0320 	and.w	r3, r3, #32
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d015      	beq.n	8012314 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80122e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80122ec:	f003 0320 	and.w	r3, r3, #32
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d105      	bne.n	8012300 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80122f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80122f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d009      	beq.n	8012314 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012304:	2b00      	cmp	r3, #0
 8012306:	f000 8393 	beq.w	8012a30 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	4798      	blx	r3
      }
      return;
 8012312:	e38d      	b.n	8012a30 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012314:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012318:	2b00      	cmp	r3, #0
 801231a:	f000 8123 	beq.w	8012564 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801231e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012322:	4b8d      	ldr	r3, [pc, #564]	@ (8012558 <HAL_UART_IRQHandler+0x2b8>)
 8012324:	4013      	ands	r3, r2
 8012326:	2b00      	cmp	r3, #0
 8012328:	d106      	bne.n	8012338 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801232a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801232e:	4b8b      	ldr	r3, [pc, #556]	@ (801255c <HAL_UART_IRQHandler+0x2bc>)
 8012330:	4013      	ands	r3, r2
 8012332:	2b00      	cmp	r3, #0
 8012334:	f000 8116 	beq.w	8012564 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801233c:	f003 0301 	and.w	r3, r3, #1
 8012340:	2b00      	cmp	r3, #0
 8012342:	d011      	beq.n	8012368 <HAL_UART_IRQHandler+0xc8>
 8012344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801234c:	2b00      	cmp	r3, #0
 801234e:	d00b      	beq.n	8012368 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	2201      	movs	r2, #1
 8012356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801235e:	f043 0201 	orr.w	r2, r3, #1
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801236c:	f003 0302 	and.w	r3, r3, #2
 8012370:	2b00      	cmp	r3, #0
 8012372:	d011      	beq.n	8012398 <HAL_UART_IRQHandler+0xf8>
 8012374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012378:	f003 0301 	and.w	r3, r3, #1
 801237c:	2b00      	cmp	r3, #0
 801237e:	d00b      	beq.n	8012398 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	2202      	movs	r2, #2
 8012386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801238e:	f043 0204 	orr.w	r2, r3, #4
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801239c:	f003 0304 	and.w	r3, r3, #4
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d011      	beq.n	80123c8 <HAL_UART_IRQHandler+0x128>
 80123a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80123a8:	f003 0301 	and.w	r3, r3, #1
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d00b      	beq.n	80123c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	2204      	movs	r2, #4
 80123b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80123be:	f043 0202 	orr.w	r2, r3, #2
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80123c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80123cc:	f003 0308 	and.w	r3, r3, #8
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d017      	beq.n	8012404 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80123d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80123d8:	f003 0320 	and.w	r3, r3, #32
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d105      	bne.n	80123ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80123e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80123e4:	4b5c      	ldr	r3, [pc, #368]	@ (8012558 <HAL_UART_IRQHandler+0x2b8>)
 80123e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d00b      	beq.n	8012404 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	2208      	movs	r2, #8
 80123f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80123fa:	f043 0208 	orr.w	r2, r3, #8
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801240c:	2b00      	cmp	r3, #0
 801240e:	d012      	beq.n	8012436 <HAL_UART_IRQHandler+0x196>
 8012410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012414:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012418:	2b00      	cmp	r3, #0
 801241a:	d00c      	beq.n	8012436 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012424:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801242c:	f043 0220 	orr.w	r2, r3, #32
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801243c:	2b00      	cmp	r3, #0
 801243e:	f000 82f9 	beq.w	8012a34 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012446:	f003 0320 	and.w	r3, r3, #32
 801244a:	2b00      	cmp	r3, #0
 801244c:	d013      	beq.n	8012476 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801244e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012452:	f003 0320 	and.w	r3, r3, #32
 8012456:	2b00      	cmp	r3, #0
 8012458:	d105      	bne.n	8012466 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801245a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801245e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012462:	2b00      	cmp	r3, #0
 8012464:	d007      	beq.n	8012476 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801246a:	2b00      	cmp	r3, #0
 801246c:	d003      	beq.n	8012476 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012472:	6878      	ldr	r0, [r7, #4]
 8012474:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801247c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	689b      	ldr	r3, [r3, #8]
 8012486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801248a:	2b40      	cmp	r3, #64	@ 0x40
 801248c:	d005      	beq.n	801249a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801248e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012492:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012496:	2b00      	cmp	r3, #0
 8012498:	d054      	beq.n	8012544 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	f001 fb0a 	bl	8013ab4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	689b      	ldr	r3, [r3, #8]
 80124a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80124aa:	2b40      	cmp	r3, #64	@ 0x40
 80124ac:	d146      	bne.n	801253c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	3308      	adds	r3, #8
 80124b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80124bc:	e853 3f00 	ldrex	r3, [r3]
 80124c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80124c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80124c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80124cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	3308      	adds	r3, #8
 80124d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80124da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80124de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80124e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80124ea:	e841 2300 	strex	r3, r2, [r1]
 80124ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80124f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d1d9      	bne.n	80124ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012500:	2b00      	cmp	r3, #0
 8012502:	d017      	beq.n	8012534 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801250a:	4a15      	ldr	r2, [pc, #84]	@ (8012560 <HAL_UART_IRQHandler+0x2c0>)
 801250c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012514:	4618      	mov	r0, r3
 8012516:	f7f2 fd51 	bl	8004fbc <HAL_DMA_Abort_IT>
 801251a:	4603      	mov	r3, r0
 801251c:	2b00      	cmp	r3, #0
 801251e:	d019      	beq.n	8012554 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012528:	687a      	ldr	r2, [r7, #4]
 801252a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801252e:	4610      	mov	r0, r2
 8012530:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012532:	e00f      	b.n	8012554 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012534:	6878      	ldr	r0, [r7, #4]
 8012536:	f000 fa9d 	bl	8012a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801253a:	e00b      	b.n	8012554 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801253c:	6878      	ldr	r0, [r7, #4]
 801253e:	f000 fa99 	bl	8012a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012542:	e007      	b.n	8012554 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012544:	6878      	ldr	r0, [r7, #4]
 8012546:	f000 fa95 	bl	8012a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	2200      	movs	r2, #0
 801254e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8012552:	e26f      	b.n	8012a34 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012554:	bf00      	nop
    return;
 8012556:	e26d      	b.n	8012a34 <HAL_UART_IRQHandler+0x794>
 8012558:	10000001 	.word	0x10000001
 801255c:	04000120 	.word	0x04000120
 8012560:	08013d67 	.word	0x08013d67

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012568:	2b01      	cmp	r3, #1
 801256a:	f040 8203 	bne.w	8012974 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801256e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012572:	f003 0310 	and.w	r3, r3, #16
 8012576:	2b00      	cmp	r3, #0
 8012578:	f000 81fc 	beq.w	8012974 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801257c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012580:	f003 0310 	and.w	r3, r3, #16
 8012584:	2b00      	cmp	r3, #0
 8012586:	f000 81f5 	beq.w	8012974 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	2210      	movs	r2, #16
 8012590:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	689b      	ldr	r3, [r3, #8]
 8012598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801259c:	2b40      	cmp	r3, #64	@ 0x40
 801259e:	f040 816d 	bne.w	801287c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	4aa4      	ldr	r2, [pc, #656]	@ (801283c <HAL_UART_IRQHandler+0x59c>)
 80125ac:	4293      	cmp	r3, r2
 80125ae:	d068      	beq.n	8012682 <HAL_UART_IRQHandler+0x3e2>
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	4aa1      	ldr	r2, [pc, #644]	@ (8012840 <HAL_UART_IRQHandler+0x5a0>)
 80125ba:	4293      	cmp	r3, r2
 80125bc:	d061      	beq.n	8012682 <HAL_UART_IRQHandler+0x3e2>
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	4a9f      	ldr	r2, [pc, #636]	@ (8012844 <HAL_UART_IRQHandler+0x5a4>)
 80125c8:	4293      	cmp	r3, r2
 80125ca:	d05a      	beq.n	8012682 <HAL_UART_IRQHandler+0x3e2>
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	4a9c      	ldr	r2, [pc, #624]	@ (8012848 <HAL_UART_IRQHandler+0x5a8>)
 80125d6:	4293      	cmp	r3, r2
 80125d8:	d053      	beq.n	8012682 <HAL_UART_IRQHandler+0x3e2>
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	4a9a      	ldr	r2, [pc, #616]	@ (801284c <HAL_UART_IRQHandler+0x5ac>)
 80125e4:	4293      	cmp	r3, r2
 80125e6:	d04c      	beq.n	8012682 <HAL_UART_IRQHandler+0x3e2>
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	4a97      	ldr	r2, [pc, #604]	@ (8012850 <HAL_UART_IRQHandler+0x5b0>)
 80125f2:	4293      	cmp	r3, r2
 80125f4:	d045      	beq.n	8012682 <HAL_UART_IRQHandler+0x3e2>
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	4a95      	ldr	r2, [pc, #596]	@ (8012854 <HAL_UART_IRQHandler+0x5b4>)
 8012600:	4293      	cmp	r3, r2
 8012602:	d03e      	beq.n	8012682 <HAL_UART_IRQHandler+0x3e2>
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	4a92      	ldr	r2, [pc, #584]	@ (8012858 <HAL_UART_IRQHandler+0x5b8>)
 801260e:	4293      	cmp	r3, r2
 8012610:	d037      	beq.n	8012682 <HAL_UART_IRQHandler+0x3e2>
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	4a90      	ldr	r2, [pc, #576]	@ (801285c <HAL_UART_IRQHandler+0x5bc>)
 801261c:	4293      	cmp	r3, r2
 801261e:	d030      	beq.n	8012682 <HAL_UART_IRQHandler+0x3e2>
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	4a8d      	ldr	r2, [pc, #564]	@ (8012860 <HAL_UART_IRQHandler+0x5c0>)
 801262a:	4293      	cmp	r3, r2
 801262c:	d029      	beq.n	8012682 <HAL_UART_IRQHandler+0x3e2>
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	4a8b      	ldr	r2, [pc, #556]	@ (8012864 <HAL_UART_IRQHandler+0x5c4>)
 8012638:	4293      	cmp	r3, r2
 801263a:	d022      	beq.n	8012682 <HAL_UART_IRQHandler+0x3e2>
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	4a88      	ldr	r2, [pc, #544]	@ (8012868 <HAL_UART_IRQHandler+0x5c8>)
 8012646:	4293      	cmp	r3, r2
 8012648:	d01b      	beq.n	8012682 <HAL_UART_IRQHandler+0x3e2>
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	4a86      	ldr	r2, [pc, #536]	@ (801286c <HAL_UART_IRQHandler+0x5cc>)
 8012654:	4293      	cmp	r3, r2
 8012656:	d014      	beq.n	8012682 <HAL_UART_IRQHandler+0x3e2>
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	4a83      	ldr	r2, [pc, #524]	@ (8012870 <HAL_UART_IRQHandler+0x5d0>)
 8012662:	4293      	cmp	r3, r2
 8012664:	d00d      	beq.n	8012682 <HAL_UART_IRQHandler+0x3e2>
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	4a81      	ldr	r2, [pc, #516]	@ (8012874 <HAL_UART_IRQHandler+0x5d4>)
 8012670:	4293      	cmp	r3, r2
 8012672:	d006      	beq.n	8012682 <HAL_UART_IRQHandler+0x3e2>
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	4a7e      	ldr	r2, [pc, #504]	@ (8012878 <HAL_UART_IRQHandler+0x5d8>)
 801267e:	4293      	cmp	r3, r2
 8012680:	d106      	bne.n	8012690 <HAL_UART_IRQHandler+0x3f0>
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	685b      	ldr	r3, [r3, #4]
 801268c:	b29b      	uxth	r3, r3
 801268e:	e005      	b.n	801269c <HAL_UART_IRQHandler+0x3fc>
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	685b      	ldr	r3, [r3, #4]
 801269a:	b29b      	uxth	r3, r3
 801269c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80126a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	f000 80ad 	beq.w	8012804 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80126b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80126b4:	429a      	cmp	r2, r3
 80126b6:	f080 80a5 	bcs.w	8012804 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80126c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80126ca:	69db      	ldr	r3, [r3, #28]
 80126cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80126d0:	f000 8087 	beq.w	80127e2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80126e0:	e853 3f00 	ldrex	r3, [r3]
 80126e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80126e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80126ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80126f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	461a      	mov	r2, r3
 80126fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80126fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012702:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012706:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801270a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801270e:	e841 2300 	strex	r3, r2, [r1]
 8012712:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8012716:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801271a:	2b00      	cmp	r3, #0
 801271c:	d1da      	bne.n	80126d4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	3308      	adds	r3, #8
 8012724:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012726:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012728:	e853 3f00 	ldrex	r3, [r3]
 801272c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801272e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012730:	f023 0301 	bic.w	r3, r3, #1
 8012734:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	3308      	adds	r3, #8
 801273e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8012742:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012746:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012748:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801274a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801274e:	e841 2300 	strex	r3, r2, [r1]
 8012752:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8012754:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012756:	2b00      	cmp	r3, #0
 8012758:	d1e1      	bne.n	801271e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	3308      	adds	r3, #8
 8012760:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012762:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012764:	e853 3f00 	ldrex	r3, [r3]
 8012768:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801276a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801276c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012770:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	3308      	adds	r3, #8
 801277a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801277e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012780:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012782:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012784:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012786:	e841 2300 	strex	r3, r2, [r1]
 801278a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801278c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801278e:	2b00      	cmp	r3, #0
 8012790:	d1e3      	bne.n	801275a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	2220      	movs	r2, #32
 8012796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	2200      	movs	r2, #0
 801279e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127a8:	e853 3f00 	ldrex	r3, [r3]
 80127ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80127ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80127b0:	f023 0310 	bic.w	r3, r3, #16
 80127b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	461a      	mov	r2, r3
 80127be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80127c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80127c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80127ca:	e841 2300 	strex	r3, r2, [r1]
 80127ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80127d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d1e4      	bne.n	80127a0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80127dc:	4618      	mov	r0, r3
 80127de:	f7f2 f8cf 	bl	8004980 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	2202      	movs	r2, #2
 80127e6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80127f4:	b29b      	uxth	r3, r3
 80127f6:	1ad3      	subs	r3, r2, r3
 80127f8:	b29b      	uxth	r3, r3
 80127fa:	4619      	mov	r1, r3
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f000 f943 	bl	8012a88 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8012802:	e119      	b.n	8012a38 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801280a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801280e:	429a      	cmp	r2, r3
 8012810:	f040 8112 	bne.w	8012a38 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801281a:	69db      	ldr	r3, [r3, #28]
 801281c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012820:	f040 810a 	bne.w	8012a38 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	2202      	movs	r2, #2
 8012828:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012830:	4619      	mov	r1, r3
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f000 f928 	bl	8012a88 <HAL_UARTEx_RxEventCallback>
      return;
 8012838:	e0fe      	b.n	8012a38 <HAL_UART_IRQHandler+0x798>
 801283a:	bf00      	nop
 801283c:	40020010 	.word	0x40020010
 8012840:	40020028 	.word	0x40020028
 8012844:	40020040 	.word	0x40020040
 8012848:	40020058 	.word	0x40020058
 801284c:	40020070 	.word	0x40020070
 8012850:	40020088 	.word	0x40020088
 8012854:	400200a0 	.word	0x400200a0
 8012858:	400200b8 	.word	0x400200b8
 801285c:	40020410 	.word	0x40020410
 8012860:	40020428 	.word	0x40020428
 8012864:	40020440 	.word	0x40020440
 8012868:	40020458 	.word	0x40020458
 801286c:	40020470 	.word	0x40020470
 8012870:	40020488 	.word	0x40020488
 8012874:	400204a0 	.word	0x400204a0
 8012878:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012888:	b29b      	uxth	r3, r3
 801288a:	1ad3      	subs	r3, r2, r3
 801288c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012896:	b29b      	uxth	r3, r3
 8012898:	2b00      	cmp	r3, #0
 801289a:	f000 80cf 	beq.w	8012a3c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 801289e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	f000 80ca 	beq.w	8012a3c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128b0:	e853 3f00 	ldrex	r3, [r3]
 80128b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80128b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80128bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	461a      	mov	r2, r3
 80128c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80128ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80128cc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80128d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80128d2:	e841 2300 	strex	r3, r2, [r1]
 80128d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80128d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d1e4      	bne.n	80128a8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	3308      	adds	r3, #8
 80128e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128e8:	e853 3f00 	ldrex	r3, [r3]
 80128ec:	623b      	str	r3, [r7, #32]
   return(result);
 80128ee:	6a3a      	ldr	r2, [r7, #32]
 80128f0:	4b55      	ldr	r3, [pc, #340]	@ (8012a48 <HAL_UART_IRQHandler+0x7a8>)
 80128f2:	4013      	ands	r3, r2
 80128f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	3308      	adds	r3, #8
 80128fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8012902:	633a      	str	r2, [r7, #48]	@ 0x30
 8012904:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012906:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012908:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801290a:	e841 2300 	strex	r3, r2, [r1]
 801290e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012912:	2b00      	cmp	r3, #0
 8012914:	d1e3      	bne.n	80128de <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2220      	movs	r2, #32
 801291a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	2200      	movs	r2, #0
 8012922:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	2200      	movs	r2, #0
 8012928:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012930:	693b      	ldr	r3, [r7, #16]
 8012932:	e853 3f00 	ldrex	r3, [r3]
 8012936:	60fb      	str	r3, [r7, #12]
   return(result);
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	f023 0310 	bic.w	r3, r3, #16
 801293e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	461a      	mov	r2, r3
 8012948:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801294c:	61fb      	str	r3, [r7, #28]
 801294e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012950:	69b9      	ldr	r1, [r7, #24]
 8012952:	69fa      	ldr	r2, [r7, #28]
 8012954:	e841 2300 	strex	r3, r2, [r1]
 8012958:	617b      	str	r3, [r7, #20]
   return(result);
 801295a:	697b      	ldr	r3, [r7, #20]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d1e4      	bne.n	801292a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	2202      	movs	r2, #2
 8012964:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012966:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801296a:	4619      	mov	r1, r3
 801296c:	6878      	ldr	r0, [r7, #4]
 801296e:	f000 f88b 	bl	8012a88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012972:	e063      	b.n	8012a3c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012978:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801297c:	2b00      	cmp	r3, #0
 801297e:	d00e      	beq.n	801299e <HAL_UART_IRQHandler+0x6fe>
 8012980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012984:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8012988:	2b00      	cmp	r3, #0
 801298a:	d008      	beq.n	801299e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8012994:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012996:	6878      	ldr	r0, [r7, #4]
 8012998:	f001 fa22 	bl	8013de0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801299c:	e051      	b.n	8012a42 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801299e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80129a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d014      	beq.n	80129d4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80129aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80129ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d105      	bne.n	80129c2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80129b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80129ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d008      	beq.n	80129d4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d03a      	beq.n	8012a40 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80129ce:	6878      	ldr	r0, [r7, #4]
 80129d0:	4798      	blx	r3
    }
    return;
 80129d2:	e035      	b.n	8012a40 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80129d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80129d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d009      	beq.n	80129f4 <HAL_UART_IRQHandler+0x754>
 80129e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80129e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d003      	beq.n	80129f4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80129ec:	6878      	ldr	r0, [r7, #4]
 80129ee:	f001 f9cc 	bl	8013d8a <UART_EndTransmit_IT>
    return;
 80129f2:	e026      	b.n	8012a42 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80129f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80129f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d009      	beq.n	8012a14 <HAL_UART_IRQHandler+0x774>
 8012a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012a04:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d003      	beq.n	8012a14 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	f001 f9fb 	bl	8013e08 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012a12:	e016      	b.n	8012a42 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012a18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d010      	beq.n	8012a42 <HAL_UART_IRQHandler+0x7a2>
 8012a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	da0c      	bge.n	8012a42 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012a28:	6878      	ldr	r0, [r7, #4]
 8012a2a:	f001 f9e3 	bl	8013df4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012a2e:	e008      	b.n	8012a42 <HAL_UART_IRQHandler+0x7a2>
      return;
 8012a30:	bf00      	nop
 8012a32:	e006      	b.n	8012a42 <HAL_UART_IRQHandler+0x7a2>
    return;
 8012a34:	bf00      	nop
 8012a36:	e004      	b.n	8012a42 <HAL_UART_IRQHandler+0x7a2>
      return;
 8012a38:	bf00      	nop
 8012a3a:	e002      	b.n	8012a42 <HAL_UART_IRQHandler+0x7a2>
      return;
 8012a3c:	bf00      	nop
 8012a3e:	e000      	b.n	8012a42 <HAL_UART_IRQHandler+0x7a2>
    return;
 8012a40:	bf00      	nop
  }
}
 8012a42:	37e8      	adds	r7, #232	@ 0xe8
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}
 8012a48:	effffffe 	.word	0xeffffffe

08012a4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012a4c:	b480      	push	{r7}
 8012a4e:	b083      	sub	sp, #12
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012a54:	bf00      	nop
 8012a56:	370c      	adds	r7, #12
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5e:	4770      	bx	lr

08012a60 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012a60:	b480      	push	{r7}
 8012a62:	b083      	sub	sp, #12
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8012a68:	bf00      	nop
 8012a6a:	370c      	adds	r7, #12
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a72:	4770      	bx	lr

08012a74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012a74:	b480      	push	{r7}
 8012a76:	b083      	sub	sp, #12
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012a7c:	bf00      	nop
 8012a7e:	370c      	adds	r7, #12
 8012a80:	46bd      	mov	sp, r7
 8012a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a86:	4770      	bx	lr

08012a88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012a88:	b480      	push	{r7}
 8012a8a:	b083      	sub	sp, #12
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
 8012a90:	460b      	mov	r3, r1
 8012a92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012a94:	bf00      	nop
 8012a96:	370c      	adds	r7, #12
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9e:	4770      	bx	lr

08012aa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012aa4:	b092      	sub	sp, #72	@ 0x48
 8012aa6:	af00      	add	r7, sp, #0
 8012aa8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012aaa:	2300      	movs	r3, #0
 8012aac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	689a      	ldr	r2, [r3, #8]
 8012ab4:	697b      	ldr	r3, [r7, #20]
 8012ab6:	691b      	ldr	r3, [r3, #16]
 8012ab8:	431a      	orrs	r2, r3
 8012aba:	697b      	ldr	r3, [r7, #20]
 8012abc:	695b      	ldr	r3, [r3, #20]
 8012abe:	431a      	orrs	r2, r3
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	69db      	ldr	r3, [r3, #28]
 8012ac4:	4313      	orrs	r3, r2
 8012ac6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012ac8:	697b      	ldr	r3, [r7, #20]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	681a      	ldr	r2, [r3, #0]
 8012ace:	4bbe      	ldr	r3, [pc, #760]	@ (8012dc8 <UART_SetConfig+0x328>)
 8012ad0:	4013      	ands	r3, r2
 8012ad2:	697a      	ldr	r2, [r7, #20]
 8012ad4:	6812      	ldr	r2, [r2, #0]
 8012ad6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012ad8:	430b      	orrs	r3, r1
 8012ada:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012adc:	697b      	ldr	r3, [r7, #20]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	685b      	ldr	r3, [r3, #4]
 8012ae2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012ae6:	697b      	ldr	r3, [r7, #20]
 8012ae8:	68da      	ldr	r2, [r3, #12]
 8012aea:	697b      	ldr	r3, [r7, #20]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	430a      	orrs	r2, r1
 8012af0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012af2:	697b      	ldr	r3, [r7, #20]
 8012af4:	699b      	ldr	r3, [r3, #24]
 8012af6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012af8:	697b      	ldr	r3, [r7, #20]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	4ab3      	ldr	r2, [pc, #716]	@ (8012dcc <UART_SetConfig+0x32c>)
 8012afe:	4293      	cmp	r3, r2
 8012b00:	d004      	beq.n	8012b0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012b02:	697b      	ldr	r3, [r7, #20]
 8012b04:	6a1b      	ldr	r3, [r3, #32]
 8012b06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012b08:	4313      	orrs	r3, r2
 8012b0a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012b0c:	697b      	ldr	r3, [r7, #20]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	689a      	ldr	r2, [r3, #8]
 8012b12:	4baf      	ldr	r3, [pc, #700]	@ (8012dd0 <UART_SetConfig+0x330>)
 8012b14:	4013      	ands	r3, r2
 8012b16:	697a      	ldr	r2, [r7, #20]
 8012b18:	6812      	ldr	r2, [r2, #0]
 8012b1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012b1c:	430b      	orrs	r3, r1
 8012b1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012b20:	697b      	ldr	r3, [r7, #20]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b26:	f023 010f 	bic.w	r1, r3, #15
 8012b2a:	697b      	ldr	r3, [r7, #20]
 8012b2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012b2e:	697b      	ldr	r3, [r7, #20]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	430a      	orrs	r2, r1
 8012b34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012b36:	697b      	ldr	r3, [r7, #20]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	4aa6      	ldr	r2, [pc, #664]	@ (8012dd4 <UART_SetConfig+0x334>)
 8012b3c:	4293      	cmp	r3, r2
 8012b3e:	d177      	bne.n	8012c30 <UART_SetConfig+0x190>
 8012b40:	4ba5      	ldr	r3, [pc, #660]	@ (8012dd8 <UART_SetConfig+0x338>)
 8012b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012b44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012b48:	2b28      	cmp	r3, #40	@ 0x28
 8012b4a:	d86d      	bhi.n	8012c28 <UART_SetConfig+0x188>
 8012b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8012b54 <UART_SetConfig+0xb4>)
 8012b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b52:	bf00      	nop
 8012b54:	08012bf9 	.word	0x08012bf9
 8012b58:	08012c29 	.word	0x08012c29
 8012b5c:	08012c29 	.word	0x08012c29
 8012b60:	08012c29 	.word	0x08012c29
 8012b64:	08012c29 	.word	0x08012c29
 8012b68:	08012c29 	.word	0x08012c29
 8012b6c:	08012c29 	.word	0x08012c29
 8012b70:	08012c29 	.word	0x08012c29
 8012b74:	08012c01 	.word	0x08012c01
 8012b78:	08012c29 	.word	0x08012c29
 8012b7c:	08012c29 	.word	0x08012c29
 8012b80:	08012c29 	.word	0x08012c29
 8012b84:	08012c29 	.word	0x08012c29
 8012b88:	08012c29 	.word	0x08012c29
 8012b8c:	08012c29 	.word	0x08012c29
 8012b90:	08012c29 	.word	0x08012c29
 8012b94:	08012c09 	.word	0x08012c09
 8012b98:	08012c29 	.word	0x08012c29
 8012b9c:	08012c29 	.word	0x08012c29
 8012ba0:	08012c29 	.word	0x08012c29
 8012ba4:	08012c29 	.word	0x08012c29
 8012ba8:	08012c29 	.word	0x08012c29
 8012bac:	08012c29 	.word	0x08012c29
 8012bb0:	08012c29 	.word	0x08012c29
 8012bb4:	08012c11 	.word	0x08012c11
 8012bb8:	08012c29 	.word	0x08012c29
 8012bbc:	08012c29 	.word	0x08012c29
 8012bc0:	08012c29 	.word	0x08012c29
 8012bc4:	08012c29 	.word	0x08012c29
 8012bc8:	08012c29 	.word	0x08012c29
 8012bcc:	08012c29 	.word	0x08012c29
 8012bd0:	08012c29 	.word	0x08012c29
 8012bd4:	08012c19 	.word	0x08012c19
 8012bd8:	08012c29 	.word	0x08012c29
 8012bdc:	08012c29 	.word	0x08012c29
 8012be0:	08012c29 	.word	0x08012c29
 8012be4:	08012c29 	.word	0x08012c29
 8012be8:	08012c29 	.word	0x08012c29
 8012bec:	08012c29 	.word	0x08012c29
 8012bf0:	08012c29 	.word	0x08012c29
 8012bf4:	08012c21 	.word	0x08012c21
 8012bf8:	2301      	movs	r3, #1
 8012bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bfe:	e222      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012c00:	2304      	movs	r3, #4
 8012c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c06:	e21e      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012c08:	2308      	movs	r3, #8
 8012c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c0e:	e21a      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012c10:	2310      	movs	r3, #16
 8012c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c16:	e216      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012c18:	2320      	movs	r3, #32
 8012c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c1e:	e212      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012c20:	2340      	movs	r3, #64	@ 0x40
 8012c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c26:	e20e      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012c28:	2380      	movs	r3, #128	@ 0x80
 8012c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c2e:	e20a      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012c30:	697b      	ldr	r3, [r7, #20]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	4a69      	ldr	r2, [pc, #420]	@ (8012ddc <UART_SetConfig+0x33c>)
 8012c36:	4293      	cmp	r3, r2
 8012c38:	d130      	bne.n	8012c9c <UART_SetConfig+0x1fc>
 8012c3a:	4b67      	ldr	r3, [pc, #412]	@ (8012dd8 <UART_SetConfig+0x338>)
 8012c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c3e:	f003 0307 	and.w	r3, r3, #7
 8012c42:	2b05      	cmp	r3, #5
 8012c44:	d826      	bhi.n	8012c94 <UART_SetConfig+0x1f4>
 8012c46:	a201      	add	r2, pc, #4	@ (adr r2, 8012c4c <UART_SetConfig+0x1ac>)
 8012c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c4c:	08012c65 	.word	0x08012c65
 8012c50:	08012c6d 	.word	0x08012c6d
 8012c54:	08012c75 	.word	0x08012c75
 8012c58:	08012c7d 	.word	0x08012c7d
 8012c5c:	08012c85 	.word	0x08012c85
 8012c60:	08012c8d 	.word	0x08012c8d
 8012c64:	2300      	movs	r3, #0
 8012c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c6a:	e1ec      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012c6c:	2304      	movs	r3, #4
 8012c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c72:	e1e8      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012c74:	2308      	movs	r3, #8
 8012c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c7a:	e1e4      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012c7c:	2310      	movs	r3, #16
 8012c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c82:	e1e0      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012c84:	2320      	movs	r3, #32
 8012c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c8a:	e1dc      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012c8c:	2340      	movs	r3, #64	@ 0x40
 8012c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c92:	e1d8      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012c94:	2380      	movs	r3, #128	@ 0x80
 8012c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c9a:	e1d4      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012c9c:	697b      	ldr	r3, [r7, #20]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	4a4f      	ldr	r2, [pc, #316]	@ (8012de0 <UART_SetConfig+0x340>)
 8012ca2:	4293      	cmp	r3, r2
 8012ca4:	d130      	bne.n	8012d08 <UART_SetConfig+0x268>
 8012ca6:	4b4c      	ldr	r3, [pc, #304]	@ (8012dd8 <UART_SetConfig+0x338>)
 8012ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012caa:	f003 0307 	and.w	r3, r3, #7
 8012cae:	2b05      	cmp	r3, #5
 8012cb0:	d826      	bhi.n	8012d00 <UART_SetConfig+0x260>
 8012cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8012cb8 <UART_SetConfig+0x218>)
 8012cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cb8:	08012cd1 	.word	0x08012cd1
 8012cbc:	08012cd9 	.word	0x08012cd9
 8012cc0:	08012ce1 	.word	0x08012ce1
 8012cc4:	08012ce9 	.word	0x08012ce9
 8012cc8:	08012cf1 	.word	0x08012cf1
 8012ccc:	08012cf9 	.word	0x08012cf9
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cd6:	e1b6      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012cd8:	2304      	movs	r3, #4
 8012cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cde:	e1b2      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012ce0:	2308      	movs	r3, #8
 8012ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ce6:	e1ae      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012ce8:	2310      	movs	r3, #16
 8012cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cee:	e1aa      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012cf0:	2320      	movs	r3, #32
 8012cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cf6:	e1a6      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012cf8:	2340      	movs	r3, #64	@ 0x40
 8012cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cfe:	e1a2      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012d00:	2380      	movs	r3, #128	@ 0x80
 8012d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d06:	e19e      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012d08:	697b      	ldr	r3, [r7, #20]
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	4a35      	ldr	r2, [pc, #212]	@ (8012de4 <UART_SetConfig+0x344>)
 8012d0e:	4293      	cmp	r3, r2
 8012d10:	d130      	bne.n	8012d74 <UART_SetConfig+0x2d4>
 8012d12:	4b31      	ldr	r3, [pc, #196]	@ (8012dd8 <UART_SetConfig+0x338>)
 8012d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d16:	f003 0307 	and.w	r3, r3, #7
 8012d1a:	2b05      	cmp	r3, #5
 8012d1c:	d826      	bhi.n	8012d6c <UART_SetConfig+0x2cc>
 8012d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8012d24 <UART_SetConfig+0x284>)
 8012d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d24:	08012d3d 	.word	0x08012d3d
 8012d28:	08012d45 	.word	0x08012d45
 8012d2c:	08012d4d 	.word	0x08012d4d
 8012d30:	08012d55 	.word	0x08012d55
 8012d34:	08012d5d 	.word	0x08012d5d
 8012d38:	08012d65 	.word	0x08012d65
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d42:	e180      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012d44:	2304      	movs	r3, #4
 8012d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d4a:	e17c      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012d4c:	2308      	movs	r3, #8
 8012d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d52:	e178      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012d54:	2310      	movs	r3, #16
 8012d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d5a:	e174      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012d5c:	2320      	movs	r3, #32
 8012d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d62:	e170      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012d64:	2340      	movs	r3, #64	@ 0x40
 8012d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d6a:	e16c      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012d6c:	2380      	movs	r3, #128	@ 0x80
 8012d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d72:	e168      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012d74:	697b      	ldr	r3, [r7, #20]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	4a1b      	ldr	r2, [pc, #108]	@ (8012de8 <UART_SetConfig+0x348>)
 8012d7a:	4293      	cmp	r3, r2
 8012d7c:	d142      	bne.n	8012e04 <UART_SetConfig+0x364>
 8012d7e:	4b16      	ldr	r3, [pc, #88]	@ (8012dd8 <UART_SetConfig+0x338>)
 8012d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d82:	f003 0307 	and.w	r3, r3, #7
 8012d86:	2b05      	cmp	r3, #5
 8012d88:	d838      	bhi.n	8012dfc <UART_SetConfig+0x35c>
 8012d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8012d90 <UART_SetConfig+0x2f0>)
 8012d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d90:	08012da9 	.word	0x08012da9
 8012d94:	08012db1 	.word	0x08012db1
 8012d98:	08012db9 	.word	0x08012db9
 8012d9c:	08012dc1 	.word	0x08012dc1
 8012da0:	08012ded 	.word	0x08012ded
 8012da4:	08012df5 	.word	0x08012df5
 8012da8:	2300      	movs	r3, #0
 8012daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012dae:	e14a      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012db0:	2304      	movs	r3, #4
 8012db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012db6:	e146      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012db8:	2308      	movs	r3, #8
 8012dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012dbe:	e142      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012dc0:	2310      	movs	r3, #16
 8012dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012dc6:	e13e      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012dc8:	cfff69f3 	.word	0xcfff69f3
 8012dcc:	58000c00 	.word	0x58000c00
 8012dd0:	11fff4ff 	.word	0x11fff4ff
 8012dd4:	40011000 	.word	0x40011000
 8012dd8:	58024400 	.word	0x58024400
 8012ddc:	40004400 	.word	0x40004400
 8012de0:	40004800 	.word	0x40004800
 8012de4:	40004c00 	.word	0x40004c00
 8012de8:	40005000 	.word	0x40005000
 8012dec:	2320      	movs	r3, #32
 8012dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012df2:	e128      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012df4:	2340      	movs	r3, #64	@ 0x40
 8012df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012dfa:	e124      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012dfc:	2380      	movs	r3, #128	@ 0x80
 8012dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e02:	e120      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012e04:	697b      	ldr	r3, [r7, #20]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	4acb      	ldr	r2, [pc, #812]	@ (8013138 <UART_SetConfig+0x698>)
 8012e0a:	4293      	cmp	r3, r2
 8012e0c:	d176      	bne.n	8012efc <UART_SetConfig+0x45c>
 8012e0e:	4bcb      	ldr	r3, [pc, #812]	@ (801313c <UART_SetConfig+0x69c>)
 8012e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012e16:	2b28      	cmp	r3, #40	@ 0x28
 8012e18:	d86c      	bhi.n	8012ef4 <UART_SetConfig+0x454>
 8012e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8012e20 <UART_SetConfig+0x380>)
 8012e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e20:	08012ec5 	.word	0x08012ec5
 8012e24:	08012ef5 	.word	0x08012ef5
 8012e28:	08012ef5 	.word	0x08012ef5
 8012e2c:	08012ef5 	.word	0x08012ef5
 8012e30:	08012ef5 	.word	0x08012ef5
 8012e34:	08012ef5 	.word	0x08012ef5
 8012e38:	08012ef5 	.word	0x08012ef5
 8012e3c:	08012ef5 	.word	0x08012ef5
 8012e40:	08012ecd 	.word	0x08012ecd
 8012e44:	08012ef5 	.word	0x08012ef5
 8012e48:	08012ef5 	.word	0x08012ef5
 8012e4c:	08012ef5 	.word	0x08012ef5
 8012e50:	08012ef5 	.word	0x08012ef5
 8012e54:	08012ef5 	.word	0x08012ef5
 8012e58:	08012ef5 	.word	0x08012ef5
 8012e5c:	08012ef5 	.word	0x08012ef5
 8012e60:	08012ed5 	.word	0x08012ed5
 8012e64:	08012ef5 	.word	0x08012ef5
 8012e68:	08012ef5 	.word	0x08012ef5
 8012e6c:	08012ef5 	.word	0x08012ef5
 8012e70:	08012ef5 	.word	0x08012ef5
 8012e74:	08012ef5 	.word	0x08012ef5
 8012e78:	08012ef5 	.word	0x08012ef5
 8012e7c:	08012ef5 	.word	0x08012ef5
 8012e80:	08012edd 	.word	0x08012edd
 8012e84:	08012ef5 	.word	0x08012ef5
 8012e88:	08012ef5 	.word	0x08012ef5
 8012e8c:	08012ef5 	.word	0x08012ef5
 8012e90:	08012ef5 	.word	0x08012ef5
 8012e94:	08012ef5 	.word	0x08012ef5
 8012e98:	08012ef5 	.word	0x08012ef5
 8012e9c:	08012ef5 	.word	0x08012ef5
 8012ea0:	08012ee5 	.word	0x08012ee5
 8012ea4:	08012ef5 	.word	0x08012ef5
 8012ea8:	08012ef5 	.word	0x08012ef5
 8012eac:	08012ef5 	.word	0x08012ef5
 8012eb0:	08012ef5 	.word	0x08012ef5
 8012eb4:	08012ef5 	.word	0x08012ef5
 8012eb8:	08012ef5 	.word	0x08012ef5
 8012ebc:	08012ef5 	.word	0x08012ef5
 8012ec0:	08012eed 	.word	0x08012eed
 8012ec4:	2301      	movs	r3, #1
 8012ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012eca:	e0bc      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012ecc:	2304      	movs	r3, #4
 8012ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ed2:	e0b8      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012ed4:	2308      	movs	r3, #8
 8012ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012eda:	e0b4      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012edc:	2310      	movs	r3, #16
 8012ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ee2:	e0b0      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012ee4:	2320      	movs	r3, #32
 8012ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012eea:	e0ac      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012eec:	2340      	movs	r3, #64	@ 0x40
 8012eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ef2:	e0a8      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012ef4:	2380      	movs	r3, #128	@ 0x80
 8012ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012efa:	e0a4      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012efc:	697b      	ldr	r3, [r7, #20]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	4a8f      	ldr	r2, [pc, #572]	@ (8013140 <UART_SetConfig+0x6a0>)
 8012f02:	4293      	cmp	r3, r2
 8012f04:	d130      	bne.n	8012f68 <UART_SetConfig+0x4c8>
 8012f06:	4b8d      	ldr	r3, [pc, #564]	@ (801313c <UART_SetConfig+0x69c>)
 8012f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f0a:	f003 0307 	and.w	r3, r3, #7
 8012f0e:	2b05      	cmp	r3, #5
 8012f10:	d826      	bhi.n	8012f60 <UART_SetConfig+0x4c0>
 8012f12:	a201      	add	r2, pc, #4	@ (adr r2, 8012f18 <UART_SetConfig+0x478>)
 8012f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f18:	08012f31 	.word	0x08012f31
 8012f1c:	08012f39 	.word	0x08012f39
 8012f20:	08012f41 	.word	0x08012f41
 8012f24:	08012f49 	.word	0x08012f49
 8012f28:	08012f51 	.word	0x08012f51
 8012f2c:	08012f59 	.word	0x08012f59
 8012f30:	2300      	movs	r3, #0
 8012f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f36:	e086      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012f38:	2304      	movs	r3, #4
 8012f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f3e:	e082      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012f40:	2308      	movs	r3, #8
 8012f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f46:	e07e      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012f48:	2310      	movs	r3, #16
 8012f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f4e:	e07a      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012f50:	2320      	movs	r3, #32
 8012f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f56:	e076      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012f58:	2340      	movs	r3, #64	@ 0x40
 8012f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f5e:	e072      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012f60:	2380      	movs	r3, #128	@ 0x80
 8012f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f66:	e06e      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012f68:	697b      	ldr	r3, [r7, #20]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	4a75      	ldr	r2, [pc, #468]	@ (8013144 <UART_SetConfig+0x6a4>)
 8012f6e:	4293      	cmp	r3, r2
 8012f70:	d130      	bne.n	8012fd4 <UART_SetConfig+0x534>
 8012f72:	4b72      	ldr	r3, [pc, #456]	@ (801313c <UART_SetConfig+0x69c>)
 8012f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f76:	f003 0307 	and.w	r3, r3, #7
 8012f7a:	2b05      	cmp	r3, #5
 8012f7c:	d826      	bhi.n	8012fcc <UART_SetConfig+0x52c>
 8012f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8012f84 <UART_SetConfig+0x4e4>)
 8012f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f84:	08012f9d 	.word	0x08012f9d
 8012f88:	08012fa5 	.word	0x08012fa5
 8012f8c:	08012fad 	.word	0x08012fad
 8012f90:	08012fb5 	.word	0x08012fb5
 8012f94:	08012fbd 	.word	0x08012fbd
 8012f98:	08012fc5 	.word	0x08012fc5
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fa2:	e050      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012fa4:	2304      	movs	r3, #4
 8012fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012faa:	e04c      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012fac:	2308      	movs	r3, #8
 8012fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fb2:	e048      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012fb4:	2310      	movs	r3, #16
 8012fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fba:	e044      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012fbc:	2320      	movs	r3, #32
 8012fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fc2:	e040      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012fc4:	2340      	movs	r3, #64	@ 0x40
 8012fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fca:	e03c      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012fcc:	2380      	movs	r3, #128	@ 0x80
 8012fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fd2:	e038      	b.n	8013046 <UART_SetConfig+0x5a6>
 8012fd4:	697b      	ldr	r3, [r7, #20]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	4a5b      	ldr	r2, [pc, #364]	@ (8013148 <UART_SetConfig+0x6a8>)
 8012fda:	4293      	cmp	r3, r2
 8012fdc:	d130      	bne.n	8013040 <UART_SetConfig+0x5a0>
 8012fde:	4b57      	ldr	r3, [pc, #348]	@ (801313c <UART_SetConfig+0x69c>)
 8012fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012fe2:	f003 0307 	and.w	r3, r3, #7
 8012fe6:	2b05      	cmp	r3, #5
 8012fe8:	d826      	bhi.n	8013038 <UART_SetConfig+0x598>
 8012fea:	a201      	add	r2, pc, #4	@ (adr r2, 8012ff0 <UART_SetConfig+0x550>)
 8012fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ff0:	08013009 	.word	0x08013009
 8012ff4:	08013011 	.word	0x08013011
 8012ff8:	08013019 	.word	0x08013019
 8012ffc:	08013021 	.word	0x08013021
 8013000:	08013029 	.word	0x08013029
 8013004:	08013031 	.word	0x08013031
 8013008:	2302      	movs	r3, #2
 801300a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801300e:	e01a      	b.n	8013046 <UART_SetConfig+0x5a6>
 8013010:	2304      	movs	r3, #4
 8013012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013016:	e016      	b.n	8013046 <UART_SetConfig+0x5a6>
 8013018:	2308      	movs	r3, #8
 801301a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801301e:	e012      	b.n	8013046 <UART_SetConfig+0x5a6>
 8013020:	2310      	movs	r3, #16
 8013022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013026:	e00e      	b.n	8013046 <UART_SetConfig+0x5a6>
 8013028:	2320      	movs	r3, #32
 801302a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801302e:	e00a      	b.n	8013046 <UART_SetConfig+0x5a6>
 8013030:	2340      	movs	r3, #64	@ 0x40
 8013032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013036:	e006      	b.n	8013046 <UART_SetConfig+0x5a6>
 8013038:	2380      	movs	r3, #128	@ 0x80
 801303a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801303e:	e002      	b.n	8013046 <UART_SetConfig+0x5a6>
 8013040:	2380      	movs	r3, #128	@ 0x80
 8013042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013046:	697b      	ldr	r3, [r7, #20]
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	4a3f      	ldr	r2, [pc, #252]	@ (8013148 <UART_SetConfig+0x6a8>)
 801304c:	4293      	cmp	r3, r2
 801304e:	f040 80f8 	bne.w	8013242 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013052:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013056:	2b20      	cmp	r3, #32
 8013058:	dc46      	bgt.n	80130e8 <UART_SetConfig+0x648>
 801305a:	2b02      	cmp	r3, #2
 801305c:	f2c0 8082 	blt.w	8013164 <UART_SetConfig+0x6c4>
 8013060:	3b02      	subs	r3, #2
 8013062:	2b1e      	cmp	r3, #30
 8013064:	d87e      	bhi.n	8013164 <UART_SetConfig+0x6c4>
 8013066:	a201      	add	r2, pc, #4	@ (adr r2, 801306c <UART_SetConfig+0x5cc>)
 8013068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801306c:	080130ef 	.word	0x080130ef
 8013070:	08013165 	.word	0x08013165
 8013074:	080130f7 	.word	0x080130f7
 8013078:	08013165 	.word	0x08013165
 801307c:	08013165 	.word	0x08013165
 8013080:	08013165 	.word	0x08013165
 8013084:	08013107 	.word	0x08013107
 8013088:	08013165 	.word	0x08013165
 801308c:	08013165 	.word	0x08013165
 8013090:	08013165 	.word	0x08013165
 8013094:	08013165 	.word	0x08013165
 8013098:	08013165 	.word	0x08013165
 801309c:	08013165 	.word	0x08013165
 80130a0:	08013165 	.word	0x08013165
 80130a4:	08013117 	.word	0x08013117
 80130a8:	08013165 	.word	0x08013165
 80130ac:	08013165 	.word	0x08013165
 80130b0:	08013165 	.word	0x08013165
 80130b4:	08013165 	.word	0x08013165
 80130b8:	08013165 	.word	0x08013165
 80130bc:	08013165 	.word	0x08013165
 80130c0:	08013165 	.word	0x08013165
 80130c4:	08013165 	.word	0x08013165
 80130c8:	08013165 	.word	0x08013165
 80130cc:	08013165 	.word	0x08013165
 80130d0:	08013165 	.word	0x08013165
 80130d4:	08013165 	.word	0x08013165
 80130d8:	08013165 	.word	0x08013165
 80130dc:	08013165 	.word	0x08013165
 80130e0:	08013165 	.word	0x08013165
 80130e4:	08013157 	.word	0x08013157
 80130e8:	2b40      	cmp	r3, #64	@ 0x40
 80130ea:	d037      	beq.n	801315c <UART_SetConfig+0x6bc>
 80130ec:	e03a      	b.n	8013164 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80130ee:	f7fc fa3f 	bl	800f570 <HAL_RCCEx_GetD3PCLK1Freq>
 80130f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80130f4:	e03c      	b.n	8013170 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80130f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80130fa:	4618      	mov	r0, r3
 80130fc:	f7fc fa4e 	bl	800f59c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013104:	e034      	b.n	8013170 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013106:	f107 0318 	add.w	r3, r7, #24
 801310a:	4618      	mov	r0, r3
 801310c:	f7fc fb9a 	bl	800f844 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013110:	69fb      	ldr	r3, [r7, #28]
 8013112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013114:	e02c      	b.n	8013170 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013116:	4b09      	ldr	r3, [pc, #36]	@ (801313c <UART_SetConfig+0x69c>)
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	f003 0320 	and.w	r3, r3, #32
 801311e:	2b00      	cmp	r3, #0
 8013120:	d016      	beq.n	8013150 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013122:	4b06      	ldr	r3, [pc, #24]	@ (801313c <UART_SetConfig+0x69c>)
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	08db      	lsrs	r3, r3, #3
 8013128:	f003 0303 	and.w	r3, r3, #3
 801312c:	4a07      	ldr	r2, [pc, #28]	@ (801314c <UART_SetConfig+0x6ac>)
 801312e:	fa22 f303 	lsr.w	r3, r2, r3
 8013132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013134:	e01c      	b.n	8013170 <UART_SetConfig+0x6d0>
 8013136:	bf00      	nop
 8013138:	40011400 	.word	0x40011400
 801313c:	58024400 	.word	0x58024400
 8013140:	40007800 	.word	0x40007800
 8013144:	40007c00 	.word	0x40007c00
 8013148:	58000c00 	.word	0x58000c00
 801314c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8013150:	4b9d      	ldr	r3, [pc, #628]	@ (80133c8 <UART_SetConfig+0x928>)
 8013152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013154:	e00c      	b.n	8013170 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013156:	4b9d      	ldr	r3, [pc, #628]	@ (80133cc <UART_SetConfig+0x92c>)
 8013158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801315a:	e009      	b.n	8013170 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801315c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013162:	e005      	b.n	8013170 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8013164:	2300      	movs	r3, #0
 8013166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013168:	2301      	movs	r3, #1
 801316a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801316e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013172:	2b00      	cmp	r3, #0
 8013174:	f000 81de 	beq.w	8013534 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013178:	697b      	ldr	r3, [r7, #20]
 801317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801317c:	4a94      	ldr	r2, [pc, #592]	@ (80133d0 <UART_SetConfig+0x930>)
 801317e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013182:	461a      	mov	r2, r3
 8013184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013186:	fbb3 f3f2 	udiv	r3, r3, r2
 801318a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801318c:	697b      	ldr	r3, [r7, #20]
 801318e:	685a      	ldr	r2, [r3, #4]
 8013190:	4613      	mov	r3, r2
 8013192:	005b      	lsls	r3, r3, #1
 8013194:	4413      	add	r3, r2
 8013196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013198:	429a      	cmp	r2, r3
 801319a:	d305      	bcc.n	80131a8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801319c:	697b      	ldr	r3, [r7, #20]
 801319e:	685b      	ldr	r3, [r3, #4]
 80131a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80131a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80131a4:	429a      	cmp	r2, r3
 80131a6:	d903      	bls.n	80131b0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80131a8:	2301      	movs	r3, #1
 80131aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80131ae:	e1c1      	b.n	8013534 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80131b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80131b2:	2200      	movs	r2, #0
 80131b4:	60bb      	str	r3, [r7, #8]
 80131b6:	60fa      	str	r2, [r7, #12]
 80131b8:	697b      	ldr	r3, [r7, #20]
 80131ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131bc:	4a84      	ldr	r2, [pc, #528]	@ (80133d0 <UART_SetConfig+0x930>)
 80131be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	2200      	movs	r2, #0
 80131c6:	603b      	str	r3, [r7, #0]
 80131c8:	607a      	str	r2, [r7, #4]
 80131ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80131ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80131d2:	f7ed f8dd 	bl	8000390 <__aeabi_uldivmod>
 80131d6:	4602      	mov	r2, r0
 80131d8:	460b      	mov	r3, r1
 80131da:	4610      	mov	r0, r2
 80131dc:	4619      	mov	r1, r3
 80131de:	f04f 0200 	mov.w	r2, #0
 80131e2:	f04f 0300 	mov.w	r3, #0
 80131e6:	020b      	lsls	r3, r1, #8
 80131e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80131ec:	0202      	lsls	r2, r0, #8
 80131ee:	6979      	ldr	r1, [r7, #20]
 80131f0:	6849      	ldr	r1, [r1, #4]
 80131f2:	0849      	lsrs	r1, r1, #1
 80131f4:	2000      	movs	r0, #0
 80131f6:	460c      	mov	r4, r1
 80131f8:	4605      	mov	r5, r0
 80131fa:	eb12 0804 	adds.w	r8, r2, r4
 80131fe:	eb43 0905 	adc.w	r9, r3, r5
 8013202:	697b      	ldr	r3, [r7, #20]
 8013204:	685b      	ldr	r3, [r3, #4]
 8013206:	2200      	movs	r2, #0
 8013208:	469a      	mov	sl, r3
 801320a:	4693      	mov	fp, r2
 801320c:	4652      	mov	r2, sl
 801320e:	465b      	mov	r3, fp
 8013210:	4640      	mov	r0, r8
 8013212:	4649      	mov	r1, r9
 8013214:	f7ed f8bc 	bl	8000390 <__aeabi_uldivmod>
 8013218:	4602      	mov	r2, r0
 801321a:	460b      	mov	r3, r1
 801321c:	4613      	mov	r3, r2
 801321e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013226:	d308      	bcc.n	801323a <UART_SetConfig+0x79a>
 8013228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801322a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801322e:	d204      	bcs.n	801323a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8013230:	697b      	ldr	r3, [r7, #20]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013236:	60da      	str	r2, [r3, #12]
 8013238:	e17c      	b.n	8013534 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801323a:	2301      	movs	r3, #1
 801323c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013240:	e178      	b.n	8013534 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013242:	697b      	ldr	r3, [r7, #20]
 8013244:	69db      	ldr	r3, [r3, #28]
 8013246:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801324a:	f040 80c5 	bne.w	80133d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801324e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013252:	2b20      	cmp	r3, #32
 8013254:	dc48      	bgt.n	80132e8 <UART_SetConfig+0x848>
 8013256:	2b00      	cmp	r3, #0
 8013258:	db7b      	blt.n	8013352 <UART_SetConfig+0x8b2>
 801325a:	2b20      	cmp	r3, #32
 801325c:	d879      	bhi.n	8013352 <UART_SetConfig+0x8b2>
 801325e:	a201      	add	r2, pc, #4	@ (adr r2, 8013264 <UART_SetConfig+0x7c4>)
 8013260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013264:	080132ef 	.word	0x080132ef
 8013268:	080132f7 	.word	0x080132f7
 801326c:	08013353 	.word	0x08013353
 8013270:	08013353 	.word	0x08013353
 8013274:	080132ff 	.word	0x080132ff
 8013278:	08013353 	.word	0x08013353
 801327c:	08013353 	.word	0x08013353
 8013280:	08013353 	.word	0x08013353
 8013284:	0801330f 	.word	0x0801330f
 8013288:	08013353 	.word	0x08013353
 801328c:	08013353 	.word	0x08013353
 8013290:	08013353 	.word	0x08013353
 8013294:	08013353 	.word	0x08013353
 8013298:	08013353 	.word	0x08013353
 801329c:	08013353 	.word	0x08013353
 80132a0:	08013353 	.word	0x08013353
 80132a4:	0801331f 	.word	0x0801331f
 80132a8:	08013353 	.word	0x08013353
 80132ac:	08013353 	.word	0x08013353
 80132b0:	08013353 	.word	0x08013353
 80132b4:	08013353 	.word	0x08013353
 80132b8:	08013353 	.word	0x08013353
 80132bc:	08013353 	.word	0x08013353
 80132c0:	08013353 	.word	0x08013353
 80132c4:	08013353 	.word	0x08013353
 80132c8:	08013353 	.word	0x08013353
 80132cc:	08013353 	.word	0x08013353
 80132d0:	08013353 	.word	0x08013353
 80132d4:	08013353 	.word	0x08013353
 80132d8:	08013353 	.word	0x08013353
 80132dc:	08013353 	.word	0x08013353
 80132e0:	08013353 	.word	0x08013353
 80132e4:	08013345 	.word	0x08013345
 80132e8:	2b40      	cmp	r3, #64	@ 0x40
 80132ea:	d02e      	beq.n	801334a <UART_SetConfig+0x8aa>
 80132ec:	e031      	b.n	8013352 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80132ee:	f7fa ff09 	bl	800e104 <HAL_RCC_GetPCLK1Freq>
 80132f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80132f4:	e033      	b.n	801335e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80132f6:	f7fa ff1b 	bl	800e130 <HAL_RCC_GetPCLK2Freq>
 80132fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80132fc:	e02f      	b.n	801335e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80132fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013302:	4618      	mov	r0, r3
 8013304:	f7fc f94a 	bl	800f59c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801330a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801330c:	e027      	b.n	801335e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801330e:	f107 0318 	add.w	r3, r7, #24
 8013312:	4618      	mov	r0, r3
 8013314:	f7fc fa96 	bl	800f844 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013318:	69fb      	ldr	r3, [r7, #28]
 801331a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801331c:	e01f      	b.n	801335e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801331e:	4b2d      	ldr	r3, [pc, #180]	@ (80133d4 <UART_SetConfig+0x934>)
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	f003 0320 	and.w	r3, r3, #32
 8013326:	2b00      	cmp	r3, #0
 8013328:	d009      	beq.n	801333e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801332a:	4b2a      	ldr	r3, [pc, #168]	@ (80133d4 <UART_SetConfig+0x934>)
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	08db      	lsrs	r3, r3, #3
 8013330:	f003 0303 	and.w	r3, r3, #3
 8013334:	4a24      	ldr	r2, [pc, #144]	@ (80133c8 <UART_SetConfig+0x928>)
 8013336:	fa22 f303 	lsr.w	r3, r2, r3
 801333a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801333c:	e00f      	b.n	801335e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801333e:	4b22      	ldr	r3, [pc, #136]	@ (80133c8 <UART_SetConfig+0x928>)
 8013340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013342:	e00c      	b.n	801335e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013344:	4b21      	ldr	r3, [pc, #132]	@ (80133cc <UART_SetConfig+0x92c>)
 8013346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013348:	e009      	b.n	801335e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801334a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801334e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013350:	e005      	b.n	801335e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8013352:	2300      	movs	r3, #0
 8013354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013356:	2301      	movs	r3, #1
 8013358:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801335c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801335e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013360:	2b00      	cmp	r3, #0
 8013362:	f000 80e7 	beq.w	8013534 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013366:	697b      	ldr	r3, [r7, #20]
 8013368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801336a:	4a19      	ldr	r2, [pc, #100]	@ (80133d0 <UART_SetConfig+0x930>)
 801336c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013370:	461a      	mov	r2, r3
 8013372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013374:	fbb3 f3f2 	udiv	r3, r3, r2
 8013378:	005a      	lsls	r2, r3, #1
 801337a:	697b      	ldr	r3, [r7, #20]
 801337c:	685b      	ldr	r3, [r3, #4]
 801337e:	085b      	lsrs	r3, r3, #1
 8013380:	441a      	add	r2, r3
 8013382:	697b      	ldr	r3, [r7, #20]
 8013384:	685b      	ldr	r3, [r3, #4]
 8013386:	fbb2 f3f3 	udiv	r3, r2, r3
 801338a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801338c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801338e:	2b0f      	cmp	r3, #15
 8013390:	d916      	bls.n	80133c0 <UART_SetConfig+0x920>
 8013392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013398:	d212      	bcs.n	80133c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801339a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801339c:	b29b      	uxth	r3, r3
 801339e:	f023 030f 	bic.w	r3, r3, #15
 80133a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80133a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133a6:	085b      	lsrs	r3, r3, #1
 80133a8:	b29b      	uxth	r3, r3
 80133aa:	f003 0307 	and.w	r3, r3, #7
 80133ae:	b29a      	uxth	r2, r3
 80133b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80133b2:	4313      	orrs	r3, r2
 80133b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80133b6:	697b      	ldr	r3, [r7, #20]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80133bc:	60da      	str	r2, [r3, #12]
 80133be:	e0b9      	b.n	8013534 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80133c0:	2301      	movs	r3, #1
 80133c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80133c6:	e0b5      	b.n	8013534 <UART_SetConfig+0xa94>
 80133c8:	03d09000 	.word	0x03d09000
 80133cc:	003d0900 	.word	0x003d0900
 80133d0:	0801b638 	.word	0x0801b638
 80133d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80133d8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80133dc:	2b20      	cmp	r3, #32
 80133de:	dc49      	bgt.n	8013474 <UART_SetConfig+0x9d4>
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	db7c      	blt.n	80134de <UART_SetConfig+0xa3e>
 80133e4:	2b20      	cmp	r3, #32
 80133e6:	d87a      	bhi.n	80134de <UART_SetConfig+0xa3e>
 80133e8:	a201      	add	r2, pc, #4	@ (adr r2, 80133f0 <UART_SetConfig+0x950>)
 80133ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133ee:	bf00      	nop
 80133f0:	0801347b 	.word	0x0801347b
 80133f4:	08013483 	.word	0x08013483
 80133f8:	080134df 	.word	0x080134df
 80133fc:	080134df 	.word	0x080134df
 8013400:	0801348b 	.word	0x0801348b
 8013404:	080134df 	.word	0x080134df
 8013408:	080134df 	.word	0x080134df
 801340c:	080134df 	.word	0x080134df
 8013410:	0801349b 	.word	0x0801349b
 8013414:	080134df 	.word	0x080134df
 8013418:	080134df 	.word	0x080134df
 801341c:	080134df 	.word	0x080134df
 8013420:	080134df 	.word	0x080134df
 8013424:	080134df 	.word	0x080134df
 8013428:	080134df 	.word	0x080134df
 801342c:	080134df 	.word	0x080134df
 8013430:	080134ab 	.word	0x080134ab
 8013434:	080134df 	.word	0x080134df
 8013438:	080134df 	.word	0x080134df
 801343c:	080134df 	.word	0x080134df
 8013440:	080134df 	.word	0x080134df
 8013444:	080134df 	.word	0x080134df
 8013448:	080134df 	.word	0x080134df
 801344c:	080134df 	.word	0x080134df
 8013450:	080134df 	.word	0x080134df
 8013454:	080134df 	.word	0x080134df
 8013458:	080134df 	.word	0x080134df
 801345c:	080134df 	.word	0x080134df
 8013460:	080134df 	.word	0x080134df
 8013464:	080134df 	.word	0x080134df
 8013468:	080134df 	.word	0x080134df
 801346c:	080134df 	.word	0x080134df
 8013470:	080134d1 	.word	0x080134d1
 8013474:	2b40      	cmp	r3, #64	@ 0x40
 8013476:	d02e      	beq.n	80134d6 <UART_SetConfig+0xa36>
 8013478:	e031      	b.n	80134de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801347a:	f7fa fe43 	bl	800e104 <HAL_RCC_GetPCLK1Freq>
 801347e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013480:	e033      	b.n	80134ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013482:	f7fa fe55 	bl	800e130 <HAL_RCC_GetPCLK2Freq>
 8013486:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013488:	e02f      	b.n	80134ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801348a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801348e:	4618      	mov	r0, r3
 8013490:	f7fc f884 	bl	800f59c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013498:	e027      	b.n	80134ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801349a:	f107 0318 	add.w	r3, r7, #24
 801349e:	4618      	mov	r0, r3
 80134a0:	f7fc f9d0 	bl	800f844 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80134a4:	69fb      	ldr	r3, [r7, #28]
 80134a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80134a8:	e01f      	b.n	80134ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80134aa:	4b2d      	ldr	r3, [pc, #180]	@ (8013560 <UART_SetConfig+0xac0>)
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	f003 0320 	and.w	r3, r3, #32
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d009      	beq.n	80134ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80134b6:	4b2a      	ldr	r3, [pc, #168]	@ (8013560 <UART_SetConfig+0xac0>)
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	08db      	lsrs	r3, r3, #3
 80134bc:	f003 0303 	and.w	r3, r3, #3
 80134c0:	4a28      	ldr	r2, [pc, #160]	@ (8013564 <UART_SetConfig+0xac4>)
 80134c2:	fa22 f303 	lsr.w	r3, r2, r3
 80134c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80134c8:	e00f      	b.n	80134ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80134ca:	4b26      	ldr	r3, [pc, #152]	@ (8013564 <UART_SetConfig+0xac4>)
 80134cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80134ce:	e00c      	b.n	80134ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80134d0:	4b25      	ldr	r3, [pc, #148]	@ (8013568 <UART_SetConfig+0xac8>)
 80134d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80134d4:	e009      	b.n	80134ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80134d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80134da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80134dc:	e005      	b.n	80134ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80134de:	2300      	movs	r3, #0
 80134e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80134e2:	2301      	movs	r3, #1
 80134e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80134e8:	bf00      	nop
    }

    if (pclk != 0U)
 80134ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d021      	beq.n	8013534 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80134f0:	697b      	ldr	r3, [r7, #20]
 80134f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134f4:	4a1d      	ldr	r2, [pc, #116]	@ (801356c <UART_SetConfig+0xacc>)
 80134f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80134fa:	461a      	mov	r2, r3
 80134fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80134fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8013502:	697b      	ldr	r3, [r7, #20]
 8013504:	685b      	ldr	r3, [r3, #4]
 8013506:	085b      	lsrs	r3, r3, #1
 8013508:	441a      	add	r2, r3
 801350a:	697b      	ldr	r3, [r7, #20]
 801350c:	685b      	ldr	r3, [r3, #4]
 801350e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013512:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013516:	2b0f      	cmp	r3, #15
 8013518:	d909      	bls.n	801352e <UART_SetConfig+0xa8e>
 801351a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801351c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013520:	d205      	bcs.n	801352e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013524:	b29a      	uxth	r2, r3
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	60da      	str	r2, [r3, #12]
 801352c:	e002      	b.n	8013534 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801352e:	2301      	movs	r3, #1
 8013530:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013534:	697b      	ldr	r3, [r7, #20]
 8013536:	2201      	movs	r2, #1
 8013538:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801353c:	697b      	ldr	r3, [r7, #20]
 801353e:	2201      	movs	r2, #1
 8013540:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013544:	697b      	ldr	r3, [r7, #20]
 8013546:	2200      	movs	r2, #0
 8013548:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801354a:	697b      	ldr	r3, [r7, #20]
 801354c:	2200      	movs	r2, #0
 801354e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8013550:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8013554:	4618      	mov	r0, r3
 8013556:	3748      	adds	r7, #72	@ 0x48
 8013558:	46bd      	mov	sp, r7
 801355a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801355e:	bf00      	nop
 8013560:	58024400 	.word	0x58024400
 8013564:	03d09000 	.word	0x03d09000
 8013568:	003d0900 	.word	0x003d0900
 801356c:	0801b638 	.word	0x0801b638

08013570 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013570:	b480      	push	{r7}
 8013572:	b083      	sub	sp, #12
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801357c:	f003 0308 	and.w	r3, r3, #8
 8013580:	2b00      	cmp	r3, #0
 8013582:	d00a      	beq.n	801359a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	685b      	ldr	r3, [r3, #4]
 801358a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	430a      	orrs	r2, r1
 8013598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801359e:	f003 0301 	and.w	r3, r3, #1
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d00a      	beq.n	80135bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	685b      	ldr	r3, [r3, #4]
 80135ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	430a      	orrs	r2, r1
 80135ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135c0:	f003 0302 	and.w	r3, r3, #2
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d00a      	beq.n	80135de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	685b      	ldr	r3, [r3, #4]
 80135ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	430a      	orrs	r2, r1
 80135dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135e2:	f003 0304 	and.w	r3, r3, #4
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d00a      	beq.n	8013600 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	685b      	ldr	r3, [r3, #4]
 80135f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	430a      	orrs	r2, r1
 80135fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013604:	f003 0310 	and.w	r3, r3, #16
 8013608:	2b00      	cmp	r3, #0
 801360a:	d00a      	beq.n	8013622 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	689b      	ldr	r3, [r3, #8]
 8013612:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	430a      	orrs	r2, r1
 8013620:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013626:	f003 0320 	and.w	r3, r3, #32
 801362a:	2b00      	cmp	r3, #0
 801362c:	d00a      	beq.n	8013644 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	689b      	ldr	r3, [r3, #8]
 8013634:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	430a      	orrs	r2, r1
 8013642:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801364c:	2b00      	cmp	r3, #0
 801364e:	d01a      	beq.n	8013686 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	685b      	ldr	r3, [r3, #4]
 8013656:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	430a      	orrs	r2, r1
 8013664:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801366a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801366e:	d10a      	bne.n	8013686 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	685b      	ldr	r3, [r3, #4]
 8013676:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	430a      	orrs	r2, r1
 8013684:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801368a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801368e:	2b00      	cmp	r3, #0
 8013690:	d00a      	beq.n	80136a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	685b      	ldr	r3, [r3, #4]
 8013698:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	430a      	orrs	r2, r1
 80136a6:	605a      	str	r2, [r3, #4]
  }
}
 80136a8:	bf00      	nop
 80136aa:	370c      	adds	r7, #12
 80136ac:	46bd      	mov	sp, r7
 80136ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b2:	4770      	bx	lr

080136b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b098      	sub	sp, #96	@ 0x60
 80136b8:	af02      	add	r7, sp, #8
 80136ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	2200      	movs	r2, #0
 80136c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80136c4:	f7ef fee6 	bl	8003494 <HAL_GetTick>
 80136c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	f003 0308 	and.w	r3, r3, #8
 80136d4:	2b08      	cmp	r3, #8
 80136d6:	d12f      	bne.n	8013738 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80136d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80136dc:	9300      	str	r3, [sp, #0]
 80136de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136e0:	2200      	movs	r2, #0
 80136e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80136e6:	6878      	ldr	r0, [r7, #4]
 80136e8:	f000 f88e 	bl	8013808 <UART_WaitOnFlagUntilTimeout>
 80136ec:	4603      	mov	r3, r0
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d022      	beq.n	8013738 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136fa:	e853 3f00 	ldrex	r3, [r3]
 80136fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013702:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013706:	653b      	str	r3, [r7, #80]	@ 0x50
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	461a      	mov	r2, r3
 801370e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013710:	647b      	str	r3, [r7, #68]	@ 0x44
 8013712:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013714:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013716:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013718:	e841 2300 	strex	r3, r2, [r1]
 801371c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801371e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013720:	2b00      	cmp	r3, #0
 8013722:	d1e6      	bne.n	80136f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	2220      	movs	r2, #32
 8013728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	2200      	movs	r2, #0
 8013730:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013734:	2303      	movs	r3, #3
 8013736:	e063      	b.n	8013800 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	f003 0304 	and.w	r3, r3, #4
 8013742:	2b04      	cmp	r3, #4
 8013744:	d149      	bne.n	80137da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013746:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801374a:	9300      	str	r3, [sp, #0]
 801374c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801374e:	2200      	movs	r2, #0
 8013750:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8013754:	6878      	ldr	r0, [r7, #4]
 8013756:	f000 f857 	bl	8013808 <UART_WaitOnFlagUntilTimeout>
 801375a:	4603      	mov	r3, r0
 801375c:	2b00      	cmp	r3, #0
 801375e:	d03c      	beq.n	80137da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013768:	e853 3f00 	ldrex	r3, [r3]
 801376c:	623b      	str	r3, [r7, #32]
   return(result);
 801376e:	6a3b      	ldr	r3, [r7, #32]
 8013770:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013774:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	461a      	mov	r2, r3
 801377c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801377e:	633b      	str	r3, [r7, #48]	@ 0x30
 8013780:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013782:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013786:	e841 2300 	strex	r3, r2, [r1]
 801378a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801378c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801378e:	2b00      	cmp	r3, #0
 8013790:	d1e6      	bne.n	8013760 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	3308      	adds	r3, #8
 8013798:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801379a:	693b      	ldr	r3, [r7, #16]
 801379c:	e853 3f00 	ldrex	r3, [r3]
 80137a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	f023 0301 	bic.w	r3, r3, #1
 80137a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	3308      	adds	r3, #8
 80137b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80137b2:	61fa      	str	r2, [r7, #28]
 80137b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137b6:	69b9      	ldr	r1, [r7, #24]
 80137b8:	69fa      	ldr	r2, [r7, #28]
 80137ba:	e841 2300 	strex	r3, r2, [r1]
 80137be:	617b      	str	r3, [r7, #20]
   return(result);
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d1e5      	bne.n	8013792 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	2220      	movs	r2, #32
 80137ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	2200      	movs	r2, #0
 80137d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80137d6:	2303      	movs	r3, #3
 80137d8:	e012      	b.n	8013800 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	2220      	movs	r2, #32
 80137de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	2220      	movs	r2, #32
 80137e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	2200      	movs	r2, #0
 80137ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	2200      	movs	r2, #0
 80137f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	2200      	movs	r2, #0
 80137fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80137fe:	2300      	movs	r3, #0
}
 8013800:	4618      	mov	r0, r3
 8013802:	3758      	adds	r7, #88	@ 0x58
 8013804:	46bd      	mov	sp, r7
 8013806:	bd80      	pop	{r7, pc}

08013808 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b084      	sub	sp, #16
 801380c:	af00      	add	r7, sp, #0
 801380e:	60f8      	str	r0, [r7, #12]
 8013810:	60b9      	str	r1, [r7, #8]
 8013812:	603b      	str	r3, [r7, #0]
 8013814:	4613      	mov	r3, r2
 8013816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013818:	e04f      	b.n	80138ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801381a:	69bb      	ldr	r3, [r7, #24]
 801381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013820:	d04b      	beq.n	80138ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013822:	f7ef fe37 	bl	8003494 <HAL_GetTick>
 8013826:	4602      	mov	r2, r0
 8013828:	683b      	ldr	r3, [r7, #0]
 801382a:	1ad3      	subs	r3, r2, r3
 801382c:	69ba      	ldr	r2, [r7, #24]
 801382e:	429a      	cmp	r2, r3
 8013830:	d302      	bcc.n	8013838 <UART_WaitOnFlagUntilTimeout+0x30>
 8013832:	69bb      	ldr	r3, [r7, #24]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d101      	bne.n	801383c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013838:	2303      	movs	r3, #3
 801383a:	e04e      	b.n	80138da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	f003 0304 	and.w	r3, r3, #4
 8013846:	2b00      	cmp	r3, #0
 8013848:	d037      	beq.n	80138ba <UART_WaitOnFlagUntilTimeout+0xb2>
 801384a:	68bb      	ldr	r3, [r7, #8]
 801384c:	2b80      	cmp	r3, #128	@ 0x80
 801384e:	d034      	beq.n	80138ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8013850:	68bb      	ldr	r3, [r7, #8]
 8013852:	2b40      	cmp	r3, #64	@ 0x40
 8013854:	d031      	beq.n	80138ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	69db      	ldr	r3, [r3, #28]
 801385c:	f003 0308 	and.w	r3, r3, #8
 8013860:	2b08      	cmp	r3, #8
 8013862:	d110      	bne.n	8013886 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	2208      	movs	r2, #8
 801386a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801386c:	68f8      	ldr	r0, [r7, #12]
 801386e:	f000 f921 	bl	8013ab4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	2208      	movs	r2, #8
 8013876:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	2200      	movs	r2, #0
 801387e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8013882:	2301      	movs	r3, #1
 8013884:	e029      	b.n	80138da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	69db      	ldr	r3, [r3, #28]
 801388c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013894:	d111      	bne.n	80138ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801389e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80138a0:	68f8      	ldr	r0, [r7, #12]
 80138a2:	f000 f907 	bl	8013ab4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	2220      	movs	r2, #32
 80138aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	2200      	movs	r2, #0
 80138b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80138b6:	2303      	movs	r3, #3
 80138b8:	e00f      	b.n	80138da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	69da      	ldr	r2, [r3, #28]
 80138c0:	68bb      	ldr	r3, [r7, #8]
 80138c2:	4013      	ands	r3, r2
 80138c4:	68ba      	ldr	r2, [r7, #8]
 80138c6:	429a      	cmp	r2, r3
 80138c8:	bf0c      	ite	eq
 80138ca:	2301      	moveq	r3, #1
 80138cc:	2300      	movne	r3, #0
 80138ce:	b2db      	uxtb	r3, r3
 80138d0:	461a      	mov	r2, r3
 80138d2:	79fb      	ldrb	r3, [r7, #7]
 80138d4:	429a      	cmp	r2, r3
 80138d6:	d0a0      	beq.n	801381a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80138d8:	2300      	movs	r3, #0
}
 80138da:	4618      	mov	r0, r3
 80138dc:	3710      	adds	r7, #16
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}
	...

080138e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b096      	sub	sp, #88	@ 0x58
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	60f8      	str	r0, [r7, #12]
 80138ec:	60b9      	str	r1, [r7, #8]
 80138ee:	4613      	mov	r3, r2
 80138f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	68ba      	ldr	r2, [r7, #8]
 80138f6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	88fa      	ldrh	r2, [r7, #6]
 80138fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	2200      	movs	r2, #0
 8013904:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	2222      	movs	r2, #34	@ 0x22
 801390c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013916:	2b00      	cmp	r3, #0
 8013918:	d02d      	beq.n	8013976 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013920:	4a40      	ldr	r2, [pc, #256]	@ (8013a24 <UART_Start_Receive_DMA+0x140>)
 8013922:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801392a:	4a3f      	ldr	r2, [pc, #252]	@ (8013a28 <UART_Start_Receive_DMA+0x144>)
 801392c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013934:	4a3d      	ldr	r2, [pc, #244]	@ (8013a2c <UART_Start_Receive_DMA+0x148>)
 8013936:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801393e:	2200      	movs	r2, #0
 8013940:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	3324      	adds	r3, #36	@ 0x24
 801394e:	4619      	mov	r1, r3
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013954:	461a      	mov	r2, r3
 8013956:	88fb      	ldrh	r3, [r7, #6]
 8013958:	f7f0 fda8 	bl	80044ac <HAL_DMA_Start_IT>
 801395c:	4603      	mov	r3, r0
 801395e:	2b00      	cmp	r3, #0
 8013960:	d009      	beq.n	8013976 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	2210      	movs	r2, #16
 8013966:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	2220      	movs	r2, #32
 801396e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8013972:	2301      	movs	r3, #1
 8013974:	e051      	b.n	8013a1a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	691b      	ldr	r3, [r3, #16]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d018      	beq.n	80139b0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013986:	e853 3f00 	ldrex	r3, [r3]
 801398a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801398c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801398e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013992:	657b      	str	r3, [r7, #84]	@ 0x54
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	461a      	mov	r2, r3
 801399a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801399c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801399e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80139a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80139a4:	e841 2300 	strex	r3, r2, [r1]
 80139a8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80139aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d1e6      	bne.n	801397e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	3308      	adds	r3, #8
 80139b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139ba:	e853 3f00 	ldrex	r3, [r3]
 80139be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80139c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139c2:	f043 0301 	orr.w	r3, r3, #1
 80139c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	3308      	adds	r3, #8
 80139ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80139d0:	637a      	str	r2, [r7, #52]	@ 0x34
 80139d2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80139d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80139d8:	e841 2300 	strex	r3, r2, [r1]
 80139dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80139de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d1e5      	bne.n	80139b0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	3308      	adds	r3, #8
 80139ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139ec:	697b      	ldr	r3, [r7, #20]
 80139ee:	e853 3f00 	ldrex	r3, [r3]
 80139f2:	613b      	str	r3, [r7, #16]
   return(result);
 80139f4:	693b      	ldr	r3, [r7, #16]
 80139f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80139fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	3308      	adds	r3, #8
 8013a02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013a04:	623a      	str	r2, [r7, #32]
 8013a06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a08:	69f9      	ldr	r1, [r7, #28]
 8013a0a:	6a3a      	ldr	r2, [r7, #32]
 8013a0c:	e841 2300 	strex	r3, r2, [r1]
 8013a10:	61bb      	str	r3, [r7, #24]
   return(result);
 8013a12:	69bb      	ldr	r3, [r7, #24]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d1e5      	bne.n	80139e4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8013a18:	2300      	movs	r3, #0
}
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	3758      	adds	r7, #88	@ 0x58
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	bd80      	pop	{r7, pc}
 8013a22:	bf00      	nop
 8013a24:	08013b81 	.word	0x08013b81
 8013a28:	08013ca9 	.word	0x08013ca9
 8013a2c:	08013ce7 	.word	0x08013ce7

08013a30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8013a30:	b480      	push	{r7}
 8013a32:	b08f      	sub	sp, #60	@ 0x3c
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a3e:	6a3b      	ldr	r3, [r7, #32]
 8013a40:	e853 3f00 	ldrex	r3, [r3]
 8013a44:	61fb      	str	r3, [r7, #28]
   return(result);
 8013a46:	69fb      	ldr	r3, [r7, #28]
 8013a48:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8013a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	461a      	mov	r2, r3
 8013a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013a58:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013a5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013a5e:	e841 2300 	strex	r3, r2, [r1]
 8013a62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d1e6      	bne.n	8013a38 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	3308      	adds	r3, #8
 8013a70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	e853 3f00 	ldrex	r3, [r3]
 8013a78:	60bb      	str	r3, [r7, #8]
   return(result);
 8013a7a:	68bb      	ldr	r3, [r7, #8]
 8013a7c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8013a80:	633b      	str	r3, [r7, #48]	@ 0x30
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	3308      	adds	r3, #8
 8013a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013a8a:	61ba      	str	r2, [r7, #24]
 8013a8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a8e:	6979      	ldr	r1, [r7, #20]
 8013a90:	69ba      	ldr	r2, [r7, #24]
 8013a92:	e841 2300 	strex	r3, r2, [r1]
 8013a96:	613b      	str	r3, [r7, #16]
   return(result);
 8013a98:	693b      	ldr	r3, [r7, #16]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d1e5      	bne.n	8013a6a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	2220      	movs	r2, #32
 8013aa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8013aa6:	bf00      	nop
 8013aa8:	373c      	adds	r7, #60	@ 0x3c
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab0:	4770      	bx	lr
	...

08013ab4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013ab4:	b480      	push	{r7}
 8013ab6:	b095      	sub	sp, #84	@ 0x54
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ac4:	e853 3f00 	ldrex	r3, [r3]
 8013ac8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8013aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013acc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	461a      	mov	r2, r3
 8013ad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013ada:	643b      	str	r3, [r7, #64]	@ 0x40
 8013adc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ade:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013ae0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013ae2:	e841 2300 	strex	r3, r2, [r1]
 8013ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d1e6      	bne.n	8013abc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	3308      	adds	r3, #8
 8013af4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013af6:	6a3b      	ldr	r3, [r7, #32]
 8013af8:	e853 3f00 	ldrex	r3, [r3]
 8013afc:	61fb      	str	r3, [r7, #28]
   return(result);
 8013afe:	69fa      	ldr	r2, [r7, #28]
 8013b00:	4b1e      	ldr	r3, [pc, #120]	@ (8013b7c <UART_EndRxTransfer+0xc8>)
 8013b02:	4013      	ands	r3, r2
 8013b04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	3308      	adds	r3, #8
 8013b0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013b0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013b10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013b14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013b16:	e841 2300 	strex	r3, r2, [r1]
 8013b1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d1e5      	bne.n	8013aee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b26:	2b01      	cmp	r3, #1
 8013b28:	d118      	bne.n	8013b5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	e853 3f00 	ldrex	r3, [r3]
 8013b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8013b38:	68bb      	ldr	r3, [r7, #8]
 8013b3a:	f023 0310 	bic.w	r3, r3, #16
 8013b3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	461a      	mov	r2, r3
 8013b46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b48:	61bb      	str	r3, [r7, #24]
 8013b4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b4c:	6979      	ldr	r1, [r7, #20]
 8013b4e:	69ba      	ldr	r2, [r7, #24]
 8013b50:	e841 2300 	strex	r3, r2, [r1]
 8013b54:	613b      	str	r3, [r7, #16]
   return(result);
 8013b56:	693b      	ldr	r3, [r7, #16]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d1e6      	bne.n	8013b2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2220      	movs	r2, #32
 8013b60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	2200      	movs	r2, #0
 8013b68:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8013b70:	bf00      	nop
 8013b72:	3754      	adds	r7, #84	@ 0x54
 8013b74:	46bd      	mov	sp, r7
 8013b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7a:	4770      	bx	lr
 8013b7c:	effffffe 	.word	0xeffffffe

08013b80 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b09c      	sub	sp, #112	@ 0x70
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b8c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	69db      	ldr	r3, [r3, #28]
 8013b92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013b96:	d071      	beq.n	8013c7c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8013b98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013ba0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013ba8:	e853 3f00 	ldrex	r3, [r3]
 8013bac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8013bae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013bb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013bb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013bb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	461a      	mov	r2, r3
 8013bbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013bbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013bc0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013bc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013bc6:	e841 2300 	strex	r3, r2, [r1]
 8013bca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8013bcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d1e6      	bne.n	8013ba0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013bd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	3308      	adds	r3, #8
 8013bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bdc:	e853 3f00 	ldrex	r3, [r3]
 8013be0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013be4:	f023 0301 	bic.w	r3, r3, #1
 8013be8:	667b      	str	r3, [r7, #100]	@ 0x64
 8013bea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	3308      	adds	r3, #8
 8013bf0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013bf2:	647a      	str	r2, [r7, #68]	@ 0x44
 8013bf4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bf6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013bf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013bfa:	e841 2300 	strex	r3, r2, [r1]
 8013bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d1e5      	bne.n	8013bd2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013c06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	3308      	adds	r3, #8
 8013c0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c10:	e853 3f00 	ldrex	r3, [r3]
 8013c14:	623b      	str	r3, [r7, #32]
   return(result);
 8013c16:	6a3b      	ldr	r3, [r7, #32]
 8013c18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013c1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8013c1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	3308      	adds	r3, #8
 8013c24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013c26:	633a      	str	r2, [r7, #48]	@ 0x30
 8013c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013c2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013c2e:	e841 2300 	strex	r3, r2, [r1]
 8013c32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d1e5      	bne.n	8013c06 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013c3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c3c:	2220      	movs	r2, #32
 8013c3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013c42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013c46:	2b01      	cmp	r3, #1
 8013c48:	d118      	bne.n	8013c7c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013c4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c50:	693b      	ldr	r3, [r7, #16]
 8013c52:	e853 3f00 	ldrex	r3, [r3]
 8013c56:	60fb      	str	r3, [r7, #12]
   return(result);
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	f023 0310 	bic.w	r3, r3, #16
 8013c5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013c60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	461a      	mov	r2, r3
 8013c66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013c68:	61fb      	str	r3, [r7, #28]
 8013c6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c6c:	69b9      	ldr	r1, [r7, #24]
 8013c6e:	69fa      	ldr	r2, [r7, #28]
 8013c70:	e841 2300 	strex	r3, r2, [r1]
 8013c74:	617b      	str	r3, [r7, #20]
   return(result);
 8013c76:	697b      	ldr	r3, [r7, #20]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d1e6      	bne.n	8013c4a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013c7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c7e:	2200      	movs	r2, #0
 8013c80:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013c82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013c86:	2b01      	cmp	r3, #1
 8013c88:	d107      	bne.n	8013c9a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013c8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013c90:	4619      	mov	r1, r3
 8013c92:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013c94:	f7fe fef8 	bl	8012a88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013c98:	e002      	b.n	8013ca0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8013c9a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013c9c:	f7ee f862 	bl	8001d64 <HAL_UART_RxCpltCallback>
}
 8013ca0:	bf00      	nop
 8013ca2:	3770      	adds	r7, #112	@ 0x70
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	bd80      	pop	{r7, pc}

08013ca8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b084      	sub	sp, #16
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013cb4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	2201      	movs	r2, #1
 8013cba:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013cc0:	2b01      	cmp	r3, #1
 8013cc2:	d109      	bne.n	8013cd8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013cca:	085b      	lsrs	r3, r3, #1
 8013ccc:	b29b      	uxth	r3, r3
 8013cce:	4619      	mov	r1, r3
 8013cd0:	68f8      	ldr	r0, [r7, #12]
 8013cd2:	f7fe fed9 	bl	8012a88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013cd6:	e002      	b.n	8013cde <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8013cd8:	68f8      	ldr	r0, [r7, #12]
 8013cda:	f7fe fec1 	bl	8012a60 <HAL_UART_RxHalfCpltCallback>
}
 8013cde:	bf00      	nop
 8013ce0:	3710      	adds	r7, #16
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	bd80      	pop	{r7, pc}

08013ce6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013ce6:	b580      	push	{r7, lr}
 8013ce8:	b086      	sub	sp, #24
 8013cea:	af00      	add	r7, sp, #0
 8013cec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013cf2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8013cf4:	697b      	ldr	r3, [r7, #20]
 8013cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013cfa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013cfc:	697b      	ldr	r3, [r7, #20]
 8013cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013d02:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8013d04:	697b      	ldr	r3, [r7, #20]
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	689b      	ldr	r3, [r3, #8]
 8013d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013d0e:	2b80      	cmp	r3, #128	@ 0x80
 8013d10:	d109      	bne.n	8013d26 <UART_DMAError+0x40>
 8013d12:	693b      	ldr	r3, [r7, #16]
 8013d14:	2b21      	cmp	r3, #33	@ 0x21
 8013d16:	d106      	bne.n	8013d26 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8013d18:	697b      	ldr	r3, [r7, #20]
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8013d20:	6978      	ldr	r0, [r7, #20]
 8013d22:	f7ff fe85 	bl	8013a30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8013d26:	697b      	ldr	r3, [r7, #20]
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	689b      	ldr	r3, [r3, #8]
 8013d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013d30:	2b40      	cmp	r3, #64	@ 0x40
 8013d32:	d109      	bne.n	8013d48 <UART_DMAError+0x62>
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	2b22      	cmp	r3, #34	@ 0x22
 8013d38:	d106      	bne.n	8013d48 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8013d3a:	697b      	ldr	r3, [r7, #20]
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8013d42:	6978      	ldr	r0, [r7, #20]
 8013d44:	f7ff feb6 	bl	8013ab4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013d48:	697b      	ldr	r3, [r7, #20]
 8013d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013d4e:	f043 0210 	orr.w	r2, r3, #16
 8013d52:	697b      	ldr	r3, [r7, #20]
 8013d54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013d58:	6978      	ldr	r0, [r7, #20]
 8013d5a:	f7fe fe8b 	bl	8012a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013d5e:	bf00      	nop
 8013d60:	3718      	adds	r7, #24
 8013d62:	46bd      	mov	sp, r7
 8013d64:	bd80      	pop	{r7, pc}

08013d66 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013d66:	b580      	push	{r7, lr}
 8013d68:	b084      	sub	sp, #16
 8013d6a:	af00      	add	r7, sp, #0
 8013d6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	2200      	movs	r2, #0
 8013d78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013d7c:	68f8      	ldr	r0, [r7, #12]
 8013d7e:	f7fe fe79 	bl	8012a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013d82:	bf00      	nop
 8013d84:	3710      	adds	r7, #16
 8013d86:	46bd      	mov	sp, r7
 8013d88:	bd80      	pop	{r7, pc}

08013d8a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013d8a:	b580      	push	{r7, lr}
 8013d8c:	b088      	sub	sp, #32
 8013d8e:	af00      	add	r7, sp, #0
 8013d90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	e853 3f00 	ldrex	r3, [r3]
 8013d9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8013da0:	68bb      	ldr	r3, [r7, #8]
 8013da2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013da6:	61fb      	str	r3, [r7, #28]
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	461a      	mov	r2, r3
 8013dae:	69fb      	ldr	r3, [r7, #28]
 8013db0:	61bb      	str	r3, [r7, #24]
 8013db2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013db4:	6979      	ldr	r1, [r7, #20]
 8013db6:	69ba      	ldr	r2, [r7, #24]
 8013db8:	e841 2300 	strex	r3, r2, [r1]
 8013dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8013dbe:	693b      	ldr	r3, [r7, #16]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d1e6      	bne.n	8013d92 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	2220      	movs	r2, #32
 8013dc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	2200      	movs	r2, #0
 8013dd0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013dd2:	6878      	ldr	r0, [r7, #4]
 8013dd4:	f7fe fe3a 	bl	8012a4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013dd8:	bf00      	nop
 8013dda:	3720      	adds	r7, #32
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	bd80      	pop	{r7, pc}

08013de0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013de0:	b480      	push	{r7}
 8013de2:	b083      	sub	sp, #12
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013de8:	bf00      	nop
 8013dea:	370c      	adds	r7, #12
 8013dec:	46bd      	mov	sp, r7
 8013dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df2:	4770      	bx	lr

08013df4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8013df4:	b480      	push	{r7}
 8013df6:	b083      	sub	sp, #12
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8013dfc:	bf00      	nop
 8013dfe:	370c      	adds	r7, #12
 8013e00:	46bd      	mov	sp, r7
 8013e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e06:	4770      	bx	lr

08013e08 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8013e08:	b480      	push	{r7}
 8013e0a:	b083      	sub	sp, #12
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8013e10:	bf00      	nop
 8013e12:	370c      	adds	r7, #12
 8013e14:	46bd      	mov	sp, r7
 8013e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1a:	4770      	bx	lr

08013e1c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b084      	sub	sp, #16
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013e2a:	2b01      	cmp	r3, #1
 8013e2c:	d101      	bne.n	8013e32 <HAL_UARTEx_EnableFifoMode+0x16>
 8013e2e:	2302      	movs	r3, #2
 8013e30:	e02b      	b.n	8013e8a <HAL_UARTEx_EnableFifoMode+0x6e>
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	2201      	movs	r2, #1
 8013e36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	2224      	movs	r2, #36	@ 0x24
 8013e3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	681a      	ldr	r2, [r3, #0]
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	f022 0201 	bic.w	r2, r2, #1
 8013e58:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013e60:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8013e68:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	68fa      	ldr	r2, [r7, #12]
 8013e70:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013e72:	6878      	ldr	r0, [r7, #4]
 8013e74:	f000 f88a 	bl	8013f8c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	2220      	movs	r2, #32
 8013e7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	2200      	movs	r2, #0
 8013e84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013e88:	2300      	movs	r3, #0
}
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	3710      	adds	r7, #16
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	bd80      	pop	{r7, pc}

08013e92 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013e92:	b580      	push	{r7, lr}
 8013e94:	b084      	sub	sp, #16
 8013e96:	af00      	add	r7, sp, #0
 8013e98:	6078      	str	r0, [r7, #4]
 8013e9a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013ea2:	2b01      	cmp	r3, #1
 8013ea4:	d101      	bne.n	8013eaa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013ea6:	2302      	movs	r3, #2
 8013ea8:	e02d      	b.n	8013f06 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	2201      	movs	r2, #1
 8013eae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	2224      	movs	r2, #36	@ 0x24
 8013eb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	681a      	ldr	r2, [r3, #0]
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	f022 0201 	bic.w	r2, r2, #1
 8013ed0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	689b      	ldr	r3, [r3, #8]
 8013ed8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	683a      	ldr	r2, [r7, #0]
 8013ee2:	430a      	orrs	r2, r1
 8013ee4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013ee6:	6878      	ldr	r0, [r7, #4]
 8013ee8:	f000 f850 	bl	8013f8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	68fa      	ldr	r2, [r7, #12]
 8013ef2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	2220      	movs	r2, #32
 8013ef8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	2200      	movs	r2, #0
 8013f00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013f04:	2300      	movs	r3, #0
}
 8013f06:	4618      	mov	r0, r3
 8013f08:	3710      	adds	r7, #16
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	bd80      	pop	{r7, pc}

08013f0e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013f0e:	b580      	push	{r7, lr}
 8013f10:	b084      	sub	sp, #16
 8013f12:	af00      	add	r7, sp, #0
 8013f14:	6078      	str	r0, [r7, #4]
 8013f16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013f1e:	2b01      	cmp	r3, #1
 8013f20:	d101      	bne.n	8013f26 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013f22:	2302      	movs	r3, #2
 8013f24:	e02d      	b.n	8013f82 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	2201      	movs	r2, #1
 8013f2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	2224      	movs	r2, #36	@ 0x24
 8013f32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	681a      	ldr	r2, [r3, #0]
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	f022 0201 	bic.w	r2, r2, #1
 8013f4c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	689b      	ldr	r3, [r3, #8]
 8013f54:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	683a      	ldr	r2, [r7, #0]
 8013f5e:	430a      	orrs	r2, r1
 8013f60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013f62:	6878      	ldr	r0, [r7, #4]
 8013f64:	f000 f812 	bl	8013f8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	68fa      	ldr	r2, [r7, #12]
 8013f6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2220      	movs	r2, #32
 8013f74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013f80:	2300      	movs	r3, #0
}
 8013f82:	4618      	mov	r0, r3
 8013f84:	3710      	adds	r7, #16
 8013f86:	46bd      	mov	sp, r7
 8013f88:	bd80      	pop	{r7, pc}
	...

08013f8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013f8c:	b480      	push	{r7}
 8013f8e:	b085      	sub	sp, #20
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d108      	bne.n	8013fae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	2201      	movs	r2, #1
 8013fa0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	2201      	movs	r2, #1
 8013fa8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013fac:	e031      	b.n	8014012 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013fae:	2310      	movs	r3, #16
 8013fb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013fb2:	2310      	movs	r3, #16
 8013fb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	689b      	ldr	r3, [r3, #8]
 8013fbc:	0e5b      	lsrs	r3, r3, #25
 8013fbe:	b2db      	uxtb	r3, r3
 8013fc0:	f003 0307 	and.w	r3, r3, #7
 8013fc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	689b      	ldr	r3, [r3, #8]
 8013fcc:	0f5b      	lsrs	r3, r3, #29
 8013fce:	b2db      	uxtb	r3, r3
 8013fd0:	f003 0307 	and.w	r3, r3, #7
 8013fd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013fd6:	7bbb      	ldrb	r3, [r7, #14]
 8013fd8:	7b3a      	ldrb	r2, [r7, #12]
 8013fda:	4911      	ldr	r1, [pc, #68]	@ (8014020 <UARTEx_SetNbDataToProcess+0x94>)
 8013fdc:	5c8a      	ldrb	r2, [r1, r2]
 8013fde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013fe2:	7b3a      	ldrb	r2, [r7, #12]
 8013fe4:	490f      	ldr	r1, [pc, #60]	@ (8014024 <UARTEx_SetNbDataToProcess+0x98>)
 8013fe6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013fe8:	fb93 f3f2 	sdiv	r3, r3, r2
 8013fec:	b29a      	uxth	r2, r3
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013ff4:	7bfb      	ldrb	r3, [r7, #15]
 8013ff6:	7b7a      	ldrb	r2, [r7, #13]
 8013ff8:	4909      	ldr	r1, [pc, #36]	@ (8014020 <UARTEx_SetNbDataToProcess+0x94>)
 8013ffa:	5c8a      	ldrb	r2, [r1, r2]
 8013ffc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014000:	7b7a      	ldrb	r2, [r7, #13]
 8014002:	4908      	ldr	r1, [pc, #32]	@ (8014024 <UARTEx_SetNbDataToProcess+0x98>)
 8014004:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014006:	fb93 f3f2 	sdiv	r3, r3, r2
 801400a:	b29a      	uxth	r2, r3
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8014012:	bf00      	nop
 8014014:	3714      	adds	r7, #20
 8014016:	46bd      	mov	sp, r7
 8014018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801401c:	4770      	bx	lr
 801401e:	bf00      	nop
 8014020:	0801b650 	.word	0x0801b650
 8014024:	0801b658 	.word	0x0801b658

08014028 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014028:	b084      	sub	sp, #16
 801402a:	b580      	push	{r7, lr}
 801402c:	b084      	sub	sp, #16
 801402e:	af00      	add	r7, sp, #0
 8014030:	6078      	str	r0, [r7, #4]
 8014032:	f107 001c 	add.w	r0, r7, #28
 8014036:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801403a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801403e:	2b01      	cmp	r3, #1
 8014040:	d121      	bne.n	8014086 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014046:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	68da      	ldr	r2, [r3, #12]
 8014052:	4b2c      	ldr	r3, [pc, #176]	@ (8014104 <USB_CoreInit+0xdc>)
 8014054:	4013      	ands	r3, r2
 8014056:	687a      	ldr	r2, [r7, #4]
 8014058:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	68db      	ldr	r3, [r3, #12]
 801405e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8014066:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801406a:	2b01      	cmp	r3, #1
 801406c:	d105      	bne.n	801407a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	68db      	ldr	r3, [r3, #12]
 8014072:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801407a:	6878      	ldr	r0, [r7, #4]
 801407c:	f001 fafa 	bl	8015674 <USB_CoreReset>
 8014080:	4603      	mov	r3, r0
 8014082:	73fb      	strb	r3, [r7, #15]
 8014084:	e01b      	b.n	80140be <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	68db      	ldr	r3, [r3, #12]
 801408a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014092:	6878      	ldr	r0, [r7, #4]
 8014094:	f001 faee 	bl	8015674 <USB_CoreReset>
 8014098:	4603      	mov	r3, r0
 801409a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801409c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d106      	bne.n	80140b2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80140b0:	e005      	b.n	80140be <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80140be:	7fbb      	ldrb	r3, [r7, #30]
 80140c0:	2b01      	cmp	r3, #1
 80140c2:	d116      	bne.n	80140f2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80140c8:	b29a      	uxth	r2, r3
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80140d2:	4b0d      	ldr	r3, [pc, #52]	@ (8014108 <USB_CoreInit+0xe0>)
 80140d4:	4313      	orrs	r3, r2
 80140d6:	687a      	ldr	r2, [r7, #4]
 80140d8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	689b      	ldr	r3, [r3, #8]
 80140de:	f043 0206 	orr.w	r2, r3, #6
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	689b      	ldr	r3, [r3, #8]
 80140ea:	f043 0220 	orr.w	r2, r3, #32
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80140f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80140f4:	4618      	mov	r0, r3
 80140f6:	3710      	adds	r7, #16
 80140f8:	46bd      	mov	sp, r7
 80140fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80140fe:	b004      	add	sp, #16
 8014100:	4770      	bx	lr
 8014102:	bf00      	nop
 8014104:	ffbdffbf 	.word	0xffbdffbf
 8014108:	03ee0000 	.word	0x03ee0000

0801410c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801410c:	b480      	push	{r7}
 801410e:	b087      	sub	sp, #28
 8014110:	af00      	add	r7, sp, #0
 8014112:	60f8      	str	r0, [r7, #12]
 8014114:	60b9      	str	r1, [r7, #8]
 8014116:	4613      	mov	r3, r2
 8014118:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801411a:	79fb      	ldrb	r3, [r7, #7]
 801411c:	2b02      	cmp	r3, #2
 801411e:	d165      	bne.n	80141ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8014120:	68bb      	ldr	r3, [r7, #8]
 8014122:	4a41      	ldr	r2, [pc, #260]	@ (8014228 <USB_SetTurnaroundTime+0x11c>)
 8014124:	4293      	cmp	r3, r2
 8014126:	d906      	bls.n	8014136 <USB_SetTurnaroundTime+0x2a>
 8014128:	68bb      	ldr	r3, [r7, #8]
 801412a:	4a40      	ldr	r2, [pc, #256]	@ (801422c <USB_SetTurnaroundTime+0x120>)
 801412c:	4293      	cmp	r3, r2
 801412e:	d202      	bcs.n	8014136 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8014130:	230f      	movs	r3, #15
 8014132:	617b      	str	r3, [r7, #20]
 8014134:	e062      	b.n	80141fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8014136:	68bb      	ldr	r3, [r7, #8]
 8014138:	4a3c      	ldr	r2, [pc, #240]	@ (801422c <USB_SetTurnaroundTime+0x120>)
 801413a:	4293      	cmp	r3, r2
 801413c:	d306      	bcc.n	801414c <USB_SetTurnaroundTime+0x40>
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	4a3b      	ldr	r2, [pc, #236]	@ (8014230 <USB_SetTurnaroundTime+0x124>)
 8014142:	4293      	cmp	r3, r2
 8014144:	d202      	bcs.n	801414c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8014146:	230e      	movs	r3, #14
 8014148:	617b      	str	r3, [r7, #20]
 801414a:	e057      	b.n	80141fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801414c:	68bb      	ldr	r3, [r7, #8]
 801414e:	4a38      	ldr	r2, [pc, #224]	@ (8014230 <USB_SetTurnaroundTime+0x124>)
 8014150:	4293      	cmp	r3, r2
 8014152:	d306      	bcc.n	8014162 <USB_SetTurnaroundTime+0x56>
 8014154:	68bb      	ldr	r3, [r7, #8]
 8014156:	4a37      	ldr	r2, [pc, #220]	@ (8014234 <USB_SetTurnaroundTime+0x128>)
 8014158:	4293      	cmp	r3, r2
 801415a:	d202      	bcs.n	8014162 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801415c:	230d      	movs	r3, #13
 801415e:	617b      	str	r3, [r7, #20]
 8014160:	e04c      	b.n	80141fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8014162:	68bb      	ldr	r3, [r7, #8]
 8014164:	4a33      	ldr	r2, [pc, #204]	@ (8014234 <USB_SetTurnaroundTime+0x128>)
 8014166:	4293      	cmp	r3, r2
 8014168:	d306      	bcc.n	8014178 <USB_SetTurnaroundTime+0x6c>
 801416a:	68bb      	ldr	r3, [r7, #8]
 801416c:	4a32      	ldr	r2, [pc, #200]	@ (8014238 <USB_SetTurnaroundTime+0x12c>)
 801416e:	4293      	cmp	r3, r2
 8014170:	d802      	bhi.n	8014178 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8014172:	230c      	movs	r3, #12
 8014174:	617b      	str	r3, [r7, #20]
 8014176:	e041      	b.n	80141fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8014178:	68bb      	ldr	r3, [r7, #8]
 801417a:	4a2f      	ldr	r2, [pc, #188]	@ (8014238 <USB_SetTurnaroundTime+0x12c>)
 801417c:	4293      	cmp	r3, r2
 801417e:	d906      	bls.n	801418e <USB_SetTurnaroundTime+0x82>
 8014180:	68bb      	ldr	r3, [r7, #8]
 8014182:	4a2e      	ldr	r2, [pc, #184]	@ (801423c <USB_SetTurnaroundTime+0x130>)
 8014184:	4293      	cmp	r3, r2
 8014186:	d802      	bhi.n	801418e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8014188:	230b      	movs	r3, #11
 801418a:	617b      	str	r3, [r7, #20]
 801418c:	e036      	b.n	80141fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801418e:	68bb      	ldr	r3, [r7, #8]
 8014190:	4a2a      	ldr	r2, [pc, #168]	@ (801423c <USB_SetTurnaroundTime+0x130>)
 8014192:	4293      	cmp	r3, r2
 8014194:	d906      	bls.n	80141a4 <USB_SetTurnaroundTime+0x98>
 8014196:	68bb      	ldr	r3, [r7, #8]
 8014198:	4a29      	ldr	r2, [pc, #164]	@ (8014240 <USB_SetTurnaroundTime+0x134>)
 801419a:	4293      	cmp	r3, r2
 801419c:	d802      	bhi.n	80141a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801419e:	230a      	movs	r3, #10
 80141a0:	617b      	str	r3, [r7, #20]
 80141a2:	e02b      	b.n	80141fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80141a4:	68bb      	ldr	r3, [r7, #8]
 80141a6:	4a26      	ldr	r2, [pc, #152]	@ (8014240 <USB_SetTurnaroundTime+0x134>)
 80141a8:	4293      	cmp	r3, r2
 80141aa:	d906      	bls.n	80141ba <USB_SetTurnaroundTime+0xae>
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	4a25      	ldr	r2, [pc, #148]	@ (8014244 <USB_SetTurnaroundTime+0x138>)
 80141b0:	4293      	cmp	r3, r2
 80141b2:	d202      	bcs.n	80141ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80141b4:	2309      	movs	r3, #9
 80141b6:	617b      	str	r3, [r7, #20]
 80141b8:	e020      	b.n	80141fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	4a21      	ldr	r2, [pc, #132]	@ (8014244 <USB_SetTurnaroundTime+0x138>)
 80141be:	4293      	cmp	r3, r2
 80141c0:	d306      	bcc.n	80141d0 <USB_SetTurnaroundTime+0xc4>
 80141c2:	68bb      	ldr	r3, [r7, #8]
 80141c4:	4a20      	ldr	r2, [pc, #128]	@ (8014248 <USB_SetTurnaroundTime+0x13c>)
 80141c6:	4293      	cmp	r3, r2
 80141c8:	d802      	bhi.n	80141d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80141ca:	2308      	movs	r3, #8
 80141cc:	617b      	str	r3, [r7, #20]
 80141ce:	e015      	b.n	80141fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	4a1d      	ldr	r2, [pc, #116]	@ (8014248 <USB_SetTurnaroundTime+0x13c>)
 80141d4:	4293      	cmp	r3, r2
 80141d6:	d906      	bls.n	80141e6 <USB_SetTurnaroundTime+0xda>
 80141d8:	68bb      	ldr	r3, [r7, #8]
 80141da:	4a1c      	ldr	r2, [pc, #112]	@ (801424c <USB_SetTurnaroundTime+0x140>)
 80141dc:	4293      	cmp	r3, r2
 80141de:	d202      	bcs.n	80141e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80141e0:	2307      	movs	r3, #7
 80141e2:	617b      	str	r3, [r7, #20]
 80141e4:	e00a      	b.n	80141fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80141e6:	2306      	movs	r3, #6
 80141e8:	617b      	str	r3, [r7, #20]
 80141ea:	e007      	b.n	80141fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80141ec:	79fb      	ldrb	r3, [r7, #7]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d102      	bne.n	80141f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80141f2:	2309      	movs	r3, #9
 80141f4:	617b      	str	r3, [r7, #20]
 80141f6:	e001      	b.n	80141fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80141f8:	2309      	movs	r3, #9
 80141fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	68db      	ldr	r3, [r3, #12]
 8014200:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	68da      	ldr	r2, [r3, #12]
 801420c:	697b      	ldr	r3, [r7, #20]
 801420e:	029b      	lsls	r3, r3, #10
 8014210:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8014214:	431a      	orrs	r2, r3
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801421a:	2300      	movs	r3, #0
}
 801421c:	4618      	mov	r0, r3
 801421e:	371c      	adds	r7, #28
 8014220:	46bd      	mov	sp, r7
 8014222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014226:	4770      	bx	lr
 8014228:	00d8acbf 	.word	0x00d8acbf
 801422c:	00e4e1c0 	.word	0x00e4e1c0
 8014230:	00f42400 	.word	0x00f42400
 8014234:	01067380 	.word	0x01067380
 8014238:	011a499f 	.word	0x011a499f
 801423c:	01312cff 	.word	0x01312cff
 8014240:	014ca43f 	.word	0x014ca43f
 8014244:	016e3600 	.word	0x016e3600
 8014248:	01a6ab1f 	.word	0x01a6ab1f
 801424c:	01e84800 	.word	0x01e84800

08014250 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014250:	b480      	push	{r7}
 8014252:	b083      	sub	sp, #12
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	689b      	ldr	r3, [r3, #8]
 801425c:	f043 0201 	orr.w	r2, r3, #1
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014264:	2300      	movs	r3, #0
}
 8014266:	4618      	mov	r0, r3
 8014268:	370c      	adds	r7, #12
 801426a:	46bd      	mov	sp, r7
 801426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014270:	4770      	bx	lr

08014272 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014272:	b480      	push	{r7}
 8014274:	b083      	sub	sp, #12
 8014276:	af00      	add	r7, sp, #0
 8014278:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	689b      	ldr	r3, [r3, #8]
 801427e:	f023 0201 	bic.w	r2, r3, #1
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014286:	2300      	movs	r3, #0
}
 8014288:	4618      	mov	r0, r3
 801428a:	370c      	adds	r7, #12
 801428c:	46bd      	mov	sp, r7
 801428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014292:	4770      	bx	lr

08014294 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b084      	sub	sp, #16
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
 801429c:	460b      	mov	r3, r1
 801429e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80142a0:	2300      	movs	r3, #0
 80142a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	68db      	ldr	r3, [r3, #12]
 80142a8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80142b0:	78fb      	ldrb	r3, [r7, #3]
 80142b2:	2b01      	cmp	r3, #1
 80142b4:	d115      	bne.n	80142e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	68db      	ldr	r3, [r3, #12]
 80142ba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80142c2:	200a      	movs	r0, #10
 80142c4:	f7ef f8f2 	bl	80034ac <HAL_Delay>
      ms += 10U;
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	330a      	adds	r3, #10
 80142cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80142ce:	6878      	ldr	r0, [r7, #4]
 80142d0:	f001 f93f 	bl	8015552 <USB_GetMode>
 80142d4:	4603      	mov	r3, r0
 80142d6:	2b01      	cmp	r3, #1
 80142d8:	d01e      	beq.n	8014318 <USB_SetCurrentMode+0x84>
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	2bc7      	cmp	r3, #199	@ 0xc7
 80142de:	d9f0      	bls.n	80142c2 <USB_SetCurrentMode+0x2e>
 80142e0:	e01a      	b.n	8014318 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80142e2:	78fb      	ldrb	r3, [r7, #3]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d115      	bne.n	8014314 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	68db      	ldr	r3, [r3, #12]
 80142ec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80142f4:	200a      	movs	r0, #10
 80142f6:	f7ef f8d9 	bl	80034ac <HAL_Delay>
      ms += 10U;
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	330a      	adds	r3, #10
 80142fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8014300:	6878      	ldr	r0, [r7, #4]
 8014302:	f001 f926 	bl	8015552 <USB_GetMode>
 8014306:	4603      	mov	r3, r0
 8014308:	2b00      	cmp	r3, #0
 801430a:	d005      	beq.n	8014318 <USB_SetCurrentMode+0x84>
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	2bc7      	cmp	r3, #199	@ 0xc7
 8014310:	d9f0      	bls.n	80142f4 <USB_SetCurrentMode+0x60>
 8014312:	e001      	b.n	8014318 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014314:	2301      	movs	r3, #1
 8014316:	e005      	b.n	8014324 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	2bc8      	cmp	r3, #200	@ 0xc8
 801431c:	d101      	bne.n	8014322 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801431e:	2301      	movs	r3, #1
 8014320:	e000      	b.n	8014324 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014322:	2300      	movs	r3, #0
}
 8014324:	4618      	mov	r0, r3
 8014326:	3710      	adds	r7, #16
 8014328:	46bd      	mov	sp, r7
 801432a:	bd80      	pop	{r7, pc}

0801432c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801432c:	b084      	sub	sp, #16
 801432e:	b580      	push	{r7, lr}
 8014330:	b086      	sub	sp, #24
 8014332:	af00      	add	r7, sp, #0
 8014334:	6078      	str	r0, [r7, #4]
 8014336:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801433a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801433e:	2300      	movs	r3, #0
 8014340:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8014346:	2300      	movs	r3, #0
 8014348:	613b      	str	r3, [r7, #16]
 801434a:	e009      	b.n	8014360 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801434c:	687a      	ldr	r2, [r7, #4]
 801434e:	693b      	ldr	r3, [r7, #16]
 8014350:	3340      	adds	r3, #64	@ 0x40
 8014352:	009b      	lsls	r3, r3, #2
 8014354:	4413      	add	r3, r2
 8014356:	2200      	movs	r2, #0
 8014358:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801435a:	693b      	ldr	r3, [r7, #16]
 801435c:	3301      	adds	r3, #1
 801435e:	613b      	str	r3, [r7, #16]
 8014360:	693b      	ldr	r3, [r7, #16]
 8014362:	2b0e      	cmp	r3, #14
 8014364:	d9f2      	bls.n	801434c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8014366:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801436a:	2b00      	cmp	r3, #0
 801436c:	d11c      	bne.n	80143a8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014374:	685b      	ldr	r3, [r3, #4]
 8014376:	68fa      	ldr	r2, [r7, #12]
 8014378:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801437c:	f043 0302 	orr.w	r3, r3, #2
 8014380:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014386:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	601a      	str	r2, [r3, #0]
 80143a6:	e005      	b.n	80143b4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80143ac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80143ba:	461a      	mov	r2, r3
 80143bc:	2300      	movs	r3, #0
 80143be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80143c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80143c4:	2b01      	cmp	r3, #1
 80143c6:	d10d      	bne.n	80143e4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80143c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d104      	bne.n	80143da <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80143d0:	2100      	movs	r1, #0
 80143d2:	6878      	ldr	r0, [r7, #4]
 80143d4:	f000 f968 	bl	80146a8 <USB_SetDevSpeed>
 80143d8:	e008      	b.n	80143ec <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80143da:	2101      	movs	r1, #1
 80143dc:	6878      	ldr	r0, [r7, #4]
 80143de:	f000 f963 	bl	80146a8 <USB_SetDevSpeed>
 80143e2:	e003      	b.n	80143ec <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80143e4:	2103      	movs	r1, #3
 80143e6:	6878      	ldr	r0, [r7, #4]
 80143e8:	f000 f95e 	bl	80146a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80143ec:	2110      	movs	r1, #16
 80143ee:	6878      	ldr	r0, [r7, #4]
 80143f0:	f000 f8fa 	bl	80145e8 <USB_FlushTxFifo>
 80143f4:	4603      	mov	r3, r0
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d001      	beq.n	80143fe <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80143fa:	2301      	movs	r3, #1
 80143fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80143fe:	6878      	ldr	r0, [r7, #4]
 8014400:	f000 f924 	bl	801464c <USB_FlushRxFifo>
 8014404:	4603      	mov	r3, r0
 8014406:	2b00      	cmp	r3, #0
 8014408:	d001      	beq.n	801440e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801440a:	2301      	movs	r3, #1
 801440c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014414:	461a      	mov	r2, r3
 8014416:	2300      	movs	r3, #0
 8014418:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014420:	461a      	mov	r2, r3
 8014422:	2300      	movs	r3, #0
 8014424:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801442c:	461a      	mov	r2, r3
 801442e:	2300      	movs	r3, #0
 8014430:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014432:	2300      	movs	r3, #0
 8014434:	613b      	str	r3, [r7, #16]
 8014436:	e043      	b.n	80144c0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014438:	693b      	ldr	r3, [r7, #16]
 801443a:	015a      	lsls	r2, r3, #5
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	4413      	add	r3, r2
 8014440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801444a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801444e:	d118      	bne.n	8014482 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8014450:	693b      	ldr	r3, [r7, #16]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d10a      	bne.n	801446c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014456:	693b      	ldr	r3, [r7, #16]
 8014458:	015a      	lsls	r2, r3, #5
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	4413      	add	r3, r2
 801445e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014462:	461a      	mov	r2, r3
 8014464:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014468:	6013      	str	r3, [r2, #0]
 801446a:	e013      	b.n	8014494 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801446c:	693b      	ldr	r3, [r7, #16]
 801446e:	015a      	lsls	r2, r3, #5
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	4413      	add	r3, r2
 8014474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014478:	461a      	mov	r2, r3
 801447a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801447e:	6013      	str	r3, [r2, #0]
 8014480:	e008      	b.n	8014494 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8014482:	693b      	ldr	r3, [r7, #16]
 8014484:	015a      	lsls	r2, r3, #5
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	4413      	add	r3, r2
 801448a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801448e:	461a      	mov	r2, r3
 8014490:	2300      	movs	r3, #0
 8014492:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8014494:	693b      	ldr	r3, [r7, #16]
 8014496:	015a      	lsls	r2, r3, #5
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	4413      	add	r3, r2
 801449c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144a0:	461a      	mov	r2, r3
 80144a2:	2300      	movs	r3, #0
 80144a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80144a6:	693b      	ldr	r3, [r7, #16]
 80144a8:	015a      	lsls	r2, r3, #5
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	4413      	add	r3, r2
 80144ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144b2:	461a      	mov	r2, r3
 80144b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80144b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80144ba:	693b      	ldr	r3, [r7, #16]
 80144bc:	3301      	adds	r3, #1
 80144be:	613b      	str	r3, [r7, #16]
 80144c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80144c4:	461a      	mov	r2, r3
 80144c6:	693b      	ldr	r3, [r7, #16]
 80144c8:	4293      	cmp	r3, r2
 80144ca:	d3b5      	bcc.n	8014438 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80144cc:	2300      	movs	r3, #0
 80144ce:	613b      	str	r3, [r7, #16]
 80144d0:	e043      	b.n	801455a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80144d2:	693b      	ldr	r3, [r7, #16]
 80144d4:	015a      	lsls	r2, r3, #5
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	4413      	add	r3, r2
 80144da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80144e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80144e8:	d118      	bne.n	801451c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80144ea:	693b      	ldr	r3, [r7, #16]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d10a      	bne.n	8014506 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80144f0:	693b      	ldr	r3, [r7, #16]
 80144f2:	015a      	lsls	r2, r3, #5
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	4413      	add	r3, r2
 80144f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80144fc:	461a      	mov	r2, r3
 80144fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014502:	6013      	str	r3, [r2, #0]
 8014504:	e013      	b.n	801452e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014506:	693b      	ldr	r3, [r7, #16]
 8014508:	015a      	lsls	r2, r3, #5
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	4413      	add	r3, r2
 801450e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014512:	461a      	mov	r2, r3
 8014514:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014518:	6013      	str	r3, [r2, #0]
 801451a:	e008      	b.n	801452e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801451c:	693b      	ldr	r3, [r7, #16]
 801451e:	015a      	lsls	r2, r3, #5
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	4413      	add	r3, r2
 8014524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014528:	461a      	mov	r2, r3
 801452a:	2300      	movs	r3, #0
 801452c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801452e:	693b      	ldr	r3, [r7, #16]
 8014530:	015a      	lsls	r2, r3, #5
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	4413      	add	r3, r2
 8014536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801453a:	461a      	mov	r2, r3
 801453c:	2300      	movs	r3, #0
 801453e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014540:	693b      	ldr	r3, [r7, #16]
 8014542:	015a      	lsls	r2, r3, #5
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	4413      	add	r3, r2
 8014548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801454c:	461a      	mov	r2, r3
 801454e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014552:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014554:	693b      	ldr	r3, [r7, #16]
 8014556:	3301      	adds	r3, #1
 8014558:	613b      	str	r3, [r7, #16]
 801455a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801455e:	461a      	mov	r2, r3
 8014560:	693b      	ldr	r3, [r7, #16]
 8014562:	4293      	cmp	r3, r2
 8014564:	d3b5      	bcc.n	80144d2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801456c:	691b      	ldr	r3, [r3, #16]
 801456e:	68fa      	ldr	r2, [r7, #12]
 8014570:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014578:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	2200      	movs	r2, #0
 801457e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8014586:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8014588:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801458c:	2b00      	cmp	r3, #0
 801458e:	d105      	bne.n	801459c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	699b      	ldr	r3, [r3, #24]
 8014594:	f043 0210 	orr.w	r2, r3, #16
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	699a      	ldr	r2, [r3, #24]
 80145a0:	4b0f      	ldr	r3, [pc, #60]	@ (80145e0 <USB_DevInit+0x2b4>)
 80145a2:	4313      	orrs	r3, r2
 80145a4:	687a      	ldr	r2, [r7, #4]
 80145a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80145a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d005      	beq.n	80145bc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	699b      	ldr	r3, [r3, #24]
 80145b4:	f043 0208 	orr.w	r2, r3, #8
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80145bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80145c0:	2b01      	cmp	r3, #1
 80145c2:	d105      	bne.n	80145d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	699a      	ldr	r2, [r3, #24]
 80145c8:	4b06      	ldr	r3, [pc, #24]	@ (80145e4 <USB_DevInit+0x2b8>)
 80145ca:	4313      	orrs	r3, r2
 80145cc:	687a      	ldr	r2, [r7, #4]
 80145ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80145d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80145d2:	4618      	mov	r0, r3
 80145d4:	3718      	adds	r7, #24
 80145d6:	46bd      	mov	sp, r7
 80145d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80145dc:	b004      	add	sp, #16
 80145de:	4770      	bx	lr
 80145e0:	803c3800 	.word	0x803c3800
 80145e4:	40000004 	.word	0x40000004

080145e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80145e8:	b480      	push	{r7}
 80145ea:	b085      	sub	sp, #20
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
 80145f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80145f2:	2300      	movs	r3, #0
 80145f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	3301      	adds	r3, #1
 80145fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014602:	d901      	bls.n	8014608 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014604:	2303      	movs	r3, #3
 8014606:	e01b      	b.n	8014640 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	691b      	ldr	r3, [r3, #16]
 801460c:	2b00      	cmp	r3, #0
 801460e:	daf2      	bge.n	80145f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014610:	2300      	movs	r3, #0
 8014612:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014614:	683b      	ldr	r3, [r7, #0]
 8014616:	019b      	lsls	r3, r3, #6
 8014618:	f043 0220 	orr.w	r2, r3, #32
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	3301      	adds	r3, #1
 8014624:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801462c:	d901      	bls.n	8014632 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801462e:	2303      	movs	r3, #3
 8014630:	e006      	b.n	8014640 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	691b      	ldr	r3, [r3, #16]
 8014636:	f003 0320 	and.w	r3, r3, #32
 801463a:	2b20      	cmp	r3, #32
 801463c:	d0f0      	beq.n	8014620 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801463e:	2300      	movs	r3, #0
}
 8014640:	4618      	mov	r0, r3
 8014642:	3714      	adds	r7, #20
 8014644:	46bd      	mov	sp, r7
 8014646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801464a:	4770      	bx	lr

0801464c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801464c:	b480      	push	{r7}
 801464e:	b085      	sub	sp, #20
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014654:	2300      	movs	r3, #0
 8014656:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	3301      	adds	r3, #1
 801465c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014664:	d901      	bls.n	801466a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8014666:	2303      	movs	r3, #3
 8014668:	e018      	b.n	801469c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	691b      	ldr	r3, [r3, #16]
 801466e:	2b00      	cmp	r3, #0
 8014670:	daf2      	bge.n	8014658 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8014672:	2300      	movs	r3, #0
 8014674:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	2210      	movs	r2, #16
 801467a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	3301      	adds	r3, #1
 8014680:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014688:	d901      	bls.n	801468e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801468a:	2303      	movs	r3, #3
 801468c:	e006      	b.n	801469c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	691b      	ldr	r3, [r3, #16]
 8014692:	f003 0310 	and.w	r3, r3, #16
 8014696:	2b10      	cmp	r3, #16
 8014698:	d0f0      	beq.n	801467c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801469a:	2300      	movs	r3, #0
}
 801469c:	4618      	mov	r0, r3
 801469e:	3714      	adds	r7, #20
 80146a0:	46bd      	mov	sp, r7
 80146a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a6:	4770      	bx	lr

080146a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80146a8:	b480      	push	{r7}
 80146aa:	b085      	sub	sp, #20
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
 80146b0:	460b      	mov	r3, r1
 80146b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80146be:	681a      	ldr	r2, [r3, #0]
 80146c0:	78fb      	ldrb	r3, [r7, #3]
 80146c2:	68f9      	ldr	r1, [r7, #12]
 80146c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80146c8:	4313      	orrs	r3, r2
 80146ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80146cc:	2300      	movs	r3, #0
}
 80146ce:	4618      	mov	r0, r3
 80146d0:	3714      	adds	r7, #20
 80146d2:	46bd      	mov	sp, r7
 80146d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d8:	4770      	bx	lr

080146da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80146da:	b480      	push	{r7}
 80146dc:	b087      	sub	sp, #28
 80146de:	af00      	add	r7, sp, #0
 80146e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80146e6:	693b      	ldr	r3, [r7, #16]
 80146e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80146ec:	689b      	ldr	r3, [r3, #8]
 80146ee:	f003 0306 	and.w	r3, r3, #6
 80146f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d102      	bne.n	8014700 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80146fa:	2300      	movs	r3, #0
 80146fc:	75fb      	strb	r3, [r7, #23]
 80146fe:	e00a      	b.n	8014716 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	2b02      	cmp	r3, #2
 8014704:	d002      	beq.n	801470c <USB_GetDevSpeed+0x32>
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	2b06      	cmp	r3, #6
 801470a:	d102      	bne.n	8014712 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801470c:	2302      	movs	r3, #2
 801470e:	75fb      	strb	r3, [r7, #23]
 8014710:	e001      	b.n	8014716 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8014712:	230f      	movs	r3, #15
 8014714:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8014716:	7dfb      	ldrb	r3, [r7, #23]
}
 8014718:	4618      	mov	r0, r3
 801471a:	371c      	adds	r7, #28
 801471c:	46bd      	mov	sp, r7
 801471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014722:	4770      	bx	lr

08014724 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014724:	b480      	push	{r7}
 8014726:	b085      	sub	sp, #20
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
 801472c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014732:	683b      	ldr	r3, [r7, #0]
 8014734:	781b      	ldrb	r3, [r3, #0]
 8014736:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014738:	683b      	ldr	r3, [r7, #0]
 801473a:	785b      	ldrb	r3, [r3, #1]
 801473c:	2b01      	cmp	r3, #1
 801473e:	d139      	bne.n	80147b4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014746:	69da      	ldr	r2, [r3, #28]
 8014748:	683b      	ldr	r3, [r7, #0]
 801474a:	781b      	ldrb	r3, [r3, #0]
 801474c:	f003 030f 	and.w	r3, r3, #15
 8014750:	2101      	movs	r1, #1
 8014752:	fa01 f303 	lsl.w	r3, r1, r3
 8014756:	b29b      	uxth	r3, r3
 8014758:	68f9      	ldr	r1, [r7, #12]
 801475a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801475e:	4313      	orrs	r3, r2
 8014760:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014762:	68bb      	ldr	r3, [r7, #8]
 8014764:	015a      	lsls	r2, r3, #5
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	4413      	add	r3, r2
 801476a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014774:	2b00      	cmp	r3, #0
 8014776:	d153      	bne.n	8014820 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014778:	68bb      	ldr	r3, [r7, #8]
 801477a:	015a      	lsls	r2, r3, #5
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	4413      	add	r3, r2
 8014780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014784:	681a      	ldr	r2, [r3, #0]
 8014786:	683b      	ldr	r3, [r7, #0]
 8014788:	689b      	ldr	r3, [r3, #8]
 801478a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801478e:	683b      	ldr	r3, [r7, #0]
 8014790:	791b      	ldrb	r3, [r3, #4]
 8014792:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014794:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014796:	68bb      	ldr	r3, [r7, #8]
 8014798:	059b      	lsls	r3, r3, #22
 801479a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801479c:	431a      	orrs	r2, r3
 801479e:	68bb      	ldr	r3, [r7, #8]
 80147a0:	0159      	lsls	r1, r3, #5
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	440b      	add	r3, r1
 80147a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147aa:	4619      	mov	r1, r3
 80147ac:	4b20      	ldr	r3, [pc, #128]	@ (8014830 <USB_ActivateEndpoint+0x10c>)
 80147ae:	4313      	orrs	r3, r2
 80147b0:	600b      	str	r3, [r1, #0]
 80147b2:	e035      	b.n	8014820 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80147ba:	69da      	ldr	r2, [r3, #28]
 80147bc:	683b      	ldr	r3, [r7, #0]
 80147be:	781b      	ldrb	r3, [r3, #0]
 80147c0:	f003 030f 	and.w	r3, r3, #15
 80147c4:	2101      	movs	r1, #1
 80147c6:	fa01 f303 	lsl.w	r3, r1, r3
 80147ca:	041b      	lsls	r3, r3, #16
 80147cc:	68f9      	ldr	r1, [r7, #12]
 80147ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80147d2:	4313      	orrs	r3, r2
 80147d4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80147d6:	68bb      	ldr	r3, [r7, #8]
 80147d8:	015a      	lsls	r2, r3, #5
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	4413      	add	r3, r2
 80147de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d119      	bne.n	8014820 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80147ec:	68bb      	ldr	r3, [r7, #8]
 80147ee:	015a      	lsls	r2, r3, #5
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	4413      	add	r3, r2
 80147f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80147f8:	681a      	ldr	r2, [r3, #0]
 80147fa:	683b      	ldr	r3, [r7, #0]
 80147fc:	689b      	ldr	r3, [r3, #8]
 80147fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8014802:	683b      	ldr	r3, [r7, #0]
 8014804:	791b      	ldrb	r3, [r3, #4]
 8014806:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014808:	430b      	orrs	r3, r1
 801480a:	431a      	orrs	r2, r3
 801480c:	68bb      	ldr	r3, [r7, #8]
 801480e:	0159      	lsls	r1, r3, #5
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	440b      	add	r3, r1
 8014814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014818:	4619      	mov	r1, r3
 801481a:	4b05      	ldr	r3, [pc, #20]	@ (8014830 <USB_ActivateEndpoint+0x10c>)
 801481c:	4313      	orrs	r3, r2
 801481e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8014820:	2300      	movs	r3, #0
}
 8014822:	4618      	mov	r0, r3
 8014824:	3714      	adds	r7, #20
 8014826:	46bd      	mov	sp, r7
 8014828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482c:	4770      	bx	lr
 801482e:	bf00      	nop
 8014830:	10008000 	.word	0x10008000

08014834 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014834:	b480      	push	{r7}
 8014836:	b085      	sub	sp, #20
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
 801483c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014842:	683b      	ldr	r3, [r7, #0]
 8014844:	781b      	ldrb	r3, [r3, #0]
 8014846:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8014848:	683b      	ldr	r3, [r7, #0]
 801484a:	785b      	ldrb	r3, [r3, #1]
 801484c:	2b01      	cmp	r3, #1
 801484e:	d161      	bne.n	8014914 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014850:	68bb      	ldr	r3, [r7, #8]
 8014852:	015a      	lsls	r2, r3, #5
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	4413      	add	r3, r2
 8014858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014862:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014866:	d11f      	bne.n	80148a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014868:	68bb      	ldr	r3, [r7, #8]
 801486a:	015a      	lsls	r2, r3, #5
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	4413      	add	r3, r2
 8014870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	68ba      	ldr	r2, [r7, #8]
 8014878:	0151      	lsls	r1, r2, #5
 801487a:	68fa      	ldr	r2, [r7, #12]
 801487c:	440a      	add	r2, r1
 801487e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014882:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014886:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8014888:	68bb      	ldr	r3, [r7, #8]
 801488a:	015a      	lsls	r2, r3, #5
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	4413      	add	r3, r2
 8014890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	68ba      	ldr	r2, [r7, #8]
 8014898:	0151      	lsls	r1, r2, #5
 801489a:	68fa      	ldr	r2, [r7, #12]
 801489c:	440a      	add	r2, r1
 801489e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80148a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80148a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80148ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80148b0:	683b      	ldr	r3, [r7, #0]
 80148b2:	781b      	ldrb	r3, [r3, #0]
 80148b4:	f003 030f 	and.w	r3, r3, #15
 80148b8:	2101      	movs	r1, #1
 80148ba:	fa01 f303 	lsl.w	r3, r1, r3
 80148be:	b29b      	uxth	r3, r3
 80148c0:	43db      	mvns	r3, r3
 80148c2:	68f9      	ldr	r1, [r7, #12]
 80148c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80148c8:	4013      	ands	r3, r2
 80148ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80148d2:	69da      	ldr	r2, [r3, #28]
 80148d4:	683b      	ldr	r3, [r7, #0]
 80148d6:	781b      	ldrb	r3, [r3, #0]
 80148d8:	f003 030f 	and.w	r3, r3, #15
 80148dc:	2101      	movs	r1, #1
 80148de:	fa01 f303 	lsl.w	r3, r1, r3
 80148e2:	b29b      	uxth	r3, r3
 80148e4:	43db      	mvns	r3, r3
 80148e6:	68f9      	ldr	r1, [r7, #12]
 80148e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80148ec:	4013      	ands	r3, r2
 80148ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80148f0:	68bb      	ldr	r3, [r7, #8]
 80148f2:	015a      	lsls	r2, r3, #5
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	4413      	add	r3, r2
 80148f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80148fc:	681a      	ldr	r2, [r3, #0]
 80148fe:	68bb      	ldr	r3, [r7, #8]
 8014900:	0159      	lsls	r1, r3, #5
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	440b      	add	r3, r1
 8014906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801490a:	4619      	mov	r1, r3
 801490c:	4b35      	ldr	r3, [pc, #212]	@ (80149e4 <USB_DeactivateEndpoint+0x1b0>)
 801490e:	4013      	ands	r3, r2
 8014910:	600b      	str	r3, [r1, #0]
 8014912:	e060      	b.n	80149d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014914:	68bb      	ldr	r3, [r7, #8]
 8014916:	015a      	lsls	r2, r3, #5
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	4413      	add	r3, r2
 801491c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014926:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801492a:	d11f      	bne.n	801496c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801492c:	68bb      	ldr	r3, [r7, #8]
 801492e:	015a      	lsls	r2, r3, #5
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	4413      	add	r3, r2
 8014934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	68ba      	ldr	r2, [r7, #8]
 801493c:	0151      	lsls	r1, r2, #5
 801493e:	68fa      	ldr	r2, [r7, #12]
 8014940:	440a      	add	r2, r1
 8014942:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014946:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801494a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801494c:	68bb      	ldr	r3, [r7, #8]
 801494e:	015a      	lsls	r2, r3, #5
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	4413      	add	r3, r2
 8014954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	68ba      	ldr	r2, [r7, #8]
 801495c:	0151      	lsls	r1, r2, #5
 801495e:	68fa      	ldr	r2, [r7, #12]
 8014960:	440a      	add	r2, r1
 8014962:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014966:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801496a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014972:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014974:	683b      	ldr	r3, [r7, #0]
 8014976:	781b      	ldrb	r3, [r3, #0]
 8014978:	f003 030f 	and.w	r3, r3, #15
 801497c:	2101      	movs	r1, #1
 801497e:	fa01 f303 	lsl.w	r3, r1, r3
 8014982:	041b      	lsls	r3, r3, #16
 8014984:	43db      	mvns	r3, r3
 8014986:	68f9      	ldr	r1, [r7, #12]
 8014988:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801498c:	4013      	ands	r3, r2
 801498e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014996:	69da      	ldr	r2, [r3, #28]
 8014998:	683b      	ldr	r3, [r7, #0]
 801499a:	781b      	ldrb	r3, [r3, #0]
 801499c:	f003 030f 	and.w	r3, r3, #15
 80149a0:	2101      	movs	r1, #1
 80149a2:	fa01 f303 	lsl.w	r3, r1, r3
 80149a6:	041b      	lsls	r3, r3, #16
 80149a8:	43db      	mvns	r3, r3
 80149aa:	68f9      	ldr	r1, [r7, #12]
 80149ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80149b0:	4013      	ands	r3, r2
 80149b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80149b4:	68bb      	ldr	r3, [r7, #8]
 80149b6:	015a      	lsls	r2, r3, #5
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	4413      	add	r3, r2
 80149bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80149c0:	681a      	ldr	r2, [r3, #0]
 80149c2:	68bb      	ldr	r3, [r7, #8]
 80149c4:	0159      	lsls	r1, r3, #5
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	440b      	add	r3, r1
 80149ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80149ce:	4619      	mov	r1, r3
 80149d0:	4b05      	ldr	r3, [pc, #20]	@ (80149e8 <USB_DeactivateEndpoint+0x1b4>)
 80149d2:	4013      	ands	r3, r2
 80149d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80149d6:	2300      	movs	r3, #0
}
 80149d8:	4618      	mov	r0, r3
 80149da:	3714      	adds	r7, #20
 80149dc:	46bd      	mov	sp, r7
 80149de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e2:	4770      	bx	lr
 80149e4:	ec337800 	.word	0xec337800
 80149e8:	eff37800 	.word	0xeff37800

080149ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b08a      	sub	sp, #40	@ 0x28
 80149f0:	af02      	add	r7, sp, #8
 80149f2:	60f8      	str	r0, [r7, #12]
 80149f4:	60b9      	str	r1, [r7, #8]
 80149f6:	4613      	mov	r3, r2
 80149f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80149fe:	68bb      	ldr	r3, [r7, #8]
 8014a00:	781b      	ldrb	r3, [r3, #0]
 8014a02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014a04:	68bb      	ldr	r3, [r7, #8]
 8014a06:	785b      	ldrb	r3, [r3, #1]
 8014a08:	2b01      	cmp	r3, #1
 8014a0a:	f040 8185 	bne.w	8014d18 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014a0e:	68bb      	ldr	r3, [r7, #8]
 8014a10:	691b      	ldr	r3, [r3, #16]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d132      	bne.n	8014a7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014a16:	69bb      	ldr	r3, [r7, #24]
 8014a18:	015a      	lsls	r2, r3, #5
 8014a1a:	69fb      	ldr	r3, [r7, #28]
 8014a1c:	4413      	add	r3, r2
 8014a1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a22:	691a      	ldr	r2, [r3, #16]
 8014a24:	69bb      	ldr	r3, [r7, #24]
 8014a26:	0159      	lsls	r1, r3, #5
 8014a28:	69fb      	ldr	r3, [r7, #28]
 8014a2a:	440b      	add	r3, r1
 8014a2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a30:	4619      	mov	r1, r3
 8014a32:	4ba7      	ldr	r3, [pc, #668]	@ (8014cd0 <USB_EPStartXfer+0x2e4>)
 8014a34:	4013      	ands	r3, r2
 8014a36:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014a38:	69bb      	ldr	r3, [r7, #24]
 8014a3a:	015a      	lsls	r2, r3, #5
 8014a3c:	69fb      	ldr	r3, [r7, #28]
 8014a3e:	4413      	add	r3, r2
 8014a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a44:	691b      	ldr	r3, [r3, #16]
 8014a46:	69ba      	ldr	r2, [r7, #24]
 8014a48:	0151      	lsls	r1, r2, #5
 8014a4a:	69fa      	ldr	r2, [r7, #28]
 8014a4c:	440a      	add	r2, r1
 8014a4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014a52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014a56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014a58:	69bb      	ldr	r3, [r7, #24]
 8014a5a:	015a      	lsls	r2, r3, #5
 8014a5c:	69fb      	ldr	r3, [r7, #28]
 8014a5e:	4413      	add	r3, r2
 8014a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a64:	691a      	ldr	r2, [r3, #16]
 8014a66:	69bb      	ldr	r3, [r7, #24]
 8014a68:	0159      	lsls	r1, r3, #5
 8014a6a:	69fb      	ldr	r3, [r7, #28]
 8014a6c:	440b      	add	r3, r1
 8014a6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a72:	4619      	mov	r1, r3
 8014a74:	4b97      	ldr	r3, [pc, #604]	@ (8014cd4 <USB_EPStartXfer+0x2e8>)
 8014a76:	4013      	ands	r3, r2
 8014a78:	610b      	str	r3, [r1, #16]
 8014a7a:	e097      	b.n	8014bac <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014a7c:	69bb      	ldr	r3, [r7, #24]
 8014a7e:	015a      	lsls	r2, r3, #5
 8014a80:	69fb      	ldr	r3, [r7, #28]
 8014a82:	4413      	add	r3, r2
 8014a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a88:	691a      	ldr	r2, [r3, #16]
 8014a8a:	69bb      	ldr	r3, [r7, #24]
 8014a8c:	0159      	lsls	r1, r3, #5
 8014a8e:	69fb      	ldr	r3, [r7, #28]
 8014a90:	440b      	add	r3, r1
 8014a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a96:	4619      	mov	r1, r3
 8014a98:	4b8e      	ldr	r3, [pc, #568]	@ (8014cd4 <USB_EPStartXfer+0x2e8>)
 8014a9a:	4013      	ands	r3, r2
 8014a9c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014a9e:	69bb      	ldr	r3, [r7, #24]
 8014aa0:	015a      	lsls	r2, r3, #5
 8014aa2:	69fb      	ldr	r3, [r7, #28]
 8014aa4:	4413      	add	r3, r2
 8014aa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014aaa:	691a      	ldr	r2, [r3, #16]
 8014aac:	69bb      	ldr	r3, [r7, #24]
 8014aae:	0159      	lsls	r1, r3, #5
 8014ab0:	69fb      	ldr	r3, [r7, #28]
 8014ab2:	440b      	add	r3, r1
 8014ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ab8:	4619      	mov	r1, r3
 8014aba:	4b85      	ldr	r3, [pc, #532]	@ (8014cd0 <USB_EPStartXfer+0x2e4>)
 8014abc:	4013      	ands	r3, r2
 8014abe:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8014ac0:	69bb      	ldr	r3, [r7, #24]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d11a      	bne.n	8014afc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8014ac6:	68bb      	ldr	r3, [r7, #8]
 8014ac8:	691a      	ldr	r2, [r3, #16]
 8014aca:	68bb      	ldr	r3, [r7, #8]
 8014acc:	689b      	ldr	r3, [r3, #8]
 8014ace:	429a      	cmp	r2, r3
 8014ad0:	d903      	bls.n	8014ada <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8014ad2:	68bb      	ldr	r3, [r7, #8]
 8014ad4:	689a      	ldr	r2, [r3, #8]
 8014ad6:	68bb      	ldr	r3, [r7, #8]
 8014ad8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014ada:	69bb      	ldr	r3, [r7, #24]
 8014adc:	015a      	lsls	r2, r3, #5
 8014ade:	69fb      	ldr	r3, [r7, #28]
 8014ae0:	4413      	add	r3, r2
 8014ae2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ae6:	691b      	ldr	r3, [r3, #16]
 8014ae8:	69ba      	ldr	r2, [r7, #24]
 8014aea:	0151      	lsls	r1, r2, #5
 8014aec:	69fa      	ldr	r2, [r7, #28]
 8014aee:	440a      	add	r2, r1
 8014af0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014af4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014af8:	6113      	str	r3, [r2, #16]
 8014afa:	e044      	b.n	8014b86 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014afc:	68bb      	ldr	r3, [r7, #8]
 8014afe:	691a      	ldr	r2, [r3, #16]
 8014b00:	68bb      	ldr	r3, [r7, #8]
 8014b02:	689b      	ldr	r3, [r3, #8]
 8014b04:	4413      	add	r3, r2
 8014b06:	1e5a      	subs	r2, r3, #1
 8014b08:	68bb      	ldr	r3, [r7, #8]
 8014b0a:	689b      	ldr	r3, [r3, #8]
 8014b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014b10:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8014b12:	69bb      	ldr	r3, [r7, #24]
 8014b14:	015a      	lsls	r2, r3, #5
 8014b16:	69fb      	ldr	r3, [r7, #28]
 8014b18:	4413      	add	r3, r2
 8014b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b1e:	691a      	ldr	r2, [r3, #16]
 8014b20:	8afb      	ldrh	r3, [r7, #22]
 8014b22:	04d9      	lsls	r1, r3, #19
 8014b24:	4b6c      	ldr	r3, [pc, #432]	@ (8014cd8 <USB_EPStartXfer+0x2ec>)
 8014b26:	400b      	ands	r3, r1
 8014b28:	69b9      	ldr	r1, [r7, #24]
 8014b2a:	0148      	lsls	r0, r1, #5
 8014b2c:	69f9      	ldr	r1, [r7, #28]
 8014b2e:	4401      	add	r1, r0
 8014b30:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014b34:	4313      	orrs	r3, r2
 8014b36:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8014b38:	68bb      	ldr	r3, [r7, #8]
 8014b3a:	791b      	ldrb	r3, [r3, #4]
 8014b3c:	2b01      	cmp	r3, #1
 8014b3e:	d122      	bne.n	8014b86 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014b40:	69bb      	ldr	r3, [r7, #24]
 8014b42:	015a      	lsls	r2, r3, #5
 8014b44:	69fb      	ldr	r3, [r7, #28]
 8014b46:	4413      	add	r3, r2
 8014b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b4c:	691b      	ldr	r3, [r3, #16]
 8014b4e:	69ba      	ldr	r2, [r7, #24]
 8014b50:	0151      	lsls	r1, r2, #5
 8014b52:	69fa      	ldr	r2, [r7, #28]
 8014b54:	440a      	add	r2, r1
 8014b56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014b5a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8014b5e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8014b60:	69bb      	ldr	r3, [r7, #24]
 8014b62:	015a      	lsls	r2, r3, #5
 8014b64:	69fb      	ldr	r3, [r7, #28]
 8014b66:	4413      	add	r3, r2
 8014b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b6c:	691a      	ldr	r2, [r3, #16]
 8014b6e:	8afb      	ldrh	r3, [r7, #22]
 8014b70:	075b      	lsls	r3, r3, #29
 8014b72:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8014b76:	69b9      	ldr	r1, [r7, #24]
 8014b78:	0148      	lsls	r0, r1, #5
 8014b7a:	69f9      	ldr	r1, [r7, #28]
 8014b7c:	4401      	add	r1, r0
 8014b7e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014b82:	4313      	orrs	r3, r2
 8014b84:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014b86:	69bb      	ldr	r3, [r7, #24]
 8014b88:	015a      	lsls	r2, r3, #5
 8014b8a:	69fb      	ldr	r3, [r7, #28]
 8014b8c:	4413      	add	r3, r2
 8014b8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b92:	691a      	ldr	r2, [r3, #16]
 8014b94:	68bb      	ldr	r3, [r7, #8]
 8014b96:	691b      	ldr	r3, [r3, #16]
 8014b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014b9c:	69b9      	ldr	r1, [r7, #24]
 8014b9e:	0148      	lsls	r0, r1, #5
 8014ba0:	69f9      	ldr	r1, [r7, #28]
 8014ba2:	4401      	add	r1, r0
 8014ba4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014ba8:	4313      	orrs	r3, r2
 8014baa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014bac:	79fb      	ldrb	r3, [r7, #7]
 8014bae:	2b01      	cmp	r3, #1
 8014bb0:	d14b      	bne.n	8014c4a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014bb2:	68bb      	ldr	r3, [r7, #8]
 8014bb4:	69db      	ldr	r3, [r3, #28]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d009      	beq.n	8014bce <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014bba:	69bb      	ldr	r3, [r7, #24]
 8014bbc:	015a      	lsls	r2, r3, #5
 8014bbe:	69fb      	ldr	r3, [r7, #28]
 8014bc0:	4413      	add	r3, r2
 8014bc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014bc6:	461a      	mov	r2, r3
 8014bc8:	68bb      	ldr	r3, [r7, #8]
 8014bca:	69db      	ldr	r3, [r3, #28]
 8014bcc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014bce:	68bb      	ldr	r3, [r7, #8]
 8014bd0:	791b      	ldrb	r3, [r3, #4]
 8014bd2:	2b01      	cmp	r3, #1
 8014bd4:	d128      	bne.n	8014c28 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014bd6:	69fb      	ldr	r3, [r7, #28]
 8014bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014bdc:	689b      	ldr	r3, [r3, #8]
 8014bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d110      	bne.n	8014c08 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014be6:	69bb      	ldr	r3, [r7, #24]
 8014be8:	015a      	lsls	r2, r3, #5
 8014bea:	69fb      	ldr	r3, [r7, #28]
 8014bec:	4413      	add	r3, r2
 8014bee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	69ba      	ldr	r2, [r7, #24]
 8014bf6:	0151      	lsls	r1, r2, #5
 8014bf8:	69fa      	ldr	r2, [r7, #28]
 8014bfa:	440a      	add	r2, r1
 8014bfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014c04:	6013      	str	r3, [r2, #0]
 8014c06:	e00f      	b.n	8014c28 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014c08:	69bb      	ldr	r3, [r7, #24]
 8014c0a:	015a      	lsls	r2, r3, #5
 8014c0c:	69fb      	ldr	r3, [r7, #28]
 8014c0e:	4413      	add	r3, r2
 8014c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	69ba      	ldr	r2, [r7, #24]
 8014c18:	0151      	lsls	r1, r2, #5
 8014c1a:	69fa      	ldr	r2, [r7, #28]
 8014c1c:	440a      	add	r2, r1
 8014c1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014c26:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014c28:	69bb      	ldr	r3, [r7, #24]
 8014c2a:	015a      	lsls	r2, r3, #5
 8014c2c:	69fb      	ldr	r3, [r7, #28]
 8014c2e:	4413      	add	r3, r2
 8014c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	69ba      	ldr	r2, [r7, #24]
 8014c38:	0151      	lsls	r1, r2, #5
 8014c3a:	69fa      	ldr	r2, [r7, #28]
 8014c3c:	440a      	add	r2, r1
 8014c3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c42:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014c46:	6013      	str	r3, [r2, #0]
 8014c48:	e169      	b.n	8014f1e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014c4a:	69bb      	ldr	r3, [r7, #24]
 8014c4c:	015a      	lsls	r2, r3, #5
 8014c4e:	69fb      	ldr	r3, [r7, #28]
 8014c50:	4413      	add	r3, r2
 8014c52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	69ba      	ldr	r2, [r7, #24]
 8014c5a:	0151      	lsls	r1, r2, #5
 8014c5c:	69fa      	ldr	r2, [r7, #28]
 8014c5e:	440a      	add	r2, r1
 8014c60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c64:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014c68:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014c6a:	68bb      	ldr	r3, [r7, #8]
 8014c6c:	791b      	ldrb	r3, [r3, #4]
 8014c6e:	2b01      	cmp	r3, #1
 8014c70:	d015      	beq.n	8014c9e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014c72:	68bb      	ldr	r3, [r7, #8]
 8014c74:	691b      	ldr	r3, [r3, #16]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	f000 8151 	beq.w	8014f1e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014c7c:	69fb      	ldr	r3, [r7, #28]
 8014c7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014c84:	68bb      	ldr	r3, [r7, #8]
 8014c86:	781b      	ldrb	r3, [r3, #0]
 8014c88:	f003 030f 	and.w	r3, r3, #15
 8014c8c:	2101      	movs	r1, #1
 8014c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8014c92:	69f9      	ldr	r1, [r7, #28]
 8014c94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014c98:	4313      	orrs	r3, r2
 8014c9a:	634b      	str	r3, [r1, #52]	@ 0x34
 8014c9c:	e13f      	b.n	8014f1e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014c9e:	69fb      	ldr	r3, [r7, #28]
 8014ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014ca4:	689b      	ldr	r3, [r3, #8]
 8014ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d116      	bne.n	8014cdc <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014cae:	69bb      	ldr	r3, [r7, #24]
 8014cb0:	015a      	lsls	r2, r3, #5
 8014cb2:	69fb      	ldr	r3, [r7, #28]
 8014cb4:	4413      	add	r3, r2
 8014cb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	69ba      	ldr	r2, [r7, #24]
 8014cbe:	0151      	lsls	r1, r2, #5
 8014cc0:	69fa      	ldr	r2, [r7, #28]
 8014cc2:	440a      	add	r2, r1
 8014cc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014cc8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014ccc:	6013      	str	r3, [r2, #0]
 8014cce:	e015      	b.n	8014cfc <USB_EPStartXfer+0x310>
 8014cd0:	e007ffff 	.word	0xe007ffff
 8014cd4:	fff80000 	.word	0xfff80000
 8014cd8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014cdc:	69bb      	ldr	r3, [r7, #24]
 8014cde:	015a      	lsls	r2, r3, #5
 8014ce0:	69fb      	ldr	r3, [r7, #28]
 8014ce2:	4413      	add	r3, r2
 8014ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	69ba      	ldr	r2, [r7, #24]
 8014cec:	0151      	lsls	r1, r2, #5
 8014cee:	69fa      	ldr	r2, [r7, #28]
 8014cf0:	440a      	add	r2, r1
 8014cf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014cfa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014cfc:	68bb      	ldr	r3, [r7, #8]
 8014cfe:	68d9      	ldr	r1, [r3, #12]
 8014d00:	68bb      	ldr	r3, [r7, #8]
 8014d02:	781a      	ldrb	r2, [r3, #0]
 8014d04:	68bb      	ldr	r3, [r7, #8]
 8014d06:	691b      	ldr	r3, [r3, #16]
 8014d08:	b298      	uxth	r0, r3
 8014d0a:	79fb      	ldrb	r3, [r7, #7]
 8014d0c:	9300      	str	r3, [sp, #0]
 8014d0e:	4603      	mov	r3, r0
 8014d10:	68f8      	ldr	r0, [r7, #12]
 8014d12:	f000 f9b9 	bl	8015088 <USB_WritePacket>
 8014d16:	e102      	b.n	8014f1e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014d18:	69bb      	ldr	r3, [r7, #24]
 8014d1a:	015a      	lsls	r2, r3, #5
 8014d1c:	69fb      	ldr	r3, [r7, #28]
 8014d1e:	4413      	add	r3, r2
 8014d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d24:	691a      	ldr	r2, [r3, #16]
 8014d26:	69bb      	ldr	r3, [r7, #24]
 8014d28:	0159      	lsls	r1, r3, #5
 8014d2a:	69fb      	ldr	r3, [r7, #28]
 8014d2c:	440b      	add	r3, r1
 8014d2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d32:	4619      	mov	r1, r3
 8014d34:	4b7c      	ldr	r3, [pc, #496]	@ (8014f28 <USB_EPStartXfer+0x53c>)
 8014d36:	4013      	ands	r3, r2
 8014d38:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014d3a:	69bb      	ldr	r3, [r7, #24]
 8014d3c:	015a      	lsls	r2, r3, #5
 8014d3e:	69fb      	ldr	r3, [r7, #28]
 8014d40:	4413      	add	r3, r2
 8014d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d46:	691a      	ldr	r2, [r3, #16]
 8014d48:	69bb      	ldr	r3, [r7, #24]
 8014d4a:	0159      	lsls	r1, r3, #5
 8014d4c:	69fb      	ldr	r3, [r7, #28]
 8014d4e:	440b      	add	r3, r1
 8014d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d54:	4619      	mov	r1, r3
 8014d56:	4b75      	ldr	r3, [pc, #468]	@ (8014f2c <USB_EPStartXfer+0x540>)
 8014d58:	4013      	ands	r3, r2
 8014d5a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8014d5c:	69bb      	ldr	r3, [r7, #24]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d12f      	bne.n	8014dc2 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8014d62:	68bb      	ldr	r3, [r7, #8]
 8014d64:	691b      	ldr	r3, [r3, #16]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d003      	beq.n	8014d72 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8014d6a:	68bb      	ldr	r3, [r7, #8]
 8014d6c:	689a      	ldr	r2, [r3, #8]
 8014d6e:	68bb      	ldr	r3, [r7, #8]
 8014d70:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8014d72:	68bb      	ldr	r3, [r7, #8]
 8014d74:	689a      	ldr	r2, [r3, #8]
 8014d76:	68bb      	ldr	r3, [r7, #8]
 8014d78:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014d7a:	69bb      	ldr	r3, [r7, #24]
 8014d7c:	015a      	lsls	r2, r3, #5
 8014d7e:	69fb      	ldr	r3, [r7, #28]
 8014d80:	4413      	add	r3, r2
 8014d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d86:	691a      	ldr	r2, [r3, #16]
 8014d88:	68bb      	ldr	r3, [r7, #8]
 8014d8a:	6a1b      	ldr	r3, [r3, #32]
 8014d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014d90:	69b9      	ldr	r1, [r7, #24]
 8014d92:	0148      	lsls	r0, r1, #5
 8014d94:	69f9      	ldr	r1, [r7, #28]
 8014d96:	4401      	add	r1, r0
 8014d98:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014d9c:	4313      	orrs	r3, r2
 8014d9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014da0:	69bb      	ldr	r3, [r7, #24]
 8014da2:	015a      	lsls	r2, r3, #5
 8014da4:	69fb      	ldr	r3, [r7, #28]
 8014da6:	4413      	add	r3, r2
 8014da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014dac:	691b      	ldr	r3, [r3, #16]
 8014dae:	69ba      	ldr	r2, [r7, #24]
 8014db0:	0151      	lsls	r1, r2, #5
 8014db2:	69fa      	ldr	r2, [r7, #28]
 8014db4:	440a      	add	r2, r1
 8014db6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014dba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014dbe:	6113      	str	r3, [r2, #16]
 8014dc0:	e05f      	b.n	8014e82 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8014dc2:	68bb      	ldr	r3, [r7, #8]
 8014dc4:	691b      	ldr	r3, [r3, #16]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d123      	bne.n	8014e12 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014dca:	69bb      	ldr	r3, [r7, #24]
 8014dcc:	015a      	lsls	r2, r3, #5
 8014dce:	69fb      	ldr	r3, [r7, #28]
 8014dd0:	4413      	add	r3, r2
 8014dd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014dd6:	691a      	ldr	r2, [r3, #16]
 8014dd8:	68bb      	ldr	r3, [r7, #8]
 8014dda:	689b      	ldr	r3, [r3, #8]
 8014ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014de0:	69b9      	ldr	r1, [r7, #24]
 8014de2:	0148      	lsls	r0, r1, #5
 8014de4:	69f9      	ldr	r1, [r7, #28]
 8014de6:	4401      	add	r1, r0
 8014de8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014dec:	4313      	orrs	r3, r2
 8014dee:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014df0:	69bb      	ldr	r3, [r7, #24]
 8014df2:	015a      	lsls	r2, r3, #5
 8014df4:	69fb      	ldr	r3, [r7, #28]
 8014df6:	4413      	add	r3, r2
 8014df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014dfc:	691b      	ldr	r3, [r3, #16]
 8014dfe:	69ba      	ldr	r2, [r7, #24]
 8014e00:	0151      	lsls	r1, r2, #5
 8014e02:	69fa      	ldr	r2, [r7, #28]
 8014e04:	440a      	add	r2, r1
 8014e06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014e0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014e0e:	6113      	str	r3, [r2, #16]
 8014e10:	e037      	b.n	8014e82 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014e12:	68bb      	ldr	r3, [r7, #8]
 8014e14:	691a      	ldr	r2, [r3, #16]
 8014e16:	68bb      	ldr	r3, [r7, #8]
 8014e18:	689b      	ldr	r3, [r3, #8]
 8014e1a:	4413      	add	r3, r2
 8014e1c:	1e5a      	subs	r2, r3, #1
 8014e1e:	68bb      	ldr	r3, [r7, #8]
 8014e20:	689b      	ldr	r3, [r3, #8]
 8014e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e26:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8014e28:	68bb      	ldr	r3, [r7, #8]
 8014e2a:	689b      	ldr	r3, [r3, #8]
 8014e2c:	8afa      	ldrh	r2, [r7, #22]
 8014e2e:	fb03 f202 	mul.w	r2, r3, r2
 8014e32:	68bb      	ldr	r3, [r7, #8]
 8014e34:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014e36:	69bb      	ldr	r3, [r7, #24]
 8014e38:	015a      	lsls	r2, r3, #5
 8014e3a:	69fb      	ldr	r3, [r7, #28]
 8014e3c:	4413      	add	r3, r2
 8014e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e42:	691a      	ldr	r2, [r3, #16]
 8014e44:	8afb      	ldrh	r3, [r7, #22]
 8014e46:	04d9      	lsls	r1, r3, #19
 8014e48:	4b39      	ldr	r3, [pc, #228]	@ (8014f30 <USB_EPStartXfer+0x544>)
 8014e4a:	400b      	ands	r3, r1
 8014e4c:	69b9      	ldr	r1, [r7, #24]
 8014e4e:	0148      	lsls	r0, r1, #5
 8014e50:	69f9      	ldr	r1, [r7, #28]
 8014e52:	4401      	add	r1, r0
 8014e54:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014e58:	4313      	orrs	r3, r2
 8014e5a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014e5c:	69bb      	ldr	r3, [r7, #24]
 8014e5e:	015a      	lsls	r2, r3, #5
 8014e60:	69fb      	ldr	r3, [r7, #28]
 8014e62:	4413      	add	r3, r2
 8014e64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e68:	691a      	ldr	r2, [r3, #16]
 8014e6a:	68bb      	ldr	r3, [r7, #8]
 8014e6c:	6a1b      	ldr	r3, [r3, #32]
 8014e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014e72:	69b9      	ldr	r1, [r7, #24]
 8014e74:	0148      	lsls	r0, r1, #5
 8014e76:	69f9      	ldr	r1, [r7, #28]
 8014e78:	4401      	add	r1, r0
 8014e7a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014e7e:	4313      	orrs	r3, r2
 8014e80:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8014e82:	79fb      	ldrb	r3, [r7, #7]
 8014e84:	2b01      	cmp	r3, #1
 8014e86:	d10d      	bne.n	8014ea4 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014e88:	68bb      	ldr	r3, [r7, #8]
 8014e8a:	68db      	ldr	r3, [r3, #12]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d009      	beq.n	8014ea4 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014e90:	68bb      	ldr	r3, [r7, #8]
 8014e92:	68d9      	ldr	r1, [r3, #12]
 8014e94:	69bb      	ldr	r3, [r7, #24]
 8014e96:	015a      	lsls	r2, r3, #5
 8014e98:	69fb      	ldr	r3, [r7, #28]
 8014e9a:	4413      	add	r3, r2
 8014e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ea0:	460a      	mov	r2, r1
 8014ea2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014ea4:	68bb      	ldr	r3, [r7, #8]
 8014ea6:	791b      	ldrb	r3, [r3, #4]
 8014ea8:	2b01      	cmp	r3, #1
 8014eaa:	d128      	bne.n	8014efe <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014eac:	69fb      	ldr	r3, [r7, #28]
 8014eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014eb2:	689b      	ldr	r3, [r3, #8]
 8014eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d110      	bne.n	8014ede <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014ebc:	69bb      	ldr	r3, [r7, #24]
 8014ebe:	015a      	lsls	r2, r3, #5
 8014ec0:	69fb      	ldr	r3, [r7, #28]
 8014ec2:	4413      	add	r3, r2
 8014ec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	69ba      	ldr	r2, [r7, #24]
 8014ecc:	0151      	lsls	r1, r2, #5
 8014ece:	69fa      	ldr	r2, [r7, #28]
 8014ed0:	440a      	add	r2, r1
 8014ed2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014ed6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014eda:	6013      	str	r3, [r2, #0]
 8014edc:	e00f      	b.n	8014efe <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014ede:	69bb      	ldr	r3, [r7, #24]
 8014ee0:	015a      	lsls	r2, r3, #5
 8014ee2:	69fb      	ldr	r3, [r7, #28]
 8014ee4:	4413      	add	r3, r2
 8014ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	69ba      	ldr	r2, [r7, #24]
 8014eee:	0151      	lsls	r1, r2, #5
 8014ef0:	69fa      	ldr	r2, [r7, #28]
 8014ef2:	440a      	add	r2, r1
 8014ef4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014ef8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014efc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014efe:	69bb      	ldr	r3, [r7, #24]
 8014f00:	015a      	lsls	r2, r3, #5
 8014f02:	69fb      	ldr	r3, [r7, #28]
 8014f04:	4413      	add	r3, r2
 8014f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	69ba      	ldr	r2, [r7, #24]
 8014f0e:	0151      	lsls	r1, r2, #5
 8014f10:	69fa      	ldr	r2, [r7, #28]
 8014f12:	440a      	add	r2, r1
 8014f14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014f18:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014f1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014f1e:	2300      	movs	r3, #0
}
 8014f20:	4618      	mov	r0, r3
 8014f22:	3720      	adds	r7, #32
 8014f24:	46bd      	mov	sp, r7
 8014f26:	bd80      	pop	{r7, pc}
 8014f28:	fff80000 	.word	0xfff80000
 8014f2c:	e007ffff 	.word	0xe007ffff
 8014f30:	1ff80000 	.word	0x1ff80000

08014f34 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014f34:	b480      	push	{r7}
 8014f36:	b087      	sub	sp, #28
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	6078      	str	r0, [r7, #4]
 8014f3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014f3e:	2300      	movs	r3, #0
 8014f40:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8014f42:	2300      	movs	r3, #0
 8014f44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014f4a:	683b      	ldr	r3, [r7, #0]
 8014f4c:	785b      	ldrb	r3, [r3, #1]
 8014f4e:	2b01      	cmp	r3, #1
 8014f50:	d14a      	bne.n	8014fe8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014f52:	683b      	ldr	r3, [r7, #0]
 8014f54:	781b      	ldrb	r3, [r3, #0]
 8014f56:	015a      	lsls	r2, r3, #5
 8014f58:	693b      	ldr	r3, [r7, #16]
 8014f5a:	4413      	add	r3, r2
 8014f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014f66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014f6a:	f040 8086 	bne.w	801507a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8014f6e:	683b      	ldr	r3, [r7, #0]
 8014f70:	781b      	ldrb	r3, [r3, #0]
 8014f72:	015a      	lsls	r2, r3, #5
 8014f74:	693b      	ldr	r3, [r7, #16]
 8014f76:	4413      	add	r3, r2
 8014f78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	683a      	ldr	r2, [r7, #0]
 8014f80:	7812      	ldrb	r2, [r2, #0]
 8014f82:	0151      	lsls	r1, r2, #5
 8014f84:	693a      	ldr	r2, [r7, #16]
 8014f86:	440a      	add	r2, r1
 8014f88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014f8c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014f90:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014f92:	683b      	ldr	r3, [r7, #0]
 8014f94:	781b      	ldrb	r3, [r3, #0]
 8014f96:	015a      	lsls	r2, r3, #5
 8014f98:	693b      	ldr	r3, [r7, #16]
 8014f9a:	4413      	add	r3, r2
 8014f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	683a      	ldr	r2, [r7, #0]
 8014fa4:	7812      	ldrb	r2, [r2, #0]
 8014fa6:	0151      	lsls	r1, r2, #5
 8014fa8:	693a      	ldr	r2, [r7, #16]
 8014faa:	440a      	add	r2, r1
 8014fac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014fb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014fb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	3301      	adds	r3, #1
 8014fba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8014fc2:	4293      	cmp	r3, r2
 8014fc4:	d902      	bls.n	8014fcc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014fc6:	2301      	movs	r3, #1
 8014fc8:	75fb      	strb	r3, [r7, #23]
          break;
 8014fca:	e056      	b.n	801507a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014fcc:	683b      	ldr	r3, [r7, #0]
 8014fce:	781b      	ldrb	r3, [r3, #0]
 8014fd0:	015a      	lsls	r2, r3, #5
 8014fd2:	693b      	ldr	r3, [r7, #16]
 8014fd4:	4413      	add	r3, r2
 8014fd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014fe0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014fe4:	d0e7      	beq.n	8014fb6 <USB_EPStopXfer+0x82>
 8014fe6:	e048      	b.n	801507a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014fe8:	683b      	ldr	r3, [r7, #0]
 8014fea:	781b      	ldrb	r3, [r3, #0]
 8014fec:	015a      	lsls	r2, r3, #5
 8014fee:	693b      	ldr	r3, [r7, #16]
 8014ff0:	4413      	add	r3, r2
 8014ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015000:	d13b      	bne.n	801507a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8015002:	683b      	ldr	r3, [r7, #0]
 8015004:	781b      	ldrb	r3, [r3, #0]
 8015006:	015a      	lsls	r2, r3, #5
 8015008:	693b      	ldr	r3, [r7, #16]
 801500a:	4413      	add	r3, r2
 801500c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	683a      	ldr	r2, [r7, #0]
 8015014:	7812      	ldrb	r2, [r2, #0]
 8015016:	0151      	lsls	r1, r2, #5
 8015018:	693a      	ldr	r2, [r7, #16]
 801501a:	440a      	add	r2, r1
 801501c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015020:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015024:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8015026:	683b      	ldr	r3, [r7, #0]
 8015028:	781b      	ldrb	r3, [r3, #0]
 801502a:	015a      	lsls	r2, r3, #5
 801502c:	693b      	ldr	r3, [r7, #16]
 801502e:	4413      	add	r3, r2
 8015030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	683a      	ldr	r2, [r7, #0]
 8015038:	7812      	ldrb	r2, [r2, #0]
 801503a:	0151      	lsls	r1, r2, #5
 801503c:	693a      	ldr	r2, [r7, #16]
 801503e:	440a      	add	r2, r1
 8015040:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015044:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015048:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	3301      	adds	r3, #1
 801504e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	f242 7210 	movw	r2, #10000	@ 0x2710
 8015056:	4293      	cmp	r3, r2
 8015058:	d902      	bls.n	8015060 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801505a:	2301      	movs	r3, #1
 801505c:	75fb      	strb	r3, [r7, #23]
          break;
 801505e:	e00c      	b.n	801507a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8015060:	683b      	ldr	r3, [r7, #0]
 8015062:	781b      	ldrb	r3, [r3, #0]
 8015064:	015a      	lsls	r2, r3, #5
 8015066:	693b      	ldr	r3, [r7, #16]
 8015068:	4413      	add	r3, r2
 801506a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015074:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015078:	d0e7      	beq.n	801504a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801507a:	7dfb      	ldrb	r3, [r7, #23]
}
 801507c:	4618      	mov	r0, r3
 801507e:	371c      	adds	r7, #28
 8015080:	46bd      	mov	sp, r7
 8015082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015086:	4770      	bx	lr

08015088 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8015088:	b480      	push	{r7}
 801508a:	b089      	sub	sp, #36	@ 0x24
 801508c:	af00      	add	r7, sp, #0
 801508e:	60f8      	str	r0, [r7, #12]
 8015090:	60b9      	str	r1, [r7, #8]
 8015092:	4611      	mov	r1, r2
 8015094:	461a      	mov	r2, r3
 8015096:	460b      	mov	r3, r1
 8015098:	71fb      	strb	r3, [r7, #7]
 801509a:	4613      	mov	r3, r2
 801509c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80150a2:	68bb      	ldr	r3, [r7, #8]
 80150a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80150a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d123      	bne.n	80150f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80150ae:	88bb      	ldrh	r3, [r7, #4]
 80150b0:	3303      	adds	r3, #3
 80150b2:	089b      	lsrs	r3, r3, #2
 80150b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80150b6:	2300      	movs	r3, #0
 80150b8:	61bb      	str	r3, [r7, #24]
 80150ba:	e018      	b.n	80150ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80150bc:	79fb      	ldrb	r3, [r7, #7]
 80150be:	031a      	lsls	r2, r3, #12
 80150c0:	697b      	ldr	r3, [r7, #20]
 80150c2:	4413      	add	r3, r2
 80150c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80150c8:	461a      	mov	r2, r3
 80150ca:	69fb      	ldr	r3, [r7, #28]
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 80150d0:	69fb      	ldr	r3, [r7, #28]
 80150d2:	3301      	adds	r3, #1
 80150d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80150d6:	69fb      	ldr	r3, [r7, #28]
 80150d8:	3301      	adds	r3, #1
 80150da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80150dc:	69fb      	ldr	r3, [r7, #28]
 80150de:	3301      	adds	r3, #1
 80150e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80150e2:	69fb      	ldr	r3, [r7, #28]
 80150e4:	3301      	adds	r3, #1
 80150e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80150e8:	69bb      	ldr	r3, [r7, #24]
 80150ea:	3301      	adds	r3, #1
 80150ec:	61bb      	str	r3, [r7, #24]
 80150ee:	69ba      	ldr	r2, [r7, #24]
 80150f0:	693b      	ldr	r3, [r7, #16]
 80150f2:	429a      	cmp	r2, r3
 80150f4:	d3e2      	bcc.n	80150bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80150f6:	2300      	movs	r3, #0
}
 80150f8:	4618      	mov	r0, r3
 80150fa:	3724      	adds	r7, #36	@ 0x24
 80150fc:	46bd      	mov	sp, r7
 80150fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015102:	4770      	bx	lr

08015104 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8015104:	b480      	push	{r7}
 8015106:	b08b      	sub	sp, #44	@ 0x2c
 8015108:	af00      	add	r7, sp, #0
 801510a:	60f8      	str	r0, [r7, #12]
 801510c:	60b9      	str	r1, [r7, #8]
 801510e:	4613      	mov	r3, r2
 8015110:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8015116:	68bb      	ldr	r3, [r7, #8]
 8015118:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801511a:	88fb      	ldrh	r3, [r7, #6]
 801511c:	089b      	lsrs	r3, r3, #2
 801511e:	b29b      	uxth	r3, r3
 8015120:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8015122:	88fb      	ldrh	r3, [r7, #6]
 8015124:	f003 0303 	and.w	r3, r3, #3
 8015128:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801512a:	2300      	movs	r3, #0
 801512c:	623b      	str	r3, [r7, #32]
 801512e:	e014      	b.n	801515a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015130:	69bb      	ldr	r3, [r7, #24]
 8015132:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015136:	681a      	ldr	r2, [r3, #0]
 8015138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801513a:	601a      	str	r2, [r3, #0]
    pDest++;
 801513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801513e:	3301      	adds	r3, #1
 8015140:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015144:	3301      	adds	r3, #1
 8015146:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801514a:	3301      	adds	r3, #1
 801514c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015150:	3301      	adds	r3, #1
 8015152:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8015154:	6a3b      	ldr	r3, [r7, #32]
 8015156:	3301      	adds	r3, #1
 8015158:	623b      	str	r3, [r7, #32]
 801515a:	6a3a      	ldr	r2, [r7, #32]
 801515c:	697b      	ldr	r3, [r7, #20]
 801515e:	429a      	cmp	r2, r3
 8015160:	d3e6      	bcc.n	8015130 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8015162:	8bfb      	ldrh	r3, [r7, #30]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d01e      	beq.n	80151a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8015168:	2300      	movs	r3, #0
 801516a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801516c:	69bb      	ldr	r3, [r7, #24]
 801516e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015172:	461a      	mov	r2, r3
 8015174:	f107 0310 	add.w	r3, r7, #16
 8015178:	6812      	ldr	r2, [r2, #0]
 801517a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801517c:	693a      	ldr	r2, [r7, #16]
 801517e:	6a3b      	ldr	r3, [r7, #32]
 8015180:	b2db      	uxtb	r3, r3
 8015182:	00db      	lsls	r3, r3, #3
 8015184:	fa22 f303 	lsr.w	r3, r2, r3
 8015188:	b2da      	uxtb	r2, r3
 801518a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801518c:	701a      	strb	r2, [r3, #0]
      i++;
 801518e:	6a3b      	ldr	r3, [r7, #32]
 8015190:	3301      	adds	r3, #1
 8015192:	623b      	str	r3, [r7, #32]
      pDest++;
 8015194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015196:	3301      	adds	r3, #1
 8015198:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801519a:	8bfb      	ldrh	r3, [r7, #30]
 801519c:	3b01      	subs	r3, #1
 801519e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80151a0:	8bfb      	ldrh	r3, [r7, #30]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d1ea      	bne.n	801517c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80151a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80151a8:	4618      	mov	r0, r3
 80151aa:	372c      	adds	r7, #44	@ 0x2c
 80151ac:	46bd      	mov	sp, r7
 80151ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b2:	4770      	bx	lr

080151b4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80151b4:	b480      	push	{r7}
 80151b6:	b085      	sub	sp, #20
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	6078      	str	r0, [r7, #4]
 80151bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80151c2:	683b      	ldr	r3, [r7, #0]
 80151c4:	781b      	ldrb	r3, [r3, #0]
 80151c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80151c8:	683b      	ldr	r3, [r7, #0]
 80151ca:	785b      	ldrb	r3, [r3, #1]
 80151cc:	2b01      	cmp	r3, #1
 80151ce:	d12c      	bne.n	801522a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80151d0:	68bb      	ldr	r3, [r7, #8]
 80151d2:	015a      	lsls	r2, r3, #5
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	4413      	add	r3, r2
 80151d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	db12      	blt.n	8015208 <USB_EPSetStall+0x54>
 80151e2:	68bb      	ldr	r3, [r7, #8]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d00f      	beq.n	8015208 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80151e8:	68bb      	ldr	r3, [r7, #8]
 80151ea:	015a      	lsls	r2, r3, #5
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	4413      	add	r3, r2
 80151f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	68ba      	ldr	r2, [r7, #8]
 80151f8:	0151      	lsls	r1, r2, #5
 80151fa:	68fa      	ldr	r2, [r7, #12]
 80151fc:	440a      	add	r2, r1
 80151fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015202:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015206:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015208:	68bb      	ldr	r3, [r7, #8]
 801520a:	015a      	lsls	r2, r3, #5
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	4413      	add	r3, r2
 8015210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	68ba      	ldr	r2, [r7, #8]
 8015218:	0151      	lsls	r1, r2, #5
 801521a:	68fa      	ldr	r2, [r7, #12]
 801521c:	440a      	add	r2, r1
 801521e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015222:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015226:	6013      	str	r3, [r2, #0]
 8015228:	e02b      	b.n	8015282 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801522a:	68bb      	ldr	r3, [r7, #8]
 801522c:	015a      	lsls	r2, r3, #5
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	4413      	add	r3, r2
 8015232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	2b00      	cmp	r3, #0
 801523a:	db12      	blt.n	8015262 <USB_EPSetStall+0xae>
 801523c:	68bb      	ldr	r3, [r7, #8]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d00f      	beq.n	8015262 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8015242:	68bb      	ldr	r3, [r7, #8]
 8015244:	015a      	lsls	r2, r3, #5
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	4413      	add	r3, r2
 801524a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	68ba      	ldr	r2, [r7, #8]
 8015252:	0151      	lsls	r1, r2, #5
 8015254:	68fa      	ldr	r2, [r7, #12]
 8015256:	440a      	add	r2, r1
 8015258:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801525c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015260:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8015262:	68bb      	ldr	r3, [r7, #8]
 8015264:	015a      	lsls	r2, r3, #5
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	4413      	add	r3, r2
 801526a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	68ba      	ldr	r2, [r7, #8]
 8015272:	0151      	lsls	r1, r2, #5
 8015274:	68fa      	ldr	r2, [r7, #12]
 8015276:	440a      	add	r2, r1
 8015278:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801527c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015280:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015282:	2300      	movs	r3, #0
}
 8015284:	4618      	mov	r0, r3
 8015286:	3714      	adds	r7, #20
 8015288:	46bd      	mov	sp, r7
 801528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801528e:	4770      	bx	lr

08015290 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015290:	b480      	push	{r7}
 8015292:	b085      	sub	sp, #20
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
 8015298:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801529e:	683b      	ldr	r3, [r7, #0]
 80152a0:	781b      	ldrb	r3, [r3, #0]
 80152a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80152a4:	683b      	ldr	r3, [r7, #0]
 80152a6:	785b      	ldrb	r3, [r3, #1]
 80152a8:	2b01      	cmp	r3, #1
 80152aa:	d128      	bne.n	80152fe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80152ac:	68bb      	ldr	r3, [r7, #8]
 80152ae:	015a      	lsls	r2, r3, #5
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	4413      	add	r3, r2
 80152b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	68ba      	ldr	r2, [r7, #8]
 80152bc:	0151      	lsls	r1, r2, #5
 80152be:	68fa      	ldr	r2, [r7, #12]
 80152c0:	440a      	add	r2, r1
 80152c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80152c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80152ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80152cc:	683b      	ldr	r3, [r7, #0]
 80152ce:	791b      	ldrb	r3, [r3, #4]
 80152d0:	2b03      	cmp	r3, #3
 80152d2:	d003      	beq.n	80152dc <USB_EPClearStall+0x4c>
 80152d4:	683b      	ldr	r3, [r7, #0]
 80152d6:	791b      	ldrb	r3, [r3, #4]
 80152d8:	2b02      	cmp	r3, #2
 80152da:	d138      	bne.n	801534e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80152dc:	68bb      	ldr	r3, [r7, #8]
 80152de:	015a      	lsls	r2, r3, #5
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	4413      	add	r3, r2
 80152e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	68ba      	ldr	r2, [r7, #8]
 80152ec:	0151      	lsls	r1, r2, #5
 80152ee:	68fa      	ldr	r2, [r7, #12]
 80152f0:	440a      	add	r2, r1
 80152f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80152f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80152fa:	6013      	str	r3, [r2, #0]
 80152fc:	e027      	b.n	801534e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80152fe:	68bb      	ldr	r3, [r7, #8]
 8015300:	015a      	lsls	r2, r3, #5
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	4413      	add	r3, r2
 8015306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	68ba      	ldr	r2, [r7, #8]
 801530e:	0151      	lsls	r1, r2, #5
 8015310:	68fa      	ldr	r2, [r7, #12]
 8015312:	440a      	add	r2, r1
 8015314:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015318:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801531c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801531e:	683b      	ldr	r3, [r7, #0]
 8015320:	791b      	ldrb	r3, [r3, #4]
 8015322:	2b03      	cmp	r3, #3
 8015324:	d003      	beq.n	801532e <USB_EPClearStall+0x9e>
 8015326:	683b      	ldr	r3, [r7, #0]
 8015328:	791b      	ldrb	r3, [r3, #4]
 801532a:	2b02      	cmp	r3, #2
 801532c:	d10f      	bne.n	801534e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801532e:	68bb      	ldr	r3, [r7, #8]
 8015330:	015a      	lsls	r2, r3, #5
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	4413      	add	r3, r2
 8015336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	68ba      	ldr	r2, [r7, #8]
 801533e:	0151      	lsls	r1, r2, #5
 8015340:	68fa      	ldr	r2, [r7, #12]
 8015342:	440a      	add	r2, r1
 8015344:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801534c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801534e:	2300      	movs	r3, #0
}
 8015350:	4618      	mov	r0, r3
 8015352:	3714      	adds	r7, #20
 8015354:	46bd      	mov	sp, r7
 8015356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801535a:	4770      	bx	lr

0801535c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801535c:	b480      	push	{r7}
 801535e:	b085      	sub	sp, #20
 8015360:	af00      	add	r7, sp, #0
 8015362:	6078      	str	r0, [r7, #4]
 8015364:	460b      	mov	r3, r1
 8015366:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	68fa      	ldr	r2, [r7, #12]
 8015376:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801537a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 801537e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015386:	681a      	ldr	r2, [r3, #0]
 8015388:	78fb      	ldrb	r3, [r7, #3]
 801538a:	011b      	lsls	r3, r3, #4
 801538c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8015390:	68f9      	ldr	r1, [r7, #12]
 8015392:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015396:	4313      	orrs	r3, r2
 8015398:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801539a:	2300      	movs	r3, #0
}
 801539c:	4618      	mov	r0, r3
 801539e:	3714      	adds	r7, #20
 80153a0:	46bd      	mov	sp, r7
 80153a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a6:	4770      	bx	lr

080153a8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80153a8:	b480      	push	{r7}
 80153aa:	b085      	sub	sp, #20
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	68fa      	ldr	r2, [r7, #12]
 80153be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80153c2:	f023 0303 	bic.w	r3, r3, #3
 80153c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80153ce:	685b      	ldr	r3, [r3, #4]
 80153d0:	68fa      	ldr	r2, [r7, #12]
 80153d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80153d6:	f023 0302 	bic.w	r3, r3, #2
 80153da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80153dc:	2300      	movs	r3, #0
}
 80153de:	4618      	mov	r0, r3
 80153e0:	3714      	adds	r7, #20
 80153e2:	46bd      	mov	sp, r7
 80153e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e8:	4770      	bx	lr

080153ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80153ea:	b480      	push	{r7}
 80153ec:	b085      	sub	sp, #20
 80153ee:	af00      	add	r7, sp, #0
 80153f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	68fa      	ldr	r2, [r7, #12]
 8015400:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015404:	f023 0303 	bic.w	r3, r3, #3
 8015408:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015410:	685b      	ldr	r3, [r3, #4]
 8015412:	68fa      	ldr	r2, [r7, #12]
 8015414:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015418:	f043 0302 	orr.w	r3, r3, #2
 801541c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801541e:	2300      	movs	r3, #0
}
 8015420:	4618      	mov	r0, r3
 8015422:	3714      	adds	r7, #20
 8015424:	46bd      	mov	sp, r7
 8015426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801542a:	4770      	bx	lr

0801542c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 801542c:	b480      	push	{r7}
 801542e:	b085      	sub	sp, #20
 8015430:	af00      	add	r7, sp, #0
 8015432:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	695b      	ldr	r3, [r3, #20]
 8015438:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	699b      	ldr	r3, [r3, #24]
 801543e:	68fa      	ldr	r2, [r7, #12]
 8015440:	4013      	ands	r3, r2
 8015442:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015444:	68fb      	ldr	r3, [r7, #12]
}
 8015446:	4618      	mov	r0, r3
 8015448:	3714      	adds	r7, #20
 801544a:	46bd      	mov	sp, r7
 801544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015450:	4770      	bx	lr

08015452 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8015452:	b480      	push	{r7}
 8015454:	b085      	sub	sp, #20
 8015456:	af00      	add	r7, sp, #0
 8015458:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015464:	699b      	ldr	r3, [r3, #24]
 8015466:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801546e:	69db      	ldr	r3, [r3, #28]
 8015470:	68ba      	ldr	r2, [r7, #8]
 8015472:	4013      	ands	r3, r2
 8015474:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8015476:	68bb      	ldr	r3, [r7, #8]
 8015478:	0c1b      	lsrs	r3, r3, #16
}
 801547a:	4618      	mov	r0, r3
 801547c:	3714      	adds	r7, #20
 801547e:	46bd      	mov	sp, r7
 8015480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015484:	4770      	bx	lr

08015486 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8015486:	b480      	push	{r7}
 8015488:	b085      	sub	sp, #20
 801548a:	af00      	add	r7, sp, #0
 801548c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015498:	699b      	ldr	r3, [r3, #24]
 801549a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154a2:	69db      	ldr	r3, [r3, #28]
 80154a4:	68ba      	ldr	r2, [r7, #8]
 80154a6:	4013      	ands	r3, r2
 80154a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80154aa:	68bb      	ldr	r3, [r7, #8]
 80154ac:	b29b      	uxth	r3, r3
}
 80154ae:	4618      	mov	r0, r3
 80154b0:	3714      	adds	r7, #20
 80154b2:	46bd      	mov	sp, r7
 80154b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b8:	4770      	bx	lr

080154ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80154ba:	b480      	push	{r7}
 80154bc:	b085      	sub	sp, #20
 80154be:	af00      	add	r7, sp, #0
 80154c0:	6078      	str	r0, [r7, #4]
 80154c2:	460b      	mov	r3, r1
 80154c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80154ca:	78fb      	ldrb	r3, [r7, #3]
 80154cc:	015a      	lsls	r2, r3, #5
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	4413      	add	r3, r2
 80154d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80154d6:	689b      	ldr	r3, [r3, #8]
 80154d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154e0:	695b      	ldr	r3, [r3, #20]
 80154e2:	68ba      	ldr	r2, [r7, #8]
 80154e4:	4013      	ands	r3, r2
 80154e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80154e8:	68bb      	ldr	r3, [r7, #8]
}
 80154ea:	4618      	mov	r0, r3
 80154ec:	3714      	adds	r7, #20
 80154ee:	46bd      	mov	sp, r7
 80154f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f4:	4770      	bx	lr

080154f6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80154f6:	b480      	push	{r7}
 80154f8:	b087      	sub	sp, #28
 80154fa:	af00      	add	r7, sp, #0
 80154fc:	6078      	str	r0, [r7, #4]
 80154fe:	460b      	mov	r3, r1
 8015500:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8015506:	697b      	ldr	r3, [r7, #20]
 8015508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801550c:	691b      	ldr	r3, [r3, #16]
 801550e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015510:	697b      	ldr	r3, [r7, #20]
 8015512:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015518:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801551a:	78fb      	ldrb	r3, [r7, #3]
 801551c:	f003 030f 	and.w	r3, r3, #15
 8015520:	68fa      	ldr	r2, [r7, #12]
 8015522:	fa22 f303 	lsr.w	r3, r2, r3
 8015526:	01db      	lsls	r3, r3, #7
 8015528:	b2db      	uxtb	r3, r3
 801552a:	693a      	ldr	r2, [r7, #16]
 801552c:	4313      	orrs	r3, r2
 801552e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015530:	78fb      	ldrb	r3, [r7, #3]
 8015532:	015a      	lsls	r2, r3, #5
 8015534:	697b      	ldr	r3, [r7, #20]
 8015536:	4413      	add	r3, r2
 8015538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801553c:	689b      	ldr	r3, [r3, #8]
 801553e:	693a      	ldr	r2, [r7, #16]
 8015540:	4013      	ands	r3, r2
 8015542:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015544:	68bb      	ldr	r3, [r7, #8]
}
 8015546:	4618      	mov	r0, r3
 8015548:	371c      	adds	r7, #28
 801554a:	46bd      	mov	sp, r7
 801554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015550:	4770      	bx	lr

08015552 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8015552:	b480      	push	{r7}
 8015554:	b083      	sub	sp, #12
 8015556:	af00      	add	r7, sp, #0
 8015558:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	695b      	ldr	r3, [r3, #20]
 801555e:	f003 0301 	and.w	r3, r3, #1
}
 8015562:	4618      	mov	r0, r3
 8015564:	370c      	adds	r7, #12
 8015566:	46bd      	mov	sp, r7
 8015568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801556c:	4770      	bx	lr
	...

08015570 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8015570:	b480      	push	{r7}
 8015572:	b085      	sub	sp, #20
 8015574:	af00      	add	r7, sp, #0
 8015576:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015582:	681a      	ldr	r2, [r3, #0]
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801558a:	4619      	mov	r1, r3
 801558c:	4b09      	ldr	r3, [pc, #36]	@ (80155b4 <USB_ActivateSetup+0x44>)
 801558e:	4013      	ands	r3, r2
 8015590:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015598:	685b      	ldr	r3, [r3, #4]
 801559a:	68fa      	ldr	r2, [r7, #12]
 801559c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80155a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80155a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80155a6:	2300      	movs	r3, #0
}
 80155a8:	4618      	mov	r0, r3
 80155aa:	3714      	adds	r7, #20
 80155ac:	46bd      	mov	sp, r7
 80155ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b2:	4770      	bx	lr
 80155b4:	fffff800 	.word	0xfffff800

080155b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80155b8:	b480      	push	{r7}
 80155ba:	b087      	sub	sp, #28
 80155bc:	af00      	add	r7, sp, #0
 80155be:	60f8      	str	r0, [r7, #12]
 80155c0:	460b      	mov	r3, r1
 80155c2:	607a      	str	r2, [r7, #4]
 80155c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	333c      	adds	r3, #60	@ 0x3c
 80155ce:	3304      	adds	r3, #4
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80155d4:	693b      	ldr	r3, [r7, #16]
 80155d6:	4a26      	ldr	r2, [pc, #152]	@ (8015670 <USB_EP0_OutStart+0xb8>)
 80155d8:	4293      	cmp	r3, r2
 80155da:	d90a      	bls.n	80155f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80155dc:	697b      	ldr	r3, [r7, #20]
 80155de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80155e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80155ec:	d101      	bne.n	80155f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80155ee:	2300      	movs	r3, #0
 80155f0:	e037      	b.n	8015662 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80155f2:	697b      	ldr	r3, [r7, #20]
 80155f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80155f8:	461a      	mov	r2, r3
 80155fa:	2300      	movs	r3, #0
 80155fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80155fe:	697b      	ldr	r3, [r7, #20]
 8015600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015604:	691b      	ldr	r3, [r3, #16]
 8015606:	697a      	ldr	r2, [r7, #20]
 8015608:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801560c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015610:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8015612:	697b      	ldr	r3, [r7, #20]
 8015614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015618:	691b      	ldr	r3, [r3, #16]
 801561a:	697a      	ldr	r2, [r7, #20]
 801561c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015620:	f043 0318 	orr.w	r3, r3, #24
 8015624:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8015626:	697b      	ldr	r3, [r7, #20]
 8015628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801562c:	691b      	ldr	r3, [r3, #16]
 801562e:	697a      	ldr	r2, [r7, #20]
 8015630:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015634:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8015638:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801563a:	7afb      	ldrb	r3, [r7, #11]
 801563c:	2b01      	cmp	r3, #1
 801563e:	d10f      	bne.n	8015660 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015640:	697b      	ldr	r3, [r7, #20]
 8015642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015646:	461a      	mov	r2, r3
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801564c:	697b      	ldr	r3, [r7, #20]
 801564e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	697a      	ldr	r2, [r7, #20]
 8015656:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801565a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 801565e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015660:	2300      	movs	r3, #0
}
 8015662:	4618      	mov	r0, r3
 8015664:	371c      	adds	r7, #28
 8015666:	46bd      	mov	sp, r7
 8015668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801566c:	4770      	bx	lr
 801566e:	bf00      	nop
 8015670:	4f54300a 	.word	0x4f54300a

08015674 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8015674:	b480      	push	{r7}
 8015676:	b085      	sub	sp, #20
 8015678:	af00      	add	r7, sp, #0
 801567a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801567c:	2300      	movs	r3, #0
 801567e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	3301      	adds	r3, #1
 8015684:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801568c:	d901      	bls.n	8015692 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801568e:	2303      	movs	r3, #3
 8015690:	e01b      	b.n	80156ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	691b      	ldr	r3, [r3, #16]
 8015696:	2b00      	cmp	r3, #0
 8015698:	daf2      	bge.n	8015680 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801569a:	2300      	movs	r3, #0
 801569c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	691b      	ldr	r3, [r3, #16]
 80156a2:	f043 0201 	orr.w	r2, r3, #1
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	3301      	adds	r3, #1
 80156ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80156b6:	d901      	bls.n	80156bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80156b8:	2303      	movs	r3, #3
 80156ba:	e006      	b.n	80156ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	691b      	ldr	r3, [r3, #16]
 80156c0:	f003 0301 	and.w	r3, r3, #1
 80156c4:	2b01      	cmp	r3, #1
 80156c6:	d0f0      	beq.n	80156aa <USB_CoreReset+0x36>

  return HAL_OK;
 80156c8:	2300      	movs	r3, #0
}
 80156ca:	4618      	mov	r0, r3
 80156cc:	3714      	adds	r7, #20
 80156ce:	46bd      	mov	sp, r7
 80156d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d4:	4770      	bx	lr

080156d6 <XBEE_Init>:
#include "XBEE.h"

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t XBEE_Init(XBEE_HandleTypeDef *hxbee) {
 80156d6:	b580      	push	{r7, lr}
 80156d8:	b082      	sub	sp, #8
 80156da:	af00      	add	r7, sp, #0
 80156dc:	6078      	str	r0, [r7, #4]
	// Set up the variables
	hxbee->pkt_DMAHead   = 0;
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	2200      	movs	r2, #0
 80156e2:	741a      	strb	r2, [r3, #16]
	hxbee->pktRx_state   = 0;
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	2200      	movs	r2, #0
 80156e8:	745a      	strb	r2, [r3, #17]
	hxbee->pktTx_state   = 0;
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	2200      	movs	r2, #0
 80156ee:	76da      	strb	r2, [r3, #27]
	hxbee->pktRx_idxPush = 0;
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	2200      	movs	r2, #0
 80156f4:	765a      	strb	r2, [r3, #25]
	hxbee->pktRx_idxPop  = 0;
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	2200      	movs	r2, #0
 80156fa:	769a      	strb	r2, [r3, #26]
	hxbee->pktTx_idxPush = 0;
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	2200      	movs	r2, #0
 8015700:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	hxbee->pktTx_idxPop  = 0;
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	2200      	movs	r2, #0
 8015708:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	// Allocate mem
	hxbee->pkt_bufDMA  = malloc(PKT_RAWSIZE);
 801570c:	2044      	movs	r0, #68	@ 0x44
 801570e:	f002 ff2f 	bl	8018570 <malloc>
 8015712:	4603      	mov	r3, r0
 8015714:	461a      	mov	r2, r3
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	609a      	str	r2, [r3, #8]
	hxbee->pkt_bufPart = malloc(PKT_RAWSIZE);
 801571a:	2044      	movs	r0, #68	@ 0x44
 801571c:	f002 ff28 	bl	8018570 <malloc>
 8015720:	4603      	mov	r3, r0
 8015722:	461a      	mov	r2, r3
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	60da      	str	r2, [r3, #12]
	hxbee->pktRx_mem   = malloc(hxbee->pktRx_max*PKT_RAWSIZE);
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	7e1b      	ldrb	r3, [r3, #24]
 801572c:	461a      	mov	r2, r3
 801572e:	4613      	mov	r3, r2
 8015730:	011b      	lsls	r3, r3, #4
 8015732:	4413      	add	r3, r2
 8015734:	009b      	lsls	r3, r3, #2
 8015736:	4618      	mov	r0, r3
 8015738:	f002 ff1a 	bl	8018570 <malloc>
 801573c:	4603      	mov	r3, r0
 801573e:	461a      	mov	r2, r3
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	615a      	str	r2, [r3, #20]
	hxbee->pktTx_mem   = malloc(hxbee->pktTx_max*PKT_RAWSIZE);
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	f893 3020 	ldrb.w	r3, [r3, #32]
 801574a:	461a      	mov	r2, r3
 801574c:	4613      	mov	r3, r2
 801574e:	011b      	lsls	r3, r3, #4
 8015750:	4413      	add	r3, r2
 8015752:	009b      	lsls	r3, r3, #2
 8015754:	4618      	mov	r0, r3
 8015756:	f002 ff0b 	bl	8018570 <malloc>
 801575a:	4603      	mov	r3, r0
 801575c:	461a      	mov	r2, r3
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	61da      	str	r2, [r3, #28]

	// Begin the cyclic UART capture
	// Make sure the DMA is circular
	return HAL_UART_Receive_DMA(hxbee->uart_handle, hxbee->pkt_bufDMA, PKT_RAWSIZE);
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	6818      	ldr	r0, [r3, #0]
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	689b      	ldr	r3, [r3, #8]
 801576a:	2244      	movs	r2, #68	@ 0x44
 801576c:	4619      	mov	r1, r3
 801576e:	f7fc fd4b 	bl	8012208 <HAL_UART_Receive_DMA>
 8015772:	4603      	mov	r3, r0
}
 8015774:	4618      	mov	r0, r3
 8015776:	3708      	adds	r7, #8
 8015778:	46bd      	mov	sp, r7
 801577a:	bd80      	pop	{r7, pc}

0801577c <XBEE_RXPacket>:

// Gets a packet if there's one buffered
// 0 - Success
// 1 - Nothing to Get
uint8_t XBEE_RXPacket(XBEE_HandleTypeDef *hxbee, uint8_t **pRxBuffer, uint16_t *pkt_num) {
 801577c:	b480      	push	{r7}
 801577e:	b087      	sub	sp, #28
 8015780:	af00      	add	r7, sp, #0
 8015782:	60f8      	str	r0, [r7, #12]
 8015784:	60b9      	str	r1, [r7, #8]
 8015786:	607a      	str	r2, [r7, #4]
	// Check if there's an available packet
	if (hxbee->pktRx_idxPop == hxbee->pktRx_idxPush) return 1;
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	7e9a      	ldrb	r2, [r3, #26]
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	7e5b      	ldrb	r3, [r3, #25]
 8015790:	429a      	cmp	r2, r3
 8015792:	d101      	bne.n	8015798 <XBEE_RXPacket+0x1c>
 8015794:	2301      	movs	r3, #1
 8015796:	e05b      	b.n	8015850 <XBEE_RXPacket+0xd4>

	// There's a packet up for grabs, get a pointer to the raw pkt incl. Header
	uint8_t *pRxInternal = hxbee->pktRx_mem + hxbee->pktRx_idxPop*PKT_RAWSIZE;
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	695a      	ldr	r2, [r3, #20]
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	7e9b      	ldrb	r3, [r3, #26]
 80157a0:	4619      	mov	r1, r3
 80157a2:	460b      	mov	r3, r1
 80157a4:	011b      	lsls	r3, r3, #4
 80157a6:	440b      	add	r3, r1
 80157a8:	009b      	lsls	r3, r3, #2
 80157aa:	4413      	add	r3, r2
 80157ac:	613b      	str	r3, [r7, #16]

	hxbee->pktRx_idxPop += 1;
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	7e9b      	ldrb	r3, [r3, #26]
 80157b2:	3301      	adds	r3, #1
 80157b4:	b2da      	uxtb	r2, r3
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	769a      	strb	r2, [r3, #26]
	hxbee->pktRx_idxPop %= hxbee->pktRx_max;
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	7e9b      	ldrb	r3, [r3, #26]
 80157be:	68fa      	ldr	r2, [r7, #12]
 80157c0:	7e12      	ldrb	r2, [r2, #24]
 80157c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80157c6:	fb01 f202 	mul.w	r2, r1, r2
 80157ca:	1a9b      	subs	r3, r3, r2
 80157cc:	b2da      	uxtb	r2, r3
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	769a      	strb	r2, [r3, #26]

	// Compute the checksum
	uint8_t checksum = 0x00;
 80157d2:	2300      	movs	r3, #0
 80157d4:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 80157d6:	2300      	movs	r3, #0
 80157d8:	75bb      	strb	r3, [r7, #22]
 80157da:	e00e      	b.n	80157fa <XBEE_RXPacket+0x7e>
		if (i == 3) continue;
 80157dc:	7dbb      	ldrb	r3, [r7, #22]
 80157de:	2b03      	cmp	r3, #3
 80157e0:	d007      	beq.n	80157f2 <XBEE_RXPacket+0x76>
		checksum ^= pRxInternal[i];
 80157e2:	7dbb      	ldrb	r3, [r7, #22]
 80157e4:	693a      	ldr	r2, [r7, #16]
 80157e6:	4413      	add	r3, r2
 80157e8:	781a      	ldrb	r2, [r3, #0]
 80157ea:	7dfb      	ldrb	r3, [r7, #23]
 80157ec:	4053      	eors	r3, r2
 80157ee:	75fb      	strb	r3, [r7, #23]
 80157f0:	e000      	b.n	80157f4 <XBEE_RXPacket+0x78>
		if (i == 3) continue;
 80157f2:	bf00      	nop
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 80157f4:	7dbb      	ldrb	r3, [r7, #22]
 80157f6:	3301      	adds	r3, #1
 80157f8:	75bb      	strb	r3, [r7, #22]
 80157fa:	7dbb      	ldrb	r3, [r7, #22]
 80157fc:	2b43      	cmp	r3, #67	@ 0x43
 80157fe:	d9ed      	bls.n	80157dc <XBEE_RXPacket+0x60>
	}

	// Packet corrupted, mismatch checksum
	if (pRxInternal[3] != checksum) return 1;
 8015800:	693b      	ldr	r3, [r7, #16]
 8015802:	3303      	adds	r3, #3
 8015804:	781b      	ldrb	r3, [r3, #0]
 8015806:	7dfa      	ldrb	r2, [r7, #23]
 8015808:	429a      	cmp	r2, r3
 801580a:	d001      	beq.n	8015810 <XBEE_RXPacket+0x94>
 801580c:	2301      	movs	r3, #1
 801580e:	e01f      	b.n	8015850 <XBEE_RXPacket+0xd4>

	// Get the 16 bit packet number field
	*pkt_num = 0;
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	2200      	movs	r2, #0
 8015814:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[1];
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	881b      	ldrh	r3, [r3, #0]
 801581a:	693a      	ldr	r2, [r7, #16]
 801581c:	3201      	adds	r2, #1
 801581e:	7812      	ldrb	r2, [r2, #0]
 8015820:	4413      	add	r3, r2
 8015822:	b29a      	uxth	r2, r3
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	801a      	strh	r2, [r3, #0]
	*pkt_num *= 256;
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	881b      	ldrh	r3, [r3, #0]
 801582c:	021b      	lsls	r3, r3, #8
 801582e:	b29a      	uxth	r2, r3
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[2];
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	881b      	ldrh	r3, [r3, #0]
 8015838:	693a      	ldr	r2, [r7, #16]
 801583a:	3202      	adds	r2, #2
 801583c:	7812      	ldrb	r2, [r2, #0]
 801583e:	4413      	add	r3, r2
 8015840:	b29a      	uxth	r2, r3
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	801a      	strh	r2, [r3, #0]

	*pRxBuffer = pRxInternal + 4;
 8015846:	693b      	ldr	r3, [r7, #16]
 8015848:	1d1a      	adds	r2, r3, #4
 801584a:	68bb      	ldr	r3, [r7, #8]
 801584c:	601a      	str	r2, [r3, #0]

	return 0;
 801584e:	2300      	movs	r3, #0
}
 8015850:	4618      	mov	r0, r3
 8015852:	371c      	adds	r7, #28
 8015854:	46bd      	mov	sp, r7
 8015856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585a:	4770      	bx	lr

0801585c <XBEE_TXPacket>:

uint8_t XBEE_TXPacket(XBEE_HandleTypeDef *hxbee, uint8_t *pTxBuffer, uint16_t pkt_num) {
 801585c:	b580      	push	{r7, lr}
 801585e:	b086      	sub	sp, #24
 8015860:	af00      	add	r7, sp, #0
 8015862:	60f8      	str	r0, [r7, #12]
 8015864:	60b9      	str	r1, [r7, #8]
 8015866:	4613      	mov	r3, r2
 8015868:	80fb      	strh	r3, [r7, #6]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktTx_idxPush + 1;
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8015870:	3301      	adds	r3, #1
 8015872:	75bb      	strb	r3, [r7, #22]
	pkt_idx %= hxbee->pktTx_max;
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	f893 2020 	ldrb.w	r2, [r3, #32]
 801587a:	7dbb      	ldrb	r3, [r7, #22]
 801587c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015880:	fb01 f202 	mul.w	r2, r1, r2
 8015884:	1a9b      	subs	r3, r3, r2
 8015886:	75bb      	strb	r3, [r7, #22]

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktTx_idxPop) return 1;
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801588e:	7dba      	ldrb	r2, [r7, #22]
 8015890:	429a      	cmp	r2, r3
 8015892:	d101      	bne.n	8015898 <XBEE_TXPacket+0x3c>
 8015894:	2301      	movs	r3, #1
 8015896:	e047      	b.n	8015928 <XBEE_TXPacket+0xcc>

	// Get a reference to this memory location
	uint8_t *newPkt = hxbee->pktTx_mem + hxbee->pktTx_idxPush*PKT_RAWSIZE;
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	69da      	ldr	r2, [r3, #28]
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80158a2:	4619      	mov	r1, r3
 80158a4:	460b      	mov	r3, r1
 80158a6:	011b      	lsls	r3, r3, #4
 80158a8:	440b      	add	r3, r1
 80158aa:	009b      	lsls	r3, r3, #2
 80158ac:	4413      	add	r3, r2
 80158ae:	613b      	str	r3, [r7, #16]

	// Construct the packet
	newPkt[0] = PKT_DELIMETER;
 80158b0:	693b      	ldr	r3, [r7, #16]
 80158b2:	22aa      	movs	r2, #170	@ 0xaa
 80158b4:	701a      	strb	r2, [r3, #0]
	newPkt[1] = pkt_num >> 8;
 80158b6:	88fb      	ldrh	r3, [r7, #6]
 80158b8:	0a1b      	lsrs	r3, r3, #8
 80158ba:	b29a      	uxth	r2, r3
 80158bc:	693b      	ldr	r3, [r7, #16]
 80158be:	3301      	adds	r3, #1
 80158c0:	b2d2      	uxtb	r2, r2
 80158c2:	701a      	strb	r2, [r3, #0]
	newPkt[2] = pkt_num & 0x00FF;
 80158c4:	693b      	ldr	r3, [r7, #16]
 80158c6:	3302      	adds	r3, #2
 80158c8:	88fa      	ldrh	r2, [r7, #6]
 80158ca:	b2d2      	uxtb	r2, r2
 80158cc:	701a      	strb	r2, [r3, #0]

	memcpy(newPkt + 4, pTxBuffer, PKT_DATASIZE);
 80158ce:	693b      	ldr	r3, [r7, #16]
 80158d0:	3304      	adds	r3, #4
 80158d2:	2240      	movs	r2, #64	@ 0x40
 80158d4:	68b9      	ldr	r1, [r7, #8]
 80158d6:	4618      	mov	r0, r3
 80158d8:	f003 fd2b 	bl	8019332 <memcpy>

	// Compute the checksum
	newPkt[3] = 0x00;
 80158dc:	693b      	ldr	r3, [r7, #16]
 80158de:	3303      	adds	r3, #3
 80158e0:	2200      	movs	r2, #0
 80158e2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 80158e4:	2300      	movs	r3, #0
 80158e6:	75fb      	strb	r3, [r7, #23]
 80158e8:	e013      	b.n	8015912 <XBEE_TXPacket+0xb6>
		if (i == 3) continue;
 80158ea:	7dfb      	ldrb	r3, [r7, #23]
 80158ec:	2b03      	cmp	r3, #3
 80158ee:	d00c      	beq.n	801590a <XBEE_TXPacket+0xae>
		newPkt[3] ^= newPkt[i];
 80158f0:	693b      	ldr	r3, [r7, #16]
 80158f2:	3303      	adds	r3, #3
 80158f4:	7819      	ldrb	r1, [r3, #0]
 80158f6:	7dfb      	ldrb	r3, [r7, #23]
 80158f8:	693a      	ldr	r2, [r7, #16]
 80158fa:	4413      	add	r3, r2
 80158fc:	781a      	ldrb	r2, [r3, #0]
 80158fe:	693b      	ldr	r3, [r7, #16]
 8015900:	3303      	adds	r3, #3
 8015902:	404a      	eors	r2, r1
 8015904:	b2d2      	uxtb	r2, r2
 8015906:	701a      	strb	r2, [r3, #0]
 8015908:	e000      	b.n	801590c <XBEE_TXPacket+0xb0>
		if (i == 3) continue;
 801590a:	bf00      	nop
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 801590c:	7dfb      	ldrb	r3, [r7, #23]
 801590e:	3301      	adds	r3, #1
 8015910:	75fb      	strb	r3, [r7, #23]
 8015912:	7dfb      	ldrb	r3, [r7, #23]
 8015914:	2b43      	cmp	r3, #67	@ 0x43
 8015916:	d9e8      	bls.n	80158ea <XBEE_TXPacket+0x8e>
	}

	// Try and immediately send the packet
	// TODO: Set the bust state, interrupts
	return HAL_UART_Transmit(hxbee->uart_handle, newPkt, PKT_RAWSIZE, 30);	// Transmit the buffer
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	6818      	ldr	r0, [r3, #0]
 801591c:	231e      	movs	r3, #30
 801591e:	2244      	movs	r2, #68	@ 0x44
 8015920:	6939      	ldr	r1, [r7, #16]
 8015922:	f7fc fbe3 	bl	80120ec <HAL_UART_Transmit>
 8015926:	4603      	mov	r3, r0
}
 8015928:	4618      	mov	r0, r3
 801592a:	3718      	adds	r7, #24
 801592c:	46bd      	mov	sp, r7
 801592e:	bd80      	pop	{r7, pc}

08015930 <XBEE_RX_DMACallback>:
// Process incoming packets on DMA callback
// 0 - Success
// 1 - Buffer full
// 2 - Packet malformed
// 3 - Checksum mismatch
uint8_t XBEE_RX_DMACallback(XBEE_HandleTypeDef *hxbee) {
 8015930:	b580      	push	{r7, lr}
 8015932:	b096      	sub	sp, #88	@ 0x58
 8015934:	af00      	add	r7, sp, #0
 8015936:	6078      	str	r0, [r7, #4]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktRx_idxPush + 1;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	7e5b      	ldrb	r3, [r3, #25]
 801593c:	3301      	adds	r3, #1
 801593e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	pkt_idx %= hxbee->pktRx_max;
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	7e1a      	ldrb	r2, [r3, #24]
 8015946:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801594a:	fbb3 f1f2 	udiv	r1, r3, r2
 801594e:	fb01 f202 	mul.w	r2, r1, r2
 8015952:	1a9b      	subs	r3, r3, r2
 8015954:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktRx_idxPop) return 1;
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	7e9b      	ldrb	r3, [r3, #26]
 801595c:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8015960:	429a      	cmp	r2, r3
 8015962:	d101      	bne.n	8015968 <XBEE_RX_DMACallback+0x38>
 8015964:	2301      	movs	r3, #1
 8015966:	e097      	b.n	8015a98 <XBEE_RX_DMACallback+0x168>

	// Create a temporary buffer for the complete packet
	uint8_t pkt_cplt[PKT_RAWSIZE];

	// Store the last readHead, we need this for packet reconstruction if bytes got lost
	uint8_t old_head = hxbee->pkt_DMAHead;
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	7c1b      	ldrb	r3, [r3, #16]
 801596c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	// Find the delimeter
	uint8_t found_delim = 0;
 8015970:	2300      	movs	r3, #0
 8015972:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 8015976:	2300      	movs	r3, #0
 8015978:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 801597c:	e027      	b.n	80159ce <XBEE_RX_DMACallback+0x9e>
		uint8_t packet_ptr = (circular_ptr + hxbee->pkt_DMAHead) % PKT_RAWSIZE;
 801597e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8015982:	687a      	ldr	r2, [r7, #4]
 8015984:	7c12      	ldrb	r2, [r2, #16]
 8015986:	441a      	add	r2, r3
 8015988:	4b45      	ldr	r3, [pc, #276]	@ (8015aa0 <XBEE_RX_DMACallback+0x170>)
 801598a:	fb83 1302 	smull	r1, r3, r3, r2
 801598e:	1159      	asrs	r1, r3, #5
 8015990:	17d3      	asrs	r3, r2, #31
 8015992:	1ac9      	subs	r1, r1, r3
 8015994:	460b      	mov	r3, r1
 8015996:	011b      	lsls	r3, r3, #4
 8015998:	440b      	add	r3, r1
 801599a:	009b      	lsls	r3, r3, #2
 801599c:	1ad1      	subs	r1, r2, r3
 801599e:	460b      	mov	r3, r1
 80159a0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		if (hxbee->pkt_bufDMA[packet_ptr] == PKT_DELIMETER) {
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	689a      	ldr	r2, [r3, #8]
 80159a8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80159ac:	4413      	add	r3, r2
 80159ae:	781b      	ldrb	r3, [r3, #0]
 80159b0:	2baa      	cmp	r3, #170	@ 0xaa
 80159b2:	d107      	bne.n	80159c4 <XBEE_RX_DMACallback+0x94>
			found_delim = 1;					// Update flag
 80159b4:	2301      	movs	r3, #1
 80159b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			hxbee->pkt_DMAHead = packet_ptr;	// Move the readHead
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 80159c0:	741a      	strb	r2, [r3, #16]
			break;
 80159c2:	e008      	b.n	80159d6 <XBEE_RX_DMACallback+0xa6>
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 80159c4:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80159c8:	3301      	adds	r3, #1
 80159ca:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80159ce:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80159d2:	2b43      	cmp	r3, #67	@ 0x43
 80159d4:	d9d3      	bls.n	801597e <XBEE_RX_DMACallback+0x4e>
		}
	}

	// Couldn't find the delimeter, this packet is FUBAR, discard the whole thing
	if (!found_delim) return 2;
 80159d6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d101      	bne.n	80159e2 <XBEE_RX_DMACallback+0xb2>
 80159de:	2302      	movs	r3, #2
 80159e0:	e05a      	b.n	8015a98 <XBEE_RX_DMACallback+0x168>

	// Copy the partial packet contents into the completed packet buffer
	memcpy(pkt_cplt, hxbee->pkt_bufPart, PKT_RAWSIZE);
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	68da      	ldr	r2, [r3, #12]
 80159e6:	f107 030c 	add.w	r3, r7, #12
 80159ea:	4611      	mov	r1, r2
 80159ec:	2244      	movs	r2, #68	@ 0x44
 80159ee:	4618      	mov	r0, r3
 80159f0:	f003 fc9f 	bl	8019332 <memcpy>

	// Copy the new packet contents into the partial packet buffer
	memcpy(hxbee->pkt_bufPart, hxbee->pkt_bufDMA + hxbee->pkt_DMAHead, PKT_RAWSIZE - hxbee->pkt_DMAHead);
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	68d8      	ldr	r0, [r3, #12]
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	689b      	ldr	r3, [r3, #8]
 80159fc:	687a      	ldr	r2, [r7, #4]
 80159fe:	7c12      	ldrb	r2, [r2, #16]
 8015a00:	1899      	adds	r1, r3, r2
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	7c1b      	ldrb	r3, [r3, #16]
 8015a06:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8015a0a:	461a      	mov	r2, r3
 8015a0c:	f003 fc91 	bl	8019332 <memcpy>

	// finish the old packet
	// Account for dropped byte underflow
	// TODO: We can actually correct this instead of just giving up
	if (old_head < hxbee->pkt_DMAHead) {
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	7c1b      	ldrb	r3, [r3, #16]
 8015a14:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8015a18:	429a      	cmp	r2, r3
 8015a1a:	d201      	bcs.n	8015a20 <XBEE_RX_DMACallback+0xf0>
		return 2;
 8015a1c:	2302      	movs	r3, #2
 8015a1e:	e03b      	b.n	8015a98 <XBEE_RX_DMACallback+0x168>
	}

	uint16_t head_slip = old_head - hxbee->pkt_DMAHead;	// How many bytes were dropped
 8015a20:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015a24:	b29b      	uxth	r3, r3
 8015a26:	687a      	ldr	r2, [r7, #4]
 8015a28:	7c12      	ldrb	r2, [r2, #16]
 8015a2a:	1a9b      	subs	r3, r3, r2
 8015a2c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
	memset(pkt_cplt + (PKT_RAWSIZE - old_head), 0x00, head_slip); 									 // Zero dropped bytes
 8015a30:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015a34:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8015a38:	461a      	mov	r2, r3
 8015a3a:	f107 030c 	add.w	r3, r7, #12
 8015a3e:	4413      	add	r3, r2
 8015a40:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8015a44:	2100      	movs	r1, #0
 8015a46:	4618      	mov	r0, r3
 8015a48:	f003 fbe3 	bl	8019212 <memset>
	memcpy(pkt_cplt + (PKT_RAWSIZE - old_head) + head_slip, hxbee->pkt_bufDMA, hxbee->pkt_DMAHead); // Fill in missing bytes
 8015a4c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8015a50:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015a54:	1ad3      	subs	r3, r2, r3
 8015a56:	3344      	adds	r3, #68	@ 0x44
 8015a58:	f107 020c 	add.w	r2, r7, #12
 8015a5c:	18d0      	adds	r0, r2, r3
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	6899      	ldr	r1, [r3, #8]
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	7c1b      	ldrb	r3, [r3, #16]
 8015a66:	461a      	mov	r2, r3
 8015a68:	f003 fc63 	bl	8019332 <memcpy>
	// In the event of a single dropped byte, this is accurate, if more than one gets dropped this may become inaccurate

	// TODO: CHECKSUM

	// If everything went well, increment the index and move the data into the RX buffer
	hxbee->pktRx_idxPush = pkt_idx;
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8015a72:	765a      	strb	r2, [r3, #25]
	memcpy(hxbee->pktRx_mem + hxbee->pktRx_idxPush*PKT_RAWSIZE, pkt_cplt, PKT_RAWSIZE);
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	695a      	ldr	r2, [r3, #20]
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	7e5b      	ldrb	r3, [r3, #25]
 8015a7c:	4619      	mov	r1, r3
 8015a7e:	460b      	mov	r3, r1
 8015a80:	011b      	lsls	r3, r3, #4
 8015a82:	440b      	add	r3, r1
 8015a84:	009b      	lsls	r3, r3, #2
 8015a86:	4413      	add	r3, r2
 8015a88:	4618      	mov	r0, r3
 8015a8a:	f107 030c 	add.w	r3, r7, #12
 8015a8e:	2244      	movs	r2, #68	@ 0x44
 8015a90:	4619      	mov	r1, r3
 8015a92:	f003 fc4e 	bl	8019332 <memcpy>

	return 0;
 8015a96:	2300      	movs	r3, #0
}
 8015a98:	4618      	mov	r0, r3
 8015a9a:	3758      	adds	r7, #88	@ 0x58
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	bd80      	pop	{r7, pc}
 8015aa0:	78787879 	.word	0x78787879

08015aa4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b084      	sub	sp, #16
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
 8015aac:	460b      	mov	r3, r1
 8015aae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015ab0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8015ab4:	f002 fd18 	bl	80184e8 <USBD_static_malloc>
 8015ab8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d109      	bne.n	8015ad4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	32b0      	adds	r2, #176	@ 0xb0
 8015aca:	2100      	movs	r1, #0
 8015acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015ad0:	2302      	movs	r3, #2
 8015ad2:	e0d4      	b.n	8015c7e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015ad4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8015ad8:	2100      	movs	r1, #0
 8015ada:	68f8      	ldr	r0, [r7, #12]
 8015adc:	f003 fb99 	bl	8019212 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	32b0      	adds	r2, #176	@ 0xb0
 8015aea:	68f9      	ldr	r1, [r7, #12]
 8015aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	32b0      	adds	r2, #176	@ 0xb0
 8015afa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	7c1b      	ldrb	r3, [r3, #16]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d138      	bne.n	8015b7e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015b0c:	4b5e      	ldr	r3, [pc, #376]	@ (8015c88 <USBD_CDC_Init+0x1e4>)
 8015b0e:	7819      	ldrb	r1, [r3, #0]
 8015b10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015b14:	2202      	movs	r2, #2
 8015b16:	6878      	ldr	r0, [r7, #4]
 8015b18:	f002 fbc3 	bl	80182a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015b1c:	4b5a      	ldr	r3, [pc, #360]	@ (8015c88 <USBD_CDC_Init+0x1e4>)
 8015b1e:	781b      	ldrb	r3, [r3, #0]
 8015b20:	f003 020f 	and.w	r2, r3, #15
 8015b24:	6879      	ldr	r1, [r7, #4]
 8015b26:	4613      	mov	r3, r2
 8015b28:	009b      	lsls	r3, r3, #2
 8015b2a:	4413      	add	r3, r2
 8015b2c:	009b      	lsls	r3, r3, #2
 8015b2e:	440b      	add	r3, r1
 8015b30:	3324      	adds	r3, #36	@ 0x24
 8015b32:	2201      	movs	r2, #1
 8015b34:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015b36:	4b55      	ldr	r3, [pc, #340]	@ (8015c8c <USBD_CDC_Init+0x1e8>)
 8015b38:	7819      	ldrb	r1, [r3, #0]
 8015b3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015b3e:	2202      	movs	r2, #2
 8015b40:	6878      	ldr	r0, [r7, #4]
 8015b42:	f002 fbae 	bl	80182a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015b46:	4b51      	ldr	r3, [pc, #324]	@ (8015c8c <USBD_CDC_Init+0x1e8>)
 8015b48:	781b      	ldrb	r3, [r3, #0]
 8015b4a:	f003 020f 	and.w	r2, r3, #15
 8015b4e:	6879      	ldr	r1, [r7, #4]
 8015b50:	4613      	mov	r3, r2
 8015b52:	009b      	lsls	r3, r3, #2
 8015b54:	4413      	add	r3, r2
 8015b56:	009b      	lsls	r3, r3, #2
 8015b58:	440b      	add	r3, r1
 8015b5a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015b5e:	2201      	movs	r2, #1
 8015b60:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8015b62:	4b4b      	ldr	r3, [pc, #300]	@ (8015c90 <USBD_CDC_Init+0x1ec>)
 8015b64:	781b      	ldrb	r3, [r3, #0]
 8015b66:	f003 020f 	and.w	r2, r3, #15
 8015b6a:	6879      	ldr	r1, [r7, #4]
 8015b6c:	4613      	mov	r3, r2
 8015b6e:	009b      	lsls	r3, r3, #2
 8015b70:	4413      	add	r3, r2
 8015b72:	009b      	lsls	r3, r3, #2
 8015b74:	440b      	add	r3, r1
 8015b76:	3326      	adds	r3, #38	@ 0x26
 8015b78:	2210      	movs	r2, #16
 8015b7a:	801a      	strh	r2, [r3, #0]
 8015b7c:	e035      	b.n	8015bea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015b7e:	4b42      	ldr	r3, [pc, #264]	@ (8015c88 <USBD_CDC_Init+0x1e4>)
 8015b80:	7819      	ldrb	r1, [r3, #0]
 8015b82:	2340      	movs	r3, #64	@ 0x40
 8015b84:	2202      	movs	r2, #2
 8015b86:	6878      	ldr	r0, [r7, #4]
 8015b88:	f002 fb8b 	bl	80182a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015b8c:	4b3e      	ldr	r3, [pc, #248]	@ (8015c88 <USBD_CDC_Init+0x1e4>)
 8015b8e:	781b      	ldrb	r3, [r3, #0]
 8015b90:	f003 020f 	and.w	r2, r3, #15
 8015b94:	6879      	ldr	r1, [r7, #4]
 8015b96:	4613      	mov	r3, r2
 8015b98:	009b      	lsls	r3, r3, #2
 8015b9a:	4413      	add	r3, r2
 8015b9c:	009b      	lsls	r3, r3, #2
 8015b9e:	440b      	add	r3, r1
 8015ba0:	3324      	adds	r3, #36	@ 0x24
 8015ba2:	2201      	movs	r2, #1
 8015ba4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015ba6:	4b39      	ldr	r3, [pc, #228]	@ (8015c8c <USBD_CDC_Init+0x1e8>)
 8015ba8:	7819      	ldrb	r1, [r3, #0]
 8015baa:	2340      	movs	r3, #64	@ 0x40
 8015bac:	2202      	movs	r2, #2
 8015bae:	6878      	ldr	r0, [r7, #4]
 8015bb0:	f002 fb77 	bl	80182a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015bb4:	4b35      	ldr	r3, [pc, #212]	@ (8015c8c <USBD_CDC_Init+0x1e8>)
 8015bb6:	781b      	ldrb	r3, [r3, #0]
 8015bb8:	f003 020f 	and.w	r2, r3, #15
 8015bbc:	6879      	ldr	r1, [r7, #4]
 8015bbe:	4613      	mov	r3, r2
 8015bc0:	009b      	lsls	r3, r3, #2
 8015bc2:	4413      	add	r3, r2
 8015bc4:	009b      	lsls	r3, r3, #2
 8015bc6:	440b      	add	r3, r1
 8015bc8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015bcc:	2201      	movs	r2, #1
 8015bce:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015bd0:	4b2f      	ldr	r3, [pc, #188]	@ (8015c90 <USBD_CDC_Init+0x1ec>)
 8015bd2:	781b      	ldrb	r3, [r3, #0]
 8015bd4:	f003 020f 	and.w	r2, r3, #15
 8015bd8:	6879      	ldr	r1, [r7, #4]
 8015bda:	4613      	mov	r3, r2
 8015bdc:	009b      	lsls	r3, r3, #2
 8015bde:	4413      	add	r3, r2
 8015be0:	009b      	lsls	r3, r3, #2
 8015be2:	440b      	add	r3, r1
 8015be4:	3326      	adds	r3, #38	@ 0x26
 8015be6:	2210      	movs	r2, #16
 8015be8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015bea:	4b29      	ldr	r3, [pc, #164]	@ (8015c90 <USBD_CDC_Init+0x1ec>)
 8015bec:	7819      	ldrb	r1, [r3, #0]
 8015bee:	2308      	movs	r3, #8
 8015bf0:	2203      	movs	r2, #3
 8015bf2:	6878      	ldr	r0, [r7, #4]
 8015bf4:	f002 fb55 	bl	80182a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015bf8:	4b25      	ldr	r3, [pc, #148]	@ (8015c90 <USBD_CDC_Init+0x1ec>)
 8015bfa:	781b      	ldrb	r3, [r3, #0]
 8015bfc:	f003 020f 	and.w	r2, r3, #15
 8015c00:	6879      	ldr	r1, [r7, #4]
 8015c02:	4613      	mov	r3, r2
 8015c04:	009b      	lsls	r3, r3, #2
 8015c06:	4413      	add	r3, r2
 8015c08:	009b      	lsls	r3, r3, #2
 8015c0a:	440b      	add	r3, r1
 8015c0c:	3324      	adds	r3, #36	@ 0x24
 8015c0e:	2201      	movs	r2, #1
 8015c10:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	2200      	movs	r2, #0
 8015c16:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015c20:	687a      	ldr	r2, [r7, #4]
 8015c22:	33b0      	adds	r3, #176	@ 0xb0
 8015c24:	009b      	lsls	r3, r3, #2
 8015c26:	4413      	add	r3, r2
 8015c28:	685b      	ldr	r3, [r3, #4]
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	2200      	movs	r2, #0
 8015c32:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	2200      	movs	r2, #0
 8015c3a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d101      	bne.n	8015c4c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8015c48:	2302      	movs	r3, #2
 8015c4a:	e018      	b.n	8015c7e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	7c1b      	ldrb	r3, [r3, #16]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d10a      	bne.n	8015c6a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015c54:	4b0d      	ldr	r3, [pc, #52]	@ (8015c8c <USBD_CDC_Init+0x1e8>)
 8015c56:	7819      	ldrb	r1, [r3, #0]
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015c5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015c62:	6878      	ldr	r0, [r7, #4]
 8015c64:	f002 fc0c 	bl	8018480 <USBD_LL_PrepareReceive>
 8015c68:	e008      	b.n	8015c7c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015c6a:	4b08      	ldr	r3, [pc, #32]	@ (8015c8c <USBD_CDC_Init+0x1e8>)
 8015c6c:	7819      	ldrb	r1, [r3, #0]
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015c74:	2340      	movs	r3, #64	@ 0x40
 8015c76:	6878      	ldr	r0, [r7, #4]
 8015c78:	f002 fc02 	bl	8018480 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015c7c:	2300      	movs	r3, #0
}
 8015c7e:	4618      	mov	r0, r3
 8015c80:	3710      	adds	r7, #16
 8015c82:	46bd      	mov	sp, r7
 8015c84:	bd80      	pop	{r7, pc}
 8015c86:	bf00      	nop
 8015c88:	240000af 	.word	0x240000af
 8015c8c:	240000b0 	.word	0x240000b0
 8015c90:	240000b1 	.word	0x240000b1

08015c94 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015c94:	b580      	push	{r7, lr}
 8015c96:	b082      	sub	sp, #8
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	6078      	str	r0, [r7, #4]
 8015c9c:	460b      	mov	r3, r1
 8015c9e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8015ca0:	4b3a      	ldr	r3, [pc, #232]	@ (8015d8c <USBD_CDC_DeInit+0xf8>)
 8015ca2:	781b      	ldrb	r3, [r3, #0]
 8015ca4:	4619      	mov	r1, r3
 8015ca6:	6878      	ldr	r0, [r7, #4]
 8015ca8:	f002 fb21 	bl	80182ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015cac:	4b37      	ldr	r3, [pc, #220]	@ (8015d8c <USBD_CDC_DeInit+0xf8>)
 8015cae:	781b      	ldrb	r3, [r3, #0]
 8015cb0:	f003 020f 	and.w	r2, r3, #15
 8015cb4:	6879      	ldr	r1, [r7, #4]
 8015cb6:	4613      	mov	r3, r2
 8015cb8:	009b      	lsls	r3, r3, #2
 8015cba:	4413      	add	r3, r2
 8015cbc:	009b      	lsls	r3, r3, #2
 8015cbe:	440b      	add	r3, r1
 8015cc0:	3324      	adds	r3, #36	@ 0x24
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8015cc6:	4b32      	ldr	r3, [pc, #200]	@ (8015d90 <USBD_CDC_DeInit+0xfc>)
 8015cc8:	781b      	ldrb	r3, [r3, #0]
 8015cca:	4619      	mov	r1, r3
 8015ccc:	6878      	ldr	r0, [r7, #4]
 8015cce:	f002 fb0e 	bl	80182ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8015cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8015d90 <USBD_CDC_DeInit+0xfc>)
 8015cd4:	781b      	ldrb	r3, [r3, #0]
 8015cd6:	f003 020f 	and.w	r2, r3, #15
 8015cda:	6879      	ldr	r1, [r7, #4]
 8015cdc:	4613      	mov	r3, r2
 8015cde:	009b      	lsls	r3, r3, #2
 8015ce0:	4413      	add	r3, r2
 8015ce2:	009b      	lsls	r3, r3, #2
 8015ce4:	440b      	add	r3, r1
 8015ce6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015cea:	2200      	movs	r2, #0
 8015cec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015cee:	4b29      	ldr	r3, [pc, #164]	@ (8015d94 <USBD_CDC_DeInit+0x100>)
 8015cf0:	781b      	ldrb	r3, [r3, #0]
 8015cf2:	4619      	mov	r1, r3
 8015cf4:	6878      	ldr	r0, [r7, #4]
 8015cf6:	f002 fafa 	bl	80182ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8015cfa:	4b26      	ldr	r3, [pc, #152]	@ (8015d94 <USBD_CDC_DeInit+0x100>)
 8015cfc:	781b      	ldrb	r3, [r3, #0]
 8015cfe:	f003 020f 	and.w	r2, r3, #15
 8015d02:	6879      	ldr	r1, [r7, #4]
 8015d04:	4613      	mov	r3, r2
 8015d06:	009b      	lsls	r3, r3, #2
 8015d08:	4413      	add	r3, r2
 8015d0a:	009b      	lsls	r3, r3, #2
 8015d0c:	440b      	add	r3, r1
 8015d0e:	3324      	adds	r3, #36	@ 0x24
 8015d10:	2200      	movs	r2, #0
 8015d12:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8015d14:	4b1f      	ldr	r3, [pc, #124]	@ (8015d94 <USBD_CDC_DeInit+0x100>)
 8015d16:	781b      	ldrb	r3, [r3, #0]
 8015d18:	f003 020f 	and.w	r2, r3, #15
 8015d1c:	6879      	ldr	r1, [r7, #4]
 8015d1e:	4613      	mov	r3, r2
 8015d20:	009b      	lsls	r3, r3, #2
 8015d22:	4413      	add	r3, r2
 8015d24:	009b      	lsls	r3, r3, #2
 8015d26:	440b      	add	r3, r1
 8015d28:	3326      	adds	r3, #38	@ 0x26
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	32b0      	adds	r2, #176	@ 0xb0
 8015d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d01f      	beq.n	8015d80 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d46:	687a      	ldr	r2, [r7, #4]
 8015d48:	33b0      	adds	r3, #176	@ 0xb0
 8015d4a:	009b      	lsls	r3, r3, #2
 8015d4c:	4413      	add	r3, r2
 8015d4e:	685b      	ldr	r3, [r3, #4]
 8015d50:	685b      	ldr	r3, [r3, #4]
 8015d52:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	32b0      	adds	r2, #176	@ 0xb0
 8015d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d62:	4618      	mov	r0, r3
 8015d64:	f002 fbce 	bl	8018504 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	32b0      	adds	r2, #176	@ 0xb0
 8015d72:	2100      	movs	r1, #0
 8015d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	2200      	movs	r2, #0
 8015d7c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015d80:	2300      	movs	r3, #0
}
 8015d82:	4618      	mov	r0, r3
 8015d84:	3708      	adds	r7, #8
 8015d86:	46bd      	mov	sp, r7
 8015d88:	bd80      	pop	{r7, pc}
 8015d8a:	bf00      	nop
 8015d8c:	240000af 	.word	0x240000af
 8015d90:	240000b0 	.word	0x240000b0
 8015d94:	240000b1 	.word	0x240000b1

08015d98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b086      	sub	sp, #24
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	6078      	str	r0, [r7, #4]
 8015da0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	32b0      	adds	r2, #176	@ 0xb0
 8015dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015db0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015db2:	2300      	movs	r3, #0
 8015db4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8015db6:	2300      	movs	r3, #0
 8015db8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8015dba:	2300      	movs	r3, #0
 8015dbc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8015dbe:	693b      	ldr	r3, [r7, #16]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d101      	bne.n	8015dc8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015dc4:	2303      	movs	r3, #3
 8015dc6:	e0bf      	b.n	8015f48 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	781b      	ldrb	r3, [r3, #0]
 8015dcc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d050      	beq.n	8015e76 <USBD_CDC_Setup+0xde>
 8015dd4:	2b20      	cmp	r3, #32
 8015dd6:	f040 80af 	bne.w	8015f38 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015dda:	683b      	ldr	r3, [r7, #0]
 8015ddc:	88db      	ldrh	r3, [r3, #6]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d03a      	beq.n	8015e58 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015de2:	683b      	ldr	r3, [r7, #0]
 8015de4:	781b      	ldrb	r3, [r3, #0]
 8015de6:	b25b      	sxtb	r3, r3
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	da1b      	bge.n	8015e24 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015df2:	687a      	ldr	r2, [r7, #4]
 8015df4:	33b0      	adds	r3, #176	@ 0xb0
 8015df6:	009b      	lsls	r3, r3, #2
 8015df8:	4413      	add	r3, r2
 8015dfa:	685b      	ldr	r3, [r3, #4]
 8015dfc:	689b      	ldr	r3, [r3, #8]
 8015dfe:	683a      	ldr	r2, [r7, #0]
 8015e00:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015e02:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015e04:	683a      	ldr	r2, [r7, #0]
 8015e06:	88d2      	ldrh	r2, [r2, #6]
 8015e08:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015e0a:	683b      	ldr	r3, [r7, #0]
 8015e0c:	88db      	ldrh	r3, [r3, #6]
 8015e0e:	2b07      	cmp	r3, #7
 8015e10:	bf28      	it	cs
 8015e12:	2307      	movcs	r3, #7
 8015e14:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8015e16:	693b      	ldr	r3, [r7, #16]
 8015e18:	89fa      	ldrh	r2, [r7, #14]
 8015e1a:	4619      	mov	r1, r3
 8015e1c:	6878      	ldr	r0, [r7, #4]
 8015e1e:	f001 fdbd 	bl	801799c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015e22:	e090      	b.n	8015f46 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015e24:	683b      	ldr	r3, [r7, #0]
 8015e26:	785a      	ldrb	r2, [r3, #1]
 8015e28:	693b      	ldr	r3, [r7, #16]
 8015e2a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015e2e:	683b      	ldr	r3, [r7, #0]
 8015e30:	88db      	ldrh	r3, [r3, #6]
 8015e32:	2b3f      	cmp	r3, #63	@ 0x3f
 8015e34:	d803      	bhi.n	8015e3e <USBD_CDC_Setup+0xa6>
 8015e36:	683b      	ldr	r3, [r7, #0]
 8015e38:	88db      	ldrh	r3, [r3, #6]
 8015e3a:	b2da      	uxtb	r2, r3
 8015e3c:	e000      	b.n	8015e40 <USBD_CDC_Setup+0xa8>
 8015e3e:	2240      	movs	r2, #64	@ 0x40
 8015e40:	693b      	ldr	r3, [r7, #16]
 8015e42:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8015e46:	6939      	ldr	r1, [r7, #16]
 8015e48:	693b      	ldr	r3, [r7, #16]
 8015e4a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8015e4e:	461a      	mov	r2, r3
 8015e50:	6878      	ldr	r0, [r7, #4]
 8015e52:	f001 fdcf 	bl	80179f4 <USBD_CtlPrepareRx>
      break;
 8015e56:	e076      	b.n	8015f46 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015e5e:	687a      	ldr	r2, [r7, #4]
 8015e60:	33b0      	adds	r3, #176	@ 0xb0
 8015e62:	009b      	lsls	r3, r3, #2
 8015e64:	4413      	add	r3, r2
 8015e66:	685b      	ldr	r3, [r3, #4]
 8015e68:	689b      	ldr	r3, [r3, #8]
 8015e6a:	683a      	ldr	r2, [r7, #0]
 8015e6c:	7850      	ldrb	r0, [r2, #1]
 8015e6e:	2200      	movs	r2, #0
 8015e70:	6839      	ldr	r1, [r7, #0]
 8015e72:	4798      	blx	r3
      break;
 8015e74:	e067      	b.n	8015f46 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015e76:	683b      	ldr	r3, [r7, #0]
 8015e78:	785b      	ldrb	r3, [r3, #1]
 8015e7a:	2b0b      	cmp	r3, #11
 8015e7c:	d851      	bhi.n	8015f22 <USBD_CDC_Setup+0x18a>
 8015e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8015e84 <USBD_CDC_Setup+0xec>)
 8015e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e84:	08015eb5 	.word	0x08015eb5
 8015e88:	08015f31 	.word	0x08015f31
 8015e8c:	08015f23 	.word	0x08015f23
 8015e90:	08015f23 	.word	0x08015f23
 8015e94:	08015f23 	.word	0x08015f23
 8015e98:	08015f23 	.word	0x08015f23
 8015e9c:	08015f23 	.word	0x08015f23
 8015ea0:	08015f23 	.word	0x08015f23
 8015ea4:	08015f23 	.word	0x08015f23
 8015ea8:	08015f23 	.word	0x08015f23
 8015eac:	08015edf 	.word	0x08015edf
 8015eb0:	08015f09 	.word	0x08015f09
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015eba:	b2db      	uxtb	r3, r3
 8015ebc:	2b03      	cmp	r3, #3
 8015ebe:	d107      	bne.n	8015ed0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015ec0:	f107 030a 	add.w	r3, r7, #10
 8015ec4:	2202      	movs	r2, #2
 8015ec6:	4619      	mov	r1, r3
 8015ec8:	6878      	ldr	r0, [r7, #4]
 8015eca:	f001 fd67 	bl	801799c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015ece:	e032      	b.n	8015f36 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015ed0:	6839      	ldr	r1, [r7, #0]
 8015ed2:	6878      	ldr	r0, [r7, #4]
 8015ed4:	f001 fce5 	bl	80178a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8015ed8:	2303      	movs	r3, #3
 8015eda:	75fb      	strb	r3, [r7, #23]
          break;
 8015edc:	e02b      	b.n	8015f36 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015ee4:	b2db      	uxtb	r3, r3
 8015ee6:	2b03      	cmp	r3, #3
 8015ee8:	d107      	bne.n	8015efa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015eea:	f107 030d 	add.w	r3, r7, #13
 8015eee:	2201      	movs	r2, #1
 8015ef0:	4619      	mov	r1, r3
 8015ef2:	6878      	ldr	r0, [r7, #4]
 8015ef4:	f001 fd52 	bl	801799c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015ef8:	e01d      	b.n	8015f36 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015efa:	6839      	ldr	r1, [r7, #0]
 8015efc:	6878      	ldr	r0, [r7, #4]
 8015efe:	f001 fcd0 	bl	80178a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8015f02:	2303      	movs	r3, #3
 8015f04:	75fb      	strb	r3, [r7, #23]
          break;
 8015f06:	e016      	b.n	8015f36 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015f0e:	b2db      	uxtb	r3, r3
 8015f10:	2b03      	cmp	r3, #3
 8015f12:	d00f      	beq.n	8015f34 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015f14:	6839      	ldr	r1, [r7, #0]
 8015f16:	6878      	ldr	r0, [r7, #4]
 8015f18:	f001 fcc3 	bl	80178a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8015f1c:	2303      	movs	r3, #3
 8015f1e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015f20:	e008      	b.n	8015f34 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015f22:	6839      	ldr	r1, [r7, #0]
 8015f24:	6878      	ldr	r0, [r7, #4]
 8015f26:	f001 fcbc 	bl	80178a2 <USBD_CtlError>
          ret = USBD_FAIL;
 8015f2a:	2303      	movs	r3, #3
 8015f2c:	75fb      	strb	r3, [r7, #23]
          break;
 8015f2e:	e002      	b.n	8015f36 <USBD_CDC_Setup+0x19e>
          break;
 8015f30:	bf00      	nop
 8015f32:	e008      	b.n	8015f46 <USBD_CDC_Setup+0x1ae>
          break;
 8015f34:	bf00      	nop
      }
      break;
 8015f36:	e006      	b.n	8015f46 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015f38:	6839      	ldr	r1, [r7, #0]
 8015f3a:	6878      	ldr	r0, [r7, #4]
 8015f3c:	f001 fcb1 	bl	80178a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8015f40:	2303      	movs	r3, #3
 8015f42:	75fb      	strb	r3, [r7, #23]
      break;
 8015f44:	bf00      	nop
  }

  return (uint8_t)ret;
 8015f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f48:	4618      	mov	r0, r3
 8015f4a:	3718      	adds	r7, #24
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	bd80      	pop	{r7, pc}

08015f50 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b084      	sub	sp, #16
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	6078      	str	r0, [r7, #4]
 8015f58:	460b      	mov	r3, r1
 8015f5a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015f62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	32b0      	adds	r2, #176	@ 0xb0
 8015f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d101      	bne.n	8015f7a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015f76:	2303      	movs	r3, #3
 8015f78:	e065      	b.n	8016046 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	32b0      	adds	r2, #176	@ 0xb0
 8015f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f88:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015f8a:	78fb      	ldrb	r3, [r7, #3]
 8015f8c:	f003 020f 	and.w	r2, r3, #15
 8015f90:	6879      	ldr	r1, [r7, #4]
 8015f92:	4613      	mov	r3, r2
 8015f94:	009b      	lsls	r3, r3, #2
 8015f96:	4413      	add	r3, r2
 8015f98:	009b      	lsls	r3, r3, #2
 8015f9a:	440b      	add	r3, r1
 8015f9c:	3318      	adds	r3, #24
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d02f      	beq.n	8016004 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015fa4:	78fb      	ldrb	r3, [r7, #3]
 8015fa6:	f003 020f 	and.w	r2, r3, #15
 8015faa:	6879      	ldr	r1, [r7, #4]
 8015fac:	4613      	mov	r3, r2
 8015fae:	009b      	lsls	r3, r3, #2
 8015fb0:	4413      	add	r3, r2
 8015fb2:	009b      	lsls	r3, r3, #2
 8015fb4:	440b      	add	r3, r1
 8015fb6:	3318      	adds	r3, #24
 8015fb8:	681a      	ldr	r2, [r3, #0]
 8015fba:	78fb      	ldrb	r3, [r7, #3]
 8015fbc:	f003 010f 	and.w	r1, r3, #15
 8015fc0:	68f8      	ldr	r0, [r7, #12]
 8015fc2:	460b      	mov	r3, r1
 8015fc4:	00db      	lsls	r3, r3, #3
 8015fc6:	440b      	add	r3, r1
 8015fc8:	009b      	lsls	r3, r3, #2
 8015fca:	4403      	add	r3, r0
 8015fcc:	331c      	adds	r3, #28
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	fbb2 f1f3 	udiv	r1, r2, r3
 8015fd4:	fb01 f303 	mul.w	r3, r1, r3
 8015fd8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d112      	bne.n	8016004 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015fde:	78fb      	ldrb	r3, [r7, #3]
 8015fe0:	f003 020f 	and.w	r2, r3, #15
 8015fe4:	6879      	ldr	r1, [r7, #4]
 8015fe6:	4613      	mov	r3, r2
 8015fe8:	009b      	lsls	r3, r3, #2
 8015fea:	4413      	add	r3, r2
 8015fec:	009b      	lsls	r3, r3, #2
 8015fee:	440b      	add	r3, r1
 8015ff0:	3318      	adds	r3, #24
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015ff6:	78f9      	ldrb	r1, [r7, #3]
 8015ff8:	2300      	movs	r3, #0
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	6878      	ldr	r0, [r7, #4]
 8015ffe:	f002 fa1e 	bl	801843e <USBD_LL_Transmit>
 8016002:	e01f      	b.n	8016044 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8016004:	68bb      	ldr	r3, [r7, #8]
 8016006:	2200      	movs	r2, #0
 8016008:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016012:	687a      	ldr	r2, [r7, #4]
 8016014:	33b0      	adds	r3, #176	@ 0xb0
 8016016:	009b      	lsls	r3, r3, #2
 8016018:	4413      	add	r3, r2
 801601a:	685b      	ldr	r3, [r3, #4]
 801601c:	691b      	ldr	r3, [r3, #16]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d010      	beq.n	8016044 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016028:	687a      	ldr	r2, [r7, #4]
 801602a:	33b0      	adds	r3, #176	@ 0xb0
 801602c:	009b      	lsls	r3, r3, #2
 801602e:	4413      	add	r3, r2
 8016030:	685b      	ldr	r3, [r3, #4]
 8016032:	691b      	ldr	r3, [r3, #16]
 8016034:	68ba      	ldr	r2, [r7, #8]
 8016036:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801603a:	68ba      	ldr	r2, [r7, #8]
 801603c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8016040:	78fa      	ldrb	r2, [r7, #3]
 8016042:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8016044:	2300      	movs	r3, #0
}
 8016046:	4618      	mov	r0, r3
 8016048:	3710      	adds	r7, #16
 801604a:	46bd      	mov	sp, r7
 801604c:	bd80      	pop	{r7, pc}

0801604e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801604e:	b580      	push	{r7, lr}
 8016050:	b084      	sub	sp, #16
 8016052:	af00      	add	r7, sp, #0
 8016054:	6078      	str	r0, [r7, #4]
 8016056:	460b      	mov	r3, r1
 8016058:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	32b0      	adds	r2, #176	@ 0xb0
 8016064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016068:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	32b0      	adds	r2, #176	@ 0xb0
 8016074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d101      	bne.n	8016080 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801607c:	2303      	movs	r3, #3
 801607e:	e01a      	b.n	80160b6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016080:	78fb      	ldrb	r3, [r7, #3]
 8016082:	4619      	mov	r1, r3
 8016084:	6878      	ldr	r0, [r7, #4]
 8016086:	f002 fa1c 	bl	80184c2 <USBD_LL_GetRxDataSize>
 801608a:	4602      	mov	r2, r0
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016098:	687a      	ldr	r2, [r7, #4]
 801609a:	33b0      	adds	r3, #176	@ 0xb0
 801609c:	009b      	lsls	r3, r3, #2
 801609e:	4413      	add	r3, r2
 80160a0:	685b      	ldr	r3, [r3, #4]
 80160a2:	68db      	ldr	r3, [r3, #12]
 80160a4:	68fa      	ldr	r2, [r7, #12]
 80160a6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80160aa:	68fa      	ldr	r2, [r7, #12]
 80160ac:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80160b0:	4611      	mov	r1, r2
 80160b2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80160b4:	2300      	movs	r3, #0
}
 80160b6:	4618      	mov	r0, r3
 80160b8:	3710      	adds	r7, #16
 80160ba:	46bd      	mov	sp, r7
 80160bc:	bd80      	pop	{r7, pc}

080160be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80160be:	b580      	push	{r7, lr}
 80160c0:	b084      	sub	sp, #16
 80160c2:	af00      	add	r7, sp, #0
 80160c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	32b0      	adds	r2, #176	@ 0xb0
 80160d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d101      	bne.n	80160e0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80160dc:	2303      	movs	r3, #3
 80160de:	e024      	b.n	801612a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80160e6:	687a      	ldr	r2, [r7, #4]
 80160e8:	33b0      	adds	r3, #176	@ 0xb0
 80160ea:	009b      	lsls	r3, r3, #2
 80160ec:	4413      	add	r3, r2
 80160ee:	685b      	ldr	r3, [r3, #4]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d019      	beq.n	8016128 <USBD_CDC_EP0_RxReady+0x6a>
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80160fa:	2bff      	cmp	r3, #255	@ 0xff
 80160fc:	d014      	beq.n	8016128 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016104:	687a      	ldr	r2, [r7, #4]
 8016106:	33b0      	adds	r3, #176	@ 0xb0
 8016108:	009b      	lsls	r3, r3, #2
 801610a:	4413      	add	r3, r2
 801610c:	685b      	ldr	r3, [r3, #4]
 801610e:	689b      	ldr	r3, [r3, #8]
 8016110:	68fa      	ldr	r2, [r7, #12]
 8016112:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8016116:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8016118:	68fa      	ldr	r2, [r7, #12]
 801611a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801611e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	22ff      	movs	r2, #255	@ 0xff
 8016124:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8016128:	2300      	movs	r3, #0
}
 801612a:	4618      	mov	r0, r3
 801612c:	3710      	adds	r7, #16
 801612e:	46bd      	mov	sp, r7
 8016130:	bd80      	pop	{r7, pc}
	...

08016134 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016134:	b580      	push	{r7, lr}
 8016136:	b086      	sub	sp, #24
 8016138:	af00      	add	r7, sp, #0
 801613a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801613c:	2182      	movs	r1, #130	@ 0x82
 801613e:	4818      	ldr	r0, [pc, #96]	@ (80161a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016140:	f000 fd4f 	bl	8016be2 <USBD_GetEpDesc>
 8016144:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016146:	2101      	movs	r1, #1
 8016148:	4815      	ldr	r0, [pc, #84]	@ (80161a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801614a:	f000 fd4a 	bl	8016be2 <USBD_GetEpDesc>
 801614e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016150:	2181      	movs	r1, #129	@ 0x81
 8016152:	4813      	ldr	r0, [pc, #76]	@ (80161a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016154:	f000 fd45 	bl	8016be2 <USBD_GetEpDesc>
 8016158:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801615a:	697b      	ldr	r3, [r7, #20]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d002      	beq.n	8016166 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016160:	697b      	ldr	r3, [r7, #20]
 8016162:	2210      	movs	r2, #16
 8016164:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016166:	693b      	ldr	r3, [r7, #16]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d006      	beq.n	801617a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801616c:	693b      	ldr	r3, [r7, #16]
 801616e:	2200      	movs	r2, #0
 8016170:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016174:	711a      	strb	r2, [r3, #4]
 8016176:	2200      	movs	r2, #0
 8016178:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d006      	beq.n	801618e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	2200      	movs	r2, #0
 8016184:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016188:	711a      	strb	r2, [r3, #4]
 801618a:	2200      	movs	r2, #0
 801618c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	2243      	movs	r2, #67	@ 0x43
 8016192:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016194:	4b02      	ldr	r3, [pc, #8]	@ (80161a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8016196:	4618      	mov	r0, r3
 8016198:	3718      	adds	r7, #24
 801619a:	46bd      	mov	sp, r7
 801619c:	bd80      	pop	{r7, pc}
 801619e:	bf00      	nop
 80161a0:	2400006c 	.word	0x2400006c

080161a4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80161a4:	b580      	push	{r7, lr}
 80161a6:	b086      	sub	sp, #24
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80161ac:	2182      	movs	r1, #130	@ 0x82
 80161ae:	4818      	ldr	r0, [pc, #96]	@ (8016210 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80161b0:	f000 fd17 	bl	8016be2 <USBD_GetEpDesc>
 80161b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80161b6:	2101      	movs	r1, #1
 80161b8:	4815      	ldr	r0, [pc, #84]	@ (8016210 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80161ba:	f000 fd12 	bl	8016be2 <USBD_GetEpDesc>
 80161be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80161c0:	2181      	movs	r1, #129	@ 0x81
 80161c2:	4813      	ldr	r0, [pc, #76]	@ (8016210 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80161c4:	f000 fd0d 	bl	8016be2 <USBD_GetEpDesc>
 80161c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80161ca:	697b      	ldr	r3, [r7, #20]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d002      	beq.n	80161d6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80161d0:	697b      	ldr	r3, [r7, #20]
 80161d2:	2210      	movs	r2, #16
 80161d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80161d6:	693b      	ldr	r3, [r7, #16]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d006      	beq.n	80161ea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80161dc:	693b      	ldr	r3, [r7, #16]
 80161de:	2200      	movs	r2, #0
 80161e0:	711a      	strb	r2, [r3, #4]
 80161e2:	2200      	movs	r2, #0
 80161e4:	f042 0202 	orr.w	r2, r2, #2
 80161e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d006      	beq.n	80161fe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	2200      	movs	r2, #0
 80161f4:	711a      	strb	r2, [r3, #4]
 80161f6:	2200      	movs	r2, #0
 80161f8:	f042 0202 	orr.w	r2, r2, #2
 80161fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	2243      	movs	r2, #67	@ 0x43
 8016202:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016204:	4b02      	ldr	r3, [pc, #8]	@ (8016210 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8016206:	4618      	mov	r0, r3
 8016208:	3718      	adds	r7, #24
 801620a:	46bd      	mov	sp, r7
 801620c:	bd80      	pop	{r7, pc}
 801620e:	bf00      	nop
 8016210:	2400006c 	.word	0x2400006c

08016214 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b086      	sub	sp, #24
 8016218:	af00      	add	r7, sp, #0
 801621a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801621c:	2182      	movs	r1, #130	@ 0x82
 801621e:	4818      	ldr	r0, [pc, #96]	@ (8016280 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016220:	f000 fcdf 	bl	8016be2 <USBD_GetEpDesc>
 8016224:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016226:	2101      	movs	r1, #1
 8016228:	4815      	ldr	r0, [pc, #84]	@ (8016280 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801622a:	f000 fcda 	bl	8016be2 <USBD_GetEpDesc>
 801622e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016230:	2181      	movs	r1, #129	@ 0x81
 8016232:	4813      	ldr	r0, [pc, #76]	@ (8016280 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016234:	f000 fcd5 	bl	8016be2 <USBD_GetEpDesc>
 8016238:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801623a:	697b      	ldr	r3, [r7, #20]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d002      	beq.n	8016246 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016240:	697b      	ldr	r3, [r7, #20]
 8016242:	2210      	movs	r2, #16
 8016244:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016246:	693b      	ldr	r3, [r7, #16]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d006      	beq.n	801625a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801624c:	693b      	ldr	r3, [r7, #16]
 801624e:	2200      	movs	r2, #0
 8016250:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016254:	711a      	strb	r2, [r3, #4]
 8016256:	2200      	movs	r2, #0
 8016258:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d006      	beq.n	801626e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	2200      	movs	r2, #0
 8016264:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016268:	711a      	strb	r2, [r3, #4]
 801626a:	2200      	movs	r2, #0
 801626c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	2243      	movs	r2, #67	@ 0x43
 8016272:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016274:	4b02      	ldr	r3, [pc, #8]	@ (8016280 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8016276:	4618      	mov	r0, r3
 8016278:	3718      	adds	r7, #24
 801627a:	46bd      	mov	sp, r7
 801627c:	bd80      	pop	{r7, pc}
 801627e:	bf00      	nop
 8016280:	2400006c 	.word	0x2400006c

08016284 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016284:	b480      	push	{r7}
 8016286:	b083      	sub	sp, #12
 8016288:	af00      	add	r7, sp, #0
 801628a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	220a      	movs	r2, #10
 8016290:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8016292:	4b03      	ldr	r3, [pc, #12]	@ (80162a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016294:	4618      	mov	r0, r3
 8016296:	370c      	adds	r7, #12
 8016298:	46bd      	mov	sp, r7
 801629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801629e:	4770      	bx	lr
 80162a0:	24000028 	.word	0x24000028

080162a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80162a4:	b480      	push	{r7}
 80162a6:	b083      	sub	sp, #12
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	6078      	str	r0, [r7, #4]
 80162ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80162ae:	683b      	ldr	r3, [r7, #0]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d101      	bne.n	80162b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80162b4:	2303      	movs	r3, #3
 80162b6:	e009      	b.n	80162cc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80162be:	687a      	ldr	r2, [r7, #4]
 80162c0:	33b0      	adds	r3, #176	@ 0xb0
 80162c2:	009b      	lsls	r3, r3, #2
 80162c4:	4413      	add	r3, r2
 80162c6:	683a      	ldr	r2, [r7, #0]
 80162c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80162ca:	2300      	movs	r3, #0
}
 80162cc:	4618      	mov	r0, r3
 80162ce:	370c      	adds	r7, #12
 80162d0:	46bd      	mov	sp, r7
 80162d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d6:	4770      	bx	lr

080162d8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80162d8:	b480      	push	{r7}
 80162da:	b087      	sub	sp, #28
 80162dc:	af00      	add	r7, sp, #0
 80162de:	60f8      	str	r0, [r7, #12]
 80162e0:	60b9      	str	r1, [r7, #8]
 80162e2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	32b0      	adds	r2, #176	@ 0xb0
 80162ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162f2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80162f4:	697b      	ldr	r3, [r7, #20]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d101      	bne.n	80162fe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80162fa:	2303      	movs	r3, #3
 80162fc:	e008      	b.n	8016310 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80162fe:	697b      	ldr	r3, [r7, #20]
 8016300:	68ba      	ldr	r2, [r7, #8]
 8016302:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8016306:	697b      	ldr	r3, [r7, #20]
 8016308:	687a      	ldr	r2, [r7, #4]
 801630a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801630e:	2300      	movs	r3, #0
}
 8016310:	4618      	mov	r0, r3
 8016312:	371c      	adds	r7, #28
 8016314:	46bd      	mov	sp, r7
 8016316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801631a:	4770      	bx	lr

0801631c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801631c:	b480      	push	{r7}
 801631e:	b085      	sub	sp, #20
 8016320:	af00      	add	r7, sp, #0
 8016322:	6078      	str	r0, [r7, #4]
 8016324:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	32b0      	adds	r2, #176	@ 0xb0
 8016330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016334:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d101      	bne.n	8016340 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801633c:	2303      	movs	r3, #3
 801633e:	e004      	b.n	801634a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	683a      	ldr	r2, [r7, #0]
 8016344:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8016348:	2300      	movs	r3, #0
}
 801634a:	4618      	mov	r0, r3
 801634c:	3714      	adds	r7, #20
 801634e:	46bd      	mov	sp, r7
 8016350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016354:	4770      	bx	lr
	...

08016358 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8016358:	b580      	push	{r7, lr}
 801635a:	b084      	sub	sp, #16
 801635c:	af00      	add	r7, sp, #0
 801635e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	32b0      	adds	r2, #176	@ 0xb0
 801636a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801636e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8016370:	2301      	movs	r3, #1
 8016372:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8016374:	68bb      	ldr	r3, [r7, #8]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d101      	bne.n	801637e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801637a:	2303      	movs	r3, #3
 801637c:	e025      	b.n	80163ca <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801637e:	68bb      	ldr	r3, [r7, #8]
 8016380:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8016384:	2b00      	cmp	r3, #0
 8016386:	d11f      	bne.n	80163c8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8016388:	68bb      	ldr	r3, [r7, #8]
 801638a:	2201      	movs	r2, #1
 801638c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8016390:	4b10      	ldr	r3, [pc, #64]	@ (80163d4 <USBD_CDC_TransmitPacket+0x7c>)
 8016392:	781b      	ldrb	r3, [r3, #0]
 8016394:	f003 020f 	and.w	r2, r3, #15
 8016398:	68bb      	ldr	r3, [r7, #8]
 801639a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 801639e:	6878      	ldr	r0, [r7, #4]
 80163a0:	4613      	mov	r3, r2
 80163a2:	009b      	lsls	r3, r3, #2
 80163a4:	4413      	add	r3, r2
 80163a6:	009b      	lsls	r3, r3, #2
 80163a8:	4403      	add	r3, r0
 80163aa:	3318      	adds	r3, #24
 80163ac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80163ae:	4b09      	ldr	r3, [pc, #36]	@ (80163d4 <USBD_CDC_TransmitPacket+0x7c>)
 80163b0:	7819      	ldrb	r1, [r3, #0]
 80163b2:	68bb      	ldr	r3, [r7, #8]
 80163b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80163b8:	68bb      	ldr	r3, [r7, #8]
 80163ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80163be:	6878      	ldr	r0, [r7, #4]
 80163c0:	f002 f83d 	bl	801843e <USBD_LL_Transmit>

    ret = USBD_OK;
 80163c4:	2300      	movs	r3, #0
 80163c6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80163c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80163ca:	4618      	mov	r0, r3
 80163cc:	3710      	adds	r7, #16
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bd80      	pop	{r7, pc}
 80163d2:	bf00      	nop
 80163d4:	240000af 	.word	0x240000af

080163d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80163d8:	b580      	push	{r7, lr}
 80163da:	b084      	sub	sp, #16
 80163dc:	af00      	add	r7, sp, #0
 80163de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	32b0      	adds	r2, #176	@ 0xb0
 80163ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163ee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	32b0      	adds	r2, #176	@ 0xb0
 80163fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d101      	bne.n	8016406 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8016402:	2303      	movs	r3, #3
 8016404:	e018      	b.n	8016438 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	7c1b      	ldrb	r3, [r3, #16]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d10a      	bne.n	8016424 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801640e:	4b0c      	ldr	r3, [pc, #48]	@ (8016440 <USBD_CDC_ReceivePacket+0x68>)
 8016410:	7819      	ldrb	r1, [r3, #0]
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016418:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801641c:	6878      	ldr	r0, [r7, #4]
 801641e:	f002 f82f 	bl	8018480 <USBD_LL_PrepareReceive>
 8016422:	e008      	b.n	8016436 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016424:	4b06      	ldr	r3, [pc, #24]	@ (8016440 <USBD_CDC_ReceivePacket+0x68>)
 8016426:	7819      	ldrb	r1, [r3, #0]
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801642e:	2340      	movs	r3, #64	@ 0x40
 8016430:	6878      	ldr	r0, [r7, #4]
 8016432:	f002 f825 	bl	8018480 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016436:	2300      	movs	r3, #0
}
 8016438:	4618      	mov	r0, r3
 801643a:	3710      	adds	r7, #16
 801643c:	46bd      	mov	sp, r7
 801643e:	bd80      	pop	{r7, pc}
 8016440:	240000b0 	.word	0x240000b0

08016444 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016444:	b580      	push	{r7, lr}
 8016446:	b086      	sub	sp, #24
 8016448:	af00      	add	r7, sp, #0
 801644a:	60f8      	str	r0, [r7, #12]
 801644c:	60b9      	str	r1, [r7, #8]
 801644e:	4613      	mov	r3, r2
 8016450:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d101      	bne.n	801645c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016458:	2303      	movs	r3, #3
 801645a:	e01f      	b.n	801649c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	2200      	movs	r2, #0
 8016460:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	2200      	movs	r2, #0
 8016468:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	2200      	movs	r2, #0
 8016470:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016474:	68bb      	ldr	r3, [r7, #8]
 8016476:	2b00      	cmp	r3, #0
 8016478:	d003      	beq.n	8016482 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	68ba      	ldr	r2, [r7, #8]
 801647e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	2201      	movs	r2, #1
 8016486:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	79fa      	ldrb	r2, [r7, #7]
 801648e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016490:	68f8      	ldr	r0, [r7, #12]
 8016492:	f001 fe9b 	bl	80181cc <USBD_LL_Init>
 8016496:	4603      	mov	r3, r0
 8016498:	75fb      	strb	r3, [r7, #23]

  return ret;
 801649a:	7dfb      	ldrb	r3, [r7, #23]
}
 801649c:	4618      	mov	r0, r3
 801649e:	3718      	adds	r7, #24
 80164a0:	46bd      	mov	sp, r7
 80164a2:	bd80      	pop	{r7, pc}

080164a4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b084      	sub	sp, #16
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
 80164ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80164ae:	2300      	movs	r3, #0
 80164b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80164b2:	683b      	ldr	r3, [r7, #0]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d101      	bne.n	80164bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80164b8:	2303      	movs	r3, #3
 80164ba:	e025      	b.n	8016508 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	683a      	ldr	r2, [r7, #0]
 80164c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	32ae      	adds	r2, #174	@ 0xae
 80164ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d00f      	beq.n	80164f8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	32ae      	adds	r2, #174	@ 0xae
 80164e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164e8:	f107 020e 	add.w	r2, r7, #14
 80164ec:	4610      	mov	r0, r2
 80164ee:	4798      	blx	r3
 80164f0:	4602      	mov	r2, r0
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80164fe:	1c5a      	adds	r2, r3, #1
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8016506:	2300      	movs	r3, #0
}
 8016508:	4618      	mov	r0, r3
 801650a:	3710      	adds	r7, #16
 801650c:	46bd      	mov	sp, r7
 801650e:	bd80      	pop	{r7, pc}

08016510 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b082      	sub	sp, #8
 8016514:	af00      	add	r7, sp, #0
 8016516:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016518:	6878      	ldr	r0, [r7, #4]
 801651a:	f001 fea7 	bl	801826c <USBD_LL_Start>
 801651e:	4603      	mov	r3, r0
}
 8016520:	4618      	mov	r0, r3
 8016522:	3708      	adds	r7, #8
 8016524:	46bd      	mov	sp, r7
 8016526:	bd80      	pop	{r7, pc}

08016528 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8016528:	b480      	push	{r7}
 801652a:	b083      	sub	sp, #12
 801652c:	af00      	add	r7, sp, #0
 801652e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016530:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8016532:	4618      	mov	r0, r3
 8016534:	370c      	adds	r7, #12
 8016536:	46bd      	mov	sp, r7
 8016538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801653c:	4770      	bx	lr

0801653e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801653e:	b580      	push	{r7, lr}
 8016540:	b084      	sub	sp, #16
 8016542:	af00      	add	r7, sp, #0
 8016544:	6078      	str	r0, [r7, #4]
 8016546:	460b      	mov	r3, r1
 8016548:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801654a:	2300      	movs	r3, #0
 801654c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016554:	2b00      	cmp	r3, #0
 8016556:	d009      	beq.n	801656c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	78fa      	ldrb	r2, [r7, #3]
 8016562:	4611      	mov	r1, r2
 8016564:	6878      	ldr	r0, [r7, #4]
 8016566:	4798      	blx	r3
 8016568:	4603      	mov	r3, r0
 801656a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801656c:	7bfb      	ldrb	r3, [r7, #15]
}
 801656e:	4618      	mov	r0, r3
 8016570:	3710      	adds	r7, #16
 8016572:	46bd      	mov	sp, r7
 8016574:	bd80      	pop	{r7, pc}

08016576 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016576:	b580      	push	{r7, lr}
 8016578:	b084      	sub	sp, #16
 801657a:	af00      	add	r7, sp, #0
 801657c:	6078      	str	r0, [r7, #4]
 801657e:	460b      	mov	r3, r1
 8016580:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016582:	2300      	movs	r3, #0
 8016584:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801658c:	685b      	ldr	r3, [r3, #4]
 801658e:	78fa      	ldrb	r2, [r7, #3]
 8016590:	4611      	mov	r1, r2
 8016592:	6878      	ldr	r0, [r7, #4]
 8016594:	4798      	blx	r3
 8016596:	4603      	mov	r3, r0
 8016598:	2b00      	cmp	r3, #0
 801659a:	d001      	beq.n	80165a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801659c:	2303      	movs	r3, #3
 801659e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80165a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80165a2:	4618      	mov	r0, r3
 80165a4:	3710      	adds	r7, #16
 80165a6:	46bd      	mov	sp, r7
 80165a8:	bd80      	pop	{r7, pc}

080165aa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80165aa:	b580      	push	{r7, lr}
 80165ac:	b084      	sub	sp, #16
 80165ae:	af00      	add	r7, sp, #0
 80165b0:	6078      	str	r0, [r7, #4]
 80165b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80165ba:	6839      	ldr	r1, [r7, #0]
 80165bc:	4618      	mov	r0, r3
 80165be:	f001 f936 	bl	801782e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	2201      	movs	r2, #1
 80165c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80165d0:	461a      	mov	r2, r3
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80165de:	f003 031f 	and.w	r3, r3, #31
 80165e2:	2b02      	cmp	r3, #2
 80165e4:	d01a      	beq.n	801661c <USBD_LL_SetupStage+0x72>
 80165e6:	2b02      	cmp	r3, #2
 80165e8:	d822      	bhi.n	8016630 <USBD_LL_SetupStage+0x86>
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d002      	beq.n	80165f4 <USBD_LL_SetupStage+0x4a>
 80165ee:	2b01      	cmp	r3, #1
 80165f0:	d00a      	beq.n	8016608 <USBD_LL_SetupStage+0x5e>
 80165f2:	e01d      	b.n	8016630 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80165fa:	4619      	mov	r1, r3
 80165fc:	6878      	ldr	r0, [r7, #4]
 80165fe:	f000 fb63 	bl	8016cc8 <USBD_StdDevReq>
 8016602:	4603      	mov	r3, r0
 8016604:	73fb      	strb	r3, [r7, #15]
      break;
 8016606:	e020      	b.n	801664a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801660e:	4619      	mov	r1, r3
 8016610:	6878      	ldr	r0, [r7, #4]
 8016612:	f000 fbcb 	bl	8016dac <USBD_StdItfReq>
 8016616:	4603      	mov	r3, r0
 8016618:	73fb      	strb	r3, [r7, #15]
      break;
 801661a:	e016      	b.n	801664a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016622:	4619      	mov	r1, r3
 8016624:	6878      	ldr	r0, [r7, #4]
 8016626:	f000 fc2d 	bl	8016e84 <USBD_StdEPReq>
 801662a:	4603      	mov	r3, r0
 801662c:	73fb      	strb	r3, [r7, #15]
      break;
 801662e:	e00c      	b.n	801664a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016636:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801663a:	b2db      	uxtb	r3, r3
 801663c:	4619      	mov	r1, r3
 801663e:	6878      	ldr	r0, [r7, #4]
 8016640:	f001 fe74 	bl	801832c <USBD_LL_StallEP>
 8016644:	4603      	mov	r3, r0
 8016646:	73fb      	strb	r3, [r7, #15]
      break;
 8016648:	bf00      	nop
  }

  return ret;
 801664a:	7bfb      	ldrb	r3, [r7, #15]
}
 801664c:	4618      	mov	r0, r3
 801664e:	3710      	adds	r7, #16
 8016650:	46bd      	mov	sp, r7
 8016652:	bd80      	pop	{r7, pc}

08016654 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016654:	b580      	push	{r7, lr}
 8016656:	b086      	sub	sp, #24
 8016658:	af00      	add	r7, sp, #0
 801665a:	60f8      	str	r0, [r7, #12]
 801665c:	460b      	mov	r3, r1
 801665e:	607a      	str	r2, [r7, #4]
 8016660:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8016662:	2300      	movs	r3, #0
 8016664:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8016666:	7afb      	ldrb	r3, [r7, #11]
 8016668:	2b00      	cmp	r3, #0
 801666a:	d16e      	bne.n	801674a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8016672:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801667a:	2b03      	cmp	r3, #3
 801667c:	f040 8098 	bne.w	80167b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8016680:	693b      	ldr	r3, [r7, #16]
 8016682:	689a      	ldr	r2, [r3, #8]
 8016684:	693b      	ldr	r3, [r7, #16]
 8016686:	68db      	ldr	r3, [r3, #12]
 8016688:	429a      	cmp	r2, r3
 801668a:	d913      	bls.n	80166b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801668c:	693b      	ldr	r3, [r7, #16]
 801668e:	689a      	ldr	r2, [r3, #8]
 8016690:	693b      	ldr	r3, [r7, #16]
 8016692:	68db      	ldr	r3, [r3, #12]
 8016694:	1ad2      	subs	r2, r2, r3
 8016696:	693b      	ldr	r3, [r7, #16]
 8016698:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801669a:	693b      	ldr	r3, [r7, #16]
 801669c:	68da      	ldr	r2, [r3, #12]
 801669e:	693b      	ldr	r3, [r7, #16]
 80166a0:	689b      	ldr	r3, [r3, #8]
 80166a2:	4293      	cmp	r3, r2
 80166a4:	bf28      	it	cs
 80166a6:	4613      	movcs	r3, r2
 80166a8:	461a      	mov	r2, r3
 80166aa:	6879      	ldr	r1, [r7, #4]
 80166ac:	68f8      	ldr	r0, [r7, #12]
 80166ae:	f001 f9be 	bl	8017a2e <USBD_CtlContinueRx>
 80166b2:	e07d      	b.n	80167b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80166ba:	f003 031f 	and.w	r3, r3, #31
 80166be:	2b02      	cmp	r3, #2
 80166c0:	d014      	beq.n	80166ec <USBD_LL_DataOutStage+0x98>
 80166c2:	2b02      	cmp	r3, #2
 80166c4:	d81d      	bhi.n	8016702 <USBD_LL_DataOutStage+0xae>
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d002      	beq.n	80166d0 <USBD_LL_DataOutStage+0x7c>
 80166ca:	2b01      	cmp	r3, #1
 80166cc:	d003      	beq.n	80166d6 <USBD_LL_DataOutStage+0x82>
 80166ce:	e018      	b.n	8016702 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80166d0:	2300      	movs	r3, #0
 80166d2:	75bb      	strb	r3, [r7, #22]
            break;
 80166d4:	e018      	b.n	8016708 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80166dc:	b2db      	uxtb	r3, r3
 80166de:	4619      	mov	r1, r3
 80166e0:	68f8      	ldr	r0, [r7, #12]
 80166e2:	f000 fa64 	bl	8016bae <USBD_CoreFindIF>
 80166e6:	4603      	mov	r3, r0
 80166e8:	75bb      	strb	r3, [r7, #22]
            break;
 80166ea:	e00d      	b.n	8016708 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80166f2:	b2db      	uxtb	r3, r3
 80166f4:	4619      	mov	r1, r3
 80166f6:	68f8      	ldr	r0, [r7, #12]
 80166f8:	f000 fa66 	bl	8016bc8 <USBD_CoreFindEP>
 80166fc:	4603      	mov	r3, r0
 80166fe:	75bb      	strb	r3, [r7, #22]
            break;
 8016700:	e002      	b.n	8016708 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8016702:	2300      	movs	r3, #0
 8016704:	75bb      	strb	r3, [r7, #22]
            break;
 8016706:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016708:	7dbb      	ldrb	r3, [r7, #22]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d119      	bne.n	8016742 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016714:	b2db      	uxtb	r3, r3
 8016716:	2b03      	cmp	r3, #3
 8016718:	d113      	bne.n	8016742 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801671a:	7dba      	ldrb	r2, [r7, #22]
 801671c:	68fb      	ldr	r3, [r7, #12]
 801671e:	32ae      	adds	r2, #174	@ 0xae
 8016720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016724:	691b      	ldr	r3, [r3, #16]
 8016726:	2b00      	cmp	r3, #0
 8016728:	d00b      	beq.n	8016742 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801672a:	7dba      	ldrb	r2, [r7, #22]
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8016732:	7dba      	ldrb	r2, [r7, #22]
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	32ae      	adds	r2, #174	@ 0xae
 8016738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801673c:	691b      	ldr	r3, [r3, #16]
 801673e:	68f8      	ldr	r0, [r7, #12]
 8016740:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016742:	68f8      	ldr	r0, [r7, #12]
 8016744:	f001 f984 	bl	8017a50 <USBD_CtlSendStatus>
 8016748:	e032      	b.n	80167b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801674a:	7afb      	ldrb	r3, [r7, #11]
 801674c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016750:	b2db      	uxtb	r3, r3
 8016752:	4619      	mov	r1, r3
 8016754:	68f8      	ldr	r0, [r7, #12]
 8016756:	f000 fa37 	bl	8016bc8 <USBD_CoreFindEP>
 801675a:	4603      	mov	r3, r0
 801675c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801675e:	7dbb      	ldrb	r3, [r7, #22]
 8016760:	2bff      	cmp	r3, #255	@ 0xff
 8016762:	d025      	beq.n	80167b0 <USBD_LL_DataOutStage+0x15c>
 8016764:	7dbb      	ldrb	r3, [r7, #22]
 8016766:	2b00      	cmp	r3, #0
 8016768:	d122      	bne.n	80167b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016770:	b2db      	uxtb	r3, r3
 8016772:	2b03      	cmp	r3, #3
 8016774:	d117      	bne.n	80167a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8016776:	7dba      	ldrb	r2, [r7, #22]
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	32ae      	adds	r2, #174	@ 0xae
 801677c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016780:	699b      	ldr	r3, [r3, #24]
 8016782:	2b00      	cmp	r3, #0
 8016784:	d00f      	beq.n	80167a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8016786:	7dba      	ldrb	r2, [r7, #22]
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801678e:	7dba      	ldrb	r2, [r7, #22]
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	32ae      	adds	r2, #174	@ 0xae
 8016794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016798:	699b      	ldr	r3, [r3, #24]
 801679a:	7afa      	ldrb	r2, [r7, #11]
 801679c:	4611      	mov	r1, r2
 801679e:	68f8      	ldr	r0, [r7, #12]
 80167a0:	4798      	blx	r3
 80167a2:	4603      	mov	r3, r0
 80167a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80167a6:	7dfb      	ldrb	r3, [r7, #23]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d001      	beq.n	80167b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80167ac:	7dfb      	ldrb	r3, [r7, #23]
 80167ae:	e000      	b.n	80167b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80167b0:	2300      	movs	r3, #0
}
 80167b2:	4618      	mov	r0, r3
 80167b4:	3718      	adds	r7, #24
 80167b6:	46bd      	mov	sp, r7
 80167b8:	bd80      	pop	{r7, pc}

080167ba <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80167ba:	b580      	push	{r7, lr}
 80167bc:	b086      	sub	sp, #24
 80167be:	af00      	add	r7, sp, #0
 80167c0:	60f8      	str	r0, [r7, #12]
 80167c2:	460b      	mov	r3, r1
 80167c4:	607a      	str	r2, [r7, #4]
 80167c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80167c8:	7afb      	ldrb	r3, [r7, #11]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d16f      	bne.n	80168ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	3314      	adds	r3, #20
 80167d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80167da:	2b02      	cmp	r3, #2
 80167dc:	d15a      	bne.n	8016894 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80167de:	693b      	ldr	r3, [r7, #16]
 80167e0:	689a      	ldr	r2, [r3, #8]
 80167e2:	693b      	ldr	r3, [r7, #16]
 80167e4:	68db      	ldr	r3, [r3, #12]
 80167e6:	429a      	cmp	r2, r3
 80167e8:	d914      	bls.n	8016814 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80167ea:	693b      	ldr	r3, [r7, #16]
 80167ec:	689a      	ldr	r2, [r3, #8]
 80167ee:	693b      	ldr	r3, [r7, #16]
 80167f0:	68db      	ldr	r3, [r3, #12]
 80167f2:	1ad2      	subs	r2, r2, r3
 80167f4:	693b      	ldr	r3, [r7, #16]
 80167f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80167f8:	693b      	ldr	r3, [r7, #16]
 80167fa:	689b      	ldr	r3, [r3, #8]
 80167fc:	461a      	mov	r2, r3
 80167fe:	6879      	ldr	r1, [r7, #4]
 8016800:	68f8      	ldr	r0, [r7, #12]
 8016802:	f001 f8e6 	bl	80179d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016806:	2300      	movs	r3, #0
 8016808:	2200      	movs	r2, #0
 801680a:	2100      	movs	r1, #0
 801680c:	68f8      	ldr	r0, [r7, #12]
 801680e:	f001 fe37 	bl	8018480 <USBD_LL_PrepareReceive>
 8016812:	e03f      	b.n	8016894 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016814:	693b      	ldr	r3, [r7, #16]
 8016816:	68da      	ldr	r2, [r3, #12]
 8016818:	693b      	ldr	r3, [r7, #16]
 801681a:	689b      	ldr	r3, [r3, #8]
 801681c:	429a      	cmp	r2, r3
 801681e:	d11c      	bne.n	801685a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016820:	693b      	ldr	r3, [r7, #16]
 8016822:	685a      	ldr	r2, [r3, #4]
 8016824:	693b      	ldr	r3, [r7, #16]
 8016826:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016828:	429a      	cmp	r2, r3
 801682a:	d316      	bcc.n	801685a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801682c:	693b      	ldr	r3, [r7, #16]
 801682e:	685a      	ldr	r2, [r3, #4]
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016836:	429a      	cmp	r2, r3
 8016838:	d20f      	bcs.n	801685a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801683a:	2200      	movs	r2, #0
 801683c:	2100      	movs	r1, #0
 801683e:	68f8      	ldr	r0, [r7, #12]
 8016840:	f001 f8c7 	bl	80179d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	2200      	movs	r2, #0
 8016848:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801684c:	2300      	movs	r3, #0
 801684e:	2200      	movs	r2, #0
 8016850:	2100      	movs	r1, #0
 8016852:	68f8      	ldr	r0, [r7, #12]
 8016854:	f001 fe14 	bl	8018480 <USBD_LL_PrepareReceive>
 8016858:	e01c      	b.n	8016894 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016860:	b2db      	uxtb	r3, r3
 8016862:	2b03      	cmp	r3, #3
 8016864:	d10f      	bne.n	8016886 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801686c:	68db      	ldr	r3, [r3, #12]
 801686e:	2b00      	cmp	r3, #0
 8016870:	d009      	beq.n	8016886 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	2200      	movs	r2, #0
 8016876:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016880:	68db      	ldr	r3, [r3, #12]
 8016882:	68f8      	ldr	r0, [r7, #12]
 8016884:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016886:	2180      	movs	r1, #128	@ 0x80
 8016888:	68f8      	ldr	r0, [r7, #12]
 801688a:	f001 fd4f 	bl	801832c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801688e:	68f8      	ldr	r0, [r7, #12]
 8016890:	f001 f8f1 	bl	8017a76 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801689a:	2b00      	cmp	r3, #0
 801689c:	d03a      	beq.n	8016914 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801689e:	68f8      	ldr	r0, [r7, #12]
 80168a0:	f7ff fe42 	bl	8016528 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	2200      	movs	r2, #0
 80168a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80168ac:	e032      	b.n	8016914 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80168ae:	7afb      	ldrb	r3, [r7, #11]
 80168b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80168b4:	b2db      	uxtb	r3, r3
 80168b6:	4619      	mov	r1, r3
 80168b8:	68f8      	ldr	r0, [r7, #12]
 80168ba:	f000 f985 	bl	8016bc8 <USBD_CoreFindEP>
 80168be:	4603      	mov	r3, r0
 80168c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80168c2:	7dfb      	ldrb	r3, [r7, #23]
 80168c4:	2bff      	cmp	r3, #255	@ 0xff
 80168c6:	d025      	beq.n	8016914 <USBD_LL_DataInStage+0x15a>
 80168c8:	7dfb      	ldrb	r3, [r7, #23]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d122      	bne.n	8016914 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80168d4:	b2db      	uxtb	r3, r3
 80168d6:	2b03      	cmp	r3, #3
 80168d8:	d11c      	bne.n	8016914 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80168da:	7dfa      	ldrb	r2, [r7, #23]
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	32ae      	adds	r2, #174	@ 0xae
 80168e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168e4:	695b      	ldr	r3, [r3, #20]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d014      	beq.n	8016914 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80168ea:	7dfa      	ldrb	r2, [r7, #23]
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80168f2:	7dfa      	ldrb	r2, [r7, #23]
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	32ae      	adds	r2, #174	@ 0xae
 80168f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168fc:	695b      	ldr	r3, [r3, #20]
 80168fe:	7afa      	ldrb	r2, [r7, #11]
 8016900:	4611      	mov	r1, r2
 8016902:	68f8      	ldr	r0, [r7, #12]
 8016904:	4798      	blx	r3
 8016906:	4603      	mov	r3, r0
 8016908:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801690a:	7dbb      	ldrb	r3, [r7, #22]
 801690c:	2b00      	cmp	r3, #0
 801690e:	d001      	beq.n	8016914 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016910:	7dbb      	ldrb	r3, [r7, #22]
 8016912:	e000      	b.n	8016916 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8016914:	2300      	movs	r3, #0
}
 8016916:	4618      	mov	r0, r3
 8016918:	3718      	adds	r7, #24
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}

0801691e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801691e:	b580      	push	{r7, lr}
 8016920:	b084      	sub	sp, #16
 8016922:	af00      	add	r7, sp, #0
 8016924:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8016926:	2300      	movs	r3, #0
 8016928:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	2201      	movs	r2, #1
 801692e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	2200      	movs	r2, #0
 8016936:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	2200      	movs	r2, #0
 801693e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	2200      	movs	r2, #0
 8016944:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	2200      	movs	r2, #0
 801694c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016956:	2b00      	cmp	r3, #0
 8016958:	d014      	beq.n	8016984 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016960:	685b      	ldr	r3, [r3, #4]
 8016962:	2b00      	cmp	r3, #0
 8016964:	d00e      	beq.n	8016984 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801696c:	685b      	ldr	r3, [r3, #4]
 801696e:	687a      	ldr	r2, [r7, #4]
 8016970:	6852      	ldr	r2, [r2, #4]
 8016972:	b2d2      	uxtb	r2, r2
 8016974:	4611      	mov	r1, r2
 8016976:	6878      	ldr	r0, [r7, #4]
 8016978:	4798      	blx	r3
 801697a:	4603      	mov	r3, r0
 801697c:	2b00      	cmp	r3, #0
 801697e:	d001      	beq.n	8016984 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016980:	2303      	movs	r3, #3
 8016982:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016984:	2340      	movs	r3, #64	@ 0x40
 8016986:	2200      	movs	r2, #0
 8016988:	2100      	movs	r1, #0
 801698a:	6878      	ldr	r0, [r7, #4]
 801698c:	f001 fc89 	bl	80182a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	2201      	movs	r2, #1
 8016994:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	2240      	movs	r2, #64	@ 0x40
 801699c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80169a0:	2340      	movs	r3, #64	@ 0x40
 80169a2:	2200      	movs	r2, #0
 80169a4:	2180      	movs	r1, #128	@ 0x80
 80169a6:	6878      	ldr	r0, [r7, #4]
 80169a8:	f001 fc7b 	bl	80182a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	2201      	movs	r2, #1
 80169b0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	2240      	movs	r2, #64	@ 0x40
 80169b6:	621a      	str	r2, [r3, #32]

  return ret;
 80169b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80169ba:	4618      	mov	r0, r3
 80169bc:	3710      	adds	r7, #16
 80169be:	46bd      	mov	sp, r7
 80169c0:	bd80      	pop	{r7, pc}

080169c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80169c2:	b480      	push	{r7}
 80169c4:	b083      	sub	sp, #12
 80169c6:	af00      	add	r7, sp, #0
 80169c8:	6078      	str	r0, [r7, #4]
 80169ca:	460b      	mov	r3, r1
 80169cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	78fa      	ldrb	r2, [r7, #3]
 80169d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80169d4:	2300      	movs	r3, #0
}
 80169d6:	4618      	mov	r0, r3
 80169d8:	370c      	adds	r7, #12
 80169da:	46bd      	mov	sp, r7
 80169dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e0:	4770      	bx	lr

080169e2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80169e2:	b480      	push	{r7}
 80169e4:	b083      	sub	sp, #12
 80169e6:	af00      	add	r7, sp, #0
 80169e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80169f0:	b2db      	uxtb	r3, r3
 80169f2:	2b04      	cmp	r3, #4
 80169f4:	d006      	beq.n	8016a04 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80169fc:	b2da      	uxtb	r2, r3
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	2204      	movs	r2, #4
 8016a08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8016a0c:	2300      	movs	r3, #0
}
 8016a0e:	4618      	mov	r0, r3
 8016a10:	370c      	adds	r7, #12
 8016a12:	46bd      	mov	sp, r7
 8016a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a18:	4770      	bx	lr

08016a1a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016a1a:	b480      	push	{r7}
 8016a1c:	b083      	sub	sp, #12
 8016a1e:	af00      	add	r7, sp, #0
 8016a20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a28:	b2db      	uxtb	r3, r3
 8016a2a:	2b04      	cmp	r3, #4
 8016a2c:	d106      	bne.n	8016a3c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8016a34:	b2da      	uxtb	r2, r3
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8016a3c:	2300      	movs	r3, #0
}
 8016a3e:	4618      	mov	r0, r3
 8016a40:	370c      	adds	r7, #12
 8016a42:	46bd      	mov	sp, r7
 8016a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a48:	4770      	bx	lr

08016a4a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016a4a:	b580      	push	{r7, lr}
 8016a4c:	b082      	sub	sp, #8
 8016a4e:	af00      	add	r7, sp, #0
 8016a50:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a58:	b2db      	uxtb	r3, r3
 8016a5a:	2b03      	cmp	r3, #3
 8016a5c:	d110      	bne.n	8016a80 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d00b      	beq.n	8016a80 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016a6e:	69db      	ldr	r3, [r3, #28]
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d005      	beq.n	8016a80 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016a7a:	69db      	ldr	r3, [r3, #28]
 8016a7c:	6878      	ldr	r0, [r7, #4]
 8016a7e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016a80:	2300      	movs	r3, #0
}
 8016a82:	4618      	mov	r0, r3
 8016a84:	3708      	adds	r7, #8
 8016a86:	46bd      	mov	sp, r7
 8016a88:	bd80      	pop	{r7, pc}

08016a8a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016a8a:	b580      	push	{r7, lr}
 8016a8c:	b082      	sub	sp, #8
 8016a8e:	af00      	add	r7, sp, #0
 8016a90:	6078      	str	r0, [r7, #4]
 8016a92:	460b      	mov	r3, r1
 8016a94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	32ae      	adds	r2, #174	@ 0xae
 8016aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d101      	bne.n	8016aac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8016aa8:	2303      	movs	r3, #3
 8016aaa:	e01c      	b.n	8016ae6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016ab2:	b2db      	uxtb	r3, r3
 8016ab4:	2b03      	cmp	r3, #3
 8016ab6:	d115      	bne.n	8016ae4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	32ae      	adds	r2, #174	@ 0xae
 8016ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ac6:	6a1b      	ldr	r3, [r3, #32]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d00b      	beq.n	8016ae4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	32ae      	adds	r2, #174	@ 0xae
 8016ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ada:	6a1b      	ldr	r3, [r3, #32]
 8016adc:	78fa      	ldrb	r2, [r7, #3]
 8016ade:	4611      	mov	r1, r2
 8016ae0:	6878      	ldr	r0, [r7, #4]
 8016ae2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016ae4:	2300      	movs	r3, #0
}
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	3708      	adds	r7, #8
 8016aea:	46bd      	mov	sp, r7
 8016aec:	bd80      	pop	{r7, pc}

08016aee <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016aee:	b580      	push	{r7, lr}
 8016af0:	b082      	sub	sp, #8
 8016af2:	af00      	add	r7, sp, #0
 8016af4:	6078      	str	r0, [r7, #4]
 8016af6:	460b      	mov	r3, r1
 8016af8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	32ae      	adds	r2, #174	@ 0xae
 8016b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d101      	bne.n	8016b10 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016b0c:	2303      	movs	r3, #3
 8016b0e:	e01c      	b.n	8016b4a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b16:	b2db      	uxtb	r3, r3
 8016b18:	2b03      	cmp	r3, #3
 8016b1a:	d115      	bne.n	8016b48 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	32ae      	adds	r2, #174	@ 0xae
 8016b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d00b      	beq.n	8016b48 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	32ae      	adds	r2, #174	@ 0xae
 8016b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b40:	78fa      	ldrb	r2, [r7, #3]
 8016b42:	4611      	mov	r1, r2
 8016b44:	6878      	ldr	r0, [r7, #4]
 8016b46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016b48:	2300      	movs	r3, #0
}
 8016b4a:	4618      	mov	r0, r3
 8016b4c:	3708      	adds	r7, #8
 8016b4e:	46bd      	mov	sp, r7
 8016b50:	bd80      	pop	{r7, pc}

08016b52 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016b52:	b480      	push	{r7}
 8016b54:	b083      	sub	sp, #12
 8016b56:	af00      	add	r7, sp, #0
 8016b58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016b5a:	2300      	movs	r3, #0
}
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	370c      	adds	r7, #12
 8016b60:	46bd      	mov	sp, r7
 8016b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b66:	4770      	bx	lr

08016b68 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b084      	sub	sp, #16
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8016b70:	2300      	movs	r3, #0
 8016b72:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	2201      	movs	r2, #1
 8016b78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d00e      	beq.n	8016ba4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016b8c:	685b      	ldr	r3, [r3, #4]
 8016b8e:	687a      	ldr	r2, [r7, #4]
 8016b90:	6852      	ldr	r2, [r2, #4]
 8016b92:	b2d2      	uxtb	r2, r2
 8016b94:	4611      	mov	r1, r2
 8016b96:	6878      	ldr	r0, [r7, #4]
 8016b98:	4798      	blx	r3
 8016b9a:	4603      	mov	r3, r0
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d001      	beq.n	8016ba4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8016ba0:	2303      	movs	r3, #3
 8016ba2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	3710      	adds	r7, #16
 8016baa:	46bd      	mov	sp, r7
 8016bac:	bd80      	pop	{r7, pc}

08016bae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016bae:	b480      	push	{r7}
 8016bb0:	b083      	sub	sp, #12
 8016bb2:	af00      	add	r7, sp, #0
 8016bb4:	6078      	str	r0, [r7, #4]
 8016bb6:	460b      	mov	r3, r1
 8016bb8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016bba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	370c      	adds	r7, #12
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc6:	4770      	bx	lr

08016bc8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016bc8:	b480      	push	{r7}
 8016bca:	b083      	sub	sp, #12
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	6078      	str	r0, [r7, #4]
 8016bd0:	460b      	mov	r3, r1
 8016bd2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016bd4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	370c      	adds	r7, #12
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be0:	4770      	bx	lr

08016be2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8016be2:	b580      	push	{r7, lr}
 8016be4:	b086      	sub	sp, #24
 8016be6:	af00      	add	r7, sp, #0
 8016be8:	6078      	str	r0, [r7, #4]
 8016bea:	460b      	mov	r3, r1
 8016bec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016bf6:	2300      	movs	r3, #0
 8016bf8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016bfa:	68fb      	ldr	r3, [r7, #12]
 8016bfc:	885b      	ldrh	r3, [r3, #2]
 8016bfe:	b29b      	uxth	r3, r3
 8016c00:	68fa      	ldr	r2, [r7, #12]
 8016c02:	7812      	ldrb	r2, [r2, #0]
 8016c04:	4293      	cmp	r3, r2
 8016c06:	d91f      	bls.n	8016c48 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	781b      	ldrb	r3, [r3, #0]
 8016c0c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8016c0e:	e013      	b.n	8016c38 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016c10:	f107 030a 	add.w	r3, r7, #10
 8016c14:	4619      	mov	r1, r3
 8016c16:	6978      	ldr	r0, [r7, #20]
 8016c18:	f000 f81b 	bl	8016c52 <USBD_GetNextDesc>
 8016c1c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016c1e:	697b      	ldr	r3, [r7, #20]
 8016c20:	785b      	ldrb	r3, [r3, #1]
 8016c22:	2b05      	cmp	r3, #5
 8016c24:	d108      	bne.n	8016c38 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8016c26:	697b      	ldr	r3, [r7, #20]
 8016c28:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8016c2a:	693b      	ldr	r3, [r7, #16]
 8016c2c:	789b      	ldrb	r3, [r3, #2]
 8016c2e:	78fa      	ldrb	r2, [r7, #3]
 8016c30:	429a      	cmp	r2, r3
 8016c32:	d008      	beq.n	8016c46 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016c34:	2300      	movs	r3, #0
 8016c36:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	885b      	ldrh	r3, [r3, #2]
 8016c3c:	b29a      	uxth	r2, r3
 8016c3e:	897b      	ldrh	r3, [r7, #10]
 8016c40:	429a      	cmp	r2, r3
 8016c42:	d8e5      	bhi.n	8016c10 <USBD_GetEpDesc+0x2e>
 8016c44:	e000      	b.n	8016c48 <USBD_GetEpDesc+0x66>
          break;
 8016c46:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016c48:	693b      	ldr	r3, [r7, #16]
}
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	3718      	adds	r7, #24
 8016c4e:	46bd      	mov	sp, r7
 8016c50:	bd80      	pop	{r7, pc}

08016c52 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016c52:	b480      	push	{r7}
 8016c54:	b085      	sub	sp, #20
 8016c56:	af00      	add	r7, sp, #0
 8016c58:	6078      	str	r0, [r7, #4]
 8016c5a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8016c60:	683b      	ldr	r3, [r7, #0]
 8016c62:	881b      	ldrh	r3, [r3, #0]
 8016c64:	68fa      	ldr	r2, [r7, #12]
 8016c66:	7812      	ldrb	r2, [r2, #0]
 8016c68:	4413      	add	r3, r2
 8016c6a:	b29a      	uxth	r2, r3
 8016c6c:	683b      	ldr	r3, [r7, #0]
 8016c6e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	781b      	ldrb	r3, [r3, #0]
 8016c74:	461a      	mov	r2, r3
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	4413      	add	r3, r2
 8016c7a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016c7c:	68fb      	ldr	r3, [r7, #12]
}
 8016c7e:	4618      	mov	r0, r3
 8016c80:	3714      	adds	r7, #20
 8016c82:	46bd      	mov	sp, r7
 8016c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c88:	4770      	bx	lr

08016c8a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016c8a:	b480      	push	{r7}
 8016c8c:	b087      	sub	sp, #28
 8016c8e:	af00      	add	r7, sp, #0
 8016c90:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016c96:	697b      	ldr	r3, [r7, #20]
 8016c98:	781b      	ldrb	r3, [r3, #0]
 8016c9a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016c9c:	697b      	ldr	r3, [r7, #20]
 8016c9e:	3301      	adds	r3, #1
 8016ca0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016ca2:	697b      	ldr	r3, [r7, #20]
 8016ca4:	781b      	ldrb	r3, [r3, #0]
 8016ca6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016ca8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8016cac:	021b      	lsls	r3, r3, #8
 8016cae:	b21a      	sxth	r2, r3
 8016cb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016cb4:	4313      	orrs	r3, r2
 8016cb6:	b21b      	sxth	r3, r3
 8016cb8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016cba:	89fb      	ldrh	r3, [r7, #14]
}
 8016cbc:	4618      	mov	r0, r3
 8016cbe:	371c      	adds	r7, #28
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc6:	4770      	bx	lr

08016cc8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b084      	sub	sp, #16
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
 8016cd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016cd6:	683b      	ldr	r3, [r7, #0]
 8016cd8:	781b      	ldrb	r3, [r3, #0]
 8016cda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016cde:	2b40      	cmp	r3, #64	@ 0x40
 8016ce0:	d005      	beq.n	8016cee <USBD_StdDevReq+0x26>
 8016ce2:	2b40      	cmp	r3, #64	@ 0x40
 8016ce4:	d857      	bhi.n	8016d96 <USBD_StdDevReq+0xce>
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d00f      	beq.n	8016d0a <USBD_StdDevReq+0x42>
 8016cea:	2b20      	cmp	r3, #32
 8016cec:	d153      	bne.n	8016d96 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	32ae      	adds	r2, #174	@ 0xae
 8016cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016cfc:	689b      	ldr	r3, [r3, #8]
 8016cfe:	6839      	ldr	r1, [r7, #0]
 8016d00:	6878      	ldr	r0, [r7, #4]
 8016d02:	4798      	blx	r3
 8016d04:	4603      	mov	r3, r0
 8016d06:	73fb      	strb	r3, [r7, #15]
      break;
 8016d08:	e04a      	b.n	8016da0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016d0a:	683b      	ldr	r3, [r7, #0]
 8016d0c:	785b      	ldrb	r3, [r3, #1]
 8016d0e:	2b09      	cmp	r3, #9
 8016d10:	d83b      	bhi.n	8016d8a <USBD_StdDevReq+0xc2>
 8016d12:	a201      	add	r2, pc, #4	@ (adr r2, 8016d18 <USBD_StdDevReq+0x50>)
 8016d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d18:	08016d6d 	.word	0x08016d6d
 8016d1c:	08016d81 	.word	0x08016d81
 8016d20:	08016d8b 	.word	0x08016d8b
 8016d24:	08016d77 	.word	0x08016d77
 8016d28:	08016d8b 	.word	0x08016d8b
 8016d2c:	08016d4b 	.word	0x08016d4b
 8016d30:	08016d41 	.word	0x08016d41
 8016d34:	08016d8b 	.word	0x08016d8b
 8016d38:	08016d63 	.word	0x08016d63
 8016d3c:	08016d55 	.word	0x08016d55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016d40:	6839      	ldr	r1, [r7, #0]
 8016d42:	6878      	ldr	r0, [r7, #4]
 8016d44:	f000 fa3c 	bl	80171c0 <USBD_GetDescriptor>
          break;
 8016d48:	e024      	b.n	8016d94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016d4a:	6839      	ldr	r1, [r7, #0]
 8016d4c:	6878      	ldr	r0, [r7, #4]
 8016d4e:	f000 fbcb 	bl	80174e8 <USBD_SetAddress>
          break;
 8016d52:	e01f      	b.n	8016d94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016d54:	6839      	ldr	r1, [r7, #0]
 8016d56:	6878      	ldr	r0, [r7, #4]
 8016d58:	f000 fc0a 	bl	8017570 <USBD_SetConfig>
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	73fb      	strb	r3, [r7, #15]
          break;
 8016d60:	e018      	b.n	8016d94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016d62:	6839      	ldr	r1, [r7, #0]
 8016d64:	6878      	ldr	r0, [r7, #4]
 8016d66:	f000 fcad 	bl	80176c4 <USBD_GetConfig>
          break;
 8016d6a:	e013      	b.n	8016d94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016d6c:	6839      	ldr	r1, [r7, #0]
 8016d6e:	6878      	ldr	r0, [r7, #4]
 8016d70:	f000 fcde 	bl	8017730 <USBD_GetStatus>
          break;
 8016d74:	e00e      	b.n	8016d94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016d76:	6839      	ldr	r1, [r7, #0]
 8016d78:	6878      	ldr	r0, [r7, #4]
 8016d7a:	f000 fd0d 	bl	8017798 <USBD_SetFeature>
          break;
 8016d7e:	e009      	b.n	8016d94 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016d80:	6839      	ldr	r1, [r7, #0]
 8016d82:	6878      	ldr	r0, [r7, #4]
 8016d84:	f000 fd31 	bl	80177ea <USBD_ClrFeature>
          break;
 8016d88:	e004      	b.n	8016d94 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016d8a:	6839      	ldr	r1, [r7, #0]
 8016d8c:	6878      	ldr	r0, [r7, #4]
 8016d8e:	f000 fd88 	bl	80178a2 <USBD_CtlError>
          break;
 8016d92:	bf00      	nop
      }
      break;
 8016d94:	e004      	b.n	8016da0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016d96:	6839      	ldr	r1, [r7, #0]
 8016d98:	6878      	ldr	r0, [r7, #4]
 8016d9a:	f000 fd82 	bl	80178a2 <USBD_CtlError>
      break;
 8016d9e:	bf00      	nop
  }

  return ret;
 8016da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016da2:	4618      	mov	r0, r3
 8016da4:	3710      	adds	r7, #16
 8016da6:	46bd      	mov	sp, r7
 8016da8:	bd80      	pop	{r7, pc}
 8016daa:	bf00      	nop

08016dac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016dac:	b580      	push	{r7, lr}
 8016dae:	b084      	sub	sp, #16
 8016db0:	af00      	add	r7, sp, #0
 8016db2:	6078      	str	r0, [r7, #4]
 8016db4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016db6:	2300      	movs	r3, #0
 8016db8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016dba:	683b      	ldr	r3, [r7, #0]
 8016dbc:	781b      	ldrb	r3, [r3, #0]
 8016dbe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016dc2:	2b40      	cmp	r3, #64	@ 0x40
 8016dc4:	d005      	beq.n	8016dd2 <USBD_StdItfReq+0x26>
 8016dc6:	2b40      	cmp	r3, #64	@ 0x40
 8016dc8:	d852      	bhi.n	8016e70 <USBD_StdItfReq+0xc4>
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d001      	beq.n	8016dd2 <USBD_StdItfReq+0x26>
 8016dce:	2b20      	cmp	r3, #32
 8016dd0:	d14e      	bne.n	8016e70 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016dd8:	b2db      	uxtb	r3, r3
 8016dda:	3b01      	subs	r3, #1
 8016ddc:	2b02      	cmp	r3, #2
 8016dde:	d840      	bhi.n	8016e62 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016de0:	683b      	ldr	r3, [r7, #0]
 8016de2:	889b      	ldrh	r3, [r3, #4]
 8016de4:	b2db      	uxtb	r3, r3
 8016de6:	2b01      	cmp	r3, #1
 8016de8:	d836      	bhi.n	8016e58 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016dea:	683b      	ldr	r3, [r7, #0]
 8016dec:	889b      	ldrh	r3, [r3, #4]
 8016dee:	b2db      	uxtb	r3, r3
 8016df0:	4619      	mov	r1, r3
 8016df2:	6878      	ldr	r0, [r7, #4]
 8016df4:	f7ff fedb 	bl	8016bae <USBD_CoreFindIF>
 8016df8:	4603      	mov	r3, r0
 8016dfa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016dfc:	7bbb      	ldrb	r3, [r7, #14]
 8016dfe:	2bff      	cmp	r3, #255	@ 0xff
 8016e00:	d01d      	beq.n	8016e3e <USBD_StdItfReq+0x92>
 8016e02:	7bbb      	ldrb	r3, [r7, #14]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d11a      	bne.n	8016e3e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016e08:	7bba      	ldrb	r2, [r7, #14]
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	32ae      	adds	r2, #174	@ 0xae
 8016e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e12:	689b      	ldr	r3, [r3, #8]
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d00f      	beq.n	8016e38 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016e18:	7bba      	ldrb	r2, [r7, #14]
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016e20:	7bba      	ldrb	r2, [r7, #14]
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	32ae      	adds	r2, #174	@ 0xae
 8016e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e2a:	689b      	ldr	r3, [r3, #8]
 8016e2c:	6839      	ldr	r1, [r7, #0]
 8016e2e:	6878      	ldr	r0, [r7, #4]
 8016e30:	4798      	blx	r3
 8016e32:	4603      	mov	r3, r0
 8016e34:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016e36:	e004      	b.n	8016e42 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016e38:	2303      	movs	r3, #3
 8016e3a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016e3c:	e001      	b.n	8016e42 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016e3e:	2303      	movs	r3, #3
 8016e40:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016e42:	683b      	ldr	r3, [r7, #0]
 8016e44:	88db      	ldrh	r3, [r3, #6]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d110      	bne.n	8016e6c <USBD_StdItfReq+0xc0>
 8016e4a:	7bfb      	ldrb	r3, [r7, #15]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d10d      	bne.n	8016e6c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016e50:	6878      	ldr	r0, [r7, #4]
 8016e52:	f000 fdfd 	bl	8017a50 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016e56:	e009      	b.n	8016e6c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016e58:	6839      	ldr	r1, [r7, #0]
 8016e5a:	6878      	ldr	r0, [r7, #4]
 8016e5c:	f000 fd21 	bl	80178a2 <USBD_CtlError>
          break;
 8016e60:	e004      	b.n	8016e6c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016e62:	6839      	ldr	r1, [r7, #0]
 8016e64:	6878      	ldr	r0, [r7, #4]
 8016e66:	f000 fd1c 	bl	80178a2 <USBD_CtlError>
          break;
 8016e6a:	e000      	b.n	8016e6e <USBD_StdItfReq+0xc2>
          break;
 8016e6c:	bf00      	nop
      }
      break;
 8016e6e:	e004      	b.n	8016e7a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016e70:	6839      	ldr	r1, [r7, #0]
 8016e72:	6878      	ldr	r0, [r7, #4]
 8016e74:	f000 fd15 	bl	80178a2 <USBD_CtlError>
      break;
 8016e78:	bf00      	nop
  }

  return ret;
 8016e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	3710      	adds	r7, #16
 8016e80:	46bd      	mov	sp, r7
 8016e82:	bd80      	pop	{r7, pc}

08016e84 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016e84:	b580      	push	{r7, lr}
 8016e86:	b084      	sub	sp, #16
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	6078      	str	r0, [r7, #4]
 8016e8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016e8e:	2300      	movs	r3, #0
 8016e90:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016e92:	683b      	ldr	r3, [r7, #0]
 8016e94:	889b      	ldrh	r3, [r3, #4]
 8016e96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016e98:	683b      	ldr	r3, [r7, #0]
 8016e9a:	781b      	ldrb	r3, [r3, #0]
 8016e9c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016ea0:	2b40      	cmp	r3, #64	@ 0x40
 8016ea2:	d007      	beq.n	8016eb4 <USBD_StdEPReq+0x30>
 8016ea4:	2b40      	cmp	r3, #64	@ 0x40
 8016ea6:	f200 817f 	bhi.w	80171a8 <USBD_StdEPReq+0x324>
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d02a      	beq.n	8016f04 <USBD_StdEPReq+0x80>
 8016eae:	2b20      	cmp	r3, #32
 8016eb0:	f040 817a 	bne.w	80171a8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016eb4:	7bbb      	ldrb	r3, [r7, #14]
 8016eb6:	4619      	mov	r1, r3
 8016eb8:	6878      	ldr	r0, [r7, #4]
 8016eba:	f7ff fe85 	bl	8016bc8 <USBD_CoreFindEP>
 8016ebe:	4603      	mov	r3, r0
 8016ec0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016ec2:	7b7b      	ldrb	r3, [r7, #13]
 8016ec4:	2bff      	cmp	r3, #255	@ 0xff
 8016ec6:	f000 8174 	beq.w	80171b2 <USBD_StdEPReq+0x32e>
 8016eca:	7b7b      	ldrb	r3, [r7, #13]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	f040 8170 	bne.w	80171b2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016ed2:	7b7a      	ldrb	r2, [r7, #13]
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016eda:	7b7a      	ldrb	r2, [r7, #13]
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	32ae      	adds	r2, #174	@ 0xae
 8016ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ee4:	689b      	ldr	r3, [r3, #8]
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	f000 8163 	beq.w	80171b2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016eec:	7b7a      	ldrb	r2, [r7, #13]
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	32ae      	adds	r2, #174	@ 0xae
 8016ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ef6:	689b      	ldr	r3, [r3, #8]
 8016ef8:	6839      	ldr	r1, [r7, #0]
 8016efa:	6878      	ldr	r0, [r7, #4]
 8016efc:	4798      	blx	r3
 8016efe:	4603      	mov	r3, r0
 8016f00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016f02:	e156      	b.n	80171b2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016f04:	683b      	ldr	r3, [r7, #0]
 8016f06:	785b      	ldrb	r3, [r3, #1]
 8016f08:	2b03      	cmp	r3, #3
 8016f0a:	d008      	beq.n	8016f1e <USBD_StdEPReq+0x9a>
 8016f0c:	2b03      	cmp	r3, #3
 8016f0e:	f300 8145 	bgt.w	801719c <USBD_StdEPReq+0x318>
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	f000 809b 	beq.w	801704e <USBD_StdEPReq+0x1ca>
 8016f18:	2b01      	cmp	r3, #1
 8016f1a:	d03c      	beq.n	8016f96 <USBD_StdEPReq+0x112>
 8016f1c:	e13e      	b.n	801719c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016f24:	b2db      	uxtb	r3, r3
 8016f26:	2b02      	cmp	r3, #2
 8016f28:	d002      	beq.n	8016f30 <USBD_StdEPReq+0xac>
 8016f2a:	2b03      	cmp	r3, #3
 8016f2c:	d016      	beq.n	8016f5c <USBD_StdEPReq+0xd8>
 8016f2e:	e02c      	b.n	8016f8a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016f30:	7bbb      	ldrb	r3, [r7, #14]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d00d      	beq.n	8016f52 <USBD_StdEPReq+0xce>
 8016f36:	7bbb      	ldrb	r3, [r7, #14]
 8016f38:	2b80      	cmp	r3, #128	@ 0x80
 8016f3a:	d00a      	beq.n	8016f52 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016f3c:	7bbb      	ldrb	r3, [r7, #14]
 8016f3e:	4619      	mov	r1, r3
 8016f40:	6878      	ldr	r0, [r7, #4]
 8016f42:	f001 f9f3 	bl	801832c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016f46:	2180      	movs	r1, #128	@ 0x80
 8016f48:	6878      	ldr	r0, [r7, #4]
 8016f4a:	f001 f9ef 	bl	801832c <USBD_LL_StallEP>
 8016f4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016f50:	e020      	b.n	8016f94 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016f52:	6839      	ldr	r1, [r7, #0]
 8016f54:	6878      	ldr	r0, [r7, #4]
 8016f56:	f000 fca4 	bl	80178a2 <USBD_CtlError>
              break;
 8016f5a:	e01b      	b.n	8016f94 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016f5c:	683b      	ldr	r3, [r7, #0]
 8016f5e:	885b      	ldrh	r3, [r3, #2]
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d10e      	bne.n	8016f82 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016f64:	7bbb      	ldrb	r3, [r7, #14]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d00b      	beq.n	8016f82 <USBD_StdEPReq+0xfe>
 8016f6a:	7bbb      	ldrb	r3, [r7, #14]
 8016f6c:	2b80      	cmp	r3, #128	@ 0x80
 8016f6e:	d008      	beq.n	8016f82 <USBD_StdEPReq+0xfe>
 8016f70:	683b      	ldr	r3, [r7, #0]
 8016f72:	88db      	ldrh	r3, [r3, #6]
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d104      	bne.n	8016f82 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016f78:	7bbb      	ldrb	r3, [r7, #14]
 8016f7a:	4619      	mov	r1, r3
 8016f7c:	6878      	ldr	r0, [r7, #4]
 8016f7e:	f001 f9d5 	bl	801832c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016f82:	6878      	ldr	r0, [r7, #4]
 8016f84:	f000 fd64 	bl	8017a50 <USBD_CtlSendStatus>

              break;
 8016f88:	e004      	b.n	8016f94 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016f8a:	6839      	ldr	r1, [r7, #0]
 8016f8c:	6878      	ldr	r0, [r7, #4]
 8016f8e:	f000 fc88 	bl	80178a2 <USBD_CtlError>
              break;
 8016f92:	bf00      	nop
          }
          break;
 8016f94:	e107      	b.n	80171a6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016f9c:	b2db      	uxtb	r3, r3
 8016f9e:	2b02      	cmp	r3, #2
 8016fa0:	d002      	beq.n	8016fa8 <USBD_StdEPReq+0x124>
 8016fa2:	2b03      	cmp	r3, #3
 8016fa4:	d016      	beq.n	8016fd4 <USBD_StdEPReq+0x150>
 8016fa6:	e04b      	b.n	8017040 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016fa8:	7bbb      	ldrb	r3, [r7, #14]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d00d      	beq.n	8016fca <USBD_StdEPReq+0x146>
 8016fae:	7bbb      	ldrb	r3, [r7, #14]
 8016fb0:	2b80      	cmp	r3, #128	@ 0x80
 8016fb2:	d00a      	beq.n	8016fca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016fb4:	7bbb      	ldrb	r3, [r7, #14]
 8016fb6:	4619      	mov	r1, r3
 8016fb8:	6878      	ldr	r0, [r7, #4]
 8016fba:	f001 f9b7 	bl	801832c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016fbe:	2180      	movs	r1, #128	@ 0x80
 8016fc0:	6878      	ldr	r0, [r7, #4]
 8016fc2:	f001 f9b3 	bl	801832c <USBD_LL_StallEP>
 8016fc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016fc8:	e040      	b.n	801704c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016fca:	6839      	ldr	r1, [r7, #0]
 8016fcc:	6878      	ldr	r0, [r7, #4]
 8016fce:	f000 fc68 	bl	80178a2 <USBD_CtlError>
              break;
 8016fd2:	e03b      	b.n	801704c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016fd4:	683b      	ldr	r3, [r7, #0]
 8016fd6:	885b      	ldrh	r3, [r3, #2]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d136      	bne.n	801704a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016fdc:	7bbb      	ldrb	r3, [r7, #14]
 8016fde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d004      	beq.n	8016ff0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016fe6:	7bbb      	ldrb	r3, [r7, #14]
 8016fe8:	4619      	mov	r1, r3
 8016fea:	6878      	ldr	r0, [r7, #4]
 8016fec:	f001 f9bd 	bl	801836a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016ff0:	6878      	ldr	r0, [r7, #4]
 8016ff2:	f000 fd2d 	bl	8017a50 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016ff6:	7bbb      	ldrb	r3, [r7, #14]
 8016ff8:	4619      	mov	r1, r3
 8016ffa:	6878      	ldr	r0, [r7, #4]
 8016ffc:	f7ff fde4 	bl	8016bc8 <USBD_CoreFindEP>
 8017000:	4603      	mov	r3, r0
 8017002:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017004:	7b7b      	ldrb	r3, [r7, #13]
 8017006:	2bff      	cmp	r3, #255	@ 0xff
 8017008:	d01f      	beq.n	801704a <USBD_StdEPReq+0x1c6>
 801700a:	7b7b      	ldrb	r3, [r7, #13]
 801700c:	2b00      	cmp	r3, #0
 801700e:	d11c      	bne.n	801704a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8017010:	7b7a      	ldrb	r2, [r7, #13]
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8017018:	7b7a      	ldrb	r2, [r7, #13]
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	32ae      	adds	r2, #174	@ 0xae
 801701e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017022:	689b      	ldr	r3, [r3, #8]
 8017024:	2b00      	cmp	r3, #0
 8017026:	d010      	beq.n	801704a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8017028:	7b7a      	ldrb	r2, [r7, #13]
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	32ae      	adds	r2, #174	@ 0xae
 801702e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017032:	689b      	ldr	r3, [r3, #8]
 8017034:	6839      	ldr	r1, [r7, #0]
 8017036:	6878      	ldr	r0, [r7, #4]
 8017038:	4798      	blx	r3
 801703a:	4603      	mov	r3, r0
 801703c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801703e:	e004      	b.n	801704a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8017040:	6839      	ldr	r1, [r7, #0]
 8017042:	6878      	ldr	r0, [r7, #4]
 8017044:	f000 fc2d 	bl	80178a2 <USBD_CtlError>
              break;
 8017048:	e000      	b.n	801704c <USBD_StdEPReq+0x1c8>
              break;
 801704a:	bf00      	nop
          }
          break;
 801704c:	e0ab      	b.n	80171a6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017054:	b2db      	uxtb	r3, r3
 8017056:	2b02      	cmp	r3, #2
 8017058:	d002      	beq.n	8017060 <USBD_StdEPReq+0x1dc>
 801705a:	2b03      	cmp	r3, #3
 801705c:	d032      	beq.n	80170c4 <USBD_StdEPReq+0x240>
 801705e:	e097      	b.n	8017190 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017060:	7bbb      	ldrb	r3, [r7, #14]
 8017062:	2b00      	cmp	r3, #0
 8017064:	d007      	beq.n	8017076 <USBD_StdEPReq+0x1f2>
 8017066:	7bbb      	ldrb	r3, [r7, #14]
 8017068:	2b80      	cmp	r3, #128	@ 0x80
 801706a:	d004      	beq.n	8017076 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801706c:	6839      	ldr	r1, [r7, #0]
 801706e:	6878      	ldr	r0, [r7, #4]
 8017070:	f000 fc17 	bl	80178a2 <USBD_CtlError>
                break;
 8017074:	e091      	b.n	801719a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017076:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801707a:	2b00      	cmp	r3, #0
 801707c:	da0b      	bge.n	8017096 <USBD_StdEPReq+0x212>
 801707e:	7bbb      	ldrb	r3, [r7, #14]
 8017080:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017084:	4613      	mov	r3, r2
 8017086:	009b      	lsls	r3, r3, #2
 8017088:	4413      	add	r3, r2
 801708a:	009b      	lsls	r3, r3, #2
 801708c:	3310      	adds	r3, #16
 801708e:	687a      	ldr	r2, [r7, #4]
 8017090:	4413      	add	r3, r2
 8017092:	3304      	adds	r3, #4
 8017094:	e00b      	b.n	80170ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017096:	7bbb      	ldrb	r3, [r7, #14]
 8017098:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801709c:	4613      	mov	r3, r2
 801709e:	009b      	lsls	r3, r3, #2
 80170a0:	4413      	add	r3, r2
 80170a2:	009b      	lsls	r3, r3, #2
 80170a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80170a8:	687a      	ldr	r2, [r7, #4]
 80170aa:	4413      	add	r3, r2
 80170ac:	3304      	adds	r3, #4
 80170ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80170b0:	68bb      	ldr	r3, [r7, #8]
 80170b2:	2200      	movs	r2, #0
 80170b4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80170b6:	68bb      	ldr	r3, [r7, #8]
 80170b8:	2202      	movs	r2, #2
 80170ba:	4619      	mov	r1, r3
 80170bc:	6878      	ldr	r0, [r7, #4]
 80170be:	f000 fc6d 	bl	801799c <USBD_CtlSendData>
              break;
 80170c2:	e06a      	b.n	801719a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80170c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	da11      	bge.n	80170f0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80170cc:	7bbb      	ldrb	r3, [r7, #14]
 80170ce:	f003 020f 	and.w	r2, r3, #15
 80170d2:	6879      	ldr	r1, [r7, #4]
 80170d4:	4613      	mov	r3, r2
 80170d6:	009b      	lsls	r3, r3, #2
 80170d8:	4413      	add	r3, r2
 80170da:	009b      	lsls	r3, r3, #2
 80170dc:	440b      	add	r3, r1
 80170de:	3324      	adds	r3, #36	@ 0x24
 80170e0:	881b      	ldrh	r3, [r3, #0]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d117      	bne.n	8017116 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80170e6:	6839      	ldr	r1, [r7, #0]
 80170e8:	6878      	ldr	r0, [r7, #4]
 80170ea:	f000 fbda 	bl	80178a2 <USBD_CtlError>
                  break;
 80170ee:	e054      	b.n	801719a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80170f0:	7bbb      	ldrb	r3, [r7, #14]
 80170f2:	f003 020f 	and.w	r2, r3, #15
 80170f6:	6879      	ldr	r1, [r7, #4]
 80170f8:	4613      	mov	r3, r2
 80170fa:	009b      	lsls	r3, r3, #2
 80170fc:	4413      	add	r3, r2
 80170fe:	009b      	lsls	r3, r3, #2
 8017100:	440b      	add	r3, r1
 8017102:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017106:	881b      	ldrh	r3, [r3, #0]
 8017108:	2b00      	cmp	r3, #0
 801710a:	d104      	bne.n	8017116 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801710c:	6839      	ldr	r1, [r7, #0]
 801710e:	6878      	ldr	r0, [r7, #4]
 8017110:	f000 fbc7 	bl	80178a2 <USBD_CtlError>
                  break;
 8017114:	e041      	b.n	801719a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017116:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801711a:	2b00      	cmp	r3, #0
 801711c:	da0b      	bge.n	8017136 <USBD_StdEPReq+0x2b2>
 801711e:	7bbb      	ldrb	r3, [r7, #14]
 8017120:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017124:	4613      	mov	r3, r2
 8017126:	009b      	lsls	r3, r3, #2
 8017128:	4413      	add	r3, r2
 801712a:	009b      	lsls	r3, r3, #2
 801712c:	3310      	adds	r3, #16
 801712e:	687a      	ldr	r2, [r7, #4]
 8017130:	4413      	add	r3, r2
 8017132:	3304      	adds	r3, #4
 8017134:	e00b      	b.n	801714e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017136:	7bbb      	ldrb	r3, [r7, #14]
 8017138:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801713c:	4613      	mov	r3, r2
 801713e:	009b      	lsls	r3, r3, #2
 8017140:	4413      	add	r3, r2
 8017142:	009b      	lsls	r3, r3, #2
 8017144:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8017148:	687a      	ldr	r2, [r7, #4]
 801714a:	4413      	add	r3, r2
 801714c:	3304      	adds	r3, #4
 801714e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8017150:	7bbb      	ldrb	r3, [r7, #14]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d002      	beq.n	801715c <USBD_StdEPReq+0x2d8>
 8017156:	7bbb      	ldrb	r3, [r7, #14]
 8017158:	2b80      	cmp	r3, #128	@ 0x80
 801715a:	d103      	bne.n	8017164 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801715c:	68bb      	ldr	r3, [r7, #8]
 801715e:	2200      	movs	r2, #0
 8017160:	601a      	str	r2, [r3, #0]
 8017162:	e00e      	b.n	8017182 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8017164:	7bbb      	ldrb	r3, [r7, #14]
 8017166:	4619      	mov	r1, r3
 8017168:	6878      	ldr	r0, [r7, #4]
 801716a:	f001 f91d 	bl	80183a8 <USBD_LL_IsStallEP>
 801716e:	4603      	mov	r3, r0
 8017170:	2b00      	cmp	r3, #0
 8017172:	d003      	beq.n	801717c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8017174:	68bb      	ldr	r3, [r7, #8]
 8017176:	2201      	movs	r2, #1
 8017178:	601a      	str	r2, [r3, #0]
 801717a:	e002      	b.n	8017182 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801717c:	68bb      	ldr	r3, [r7, #8]
 801717e:	2200      	movs	r2, #0
 8017180:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017182:	68bb      	ldr	r3, [r7, #8]
 8017184:	2202      	movs	r2, #2
 8017186:	4619      	mov	r1, r3
 8017188:	6878      	ldr	r0, [r7, #4]
 801718a:	f000 fc07 	bl	801799c <USBD_CtlSendData>
              break;
 801718e:	e004      	b.n	801719a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8017190:	6839      	ldr	r1, [r7, #0]
 8017192:	6878      	ldr	r0, [r7, #4]
 8017194:	f000 fb85 	bl	80178a2 <USBD_CtlError>
              break;
 8017198:	bf00      	nop
          }
          break;
 801719a:	e004      	b.n	80171a6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801719c:	6839      	ldr	r1, [r7, #0]
 801719e:	6878      	ldr	r0, [r7, #4]
 80171a0:	f000 fb7f 	bl	80178a2 <USBD_CtlError>
          break;
 80171a4:	bf00      	nop
      }
      break;
 80171a6:	e005      	b.n	80171b4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80171a8:	6839      	ldr	r1, [r7, #0]
 80171aa:	6878      	ldr	r0, [r7, #4]
 80171ac:	f000 fb79 	bl	80178a2 <USBD_CtlError>
      break;
 80171b0:	e000      	b.n	80171b4 <USBD_StdEPReq+0x330>
      break;
 80171b2:	bf00      	nop
  }

  return ret;
 80171b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80171b6:	4618      	mov	r0, r3
 80171b8:	3710      	adds	r7, #16
 80171ba:	46bd      	mov	sp, r7
 80171bc:	bd80      	pop	{r7, pc}
	...

080171c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b084      	sub	sp, #16
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
 80171c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80171ca:	2300      	movs	r3, #0
 80171cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80171ce:	2300      	movs	r3, #0
 80171d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80171d2:	2300      	movs	r3, #0
 80171d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80171d6:	683b      	ldr	r3, [r7, #0]
 80171d8:	885b      	ldrh	r3, [r3, #2]
 80171da:	0a1b      	lsrs	r3, r3, #8
 80171dc:	b29b      	uxth	r3, r3
 80171de:	3b01      	subs	r3, #1
 80171e0:	2b0e      	cmp	r3, #14
 80171e2:	f200 8152 	bhi.w	801748a <USBD_GetDescriptor+0x2ca>
 80171e6:	a201      	add	r2, pc, #4	@ (adr r2, 80171ec <USBD_GetDescriptor+0x2c>)
 80171e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171ec:	0801725d 	.word	0x0801725d
 80171f0:	08017275 	.word	0x08017275
 80171f4:	080172b5 	.word	0x080172b5
 80171f8:	0801748b 	.word	0x0801748b
 80171fc:	0801748b 	.word	0x0801748b
 8017200:	0801742b 	.word	0x0801742b
 8017204:	08017457 	.word	0x08017457
 8017208:	0801748b 	.word	0x0801748b
 801720c:	0801748b 	.word	0x0801748b
 8017210:	0801748b 	.word	0x0801748b
 8017214:	0801748b 	.word	0x0801748b
 8017218:	0801748b 	.word	0x0801748b
 801721c:	0801748b 	.word	0x0801748b
 8017220:	0801748b 	.word	0x0801748b
 8017224:	08017229 	.word	0x08017229
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801722e:	69db      	ldr	r3, [r3, #28]
 8017230:	2b00      	cmp	r3, #0
 8017232:	d00b      	beq.n	801724c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801723a:	69db      	ldr	r3, [r3, #28]
 801723c:	687a      	ldr	r2, [r7, #4]
 801723e:	7c12      	ldrb	r2, [r2, #16]
 8017240:	f107 0108 	add.w	r1, r7, #8
 8017244:	4610      	mov	r0, r2
 8017246:	4798      	blx	r3
 8017248:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801724a:	e126      	b.n	801749a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801724c:	6839      	ldr	r1, [r7, #0]
 801724e:	6878      	ldr	r0, [r7, #4]
 8017250:	f000 fb27 	bl	80178a2 <USBD_CtlError>
        err++;
 8017254:	7afb      	ldrb	r3, [r7, #11]
 8017256:	3301      	adds	r3, #1
 8017258:	72fb      	strb	r3, [r7, #11]
      break;
 801725a:	e11e      	b.n	801749a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	687a      	ldr	r2, [r7, #4]
 8017266:	7c12      	ldrb	r2, [r2, #16]
 8017268:	f107 0108 	add.w	r1, r7, #8
 801726c:	4610      	mov	r0, r2
 801726e:	4798      	blx	r3
 8017270:	60f8      	str	r0, [r7, #12]
      break;
 8017272:	e112      	b.n	801749a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	7c1b      	ldrb	r3, [r3, #16]
 8017278:	2b00      	cmp	r3, #0
 801727a:	d10d      	bne.n	8017298 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017284:	f107 0208 	add.w	r2, r7, #8
 8017288:	4610      	mov	r0, r2
 801728a:	4798      	blx	r3
 801728c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	3301      	adds	r3, #1
 8017292:	2202      	movs	r2, #2
 8017294:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8017296:	e100      	b.n	801749a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801729e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80172a0:	f107 0208 	add.w	r2, r7, #8
 80172a4:	4610      	mov	r0, r2
 80172a6:	4798      	blx	r3
 80172a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	3301      	adds	r3, #1
 80172ae:	2202      	movs	r2, #2
 80172b0:	701a      	strb	r2, [r3, #0]
      break;
 80172b2:	e0f2      	b.n	801749a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80172b4:	683b      	ldr	r3, [r7, #0]
 80172b6:	885b      	ldrh	r3, [r3, #2]
 80172b8:	b2db      	uxtb	r3, r3
 80172ba:	2b05      	cmp	r3, #5
 80172bc:	f200 80ac 	bhi.w	8017418 <USBD_GetDescriptor+0x258>
 80172c0:	a201      	add	r2, pc, #4	@ (adr r2, 80172c8 <USBD_GetDescriptor+0x108>)
 80172c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172c6:	bf00      	nop
 80172c8:	080172e1 	.word	0x080172e1
 80172cc:	08017315 	.word	0x08017315
 80172d0:	08017349 	.word	0x08017349
 80172d4:	0801737d 	.word	0x0801737d
 80172d8:	080173b1 	.word	0x080173b1
 80172dc:	080173e5 	.word	0x080173e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80172e6:	685b      	ldr	r3, [r3, #4]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d00b      	beq.n	8017304 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80172f2:	685b      	ldr	r3, [r3, #4]
 80172f4:	687a      	ldr	r2, [r7, #4]
 80172f6:	7c12      	ldrb	r2, [r2, #16]
 80172f8:	f107 0108 	add.w	r1, r7, #8
 80172fc:	4610      	mov	r0, r2
 80172fe:	4798      	blx	r3
 8017300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017302:	e091      	b.n	8017428 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017304:	6839      	ldr	r1, [r7, #0]
 8017306:	6878      	ldr	r0, [r7, #4]
 8017308:	f000 facb 	bl	80178a2 <USBD_CtlError>
            err++;
 801730c:	7afb      	ldrb	r3, [r7, #11]
 801730e:	3301      	adds	r3, #1
 8017310:	72fb      	strb	r3, [r7, #11]
          break;
 8017312:	e089      	b.n	8017428 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801731a:	689b      	ldr	r3, [r3, #8]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d00b      	beq.n	8017338 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017326:	689b      	ldr	r3, [r3, #8]
 8017328:	687a      	ldr	r2, [r7, #4]
 801732a:	7c12      	ldrb	r2, [r2, #16]
 801732c:	f107 0108 	add.w	r1, r7, #8
 8017330:	4610      	mov	r0, r2
 8017332:	4798      	blx	r3
 8017334:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017336:	e077      	b.n	8017428 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017338:	6839      	ldr	r1, [r7, #0]
 801733a:	6878      	ldr	r0, [r7, #4]
 801733c:	f000 fab1 	bl	80178a2 <USBD_CtlError>
            err++;
 8017340:	7afb      	ldrb	r3, [r7, #11]
 8017342:	3301      	adds	r3, #1
 8017344:	72fb      	strb	r3, [r7, #11]
          break;
 8017346:	e06f      	b.n	8017428 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801734e:	68db      	ldr	r3, [r3, #12]
 8017350:	2b00      	cmp	r3, #0
 8017352:	d00b      	beq.n	801736c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801735a:	68db      	ldr	r3, [r3, #12]
 801735c:	687a      	ldr	r2, [r7, #4]
 801735e:	7c12      	ldrb	r2, [r2, #16]
 8017360:	f107 0108 	add.w	r1, r7, #8
 8017364:	4610      	mov	r0, r2
 8017366:	4798      	blx	r3
 8017368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801736a:	e05d      	b.n	8017428 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801736c:	6839      	ldr	r1, [r7, #0]
 801736e:	6878      	ldr	r0, [r7, #4]
 8017370:	f000 fa97 	bl	80178a2 <USBD_CtlError>
            err++;
 8017374:	7afb      	ldrb	r3, [r7, #11]
 8017376:	3301      	adds	r3, #1
 8017378:	72fb      	strb	r3, [r7, #11]
          break;
 801737a:	e055      	b.n	8017428 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017382:	691b      	ldr	r3, [r3, #16]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d00b      	beq.n	80173a0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801738e:	691b      	ldr	r3, [r3, #16]
 8017390:	687a      	ldr	r2, [r7, #4]
 8017392:	7c12      	ldrb	r2, [r2, #16]
 8017394:	f107 0108 	add.w	r1, r7, #8
 8017398:	4610      	mov	r0, r2
 801739a:	4798      	blx	r3
 801739c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801739e:	e043      	b.n	8017428 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80173a0:	6839      	ldr	r1, [r7, #0]
 80173a2:	6878      	ldr	r0, [r7, #4]
 80173a4:	f000 fa7d 	bl	80178a2 <USBD_CtlError>
            err++;
 80173a8:	7afb      	ldrb	r3, [r7, #11]
 80173aa:	3301      	adds	r3, #1
 80173ac:	72fb      	strb	r3, [r7, #11]
          break;
 80173ae:	e03b      	b.n	8017428 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80173b6:	695b      	ldr	r3, [r3, #20]
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d00b      	beq.n	80173d4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80173c2:	695b      	ldr	r3, [r3, #20]
 80173c4:	687a      	ldr	r2, [r7, #4]
 80173c6:	7c12      	ldrb	r2, [r2, #16]
 80173c8:	f107 0108 	add.w	r1, r7, #8
 80173cc:	4610      	mov	r0, r2
 80173ce:	4798      	blx	r3
 80173d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80173d2:	e029      	b.n	8017428 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80173d4:	6839      	ldr	r1, [r7, #0]
 80173d6:	6878      	ldr	r0, [r7, #4]
 80173d8:	f000 fa63 	bl	80178a2 <USBD_CtlError>
            err++;
 80173dc:	7afb      	ldrb	r3, [r7, #11]
 80173de:	3301      	adds	r3, #1
 80173e0:	72fb      	strb	r3, [r7, #11]
          break;
 80173e2:	e021      	b.n	8017428 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80173ea:	699b      	ldr	r3, [r3, #24]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d00b      	beq.n	8017408 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80173f6:	699b      	ldr	r3, [r3, #24]
 80173f8:	687a      	ldr	r2, [r7, #4]
 80173fa:	7c12      	ldrb	r2, [r2, #16]
 80173fc:	f107 0108 	add.w	r1, r7, #8
 8017400:	4610      	mov	r0, r2
 8017402:	4798      	blx	r3
 8017404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017406:	e00f      	b.n	8017428 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017408:	6839      	ldr	r1, [r7, #0]
 801740a:	6878      	ldr	r0, [r7, #4]
 801740c:	f000 fa49 	bl	80178a2 <USBD_CtlError>
            err++;
 8017410:	7afb      	ldrb	r3, [r7, #11]
 8017412:	3301      	adds	r3, #1
 8017414:	72fb      	strb	r3, [r7, #11]
          break;
 8017416:	e007      	b.n	8017428 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017418:	6839      	ldr	r1, [r7, #0]
 801741a:	6878      	ldr	r0, [r7, #4]
 801741c:	f000 fa41 	bl	80178a2 <USBD_CtlError>
          err++;
 8017420:	7afb      	ldrb	r3, [r7, #11]
 8017422:	3301      	adds	r3, #1
 8017424:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8017426:	bf00      	nop
      }
      break;
 8017428:	e037      	b.n	801749a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	7c1b      	ldrb	r3, [r3, #16]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d109      	bne.n	8017446 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801743a:	f107 0208 	add.w	r2, r7, #8
 801743e:	4610      	mov	r0, r2
 8017440:	4798      	blx	r3
 8017442:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017444:	e029      	b.n	801749a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017446:	6839      	ldr	r1, [r7, #0]
 8017448:	6878      	ldr	r0, [r7, #4]
 801744a:	f000 fa2a 	bl	80178a2 <USBD_CtlError>
        err++;
 801744e:	7afb      	ldrb	r3, [r7, #11]
 8017450:	3301      	adds	r3, #1
 8017452:	72fb      	strb	r3, [r7, #11]
      break;
 8017454:	e021      	b.n	801749a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	7c1b      	ldrb	r3, [r3, #16]
 801745a:	2b00      	cmp	r3, #0
 801745c:	d10d      	bne.n	801747a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017466:	f107 0208 	add.w	r2, r7, #8
 801746a:	4610      	mov	r0, r2
 801746c:	4798      	blx	r3
 801746e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	3301      	adds	r3, #1
 8017474:	2207      	movs	r2, #7
 8017476:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017478:	e00f      	b.n	801749a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801747a:	6839      	ldr	r1, [r7, #0]
 801747c:	6878      	ldr	r0, [r7, #4]
 801747e:	f000 fa10 	bl	80178a2 <USBD_CtlError>
        err++;
 8017482:	7afb      	ldrb	r3, [r7, #11]
 8017484:	3301      	adds	r3, #1
 8017486:	72fb      	strb	r3, [r7, #11]
      break;
 8017488:	e007      	b.n	801749a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801748a:	6839      	ldr	r1, [r7, #0]
 801748c:	6878      	ldr	r0, [r7, #4]
 801748e:	f000 fa08 	bl	80178a2 <USBD_CtlError>
      err++;
 8017492:	7afb      	ldrb	r3, [r7, #11]
 8017494:	3301      	adds	r3, #1
 8017496:	72fb      	strb	r3, [r7, #11]
      break;
 8017498:	bf00      	nop
  }

  if (err != 0U)
 801749a:	7afb      	ldrb	r3, [r7, #11]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d11e      	bne.n	80174de <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80174a0:	683b      	ldr	r3, [r7, #0]
 80174a2:	88db      	ldrh	r3, [r3, #6]
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d016      	beq.n	80174d6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80174a8:	893b      	ldrh	r3, [r7, #8]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d00e      	beq.n	80174cc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80174ae:	683b      	ldr	r3, [r7, #0]
 80174b0:	88da      	ldrh	r2, [r3, #6]
 80174b2:	893b      	ldrh	r3, [r7, #8]
 80174b4:	4293      	cmp	r3, r2
 80174b6:	bf28      	it	cs
 80174b8:	4613      	movcs	r3, r2
 80174ba:	b29b      	uxth	r3, r3
 80174bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80174be:	893b      	ldrh	r3, [r7, #8]
 80174c0:	461a      	mov	r2, r3
 80174c2:	68f9      	ldr	r1, [r7, #12]
 80174c4:	6878      	ldr	r0, [r7, #4]
 80174c6:	f000 fa69 	bl	801799c <USBD_CtlSendData>
 80174ca:	e009      	b.n	80174e0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80174cc:	6839      	ldr	r1, [r7, #0]
 80174ce:	6878      	ldr	r0, [r7, #4]
 80174d0:	f000 f9e7 	bl	80178a2 <USBD_CtlError>
 80174d4:	e004      	b.n	80174e0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80174d6:	6878      	ldr	r0, [r7, #4]
 80174d8:	f000 faba 	bl	8017a50 <USBD_CtlSendStatus>
 80174dc:	e000      	b.n	80174e0 <USBD_GetDescriptor+0x320>
    return;
 80174de:	bf00      	nop
  }
}
 80174e0:	3710      	adds	r7, #16
 80174e2:	46bd      	mov	sp, r7
 80174e4:	bd80      	pop	{r7, pc}
 80174e6:	bf00      	nop

080174e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b084      	sub	sp, #16
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	6078      	str	r0, [r7, #4]
 80174f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80174f2:	683b      	ldr	r3, [r7, #0]
 80174f4:	889b      	ldrh	r3, [r3, #4]
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d131      	bne.n	801755e <USBD_SetAddress+0x76>
 80174fa:	683b      	ldr	r3, [r7, #0]
 80174fc:	88db      	ldrh	r3, [r3, #6]
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d12d      	bne.n	801755e <USBD_SetAddress+0x76>
 8017502:	683b      	ldr	r3, [r7, #0]
 8017504:	885b      	ldrh	r3, [r3, #2]
 8017506:	2b7f      	cmp	r3, #127	@ 0x7f
 8017508:	d829      	bhi.n	801755e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801750a:	683b      	ldr	r3, [r7, #0]
 801750c:	885b      	ldrh	r3, [r3, #2]
 801750e:	b2db      	uxtb	r3, r3
 8017510:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017514:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801751c:	b2db      	uxtb	r3, r3
 801751e:	2b03      	cmp	r3, #3
 8017520:	d104      	bne.n	801752c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8017522:	6839      	ldr	r1, [r7, #0]
 8017524:	6878      	ldr	r0, [r7, #4]
 8017526:	f000 f9bc 	bl	80178a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801752a:	e01d      	b.n	8017568 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	7bfa      	ldrb	r2, [r7, #15]
 8017530:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017534:	7bfb      	ldrb	r3, [r7, #15]
 8017536:	4619      	mov	r1, r3
 8017538:	6878      	ldr	r0, [r7, #4]
 801753a:	f000 ff61 	bl	8018400 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801753e:	6878      	ldr	r0, [r7, #4]
 8017540:	f000 fa86 	bl	8017a50 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017544:	7bfb      	ldrb	r3, [r7, #15]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d004      	beq.n	8017554 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	2202      	movs	r2, #2
 801754e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017552:	e009      	b.n	8017568 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	2201      	movs	r2, #1
 8017558:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801755c:	e004      	b.n	8017568 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801755e:	6839      	ldr	r1, [r7, #0]
 8017560:	6878      	ldr	r0, [r7, #4]
 8017562:	f000 f99e 	bl	80178a2 <USBD_CtlError>
  }
}
 8017566:	bf00      	nop
 8017568:	bf00      	nop
 801756a:	3710      	adds	r7, #16
 801756c:	46bd      	mov	sp, r7
 801756e:	bd80      	pop	{r7, pc}

08017570 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017570:	b580      	push	{r7, lr}
 8017572:	b084      	sub	sp, #16
 8017574:	af00      	add	r7, sp, #0
 8017576:	6078      	str	r0, [r7, #4]
 8017578:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801757a:	2300      	movs	r3, #0
 801757c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801757e:	683b      	ldr	r3, [r7, #0]
 8017580:	885b      	ldrh	r3, [r3, #2]
 8017582:	b2da      	uxtb	r2, r3
 8017584:	4b4e      	ldr	r3, [pc, #312]	@ (80176c0 <USBD_SetConfig+0x150>)
 8017586:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017588:	4b4d      	ldr	r3, [pc, #308]	@ (80176c0 <USBD_SetConfig+0x150>)
 801758a:	781b      	ldrb	r3, [r3, #0]
 801758c:	2b01      	cmp	r3, #1
 801758e:	d905      	bls.n	801759c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017590:	6839      	ldr	r1, [r7, #0]
 8017592:	6878      	ldr	r0, [r7, #4]
 8017594:	f000 f985 	bl	80178a2 <USBD_CtlError>
    return USBD_FAIL;
 8017598:	2303      	movs	r3, #3
 801759a:	e08c      	b.n	80176b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80175a2:	b2db      	uxtb	r3, r3
 80175a4:	2b02      	cmp	r3, #2
 80175a6:	d002      	beq.n	80175ae <USBD_SetConfig+0x3e>
 80175a8:	2b03      	cmp	r3, #3
 80175aa:	d029      	beq.n	8017600 <USBD_SetConfig+0x90>
 80175ac:	e075      	b.n	801769a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80175ae:	4b44      	ldr	r3, [pc, #272]	@ (80176c0 <USBD_SetConfig+0x150>)
 80175b0:	781b      	ldrb	r3, [r3, #0]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d020      	beq.n	80175f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80175b6:	4b42      	ldr	r3, [pc, #264]	@ (80176c0 <USBD_SetConfig+0x150>)
 80175b8:	781b      	ldrb	r3, [r3, #0]
 80175ba:	461a      	mov	r2, r3
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80175c0:	4b3f      	ldr	r3, [pc, #252]	@ (80176c0 <USBD_SetConfig+0x150>)
 80175c2:	781b      	ldrb	r3, [r3, #0]
 80175c4:	4619      	mov	r1, r3
 80175c6:	6878      	ldr	r0, [r7, #4]
 80175c8:	f7fe ffb9 	bl	801653e <USBD_SetClassConfig>
 80175cc:	4603      	mov	r3, r0
 80175ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80175d0:	7bfb      	ldrb	r3, [r7, #15]
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d008      	beq.n	80175e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80175d6:	6839      	ldr	r1, [r7, #0]
 80175d8:	6878      	ldr	r0, [r7, #4]
 80175da:	f000 f962 	bl	80178a2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	2202      	movs	r2, #2
 80175e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80175e6:	e065      	b.n	80176b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80175e8:	6878      	ldr	r0, [r7, #4]
 80175ea:	f000 fa31 	bl	8017a50 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	2203      	movs	r2, #3
 80175f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80175f6:	e05d      	b.n	80176b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80175f8:	6878      	ldr	r0, [r7, #4]
 80175fa:	f000 fa29 	bl	8017a50 <USBD_CtlSendStatus>
      break;
 80175fe:	e059      	b.n	80176b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017600:	4b2f      	ldr	r3, [pc, #188]	@ (80176c0 <USBD_SetConfig+0x150>)
 8017602:	781b      	ldrb	r3, [r3, #0]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d112      	bne.n	801762e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	2202      	movs	r2, #2
 801760c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8017610:	4b2b      	ldr	r3, [pc, #172]	@ (80176c0 <USBD_SetConfig+0x150>)
 8017612:	781b      	ldrb	r3, [r3, #0]
 8017614:	461a      	mov	r2, r3
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801761a:	4b29      	ldr	r3, [pc, #164]	@ (80176c0 <USBD_SetConfig+0x150>)
 801761c:	781b      	ldrb	r3, [r3, #0]
 801761e:	4619      	mov	r1, r3
 8017620:	6878      	ldr	r0, [r7, #4]
 8017622:	f7fe ffa8 	bl	8016576 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8017626:	6878      	ldr	r0, [r7, #4]
 8017628:	f000 fa12 	bl	8017a50 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801762c:	e042      	b.n	80176b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801762e:	4b24      	ldr	r3, [pc, #144]	@ (80176c0 <USBD_SetConfig+0x150>)
 8017630:	781b      	ldrb	r3, [r3, #0]
 8017632:	461a      	mov	r2, r3
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	685b      	ldr	r3, [r3, #4]
 8017638:	429a      	cmp	r2, r3
 801763a:	d02a      	beq.n	8017692 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	685b      	ldr	r3, [r3, #4]
 8017640:	b2db      	uxtb	r3, r3
 8017642:	4619      	mov	r1, r3
 8017644:	6878      	ldr	r0, [r7, #4]
 8017646:	f7fe ff96 	bl	8016576 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801764a:	4b1d      	ldr	r3, [pc, #116]	@ (80176c0 <USBD_SetConfig+0x150>)
 801764c:	781b      	ldrb	r3, [r3, #0]
 801764e:	461a      	mov	r2, r3
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017654:	4b1a      	ldr	r3, [pc, #104]	@ (80176c0 <USBD_SetConfig+0x150>)
 8017656:	781b      	ldrb	r3, [r3, #0]
 8017658:	4619      	mov	r1, r3
 801765a:	6878      	ldr	r0, [r7, #4]
 801765c:	f7fe ff6f 	bl	801653e <USBD_SetClassConfig>
 8017660:	4603      	mov	r3, r0
 8017662:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017664:	7bfb      	ldrb	r3, [r7, #15]
 8017666:	2b00      	cmp	r3, #0
 8017668:	d00f      	beq.n	801768a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801766a:	6839      	ldr	r1, [r7, #0]
 801766c:	6878      	ldr	r0, [r7, #4]
 801766e:	f000 f918 	bl	80178a2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	685b      	ldr	r3, [r3, #4]
 8017676:	b2db      	uxtb	r3, r3
 8017678:	4619      	mov	r1, r3
 801767a:	6878      	ldr	r0, [r7, #4]
 801767c:	f7fe ff7b 	bl	8016576 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	2202      	movs	r2, #2
 8017684:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017688:	e014      	b.n	80176b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801768a:	6878      	ldr	r0, [r7, #4]
 801768c:	f000 f9e0 	bl	8017a50 <USBD_CtlSendStatus>
      break;
 8017690:	e010      	b.n	80176b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017692:	6878      	ldr	r0, [r7, #4]
 8017694:	f000 f9dc 	bl	8017a50 <USBD_CtlSendStatus>
      break;
 8017698:	e00c      	b.n	80176b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801769a:	6839      	ldr	r1, [r7, #0]
 801769c:	6878      	ldr	r0, [r7, #4]
 801769e:	f000 f900 	bl	80178a2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80176a2:	4b07      	ldr	r3, [pc, #28]	@ (80176c0 <USBD_SetConfig+0x150>)
 80176a4:	781b      	ldrb	r3, [r3, #0]
 80176a6:	4619      	mov	r1, r3
 80176a8:	6878      	ldr	r0, [r7, #4]
 80176aa:	f7fe ff64 	bl	8016576 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80176ae:	2303      	movs	r3, #3
 80176b0:	73fb      	strb	r3, [r7, #15]
      break;
 80176b2:	bf00      	nop
  }

  return ret;
 80176b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80176b6:	4618      	mov	r0, r3
 80176b8:	3710      	adds	r7, #16
 80176ba:	46bd      	mov	sp, r7
 80176bc:	bd80      	pop	{r7, pc}
 80176be:	bf00      	nop
 80176c0:	24025d70 	.word	0x24025d70

080176c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80176c4:	b580      	push	{r7, lr}
 80176c6:	b082      	sub	sp, #8
 80176c8:	af00      	add	r7, sp, #0
 80176ca:	6078      	str	r0, [r7, #4]
 80176cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80176ce:	683b      	ldr	r3, [r7, #0]
 80176d0:	88db      	ldrh	r3, [r3, #6]
 80176d2:	2b01      	cmp	r3, #1
 80176d4:	d004      	beq.n	80176e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80176d6:	6839      	ldr	r1, [r7, #0]
 80176d8:	6878      	ldr	r0, [r7, #4]
 80176da:	f000 f8e2 	bl	80178a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80176de:	e023      	b.n	8017728 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80176e6:	b2db      	uxtb	r3, r3
 80176e8:	2b02      	cmp	r3, #2
 80176ea:	dc02      	bgt.n	80176f2 <USBD_GetConfig+0x2e>
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	dc03      	bgt.n	80176f8 <USBD_GetConfig+0x34>
 80176f0:	e015      	b.n	801771e <USBD_GetConfig+0x5a>
 80176f2:	2b03      	cmp	r3, #3
 80176f4:	d00b      	beq.n	801770e <USBD_GetConfig+0x4a>
 80176f6:	e012      	b.n	801771e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	2200      	movs	r2, #0
 80176fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	3308      	adds	r3, #8
 8017702:	2201      	movs	r2, #1
 8017704:	4619      	mov	r1, r3
 8017706:	6878      	ldr	r0, [r7, #4]
 8017708:	f000 f948 	bl	801799c <USBD_CtlSendData>
        break;
 801770c:	e00c      	b.n	8017728 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	3304      	adds	r3, #4
 8017712:	2201      	movs	r2, #1
 8017714:	4619      	mov	r1, r3
 8017716:	6878      	ldr	r0, [r7, #4]
 8017718:	f000 f940 	bl	801799c <USBD_CtlSendData>
        break;
 801771c:	e004      	b.n	8017728 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801771e:	6839      	ldr	r1, [r7, #0]
 8017720:	6878      	ldr	r0, [r7, #4]
 8017722:	f000 f8be 	bl	80178a2 <USBD_CtlError>
        break;
 8017726:	bf00      	nop
}
 8017728:	bf00      	nop
 801772a:	3708      	adds	r7, #8
 801772c:	46bd      	mov	sp, r7
 801772e:	bd80      	pop	{r7, pc}

08017730 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017730:	b580      	push	{r7, lr}
 8017732:	b082      	sub	sp, #8
 8017734:	af00      	add	r7, sp, #0
 8017736:	6078      	str	r0, [r7, #4]
 8017738:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017740:	b2db      	uxtb	r3, r3
 8017742:	3b01      	subs	r3, #1
 8017744:	2b02      	cmp	r3, #2
 8017746:	d81e      	bhi.n	8017786 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017748:	683b      	ldr	r3, [r7, #0]
 801774a:	88db      	ldrh	r3, [r3, #6]
 801774c:	2b02      	cmp	r3, #2
 801774e:	d004      	beq.n	801775a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017750:	6839      	ldr	r1, [r7, #0]
 8017752:	6878      	ldr	r0, [r7, #4]
 8017754:	f000 f8a5 	bl	80178a2 <USBD_CtlError>
        break;
 8017758:	e01a      	b.n	8017790 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	2201      	movs	r2, #1
 801775e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8017766:	2b00      	cmp	r3, #0
 8017768:	d005      	beq.n	8017776 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	68db      	ldr	r3, [r3, #12]
 801776e:	f043 0202 	orr.w	r2, r3, #2
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	330c      	adds	r3, #12
 801777a:	2202      	movs	r2, #2
 801777c:	4619      	mov	r1, r3
 801777e:	6878      	ldr	r0, [r7, #4]
 8017780:	f000 f90c 	bl	801799c <USBD_CtlSendData>
      break;
 8017784:	e004      	b.n	8017790 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017786:	6839      	ldr	r1, [r7, #0]
 8017788:	6878      	ldr	r0, [r7, #4]
 801778a:	f000 f88a 	bl	80178a2 <USBD_CtlError>
      break;
 801778e:	bf00      	nop
  }
}
 8017790:	bf00      	nop
 8017792:	3708      	adds	r7, #8
 8017794:	46bd      	mov	sp, r7
 8017796:	bd80      	pop	{r7, pc}

08017798 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017798:	b580      	push	{r7, lr}
 801779a:	b082      	sub	sp, #8
 801779c:	af00      	add	r7, sp, #0
 801779e:	6078      	str	r0, [r7, #4]
 80177a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80177a2:	683b      	ldr	r3, [r7, #0]
 80177a4:	885b      	ldrh	r3, [r3, #2]
 80177a6:	2b01      	cmp	r3, #1
 80177a8:	d107      	bne.n	80177ba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	2201      	movs	r2, #1
 80177ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80177b2:	6878      	ldr	r0, [r7, #4]
 80177b4:	f000 f94c 	bl	8017a50 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80177b8:	e013      	b.n	80177e2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80177ba:	683b      	ldr	r3, [r7, #0]
 80177bc:	885b      	ldrh	r3, [r3, #2]
 80177be:	2b02      	cmp	r3, #2
 80177c0:	d10b      	bne.n	80177da <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80177c2:	683b      	ldr	r3, [r7, #0]
 80177c4:	889b      	ldrh	r3, [r3, #4]
 80177c6:	0a1b      	lsrs	r3, r3, #8
 80177c8:	b29b      	uxth	r3, r3
 80177ca:	b2da      	uxtb	r2, r3
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80177d2:	6878      	ldr	r0, [r7, #4]
 80177d4:	f000 f93c 	bl	8017a50 <USBD_CtlSendStatus>
}
 80177d8:	e003      	b.n	80177e2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80177da:	6839      	ldr	r1, [r7, #0]
 80177dc:	6878      	ldr	r0, [r7, #4]
 80177de:	f000 f860 	bl	80178a2 <USBD_CtlError>
}
 80177e2:	bf00      	nop
 80177e4:	3708      	adds	r7, #8
 80177e6:	46bd      	mov	sp, r7
 80177e8:	bd80      	pop	{r7, pc}

080177ea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80177ea:	b580      	push	{r7, lr}
 80177ec:	b082      	sub	sp, #8
 80177ee:	af00      	add	r7, sp, #0
 80177f0:	6078      	str	r0, [r7, #4]
 80177f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80177fa:	b2db      	uxtb	r3, r3
 80177fc:	3b01      	subs	r3, #1
 80177fe:	2b02      	cmp	r3, #2
 8017800:	d80b      	bhi.n	801781a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017802:	683b      	ldr	r3, [r7, #0]
 8017804:	885b      	ldrh	r3, [r3, #2]
 8017806:	2b01      	cmp	r3, #1
 8017808:	d10c      	bne.n	8017824 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	2200      	movs	r2, #0
 801780e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017812:	6878      	ldr	r0, [r7, #4]
 8017814:	f000 f91c 	bl	8017a50 <USBD_CtlSendStatus>
      }
      break;
 8017818:	e004      	b.n	8017824 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801781a:	6839      	ldr	r1, [r7, #0]
 801781c:	6878      	ldr	r0, [r7, #4]
 801781e:	f000 f840 	bl	80178a2 <USBD_CtlError>
      break;
 8017822:	e000      	b.n	8017826 <USBD_ClrFeature+0x3c>
      break;
 8017824:	bf00      	nop
  }
}
 8017826:	bf00      	nop
 8017828:	3708      	adds	r7, #8
 801782a:	46bd      	mov	sp, r7
 801782c:	bd80      	pop	{r7, pc}

0801782e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801782e:	b580      	push	{r7, lr}
 8017830:	b084      	sub	sp, #16
 8017832:	af00      	add	r7, sp, #0
 8017834:	6078      	str	r0, [r7, #4]
 8017836:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017838:	683b      	ldr	r3, [r7, #0]
 801783a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	781a      	ldrb	r2, [r3, #0]
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	3301      	adds	r3, #1
 8017848:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	781a      	ldrb	r2, [r3, #0]
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	3301      	adds	r3, #1
 8017856:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017858:	68f8      	ldr	r0, [r7, #12]
 801785a:	f7ff fa16 	bl	8016c8a <SWAPBYTE>
 801785e:	4603      	mov	r3, r0
 8017860:	461a      	mov	r2, r3
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	3301      	adds	r3, #1
 801786a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	3301      	adds	r3, #1
 8017870:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017872:	68f8      	ldr	r0, [r7, #12]
 8017874:	f7ff fa09 	bl	8016c8a <SWAPBYTE>
 8017878:	4603      	mov	r3, r0
 801787a:	461a      	mov	r2, r3
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	3301      	adds	r3, #1
 8017884:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	3301      	adds	r3, #1
 801788a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801788c:	68f8      	ldr	r0, [r7, #12]
 801788e:	f7ff f9fc 	bl	8016c8a <SWAPBYTE>
 8017892:	4603      	mov	r3, r0
 8017894:	461a      	mov	r2, r3
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	80da      	strh	r2, [r3, #6]
}
 801789a:	bf00      	nop
 801789c:	3710      	adds	r7, #16
 801789e:	46bd      	mov	sp, r7
 80178a0:	bd80      	pop	{r7, pc}

080178a2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80178a2:	b580      	push	{r7, lr}
 80178a4:	b082      	sub	sp, #8
 80178a6:	af00      	add	r7, sp, #0
 80178a8:	6078      	str	r0, [r7, #4]
 80178aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80178ac:	2180      	movs	r1, #128	@ 0x80
 80178ae:	6878      	ldr	r0, [r7, #4]
 80178b0:	f000 fd3c 	bl	801832c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80178b4:	2100      	movs	r1, #0
 80178b6:	6878      	ldr	r0, [r7, #4]
 80178b8:	f000 fd38 	bl	801832c <USBD_LL_StallEP>
}
 80178bc:	bf00      	nop
 80178be:	3708      	adds	r7, #8
 80178c0:	46bd      	mov	sp, r7
 80178c2:	bd80      	pop	{r7, pc}

080178c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80178c4:	b580      	push	{r7, lr}
 80178c6:	b086      	sub	sp, #24
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	60f8      	str	r0, [r7, #12]
 80178cc:	60b9      	str	r1, [r7, #8]
 80178ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80178d0:	2300      	movs	r3, #0
 80178d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d042      	beq.n	8017960 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80178de:	6938      	ldr	r0, [r7, #16]
 80178e0:	f000 f842 	bl	8017968 <USBD_GetLen>
 80178e4:	4603      	mov	r3, r0
 80178e6:	3301      	adds	r3, #1
 80178e8:	005b      	lsls	r3, r3, #1
 80178ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80178ee:	d808      	bhi.n	8017902 <USBD_GetString+0x3e>
 80178f0:	6938      	ldr	r0, [r7, #16]
 80178f2:	f000 f839 	bl	8017968 <USBD_GetLen>
 80178f6:	4603      	mov	r3, r0
 80178f8:	3301      	adds	r3, #1
 80178fa:	b29b      	uxth	r3, r3
 80178fc:	005b      	lsls	r3, r3, #1
 80178fe:	b29a      	uxth	r2, r3
 8017900:	e001      	b.n	8017906 <USBD_GetString+0x42>
 8017902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801790a:	7dfb      	ldrb	r3, [r7, #23]
 801790c:	68ba      	ldr	r2, [r7, #8]
 801790e:	4413      	add	r3, r2
 8017910:	687a      	ldr	r2, [r7, #4]
 8017912:	7812      	ldrb	r2, [r2, #0]
 8017914:	701a      	strb	r2, [r3, #0]
  idx++;
 8017916:	7dfb      	ldrb	r3, [r7, #23]
 8017918:	3301      	adds	r3, #1
 801791a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801791c:	7dfb      	ldrb	r3, [r7, #23]
 801791e:	68ba      	ldr	r2, [r7, #8]
 8017920:	4413      	add	r3, r2
 8017922:	2203      	movs	r2, #3
 8017924:	701a      	strb	r2, [r3, #0]
  idx++;
 8017926:	7dfb      	ldrb	r3, [r7, #23]
 8017928:	3301      	adds	r3, #1
 801792a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801792c:	e013      	b.n	8017956 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801792e:	7dfb      	ldrb	r3, [r7, #23]
 8017930:	68ba      	ldr	r2, [r7, #8]
 8017932:	4413      	add	r3, r2
 8017934:	693a      	ldr	r2, [r7, #16]
 8017936:	7812      	ldrb	r2, [r2, #0]
 8017938:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801793a:	693b      	ldr	r3, [r7, #16]
 801793c:	3301      	adds	r3, #1
 801793e:	613b      	str	r3, [r7, #16]
    idx++;
 8017940:	7dfb      	ldrb	r3, [r7, #23]
 8017942:	3301      	adds	r3, #1
 8017944:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017946:	7dfb      	ldrb	r3, [r7, #23]
 8017948:	68ba      	ldr	r2, [r7, #8]
 801794a:	4413      	add	r3, r2
 801794c:	2200      	movs	r2, #0
 801794e:	701a      	strb	r2, [r3, #0]
    idx++;
 8017950:	7dfb      	ldrb	r3, [r7, #23]
 8017952:	3301      	adds	r3, #1
 8017954:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017956:	693b      	ldr	r3, [r7, #16]
 8017958:	781b      	ldrb	r3, [r3, #0]
 801795a:	2b00      	cmp	r3, #0
 801795c:	d1e7      	bne.n	801792e <USBD_GetString+0x6a>
 801795e:	e000      	b.n	8017962 <USBD_GetString+0x9e>
    return;
 8017960:	bf00      	nop
  }
}
 8017962:	3718      	adds	r7, #24
 8017964:	46bd      	mov	sp, r7
 8017966:	bd80      	pop	{r7, pc}

08017968 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017968:	b480      	push	{r7}
 801796a:	b085      	sub	sp, #20
 801796c:	af00      	add	r7, sp, #0
 801796e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017970:	2300      	movs	r3, #0
 8017972:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017978:	e005      	b.n	8017986 <USBD_GetLen+0x1e>
  {
    len++;
 801797a:	7bfb      	ldrb	r3, [r7, #15]
 801797c:	3301      	adds	r3, #1
 801797e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017980:	68bb      	ldr	r3, [r7, #8]
 8017982:	3301      	adds	r3, #1
 8017984:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017986:	68bb      	ldr	r3, [r7, #8]
 8017988:	781b      	ldrb	r3, [r3, #0]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d1f5      	bne.n	801797a <USBD_GetLen+0x12>
  }

  return len;
 801798e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017990:	4618      	mov	r0, r3
 8017992:	3714      	adds	r7, #20
 8017994:	46bd      	mov	sp, r7
 8017996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801799a:	4770      	bx	lr

0801799c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801799c:	b580      	push	{r7, lr}
 801799e:	b084      	sub	sp, #16
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	60f8      	str	r0, [r7, #12]
 80179a4:	60b9      	str	r1, [r7, #8]
 80179a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	2202      	movs	r2, #2
 80179ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	687a      	ldr	r2, [r7, #4]
 80179b4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	687a      	ldr	r2, [r7, #4]
 80179ba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	68ba      	ldr	r2, [r7, #8]
 80179c0:	2100      	movs	r1, #0
 80179c2:	68f8      	ldr	r0, [r7, #12]
 80179c4:	f000 fd3b 	bl	801843e <USBD_LL_Transmit>

  return USBD_OK;
 80179c8:	2300      	movs	r3, #0
}
 80179ca:	4618      	mov	r0, r3
 80179cc:	3710      	adds	r7, #16
 80179ce:	46bd      	mov	sp, r7
 80179d0:	bd80      	pop	{r7, pc}

080179d2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80179d2:	b580      	push	{r7, lr}
 80179d4:	b084      	sub	sp, #16
 80179d6:	af00      	add	r7, sp, #0
 80179d8:	60f8      	str	r0, [r7, #12]
 80179da:	60b9      	str	r1, [r7, #8]
 80179dc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	68ba      	ldr	r2, [r7, #8]
 80179e2:	2100      	movs	r1, #0
 80179e4:	68f8      	ldr	r0, [r7, #12]
 80179e6:	f000 fd2a 	bl	801843e <USBD_LL_Transmit>

  return USBD_OK;
 80179ea:	2300      	movs	r3, #0
}
 80179ec:	4618      	mov	r0, r3
 80179ee:	3710      	adds	r7, #16
 80179f0:	46bd      	mov	sp, r7
 80179f2:	bd80      	pop	{r7, pc}

080179f4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80179f4:	b580      	push	{r7, lr}
 80179f6:	b084      	sub	sp, #16
 80179f8:	af00      	add	r7, sp, #0
 80179fa:	60f8      	str	r0, [r7, #12]
 80179fc:	60b9      	str	r1, [r7, #8]
 80179fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	2203      	movs	r2, #3
 8017a04:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	687a      	ldr	r2, [r7, #4]
 8017a0c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	687a      	ldr	r2, [r7, #4]
 8017a14:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	68ba      	ldr	r2, [r7, #8]
 8017a1c:	2100      	movs	r1, #0
 8017a1e:	68f8      	ldr	r0, [r7, #12]
 8017a20:	f000 fd2e 	bl	8018480 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017a24:	2300      	movs	r3, #0
}
 8017a26:	4618      	mov	r0, r3
 8017a28:	3710      	adds	r7, #16
 8017a2a:	46bd      	mov	sp, r7
 8017a2c:	bd80      	pop	{r7, pc}

08017a2e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017a2e:	b580      	push	{r7, lr}
 8017a30:	b084      	sub	sp, #16
 8017a32:	af00      	add	r7, sp, #0
 8017a34:	60f8      	str	r0, [r7, #12]
 8017a36:	60b9      	str	r1, [r7, #8]
 8017a38:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	68ba      	ldr	r2, [r7, #8]
 8017a3e:	2100      	movs	r1, #0
 8017a40:	68f8      	ldr	r0, [r7, #12]
 8017a42:	f000 fd1d 	bl	8018480 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017a46:	2300      	movs	r3, #0
}
 8017a48:	4618      	mov	r0, r3
 8017a4a:	3710      	adds	r7, #16
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	bd80      	pop	{r7, pc}

08017a50 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017a50:	b580      	push	{r7, lr}
 8017a52:	b082      	sub	sp, #8
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	2204      	movs	r2, #4
 8017a5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017a60:	2300      	movs	r3, #0
 8017a62:	2200      	movs	r2, #0
 8017a64:	2100      	movs	r1, #0
 8017a66:	6878      	ldr	r0, [r7, #4]
 8017a68:	f000 fce9 	bl	801843e <USBD_LL_Transmit>

  return USBD_OK;
 8017a6c:	2300      	movs	r3, #0
}
 8017a6e:	4618      	mov	r0, r3
 8017a70:	3708      	adds	r7, #8
 8017a72:	46bd      	mov	sp, r7
 8017a74:	bd80      	pop	{r7, pc}

08017a76 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017a76:	b580      	push	{r7, lr}
 8017a78:	b082      	sub	sp, #8
 8017a7a:	af00      	add	r7, sp, #0
 8017a7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	2205      	movs	r2, #5
 8017a82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017a86:	2300      	movs	r3, #0
 8017a88:	2200      	movs	r2, #0
 8017a8a:	2100      	movs	r1, #0
 8017a8c:	6878      	ldr	r0, [r7, #4]
 8017a8e:	f000 fcf7 	bl	8018480 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017a92:	2300      	movs	r3, #0
}
 8017a94:	4618      	mov	r0, r3
 8017a96:	3708      	adds	r7, #8
 8017a98:	46bd      	mov	sp, r7
 8017a9a:	bd80      	pop	{r7, pc}

08017a9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017a9c:	b580      	push	{r7, lr}
 8017a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017aa0:	2200      	movs	r2, #0
 8017aa2:	4918      	ldr	r1, [pc, #96]	@ (8017b04 <MX_USB_DEVICE_Init+0x68>)
 8017aa4:	4818      	ldr	r0, [pc, #96]	@ (8017b08 <MX_USB_DEVICE_Init+0x6c>)
 8017aa6:	f7fe fccd 	bl	8016444 <USBD_Init>
 8017aaa:	4603      	mov	r3, r0
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d001      	beq.n	8017ab4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017ab0:	f7ea fbfa 	bl	80022a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017ab4:	4915      	ldr	r1, [pc, #84]	@ (8017b0c <MX_USB_DEVICE_Init+0x70>)
 8017ab6:	4814      	ldr	r0, [pc, #80]	@ (8017b08 <MX_USB_DEVICE_Init+0x6c>)
 8017ab8:	f7fe fcf4 	bl	80164a4 <USBD_RegisterClass>
 8017abc:	4603      	mov	r3, r0
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d001      	beq.n	8017ac6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017ac2:	f7ea fbf1 	bl	80022a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017ac6:	4912      	ldr	r1, [pc, #72]	@ (8017b10 <MX_USB_DEVICE_Init+0x74>)
 8017ac8:	480f      	ldr	r0, [pc, #60]	@ (8017b08 <MX_USB_DEVICE_Init+0x6c>)
 8017aca:	f7fe fbeb 	bl	80162a4 <USBD_CDC_RegisterInterface>
 8017ace:	4603      	mov	r3, r0
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d001      	beq.n	8017ad8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017ad4:	f7ea fbe8 	bl	80022a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017ad8:	480b      	ldr	r0, [pc, #44]	@ (8017b08 <MX_USB_DEVICE_Init+0x6c>)
 8017ada:	f7fe fd19 	bl	8016510 <USBD_Start>
 8017ade:	4603      	mov	r3, r0
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d001      	beq.n	8017ae8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017ae4:	f7ea fbe0 	bl	80022a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017ae8:	f7f5 fb42 	bl	800d170 <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 8017aec:	4b06      	ldr	r3, [pc, #24]	@ (8017b08 <MX_USB_DEVICE_Init+0x6c>)
 8017aee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017af2:	4a05      	ldr	r2, [pc, #20]	@ (8017b08 <MX_USB_DEVICE_Init+0x6c>)
 8017af4:	33b0      	adds	r3, #176	@ 0xb0
 8017af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017afa:	4a06      	ldr	r2, [pc, #24]	@ (8017b14 <MX_USB_DEVICE_Init+0x78>)
 8017afc:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017afe:	bf00      	nop
 8017b00:	bd80      	pop	{r7, pc}
 8017b02:	bf00      	nop
 8017b04:	240000c8 	.word	0x240000c8
 8017b08:	24025d74 	.word	0x24025d74
 8017b0c:	24000034 	.word	0x24000034
 8017b10:	240000b4 	.word	0x240000b4
 8017b14:	24026050 	.word	0x24026050

08017b18 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017b1c:	2200      	movs	r2, #0
 8017b1e:	4905      	ldr	r1, [pc, #20]	@ (8017b34 <CDC_Init_FS+0x1c>)
 8017b20:	4805      	ldr	r0, [pc, #20]	@ (8017b38 <CDC_Init_FS+0x20>)
 8017b22:	f7fe fbd9 	bl	80162d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017b26:	4905      	ldr	r1, [pc, #20]	@ (8017b3c <CDC_Init_FS+0x24>)
 8017b28:	4803      	ldr	r0, [pc, #12]	@ (8017b38 <CDC_Init_FS+0x20>)
 8017b2a:	f7fe fbf7 	bl	801631c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017b2e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017b30:	4618      	mov	r0, r3
 8017b32:	bd80      	pop	{r7, pc}
 8017b34:	24026854 	.word	0x24026854
 8017b38:	24025d74 	.word	0x24025d74
 8017b3c:	24026054 	.word	0x24026054

08017b40 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017b40:	b480      	push	{r7}
 8017b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017b44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017b46:	4618      	mov	r0, r3
 8017b48:	46bd      	mov	sp, r7
 8017b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b4e:	4770      	bx	lr

08017b50 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017b50:	b480      	push	{r7}
 8017b52:	b083      	sub	sp, #12
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	4603      	mov	r3, r0
 8017b58:	6039      	str	r1, [r7, #0]
 8017b5a:	71fb      	strb	r3, [r7, #7]
 8017b5c:	4613      	mov	r3, r2
 8017b5e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017b60:	79fb      	ldrb	r3, [r7, #7]
 8017b62:	2b23      	cmp	r3, #35	@ 0x23
 8017b64:	d84a      	bhi.n	8017bfc <CDC_Control_FS+0xac>
 8017b66:	a201      	add	r2, pc, #4	@ (adr r2, 8017b6c <CDC_Control_FS+0x1c>)
 8017b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b6c:	08017bfd 	.word	0x08017bfd
 8017b70:	08017bfd 	.word	0x08017bfd
 8017b74:	08017bfd 	.word	0x08017bfd
 8017b78:	08017bfd 	.word	0x08017bfd
 8017b7c:	08017bfd 	.word	0x08017bfd
 8017b80:	08017bfd 	.word	0x08017bfd
 8017b84:	08017bfd 	.word	0x08017bfd
 8017b88:	08017bfd 	.word	0x08017bfd
 8017b8c:	08017bfd 	.word	0x08017bfd
 8017b90:	08017bfd 	.word	0x08017bfd
 8017b94:	08017bfd 	.word	0x08017bfd
 8017b98:	08017bfd 	.word	0x08017bfd
 8017b9c:	08017bfd 	.word	0x08017bfd
 8017ba0:	08017bfd 	.word	0x08017bfd
 8017ba4:	08017bfd 	.word	0x08017bfd
 8017ba8:	08017bfd 	.word	0x08017bfd
 8017bac:	08017bfd 	.word	0x08017bfd
 8017bb0:	08017bfd 	.word	0x08017bfd
 8017bb4:	08017bfd 	.word	0x08017bfd
 8017bb8:	08017bfd 	.word	0x08017bfd
 8017bbc:	08017bfd 	.word	0x08017bfd
 8017bc0:	08017bfd 	.word	0x08017bfd
 8017bc4:	08017bfd 	.word	0x08017bfd
 8017bc8:	08017bfd 	.word	0x08017bfd
 8017bcc:	08017bfd 	.word	0x08017bfd
 8017bd0:	08017bfd 	.word	0x08017bfd
 8017bd4:	08017bfd 	.word	0x08017bfd
 8017bd8:	08017bfd 	.word	0x08017bfd
 8017bdc:	08017bfd 	.word	0x08017bfd
 8017be0:	08017bfd 	.word	0x08017bfd
 8017be4:	08017bfd 	.word	0x08017bfd
 8017be8:	08017bfd 	.word	0x08017bfd
 8017bec:	08017bfd 	.word	0x08017bfd
 8017bf0:	08017bfd 	.word	0x08017bfd
 8017bf4:	08017bfd 	.word	0x08017bfd
 8017bf8:	08017bfd 	.word	0x08017bfd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017bfc:	bf00      	nop
  }

  return (USBD_OK);
 8017bfe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017c00:	4618      	mov	r0, r3
 8017c02:	370c      	adds	r7, #12
 8017c04:	46bd      	mov	sp, r7
 8017c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c0a:	4770      	bx	lr

08017c0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	b084      	sub	sp, #16
 8017c10:	af00      	add	r7, sp, #0
 8017c12:	6078      	str	r0, [r7, #4]
 8017c14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017c16:	6879      	ldr	r1, [r7, #4]
 8017c18:	4811      	ldr	r0, [pc, #68]	@ (8017c60 <CDC_Receive_FS+0x54>)
 8017c1a:	f7fe fb7f 	bl	801631c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017c1e:	4810      	ldr	r0, [pc, #64]	@ (8017c60 <CDC_Receive_FS+0x54>)
 8017c20:	f7fe fbda 	bl	80163d8 <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 8017c24:	4b0f      	ldr	r3, [pc, #60]	@ (8017c64 <CDC_Receive_FS+0x58>)
 8017c26:	2201      	movs	r2, #1
 8017c28:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_Transmit(&huart1, Buf, *Len, 100)) {
 8017c2a:	683b      	ldr	r3, [r7, #0]
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	b29a      	uxth	r2, r3
 8017c30:	2364      	movs	r3, #100	@ 0x64
 8017c32:	6879      	ldr	r1, [r7, #4]
 8017c34:	480c      	ldr	r0, [pc, #48]	@ (8017c68 <CDC_Receive_FS+0x5c>)
 8017c36:	f7fa fa59 	bl	80120ec <HAL_UART_Transmit>
 8017c3a:	4603      	mov	r3, r0
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d00a      	beq.n	8017c56 <CDC_Receive_FS+0x4a>
		uint8_t* usb_msg = "Failed to TX\n";
 8017c40:	4b0a      	ldr	r3, [pc, #40]	@ (8017c6c <CDC_Receive_FS+0x60>)
 8017c42:	60fb      	str	r3, [r7, #12]
		CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8017c44:	68f8      	ldr	r0, [r7, #12]
 8017c46:	f7e8 fb9b 	bl	8000380 <strlen>
 8017c4a:	4603      	mov	r3, r0
 8017c4c:	b29b      	uxth	r3, r3
 8017c4e:	4619      	mov	r1, r3
 8017c50:	68f8      	ldr	r0, [r7, #12]
 8017c52:	f000 f80d 	bl	8017c70 <CDC_Transmit_FS>
	}

	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 8017c56:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017c58:	4618      	mov	r0, r3
 8017c5a:	3710      	adds	r7, #16
 8017c5c:	46bd      	mov	sp, r7
 8017c5e:	bd80      	pop	{r7, pc}
 8017c60:	24025d74 	.word	0x24025d74
 8017c64:	24000948 	.word	0x24000948
 8017c68:	2400079c 	.word	0x2400079c
 8017c6c:	0801b368 	.word	0x0801b368

08017c70 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b084      	sub	sp, #16
 8017c74:	af00      	add	r7, sp, #0
 8017c76:	6078      	str	r0, [r7, #4]
 8017c78:	460b      	mov	r3, r1
 8017c7a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8017c7c:	2300      	movs	r3, #0
 8017c7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8017c80:	4b0d      	ldr	r3, [pc, #52]	@ (8017cb8 <CDC_Transmit_FS+0x48>)
 8017c82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8017c86:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8017c88:	68bb      	ldr	r3, [r7, #8]
 8017c8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d001      	beq.n	8017c96 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8017c92:	2301      	movs	r3, #1
 8017c94:	e00b      	b.n	8017cae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8017c96:	887b      	ldrh	r3, [r7, #2]
 8017c98:	461a      	mov	r2, r3
 8017c9a:	6879      	ldr	r1, [r7, #4]
 8017c9c:	4806      	ldr	r0, [pc, #24]	@ (8017cb8 <CDC_Transmit_FS+0x48>)
 8017c9e:	f7fe fb1b 	bl	80162d8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8017ca2:	4805      	ldr	r0, [pc, #20]	@ (8017cb8 <CDC_Transmit_FS+0x48>)
 8017ca4:	f7fe fb58 	bl	8016358 <USBD_CDC_TransmitPacket>
 8017ca8:	4603      	mov	r3, r0
 8017caa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8017cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8017cae:	4618      	mov	r0, r3
 8017cb0:	3710      	adds	r7, #16
 8017cb2:	46bd      	mov	sp, r7
 8017cb4:	bd80      	pop	{r7, pc}
 8017cb6:	bf00      	nop
 8017cb8:	24025d74 	.word	0x24025d74

08017cbc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017cbc:	b480      	push	{r7}
 8017cbe:	b087      	sub	sp, #28
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	60f8      	str	r0, [r7, #12]
 8017cc4:	60b9      	str	r1, [r7, #8]
 8017cc6:	4613      	mov	r3, r2
 8017cc8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017cca:	2300      	movs	r3, #0
 8017ccc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017cce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017cd2:	4618      	mov	r0, r3
 8017cd4:	371c      	adds	r7, #28
 8017cd6:	46bd      	mov	sp, r7
 8017cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cdc:	4770      	bx	lr
	...

08017ce0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017ce0:	b480      	push	{r7}
 8017ce2:	b083      	sub	sp, #12
 8017ce4:	af00      	add	r7, sp, #0
 8017ce6:	4603      	mov	r3, r0
 8017ce8:	6039      	str	r1, [r7, #0]
 8017cea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017cec:	683b      	ldr	r3, [r7, #0]
 8017cee:	2212      	movs	r2, #18
 8017cf0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017cf2:	4b03      	ldr	r3, [pc, #12]	@ (8017d00 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	370c      	adds	r7, #12
 8017cf8:	46bd      	mov	sp, r7
 8017cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cfe:	4770      	bx	lr
 8017d00:	240000e8 	.word	0x240000e8

08017d04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d04:	b480      	push	{r7}
 8017d06:	b083      	sub	sp, #12
 8017d08:	af00      	add	r7, sp, #0
 8017d0a:	4603      	mov	r3, r0
 8017d0c:	6039      	str	r1, [r7, #0]
 8017d0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017d10:	683b      	ldr	r3, [r7, #0]
 8017d12:	2204      	movs	r2, #4
 8017d14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017d16:	4b03      	ldr	r3, [pc, #12]	@ (8017d24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017d18:	4618      	mov	r0, r3
 8017d1a:	370c      	adds	r7, #12
 8017d1c:	46bd      	mov	sp, r7
 8017d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d22:	4770      	bx	lr
 8017d24:	240000fc 	.word	0x240000fc

08017d28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d28:	b580      	push	{r7, lr}
 8017d2a:	b082      	sub	sp, #8
 8017d2c:	af00      	add	r7, sp, #0
 8017d2e:	4603      	mov	r3, r0
 8017d30:	6039      	str	r1, [r7, #0]
 8017d32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017d34:	79fb      	ldrb	r3, [r7, #7]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d105      	bne.n	8017d46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017d3a:	683a      	ldr	r2, [r7, #0]
 8017d3c:	4907      	ldr	r1, [pc, #28]	@ (8017d5c <USBD_FS_ProductStrDescriptor+0x34>)
 8017d3e:	4808      	ldr	r0, [pc, #32]	@ (8017d60 <USBD_FS_ProductStrDescriptor+0x38>)
 8017d40:	f7ff fdc0 	bl	80178c4 <USBD_GetString>
 8017d44:	e004      	b.n	8017d50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017d46:	683a      	ldr	r2, [r7, #0]
 8017d48:	4904      	ldr	r1, [pc, #16]	@ (8017d5c <USBD_FS_ProductStrDescriptor+0x34>)
 8017d4a:	4805      	ldr	r0, [pc, #20]	@ (8017d60 <USBD_FS_ProductStrDescriptor+0x38>)
 8017d4c:	f7ff fdba 	bl	80178c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017d50:	4b02      	ldr	r3, [pc, #8]	@ (8017d5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017d52:	4618      	mov	r0, r3
 8017d54:	3708      	adds	r7, #8
 8017d56:	46bd      	mov	sp, r7
 8017d58:	bd80      	pop	{r7, pc}
 8017d5a:	bf00      	nop
 8017d5c:	24027054 	.word	0x24027054
 8017d60:	0801b378 	.word	0x0801b378

08017d64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d64:	b580      	push	{r7, lr}
 8017d66:	b082      	sub	sp, #8
 8017d68:	af00      	add	r7, sp, #0
 8017d6a:	4603      	mov	r3, r0
 8017d6c:	6039      	str	r1, [r7, #0]
 8017d6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017d70:	683a      	ldr	r2, [r7, #0]
 8017d72:	4904      	ldr	r1, [pc, #16]	@ (8017d84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017d74:	4804      	ldr	r0, [pc, #16]	@ (8017d88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017d76:	f7ff fda5 	bl	80178c4 <USBD_GetString>
  return USBD_StrDesc;
 8017d7a:	4b02      	ldr	r3, [pc, #8]	@ (8017d84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017d7c:	4618      	mov	r0, r3
 8017d7e:	3708      	adds	r7, #8
 8017d80:	46bd      	mov	sp, r7
 8017d82:	bd80      	pop	{r7, pc}
 8017d84:	24027054 	.word	0x24027054
 8017d88:	0801b390 	.word	0x0801b390

08017d8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b082      	sub	sp, #8
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	4603      	mov	r3, r0
 8017d94:	6039      	str	r1, [r7, #0]
 8017d96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017d98:	683b      	ldr	r3, [r7, #0]
 8017d9a:	221a      	movs	r2, #26
 8017d9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017d9e:	f000 f843 	bl	8017e28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017da2:	4b02      	ldr	r3, [pc, #8]	@ (8017dac <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017da4:	4618      	mov	r0, r3
 8017da6:	3708      	adds	r7, #8
 8017da8:	46bd      	mov	sp, r7
 8017daa:	bd80      	pop	{r7, pc}
 8017dac:	24000100 	.word	0x24000100

08017db0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017db0:	b580      	push	{r7, lr}
 8017db2:	b082      	sub	sp, #8
 8017db4:	af00      	add	r7, sp, #0
 8017db6:	4603      	mov	r3, r0
 8017db8:	6039      	str	r1, [r7, #0]
 8017dba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017dbc:	79fb      	ldrb	r3, [r7, #7]
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d105      	bne.n	8017dce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017dc2:	683a      	ldr	r2, [r7, #0]
 8017dc4:	4907      	ldr	r1, [pc, #28]	@ (8017de4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017dc6:	4808      	ldr	r0, [pc, #32]	@ (8017de8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017dc8:	f7ff fd7c 	bl	80178c4 <USBD_GetString>
 8017dcc:	e004      	b.n	8017dd8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017dce:	683a      	ldr	r2, [r7, #0]
 8017dd0:	4904      	ldr	r1, [pc, #16]	@ (8017de4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017dd2:	4805      	ldr	r0, [pc, #20]	@ (8017de8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017dd4:	f7ff fd76 	bl	80178c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017dd8:	4b02      	ldr	r3, [pc, #8]	@ (8017de4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017dda:	4618      	mov	r0, r3
 8017ddc:	3708      	adds	r7, #8
 8017dde:	46bd      	mov	sp, r7
 8017de0:	bd80      	pop	{r7, pc}
 8017de2:	bf00      	nop
 8017de4:	24027054 	.word	0x24027054
 8017de8:	0801b3a4 	.word	0x0801b3a4

08017dec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017dec:	b580      	push	{r7, lr}
 8017dee:	b082      	sub	sp, #8
 8017df0:	af00      	add	r7, sp, #0
 8017df2:	4603      	mov	r3, r0
 8017df4:	6039      	str	r1, [r7, #0]
 8017df6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017df8:	79fb      	ldrb	r3, [r7, #7]
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d105      	bne.n	8017e0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017dfe:	683a      	ldr	r2, [r7, #0]
 8017e00:	4907      	ldr	r1, [pc, #28]	@ (8017e20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017e02:	4808      	ldr	r0, [pc, #32]	@ (8017e24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017e04:	f7ff fd5e 	bl	80178c4 <USBD_GetString>
 8017e08:	e004      	b.n	8017e14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017e0a:	683a      	ldr	r2, [r7, #0]
 8017e0c:	4904      	ldr	r1, [pc, #16]	@ (8017e20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017e0e:	4805      	ldr	r0, [pc, #20]	@ (8017e24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017e10:	f7ff fd58 	bl	80178c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017e14:	4b02      	ldr	r3, [pc, #8]	@ (8017e20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017e16:	4618      	mov	r0, r3
 8017e18:	3708      	adds	r7, #8
 8017e1a:	46bd      	mov	sp, r7
 8017e1c:	bd80      	pop	{r7, pc}
 8017e1e:	bf00      	nop
 8017e20:	24027054 	.word	0x24027054
 8017e24:	0801b3b0 	.word	0x0801b3b0

08017e28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017e28:	b580      	push	{r7, lr}
 8017e2a:	b084      	sub	sp, #16
 8017e2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8017e6c <Get_SerialNum+0x44>)
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017e34:	4b0e      	ldr	r3, [pc, #56]	@ (8017e70 <Get_SerialNum+0x48>)
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8017e74 <Get_SerialNum+0x4c>)
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017e40:	68fa      	ldr	r2, [r7, #12]
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	4413      	add	r3, r2
 8017e46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d009      	beq.n	8017e62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017e4e:	2208      	movs	r2, #8
 8017e50:	4909      	ldr	r1, [pc, #36]	@ (8017e78 <Get_SerialNum+0x50>)
 8017e52:	68f8      	ldr	r0, [r7, #12]
 8017e54:	f000 f814 	bl	8017e80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017e58:	2204      	movs	r2, #4
 8017e5a:	4908      	ldr	r1, [pc, #32]	@ (8017e7c <Get_SerialNum+0x54>)
 8017e5c:	68b8      	ldr	r0, [r7, #8]
 8017e5e:	f000 f80f 	bl	8017e80 <IntToUnicode>
  }
}
 8017e62:	bf00      	nop
 8017e64:	3710      	adds	r7, #16
 8017e66:	46bd      	mov	sp, r7
 8017e68:	bd80      	pop	{r7, pc}
 8017e6a:	bf00      	nop
 8017e6c:	1ff1e800 	.word	0x1ff1e800
 8017e70:	1ff1e804 	.word	0x1ff1e804
 8017e74:	1ff1e808 	.word	0x1ff1e808
 8017e78:	24000102 	.word	0x24000102
 8017e7c:	24000112 	.word	0x24000112

08017e80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017e80:	b480      	push	{r7}
 8017e82:	b087      	sub	sp, #28
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	60f8      	str	r0, [r7, #12]
 8017e88:	60b9      	str	r1, [r7, #8]
 8017e8a:	4613      	mov	r3, r2
 8017e8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017e8e:	2300      	movs	r3, #0
 8017e90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017e92:	2300      	movs	r3, #0
 8017e94:	75fb      	strb	r3, [r7, #23]
 8017e96:	e027      	b.n	8017ee8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017e98:	68fb      	ldr	r3, [r7, #12]
 8017e9a:	0f1b      	lsrs	r3, r3, #28
 8017e9c:	2b09      	cmp	r3, #9
 8017e9e:	d80b      	bhi.n	8017eb8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	0f1b      	lsrs	r3, r3, #28
 8017ea4:	b2da      	uxtb	r2, r3
 8017ea6:	7dfb      	ldrb	r3, [r7, #23]
 8017ea8:	005b      	lsls	r3, r3, #1
 8017eaa:	4619      	mov	r1, r3
 8017eac:	68bb      	ldr	r3, [r7, #8]
 8017eae:	440b      	add	r3, r1
 8017eb0:	3230      	adds	r2, #48	@ 0x30
 8017eb2:	b2d2      	uxtb	r2, r2
 8017eb4:	701a      	strb	r2, [r3, #0]
 8017eb6:	e00a      	b.n	8017ece <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	0f1b      	lsrs	r3, r3, #28
 8017ebc:	b2da      	uxtb	r2, r3
 8017ebe:	7dfb      	ldrb	r3, [r7, #23]
 8017ec0:	005b      	lsls	r3, r3, #1
 8017ec2:	4619      	mov	r1, r3
 8017ec4:	68bb      	ldr	r3, [r7, #8]
 8017ec6:	440b      	add	r3, r1
 8017ec8:	3237      	adds	r2, #55	@ 0x37
 8017eca:	b2d2      	uxtb	r2, r2
 8017ecc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017ece:	68fb      	ldr	r3, [r7, #12]
 8017ed0:	011b      	lsls	r3, r3, #4
 8017ed2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017ed4:	7dfb      	ldrb	r3, [r7, #23]
 8017ed6:	005b      	lsls	r3, r3, #1
 8017ed8:	3301      	adds	r3, #1
 8017eda:	68ba      	ldr	r2, [r7, #8]
 8017edc:	4413      	add	r3, r2
 8017ede:	2200      	movs	r2, #0
 8017ee0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017ee2:	7dfb      	ldrb	r3, [r7, #23]
 8017ee4:	3301      	adds	r3, #1
 8017ee6:	75fb      	strb	r3, [r7, #23]
 8017ee8:	7dfa      	ldrb	r2, [r7, #23]
 8017eea:	79fb      	ldrb	r3, [r7, #7]
 8017eec:	429a      	cmp	r2, r3
 8017eee:	d3d3      	bcc.n	8017e98 <IntToUnicode+0x18>
  }
}
 8017ef0:	bf00      	nop
 8017ef2:	bf00      	nop
 8017ef4:	371c      	adds	r7, #28
 8017ef6:	46bd      	mov	sp, r7
 8017ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017efc:	4770      	bx	lr
	...

08017f00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017f00:	b580      	push	{r7, lr}
 8017f02:	b0ba      	sub	sp, #232	@ 0xe8
 8017f04:	af00      	add	r7, sp, #0
 8017f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017f08:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8017f0c:	2200      	movs	r2, #0
 8017f0e:	601a      	str	r2, [r3, #0]
 8017f10:	605a      	str	r2, [r3, #4]
 8017f12:	609a      	str	r2, [r3, #8]
 8017f14:	60da      	str	r2, [r3, #12]
 8017f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017f18:	f107 0310 	add.w	r3, r7, #16
 8017f1c:	22c0      	movs	r2, #192	@ 0xc0
 8017f1e:	2100      	movs	r1, #0
 8017f20:	4618      	mov	r0, r3
 8017f22:	f001 f976 	bl	8019212 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8017fdc <HAL_PCD_MspInit+0xdc>)
 8017f2c:	4293      	cmp	r3, r2
 8017f2e:	d151      	bne.n	8017fd4 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017f30:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8017f34:	f04f 0300 	mov.w	r3, #0
 8017f38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8017f3c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8017f40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017f44:	f107 0310 	add.w	r3, r7, #16
 8017f48:	4618      	mov	r0, r3
 8017f4a:	f7f6 f907 	bl	800e15c <HAL_RCCEx_PeriphCLKConfig>
 8017f4e:	4603      	mov	r3, r0
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d001      	beq.n	8017f58 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8017f54:	f7ea f9a8 	bl	80022a8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8017f58:	f7f5 f90a 	bl	800d170 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017f5c:	4b20      	ldr	r3, [pc, #128]	@ (8017fe0 <HAL_PCD_MspInit+0xe0>)
 8017f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017f62:	4a1f      	ldr	r2, [pc, #124]	@ (8017fe0 <HAL_PCD_MspInit+0xe0>)
 8017f64:	f043 0301 	orr.w	r3, r3, #1
 8017f68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8017f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8017fe0 <HAL_PCD_MspInit+0xe0>)
 8017f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017f72:	f003 0301 	and.w	r3, r3, #1
 8017f76:	60fb      	str	r3, [r7, #12]
 8017f78:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017f7a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8017f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017f82:	2302      	movs	r3, #2
 8017f84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017f88:	2300      	movs	r3, #0
 8017f8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017f8e:	2300      	movs	r3, #0
 8017f90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8017f94:	230a      	movs	r3, #10
 8017f96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017f9a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8017f9e:	4619      	mov	r1, r3
 8017fa0:	4810      	ldr	r0, [pc, #64]	@ (8017fe4 <HAL_PCD_MspInit+0xe4>)
 8017fa2:	f7ef fa21 	bl	80073e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8017fe0 <HAL_PCD_MspInit+0xe0>)
 8017fa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017fac:	4a0c      	ldr	r2, [pc, #48]	@ (8017fe0 <HAL_PCD_MspInit+0xe0>)
 8017fae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8017fb2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8017fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8017fe0 <HAL_PCD_MspInit+0xe0>)
 8017fb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017fbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017fc0:	60bb      	str	r3, [r7, #8]
 8017fc2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8017fc4:	2200      	movs	r2, #0
 8017fc6:	2100      	movs	r1, #0
 8017fc8:	2065      	movs	r0, #101	@ 0x65
 8017fca:	f7eb fb7a 	bl	80036c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017fce:	2065      	movs	r0, #101	@ 0x65
 8017fd0:	f7eb fb91 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017fd4:	bf00      	nop
 8017fd6:	37e8      	adds	r7, #232	@ 0xe8
 8017fd8:	46bd      	mov	sp, r7
 8017fda:	bd80      	pop	{r7, pc}
 8017fdc:	40080000 	.word	0x40080000
 8017fe0:	58024400 	.word	0x58024400
 8017fe4:	58020000 	.word	0x58020000

08017fe8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fe8:	b580      	push	{r7, lr}
 8017fea:	b082      	sub	sp, #8
 8017fec:	af00      	add	r7, sp, #0
 8017fee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8017ffc:	4619      	mov	r1, r3
 8017ffe:	4610      	mov	r0, r2
 8018000:	f7fe fad3 	bl	80165aa <USBD_LL_SetupStage>
}
 8018004:	bf00      	nop
 8018006:	3708      	adds	r7, #8
 8018008:	46bd      	mov	sp, r7
 801800a:	bd80      	pop	{r7, pc}

0801800c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801800c:	b580      	push	{r7, lr}
 801800e:	b082      	sub	sp, #8
 8018010:	af00      	add	r7, sp, #0
 8018012:	6078      	str	r0, [r7, #4]
 8018014:	460b      	mov	r3, r1
 8018016:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801801e:	78fa      	ldrb	r2, [r7, #3]
 8018020:	6879      	ldr	r1, [r7, #4]
 8018022:	4613      	mov	r3, r2
 8018024:	00db      	lsls	r3, r3, #3
 8018026:	4413      	add	r3, r2
 8018028:	009b      	lsls	r3, r3, #2
 801802a:	440b      	add	r3, r1
 801802c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8018030:	681a      	ldr	r2, [r3, #0]
 8018032:	78fb      	ldrb	r3, [r7, #3]
 8018034:	4619      	mov	r1, r3
 8018036:	f7fe fb0d 	bl	8016654 <USBD_LL_DataOutStage>
}
 801803a:	bf00      	nop
 801803c:	3708      	adds	r7, #8
 801803e:	46bd      	mov	sp, r7
 8018040:	bd80      	pop	{r7, pc}

08018042 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018042:	b580      	push	{r7, lr}
 8018044:	b082      	sub	sp, #8
 8018046:	af00      	add	r7, sp, #0
 8018048:	6078      	str	r0, [r7, #4]
 801804a:	460b      	mov	r3, r1
 801804c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8018054:	78fa      	ldrb	r2, [r7, #3]
 8018056:	6879      	ldr	r1, [r7, #4]
 8018058:	4613      	mov	r3, r2
 801805a:	00db      	lsls	r3, r3, #3
 801805c:	4413      	add	r3, r2
 801805e:	009b      	lsls	r3, r3, #2
 8018060:	440b      	add	r3, r1
 8018062:	3320      	adds	r3, #32
 8018064:	681a      	ldr	r2, [r3, #0]
 8018066:	78fb      	ldrb	r3, [r7, #3]
 8018068:	4619      	mov	r1, r3
 801806a:	f7fe fba6 	bl	80167ba <USBD_LL_DataInStage>
}
 801806e:	bf00      	nop
 8018070:	3708      	adds	r7, #8
 8018072:	46bd      	mov	sp, r7
 8018074:	bd80      	pop	{r7, pc}

08018076 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018076:	b580      	push	{r7, lr}
 8018078:	b082      	sub	sp, #8
 801807a:	af00      	add	r7, sp, #0
 801807c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018084:	4618      	mov	r0, r3
 8018086:	f7fe fce0 	bl	8016a4a <USBD_LL_SOF>
}
 801808a:	bf00      	nop
 801808c:	3708      	adds	r7, #8
 801808e:	46bd      	mov	sp, r7
 8018090:	bd80      	pop	{r7, pc}

08018092 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018092:	b580      	push	{r7, lr}
 8018094:	b084      	sub	sp, #16
 8018096:	af00      	add	r7, sp, #0
 8018098:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801809a:	2301      	movs	r3, #1
 801809c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	79db      	ldrb	r3, [r3, #7]
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d102      	bne.n	80180ac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80180a6:	2300      	movs	r3, #0
 80180a8:	73fb      	strb	r3, [r7, #15]
 80180aa:	e008      	b.n	80180be <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	79db      	ldrb	r3, [r3, #7]
 80180b0:	2b02      	cmp	r3, #2
 80180b2:	d102      	bne.n	80180ba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80180b4:	2301      	movs	r3, #1
 80180b6:	73fb      	strb	r3, [r7, #15]
 80180b8:	e001      	b.n	80180be <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80180ba:	f7ea f8f5 	bl	80022a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80180c4:	7bfa      	ldrb	r2, [r7, #15]
 80180c6:	4611      	mov	r1, r2
 80180c8:	4618      	mov	r0, r3
 80180ca:	f7fe fc7a 	bl	80169c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80180d4:	4618      	mov	r0, r3
 80180d6:	f7fe fc22 	bl	801691e <USBD_LL_Reset>
}
 80180da:	bf00      	nop
 80180dc:	3710      	adds	r7, #16
 80180de:	46bd      	mov	sp, r7
 80180e0:	bd80      	pop	{r7, pc}
	...

080180e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180e4:	b580      	push	{r7, lr}
 80180e6:	b082      	sub	sp, #8
 80180e8:	af00      	add	r7, sp, #0
 80180ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80180f2:	4618      	mov	r0, r3
 80180f4:	f7fe fc75 	bl	80169e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	681b      	ldr	r3, [r3, #0]
 80180fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8018100:	681b      	ldr	r3, [r3, #0]
 8018102:	687a      	ldr	r2, [r7, #4]
 8018104:	6812      	ldr	r2, [r2, #0]
 8018106:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801810a:	f043 0301 	orr.w	r3, r3, #1
 801810e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	7adb      	ldrb	r3, [r3, #11]
 8018114:	2b00      	cmp	r3, #0
 8018116:	d005      	beq.n	8018124 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018118:	4b04      	ldr	r3, [pc, #16]	@ (801812c <HAL_PCD_SuspendCallback+0x48>)
 801811a:	691b      	ldr	r3, [r3, #16]
 801811c:	4a03      	ldr	r2, [pc, #12]	@ (801812c <HAL_PCD_SuspendCallback+0x48>)
 801811e:	f043 0306 	orr.w	r3, r3, #6
 8018122:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018124:	bf00      	nop
 8018126:	3708      	adds	r7, #8
 8018128:	46bd      	mov	sp, r7
 801812a:	bd80      	pop	{r7, pc}
 801812c:	e000ed00 	.word	0xe000ed00

08018130 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018130:	b580      	push	{r7, lr}
 8018132:	b082      	sub	sp, #8
 8018134:	af00      	add	r7, sp, #0
 8018136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801813e:	4618      	mov	r0, r3
 8018140:	f7fe fc6b 	bl	8016a1a <USBD_LL_Resume>
}
 8018144:	bf00      	nop
 8018146:	3708      	adds	r7, #8
 8018148:	46bd      	mov	sp, r7
 801814a:	bd80      	pop	{r7, pc}

0801814c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801814c:	b580      	push	{r7, lr}
 801814e:	b082      	sub	sp, #8
 8018150:	af00      	add	r7, sp, #0
 8018152:	6078      	str	r0, [r7, #4]
 8018154:	460b      	mov	r3, r1
 8018156:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801815e:	78fa      	ldrb	r2, [r7, #3]
 8018160:	4611      	mov	r1, r2
 8018162:	4618      	mov	r0, r3
 8018164:	f7fe fcc3 	bl	8016aee <USBD_LL_IsoOUTIncomplete>
}
 8018168:	bf00      	nop
 801816a:	3708      	adds	r7, #8
 801816c:	46bd      	mov	sp, r7
 801816e:	bd80      	pop	{r7, pc}

08018170 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018170:	b580      	push	{r7, lr}
 8018172:	b082      	sub	sp, #8
 8018174:	af00      	add	r7, sp, #0
 8018176:	6078      	str	r0, [r7, #4]
 8018178:	460b      	mov	r3, r1
 801817a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018182:	78fa      	ldrb	r2, [r7, #3]
 8018184:	4611      	mov	r1, r2
 8018186:	4618      	mov	r0, r3
 8018188:	f7fe fc7f 	bl	8016a8a <USBD_LL_IsoINIncomplete>
}
 801818c:	bf00      	nop
 801818e:	3708      	adds	r7, #8
 8018190:	46bd      	mov	sp, r7
 8018192:	bd80      	pop	{r7, pc}

08018194 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018194:	b580      	push	{r7, lr}
 8018196:	b082      	sub	sp, #8
 8018198:	af00      	add	r7, sp, #0
 801819a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80181a2:	4618      	mov	r0, r3
 80181a4:	f7fe fcd5 	bl	8016b52 <USBD_LL_DevConnected>
}
 80181a8:	bf00      	nop
 80181aa:	3708      	adds	r7, #8
 80181ac:	46bd      	mov	sp, r7
 80181ae:	bd80      	pop	{r7, pc}

080181b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80181b0:	b580      	push	{r7, lr}
 80181b2:	b082      	sub	sp, #8
 80181b4:	af00      	add	r7, sp, #0
 80181b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80181be:	4618      	mov	r0, r3
 80181c0:	f7fe fcd2 	bl	8016b68 <USBD_LL_DevDisconnected>
}
 80181c4:	bf00      	nop
 80181c6:	3708      	adds	r7, #8
 80181c8:	46bd      	mov	sp, r7
 80181ca:	bd80      	pop	{r7, pc}

080181cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80181cc:	b580      	push	{r7, lr}
 80181ce:	b082      	sub	sp, #8
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	781b      	ldrb	r3, [r3, #0]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d13e      	bne.n	801825a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80181dc:	4a21      	ldr	r2, [pc, #132]	@ (8018264 <USBD_LL_Init+0x98>)
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	4a1f      	ldr	r2, [pc, #124]	@ (8018264 <USBD_LL_Init+0x98>)
 80181e8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80181ec:	4b1d      	ldr	r3, [pc, #116]	@ (8018264 <USBD_LL_Init+0x98>)
 80181ee:	4a1e      	ldr	r2, [pc, #120]	@ (8018268 <USBD_LL_Init+0x9c>)
 80181f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80181f2:	4b1c      	ldr	r3, [pc, #112]	@ (8018264 <USBD_LL_Init+0x98>)
 80181f4:	2209      	movs	r2, #9
 80181f6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80181f8:	4b1a      	ldr	r3, [pc, #104]	@ (8018264 <USBD_LL_Init+0x98>)
 80181fa:	2202      	movs	r2, #2
 80181fc:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80181fe:	4b19      	ldr	r3, [pc, #100]	@ (8018264 <USBD_LL_Init+0x98>)
 8018200:	2200      	movs	r2, #0
 8018202:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018204:	4b17      	ldr	r3, [pc, #92]	@ (8018264 <USBD_LL_Init+0x98>)
 8018206:	2202      	movs	r2, #2
 8018208:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801820a:	4b16      	ldr	r3, [pc, #88]	@ (8018264 <USBD_LL_Init+0x98>)
 801820c:	2200      	movs	r2, #0
 801820e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018210:	4b14      	ldr	r3, [pc, #80]	@ (8018264 <USBD_LL_Init+0x98>)
 8018212:	2200      	movs	r2, #0
 8018214:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018216:	4b13      	ldr	r3, [pc, #76]	@ (8018264 <USBD_LL_Init+0x98>)
 8018218:	2200      	movs	r2, #0
 801821a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801821c:	4b11      	ldr	r3, [pc, #68]	@ (8018264 <USBD_LL_Init+0x98>)
 801821e:	2200      	movs	r2, #0
 8018220:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018222:	4b10      	ldr	r3, [pc, #64]	@ (8018264 <USBD_LL_Init+0x98>)
 8018224:	2200      	movs	r2, #0
 8018226:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018228:	4b0e      	ldr	r3, [pc, #56]	@ (8018264 <USBD_LL_Init+0x98>)
 801822a:	2200      	movs	r2, #0
 801822c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801822e:	480d      	ldr	r0, [pc, #52]	@ (8018264 <USBD_LL_Init+0x98>)
 8018230:	f7f3 fcc4 	bl	800bbbc <HAL_PCD_Init>
 8018234:	4603      	mov	r3, r0
 8018236:	2b00      	cmp	r3, #0
 8018238:	d001      	beq.n	801823e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801823a:	f7ea f835 	bl	80022a8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801823e:	2180      	movs	r1, #128	@ 0x80
 8018240:	4808      	ldr	r0, [pc, #32]	@ (8018264 <USBD_LL_Init+0x98>)
 8018242:	f7f4 ff1a 	bl	800d07a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018246:	2240      	movs	r2, #64	@ 0x40
 8018248:	2100      	movs	r1, #0
 801824a:	4806      	ldr	r0, [pc, #24]	@ (8018264 <USBD_LL_Init+0x98>)
 801824c:	f7f4 fece 	bl	800cfec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018250:	2280      	movs	r2, #128	@ 0x80
 8018252:	2101      	movs	r1, #1
 8018254:	4803      	ldr	r0, [pc, #12]	@ (8018264 <USBD_LL_Init+0x98>)
 8018256:	f7f4 fec9 	bl	800cfec <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801825a:	2300      	movs	r3, #0
}
 801825c:	4618      	mov	r0, r3
 801825e:	3708      	adds	r7, #8
 8018260:	46bd      	mov	sp, r7
 8018262:	bd80      	pop	{r7, pc}
 8018264:	24027254 	.word	0x24027254
 8018268:	40080000 	.word	0x40080000

0801826c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801826c:	b580      	push	{r7, lr}
 801826e:	b084      	sub	sp, #16
 8018270:	af00      	add	r7, sp, #0
 8018272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018274:	2300      	movs	r3, #0
 8018276:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018278:	2300      	movs	r3, #0
 801827a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018282:	4618      	mov	r0, r3
 8018284:	f7f3 fda6 	bl	800bdd4 <HAL_PCD_Start>
 8018288:	4603      	mov	r3, r0
 801828a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801828c:	7bfb      	ldrb	r3, [r7, #15]
 801828e:	4618      	mov	r0, r3
 8018290:	f000 f942 	bl	8018518 <USBD_Get_USB_Status>
 8018294:	4603      	mov	r3, r0
 8018296:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018298:	7bbb      	ldrb	r3, [r7, #14]
}
 801829a:	4618      	mov	r0, r3
 801829c:	3710      	adds	r7, #16
 801829e:	46bd      	mov	sp, r7
 80182a0:	bd80      	pop	{r7, pc}

080182a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80182a2:	b580      	push	{r7, lr}
 80182a4:	b084      	sub	sp, #16
 80182a6:	af00      	add	r7, sp, #0
 80182a8:	6078      	str	r0, [r7, #4]
 80182aa:	4608      	mov	r0, r1
 80182ac:	4611      	mov	r1, r2
 80182ae:	461a      	mov	r2, r3
 80182b0:	4603      	mov	r3, r0
 80182b2:	70fb      	strb	r3, [r7, #3]
 80182b4:	460b      	mov	r3, r1
 80182b6:	70bb      	strb	r3, [r7, #2]
 80182b8:	4613      	mov	r3, r2
 80182ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182bc:	2300      	movs	r3, #0
 80182be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80182c0:	2300      	movs	r3, #0
 80182c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80182ca:	78bb      	ldrb	r3, [r7, #2]
 80182cc:	883a      	ldrh	r2, [r7, #0]
 80182ce:	78f9      	ldrb	r1, [r7, #3]
 80182d0:	f7f4 faa7 	bl	800c822 <HAL_PCD_EP_Open>
 80182d4:	4603      	mov	r3, r0
 80182d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80182d8:	7bfb      	ldrb	r3, [r7, #15]
 80182da:	4618      	mov	r0, r3
 80182dc:	f000 f91c 	bl	8018518 <USBD_Get_USB_Status>
 80182e0:	4603      	mov	r3, r0
 80182e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80182e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80182e6:	4618      	mov	r0, r3
 80182e8:	3710      	adds	r7, #16
 80182ea:	46bd      	mov	sp, r7
 80182ec:	bd80      	pop	{r7, pc}

080182ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80182ee:	b580      	push	{r7, lr}
 80182f0:	b084      	sub	sp, #16
 80182f2:	af00      	add	r7, sp, #0
 80182f4:	6078      	str	r0, [r7, #4]
 80182f6:	460b      	mov	r3, r1
 80182f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182fa:	2300      	movs	r3, #0
 80182fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80182fe:	2300      	movs	r3, #0
 8018300:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018308:	78fa      	ldrb	r2, [r7, #3]
 801830a:	4611      	mov	r1, r2
 801830c:	4618      	mov	r0, r3
 801830e:	f7f4 faf2 	bl	800c8f6 <HAL_PCD_EP_Close>
 8018312:	4603      	mov	r3, r0
 8018314:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018316:	7bfb      	ldrb	r3, [r7, #15]
 8018318:	4618      	mov	r0, r3
 801831a:	f000 f8fd 	bl	8018518 <USBD_Get_USB_Status>
 801831e:	4603      	mov	r3, r0
 8018320:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018322:	7bbb      	ldrb	r3, [r7, #14]
}
 8018324:	4618      	mov	r0, r3
 8018326:	3710      	adds	r7, #16
 8018328:	46bd      	mov	sp, r7
 801832a:	bd80      	pop	{r7, pc}

0801832c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801832c:	b580      	push	{r7, lr}
 801832e:	b084      	sub	sp, #16
 8018330:	af00      	add	r7, sp, #0
 8018332:	6078      	str	r0, [r7, #4]
 8018334:	460b      	mov	r3, r1
 8018336:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018338:	2300      	movs	r3, #0
 801833a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801833c:	2300      	movs	r3, #0
 801833e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018346:	78fa      	ldrb	r2, [r7, #3]
 8018348:	4611      	mov	r1, r2
 801834a:	4618      	mov	r0, r3
 801834c:	f7f4 fbaa 	bl	800caa4 <HAL_PCD_EP_SetStall>
 8018350:	4603      	mov	r3, r0
 8018352:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018354:	7bfb      	ldrb	r3, [r7, #15]
 8018356:	4618      	mov	r0, r3
 8018358:	f000 f8de 	bl	8018518 <USBD_Get_USB_Status>
 801835c:	4603      	mov	r3, r0
 801835e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018360:	7bbb      	ldrb	r3, [r7, #14]
}
 8018362:	4618      	mov	r0, r3
 8018364:	3710      	adds	r7, #16
 8018366:	46bd      	mov	sp, r7
 8018368:	bd80      	pop	{r7, pc}

0801836a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801836a:	b580      	push	{r7, lr}
 801836c:	b084      	sub	sp, #16
 801836e:	af00      	add	r7, sp, #0
 8018370:	6078      	str	r0, [r7, #4]
 8018372:	460b      	mov	r3, r1
 8018374:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018376:	2300      	movs	r3, #0
 8018378:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801837a:	2300      	movs	r3, #0
 801837c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018384:	78fa      	ldrb	r2, [r7, #3]
 8018386:	4611      	mov	r1, r2
 8018388:	4618      	mov	r0, r3
 801838a:	f7f4 fbee 	bl	800cb6a <HAL_PCD_EP_ClrStall>
 801838e:	4603      	mov	r3, r0
 8018390:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018392:	7bfb      	ldrb	r3, [r7, #15]
 8018394:	4618      	mov	r0, r3
 8018396:	f000 f8bf 	bl	8018518 <USBD_Get_USB_Status>
 801839a:	4603      	mov	r3, r0
 801839c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801839e:	7bbb      	ldrb	r3, [r7, #14]
}
 80183a0:	4618      	mov	r0, r3
 80183a2:	3710      	adds	r7, #16
 80183a4:	46bd      	mov	sp, r7
 80183a6:	bd80      	pop	{r7, pc}

080183a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80183a8:	b480      	push	{r7}
 80183aa:	b085      	sub	sp, #20
 80183ac:	af00      	add	r7, sp, #0
 80183ae:	6078      	str	r0, [r7, #4]
 80183b0:	460b      	mov	r3, r1
 80183b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80183ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80183bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	da0b      	bge.n	80183dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80183c4:	78fb      	ldrb	r3, [r7, #3]
 80183c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80183ca:	68f9      	ldr	r1, [r7, #12]
 80183cc:	4613      	mov	r3, r2
 80183ce:	00db      	lsls	r3, r3, #3
 80183d0:	4413      	add	r3, r2
 80183d2:	009b      	lsls	r3, r3, #2
 80183d4:	440b      	add	r3, r1
 80183d6:	3316      	adds	r3, #22
 80183d8:	781b      	ldrb	r3, [r3, #0]
 80183da:	e00b      	b.n	80183f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80183dc:	78fb      	ldrb	r3, [r7, #3]
 80183de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80183e2:	68f9      	ldr	r1, [r7, #12]
 80183e4:	4613      	mov	r3, r2
 80183e6:	00db      	lsls	r3, r3, #3
 80183e8:	4413      	add	r3, r2
 80183ea:	009b      	lsls	r3, r3, #2
 80183ec:	440b      	add	r3, r1
 80183ee:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80183f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80183f4:	4618      	mov	r0, r3
 80183f6:	3714      	adds	r7, #20
 80183f8:	46bd      	mov	sp, r7
 80183fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183fe:	4770      	bx	lr

08018400 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018400:	b580      	push	{r7, lr}
 8018402:	b084      	sub	sp, #16
 8018404:	af00      	add	r7, sp, #0
 8018406:	6078      	str	r0, [r7, #4]
 8018408:	460b      	mov	r3, r1
 801840a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801840c:	2300      	movs	r3, #0
 801840e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018410:	2300      	movs	r3, #0
 8018412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801841a:	78fa      	ldrb	r2, [r7, #3]
 801841c:	4611      	mov	r1, r2
 801841e:	4618      	mov	r0, r3
 8018420:	f7f4 f9db 	bl	800c7da <HAL_PCD_SetAddress>
 8018424:	4603      	mov	r3, r0
 8018426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018428:	7bfb      	ldrb	r3, [r7, #15]
 801842a:	4618      	mov	r0, r3
 801842c:	f000 f874 	bl	8018518 <USBD_Get_USB_Status>
 8018430:	4603      	mov	r3, r0
 8018432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018434:	7bbb      	ldrb	r3, [r7, #14]
}
 8018436:	4618      	mov	r0, r3
 8018438:	3710      	adds	r7, #16
 801843a:	46bd      	mov	sp, r7
 801843c:	bd80      	pop	{r7, pc}

0801843e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801843e:	b580      	push	{r7, lr}
 8018440:	b086      	sub	sp, #24
 8018442:	af00      	add	r7, sp, #0
 8018444:	60f8      	str	r0, [r7, #12]
 8018446:	607a      	str	r2, [r7, #4]
 8018448:	603b      	str	r3, [r7, #0]
 801844a:	460b      	mov	r3, r1
 801844c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801844e:	2300      	movs	r3, #0
 8018450:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018452:	2300      	movs	r3, #0
 8018454:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018456:	68fb      	ldr	r3, [r7, #12]
 8018458:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801845c:	7af9      	ldrb	r1, [r7, #11]
 801845e:	683b      	ldr	r3, [r7, #0]
 8018460:	687a      	ldr	r2, [r7, #4]
 8018462:	f7f4 fae5 	bl	800ca30 <HAL_PCD_EP_Transmit>
 8018466:	4603      	mov	r3, r0
 8018468:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801846a:	7dfb      	ldrb	r3, [r7, #23]
 801846c:	4618      	mov	r0, r3
 801846e:	f000 f853 	bl	8018518 <USBD_Get_USB_Status>
 8018472:	4603      	mov	r3, r0
 8018474:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018476:	7dbb      	ldrb	r3, [r7, #22]
}
 8018478:	4618      	mov	r0, r3
 801847a:	3718      	adds	r7, #24
 801847c:	46bd      	mov	sp, r7
 801847e:	bd80      	pop	{r7, pc}

08018480 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018480:	b580      	push	{r7, lr}
 8018482:	b086      	sub	sp, #24
 8018484:	af00      	add	r7, sp, #0
 8018486:	60f8      	str	r0, [r7, #12]
 8018488:	607a      	str	r2, [r7, #4]
 801848a:	603b      	str	r3, [r7, #0]
 801848c:	460b      	mov	r3, r1
 801848e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018490:	2300      	movs	r3, #0
 8018492:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018494:	2300      	movs	r3, #0
 8018496:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018498:	68fb      	ldr	r3, [r7, #12]
 801849a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801849e:	7af9      	ldrb	r1, [r7, #11]
 80184a0:	683b      	ldr	r3, [r7, #0]
 80184a2:	687a      	ldr	r2, [r7, #4]
 80184a4:	f7f4 fa71 	bl	800c98a <HAL_PCD_EP_Receive>
 80184a8:	4603      	mov	r3, r0
 80184aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80184ac:	7dfb      	ldrb	r3, [r7, #23]
 80184ae:	4618      	mov	r0, r3
 80184b0:	f000 f832 	bl	8018518 <USBD_Get_USB_Status>
 80184b4:	4603      	mov	r3, r0
 80184b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80184b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80184ba:	4618      	mov	r0, r3
 80184bc:	3718      	adds	r7, #24
 80184be:	46bd      	mov	sp, r7
 80184c0:	bd80      	pop	{r7, pc}

080184c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80184c2:	b580      	push	{r7, lr}
 80184c4:	b082      	sub	sp, #8
 80184c6:	af00      	add	r7, sp, #0
 80184c8:	6078      	str	r0, [r7, #4]
 80184ca:	460b      	mov	r3, r1
 80184cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80184d4:	78fa      	ldrb	r2, [r7, #3]
 80184d6:	4611      	mov	r1, r2
 80184d8:	4618      	mov	r0, r3
 80184da:	f7f4 fa91 	bl	800ca00 <HAL_PCD_EP_GetRxCount>
 80184de:	4603      	mov	r3, r0
}
 80184e0:	4618      	mov	r0, r3
 80184e2:	3708      	adds	r7, #8
 80184e4:	46bd      	mov	sp, r7
 80184e6:	bd80      	pop	{r7, pc}

080184e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80184e8:	b480      	push	{r7}
 80184ea:	b083      	sub	sp, #12
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80184f0:	4b03      	ldr	r3, [pc, #12]	@ (8018500 <USBD_static_malloc+0x18>)
}
 80184f2:	4618      	mov	r0, r3
 80184f4:	370c      	adds	r7, #12
 80184f6:	46bd      	mov	sp, r7
 80184f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184fc:	4770      	bx	lr
 80184fe:	bf00      	nop
 8018500:	24027738 	.word	0x24027738

08018504 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018504:	b480      	push	{r7}
 8018506:	b083      	sub	sp, #12
 8018508:	af00      	add	r7, sp, #0
 801850a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801850c:	bf00      	nop
 801850e:	370c      	adds	r7, #12
 8018510:	46bd      	mov	sp, r7
 8018512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018516:	4770      	bx	lr

08018518 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018518:	b480      	push	{r7}
 801851a:	b085      	sub	sp, #20
 801851c:	af00      	add	r7, sp, #0
 801851e:	4603      	mov	r3, r0
 8018520:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018522:	2300      	movs	r3, #0
 8018524:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018526:	79fb      	ldrb	r3, [r7, #7]
 8018528:	2b03      	cmp	r3, #3
 801852a:	d817      	bhi.n	801855c <USBD_Get_USB_Status+0x44>
 801852c:	a201      	add	r2, pc, #4	@ (adr r2, 8018534 <USBD_Get_USB_Status+0x1c>)
 801852e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018532:	bf00      	nop
 8018534:	08018545 	.word	0x08018545
 8018538:	0801854b 	.word	0x0801854b
 801853c:	08018551 	.word	0x08018551
 8018540:	08018557 	.word	0x08018557
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018544:	2300      	movs	r3, #0
 8018546:	73fb      	strb	r3, [r7, #15]
    break;
 8018548:	e00b      	b.n	8018562 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801854a:	2303      	movs	r3, #3
 801854c:	73fb      	strb	r3, [r7, #15]
    break;
 801854e:	e008      	b.n	8018562 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018550:	2301      	movs	r3, #1
 8018552:	73fb      	strb	r3, [r7, #15]
    break;
 8018554:	e005      	b.n	8018562 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018556:	2303      	movs	r3, #3
 8018558:	73fb      	strb	r3, [r7, #15]
    break;
 801855a:	e002      	b.n	8018562 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801855c:	2303      	movs	r3, #3
 801855e:	73fb      	strb	r3, [r7, #15]
    break;
 8018560:	bf00      	nop
  }
  return usb_status;
 8018562:	7bfb      	ldrb	r3, [r7, #15]
}
 8018564:	4618      	mov	r0, r3
 8018566:	3714      	adds	r7, #20
 8018568:	46bd      	mov	sp, r7
 801856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801856e:	4770      	bx	lr

08018570 <malloc>:
 8018570:	4b02      	ldr	r3, [pc, #8]	@ (801857c <malloc+0xc>)
 8018572:	4601      	mov	r1, r0
 8018574:	6818      	ldr	r0, [r3, #0]
 8018576:	f000 b825 	b.w	80185c4 <_malloc_r>
 801857a:	bf00      	nop
 801857c:	24000128 	.word	0x24000128

08018580 <sbrk_aligned>:
 8018580:	b570      	push	{r4, r5, r6, lr}
 8018582:	4e0f      	ldr	r6, [pc, #60]	@ (80185c0 <sbrk_aligned+0x40>)
 8018584:	460c      	mov	r4, r1
 8018586:	6831      	ldr	r1, [r6, #0]
 8018588:	4605      	mov	r5, r0
 801858a:	b911      	cbnz	r1, 8018592 <sbrk_aligned+0x12>
 801858c:	f000 fe82 	bl	8019294 <_sbrk_r>
 8018590:	6030      	str	r0, [r6, #0]
 8018592:	4621      	mov	r1, r4
 8018594:	4628      	mov	r0, r5
 8018596:	f000 fe7d 	bl	8019294 <_sbrk_r>
 801859a:	1c43      	adds	r3, r0, #1
 801859c:	d103      	bne.n	80185a6 <sbrk_aligned+0x26>
 801859e:	f04f 34ff 	mov.w	r4, #4294967295
 80185a2:	4620      	mov	r0, r4
 80185a4:	bd70      	pop	{r4, r5, r6, pc}
 80185a6:	1cc4      	adds	r4, r0, #3
 80185a8:	f024 0403 	bic.w	r4, r4, #3
 80185ac:	42a0      	cmp	r0, r4
 80185ae:	d0f8      	beq.n	80185a2 <sbrk_aligned+0x22>
 80185b0:	1a21      	subs	r1, r4, r0
 80185b2:	4628      	mov	r0, r5
 80185b4:	f000 fe6e 	bl	8019294 <_sbrk_r>
 80185b8:	3001      	adds	r0, #1
 80185ba:	d1f2      	bne.n	80185a2 <sbrk_aligned+0x22>
 80185bc:	e7ef      	b.n	801859e <sbrk_aligned+0x1e>
 80185be:	bf00      	nop
 80185c0:	24027958 	.word	0x24027958

080185c4 <_malloc_r>:
 80185c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80185c8:	1ccd      	adds	r5, r1, #3
 80185ca:	f025 0503 	bic.w	r5, r5, #3
 80185ce:	3508      	adds	r5, #8
 80185d0:	2d0c      	cmp	r5, #12
 80185d2:	bf38      	it	cc
 80185d4:	250c      	movcc	r5, #12
 80185d6:	2d00      	cmp	r5, #0
 80185d8:	4606      	mov	r6, r0
 80185da:	db01      	blt.n	80185e0 <_malloc_r+0x1c>
 80185dc:	42a9      	cmp	r1, r5
 80185de:	d904      	bls.n	80185ea <_malloc_r+0x26>
 80185e0:	230c      	movs	r3, #12
 80185e2:	6033      	str	r3, [r6, #0]
 80185e4:	2000      	movs	r0, #0
 80185e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80186c0 <_malloc_r+0xfc>
 80185ee:	f000 f869 	bl	80186c4 <__malloc_lock>
 80185f2:	f8d8 3000 	ldr.w	r3, [r8]
 80185f6:	461c      	mov	r4, r3
 80185f8:	bb44      	cbnz	r4, 801864c <_malloc_r+0x88>
 80185fa:	4629      	mov	r1, r5
 80185fc:	4630      	mov	r0, r6
 80185fe:	f7ff ffbf 	bl	8018580 <sbrk_aligned>
 8018602:	1c43      	adds	r3, r0, #1
 8018604:	4604      	mov	r4, r0
 8018606:	d158      	bne.n	80186ba <_malloc_r+0xf6>
 8018608:	f8d8 4000 	ldr.w	r4, [r8]
 801860c:	4627      	mov	r7, r4
 801860e:	2f00      	cmp	r7, #0
 8018610:	d143      	bne.n	801869a <_malloc_r+0xd6>
 8018612:	2c00      	cmp	r4, #0
 8018614:	d04b      	beq.n	80186ae <_malloc_r+0xea>
 8018616:	6823      	ldr	r3, [r4, #0]
 8018618:	4639      	mov	r1, r7
 801861a:	4630      	mov	r0, r6
 801861c:	eb04 0903 	add.w	r9, r4, r3
 8018620:	f000 fe38 	bl	8019294 <_sbrk_r>
 8018624:	4581      	cmp	r9, r0
 8018626:	d142      	bne.n	80186ae <_malloc_r+0xea>
 8018628:	6821      	ldr	r1, [r4, #0]
 801862a:	1a6d      	subs	r5, r5, r1
 801862c:	4629      	mov	r1, r5
 801862e:	4630      	mov	r0, r6
 8018630:	f7ff ffa6 	bl	8018580 <sbrk_aligned>
 8018634:	3001      	adds	r0, #1
 8018636:	d03a      	beq.n	80186ae <_malloc_r+0xea>
 8018638:	6823      	ldr	r3, [r4, #0]
 801863a:	442b      	add	r3, r5
 801863c:	6023      	str	r3, [r4, #0]
 801863e:	f8d8 3000 	ldr.w	r3, [r8]
 8018642:	685a      	ldr	r2, [r3, #4]
 8018644:	bb62      	cbnz	r2, 80186a0 <_malloc_r+0xdc>
 8018646:	f8c8 7000 	str.w	r7, [r8]
 801864a:	e00f      	b.n	801866c <_malloc_r+0xa8>
 801864c:	6822      	ldr	r2, [r4, #0]
 801864e:	1b52      	subs	r2, r2, r5
 8018650:	d420      	bmi.n	8018694 <_malloc_r+0xd0>
 8018652:	2a0b      	cmp	r2, #11
 8018654:	d917      	bls.n	8018686 <_malloc_r+0xc2>
 8018656:	1961      	adds	r1, r4, r5
 8018658:	42a3      	cmp	r3, r4
 801865a:	6025      	str	r5, [r4, #0]
 801865c:	bf18      	it	ne
 801865e:	6059      	strne	r1, [r3, #4]
 8018660:	6863      	ldr	r3, [r4, #4]
 8018662:	bf08      	it	eq
 8018664:	f8c8 1000 	streq.w	r1, [r8]
 8018668:	5162      	str	r2, [r4, r5]
 801866a:	604b      	str	r3, [r1, #4]
 801866c:	4630      	mov	r0, r6
 801866e:	f000 f82f 	bl	80186d0 <__malloc_unlock>
 8018672:	f104 000b 	add.w	r0, r4, #11
 8018676:	1d23      	adds	r3, r4, #4
 8018678:	f020 0007 	bic.w	r0, r0, #7
 801867c:	1ac2      	subs	r2, r0, r3
 801867e:	bf1c      	itt	ne
 8018680:	1a1b      	subne	r3, r3, r0
 8018682:	50a3      	strne	r3, [r4, r2]
 8018684:	e7af      	b.n	80185e6 <_malloc_r+0x22>
 8018686:	6862      	ldr	r2, [r4, #4]
 8018688:	42a3      	cmp	r3, r4
 801868a:	bf0c      	ite	eq
 801868c:	f8c8 2000 	streq.w	r2, [r8]
 8018690:	605a      	strne	r2, [r3, #4]
 8018692:	e7eb      	b.n	801866c <_malloc_r+0xa8>
 8018694:	4623      	mov	r3, r4
 8018696:	6864      	ldr	r4, [r4, #4]
 8018698:	e7ae      	b.n	80185f8 <_malloc_r+0x34>
 801869a:	463c      	mov	r4, r7
 801869c:	687f      	ldr	r7, [r7, #4]
 801869e:	e7b6      	b.n	801860e <_malloc_r+0x4a>
 80186a0:	461a      	mov	r2, r3
 80186a2:	685b      	ldr	r3, [r3, #4]
 80186a4:	42a3      	cmp	r3, r4
 80186a6:	d1fb      	bne.n	80186a0 <_malloc_r+0xdc>
 80186a8:	2300      	movs	r3, #0
 80186aa:	6053      	str	r3, [r2, #4]
 80186ac:	e7de      	b.n	801866c <_malloc_r+0xa8>
 80186ae:	230c      	movs	r3, #12
 80186b0:	6033      	str	r3, [r6, #0]
 80186b2:	4630      	mov	r0, r6
 80186b4:	f000 f80c 	bl	80186d0 <__malloc_unlock>
 80186b8:	e794      	b.n	80185e4 <_malloc_r+0x20>
 80186ba:	6005      	str	r5, [r0, #0]
 80186bc:	e7d6      	b.n	801866c <_malloc_r+0xa8>
 80186be:	bf00      	nop
 80186c0:	2402795c 	.word	0x2402795c

080186c4 <__malloc_lock>:
 80186c4:	4801      	ldr	r0, [pc, #4]	@ (80186cc <__malloc_lock+0x8>)
 80186c6:	f000 be32 	b.w	801932e <__retarget_lock_acquire_recursive>
 80186ca:	bf00      	nop
 80186cc:	24027aa0 	.word	0x24027aa0

080186d0 <__malloc_unlock>:
 80186d0:	4801      	ldr	r0, [pc, #4]	@ (80186d8 <__malloc_unlock+0x8>)
 80186d2:	f000 be2d 	b.w	8019330 <__retarget_lock_release_recursive>
 80186d6:	bf00      	nop
 80186d8:	24027aa0 	.word	0x24027aa0

080186dc <rand>:
 80186dc:	4b16      	ldr	r3, [pc, #88]	@ (8018738 <rand+0x5c>)
 80186de:	b510      	push	{r4, lr}
 80186e0:	681c      	ldr	r4, [r3, #0]
 80186e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80186e4:	b9b3      	cbnz	r3, 8018714 <rand+0x38>
 80186e6:	2018      	movs	r0, #24
 80186e8:	f7ff ff42 	bl	8018570 <malloc>
 80186ec:	4602      	mov	r2, r0
 80186ee:	6320      	str	r0, [r4, #48]	@ 0x30
 80186f0:	b920      	cbnz	r0, 80186fc <rand+0x20>
 80186f2:	4b12      	ldr	r3, [pc, #72]	@ (801873c <rand+0x60>)
 80186f4:	4812      	ldr	r0, [pc, #72]	@ (8018740 <rand+0x64>)
 80186f6:	2152      	movs	r1, #82	@ 0x52
 80186f8:	f000 fe2a 	bl	8019350 <__assert_func>
 80186fc:	4911      	ldr	r1, [pc, #68]	@ (8018744 <rand+0x68>)
 80186fe:	4b12      	ldr	r3, [pc, #72]	@ (8018748 <rand+0x6c>)
 8018700:	e9c0 1300 	strd	r1, r3, [r0]
 8018704:	4b11      	ldr	r3, [pc, #68]	@ (801874c <rand+0x70>)
 8018706:	6083      	str	r3, [r0, #8]
 8018708:	230b      	movs	r3, #11
 801870a:	8183      	strh	r3, [r0, #12]
 801870c:	2100      	movs	r1, #0
 801870e:	2001      	movs	r0, #1
 8018710:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018714:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018716:	480e      	ldr	r0, [pc, #56]	@ (8018750 <rand+0x74>)
 8018718:	690b      	ldr	r3, [r1, #16]
 801871a:	694c      	ldr	r4, [r1, #20]
 801871c:	4a0d      	ldr	r2, [pc, #52]	@ (8018754 <rand+0x78>)
 801871e:	4358      	muls	r0, r3
 8018720:	fb02 0004 	mla	r0, r2, r4, r0
 8018724:	fba3 3202 	umull	r3, r2, r3, r2
 8018728:	3301      	adds	r3, #1
 801872a:	eb40 0002 	adc.w	r0, r0, r2
 801872e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018732:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8018736:	bd10      	pop	{r4, pc}
 8018738:	24000128 	.word	0x24000128
 801873c:	0801b660 	.word	0x0801b660
 8018740:	0801b677 	.word	0x0801b677
 8018744:	abcd330e 	.word	0xabcd330e
 8018748:	e66d1234 	.word	0xe66d1234
 801874c:	0005deec 	.word	0x0005deec
 8018750:	5851f42d 	.word	0x5851f42d
 8018754:	4c957f2d 	.word	0x4c957f2d

08018758 <__cvt>:
 8018758:	b5f0      	push	{r4, r5, r6, r7, lr}
 801875a:	ed2d 8b02 	vpush	{d8}
 801875e:	eeb0 8b40 	vmov.f64	d8, d0
 8018762:	b085      	sub	sp, #20
 8018764:	4617      	mov	r7, r2
 8018766:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8018768:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801876a:	ee18 2a90 	vmov	r2, s17
 801876e:	f025 0520 	bic.w	r5, r5, #32
 8018772:	2a00      	cmp	r2, #0
 8018774:	bfb6      	itet	lt
 8018776:	222d      	movlt	r2, #45	@ 0x2d
 8018778:	2200      	movge	r2, #0
 801877a:	eeb1 8b40 	vneglt.f64	d8, d0
 801877e:	2d46      	cmp	r5, #70	@ 0x46
 8018780:	460c      	mov	r4, r1
 8018782:	701a      	strb	r2, [r3, #0]
 8018784:	d004      	beq.n	8018790 <__cvt+0x38>
 8018786:	2d45      	cmp	r5, #69	@ 0x45
 8018788:	d100      	bne.n	801878c <__cvt+0x34>
 801878a:	3401      	adds	r4, #1
 801878c:	2102      	movs	r1, #2
 801878e:	e000      	b.n	8018792 <__cvt+0x3a>
 8018790:	2103      	movs	r1, #3
 8018792:	ab03      	add	r3, sp, #12
 8018794:	9301      	str	r3, [sp, #4]
 8018796:	ab02      	add	r3, sp, #8
 8018798:	9300      	str	r3, [sp, #0]
 801879a:	4622      	mov	r2, r4
 801879c:	4633      	mov	r3, r6
 801879e:	eeb0 0b48 	vmov.f64	d0, d8
 80187a2:	f000 fe7d 	bl	80194a0 <_dtoa_r>
 80187a6:	2d47      	cmp	r5, #71	@ 0x47
 80187a8:	d114      	bne.n	80187d4 <__cvt+0x7c>
 80187aa:	07fb      	lsls	r3, r7, #31
 80187ac:	d50a      	bpl.n	80187c4 <__cvt+0x6c>
 80187ae:	1902      	adds	r2, r0, r4
 80187b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80187b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187b8:	bf08      	it	eq
 80187ba:	9203      	streq	r2, [sp, #12]
 80187bc:	2130      	movs	r1, #48	@ 0x30
 80187be:	9b03      	ldr	r3, [sp, #12]
 80187c0:	4293      	cmp	r3, r2
 80187c2:	d319      	bcc.n	80187f8 <__cvt+0xa0>
 80187c4:	9b03      	ldr	r3, [sp, #12]
 80187c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80187c8:	1a1b      	subs	r3, r3, r0
 80187ca:	6013      	str	r3, [r2, #0]
 80187cc:	b005      	add	sp, #20
 80187ce:	ecbd 8b02 	vpop	{d8}
 80187d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187d4:	2d46      	cmp	r5, #70	@ 0x46
 80187d6:	eb00 0204 	add.w	r2, r0, r4
 80187da:	d1e9      	bne.n	80187b0 <__cvt+0x58>
 80187dc:	7803      	ldrb	r3, [r0, #0]
 80187de:	2b30      	cmp	r3, #48	@ 0x30
 80187e0:	d107      	bne.n	80187f2 <__cvt+0x9a>
 80187e2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80187e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187ea:	bf1c      	itt	ne
 80187ec:	f1c4 0401 	rsbne	r4, r4, #1
 80187f0:	6034      	strne	r4, [r6, #0]
 80187f2:	6833      	ldr	r3, [r6, #0]
 80187f4:	441a      	add	r2, r3
 80187f6:	e7db      	b.n	80187b0 <__cvt+0x58>
 80187f8:	1c5c      	adds	r4, r3, #1
 80187fa:	9403      	str	r4, [sp, #12]
 80187fc:	7019      	strb	r1, [r3, #0]
 80187fe:	e7de      	b.n	80187be <__cvt+0x66>

08018800 <__exponent>:
 8018800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018802:	2900      	cmp	r1, #0
 8018804:	bfba      	itte	lt
 8018806:	4249      	neglt	r1, r1
 8018808:	232d      	movlt	r3, #45	@ 0x2d
 801880a:	232b      	movge	r3, #43	@ 0x2b
 801880c:	2909      	cmp	r1, #9
 801880e:	7002      	strb	r2, [r0, #0]
 8018810:	7043      	strb	r3, [r0, #1]
 8018812:	dd29      	ble.n	8018868 <__exponent+0x68>
 8018814:	f10d 0307 	add.w	r3, sp, #7
 8018818:	461d      	mov	r5, r3
 801881a:	270a      	movs	r7, #10
 801881c:	461a      	mov	r2, r3
 801881e:	fbb1 f6f7 	udiv	r6, r1, r7
 8018822:	fb07 1416 	mls	r4, r7, r6, r1
 8018826:	3430      	adds	r4, #48	@ 0x30
 8018828:	f802 4c01 	strb.w	r4, [r2, #-1]
 801882c:	460c      	mov	r4, r1
 801882e:	2c63      	cmp	r4, #99	@ 0x63
 8018830:	f103 33ff 	add.w	r3, r3, #4294967295
 8018834:	4631      	mov	r1, r6
 8018836:	dcf1      	bgt.n	801881c <__exponent+0x1c>
 8018838:	3130      	adds	r1, #48	@ 0x30
 801883a:	1e94      	subs	r4, r2, #2
 801883c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8018840:	1c41      	adds	r1, r0, #1
 8018842:	4623      	mov	r3, r4
 8018844:	42ab      	cmp	r3, r5
 8018846:	d30a      	bcc.n	801885e <__exponent+0x5e>
 8018848:	f10d 0309 	add.w	r3, sp, #9
 801884c:	1a9b      	subs	r3, r3, r2
 801884e:	42ac      	cmp	r4, r5
 8018850:	bf88      	it	hi
 8018852:	2300      	movhi	r3, #0
 8018854:	3302      	adds	r3, #2
 8018856:	4403      	add	r3, r0
 8018858:	1a18      	subs	r0, r3, r0
 801885a:	b003      	add	sp, #12
 801885c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801885e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8018862:	f801 6f01 	strb.w	r6, [r1, #1]!
 8018866:	e7ed      	b.n	8018844 <__exponent+0x44>
 8018868:	2330      	movs	r3, #48	@ 0x30
 801886a:	3130      	adds	r1, #48	@ 0x30
 801886c:	7083      	strb	r3, [r0, #2]
 801886e:	70c1      	strb	r1, [r0, #3]
 8018870:	1d03      	adds	r3, r0, #4
 8018872:	e7f1      	b.n	8018858 <__exponent+0x58>
 8018874:	0000      	movs	r0, r0
	...

08018878 <_printf_float>:
 8018878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801887c:	b08d      	sub	sp, #52	@ 0x34
 801887e:	460c      	mov	r4, r1
 8018880:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8018884:	4616      	mov	r6, r2
 8018886:	461f      	mov	r7, r3
 8018888:	4605      	mov	r5, r0
 801888a:	f000 fccb 	bl	8019224 <_localeconv_r>
 801888e:	f8d0 b000 	ldr.w	fp, [r0]
 8018892:	4658      	mov	r0, fp
 8018894:	f7e7 fd74 	bl	8000380 <strlen>
 8018898:	2300      	movs	r3, #0
 801889a:	930a      	str	r3, [sp, #40]	@ 0x28
 801889c:	f8d8 3000 	ldr.w	r3, [r8]
 80188a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80188a4:	6822      	ldr	r2, [r4, #0]
 80188a6:	9005      	str	r0, [sp, #20]
 80188a8:	3307      	adds	r3, #7
 80188aa:	f023 0307 	bic.w	r3, r3, #7
 80188ae:	f103 0108 	add.w	r1, r3, #8
 80188b2:	f8c8 1000 	str.w	r1, [r8]
 80188b6:	ed93 0b00 	vldr	d0, [r3]
 80188ba:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8018b18 <_printf_float+0x2a0>
 80188be:	eeb0 7bc0 	vabs.f64	d7, d0
 80188c2:	eeb4 7b46 	vcmp.f64	d7, d6
 80188c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188ca:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80188ce:	dd24      	ble.n	801891a <_printf_float+0xa2>
 80188d0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80188d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188d8:	d502      	bpl.n	80188e0 <_printf_float+0x68>
 80188da:	232d      	movs	r3, #45	@ 0x2d
 80188dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80188e0:	498f      	ldr	r1, [pc, #572]	@ (8018b20 <_printf_float+0x2a8>)
 80188e2:	4b90      	ldr	r3, [pc, #576]	@ (8018b24 <_printf_float+0x2ac>)
 80188e4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80188e8:	bf8c      	ite	hi
 80188ea:	4688      	movhi	r8, r1
 80188ec:	4698      	movls	r8, r3
 80188ee:	f022 0204 	bic.w	r2, r2, #4
 80188f2:	2303      	movs	r3, #3
 80188f4:	6123      	str	r3, [r4, #16]
 80188f6:	6022      	str	r2, [r4, #0]
 80188f8:	f04f 0a00 	mov.w	sl, #0
 80188fc:	9700      	str	r7, [sp, #0]
 80188fe:	4633      	mov	r3, r6
 8018900:	aa0b      	add	r2, sp, #44	@ 0x2c
 8018902:	4621      	mov	r1, r4
 8018904:	4628      	mov	r0, r5
 8018906:	f000 f9d1 	bl	8018cac <_printf_common>
 801890a:	3001      	adds	r0, #1
 801890c:	f040 8089 	bne.w	8018a22 <_printf_float+0x1aa>
 8018910:	f04f 30ff 	mov.w	r0, #4294967295
 8018914:	b00d      	add	sp, #52	@ 0x34
 8018916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801891a:	eeb4 0b40 	vcmp.f64	d0, d0
 801891e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018922:	d709      	bvc.n	8018938 <_printf_float+0xc0>
 8018924:	ee10 3a90 	vmov	r3, s1
 8018928:	2b00      	cmp	r3, #0
 801892a:	bfbc      	itt	lt
 801892c:	232d      	movlt	r3, #45	@ 0x2d
 801892e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8018932:	497d      	ldr	r1, [pc, #500]	@ (8018b28 <_printf_float+0x2b0>)
 8018934:	4b7d      	ldr	r3, [pc, #500]	@ (8018b2c <_printf_float+0x2b4>)
 8018936:	e7d5      	b.n	80188e4 <_printf_float+0x6c>
 8018938:	6863      	ldr	r3, [r4, #4]
 801893a:	1c59      	adds	r1, r3, #1
 801893c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8018940:	d139      	bne.n	80189b6 <_printf_float+0x13e>
 8018942:	2306      	movs	r3, #6
 8018944:	6063      	str	r3, [r4, #4]
 8018946:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801894a:	2300      	movs	r3, #0
 801894c:	6022      	str	r2, [r4, #0]
 801894e:	9303      	str	r3, [sp, #12]
 8018950:	ab0a      	add	r3, sp, #40	@ 0x28
 8018952:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8018956:	ab09      	add	r3, sp, #36	@ 0x24
 8018958:	9300      	str	r3, [sp, #0]
 801895a:	6861      	ldr	r1, [r4, #4]
 801895c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8018960:	4628      	mov	r0, r5
 8018962:	f7ff fef9 	bl	8018758 <__cvt>
 8018966:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801896a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801896c:	4680      	mov	r8, r0
 801896e:	d129      	bne.n	80189c4 <_printf_float+0x14c>
 8018970:	1cc8      	adds	r0, r1, #3
 8018972:	db02      	blt.n	801897a <_printf_float+0x102>
 8018974:	6863      	ldr	r3, [r4, #4]
 8018976:	4299      	cmp	r1, r3
 8018978:	dd41      	ble.n	80189fe <_printf_float+0x186>
 801897a:	f1a9 0902 	sub.w	r9, r9, #2
 801897e:	fa5f f989 	uxtb.w	r9, r9
 8018982:	3901      	subs	r1, #1
 8018984:	464a      	mov	r2, r9
 8018986:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801898a:	9109      	str	r1, [sp, #36]	@ 0x24
 801898c:	f7ff ff38 	bl	8018800 <__exponent>
 8018990:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018992:	1813      	adds	r3, r2, r0
 8018994:	2a01      	cmp	r2, #1
 8018996:	4682      	mov	sl, r0
 8018998:	6123      	str	r3, [r4, #16]
 801899a:	dc02      	bgt.n	80189a2 <_printf_float+0x12a>
 801899c:	6822      	ldr	r2, [r4, #0]
 801899e:	07d2      	lsls	r2, r2, #31
 80189a0:	d501      	bpl.n	80189a6 <_printf_float+0x12e>
 80189a2:	3301      	adds	r3, #1
 80189a4:	6123      	str	r3, [r4, #16]
 80189a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d0a6      	beq.n	80188fc <_printf_float+0x84>
 80189ae:	232d      	movs	r3, #45	@ 0x2d
 80189b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80189b4:	e7a2      	b.n	80188fc <_printf_float+0x84>
 80189b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80189ba:	d1c4      	bne.n	8018946 <_printf_float+0xce>
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d1c2      	bne.n	8018946 <_printf_float+0xce>
 80189c0:	2301      	movs	r3, #1
 80189c2:	e7bf      	b.n	8018944 <_printf_float+0xcc>
 80189c4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80189c8:	d9db      	bls.n	8018982 <_printf_float+0x10a>
 80189ca:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80189ce:	d118      	bne.n	8018a02 <_printf_float+0x18a>
 80189d0:	2900      	cmp	r1, #0
 80189d2:	6863      	ldr	r3, [r4, #4]
 80189d4:	dd0b      	ble.n	80189ee <_printf_float+0x176>
 80189d6:	6121      	str	r1, [r4, #16]
 80189d8:	b913      	cbnz	r3, 80189e0 <_printf_float+0x168>
 80189da:	6822      	ldr	r2, [r4, #0]
 80189dc:	07d0      	lsls	r0, r2, #31
 80189de:	d502      	bpl.n	80189e6 <_printf_float+0x16e>
 80189e0:	3301      	adds	r3, #1
 80189e2:	440b      	add	r3, r1
 80189e4:	6123      	str	r3, [r4, #16]
 80189e6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80189e8:	f04f 0a00 	mov.w	sl, #0
 80189ec:	e7db      	b.n	80189a6 <_printf_float+0x12e>
 80189ee:	b913      	cbnz	r3, 80189f6 <_printf_float+0x17e>
 80189f0:	6822      	ldr	r2, [r4, #0]
 80189f2:	07d2      	lsls	r2, r2, #31
 80189f4:	d501      	bpl.n	80189fa <_printf_float+0x182>
 80189f6:	3302      	adds	r3, #2
 80189f8:	e7f4      	b.n	80189e4 <_printf_float+0x16c>
 80189fa:	2301      	movs	r3, #1
 80189fc:	e7f2      	b.n	80189e4 <_printf_float+0x16c>
 80189fe:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8018a02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018a04:	4299      	cmp	r1, r3
 8018a06:	db05      	blt.n	8018a14 <_printf_float+0x19c>
 8018a08:	6823      	ldr	r3, [r4, #0]
 8018a0a:	6121      	str	r1, [r4, #16]
 8018a0c:	07d8      	lsls	r0, r3, #31
 8018a0e:	d5ea      	bpl.n	80189e6 <_printf_float+0x16e>
 8018a10:	1c4b      	adds	r3, r1, #1
 8018a12:	e7e7      	b.n	80189e4 <_printf_float+0x16c>
 8018a14:	2900      	cmp	r1, #0
 8018a16:	bfd4      	ite	le
 8018a18:	f1c1 0202 	rsble	r2, r1, #2
 8018a1c:	2201      	movgt	r2, #1
 8018a1e:	4413      	add	r3, r2
 8018a20:	e7e0      	b.n	80189e4 <_printf_float+0x16c>
 8018a22:	6823      	ldr	r3, [r4, #0]
 8018a24:	055a      	lsls	r2, r3, #21
 8018a26:	d407      	bmi.n	8018a38 <_printf_float+0x1c0>
 8018a28:	6923      	ldr	r3, [r4, #16]
 8018a2a:	4642      	mov	r2, r8
 8018a2c:	4631      	mov	r1, r6
 8018a2e:	4628      	mov	r0, r5
 8018a30:	47b8      	blx	r7
 8018a32:	3001      	adds	r0, #1
 8018a34:	d12a      	bne.n	8018a8c <_printf_float+0x214>
 8018a36:	e76b      	b.n	8018910 <_printf_float+0x98>
 8018a38:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8018a3c:	f240 80e0 	bls.w	8018c00 <_printf_float+0x388>
 8018a40:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8018a44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a4c:	d133      	bne.n	8018ab6 <_printf_float+0x23e>
 8018a4e:	4a38      	ldr	r2, [pc, #224]	@ (8018b30 <_printf_float+0x2b8>)
 8018a50:	2301      	movs	r3, #1
 8018a52:	4631      	mov	r1, r6
 8018a54:	4628      	mov	r0, r5
 8018a56:	47b8      	blx	r7
 8018a58:	3001      	adds	r0, #1
 8018a5a:	f43f af59 	beq.w	8018910 <_printf_float+0x98>
 8018a5e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8018a62:	4543      	cmp	r3, r8
 8018a64:	db02      	blt.n	8018a6c <_printf_float+0x1f4>
 8018a66:	6823      	ldr	r3, [r4, #0]
 8018a68:	07d8      	lsls	r0, r3, #31
 8018a6a:	d50f      	bpl.n	8018a8c <_printf_float+0x214>
 8018a6c:	9b05      	ldr	r3, [sp, #20]
 8018a6e:	465a      	mov	r2, fp
 8018a70:	4631      	mov	r1, r6
 8018a72:	4628      	mov	r0, r5
 8018a74:	47b8      	blx	r7
 8018a76:	3001      	adds	r0, #1
 8018a78:	f43f af4a 	beq.w	8018910 <_printf_float+0x98>
 8018a7c:	f04f 0900 	mov.w	r9, #0
 8018a80:	f108 38ff 	add.w	r8, r8, #4294967295
 8018a84:	f104 0a1a 	add.w	sl, r4, #26
 8018a88:	45c8      	cmp	r8, r9
 8018a8a:	dc09      	bgt.n	8018aa0 <_printf_float+0x228>
 8018a8c:	6823      	ldr	r3, [r4, #0]
 8018a8e:	079b      	lsls	r3, r3, #30
 8018a90:	f100 8107 	bmi.w	8018ca2 <_printf_float+0x42a>
 8018a94:	68e0      	ldr	r0, [r4, #12]
 8018a96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018a98:	4298      	cmp	r0, r3
 8018a9a:	bfb8      	it	lt
 8018a9c:	4618      	movlt	r0, r3
 8018a9e:	e739      	b.n	8018914 <_printf_float+0x9c>
 8018aa0:	2301      	movs	r3, #1
 8018aa2:	4652      	mov	r2, sl
 8018aa4:	4631      	mov	r1, r6
 8018aa6:	4628      	mov	r0, r5
 8018aa8:	47b8      	blx	r7
 8018aaa:	3001      	adds	r0, #1
 8018aac:	f43f af30 	beq.w	8018910 <_printf_float+0x98>
 8018ab0:	f109 0901 	add.w	r9, r9, #1
 8018ab4:	e7e8      	b.n	8018a88 <_printf_float+0x210>
 8018ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	dc3b      	bgt.n	8018b34 <_printf_float+0x2bc>
 8018abc:	4a1c      	ldr	r2, [pc, #112]	@ (8018b30 <_printf_float+0x2b8>)
 8018abe:	2301      	movs	r3, #1
 8018ac0:	4631      	mov	r1, r6
 8018ac2:	4628      	mov	r0, r5
 8018ac4:	47b8      	blx	r7
 8018ac6:	3001      	adds	r0, #1
 8018ac8:	f43f af22 	beq.w	8018910 <_printf_float+0x98>
 8018acc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8018ad0:	ea59 0303 	orrs.w	r3, r9, r3
 8018ad4:	d102      	bne.n	8018adc <_printf_float+0x264>
 8018ad6:	6823      	ldr	r3, [r4, #0]
 8018ad8:	07d9      	lsls	r1, r3, #31
 8018ada:	d5d7      	bpl.n	8018a8c <_printf_float+0x214>
 8018adc:	9b05      	ldr	r3, [sp, #20]
 8018ade:	465a      	mov	r2, fp
 8018ae0:	4631      	mov	r1, r6
 8018ae2:	4628      	mov	r0, r5
 8018ae4:	47b8      	blx	r7
 8018ae6:	3001      	adds	r0, #1
 8018ae8:	f43f af12 	beq.w	8018910 <_printf_float+0x98>
 8018aec:	f04f 0a00 	mov.w	sl, #0
 8018af0:	f104 0b1a 	add.w	fp, r4, #26
 8018af4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018af6:	425b      	negs	r3, r3
 8018af8:	4553      	cmp	r3, sl
 8018afa:	dc01      	bgt.n	8018b00 <_printf_float+0x288>
 8018afc:	464b      	mov	r3, r9
 8018afe:	e794      	b.n	8018a2a <_printf_float+0x1b2>
 8018b00:	2301      	movs	r3, #1
 8018b02:	465a      	mov	r2, fp
 8018b04:	4631      	mov	r1, r6
 8018b06:	4628      	mov	r0, r5
 8018b08:	47b8      	blx	r7
 8018b0a:	3001      	adds	r0, #1
 8018b0c:	f43f af00 	beq.w	8018910 <_printf_float+0x98>
 8018b10:	f10a 0a01 	add.w	sl, sl, #1
 8018b14:	e7ee      	b.n	8018af4 <_printf_float+0x27c>
 8018b16:	bf00      	nop
 8018b18:	ffffffff 	.word	0xffffffff
 8018b1c:	7fefffff 	.word	0x7fefffff
 8018b20:	0801b6d3 	.word	0x0801b6d3
 8018b24:	0801b6cf 	.word	0x0801b6cf
 8018b28:	0801b6db 	.word	0x0801b6db
 8018b2c:	0801b6d7 	.word	0x0801b6d7
 8018b30:	0801b6df 	.word	0x0801b6df
 8018b34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018b36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8018b3a:	4553      	cmp	r3, sl
 8018b3c:	bfa8      	it	ge
 8018b3e:	4653      	movge	r3, sl
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	4699      	mov	r9, r3
 8018b44:	dc37      	bgt.n	8018bb6 <_printf_float+0x33e>
 8018b46:	2300      	movs	r3, #0
 8018b48:	9307      	str	r3, [sp, #28]
 8018b4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018b4e:	f104 021a 	add.w	r2, r4, #26
 8018b52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018b54:	9907      	ldr	r1, [sp, #28]
 8018b56:	9306      	str	r3, [sp, #24]
 8018b58:	eba3 0309 	sub.w	r3, r3, r9
 8018b5c:	428b      	cmp	r3, r1
 8018b5e:	dc31      	bgt.n	8018bc4 <_printf_float+0x34c>
 8018b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b62:	459a      	cmp	sl, r3
 8018b64:	dc3b      	bgt.n	8018bde <_printf_float+0x366>
 8018b66:	6823      	ldr	r3, [r4, #0]
 8018b68:	07da      	lsls	r2, r3, #31
 8018b6a:	d438      	bmi.n	8018bde <_printf_float+0x366>
 8018b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b6e:	ebaa 0903 	sub.w	r9, sl, r3
 8018b72:	9b06      	ldr	r3, [sp, #24]
 8018b74:	ebaa 0303 	sub.w	r3, sl, r3
 8018b78:	4599      	cmp	r9, r3
 8018b7a:	bfa8      	it	ge
 8018b7c:	4699      	movge	r9, r3
 8018b7e:	f1b9 0f00 	cmp.w	r9, #0
 8018b82:	dc34      	bgt.n	8018bee <_printf_float+0x376>
 8018b84:	f04f 0800 	mov.w	r8, #0
 8018b88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018b8c:	f104 0b1a 	add.w	fp, r4, #26
 8018b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b92:	ebaa 0303 	sub.w	r3, sl, r3
 8018b96:	eba3 0309 	sub.w	r3, r3, r9
 8018b9a:	4543      	cmp	r3, r8
 8018b9c:	f77f af76 	ble.w	8018a8c <_printf_float+0x214>
 8018ba0:	2301      	movs	r3, #1
 8018ba2:	465a      	mov	r2, fp
 8018ba4:	4631      	mov	r1, r6
 8018ba6:	4628      	mov	r0, r5
 8018ba8:	47b8      	blx	r7
 8018baa:	3001      	adds	r0, #1
 8018bac:	f43f aeb0 	beq.w	8018910 <_printf_float+0x98>
 8018bb0:	f108 0801 	add.w	r8, r8, #1
 8018bb4:	e7ec      	b.n	8018b90 <_printf_float+0x318>
 8018bb6:	4642      	mov	r2, r8
 8018bb8:	4631      	mov	r1, r6
 8018bba:	4628      	mov	r0, r5
 8018bbc:	47b8      	blx	r7
 8018bbe:	3001      	adds	r0, #1
 8018bc0:	d1c1      	bne.n	8018b46 <_printf_float+0x2ce>
 8018bc2:	e6a5      	b.n	8018910 <_printf_float+0x98>
 8018bc4:	2301      	movs	r3, #1
 8018bc6:	4631      	mov	r1, r6
 8018bc8:	4628      	mov	r0, r5
 8018bca:	9206      	str	r2, [sp, #24]
 8018bcc:	47b8      	blx	r7
 8018bce:	3001      	adds	r0, #1
 8018bd0:	f43f ae9e 	beq.w	8018910 <_printf_float+0x98>
 8018bd4:	9b07      	ldr	r3, [sp, #28]
 8018bd6:	9a06      	ldr	r2, [sp, #24]
 8018bd8:	3301      	adds	r3, #1
 8018bda:	9307      	str	r3, [sp, #28]
 8018bdc:	e7b9      	b.n	8018b52 <_printf_float+0x2da>
 8018bde:	9b05      	ldr	r3, [sp, #20]
 8018be0:	465a      	mov	r2, fp
 8018be2:	4631      	mov	r1, r6
 8018be4:	4628      	mov	r0, r5
 8018be6:	47b8      	blx	r7
 8018be8:	3001      	adds	r0, #1
 8018bea:	d1bf      	bne.n	8018b6c <_printf_float+0x2f4>
 8018bec:	e690      	b.n	8018910 <_printf_float+0x98>
 8018bee:	9a06      	ldr	r2, [sp, #24]
 8018bf0:	464b      	mov	r3, r9
 8018bf2:	4442      	add	r2, r8
 8018bf4:	4631      	mov	r1, r6
 8018bf6:	4628      	mov	r0, r5
 8018bf8:	47b8      	blx	r7
 8018bfa:	3001      	adds	r0, #1
 8018bfc:	d1c2      	bne.n	8018b84 <_printf_float+0x30c>
 8018bfe:	e687      	b.n	8018910 <_printf_float+0x98>
 8018c00:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8018c04:	f1b9 0f01 	cmp.w	r9, #1
 8018c08:	dc01      	bgt.n	8018c0e <_printf_float+0x396>
 8018c0a:	07db      	lsls	r3, r3, #31
 8018c0c:	d536      	bpl.n	8018c7c <_printf_float+0x404>
 8018c0e:	2301      	movs	r3, #1
 8018c10:	4642      	mov	r2, r8
 8018c12:	4631      	mov	r1, r6
 8018c14:	4628      	mov	r0, r5
 8018c16:	47b8      	blx	r7
 8018c18:	3001      	adds	r0, #1
 8018c1a:	f43f ae79 	beq.w	8018910 <_printf_float+0x98>
 8018c1e:	9b05      	ldr	r3, [sp, #20]
 8018c20:	465a      	mov	r2, fp
 8018c22:	4631      	mov	r1, r6
 8018c24:	4628      	mov	r0, r5
 8018c26:	47b8      	blx	r7
 8018c28:	3001      	adds	r0, #1
 8018c2a:	f43f ae71 	beq.w	8018910 <_printf_float+0x98>
 8018c2e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8018c32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c3a:	f109 39ff 	add.w	r9, r9, #4294967295
 8018c3e:	d018      	beq.n	8018c72 <_printf_float+0x3fa>
 8018c40:	464b      	mov	r3, r9
 8018c42:	f108 0201 	add.w	r2, r8, #1
 8018c46:	4631      	mov	r1, r6
 8018c48:	4628      	mov	r0, r5
 8018c4a:	47b8      	blx	r7
 8018c4c:	3001      	adds	r0, #1
 8018c4e:	d10c      	bne.n	8018c6a <_printf_float+0x3f2>
 8018c50:	e65e      	b.n	8018910 <_printf_float+0x98>
 8018c52:	2301      	movs	r3, #1
 8018c54:	465a      	mov	r2, fp
 8018c56:	4631      	mov	r1, r6
 8018c58:	4628      	mov	r0, r5
 8018c5a:	47b8      	blx	r7
 8018c5c:	3001      	adds	r0, #1
 8018c5e:	f43f ae57 	beq.w	8018910 <_printf_float+0x98>
 8018c62:	f108 0801 	add.w	r8, r8, #1
 8018c66:	45c8      	cmp	r8, r9
 8018c68:	dbf3      	blt.n	8018c52 <_printf_float+0x3da>
 8018c6a:	4653      	mov	r3, sl
 8018c6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8018c70:	e6dc      	b.n	8018a2c <_printf_float+0x1b4>
 8018c72:	f04f 0800 	mov.w	r8, #0
 8018c76:	f104 0b1a 	add.w	fp, r4, #26
 8018c7a:	e7f4      	b.n	8018c66 <_printf_float+0x3ee>
 8018c7c:	2301      	movs	r3, #1
 8018c7e:	4642      	mov	r2, r8
 8018c80:	e7e1      	b.n	8018c46 <_printf_float+0x3ce>
 8018c82:	2301      	movs	r3, #1
 8018c84:	464a      	mov	r2, r9
 8018c86:	4631      	mov	r1, r6
 8018c88:	4628      	mov	r0, r5
 8018c8a:	47b8      	blx	r7
 8018c8c:	3001      	adds	r0, #1
 8018c8e:	f43f ae3f 	beq.w	8018910 <_printf_float+0x98>
 8018c92:	f108 0801 	add.w	r8, r8, #1
 8018c96:	68e3      	ldr	r3, [r4, #12]
 8018c98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018c9a:	1a5b      	subs	r3, r3, r1
 8018c9c:	4543      	cmp	r3, r8
 8018c9e:	dcf0      	bgt.n	8018c82 <_printf_float+0x40a>
 8018ca0:	e6f8      	b.n	8018a94 <_printf_float+0x21c>
 8018ca2:	f04f 0800 	mov.w	r8, #0
 8018ca6:	f104 0919 	add.w	r9, r4, #25
 8018caa:	e7f4      	b.n	8018c96 <_printf_float+0x41e>

08018cac <_printf_common>:
 8018cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cb0:	4616      	mov	r6, r2
 8018cb2:	4698      	mov	r8, r3
 8018cb4:	688a      	ldr	r2, [r1, #8]
 8018cb6:	690b      	ldr	r3, [r1, #16]
 8018cb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018cbc:	4293      	cmp	r3, r2
 8018cbe:	bfb8      	it	lt
 8018cc0:	4613      	movlt	r3, r2
 8018cc2:	6033      	str	r3, [r6, #0]
 8018cc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018cc8:	4607      	mov	r7, r0
 8018cca:	460c      	mov	r4, r1
 8018ccc:	b10a      	cbz	r2, 8018cd2 <_printf_common+0x26>
 8018cce:	3301      	adds	r3, #1
 8018cd0:	6033      	str	r3, [r6, #0]
 8018cd2:	6823      	ldr	r3, [r4, #0]
 8018cd4:	0699      	lsls	r1, r3, #26
 8018cd6:	bf42      	ittt	mi
 8018cd8:	6833      	ldrmi	r3, [r6, #0]
 8018cda:	3302      	addmi	r3, #2
 8018cdc:	6033      	strmi	r3, [r6, #0]
 8018cde:	6825      	ldr	r5, [r4, #0]
 8018ce0:	f015 0506 	ands.w	r5, r5, #6
 8018ce4:	d106      	bne.n	8018cf4 <_printf_common+0x48>
 8018ce6:	f104 0a19 	add.w	sl, r4, #25
 8018cea:	68e3      	ldr	r3, [r4, #12]
 8018cec:	6832      	ldr	r2, [r6, #0]
 8018cee:	1a9b      	subs	r3, r3, r2
 8018cf0:	42ab      	cmp	r3, r5
 8018cf2:	dc26      	bgt.n	8018d42 <_printf_common+0x96>
 8018cf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018cf8:	6822      	ldr	r2, [r4, #0]
 8018cfa:	3b00      	subs	r3, #0
 8018cfc:	bf18      	it	ne
 8018cfe:	2301      	movne	r3, #1
 8018d00:	0692      	lsls	r2, r2, #26
 8018d02:	d42b      	bmi.n	8018d5c <_printf_common+0xb0>
 8018d04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018d08:	4641      	mov	r1, r8
 8018d0a:	4638      	mov	r0, r7
 8018d0c:	47c8      	blx	r9
 8018d0e:	3001      	adds	r0, #1
 8018d10:	d01e      	beq.n	8018d50 <_printf_common+0xa4>
 8018d12:	6823      	ldr	r3, [r4, #0]
 8018d14:	6922      	ldr	r2, [r4, #16]
 8018d16:	f003 0306 	and.w	r3, r3, #6
 8018d1a:	2b04      	cmp	r3, #4
 8018d1c:	bf02      	ittt	eq
 8018d1e:	68e5      	ldreq	r5, [r4, #12]
 8018d20:	6833      	ldreq	r3, [r6, #0]
 8018d22:	1aed      	subeq	r5, r5, r3
 8018d24:	68a3      	ldr	r3, [r4, #8]
 8018d26:	bf0c      	ite	eq
 8018d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018d2c:	2500      	movne	r5, #0
 8018d2e:	4293      	cmp	r3, r2
 8018d30:	bfc4      	itt	gt
 8018d32:	1a9b      	subgt	r3, r3, r2
 8018d34:	18ed      	addgt	r5, r5, r3
 8018d36:	2600      	movs	r6, #0
 8018d38:	341a      	adds	r4, #26
 8018d3a:	42b5      	cmp	r5, r6
 8018d3c:	d11a      	bne.n	8018d74 <_printf_common+0xc8>
 8018d3e:	2000      	movs	r0, #0
 8018d40:	e008      	b.n	8018d54 <_printf_common+0xa8>
 8018d42:	2301      	movs	r3, #1
 8018d44:	4652      	mov	r2, sl
 8018d46:	4641      	mov	r1, r8
 8018d48:	4638      	mov	r0, r7
 8018d4a:	47c8      	blx	r9
 8018d4c:	3001      	adds	r0, #1
 8018d4e:	d103      	bne.n	8018d58 <_printf_common+0xac>
 8018d50:	f04f 30ff 	mov.w	r0, #4294967295
 8018d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d58:	3501      	adds	r5, #1
 8018d5a:	e7c6      	b.n	8018cea <_printf_common+0x3e>
 8018d5c:	18e1      	adds	r1, r4, r3
 8018d5e:	1c5a      	adds	r2, r3, #1
 8018d60:	2030      	movs	r0, #48	@ 0x30
 8018d62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018d66:	4422      	add	r2, r4
 8018d68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018d6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018d70:	3302      	adds	r3, #2
 8018d72:	e7c7      	b.n	8018d04 <_printf_common+0x58>
 8018d74:	2301      	movs	r3, #1
 8018d76:	4622      	mov	r2, r4
 8018d78:	4641      	mov	r1, r8
 8018d7a:	4638      	mov	r0, r7
 8018d7c:	47c8      	blx	r9
 8018d7e:	3001      	adds	r0, #1
 8018d80:	d0e6      	beq.n	8018d50 <_printf_common+0xa4>
 8018d82:	3601      	adds	r6, #1
 8018d84:	e7d9      	b.n	8018d3a <_printf_common+0x8e>
	...

08018d88 <_printf_i>:
 8018d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018d8c:	7e0f      	ldrb	r7, [r1, #24]
 8018d8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018d90:	2f78      	cmp	r7, #120	@ 0x78
 8018d92:	4691      	mov	r9, r2
 8018d94:	4680      	mov	r8, r0
 8018d96:	460c      	mov	r4, r1
 8018d98:	469a      	mov	sl, r3
 8018d9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018d9e:	d807      	bhi.n	8018db0 <_printf_i+0x28>
 8018da0:	2f62      	cmp	r7, #98	@ 0x62
 8018da2:	d80a      	bhi.n	8018dba <_printf_i+0x32>
 8018da4:	2f00      	cmp	r7, #0
 8018da6:	f000 80d1 	beq.w	8018f4c <_printf_i+0x1c4>
 8018daa:	2f58      	cmp	r7, #88	@ 0x58
 8018dac:	f000 80b8 	beq.w	8018f20 <_printf_i+0x198>
 8018db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018db4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018db8:	e03a      	b.n	8018e30 <_printf_i+0xa8>
 8018dba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018dbe:	2b15      	cmp	r3, #21
 8018dc0:	d8f6      	bhi.n	8018db0 <_printf_i+0x28>
 8018dc2:	a101      	add	r1, pc, #4	@ (adr r1, 8018dc8 <_printf_i+0x40>)
 8018dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018dc8:	08018e21 	.word	0x08018e21
 8018dcc:	08018e35 	.word	0x08018e35
 8018dd0:	08018db1 	.word	0x08018db1
 8018dd4:	08018db1 	.word	0x08018db1
 8018dd8:	08018db1 	.word	0x08018db1
 8018ddc:	08018db1 	.word	0x08018db1
 8018de0:	08018e35 	.word	0x08018e35
 8018de4:	08018db1 	.word	0x08018db1
 8018de8:	08018db1 	.word	0x08018db1
 8018dec:	08018db1 	.word	0x08018db1
 8018df0:	08018db1 	.word	0x08018db1
 8018df4:	08018f33 	.word	0x08018f33
 8018df8:	08018e5f 	.word	0x08018e5f
 8018dfc:	08018eed 	.word	0x08018eed
 8018e00:	08018db1 	.word	0x08018db1
 8018e04:	08018db1 	.word	0x08018db1
 8018e08:	08018f55 	.word	0x08018f55
 8018e0c:	08018db1 	.word	0x08018db1
 8018e10:	08018e5f 	.word	0x08018e5f
 8018e14:	08018db1 	.word	0x08018db1
 8018e18:	08018db1 	.word	0x08018db1
 8018e1c:	08018ef5 	.word	0x08018ef5
 8018e20:	6833      	ldr	r3, [r6, #0]
 8018e22:	1d1a      	adds	r2, r3, #4
 8018e24:	681b      	ldr	r3, [r3, #0]
 8018e26:	6032      	str	r2, [r6, #0]
 8018e28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018e2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018e30:	2301      	movs	r3, #1
 8018e32:	e09c      	b.n	8018f6e <_printf_i+0x1e6>
 8018e34:	6833      	ldr	r3, [r6, #0]
 8018e36:	6820      	ldr	r0, [r4, #0]
 8018e38:	1d19      	adds	r1, r3, #4
 8018e3a:	6031      	str	r1, [r6, #0]
 8018e3c:	0606      	lsls	r6, r0, #24
 8018e3e:	d501      	bpl.n	8018e44 <_printf_i+0xbc>
 8018e40:	681d      	ldr	r5, [r3, #0]
 8018e42:	e003      	b.n	8018e4c <_printf_i+0xc4>
 8018e44:	0645      	lsls	r5, r0, #25
 8018e46:	d5fb      	bpl.n	8018e40 <_printf_i+0xb8>
 8018e48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018e4c:	2d00      	cmp	r5, #0
 8018e4e:	da03      	bge.n	8018e58 <_printf_i+0xd0>
 8018e50:	232d      	movs	r3, #45	@ 0x2d
 8018e52:	426d      	negs	r5, r5
 8018e54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018e58:	4858      	ldr	r0, [pc, #352]	@ (8018fbc <_printf_i+0x234>)
 8018e5a:	230a      	movs	r3, #10
 8018e5c:	e011      	b.n	8018e82 <_printf_i+0xfa>
 8018e5e:	6821      	ldr	r1, [r4, #0]
 8018e60:	6833      	ldr	r3, [r6, #0]
 8018e62:	0608      	lsls	r0, r1, #24
 8018e64:	f853 5b04 	ldr.w	r5, [r3], #4
 8018e68:	d402      	bmi.n	8018e70 <_printf_i+0xe8>
 8018e6a:	0649      	lsls	r1, r1, #25
 8018e6c:	bf48      	it	mi
 8018e6e:	b2ad      	uxthmi	r5, r5
 8018e70:	2f6f      	cmp	r7, #111	@ 0x6f
 8018e72:	4852      	ldr	r0, [pc, #328]	@ (8018fbc <_printf_i+0x234>)
 8018e74:	6033      	str	r3, [r6, #0]
 8018e76:	bf14      	ite	ne
 8018e78:	230a      	movne	r3, #10
 8018e7a:	2308      	moveq	r3, #8
 8018e7c:	2100      	movs	r1, #0
 8018e7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018e82:	6866      	ldr	r6, [r4, #4]
 8018e84:	60a6      	str	r6, [r4, #8]
 8018e86:	2e00      	cmp	r6, #0
 8018e88:	db05      	blt.n	8018e96 <_printf_i+0x10e>
 8018e8a:	6821      	ldr	r1, [r4, #0]
 8018e8c:	432e      	orrs	r6, r5
 8018e8e:	f021 0104 	bic.w	r1, r1, #4
 8018e92:	6021      	str	r1, [r4, #0]
 8018e94:	d04b      	beq.n	8018f2e <_printf_i+0x1a6>
 8018e96:	4616      	mov	r6, r2
 8018e98:	fbb5 f1f3 	udiv	r1, r5, r3
 8018e9c:	fb03 5711 	mls	r7, r3, r1, r5
 8018ea0:	5dc7      	ldrb	r7, [r0, r7]
 8018ea2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018ea6:	462f      	mov	r7, r5
 8018ea8:	42bb      	cmp	r3, r7
 8018eaa:	460d      	mov	r5, r1
 8018eac:	d9f4      	bls.n	8018e98 <_printf_i+0x110>
 8018eae:	2b08      	cmp	r3, #8
 8018eb0:	d10b      	bne.n	8018eca <_printf_i+0x142>
 8018eb2:	6823      	ldr	r3, [r4, #0]
 8018eb4:	07df      	lsls	r7, r3, #31
 8018eb6:	d508      	bpl.n	8018eca <_printf_i+0x142>
 8018eb8:	6923      	ldr	r3, [r4, #16]
 8018eba:	6861      	ldr	r1, [r4, #4]
 8018ebc:	4299      	cmp	r1, r3
 8018ebe:	bfde      	ittt	le
 8018ec0:	2330      	movle	r3, #48	@ 0x30
 8018ec2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018ec6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018eca:	1b92      	subs	r2, r2, r6
 8018ecc:	6122      	str	r2, [r4, #16]
 8018ece:	f8cd a000 	str.w	sl, [sp]
 8018ed2:	464b      	mov	r3, r9
 8018ed4:	aa03      	add	r2, sp, #12
 8018ed6:	4621      	mov	r1, r4
 8018ed8:	4640      	mov	r0, r8
 8018eda:	f7ff fee7 	bl	8018cac <_printf_common>
 8018ede:	3001      	adds	r0, #1
 8018ee0:	d14a      	bne.n	8018f78 <_printf_i+0x1f0>
 8018ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8018ee6:	b004      	add	sp, #16
 8018ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018eec:	6823      	ldr	r3, [r4, #0]
 8018eee:	f043 0320 	orr.w	r3, r3, #32
 8018ef2:	6023      	str	r3, [r4, #0]
 8018ef4:	4832      	ldr	r0, [pc, #200]	@ (8018fc0 <_printf_i+0x238>)
 8018ef6:	2778      	movs	r7, #120	@ 0x78
 8018ef8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018efc:	6823      	ldr	r3, [r4, #0]
 8018efe:	6831      	ldr	r1, [r6, #0]
 8018f00:	061f      	lsls	r7, r3, #24
 8018f02:	f851 5b04 	ldr.w	r5, [r1], #4
 8018f06:	d402      	bmi.n	8018f0e <_printf_i+0x186>
 8018f08:	065f      	lsls	r7, r3, #25
 8018f0a:	bf48      	it	mi
 8018f0c:	b2ad      	uxthmi	r5, r5
 8018f0e:	6031      	str	r1, [r6, #0]
 8018f10:	07d9      	lsls	r1, r3, #31
 8018f12:	bf44      	itt	mi
 8018f14:	f043 0320 	orrmi.w	r3, r3, #32
 8018f18:	6023      	strmi	r3, [r4, #0]
 8018f1a:	b11d      	cbz	r5, 8018f24 <_printf_i+0x19c>
 8018f1c:	2310      	movs	r3, #16
 8018f1e:	e7ad      	b.n	8018e7c <_printf_i+0xf4>
 8018f20:	4826      	ldr	r0, [pc, #152]	@ (8018fbc <_printf_i+0x234>)
 8018f22:	e7e9      	b.n	8018ef8 <_printf_i+0x170>
 8018f24:	6823      	ldr	r3, [r4, #0]
 8018f26:	f023 0320 	bic.w	r3, r3, #32
 8018f2a:	6023      	str	r3, [r4, #0]
 8018f2c:	e7f6      	b.n	8018f1c <_printf_i+0x194>
 8018f2e:	4616      	mov	r6, r2
 8018f30:	e7bd      	b.n	8018eae <_printf_i+0x126>
 8018f32:	6833      	ldr	r3, [r6, #0]
 8018f34:	6825      	ldr	r5, [r4, #0]
 8018f36:	6961      	ldr	r1, [r4, #20]
 8018f38:	1d18      	adds	r0, r3, #4
 8018f3a:	6030      	str	r0, [r6, #0]
 8018f3c:	062e      	lsls	r6, r5, #24
 8018f3e:	681b      	ldr	r3, [r3, #0]
 8018f40:	d501      	bpl.n	8018f46 <_printf_i+0x1be>
 8018f42:	6019      	str	r1, [r3, #0]
 8018f44:	e002      	b.n	8018f4c <_printf_i+0x1c4>
 8018f46:	0668      	lsls	r0, r5, #25
 8018f48:	d5fb      	bpl.n	8018f42 <_printf_i+0x1ba>
 8018f4a:	8019      	strh	r1, [r3, #0]
 8018f4c:	2300      	movs	r3, #0
 8018f4e:	6123      	str	r3, [r4, #16]
 8018f50:	4616      	mov	r6, r2
 8018f52:	e7bc      	b.n	8018ece <_printf_i+0x146>
 8018f54:	6833      	ldr	r3, [r6, #0]
 8018f56:	1d1a      	adds	r2, r3, #4
 8018f58:	6032      	str	r2, [r6, #0]
 8018f5a:	681e      	ldr	r6, [r3, #0]
 8018f5c:	6862      	ldr	r2, [r4, #4]
 8018f5e:	2100      	movs	r1, #0
 8018f60:	4630      	mov	r0, r6
 8018f62:	f7e7 f9bd 	bl	80002e0 <memchr>
 8018f66:	b108      	cbz	r0, 8018f6c <_printf_i+0x1e4>
 8018f68:	1b80      	subs	r0, r0, r6
 8018f6a:	6060      	str	r0, [r4, #4]
 8018f6c:	6863      	ldr	r3, [r4, #4]
 8018f6e:	6123      	str	r3, [r4, #16]
 8018f70:	2300      	movs	r3, #0
 8018f72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018f76:	e7aa      	b.n	8018ece <_printf_i+0x146>
 8018f78:	6923      	ldr	r3, [r4, #16]
 8018f7a:	4632      	mov	r2, r6
 8018f7c:	4649      	mov	r1, r9
 8018f7e:	4640      	mov	r0, r8
 8018f80:	47d0      	blx	sl
 8018f82:	3001      	adds	r0, #1
 8018f84:	d0ad      	beq.n	8018ee2 <_printf_i+0x15a>
 8018f86:	6823      	ldr	r3, [r4, #0]
 8018f88:	079b      	lsls	r3, r3, #30
 8018f8a:	d413      	bmi.n	8018fb4 <_printf_i+0x22c>
 8018f8c:	68e0      	ldr	r0, [r4, #12]
 8018f8e:	9b03      	ldr	r3, [sp, #12]
 8018f90:	4298      	cmp	r0, r3
 8018f92:	bfb8      	it	lt
 8018f94:	4618      	movlt	r0, r3
 8018f96:	e7a6      	b.n	8018ee6 <_printf_i+0x15e>
 8018f98:	2301      	movs	r3, #1
 8018f9a:	4632      	mov	r2, r6
 8018f9c:	4649      	mov	r1, r9
 8018f9e:	4640      	mov	r0, r8
 8018fa0:	47d0      	blx	sl
 8018fa2:	3001      	adds	r0, #1
 8018fa4:	d09d      	beq.n	8018ee2 <_printf_i+0x15a>
 8018fa6:	3501      	adds	r5, #1
 8018fa8:	68e3      	ldr	r3, [r4, #12]
 8018faa:	9903      	ldr	r1, [sp, #12]
 8018fac:	1a5b      	subs	r3, r3, r1
 8018fae:	42ab      	cmp	r3, r5
 8018fb0:	dcf2      	bgt.n	8018f98 <_printf_i+0x210>
 8018fb2:	e7eb      	b.n	8018f8c <_printf_i+0x204>
 8018fb4:	2500      	movs	r5, #0
 8018fb6:	f104 0619 	add.w	r6, r4, #25
 8018fba:	e7f5      	b.n	8018fa8 <_printf_i+0x220>
 8018fbc:	0801b6e1 	.word	0x0801b6e1
 8018fc0:	0801b6f2 	.word	0x0801b6f2

08018fc4 <std>:
 8018fc4:	2300      	movs	r3, #0
 8018fc6:	b510      	push	{r4, lr}
 8018fc8:	4604      	mov	r4, r0
 8018fca:	e9c0 3300 	strd	r3, r3, [r0]
 8018fce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018fd2:	6083      	str	r3, [r0, #8]
 8018fd4:	8181      	strh	r1, [r0, #12]
 8018fd6:	6643      	str	r3, [r0, #100]	@ 0x64
 8018fd8:	81c2      	strh	r2, [r0, #14]
 8018fda:	6183      	str	r3, [r0, #24]
 8018fdc:	4619      	mov	r1, r3
 8018fde:	2208      	movs	r2, #8
 8018fe0:	305c      	adds	r0, #92	@ 0x5c
 8018fe2:	f000 f916 	bl	8019212 <memset>
 8018fe6:	4b0d      	ldr	r3, [pc, #52]	@ (801901c <std+0x58>)
 8018fe8:	6263      	str	r3, [r4, #36]	@ 0x24
 8018fea:	4b0d      	ldr	r3, [pc, #52]	@ (8019020 <std+0x5c>)
 8018fec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018fee:	4b0d      	ldr	r3, [pc, #52]	@ (8019024 <std+0x60>)
 8018ff0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8019028 <std+0x64>)
 8018ff4:	6323      	str	r3, [r4, #48]	@ 0x30
 8018ff6:	4b0d      	ldr	r3, [pc, #52]	@ (801902c <std+0x68>)
 8018ff8:	6224      	str	r4, [r4, #32]
 8018ffa:	429c      	cmp	r4, r3
 8018ffc:	d006      	beq.n	801900c <std+0x48>
 8018ffe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019002:	4294      	cmp	r4, r2
 8019004:	d002      	beq.n	801900c <std+0x48>
 8019006:	33d0      	adds	r3, #208	@ 0xd0
 8019008:	429c      	cmp	r4, r3
 801900a:	d105      	bne.n	8019018 <std+0x54>
 801900c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019014:	f000 b98a 	b.w	801932c <__retarget_lock_init_recursive>
 8019018:	bd10      	pop	{r4, pc}
 801901a:	bf00      	nop
 801901c:	0801918d 	.word	0x0801918d
 8019020:	080191af 	.word	0x080191af
 8019024:	080191e7 	.word	0x080191e7
 8019028:	0801920b 	.word	0x0801920b
 801902c:	24027960 	.word	0x24027960

08019030 <stdio_exit_handler>:
 8019030:	4a02      	ldr	r2, [pc, #8]	@ (801903c <stdio_exit_handler+0xc>)
 8019032:	4903      	ldr	r1, [pc, #12]	@ (8019040 <stdio_exit_handler+0x10>)
 8019034:	4803      	ldr	r0, [pc, #12]	@ (8019044 <stdio_exit_handler+0x14>)
 8019036:	f000 b869 	b.w	801910c <_fwalk_sglue>
 801903a:	bf00      	nop
 801903c:	2400011c 	.word	0x2400011c
 8019040:	0801aa9d 	.word	0x0801aa9d
 8019044:	2400012c 	.word	0x2400012c

08019048 <cleanup_stdio>:
 8019048:	6841      	ldr	r1, [r0, #4]
 801904a:	4b0c      	ldr	r3, [pc, #48]	@ (801907c <cleanup_stdio+0x34>)
 801904c:	4299      	cmp	r1, r3
 801904e:	b510      	push	{r4, lr}
 8019050:	4604      	mov	r4, r0
 8019052:	d001      	beq.n	8019058 <cleanup_stdio+0x10>
 8019054:	f001 fd22 	bl	801aa9c <_fflush_r>
 8019058:	68a1      	ldr	r1, [r4, #8]
 801905a:	4b09      	ldr	r3, [pc, #36]	@ (8019080 <cleanup_stdio+0x38>)
 801905c:	4299      	cmp	r1, r3
 801905e:	d002      	beq.n	8019066 <cleanup_stdio+0x1e>
 8019060:	4620      	mov	r0, r4
 8019062:	f001 fd1b 	bl	801aa9c <_fflush_r>
 8019066:	68e1      	ldr	r1, [r4, #12]
 8019068:	4b06      	ldr	r3, [pc, #24]	@ (8019084 <cleanup_stdio+0x3c>)
 801906a:	4299      	cmp	r1, r3
 801906c:	d004      	beq.n	8019078 <cleanup_stdio+0x30>
 801906e:	4620      	mov	r0, r4
 8019070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019074:	f001 bd12 	b.w	801aa9c <_fflush_r>
 8019078:	bd10      	pop	{r4, pc}
 801907a:	bf00      	nop
 801907c:	24027960 	.word	0x24027960
 8019080:	240279c8 	.word	0x240279c8
 8019084:	24027a30 	.word	0x24027a30

08019088 <global_stdio_init.part.0>:
 8019088:	b510      	push	{r4, lr}
 801908a:	4b0b      	ldr	r3, [pc, #44]	@ (80190b8 <global_stdio_init.part.0+0x30>)
 801908c:	4c0b      	ldr	r4, [pc, #44]	@ (80190bc <global_stdio_init.part.0+0x34>)
 801908e:	4a0c      	ldr	r2, [pc, #48]	@ (80190c0 <global_stdio_init.part.0+0x38>)
 8019090:	601a      	str	r2, [r3, #0]
 8019092:	4620      	mov	r0, r4
 8019094:	2200      	movs	r2, #0
 8019096:	2104      	movs	r1, #4
 8019098:	f7ff ff94 	bl	8018fc4 <std>
 801909c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80190a0:	2201      	movs	r2, #1
 80190a2:	2109      	movs	r1, #9
 80190a4:	f7ff ff8e 	bl	8018fc4 <std>
 80190a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80190ac:	2202      	movs	r2, #2
 80190ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190b2:	2112      	movs	r1, #18
 80190b4:	f7ff bf86 	b.w	8018fc4 <std>
 80190b8:	24027a98 	.word	0x24027a98
 80190bc:	24027960 	.word	0x24027960
 80190c0:	08019031 	.word	0x08019031

080190c4 <__sfp_lock_acquire>:
 80190c4:	4801      	ldr	r0, [pc, #4]	@ (80190cc <__sfp_lock_acquire+0x8>)
 80190c6:	f000 b932 	b.w	801932e <__retarget_lock_acquire_recursive>
 80190ca:	bf00      	nop
 80190cc:	24027aa1 	.word	0x24027aa1

080190d0 <__sfp_lock_release>:
 80190d0:	4801      	ldr	r0, [pc, #4]	@ (80190d8 <__sfp_lock_release+0x8>)
 80190d2:	f000 b92d 	b.w	8019330 <__retarget_lock_release_recursive>
 80190d6:	bf00      	nop
 80190d8:	24027aa1 	.word	0x24027aa1

080190dc <__sinit>:
 80190dc:	b510      	push	{r4, lr}
 80190de:	4604      	mov	r4, r0
 80190e0:	f7ff fff0 	bl	80190c4 <__sfp_lock_acquire>
 80190e4:	6a23      	ldr	r3, [r4, #32]
 80190e6:	b11b      	cbz	r3, 80190f0 <__sinit+0x14>
 80190e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190ec:	f7ff bff0 	b.w	80190d0 <__sfp_lock_release>
 80190f0:	4b04      	ldr	r3, [pc, #16]	@ (8019104 <__sinit+0x28>)
 80190f2:	6223      	str	r3, [r4, #32]
 80190f4:	4b04      	ldr	r3, [pc, #16]	@ (8019108 <__sinit+0x2c>)
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d1f5      	bne.n	80190e8 <__sinit+0xc>
 80190fc:	f7ff ffc4 	bl	8019088 <global_stdio_init.part.0>
 8019100:	e7f2      	b.n	80190e8 <__sinit+0xc>
 8019102:	bf00      	nop
 8019104:	08019049 	.word	0x08019049
 8019108:	24027a98 	.word	0x24027a98

0801910c <_fwalk_sglue>:
 801910c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019110:	4607      	mov	r7, r0
 8019112:	4688      	mov	r8, r1
 8019114:	4614      	mov	r4, r2
 8019116:	2600      	movs	r6, #0
 8019118:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801911c:	f1b9 0901 	subs.w	r9, r9, #1
 8019120:	d505      	bpl.n	801912e <_fwalk_sglue+0x22>
 8019122:	6824      	ldr	r4, [r4, #0]
 8019124:	2c00      	cmp	r4, #0
 8019126:	d1f7      	bne.n	8019118 <_fwalk_sglue+0xc>
 8019128:	4630      	mov	r0, r6
 801912a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801912e:	89ab      	ldrh	r3, [r5, #12]
 8019130:	2b01      	cmp	r3, #1
 8019132:	d907      	bls.n	8019144 <_fwalk_sglue+0x38>
 8019134:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019138:	3301      	adds	r3, #1
 801913a:	d003      	beq.n	8019144 <_fwalk_sglue+0x38>
 801913c:	4629      	mov	r1, r5
 801913e:	4638      	mov	r0, r7
 8019140:	47c0      	blx	r8
 8019142:	4306      	orrs	r6, r0
 8019144:	3568      	adds	r5, #104	@ 0x68
 8019146:	e7e9      	b.n	801911c <_fwalk_sglue+0x10>

08019148 <siprintf>:
 8019148:	b40e      	push	{r1, r2, r3}
 801914a:	b510      	push	{r4, lr}
 801914c:	b09d      	sub	sp, #116	@ 0x74
 801914e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8019150:	9002      	str	r0, [sp, #8]
 8019152:	9006      	str	r0, [sp, #24]
 8019154:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019158:	480a      	ldr	r0, [pc, #40]	@ (8019184 <siprintf+0x3c>)
 801915a:	9107      	str	r1, [sp, #28]
 801915c:	9104      	str	r1, [sp, #16]
 801915e:	490a      	ldr	r1, [pc, #40]	@ (8019188 <siprintf+0x40>)
 8019160:	f853 2b04 	ldr.w	r2, [r3], #4
 8019164:	9105      	str	r1, [sp, #20]
 8019166:	2400      	movs	r4, #0
 8019168:	a902      	add	r1, sp, #8
 801916a:	6800      	ldr	r0, [r0, #0]
 801916c:	9301      	str	r3, [sp, #4]
 801916e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8019170:	f001 fb14 	bl	801a79c <_svfiprintf_r>
 8019174:	9b02      	ldr	r3, [sp, #8]
 8019176:	701c      	strb	r4, [r3, #0]
 8019178:	b01d      	add	sp, #116	@ 0x74
 801917a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801917e:	b003      	add	sp, #12
 8019180:	4770      	bx	lr
 8019182:	bf00      	nop
 8019184:	24000128 	.word	0x24000128
 8019188:	ffff0208 	.word	0xffff0208

0801918c <__sread>:
 801918c:	b510      	push	{r4, lr}
 801918e:	460c      	mov	r4, r1
 8019190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019194:	f000 f86c 	bl	8019270 <_read_r>
 8019198:	2800      	cmp	r0, #0
 801919a:	bfab      	itete	ge
 801919c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801919e:	89a3      	ldrhlt	r3, [r4, #12]
 80191a0:	181b      	addge	r3, r3, r0
 80191a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80191a6:	bfac      	ite	ge
 80191a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80191aa:	81a3      	strhlt	r3, [r4, #12]
 80191ac:	bd10      	pop	{r4, pc}

080191ae <__swrite>:
 80191ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191b2:	461f      	mov	r7, r3
 80191b4:	898b      	ldrh	r3, [r1, #12]
 80191b6:	05db      	lsls	r3, r3, #23
 80191b8:	4605      	mov	r5, r0
 80191ba:	460c      	mov	r4, r1
 80191bc:	4616      	mov	r6, r2
 80191be:	d505      	bpl.n	80191cc <__swrite+0x1e>
 80191c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191c4:	2302      	movs	r3, #2
 80191c6:	2200      	movs	r2, #0
 80191c8:	f000 f840 	bl	801924c <_lseek_r>
 80191cc:	89a3      	ldrh	r3, [r4, #12]
 80191ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80191d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80191d6:	81a3      	strh	r3, [r4, #12]
 80191d8:	4632      	mov	r2, r6
 80191da:	463b      	mov	r3, r7
 80191dc:	4628      	mov	r0, r5
 80191de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80191e2:	f000 b867 	b.w	80192b4 <_write_r>

080191e6 <__sseek>:
 80191e6:	b510      	push	{r4, lr}
 80191e8:	460c      	mov	r4, r1
 80191ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191ee:	f000 f82d 	bl	801924c <_lseek_r>
 80191f2:	1c43      	adds	r3, r0, #1
 80191f4:	89a3      	ldrh	r3, [r4, #12]
 80191f6:	bf15      	itete	ne
 80191f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80191fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80191fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019202:	81a3      	strheq	r3, [r4, #12]
 8019204:	bf18      	it	ne
 8019206:	81a3      	strhne	r3, [r4, #12]
 8019208:	bd10      	pop	{r4, pc}

0801920a <__sclose>:
 801920a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801920e:	f000 b80d 	b.w	801922c <_close_r>

08019212 <memset>:
 8019212:	4402      	add	r2, r0
 8019214:	4603      	mov	r3, r0
 8019216:	4293      	cmp	r3, r2
 8019218:	d100      	bne.n	801921c <memset+0xa>
 801921a:	4770      	bx	lr
 801921c:	f803 1b01 	strb.w	r1, [r3], #1
 8019220:	e7f9      	b.n	8019216 <memset+0x4>
	...

08019224 <_localeconv_r>:
 8019224:	4800      	ldr	r0, [pc, #0]	@ (8019228 <_localeconv_r+0x4>)
 8019226:	4770      	bx	lr
 8019228:	24000268 	.word	0x24000268

0801922c <_close_r>:
 801922c:	b538      	push	{r3, r4, r5, lr}
 801922e:	4d06      	ldr	r5, [pc, #24]	@ (8019248 <_close_r+0x1c>)
 8019230:	2300      	movs	r3, #0
 8019232:	4604      	mov	r4, r0
 8019234:	4608      	mov	r0, r1
 8019236:	602b      	str	r3, [r5, #0]
 8019238:	f7e9 fe70 	bl	8002f1c <_close>
 801923c:	1c43      	adds	r3, r0, #1
 801923e:	d102      	bne.n	8019246 <_close_r+0x1a>
 8019240:	682b      	ldr	r3, [r5, #0]
 8019242:	b103      	cbz	r3, 8019246 <_close_r+0x1a>
 8019244:	6023      	str	r3, [r4, #0]
 8019246:	bd38      	pop	{r3, r4, r5, pc}
 8019248:	24027a9c 	.word	0x24027a9c

0801924c <_lseek_r>:
 801924c:	b538      	push	{r3, r4, r5, lr}
 801924e:	4d07      	ldr	r5, [pc, #28]	@ (801926c <_lseek_r+0x20>)
 8019250:	4604      	mov	r4, r0
 8019252:	4608      	mov	r0, r1
 8019254:	4611      	mov	r1, r2
 8019256:	2200      	movs	r2, #0
 8019258:	602a      	str	r2, [r5, #0]
 801925a:	461a      	mov	r2, r3
 801925c:	f7e9 fe85 	bl	8002f6a <_lseek>
 8019260:	1c43      	adds	r3, r0, #1
 8019262:	d102      	bne.n	801926a <_lseek_r+0x1e>
 8019264:	682b      	ldr	r3, [r5, #0]
 8019266:	b103      	cbz	r3, 801926a <_lseek_r+0x1e>
 8019268:	6023      	str	r3, [r4, #0]
 801926a:	bd38      	pop	{r3, r4, r5, pc}
 801926c:	24027a9c 	.word	0x24027a9c

08019270 <_read_r>:
 8019270:	b538      	push	{r3, r4, r5, lr}
 8019272:	4d07      	ldr	r5, [pc, #28]	@ (8019290 <_read_r+0x20>)
 8019274:	4604      	mov	r4, r0
 8019276:	4608      	mov	r0, r1
 8019278:	4611      	mov	r1, r2
 801927a:	2200      	movs	r2, #0
 801927c:	602a      	str	r2, [r5, #0]
 801927e:	461a      	mov	r2, r3
 8019280:	f7e9 fe13 	bl	8002eaa <_read>
 8019284:	1c43      	adds	r3, r0, #1
 8019286:	d102      	bne.n	801928e <_read_r+0x1e>
 8019288:	682b      	ldr	r3, [r5, #0]
 801928a:	b103      	cbz	r3, 801928e <_read_r+0x1e>
 801928c:	6023      	str	r3, [r4, #0]
 801928e:	bd38      	pop	{r3, r4, r5, pc}
 8019290:	24027a9c 	.word	0x24027a9c

08019294 <_sbrk_r>:
 8019294:	b538      	push	{r3, r4, r5, lr}
 8019296:	4d06      	ldr	r5, [pc, #24]	@ (80192b0 <_sbrk_r+0x1c>)
 8019298:	2300      	movs	r3, #0
 801929a:	4604      	mov	r4, r0
 801929c:	4608      	mov	r0, r1
 801929e:	602b      	str	r3, [r5, #0]
 80192a0:	f7e9 fe70 	bl	8002f84 <_sbrk>
 80192a4:	1c43      	adds	r3, r0, #1
 80192a6:	d102      	bne.n	80192ae <_sbrk_r+0x1a>
 80192a8:	682b      	ldr	r3, [r5, #0]
 80192aa:	b103      	cbz	r3, 80192ae <_sbrk_r+0x1a>
 80192ac:	6023      	str	r3, [r4, #0]
 80192ae:	bd38      	pop	{r3, r4, r5, pc}
 80192b0:	24027a9c 	.word	0x24027a9c

080192b4 <_write_r>:
 80192b4:	b538      	push	{r3, r4, r5, lr}
 80192b6:	4d07      	ldr	r5, [pc, #28]	@ (80192d4 <_write_r+0x20>)
 80192b8:	4604      	mov	r4, r0
 80192ba:	4608      	mov	r0, r1
 80192bc:	4611      	mov	r1, r2
 80192be:	2200      	movs	r2, #0
 80192c0:	602a      	str	r2, [r5, #0]
 80192c2:	461a      	mov	r2, r3
 80192c4:	f7e9 fe0e 	bl	8002ee4 <_write>
 80192c8:	1c43      	adds	r3, r0, #1
 80192ca:	d102      	bne.n	80192d2 <_write_r+0x1e>
 80192cc:	682b      	ldr	r3, [r5, #0]
 80192ce:	b103      	cbz	r3, 80192d2 <_write_r+0x1e>
 80192d0:	6023      	str	r3, [r4, #0]
 80192d2:	bd38      	pop	{r3, r4, r5, pc}
 80192d4:	24027a9c 	.word	0x24027a9c

080192d8 <__errno>:
 80192d8:	4b01      	ldr	r3, [pc, #4]	@ (80192e0 <__errno+0x8>)
 80192da:	6818      	ldr	r0, [r3, #0]
 80192dc:	4770      	bx	lr
 80192de:	bf00      	nop
 80192e0:	24000128 	.word	0x24000128

080192e4 <__libc_init_array>:
 80192e4:	b570      	push	{r4, r5, r6, lr}
 80192e6:	4d0d      	ldr	r5, [pc, #52]	@ (801931c <__libc_init_array+0x38>)
 80192e8:	4c0d      	ldr	r4, [pc, #52]	@ (8019320 <__libc_init_array+0x3c>)
 80192ea:	1b64      	subs	r4, r4, r5
 80192ec:	10a4      	asrs	r4, r4, #2
 80192ee:	2600      	movs	r6, #0
 80192f0:	42a6      	cmp	r6, r4
 80192f2:	d109      	bne.n	8019308 <__libc_init_array+0x24>
 80192f4:	4d0b      	ldr	r5, [pc, #44]	@ (8019324 <__libc_init_array+0x40>)
 80192f6:	4c0c      	ldr	r4, [pc, #48]	@ (8019328 <__libc_init_array+0x44>)
 80192f8:	f001 ff32 	bl	801b160 <_init>
 80192fc:	1b64      	subs	r4, r4, r5
 80192fe:	10a4      	asrs	r4, r4, #2
 8019300:	2600      	movs	r6, #0
 8019302:	42a6      	cmp	r6, r4
 8019304:	d105      	bne.n	8019312 <__libc_init_array+0x2e>
 8019306:	bd70      	pop	{r4, r5, r6, pc}
 8019308:	f855 3b04 	ldr.w	r3, [r5], #4
 801930c:	4798      	blx	r3
 801930e:	3601      	adds	r6, #1
 8019310:	e7ee      	b.n	80192f0 <__libc_init_array+0xc>
 8019312:	f855 3b04 	ldr.w	r3, [r5], #4
 8019316:	4798      	blx	r3
 8019318:	3601      	adds	r6, #1
 801931a:	e7f2      	b.n	8019302 <__libc_init_array+0x1e>
 801931c:	0801ba34 	.word	0x0801ba34
 8019320:	0801ba34 	.word	0x0801ba34
 8019324:	0801ba34 	.word	0x0801ba34
 8019328:	0801ba38 	.word	0x0801ba38

0801932c <__retarget_lock_init_recursive>:
 801932c:	4770      	bx	lr

0801932e <__retarget_lock_acquire_recursive>:
 801932e:	4770      	bx	lr

08019330 <__retarget_lock_release_recursive>:
 8019330:	4770      	bx	lr

08019332 <memcpy>:
 8019332:	440a      	add	r2, r1
 8019334:	4291      	cmp	r1, r2
 8019336:	f100 33ff 	add.w	r3, r0, #4294967295
 801933a:	d100      	bne.n	801933e <memcpy+0xc>
 801933c:	4770      	bx	lr
 801933e:	b510      	push	{r4, lr}
 8019340:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019344:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019348:	4291      	cmp	r1, r2
 801934a:	d1f9      	bne.n	8019340 <memcpy+0xe>
 801934c:	bd10      	pop	{r4, pc}
	...

08019350 <__assert_func>:
 8019350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019352:	4614      	mov	r4, r2
 8019354:	461a      	mov	r2, r3
 8019356:	4b09      	ldr	r3, [pc, #36]	@ (801937c <__assert_func+0x2c>)
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	4605      	mov	r5, r0
 801935c:	68d8      	ldr	r0, [r3, #12]
 801935e:	b14c      	cbz	r4, 8019374 <__assert_func+0x24>
 8019360:	4b07      	ldr	r3, [pc, #28]	@ (8019380 <__assert_func+0x30>)
 8019362:	9100      	str	r1, [sp, #0]
 8019364:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019368:	4906      	ldr	r1, [pc, #24]	@ (8019384 <__assert_func+0x34>)
 801936a:	462b      	mov	r3, r5
 801936c:	f001 fbbe 	bl	801aaec <fiprintf>
 8019370:	f001 fbe8 	bl	801ab44 <abort>
 8019374:	4b04      	ldr	r3, [pc, #16]	@ (8019388 <__assert_func+0x38>)
 8019376:	461c      	mov	r4, r3
 8019378:	e7f3      	b.n	8019362 <__assert_func+0x12>
 801937a:	bf00      	nop
 801937c:	24000128 	.word	0x24000128
 8019380:	0801b703 	.word	0x0801b703
 8019384:	0801b710 	.word	0x0801b710
 8019388:	0801b73e 	.word	0x0801b73e

0801938c <quorem>:
 801938c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019390:	6903      	ldr	r3, [r0, #16]
 8019392:	690c      	ldr	r4, [r1, #16]
 8019394:	42a3      	cmp	r3, r4
 8019396:	4607      	mov	r7, r0
 8019398:	db7e      	blt.n	8019498 <quorem+0x10c>
 801939a:	3c01      	subs	r4, #1
 801939c:	f101 0814 	add.w	r8, r1, #20
 80193a0:	00a3      	lsls	r3, r4, #2
 80193a2:	f100 0514 	add.w	r5, r0, #20
 80193a6:	9300      	str	r3, [sp, #0]
 80193a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80193ac:	9301      	str	r3, [sp, #4]
 80193ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80193b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80193b6:	3301      	adds	r3, #1
 80193b8:	429a      	cmp	r2, r3
 80193ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80193be:	fbb2 f6f3 	udiv	r6, r2, r3
 80193c2:	d32e      	bcc.n	8019422 <quorem+0x96>
 80193c4:	f04f 0a00 	mov.w	sl, #0
 80193c8:	46c4      	mov	ip, r8
 80193ca:	46ae      	mov	lr, r5
 80193cc:	46d3      	mov	fp, sl
 80193ce:	f85c 3b04 	ldr.w	r3, [ip], #4
 80193d2:	b298      	uxth	r0, r3
 80193d4:	fb06 a000 	mla	r0, r6, r0, sl
 80193d8:	0c02      	lsrs	r2, r0, #16
 80193da:	0c1b      	lsrs	r3, r3, #16
 80193dc:	fb06 2303 	mla	r3, r6, r3, r2
 80193e0:	f8de 2000 	ldr.w	r2, [lr]
 80193e4:	b280      	uxth	r0, r0
 80193e6:	b292      	uxth	r2, r2
 80193e8:	1a12      	subs	r2, r2, r0
 80193ea:	445a      	add	r2, fp
 80193ec:	f8de 0000 	ldr.w	r0, [lr]
 80193f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80193f4:	b29b      	uxth	r3, r3
 80193f6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80193fa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80193fe:	b292      	uxth	r2, r2
 8019400:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8019404:	45e1      	cmp	r9, ip
 8019406:	f84e 2b04 	str.w	r2, [lr], #4
 801940a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801940e:	d2de      	bcs.n	80193ce <quorem+0x42>
 8019410:	9b00      	ldr	r3, [sp, #0]
 8019412:	58eb      	ldr	r3, [r5, r3]
 8019414:	b92b      	cbnz	r3, 8019422 <quorem+0x96>
 8019416:	9b01      	ldr	r3, [sp, #4]
 8019418:	3b04      	subs	r3, #4
 801941a:	429d      	cmp	r5, r3
 801941c:	461a      	mov	r2, r3
 801941e:	d32f      	bcc.n	8019480 <quorem+0xf4>
 8019420:	613c      	str	r4, [r7, #16]
 8019422:	4638      	mov	r0, r7
 8019424:	f001 f856 	bl	801a4d4 <__mcmp>
 8019428:	2800      	cmp	r0, #0
 801942a:	db25      	blt.n	8019478 <quorem+0xec>
 801942c:	4629      	mov	r1, r5
 801942e:	2000      	movs	r0, #0
 8019430:	f858 2b04 	ldr.w	r2, [r8], #4
 8019434:	f8d1 c000 	ldr.w	ip, [r1]
 8019438:	fa1f fe82 	uxth.w	lr, r2
 801943c:	fa1f f38c 	uxth.w	r3, ip
 8019440:	eba3 030e 	sub.w	r3, r3, lr
 8019444:	4403      	add	r3, r0
 8019446:	0c12      	lsrs	r2, r2, #16
 8019448:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801944c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8019450:	b29b      	uxth	r3, r3
 8019452:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019456:	45c1      	cmp	r9, r8
 8019458:	f841 3b04 	str.w	r3, [r1], #4
 801945c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8019460:	d2e6      	bcs.n	8019430 <quorem+0xa4>
 8019462:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019466:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801946a:	b922      	cbnz	r2, 8019476 <quorem+0xea>
 801946c:	3b04      	subs	r3, #4
 801946e:	429d      	cmp	r5, r3
 8019470:	461a      	mov	r2, r3
 8019472:	d30b      	bcc.n	801948c <quorem+0x100>
 8019474:	613c      	str	r4, [r7, #16]
 8019476:	3601      	adds	r6, #1
 8019478:	4630      	mov	r0, r6
 801947a:	b003      	add	sp, #12
 801947c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019480:	6812      	ldr	r2, [r2, #0]
 8019482:	3b04      	subs	r3, #4
 8019484:	2a00      	cmp	r2, #0
 8019486:	d1cb      	bne.n	8019420 <quorem+0x94>
 8019488:	3c01      	subs	r4, #1
 801948a:	e7c6      	b.n	801941a <quorem+0x8e>
 801948c:	6812      	ldr	r2, [r2, #0]
 801948e:	3b04      	subs	r3, #4
 8019490:	2a00      	cmp	r2, #0
 8019492:	d1ef      	bne.n	8019474 <quorem+0xe8>
 8019494:	3c01      	subs	r4, #1
 8019496:	e7ea      	b.n	801946e <quorem+0xe2>
 8019498:	2000      	movs	r0, #0
 801949a:	e7ee      	b.n	801947a <quorem+0xee>
 801949c:	0000      	movs	r0, r0
	...

080194a0 <_dtoa_r>:
 80194a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194a4:	ed2d 8b02 	vpush	{d8}
 80194a8:	69c7      	ldr	r7, [r0, #28]
 80194aa:	b091      	sub	sp, #68	@ 0x44
 80194ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80194b0:	ec55 4b10 	vmov	r4, r5, d0
 80194b4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80194b6:	9107      	str	r1, [sp, #28]
 80194b8:	4681      	mov	r9, r0
 80194ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80194bc:	930d      	str	r3, [sp, #52]	@ 0x34
 80194be:	b97f      	cbnz	r7, 80194e0 <_dtoa_r+0x40>
 80194c0:	2010      	movs	r0, #16
 80194c2:	f7ff f855 	bl	8018570 <malloc>
 80194c6:	4602      	mov	r2, r0
 80194c8:	f8c9 001c 	str.w	r0, [r9, #28]
 80194cc:	b920      	cbnz	r0, 80194d8 <_dtoa_r+0x38>
 80194ce:	4ba0      	ldr	r3, [pc, #640]	@ (8019750 <_dtoa_r+0x2b0>)
 80194d0:	21ef      	movs	r1, #239	@ 0xef
 80194d2:	48a0      	ldr	r0, [pc, #640]	@ (8019754 <_dtoa_r+0x2b4>)
 80194d4:	f7ff ff3c 	bl	8019350 <__assert_func>
 80194d8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80194dc:	6007      	str	r7, [r0, #0]
 80194de:	60c7      	str	r7, [r0, #12]
 80194e0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80194e4:	6819      	ldr	r1, [r3, #0]
 80194e6:	b159      	cbz	r1, 8019500 <_dtoa_r+0x60>
 80194e8:	685a      	ldr	r2, [r3, #4]
 80194ea:	604a      	str	r2, [r1, #4]
 80194ec:	2301      	movs	r3, #1
 80194ee:	4093      	lsls	r3, r2
 80194f0:	608b      	str	r3, [r1, #8]
 80194f2:	4648      	mov	r0, r9
 80194f4:	f000 fdbc 	bl	801a070 <_Bfree>
 80194f8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80194fc:	2200      	movs	r2, #0
 80194fe:	601a      	str	r2, [r3, #0]
 8019500:	1e2b      	subs	r3, r5, #0
 8019502:	bfbb      	ittet	lt
 8019504:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8019508:	9303      	strlt	r3, [sp, #12]
 801950a:	2300      	movge	r3, #0
 801950c:	2201      	movlt	r2, #1
 801950e:	bfac      	ite	ge
 8019510:	6033      	strge	r3, [r6, #0]
 8019512:	6032      	strlt	r2, [r6, #0]
 8019514:	4b90      	ldr	r3, [pc, #576]	@ (8019758 <_dtoa_r+0x2b8>)
 8019516:	9e03      	ldr	r6, [sp, #12]
 8019518:	43b3      	bics	r3, r6
 801951a:	d110      	bne.n	801953e <_dtoa_r+0x9e>
 801951c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801951e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8019522:	6013      	str	r3, [r2, #0]
 8019524:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8019528:	4323      	orrs	r3, r4
 801952a:	f000 84e6 	beq.w	8019efa <_dtoa_r+0xa5a>
 801952e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019530:	4f8a      	ldr	r7, [pc, #552]	@ (801975c <_dtoa_r+0x2bc>)
 8019532:	2b00      	cmp	r3, #0
 8019534:	f000 84e8 	beq.w	8019f08 <_dtoa_r+0xa68>
 8019538:	1cfb      	adds	r3, r7, #3
 801953a:	f000 bce3 	b.w	8019f04 <_dtoa_r+0xa64>
 801953e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8019542:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801954a:	d10a      	bne.n	8019562 <_dtoa_r+0xc2>
 801954c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801954e:	2301      	movs	r3, #1
 8019550:	6013      	str	r3, [r2, #0]
 8019552:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019554:	b113      	cbz	r3, 801955c <_dtoa_r+0xbc>
 8019556:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8019558:	4b81      	ldr	r3, [pc, #516]	@ (8019760 <_dtoa_r+0x2c0>)
 801955a:	6013      	str	r3, [r2, #0]
 801955c:	4f81      	ldr	r7, [pc, #516]	@ (8019764 <_dtoa_r+0x2c4>)
 801955e:	f000 bcd3 	b.w	8019f08 <_dtoa_r+0xa68>
 8019562:	aa0e      	add	r2, sp, #56	@ 0x38
 8019564:	a90f      	add	r1, sp, #60	@ 0x3c
 8019566:	4648      	mov	r0, r9
 8019568:	eeb0 0b48 	vmov.f64	d0, d8
 801956c:	f001 f862 	bl	801a634 <__d2b>
 8019570:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8019574:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019576:	9001      	str	r0, [sp, #4]
 8019578:	2b00      	cmp	r3, #0
 801957a:	d045      	beq.n	8019608 <_dtoa_r+0x168>
 801957c:	eeb0 7b48 	vmov.f64	d7, d8
 8019580:	ee18 1a90 	vmov	r1, s17
 8019584:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019588:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801958c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8019590:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8019594:	2500      	movs	r5, #0
 8019596:	ee07 1a90 	vmov	s15, r1
 801959a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801959e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8019738 <_dtoa_r+0x298>
 80195a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80195a6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8019740 <_dtoa_r+0x2a0>
 80195aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80195ae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8019748 <_dtoa_r+0x2a8>
 80195b2:	ee07 3a90 	vmov	s15, r3
 80195b6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80195ba:	eeb0 7b46 	vmov.f64	d7, d6
 80195be:	eea4 7b05 	vfma.f64	d7, d4, d5
 80195c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80195c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80195ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195ce:	ee16 8a90 	vmov	r8, s13
 80195d2:	d508      	bpl.n	80195e6 <_dtoa_r+0x146>
 80195d4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80195d8:	eeb4 6b47 	vcmp.f64	d6, d7
 80195dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195e0:	bf18      	it	ne
 80195e2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80195e6:	f1b8 0f16 	cmp.w	r8, #22
 80195ea:	d82b      	bhi.n	8019644 <_dtoa_r+0x1a4>
 80195ec:	495e      	ldr	r1, [pc, #376]	@ (8019768 <_dtoa_r+0x2c8>)
 80195ee:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80195f2:	ed91 7b00 	vldr	d7, [r1]
 80195f6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80195fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195fe:	d501      	bpl.n	8019604 <_dtoa_r+0x164>
 8019600:	f108 38ff 	add.w	r8, r8, #4294967295
 8019604:	2100      	movs	r1, #0
 8019606:	e01e      	b.n	8019646 <_dtoa_r+0x1a6>
 8019608:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801960a:	4413      	add	r3, r2
 801960c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8019610:	2920      	cmp	r1, #32
 8019612:	bfc1      	itttt	gt
 8019614:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8019618:	408e      	lslgt	r6, r1
 801961a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801961e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8019622:	bfd6      	itet	le
 8019624:	f1c1 0120 	rsble	r1, r1, #32
 8019628:	4331      	orrgt	r1, r6
 801962a:	fa04 f101 	lslle.w	r1, r4, r1
 801962e:	ee07 1a90 	vmov	s15, r1
 8019632:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019636:	3b01      	subs	r3, #1
 8019638:	ee17 1a90 	vmov	r1, s15
 801963c:	2501      	movs	r5, #1
 801963e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8019642:	e7a8      	b.n	8019596 <_dtoa_r+0xf6>
 8019644:	2101      	movs	r1, #1
 8019646:	1ad2      	subs	r2, r2, r3
 8019648:	1e53      	subs	r3, r2, #1
 801964a:	9306      	str	r3, [sp, #24]
 801964c:	bf45      	ittet	mi
 801964e:	f1c2 0301 	rsbmi	r3, r2, #1
 8019652:	9304      	strmi	r3, [sp, #16]
 8019654:	2300      	movpl	r3, #0
 8019656:	2300      	movmi	r3, #0
 8019658:	bf4c      	ite	mi
 801965a:	9306      	strmi	r3, [sp, #24]
 801965c:	9304      	strpl	r3, [sp, #16]
 801965e:	f1b8 0f00 	cmp.w	r8, #0
 8019662:	910c      	str	r1, [sp, #48]	@ 0x30
 8019664:	db18      	blt.n	8019698 <_dtoa_r+0x1f8>
 8019666:	9b06      	ldr	r3, [sp, #24]
 8019668:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801966c:	4443      	add	r3, r8
 801966e:	9306      	str	r3, [sp, #24]
 8019670:	2300      	movs	r3, #0
 8019672:	9a07      	ldr	r2, [sp, #28]
 8019674:	2a09      	cmp	r2, #9
 8019676:	d845      	bhi.n	8019704 <_dtoa_r+0x264>
 8019678:	2a05      	cmp	r2, #5
 801967a:	bfc4      	itt	gt
 801967c:	3a04      	subgt	r2, #4
 801967e:	9207      	strgt	r2, [sp, #28]
 8019680:	9a07      	ldr	r2, [sp, #28]
 8019682:	f1a2 0202 	sub.w	r2, r2, #2
 8019686:	bfcc      	ite	gt
 8019688:	2400      	movgt	r4, #0
 801968a:	2401      	movle	r4, #1
 801968c:	2a03      	cmp	r2, #3
 801968e:	d844      	bhi.n	801971a <_dtoa_r+0x27a>
 8019690:	e8df f002 	tbb	[pc, r2]
 8019694:	0b173634 	.word	0x0b173634
 8019698:	9b04      	ldr	r3, [sp, #16]
 801969a:	2200      	movs	r2, #0
 801969c:	eba3 0308 	sub.w	r3, r3, r8
 80196a0:	9304      	str	r3, [sp, #16]
 80196a2:	920a      	str	r2, [sp, #40]	@ 0x28
 80196a4:	f1c8 0300 	rsb	r3, r8, #0
 80196a8:	e7e3      	b.n	8019672 <_dtoa_r+0x1d2>
 80196aa:	2201      	movs	r2, #1
 80196ac:	9208      	str	r2, [sp, #32]
 80196ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80196b0:	eb08 0b02 	add.w	fp, r8, r2
 80196b4:	f10b 0a01 	add.w	sl, fp, #1
 80196b8:	4652      	mov	r2, sl
 80196ba:	2a01      	cmp	r2, #1
 80196bc:	bfb8      	it	lt
 80196be:	2201      	movlt	r2, #1
 80196c0:	e006      	b.n	80196d0 <_dtoa_r+0x230>
 80196c2:	2201      	movs	r2, #1
 80196c4:	9208      	str	r2, [sp, #32]
 80196c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80196c8:	2a00      	cmp	r2, #0
 80196ca:	dd29      	ble.n	8019720 <_dtoa_r+0x280>
 80196cc:	4693      	mov	fp, r2
 80196ce:	4692      	mov	sl, r2
 80196d0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80196d4:	2100      	movs	r1, #0
 80196d6:	2004      	movs	r0, #4
 80196d8:	f100 0614 	add.w	r6, r0, #20
 80196dc:	4296      	cmp	r6, r2
 80196de:	d926      	bls.n	801972e <_dtoa_r+0x28e>
 80196e0:	6079      	str	r1, [r7, #4]
 80196e2:	4648      	mov	r0, r9
 80196e4:	9305      	str	r3, [sp, #20]
 80196e6:	f000 fc83 	bl	8019ff0 <_Balloc>
 80196ea:	9b05      	ldr	r3, [sp, #20]
 80196ec:	4607      	mov	r7, r0
 80196ee:	2800      	cmp	r0, #0
 80196f0:	d13e      	bne.n	8019770 <_dtoa_r+0x2d0>
 80196f2:	4b1e      	ldr	r3, [pc, #120]	@ (801976c <_dtoa_r+0x2cc>)
 80196f4:	4602      	mov	r2, r0
 80196f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80196fa:	e6ea      	b.n	80194d2 <_dtoa_r+0x32>
 80196fc:	2200      	movs	r2, #0
 80196fe:	e7e1      	b.n	80196c4 <_dtoa_r+0x224>
 8019700:	2200      	movs	r2, #0
 8019702:	e7d3      	b.n	80196ac <_dtoa_r+0x20c>
 8019704:	2401      	movs	r4, #1
 8019706:	2200      	movs	r2, #0
 8019708:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801970c:	f04f 3bff 	mov.w	fp, #4294967295
 8019710:	2100      	movs	r1, #0
 8019712:	46da      	mov	sl, fp
 8019714:	2212      	movs	r2, #18
 8019716:	9109      	str	r1, [sp, #36]	@ 0x24
 8019718:	e7da      	b.n	80196d0 <_dtoa_r+0x230>
 801971a:	2201      	movs	r2, #1
 801971c:	9208      	str	r2, [sp, #32]
 801971e:	e7f5      	b.n	801970c <_dtoa_r+0x26c>
 8019720:	f04f 0b01 	mov.w	fp, #1
 8019724:	46da      	mov	sl, fp
 8019726:	465a      	mov	r2, fp
 8019728:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801972c:	e7d0      	b.n	80196d0 <_dtoa_r+0x230>
 801972e:	3101      	adds	r1, #1
 8019730:	0040      	lsls	r0, r0, #1
 8019732:	e7d1      	b.n	80196d8 <_dtoa_r+0x238>
 8019734:	f3af 8000 	nop.w
 8019738:	636f4361 	.word	0x636f4361
 801973c:	3fd287a7 	.word	0x3fd287a7
 8019740:	8b60c8b3 	.word	0x8b60c8b3
 8019744:	3fc68a28 	.word	0x3fc68a28
 8019748:	509f79fb 	.word	0x509f79fb
 801974c:	3fd34413 	.word	0x3fd34413
 8019750:	0801b660 	.word	0x0801b660
 8019754:	0801b74c 	.word	0x0801b74c
 8019758:	7ff00000 	.word	0x7ff00000
 801975c:	0801b748 	.word	0x0801b748
 8019760:	0801b6e0 	.word	0x0801b6e0
 8019764:	0801b6df 	.word	0x0801b6df
 8019768:	0801b860 	.word	0x0801b860
 801976c:	0801b7a4 	.word	0x0801b7a4
 8019770:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8019774:	f1ba 0f0e 	cmp.w	sl, #14
 8019778:	6010      	str	r0, [r2, #0]
 801977a:	d86e      	bhi.n	801985a <_dtoa_r+0x3ba>
 801977c:	2c00      	cmp	r4, #0
 801977e:	d06c      	beq.n	801985a <_dtoa_r+0x3ba>
 8019780:	f1b8 0f00 	cmp.w	r8, #0
 8019784:	f340 80b4 	ble.w	80198f0 <_dtoa_r+0x450>
 8019788:	4ac8      	ldr	r2, [pc, #800]	@ (8019aac <_dtoa_r+0x60c>)
 801978a:	f008 010f 	and.w	r1, r8, #15
 801978e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8019792:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8019796:	ed92 7b00 	vldr	d7, [r2]
 801979a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801979e:	f000 809b 	beq.w	80198d8 <_dtoa_r+0x438>
 80197a2:	4ac3      	ldr	r2, [pc, #780]	@ (8019ab0 <_dtoa_r+0x610>)
 80197a4:	ed92 6b08 	vldr	d6, [r2, #32]
 80197a8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80197ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 80197b0:	f001 010f 	and.w	r1, r1, #15
 80197b4:	2203      	movs	r2, #3
 80197b6:	48be      	ldr	r0, [pc, #760]	@ (8019ab0 <_dtoa_r+0x610>)
 80197b8:	2900      	cmp	r1, #0
 80197ba:	f040 808f 	bne.w	80198dc <_dtoa_r+0x43c>
 80197be:	ed9d 6b02 	vldr	d6, [sp, #8]
 80197c2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80197c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80197ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80197cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80197d0:	2900      	cmp	r1, #0
 80197d2:	f000 80b3 	beq.w	801993c <_dtoa_r+0x49c>
 80197d6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80197da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80197de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197e2:	f140 80ab 	bpl.w	801993c <_dtoa_r+0x49c>
 80197e6:	f1ba 0f00 	cmp.w	sl, #0
 80197ea:	f000 80a7 	beq.w	801993c <_dtoa_r+0x49c>
 80197ee:	f1bb 0f00 	cmp.w	fp, #0
 80197f2:	dd30      	ble.n	8019856 <_dtoa_r+0x3b6>
 80197f4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80197f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80197fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019800:	f108 31ff 	add.w	r1, r8, #4294967295
 8019804:	9105      	str	r1, [sp, #20]
 8019806:	3201      	adds	r2, #1
 8019808:	465c      	mov	r4, fp
 801980a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801980e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8019812:	ee07 2a90 	vmov	s15, r2
 8019816:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801981a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801981e:	ee15 2a90 	vmov	r2, s11
 8019822:	ec51 0b15 	vmov	r0, r1, d5
 8019826:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801982a:	2c00      	cmp	r4, #0
 801982c:	f040 808a 	bne.w	8019944 <_dtoa_r+0x4a4>
 8019830:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8019834:	ee36 6b47 	vsub.f64	d6, d6, d7
 8019838:	ec41 0b17 	vmov	d7, r0, r1
 801983c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019844:	f300 826a 	bgt.w	8019d1c <_dtoa_r+0x87c>
 8019848:	eeb1 7b47 	vneg.f64	d7, d7
 801984c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019854:	d423      	bmi.n	801989e <_dtoa_r+0x3fe>
 8019856:	ed8d 8b02 	vstr	d8, [sp, #8]
 801985a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801985c:	2a00      	cmp	r2, #0
 801985e:	f2c0 8129 	blt.w	8019ab4 <_dtoa_r+0x614>
 8019862:	f1b8 0f0e 	cmp.w	r8, #14
 8019866:	f300 8125 	bgt.w	8019ab4 <_dtoa_r+0x614>
 801986a:	4b90      	ldr	r3, [pc, #576]	@ (8019aac <_dtoa_r+0x60c>)
 801986c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8019870:	ed93 6b00 	vldr	d6, [r3]
 8019874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019876:	2b00      	cmp	r3, #0
 8019878:	f280 80c8 	bge.w	8019a0c <_dtoa_r+0x56c>
 801987c:	f1ba 0f00 	cmp.w	sl, #0
 8019880:	f300 80c4 	bgt.w	8019a0c <_dtoa_r+0x56c>
 8019884:	d10b      	bne.n	801989e <_dtoa_r+0x3fe>
 8019886:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801988a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801988e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019892:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801989a:	f2c0 823c 	blt.w	8019d16 <_dtoa_r+0x876>
 801989e:	2400      	movs	r4, #0
 80198a0:	4625      	mov	r5, r4
 80198a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80198a4:	43db      	mvns	r3, r3
 80198a6:	9305      	str	r3, [sp, #20]
 80198a8:	463e      	mov	r6, r7
 80198aa:	f04f 0800 	mov.w	r8, #0
 80198ae:	4621      	mov	r1, r4
 80198b0:	4648      	mov	r0, r9
 80198b2:	f000 fbdd 	bl	801a070 <_Bfree>
 80198b6:	2d00      	cmp	r5, #0
 80198b8:	f000 80a2 	beq.w	8019a00 <_dtoa_r+0x560>
 80198bc:	f1b8 0f00 	cmp.w	r8, #0
 80198c0:	d005      	beq.n	80198ce <_dtoa_r+0x42e>
 80198c2:	45a8      	cmp	r8, r5
 80198c4:	d003      	beq.n	80198ce <_dtoa_r+0x42e>
 80198c6:	4641      	mov	r1, r8
 80198c8:	4648      	mov	r0, r9
 80198ca:	f000 fbd1 	bl	801a070 <_Bfree>
 80198ce:	4629      	mov	r1, r5
 80198d0:	4648      	mov	r0, r9
 80198d2:	f000 fbcd 	bl	801a070 <_Bfree>
 80198d6:	e093      	b.n	8019a00 <_dtoa_r+0x560>
 80198d8:	2202      	movs	r2, #2
 80198da:	e76c      	b.n	80197b6 <_dtoa_r+0x316>
 80198dc:	07cc      	lsls	r4, r1, #31
 80198de:	d504      	bpl.n	80198ea <_dtoa_r+0x44a>
 80198e0:	ed90 6b00 	vldr	d6, [r0]
 80198e4:	3201      	adds	r2, #1
 80198e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80198ea:	1049      	asrs	r1, r1, #1
 80198ec:	3008      	adds	r0, #8
 80198ee:	e763      	b.n	80197b8 <_dtoa_r+0x318>
 80198f0:	d022      	beq.n	8019938 <_dtoa_r+0x498>
 80198f2:	f1c8 0100 	rsb	r1, r8, #0
 80198f6:	4a6d      	ldr	r2, [pc, #436]	@ (8019aac <_dtoa_r+0x60c>)
 80198f8:	f001 000f 	and.w	r0, r1, #15
 80198fc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8019900:	ed92 7b00 	vldr	d7, [r2]
 8019904:	ee28 7b07 	vmul.f64	d7, d8, d7
 8019908:	ed8d 7b02 	vstr	d7, [sp, #8]
 801990c:	4868      	ldr	r0, [pc, #416]	@ (8019ab0 <_dtoa_r+0x610>)
 801990e:	1109      	asrs	r1, r1, #4
 8019910:	2400      	movs	r4, #0
 8019912:	2202      	movs	r2, #2
 8019914:	b929      	cbnz	r1, 8019922 <_dtoa_r+0x482>
 8019916:	2c00      	cmp	r4, #0
 8019918:	f43f af57 	beq.w	80197ca <_dtoa_r+0x32a>
 801991c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019920:	e753      	b.n	80197ca <_dtoa_r+0x32a>
 8019922:	07ce      	lsls	r6, r1, #31
 8019924:	d505      	bpl.n	8019932 <_dtoa_r+0x492>
 8019926:	ed90 6b00 	vldr	d6, [r0]
 801992a:	3201      	adds	r2, #1
 801992c:	2401      	movs	r4, #1
 801992e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019932:	1049      	asrs	r1, r1, #1
 8019934:	3008      	adds	r0, #8
 8019936:	e7ed      	b.n	8019914 <_dtoa_r+0x474>
 8019938:	2202      	movs	r2, #2
 801993a:	e746      	b.n	80197ca <_dtoa_r+0x32a>
 801993c:	f8cd 8014 	str.w	r8, [sp, #20]
 8019940:	4654      	mov	r4, sl
 8019942:	e762      	b.n	801980a <_dtoa_r+0x36a>
 8019944:	4a59      	ldr	r2, [pc, #356]	@ (8019aac <_dtoa_r+0x60c>)
 8019946:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801994a:	ed12 4b02 	vldr	d4, [r2, #-8]
 801994e:	9a08      	ldr	r2, [sp, #32]
 8019950:	ec41 0b17 	vmov	d7, r0, r1
 8019954:	443c      	add	r4, r7
 8019956:	b34a      	cbz	r2, 80199ac <_dtoa_r+0x50c>
 8019958:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801995c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8019960:	463e      	mov	r6, r7
 8019962:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8019966:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801996a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801996e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019972:	ee14 2a90 	vmov	r2, s9
 8019976:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801997a:	3230      	adds	r2, #48	@ 0x30
 801997c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8019980:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019988:	f806 2b01 	strb.w	r2, [r6], #1
 801998c:	d438      	bmi.n	8019a00 <_dtoa_r+0x560>
 801998e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8019992:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8019996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801999a:	d46e      	bmi.n	8019a7a <_dtoa_r+0x5da>
 801999c:	42a6      	cmp	r6, r4
 801999e:	f43f af5a 	beq.w	8019856 <_dtoa_r+0x3b6>
 80199a2:	ee27 7b03 	vmul.f64	d7, d7, d3
 80199a6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80199aa:	e7e0      	b.n	801996e <_dtoa_r+0x4ce>
 80199ac:	4621      	mov	r1, r4
 80199ae:	463e      	mov	r6, r7
 80199b0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80199b4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80199b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80199bc:	ee14 2a90 	vmov	r2, s9
 80199c0:	3230      	adds	r2, #48	@ 0x30
 80199c2:	f806 2b01 	strb.w	r2, [r6], #1
 80199c6:	42a6      	cmp	r6, r4
 80199c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80199cc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80199d0:	d119      	bne.n	8019a06 <_dtoa_r+0x566>
 80199d2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80199d6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80199da:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80199de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199e2:	dc4a      	bgt.n	8019a7a <_dtoa_r+0x5da>
 80199e4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80199e8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80199ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199f0:	f57f af31 	bpl.w	8019856 <_dtoa_r+0x3b6>
 80199f4:	460e      	mov	r6, r1
 80199f6:	3901      	subs	r1, #1
 80199f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80199fc:	2b30      	cmp	r3, #48	@ 0x30
 80199fe:	d0f9      	beq.n	80199f4 <_dtoa_r+0x554>
 8019a00:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8019a04:	e027      	b.n	8019a56 <_dtoa_r+0x5b6>
 8019a06:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019a0a:	e7d5      	b.n	80199b8 <_dtoa_r+0x518>
 8019a0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019a10:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8019a14:	463e      	mov	r6, r7
 8019a16:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8019a1a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8019a1e:	ee15 3a10 	vmov	r3, s10
 8019a22:	3330      	adds	r3, #48	@ 0x30
 8019a24:	f806 3b01 	strb.w	r3, [r6], #1
 8019a28:	1bf3      	subs	r3, r6, r7
 8019a2a:	459a      	cmp	sl, r3
 8019a2c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8019a30:	eea3 7b46 	vfms.f64	d7, d3, d6
 8019a34:	d132      	bne.n	8019a9c <_dtoa_r+0x5fc>
 8019a36:	ee37 7b07 	vadd.f64	d7, d7, d7
 8019a3a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a42:	dc18      	bgt.n	8019a76 <_dtoa_r+0x5d6>
 8019a44:	eeb4 7b46 	vcmp.f64	d7, d6
 8019a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a4c:	d103      	bne.n	8019a56 <_dtoa_r+0x5b6>
 8019a4e:	ee15 3a10 	vmov	r3, s10
 8019a52:	07db      	lsls	r3, r3, #31
 8019a54:	d40f      	bmi.n	8019a76 <_dtoa_r+0x5d6>
 8019a56:	9901      	ldr	r1, [sp, #4]
 8019a58:	4648      	mov	r0, r9
 8019a5a:	f000 fb09 	bl	801a070 <_Bfree>
 8019a5e:	2300      	movs	r3, #0
 8019a60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019a62:	7033      	strb	r3, [r6, #0]
 8019a64:	f108 0301 	add.w	r3, r8, #1
 8019a68:	6013      	str	r3, [r2, #0]
 8019a6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	f000 824b 	beq.w	8019f08 <_dtoa_r+0xa68>
 8019a72:	601e      	str	r6, [r3, #0]
 8019a74:	e248      	b.n	8019f08 <_dtoa_r+0xa68>
 8019a76:	f8cd 8014 	str.w	r8, [sp, #20]
 8019a7a:	4633      	mov	r3, r6
 8019a7c:	461e      	mov	r6, r3
 8019a7e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019a82:	2a39      	cmp	r2, #57	@ 0x39
 8019a84:	d106      	bne.n	8019a94 <_dtoa_r+0x5f4>
 8019a86:	429f      	cmp	r7, r3
 8019a88:	d1f8      	bne.n	8019a7c <_dtoa_r+0x5dc>
 8019a8a:	9a05      	ldr	r2, [sp, #20]
 8019a8c:	3201      	adds	r2, #1
 8019a8e:	9205      	str	r2, [sp, #20]
 8019a90:	2230      	movs	r2, #48	@ 0x30
 8019a92:	703a      	strb	r2, [r7, #0]
 8019a94:	781a      	ldrb	r2, [r3, #0]
 8019a96:	3201      	adds	r2, #1
 8019a98:	701a      	strb	r2, [r3, #0]
 8019a9a:	e7b1      	b.n	8019a00 <_dtoa_r+0x560>
 8019a9c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019aa0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019aa8:	d1b5      	bne.n	8019a16 <_dtoa_r+0x576>
 8019aaa:	e7d4      	b.n	8019a56 <_dtoa_r+0x5b6>
 8019aac:	0801b860 	.word	0x0801b860
 8019ab0:	0801b838 	.word	0x0801b838
 8019ab4:	9908      	ldr	r1, [sp, #32]
 8019ab6:	2900      	cmp	r1, #0
 8019ab8:	f000 80e9 	beq.w	8019c8e <_dtoa_r+0x7ee>
 8019abc:	9907      	ldr	r1, [sp, #28]
 8019abe:	2901      	cmp	r1, #1
 8019ac0:	f300 80cb 	bgt.w	8019c5a <_dtoa_r+0x7ba>
 8019ac4:	2d00      	cmp	r5, #0
 8019ac6:	f000 80c4 	beq.w	8019c52 <_dtoa_r+0x7b2>
 8019aca:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8019ace:	9e04      	ldr	r6, [sp, #16]
 8019ad0:	461c      	mov	r4, r3
 8019ad2:	9305      	str	r3, [sp, #20]
 8019ad4:	9b04      	ldr	r3, [sp, #16]
 8019ad6:	4413      	add	r3, r2
 8019ad8:	9304      	str	r3, [sp, #16]
 8019ada:	9b06      	ldr	r3, [sp, #24]
 8019adc:	2101      	movs	r1, #1
 8019ade:	4413      	add	r3, r2
 8019ae0:	4648      	mov	r0, r9
 8019ae2:	9306      	str	r3, [sp, #24]
 8019ae4:	f000 fb78 	bl	801a1d8 <__i2b>
 8019ae8:	9b05      	ldr	r3, [sp, #20]
 8019aea:	4605      	mov	r5, r0
 8019aec:	b166      	cbz	r6, 8019b08 <_dtoa_r+0x668>
 8019aee:	9a06      	ldr	r2, [sp, #24]
 8019af0:	2a00      	cmp	r2, #0
 8019af2:	dd09      	ble.n	8019b08 <_dtoa_r+0x668>
 8019af4:	42b2      	cmp	r2, r6
 8019af6:	9904      	ldr	r1, [sp, #16]
 8019af8:	bfa8      	it	ge
 8019afa:	4632      	movge	r2, r6
 8019afc:	1a89      	subs	r1, r1, r2
 8019afe:	9104      	str	r1, [sp, #16]
 8019b00:	9906      	ldr	r1, [sp, #24]
 8019b02:	1ab6      	subs	r6, r6, r2
 8019b04:	1a8a      	subs	r2, r1, r2
 8019b06:	9206      	str	r2, [sp, #24]
 8019b08:	b30b      	cbz	r3, 8019b4e <_dtoa_r+0x6ae>
 8019b0a:	9a08      	ldr	r2, [sp, #32]
 8019b0c:	2a00      	cmp	r2, #0
 8019b0e:	f000 80c5 	beq.w	8019c9c <_dtoa_r+0x7fc>
 8019b12:	2c00      	cmp	r4, #0
 8019b14:	f000 80bf 	beq.w	8019c96 <_dtoa_r+0x7f6>
 8019b18:	4629      	mov	r1, r5
 8019b1a:	4622      	mov	r2, r4
 8019b1c:	4648      	mov	r0, r9
 8019b1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019b20:	f000 fc12 	bl	801a348 <__pow5mult>
 8019b24:	9a01      	ldr	r2, [sp, #4]
 8019b26:	4601      	mov	r1, r0
 8019b28:	4605      	mov	r5, r0
 8019b2a:	4648      	mov	r0, r9
 8019b2c:	f000 fb6a 	bl	801a204 <__multiply>
 8019b30:	9901      	ldr	r1, [sp, #4]
 8019b32:	9005      	str	r0, [sp, #20]
 8019b34:	4648      	mov	r0, r9
 8019b36:	f000 fa9b 	bl	801a070 <_Bfree>
 8019b3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019b3c:	1b1b      	subs	r3, r3, r4
 8019b3e:	f000 80b0 	beq.w	8019ca2 <_dtoa_r+0x802>
 8019b42:	9905      	ldr	r1, [sp, #20]
 8019b44:	461a      	mov	r2, r3
 8019b46:	4648      	mov	r0, r9
 8019b48:	f000 fbfe 	bl	801a348 <__pow5mult>
 8019b4c:	9001      	str	r0, [sp, #4]
 8019b4e:	2101      	movs	r1, #1
 8019b50:	4648      	mov	r0, r9
 8019b52:	f000 fb41 	bl	801a1d8 <__i2b>
 8019b56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019b58:	4604      	mov	r4, r0
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	f000 81da 	beq.w	8019f14 <_dtoa_r+0xa74>
 8019b60:	461a      	mov	r2, r3
 8019b62:	4601      	mov	r1, r0
 8019b64:	4648      	mov	r0, r9
 8019b66:	f000 fbef 	bl	801a348 <__pow5mult>
 8019b6a:	9b07      	ldr	r3, [sp, #28]
 8019b6c:	2b01      	cmp	r3, #1
 8019b6e:	4604      	mov	r4, r0
 8019b70:	f300 80a0 	bgt.w	8019cb4 <_dtoa_r+0x814>
 8019b74:	9b02      	ldr	r3, [sp, #8]
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	f040 8096 	bne.w	8019ca8 <_dtoa_r+0x808>
 8019b7c:	9b03      	ldr	r3, [sp, #12]
 8019b7e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8019b82:	2a00      	cmp	r2, #0
 8019b84:	f040 8092 	bne.w	8019cac <_dtoa_r+0x80c>
 8019b88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8019b8c:	0d12      	lsrs	r2, r2, #20
 8019b8e:	0512      	lsls	r2, r2, #20
 8019b90:	2a00      	cmp	r2, #0
 8019b92:	f000 808d 	beq.w	8019cb0 <_dtoa_r+0x810>
 8019b96:	9b04      	ldr	r3, [sp, #16]
 8019b98:	3301      	adds	r3, #1
 8019b9a:	9304      	str	r3, [sp, #16]
 8019b9c:	9b06      	ldr	r3, [sp, #24]
 8019b9e:	3301      	adds	r3, #1
 8019ba0:	9306      	str	r3, [sp, #24]
 8019ba2:	2301      	movs	r3, #1
 8019ba4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019ba6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	f000 81b9 	beq.w	8019f20 <_dtoa_r+0xa80>
 8019bae:	6922      	ldr	r2, [r4, #16]
 8019bb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019bb4:	6910      	ldr	r0, [r2, #16]
 8019bb6:	f000 fac3 	bl	801a140 <__hi0bits>
 8019bba:	f1c0 0020 	rsb	r0, r0, #32
 8019bbe:	9b06      	ldr	r3, [sp, #24]
 8019bc0:	4418      	add	r0, r3
 8019bc2:	f010 001f 	ands.w	r0, r0, #31
 8019bc6:	f000 8081 	beq.w	8019ccc <_dtoa_r+0x82c>
 8019bca:	f1c0 0220 	rsb	r2, r0, #32
 8019bce:	2a04      	cmp	r2, #4
 8019bd0:	dd73      	ble.n	8019cba <_dtoa_r+0x81a>
 8019bd2:	9b04      	ldr	r3, [sp, #16]
 8019bd4:	f1c0 001c 	rsb	r0, r0, #28
 8019bd8:	4403      	add	r3, r0
 8019bda:	9304      	str	r3, [sp, #16]
 8019bdc:	9b06      	ldr	r3, [sp, #24]
 8019bde:	4406      	add	r6, r0
 8019be0:	4403      	add	r3, r0
 8019be2:	9306      	str	r3, [sp, #24]
 8019be4:	9b04      	ldr	r3, [sp, #16]
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	dd05      	ble.n	8019bf6 <_dtoa_r+0x756>
 8019bea:	9901      	ldr	r1, [sp, #4]
 8019bec:	461a      	mov	r2, r3
 8019bee:	4648      	mov	r0, r9
 8019bf0:	f000 fc04 	bl	801a3fc <__lshift>
 8019bf4:	9001      	str	r0, [sp, #4]
 8019bf6:	9b06      	ldr	r3, [sp, #24]
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	dd05      	ble.n	8019c08 <_dtoa_r+0x768>
 8019bfc:	4621      	mov	r1, r4
 8019bfe:	461a      	mov	r2, r3
 8019c00:	4648      	mov	r0, r9
 8019c02:	f000 fbfb 	bl	801a3fc <__lshift>
 8019c06:	4604      	mov	r4, r0
 8019c08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d060      	beq.n	8019cd0 <_dtoa_r+0x830>
 8019c0e:	9801      	ldr	r0, [sp, #4]
 8019c10:	4621      	mov	r1, r4
 8019c12:	f000 fc5f 	bl	801a4d4 <__mcmp>
 8019c16:	2800      	cmp	r0, #0
 8019c18:	da5a      	bge.n	8019cd0 <_dtoa_r+0x830>
 8019c1a:	f108 33ff 	add.w	r3, r8, #4294967295
 8019c1e:	9305      	str	r3, [sp, #20]
 8019c20:	9901      	ldr	r1, [sp, #4]
 8019c22:	2300      	movs	r3, #0
 8019c24:	220a      	movs	r2, #10
 8019c26:	4648      	mov	r0, r9
 8019c28:	f000 fa44 	bl	801a0b4 <__multadd>
 8019c2c:	9b08      	ldr	r3, [sp, #32]
 8019c2e:	9001      	str	r0, [sp, #4]
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	f000 8177 	beq.w	8019f24 <_dtoa_r+0xa84>
 8019c36:	4629      	mov	r1, r5
 8019c38:	2300      	movs	r3, #0
 8019c3a:	220a      	movs	r2, #10
 8019c3c:	4648      	mov	r0, r9
 8019c3e:	f000 fa39 	bl	801a0b4 <__multadd>
 8019c42:	f1bb 0f00 	cmp.w	fp, #0
 8019c46:	4605      	mov	r5, r0
 8019c48:	dc6e      	bgt.n	8019d28 <_dtoa_r+0x888>
 8019c4a:	9b07      	ldr	r3, [sp, #28]
 8019c4c:	2b02      	cmp	r3, #2
 8019c4e:	dc48      	bgt.n	8019ce2 <_dtoa_r+0x842>
 8019c50:	e06a      	b.n	8019d28 <_dtoa_r+0x888>
 8019c52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019c54:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8019c58:	e739      	b.n	8019ace <_dtoa_r+0x62e>
 8019c5a:	f10a 34ff 	add.w	r4, sl, #4294967295
 8019c5e:	42a3      	cmp	r3, r4
 8019c60:	db07      	blt.n	8019c72 <_dtoa_r+0x7d2>
 8019c62:	f1ba 0f00 	cmp.w	sl, #0
 8019c66:	eba3 0404 	sub.w	r4, r3, r4
 8019c6a:	db0b      	blt.n	8019c84 <_dtoa_r+0x7e4>
 8019c6c:	9e04      	ldr	r6, [sp, #16]
 8019c6e:	4652      	mov	r2, sl
 8019c70:	e72f      	b.n	8019ad2 <_dtoa_r+0x632>
 8019c72:	1ae2      	subs	r2, r4, r3
 8019c74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019c76:	9e04      	ldr	r6, [sp, #16]
 8019c78:	4413      	add	r3, r2
 8019c7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8019c7c:	4652      	mov	r2, sl
 8019c7e:	4623      	mov	r3, r4
 8019c80:	2400      	movs	r4, #0
 8019c82:	e726      	b.n	8019ad2 <_dtoa_r+0x632>
 8019c84:	9a04      	ldr	r2, [sp, #16]
 8019c86:	eba2 060a 	sub.w	r6, r2, sl
 8019c8a:	2200      	movs	r2, #0
 8019c8c:	e721      	b.n	8019ad2 <_dtoa_r+0x632>
 8019c8e:	9e04      	ldr	r6, [sp, #16]
 8019c90:	9d08      	ldr	r5, [sp, #32]
 8019c92:	461c      	mov	r4, r3
 8019c94:	e72a      	b.n	8019aec <_dtoa_r+0x64c>
 8019c96:	9a01      	ldr	r2, [sp, #4]
 8019c98:	9205      	str	r2, [sp, #20]
 8019c9a:	e752      	b.n	8019b42 <_dtoa_r+0x6a2>
 8019c9c:	9901      	ldr	r1, [sp, #4]
 8019c9e:	461a      	mov	r2, r3
 8019ca0:	e751      	b.n	8019b46 <_dtoa_r+0x6a6>
 8019ca2:	9b05      	ldr	r3, [sp, #20]
 8019ca4:	9301      	str	r3, [sp, #4]
 8019ca6:	e752      	b.n	8019b4e <_dtoa_r+0x6ae>
 8019ca8:	2300      	movs	r3, #0
 8019caa:	e77b      	b.n	8019ba4 <_dtoa_r+0x704>
 8019cac:	9b02      	ldr	r3, [sp, #8]
 8019cae:	e779      	b.n	8019ba4 <_dtoa_r+0x704>
 8019cb0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019cb2:	e778      	b.n	8019ba6 <_dtoa_r+0x706>
 8019cb4:	2300      	movs	r3, #0
 8019cb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019cb8:	e779      	b.n	8019bae <_dtoa_r+0x70e>
 8019cba:	d093      	beq.n	8019be4 <_dtoa_r+0x744>
 8019cbc:	9b04      	ldr	r3, [sp, #16]
 8019cbe:	321c      	adds	r2, #28
 8019cc0:	4413      	add	r3, r2
 8019cc2:	9304      	str	r3, [sp, #16]
 8019cc4:	9b06      	ldr	r3, [sp, #24]
 8019cc6:	4416      	add	r6, r2
 8019cc8:	4413      	add	r3, r2
 8019cca:	e78a      	b.n	8019be2 <_dtoa_r+0x742>
 8019ccc:	4602      	mov	r2, r0
 8019cce:	e7f5      	b.n	8019cbc <_dtoa_r+0x81c>
 8019cd0:	f1ba 0f00 	cmp.w	sl, #0
 8019cd4:	f8cd 8014 	str.w	r8, [sp, #20]
 8019cd8:	46d3      	mov	fp, sl
 8019cda:	dc21      	bgt.n	8019d20 <_dtoa_r+0x880>
 8019cdc:	9b07      	ldr	r3, [sp, #28]
 8019cde:	2b02      	cmp	r3, #2
 8019ce0:	dd1e      	ble.n	8019d20 <_dtoa_r+0x880>
 8019ce2:	f1bb 0f00 	cmp.w	fp, #0
 8019ce6:	f47f addc 	bne.w	80198a2 <_dtoa_r+0x402>
 8019cea:	4621      	mov	r1, r4
 8019cec:	465b      	mov	r3, fp
 8019cee:	2205      	movs	r2, #5
 8019cf0:	4648      	mov	r0, r9
 8019cf2:	f000 f9df 	bl	801a0b4 <__multadd>
 8019cf6:	4601      	mov	r1, r0
 8019cf8:	4604      	mov	r4, r0
 8019cfa:	9801      	ldr	r0, [sp, #4]
 8019cfc:	f000 fbea 	bl	801a4d4 <__mcmp>
 8019d00:	2800      	cmp	r0, #0
 8019d02:	f77f adce 	ble.w	80198a2 <_dtoa_r+0x402>
 8019d06:	463e      	mov	r6, r7
 8019d08:	2331      	movs	r3, #49	@ 0x31
 8019d0a:	f806 3b01 	strb.w	r3, [r6], #1
 8019d0e:	9b05      	ldr	r3, [sp, #20]
 8019d10:	3301      	adds	r3, #1
 8019d12:	9305      	str	r3, [sp, #20]
 8019d14:	e5c9      	b.n	80198aa <_dtoa_r+0x40a>
 8019d16:	f8cd 8014 	str.w	r8, [sp, #20]
 8019d1a:	4654      	mov	r4, sl
 8019d1c:	4625      	mov	r5, r4
 8019d1e:	e7f2      	b.n	8019d06 <_dtoa_r+0x866>
 8019d20:	9b08      	ldr	r3, [sp, #32]
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	f000 8102 	beq.w	8019f2c <_dtoa_r+0xa8c>
 8019d28:	2e00      	cmp	r6, #0
 8019d2a:	dd05      	ble.n	8019d38 <_dtoa_r+0x898>
 8019d2c:	4629      	mov	r1, r5
 8019d2e:	4632      	mov	r2, r6
 8019d30:	4648      	mov	r0, r9
 8019d32:	f000 fb63 	bl	801a3fc <__lshift>
 8019d36:	4605      	mov	r5, r0
 8019d38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d058      	beq.n	8019df0 <_dtoa_r+0x950>
 8019d3e:	6869      	ldr	r1, [r5, #4]
 8019d40:	4648      	mov	r0, r9
 8019d42:	f000 f955 	bl	8019ff0 <_Balloc>
 8019d46:	4606      	mov	r6, r0
 8019d48:	b928      	cbnz	r0, 8019d56 <_dtoa_r+0x8b6>
 8019d4a:	4b82      	ldr	r3, [pc, #520]	@ (8019f54 <_dtoa_r+0xab4>)
 8019d4c:	4602      	mov	r2, r0
 8019d4e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8019d52:	f7ff bbbe 	b.w	80194d2 <_dtoa_r+0x32>
 8019d56:	692a      	ldr	r2, [r5, #16]
 8019d58:	3202      	adds	r2, #2
 8019d5a:	0092      	lsls	r2, r2, #2
 8019d5c:	f105 010c 	add.w	r1, r5, #12
 8019d60:	300c      	adds	r0, #12
 8019d62:	f7ff fae6 	bl	8019332 <memcpy>
 8019d66:	2201      	movs	r2, #1
 8019d68:	4631      	mov	r1, r6
 8019d6a:	4648      	mov	r0, r9
 8019d6c:	f000 fb46 	bl	801a3fc <__lshift>
 8019d70:	1c7b      	adds	r3, r7, #1
 8019d72:	9304      	str	r3, [sp, #16]
 8019d74:	eb07 030b 	add.w	r3, r7, fp
 8019d78:	9309      	str	r3, [sp, #36]	@ 0x24
 8019d7a:	9b02      	ldr	r3, [sp, #8]
 8019d7c:	f003 0301 	and.w	r3, r3, #1
 8019d80:	46a8      	mov	r8, r5
 8019d82:	9308      	str	r3, [sp, #32]
 8019d84:	4605      	mov	r5, r0
 8019d86:	9b04      	ldr	r3, [sp, #16]
 8019d88:	9801      	ldr	r0, [sp, #4]
 8019d8a:	4621      	mov	r1, r4
 8019d8c:	f103 3bff 	add.w	fp, r3, #4294967295
 8019d90:	f7ff fafc 	bl	801938c <quorem>
 8019d94:	4641      	mov	r1, r8
 8019d96:	9002      	str	r0, [sp, #8]
 8019d98:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8019d9c:	9801      	ldr	r0, [sp, #4]
 8019d9e:	f000 fb99 	bl	801a4d4 <__mcmp>
 8019da2:	462a      	mov	r2, r5
 8019da4:	9006      	str	r0, [sp, #24]
 8019da6:	4621      	mov	r1, r4
 8019da8:	4648      	mov	r0, r9
 8019daa:	f000 fbaf 	bl	801a50c <__mdiff>
 8019dae:	68c2      	ldr	r2, [r0, #12]
 8019db0:	4606      	mov	r6, r0
 8019db2:	b9fa      	cbnz	r2, 8019df4 <_dtoa_r+0x954>
 8019db4:	4601      	mov	r1, r0
 8019db6:	9801      	ldr	r0, [sp, #4]
 8019db8:	f000 fb8c 	bl	801a4d4 <__mcmp>
 8019dbc:	4602      	mov	r2, r0
 8019dbe:	4631      	mov	r1, r6
 8019dc0:	4648      	mov	r0, r9
 8019dc2:	920a      	str	r2, [sp, #40]	@ 0x28
 8019dc4:	f000 f954 	bl	801a070 <_Bfree>
 8019dc8:	9b07      	ldr	r3, [sp, #28]
 8019dca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019dcc:	9e04      	ldr	r6, [sp, #16]
 8019dce:	ea42 0103 	orr.w	r1, r2, r3
 8019dd2:	9b08      	ldr	r3, [sp, #32]
 8019dd4:	4319      	orrs	r1, r3
 8019dd6:	d10f      	bne.n	8019df8 <_dtoa_r+0x958>
 8019dd8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8019ddc:	d028      	beq.n	8019e30 <_dtoa_r+0x990>
 8019dde:	9b06      	ldr	r3, [sp, #24]
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	dd02      	ble.n	8019dea <_dtoa_r+0x94a>
 8019de4:	9b02      	ldr	r3, [sp, #8]
 8019de6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8019dea:	f88b a000 	strb.w	sl, [fp]
 8019dee:	e55e      	b.n	80198ae <_dtoa_r+0x40e>
 8019df0:	4628      	mov	r0, r5
 8019df2:	e7bd      	b.n	8019d70 <_dtoa_r+0x8d0>
 8019df4:	2201      	movs	r2, #1
 8019df6:	e7e2      	b.n	8019dbe <_dtoa_r+0x91e>
 8019df8:	9b06      	ldr	r3, [sp, #24]
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	db04      	blt.n	8019e08 <_dtoa_r+0x968>
 8019dfe:	9907      	ldr	r1, [sp, #28]
 8019e00:	430b      	orrs	r3, r1
 8019e02:	9908      	ldr	r1, [sp, #32]
 8019e04:	430b      	orrs	r3, r1
 8019e06:	d120      	bne.n	8019e4a <_dtoa_r+0x9aa>
 8019e08:	2a00      	cmp	r2, #0
 8019e0a:	ddee      	ble.n	8019dea <_dtoa_r+0x94a>
 8019e0c:	9901      	ldr	r1, [sp, #4]
 8019e0e:	2201      	movs	r2, #1
 8019e10:	4648      	mov	r0, r9
 8019e12:	f000 faf3 	bl	801a3fc <__lshift>
 8019e16:	4621      	mov	r1, r4
 8019e18:	9001      	str	r0, [sp, #4]
 8019e1a:	f000 fb5b 	bl	801a4d4 <__mcmp>
 8019e1e:	2800      	cmp	r0, #0
 8019e20:	dc03      	bgt.n	8019e2a <_dtoa_r+0x98a>
 8019e22:	d1e2      	bne.n	8019dea <_dtoa_r+0x94a>
 8019e24:	f01a 0f01 	tst.w	sl, #1
 8019e28:	d0df      	beq.n	8019dea <_dtoa_r+0x94a>
 8019e2a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8019e2e:	d1d9      	bne.n	8019de4 <_dtoa_r+0x944>
 8019e30:	2339      	movs	r3, #57	@ 0x39
 8019e32:	f88b 3000 	strb.w	r3, [fp]
 8019e36:	4633      	mov	r3, r6
 8019e38:	461e      	mov	r6, r3
 8019e3a:	3b01      	subs	r3, #1
 8019e3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8019e40:	2a39      	cmp	r2, #57	@ 0x39
 8019e42:	d052      	beq.n	8019eea <_dtoa_r+0xa4a>
 8019e44:	3201      	adds	r2, #1
 8019e46:	701a      	strb	r2, [r3, #0]
 8019e48:	e531      	b.n	80198ae <_dtoa_r+0x40e>
 8019e4a:	2a00      	cmp	r2, #0
 8019e4c:	dd07      	ble.n	8019e5e <_dtoa_r+0x9be>
 8019e4e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8019e52:	d0ed      	beq.n	8019e30 <_dtoa_r+0x990>
 8019e54:	f10a 0301 	add.w	r3, sl, #1
 8019e58:	f88b 3000 	strb.w	r3, [fp]
 8019e5c:	e527      	b.n	80198ae <_dtoa_r+0x40e>
 8019e5e:	9b04      	ldr	r3, [sp, #16]
 8019e60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019e62:	f803 ac01 	strb.w	sl, [r3, #-1]
 8019e66:	4293      	cmp	r3, r2
 8019e68:	d029      	beq.n	8019ebe <_dtoa_r+0xa1e>
 8019e6a:	9901      	ldr	r1, [sp, #4]
 8019e6c:	2300      	movs	r3, #0
 8019e6e:	220a      	movs	r2, #10
 8019e70:	4648      	mov	r0, r9
 8019e72:	f000 f91f 	bl	801a0b4 <__multadd>
 8019e76:	45a8      	cmp	r8, r5
 8019e78:	9001      	str	r0, [sp, #4]
 8019e7a:	f04f 0300 	mov.w	r3, #0
 8019e7e:	f04f 020a 	mov.w	r2, #10
 8019e82:	4641      	mov	r1, r8
 8019e84:	4648      	mov	r0, r9
 8019e86:	d107      	bne.n	8019e98 <_dtoa_r+0x9f8>
 8019e88:	f000 f914 	bl	801a0b4 <__multadd>
 8019e8c:	4680      	mov	r8, r0
 8019e8e:	4605      	mov	r5, r0
 8019e90:	9b04      	ldr	r3, [sp, #16]
 8019e92:	3301      	adds	r3, #1
 8019e94:	9304      	str	r3, [sp, #16]
 8019e96:	e776      	b.n	8019d86 <_dtoa_r+0x8e6>
 8019e98:	f000 f90c 	bl	801a0b4 <__multadd>
 8019e9c:	4629      	mov	r1, r5
 8019e9e:	4680      	mov	r8, r0
 8019ea0:	2300      	movs	r3, #0
 8019ea2:	220a      	movs	r2, #10
 8019ea4:	4648      	mov	r0, r9
 8019ea6:	f000 f905 	bl	801a0b4 <__multadd>
 8019eaa:	4605      	mov	r5, r0
 8019eac:	e7f0      	b.n	8019e90 <_dtoa_r+0x9f0>
 8019eae:	f1bb 0f00 	cmp.w	fp, #0
 8019eb2:	bfcc      	ite	gt
 8019eb4:	465e      	movgt	r6, fp
 8019eb6:	2601      	movle	r6, #1
 8019eb8:	443e      	add	r6, r7
 8019eba:	f04f 0800 	mov.w	r8, #0
 8019ebe:	9901      	ldr	r1, [sp, #4]
 8019ec0:	2201      	movs	r2, #1
 8019ec2:	4648      	mov	r0, r9
 8019ec4:	f000 fa9a 	bl	801a3fc <__lshift>
 8019ec8:	4621      	mov	r1, r4
 8019eca:	9001      	str	r0, [sp, #4]
 8019ecc:	f000 fb02 	bl	801a4d4 <__mcmp>
 8019ed0:	2800      	cmp	r0, #0
 8019ed2:	dcb0      	bgt.n	8019e36 <_dtoa_r+0x996>
 8019ed4:	d102      	bne.n	8019edc <_dtoa_r+0xa3c>
 8019ed6:	f01a 0f01 	tst.w	sl, #1
 8019eda:	d1ac      	bne.n	8019e36 <_dtoa_r+0x996>
 8019edc:	4633      	mov	r3, r6
 8019ede:	461e      	mov	r6, r3
 8019ee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019ee4:	2a30      	cmp	r2, #48	@ 0x30
 8019ee6:	d0fa      	beq.n	8019ede <_dtoa_r+0xa3e>
 8019ee8:	e4e1      	b.n	80198ae <_dtoa_r+0x40e>
 8019eea:	429f      	cmp	r7, r3
 8019eec:	d1a4      	bne.n	8019e38 <_dtoa_r+0x998>
 8019eee:	9b05      	ldr	r3, [sp, #20]
 8019ef0:	3301      	adds	r3, #1
 8019ef2:	9305      	str	r3, [sp, #20]
 8019ef4:	2331      	movs	r3, #49	@ 0x31
 8019ef6:	703b      	strb	r3, [r7, #0]
 8019ef8:	e4d9      	b.n	80198ae <_dtoa_r+0x40e>
 8019efa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019efc:	4f16      	ldr	r7, [pc, #88]	@ (8019f58 <_dtoa_r+0xab8>)
 8019efe:	b11b      	cbz	r3, 8019f08 <_dtoa_r+0xa68>
 8019f00:	f107 0308 	add.w	r3, r7, #8
 8019f04:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8019f06:	6013      	str	r3, [r2, #0]
 8019f08:	4638      	mov	r0, r7
 8019f0a:	b011      	add	sp, #68	@ 0x44
 8019f0c:	ecbd 8b02 	vpop	{d8}
 8019f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f14:	9b07      	ldr	r3, [sp, #28]
 8019f16:	2b01      	cmp	r3, #1
 8019f18:	f77f ae2c 	ble.w	8019b74 <_dtoa_r+0x6d4>
 8019f1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019f1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019f20:	2001      	movs	r0, #1
 8019f22:	e64c      	b.n	8019bbe <_dtoa_r+0x71e>
 8019f24:	f1bb 0f00 	cmp.w	fp, #0
 8019f28:	f77f aed8 	ble.w	8019cdc <_dtoa_r+0x83c>
 8019f2c:	463e      	mov	r6, r7
 8019f2e:	9801      	ldr	r0, [sp, #4]
 8019f30:	4621      	mov	r1, r4
 8019f32:	f7ff fa2b 	bl	801938c <quorem>
 8019f36:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8019f3a:	f806 ab01 	strb.w	sl, [r6], #1
 8019f3e:	1bf2      	subs	r2, r6, r7
 8019f40:	4593      	cmp	fp, r2
 8019f42:	ddb4      	ble.n	8019eae <_dtoa_r+0xa0e>
 8019f44:	9901      	ldr	r1, [sp, #4]
 8019f46:	2300      	movs	r3, #0
 8019f48:	220a      	movs	r2, #10
 8019f4a:	4648      	mov	r0, r9
 8019f4c:	f000 f8b2 	bl	801a0b4 <__multadd>
 8019f50:	9001      	str	r0, [sp, #4]
 8019f52:	e7ec      	b.n	8019f2e <_dtoa_r+0xa8e>
 8019f54:	0801b7a4 	.word	0x0801b7a4
 8019f58:	0801b73f 	.word	0x0801b73f

08019f5c <_free_r>:
 8019f5c:	b538      	push	{r3, r4, r5, lr}
 8019f5e:	4605      	mov	r5, r0
 8019f60:	2900      	cmp	r1, #0
 8019f62:	d041      	beq.n	8019fe8 <_free_r+0x8c>
 8019f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019f68:	1f0c      	subs	r4, r1, #4
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	bfb8      	it	lt
 8019f6e:	18e4      	addlt	r4, r4, r3
 8019f70:	f7fe fba8 	bl	80186c4 <__malloc_lock>
 8019f74:	4a1d      	ldr	r2, [pc, #116]	@ (8019fec <_free_r+0x90>)
 8019f76:	6813      	ldr	r3, [r2, #0]
 8019f78:	b933      	cbnz	r3, 8019f88 <_free_r+0x2c>
 8019f7a:	6063      	str	r3, [r4, #4]
 8019f7c:	6014      	str	r4, [r2, #0]
 8019f7e:	4628      	mov	r0, r5
 8019f80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019f84:	f7fe bba4 	b.w	80186d0 <__malloc_unlock>
 8019f88:	42a3      	cmp	r3, r4
 8019f8a:	d908      	bls.n	8019f9e <_free_r+0x42>
 8019f8c:	6820      	ldr	r0, [r4, #0]
 8019f8e:	1821      	adds	r1, r4, r0
 8019f90:	428b      	cmp	r3, r1
 8019f92:	bf01      	itttt	eq
 8019f94:	6819      	ldreq	r1, [r3, #0]
 8019f96:	685b      	ldreq	r3, [r3, #4]
 8019f98:	1809      	addeq	r1, r1, r0
 8019f9a:	6021      	streq	r1, [r4, #0]
 8019f9c:	e7ed      	b.n	8019f7a <_free_r+0x1e>
 8019f9e:	461a      	mov	r2, r3
 8019fa0:	685b      	ldr	r3, [r3, #4]
 8019fa2:	b10b      	cbz	r3, 8019fa8 <_free_r+0x4c>
 8019fa4:	42a3      	cmp	r3, r4
 8019fa6:	d9fa      	bls.n	8019f9e <_free_r+0x42>
 8019fa8:	6811      	ldr	r1, [r2, #0]
 8019faa:	1850      	adds	r0, r2, r1
 8019fac:	42a0      	cmp	r0, r4
 8019fae:	d10b      	bne.n	8019fc8 <_free_r+0x6c>
 8019fb0:	6820      	ldr	r0, [r4, #0]
 8019fb2:	4401      	add	r1, r0
 8019fb4:	1850      	adds	r0, r2, r1
 8019fb6:	4283      	cmp	r3, r0
 8019fb8:	6011      	str	r1, [r2, #0]
 8019fba:	d1e0      	bne.n	8019f7e <_free_r+0x22>
 8019fbc:	6818      	ldr	r0, [r3, #0]
 8019fbe:	685b      	ldr	r3, [r3, #4]
 8019fc0:	6053      	str	r3, [r2, #4]
 8019fc2:	4408      	add	r0, r1
 8019fc4:	6010      	str	r0, [r2, #0]
 8019fc6:	e7da      	b.n	8019f7e <_free_r+0x22>
 8019fc8:	d902      	bls.n	8019fd0 <_free_r+0x74>
 8019fca:	230c      	movs	r3, #12
 8019fcc:	602b      	str	r3, [r5, #0]
 8019fce:	e7d6      	b.n	8019f7e <_free_r+0x22>
 8019fd0:	6820      	ldr	r0, [r4, #0]
 8019fd2:	1821      	adds	r1, r4, r0
 8019fd4:	428b      	cmp	r3, r1
 8019fd6:	bf04      	itt	eq
 8019fd8:	6819      	ldreq	r1, [r3, #0]
 8019fda:	685b      	ldreq	r3, [r3, #4]
 8019fdc:	6063      	str	r3, [r4, #4]
 8019fde:	bf04      	itt	eq
 8019fe0:	1809      	addeq	r1, r1, r0
 8019fe2:	6021      	streq	r1, [r4, #0]
 8019fe4:	6054      	str	r4, [r2, #4]
 8019fe6:	e7ca      	b.n	8019f7e <_free_r+0x22>
 8019fe8:	bd38      	pop	{r3, r4, r5, pc}
 8019fea:	bf00      	nop
 8019fec:	2402795c 	.word	0x2402795c

08019ff0 <_Balloc>:
 8019ff0:	b570      	push	{r4, r5, r6, lr}
 8019ff2:	69c6      	ldr	r6, [r0, #28]
 8019ff4:	4604      	mov	r4, r0
 8019ff6:	460d      	mov	r5, r1
 8019ff8:	b976      	cbnz	r6, 801a018 <_Balloc+0x28>
 8019ffa:	2010      	movs	r0, #16
 8019ffc:	f7fe fab8 	bl	8018570 <malloc>
 801a000:	4602      	mov	r2, r0
 801a002:	61e0      	str	r0, [r4, #28]
 801a004:	b920      	cbnz	r0, 801a010 <_Balloc+0x20>
 801a006:	4b18      	ldr	r3, [pc, #96]	@ (801a068 <_Balloc+0x78>)
 801a008:	4818      	ldr	r0, [pc, #96]	@ (801a06c <_Balloc+0x7c>)
 801a00a:	216b      	movs	r1, #107	@ 0x6b
 801a00c:	f7ff f9a0 	bl	8019350 <__assert_func>
 801a010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a014:	6006      	str	r6, [r0, #0]
 801a016:	60c6      	str	r6, [r0, #12]
 801a018:	69e6      	ldr	r6, [r4, #28]
 801a01a:	68f3      	ldr	r3, [r6, #12]
 801a01c:	b183      	cbz	r3, 801a040 <_Balloc+0x50>
 801a01e:	69e3      	ldr	r3, [r4, #28]
 801a020:	68db      	ldr	r3, [r3, #12]
 801a022:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a026:	b9b8      	cbnz	r0, 801a058 <_Balloc+0x68>
 801a028:	2101      	movs	r1, #1
 801a02a:	fa01 f605 	lsl.w	r6, r1, r5
 801a02e:	1d72      	adds	r2, r6, #5
 801a030:	0092      	lsls	r2, r2, #2
 801a032:	4620      	mov	r0, r4
 801a034:	f000 fd8d 	bl	801ab52 <_calloc_r>
 801a038:	b160      	cbz	r0, 801a054 <_Balloc+0x64>
 801a03a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a03e:	e00e      	b.n	801a05e <_Balloc+0x6e>
 801a040:	2221      	movs	r2, #33	@ 0x21
 801a042:	2104      	movs	r1, #4
 801a044:	4620      	mov	r0, r4
 801a046:	f000 fd84 	bl	801ab52 <_calloc_r>
 801a04a:	69e3      	ldr	r3, [r4, #28]
 801a04c:	60f0      	str	r0, [r6, #12]
 801a04e:	68db      	ldr	r3, [r3, #12]
 801a050:	2b00      	cmp	r3, #0
 801a052:	d1e4      	bne.n	801a01e <_Balloc+0x2e>
 801a054:	2000      	movs	r0, #0
 801a056:	bd70      	pop	{r4, r5, r6, pc}
 801a058:	6802      	ldr	r2, [r0, #0]
 801a05a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a05e:	2300      	movs	r3, #0
 801a060:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a064:	e7f7      	b.n	801a056 <_Balloc+0x66>
 801a066:	bf00      	nop
 801a068:	0801b660 	.word	0x0801b660
 801a06c:	0801b7b5 	.word	0x0801b7b5

0801a070 <_Bfree>:
 801a070:	b570      	push	{r4, r5, r6, lr}
 801a072:	69c6      	ldr	r6, [r0, #28]
 801a074:	4605      	mov	r5, r0
 801a076:	460c      	mov	r4, r1
 801a078:	b976      	cbnz	r6, 801a098 <_Bfree+0x28>
 801a07a:	2010      	movs	r0, #16
 801a07c:	f7fe fa78 	bl	8018570 <malloc>
 801a080:	4602      	mov	r2, r0
 801a082:	61e8      	str	r0, [r5, #28]
 801a084:	b920      	cbnz	r0, 801a090 <_Bfree+0x20>
 801a086:	4b09      	ldr	r3, [pc, #36]	@ (801a0ac <_Bfree+0x3c>)
 801a088:	4809      	ldr	r0, [pc, #36]	@ (801a0b0 <_Bfree+0x40>)
 801a08a:	218f      	movs	r1, #143	@ 0x8f
 801a08c:	f7ff f960 	bl	8019350 <__assert_func>
 801a090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a094:	6006      	str	r6, [r0, #0]
 801a096:	60c6      	str	r6, [r0, #12]
 801a098:	b13c      	cbz	r4, 801a0aa <_Bfree+0x3a>
 801a09a:	69eb      	ldr	r3, [r5, #28]
 801a09c:	6862      	ldr	r2, [r4, #4]
 801a09e:	68db      	ldr	r3, [r3, #12]
 801a0a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a0a4:	6021      	str	r1, [r4, #0]
 801a0a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a0aa:	bd70      	pop	{r4, r5, r6, pc}
 801a0ac:	0801b660 	.word	0x0801b660
 801a0b0:	0801b7b5 	.word	0x0801b7b5

0801a0b4 <__multadd>:
 801a0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0b8:	690d      	ldr	r5, [r1, #16]
 801a0ba:	4607      	mov	r7, r0
 801a0bc:	460c      	mov	r4, r1
 801a0be:	461e      	mov	r6, r3
 801a0c0:	f101 0c14 	add.w	ip, r1, #20
 801a0c4:	2000      	movs	r0, #0
 801a0c6:	f8dc 3000 	ldr.w	r3, [ip]
 801a0ca:	b299      	uxth	r1, r3
 801a0cc:	fb02 6101 	mla	r1, r2, r1, r6
 801a0d0:	0c1e      	lsrs	r6, r3, #16
 801a0d2:	0c0b      	lsrs	r3, r1, #16
 801a0d4:	fb02 3306 	mla	r3, r2, r6, r3
 801a0d8:	b289      	uxth	r1, r1
 801a0da:	3001      	adds	r0, #1
 801a0dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801a0e0:	4285      	cmp	r5, r0
 801a0e2:	f84c 1b04 	str.w	r1, [ip], #4
 801a0e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801a0ea:	dcec      	bgt.n	801a0c6 <__multadd+0x12>
 801a0ec:	b30e      	cbz	r6, 801a132 <__multadd+0x7e>
 801a0ee:	68a3      	ldr	r3, [r4, #8]
 801a0f0:	42ab      	cmp	r3, r5
 801a0f2:	dc19      	bgt.n	801a128 <__multadd+0x74>
 801a0f4:	6861      	ldr	r1, [r4, #4]
 801a0f6:	4638      	mov	r0, r7
 801a0f8:	3101      	adds	r1, #1
 801a0fa:	f7ff ff79 	bl	8019ff0 <_Balloc>
 801a0fe:	4680      	mov	r8, r0
 801a100:	b928      	cbnz	r0, 801a10e <__multadd+0x5a>
 801a102:	4602      	mov	r2, r0
 801a104:	4b0c      	ldr	r3, [pc, #48]	@ (801a138 <__multadd+0x84>)
 801a106:	480d      	ldr	r0, [pc, #52]	@ (801a13c <__multadd+0x88>)
 801a108:	21ba      	movs	r1, #186	@ 0xba
 801a10a:	f7ff f921 	bl	8019350 <__assert_func>
 801a10e:	6922      	ldr	r2, [r4, #16]
 801a110:	3202      	adds	r2, #2
 801a112:	f104 010c 	add.w	r1, r4, #12
 801a116:	0092      	lsls	r2, r2, #2
 801a118:	300c      	adds	r0, #12
 801a11a:	f7ff f90a 	bl	8019332 <memcpy>
 801a11e:	4621      	mov	r1, r4
 801a120:	4638      	mov	r0, r7
 801a122:	f7ff ffa5 	bl	801a070 <_Bfree>
 801a126:	4644      	mov	r4, r8
 801a128:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a12c:	3501      	adds	r5, #1
 801a12e:	615e      	str	r6, [r3, #20]
 801a130:	6125      	str	r5, [r4, #16]
 801a132:	4620      	mov	r0, r4
 801a134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a138:	0801b7a4 	.word	0x0801b7a4
 801a13c:	0801b7b5 	.word	0x0801b7b5

0801a140 <__hi0bits>:
 801a140:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801a144:	4603      	mov	r3, r0
 801a146:	bf36      	itet	cc
 801a148:	0403      	lslcc	r3, r0, #16
 801a14a:	2000      	movcs	r0, #0
 801a14c:	2010      	movcc	r0, #16
 801a14e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a152:	bf3c      	itt	cc
 801a154:	021b      	lslcc	r3, r3, #8
 801a156:	3008      	addcc	r0, #8
 801a158:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a15c:	bf3c      	itt	cc
 801a15e:	011b      	lslcc	r3, r3, #4
 801a160:	3004      	addcc	r0, #4
 801a162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a166:	bf3c      	itt	cc
 801a168:	009b      	lslcc	r3, r3, #2
 801a16a:	3002      	addcc	r0, #2
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	db05      	blt.n	801a17c <__hi0bits+0x3c>
 801a170:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801a174:	f100 0001 	add.w	r0, r0, #1
 801a178:	bf08      	it	eq
 801a17a:	2020      	moveq	r0, #32
 801a17c:	4770      	bx	lr

0801a17e <__lo0bits>:
 801a17e:	6803      	ldr	r3, [r0, #0]
 801a180:	4602      	mov	r2, r0
 801a182:	f013 0007 	ands.w	r0, r3, #7
 801a186:	d00b      	beq.n	801a1a0 <__lo0bits+0x22>
 801a188:	07d9      	lsls	r1, r3, #31
 801a18a:	d421      	bmi.n	801a1d0 <__lo0bits+0x52>
 801a18c:	0798      	lsls	r0, r3, #30
 801a18e:	bf49      	itett	mi
 801a190:	085b      	lsrmi	r3, r3, #1
 801a192:	089b      	lsrpl	r3, r3, #2
 801a194:	2001      	movmi	r0, #1
 801a196:	6013      	strmi	r3, [r2, #0]
 801a198:	bf5c      	itt	pl
 801a19a:	6013      	strpl	r3, [r2, #0]
 801a19c:	2002      	movpl	r0, #2
 801a19e:	4770      	bx	lr
 801a1a0:	b299      	uxth	r1, r3
 801a1a2:	b909      	cbnz	r1, 801a1a8 <__lo0bits+0x2a>
 801a1a4:	0c1b      	lsrs	r3, r3, #16
 801a1a6:	2010      	movs	r0, #16
 801a1a8:	b2d9      	uxtb	r1, r3
 801a1aa:	b909      	cbnz	r1, 801a1b0 <__lo0bits+0x32>
 801a1ac:	3008      	adds	r0, #8
 801a1ae:	0a1b      	lsrs	r3, r3, #8
 801a1b0:	0719      	lsls	r1, r3, #28
 801a1b2:	bf04      	itt	eq
 801a1b4:	091b      	lsreq	r3, r3, #4
 801a1b6:	3004      	addeq	r0, #4
 801a1b8:	0799      	lsls	r1, r3, #30
 801a1ba:	bf04      	itt	eq
 801a1bc:	089b      	lsreq	r3, r3, #2
 801a1be:	3002      	addeq	r0, #2
 801a1c0:	07d9      	lsls	r1, r3, #31
 801a1c2:	d403      	bmi.n	801a1cc <__lo0bits+0x4e>
 801a1c4:	085b      	lsrs	r3, r3, #1
 801a1c6:	f100 0001 	add.w	r0, r0, #1
 801a1ca:	d003      	beq.n	801a1d4 <__lo0bits+0x56>
 801a1cc:	6013      	str	r3, [r2, #0]
 801a1ce:	4770      	bx	lr
 801a1d0:	2000      	movs	r0, #0
 801a1d2:	4770      	bx	lr
 801a1d4:	2020      	movs	r0, #32
 801a1d6:	4770      	bx	lr

0801a1d8 <__i2b>:
 801a1d8:	b510      	push	{r4, lr}
 801a1da:	460c      	mov	r4, r1
 801a1dc:	2101      	movs	r1, #1
 801a1de:	f7ff ff07 	bl	8019ff0 <_Balloc>
 801a1e2:	4602      	mov	r2, r0
 801a1e4:	b928      	cbnz	r0, 801a1f2 <__i2b+0x1a>
 801a1e6:	4b05      	ldr	r3, [pc, #20]	@ (801a1fc <__i2b+0x24>)
 801a1e8:	4805      	ldr	r0, [pc, #20]	@ (801a200 <__i2b+0x28>)
 801a1ea:	f240 1145 	movw	r1, #325	@ 0x145
 801a1ee:	f7ff f8af 	bl	8019350 <__assert_func>
 801a1f2:	2301      	movs	r3, #1
 801a1f4:	6144      	str	r4, [r0, #20]
 801a1f6:	6103      	str	r3, [r0, #16]
 801a1f8:	bd10      	pop	{r4, pc}
 801a1fa:	bf00      	nop
 801a1fc:	0801b7a4 	.word	0x0801b7a4
 801a200:	0801b7b5 	.word	0x0801b7b5

0801a204 <__multiply>:
 801a204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a208:	4617      	mov	r7, r2
 801a20a:	690a      	ldr	r2, [r1, #16]
 801a20c:	693b      	ldr	r3, [r7, #16]
 801a20e:	429a      	cmp	r2, r3
 801a210:	bfa8      	it	ge
 801a212:	463b      	movge	r3, r7
 801a214:	4689      	mov	r9, r1
 801a216:	bfa4      	itt	ge
 801a218:	460f      	movge	r7, r1
 801a21a:	4699      	movge	r9, r3
 801a21c:	693d      	ldr	r5, [r7, #16]
 801a21e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a222:	68bb      	ldr	r3, [r7, #8]
 801a224:	6879      	ldr	r1, [r7, #4]
 801a226:	eb05 060a 	add.w	r6, r5, sl
 801a22a:	42b3      	cmp	r3, r6
 801a22c:	b085      	sub	sp, #20
 801a22e:	bfb8      	it	lt
 801a230:	3101      	addlt	r1, #1
 801a232:	f7ff fedd 	bl	8019ff0 <_Balloc>
 801a236:	b930      	cbnz	r0, 801a246 <__multiply+0x42>
 801a238:	4602      	mov	r2, r0
 801a23a:	4b41      	ldr	r3, [pc, #260]	@ (801a340 <__multiply+0x13c>)
 801a23c:	4841      	ldr	r0, [pc, #260]	@ (801a344 <__multiply+0x140>)
 801a23e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801a242:	f7ff f885 	bl	8019350 <__assert_func>
 801a246:	f100 0414 	add.w	r4, r0, #20
 801a24a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801a24e:	4623      	mov	r3, r4
 801a250:	2200      	movs	r2, #0
 801a252:	4573      	cmp	r3, lr
 801a254:	d320      	bcc.n	801a298 <__multiply+0x94>
 801a256:	f107 0814 	add.w	r8, r7, #20
 801a25a:	f109 0114 	add.w	r1, r9, #20
 801a25e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801a262:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801a266:	9302      	str	r3, [sp, #8]
 801a268:	1beb      	subs	r3, r5, r7
 801a26a:	3b15      	subs	r3, #21
 801a26c:	f023 0303 	bic.w	r3, r3, #3
 801a270:	3304      	adds	r3, #4
 801a272:	3715      	adds	r7, #21
 801a274:	42bd      	cmp	r5, r7
 801a276:	bf38      	it	cc
 801a278:	2304      	movcc	r3, #4
 801a27a:	9301      	str	r3, [sp, #4]
 801a27c:	9b02      	ldr	r3, [sp, #8]
 801a27e:	9103      	str	r1, [sp, #12]
 801a280:	428b      	cmp	r3, r1
 801a282:	d80c      	bhi.n	801a29e <__multiply+0x9a>
 801a284:	2e00      	cmp	r6, #0
 801a286:	dd03      	ble.n	801a290 <__multiply+0x8c>
 801a288:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d055      	beq.n	801a33c <__multiply+0x138>
 801a290:	6106      	str	r6, [r0, #16]
 801a292:	b005      	add	sp, #20
 801a294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a298:	f843 2b04 	str.w	r2, [r3], #4
 801a29c:	e7d9      	b.n	801a252 <__multiply+0x4e>
 801a29e:	f8b1 a000 	ldrh.w	sl, [r1]
 801a2a2:	f1ba 0f00 	cmp.w	sl, #0
 801a2a6:	d01f      	beq.n	801a2e8 <__multiply+0xe4>
 801a2a8:	46c4      	mov	ip, r8
 801a2aa:	46a1      	mov	r9, r4
 801a2ac:	2700      	movs	r7, #0
 801a2ae:	f85c 2b04 	ldr.w	r2, [ip], #4
 801a2b2:	f8d9 3000 	ldr.w	r3, [r9]
 801a2b6:	fa1f fb82 	uxth.w	fp, r2
 801a2ba:	b29b      	uxth	r3, r3
 801a2bc:	fb0a 330b 	mla	r3, sl, fp, r3
 801a2c0:	443b      	add	r3, r7
 801a2c2:	f8d9 7000 	ldr.w	r7, [r9]
 801a2c6:	0c12      	lsrs	r2, r2, #16
 801a2c8:	0c3f      	lsrs	r7, r7, #16
 801a2ca:	fb0a 7202 	mla	r2, sl, r2, r7
 801a2ce:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801a2d2:	b29b      	uxth	r3, r3
 801a2d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a2d8:	4565      	cmp	r5, ip
 801a2da:	f849 3b04 	str.w	r3, [r9], #4
 801a2de:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801a2e2:	d8e4      	bhi.n	801a2ae <__multiply+0xaa>
 801a2e4:	9b01      	ldr	r3, [sp, #4]
 801a2e6:	50e7      	str	r7, [r4, r3]
 801a2e8:	9b03      	ldr	r3, [sp, #12]
 801a2ea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801a2ee:	3104      	adds	r1, #4
 801a2f0:	f1b9 0f00 	cmp.w	r9, #0
 801a2f4:	d020      	beq.n	801a338 <__multiply+0x134>
 801a2f6:	6823      	ldr	r3, [r4, #0]
 801a2f8:	4647      	mov	r7, r8
 801a2fa:	46a4      	mov	ip, r4
 801a2fc:	f04f 0a00 	mov.w	sl, #0
 801a300:	f8b7 b000 	ldrh.w	fp, [r7]
 801a304:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801a308:	fb09 220b 	mla	r2, r9, fp, r2
 801a30c:	4452      	add	r2, sl
 801a30e:	b29b      	uxth	r3, r3
 801a310:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a314:	f84c 3b04 	str.w	r3, [ip], #4
 801a318:	f857 3b04 	ldr.w	r3, [r7], #4
 801a31c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a320:	f8bc 3000 	ldrh.w	r3, [ip]
 801a324:	fb09 330a 	mla	r3, r9, sl, r3
 801a328:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801a32c:	42bd      	cmp	r5, r7
 801a32e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a332:	d8e5      	bhi.n	801a300 <__multiply+0xfc>
 801a334:	9a01      	ldr	r2, [sp, #4]
 801a336:	50a3      	str	r3, [r4, r2]
 801a338:	3404      	adds	r4, #4
 801a33a:	e79f      	b.n	801a27c <__multiply+0x78>
 801a33c:	3e01      	subs	r6, #1
 801a33e:	e7a1      	b.n	801a284 <__multiply+0x80>
 801a340:	0801b7a4 	.word	0x0801b7a4
 801a344:	0801b7b5 	.word	0x0801b7b5

0801a348 <__pow5mult>:
 801a348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a34c:	4615      	mov	r5, r2
 801a34e:	f012 0203 	ands.w	r2, r2, #3
 801a352:	4607      	mov	r7, r0
 801a354:	460e      	mov	r6, r1
 801a356:	d007      	beq.n	801a368 <__pow5mult+0x20>
 801a358:	4c25      	ldr	r4, [pc, #148]	@ (801a3f0 <__pow5mult+0xa8>)
 801a35a:	3a01      	subs	r2, #1
 801a35c:	2300      	movs	r3, #0
 801a35e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a362:	f7ff fea7 	bl	801a0b4 <__multadd>
 801a366:	4606      	mov	r6, r0
 801a368:	10ad      	asrs	r5, r5, #2
 801a36a:	d03d      	beq.n	801a3e8 <__pow5mult+0xa0>
 801a36c:	69fc      	ldr	r4, [r7, #28]
 801a36e:	b97c      	cbnz	r4, 801a390 <__pow5mult+0x48>
 801a370:	2010      	movs	r0, #16
 801a372:	f7fe f8fd 	bl	8018570 <malloc>
 801a376:	4602      	mov	r2, r0
 801a378:	61f8      	str	r0, [r7, #28]
 801a37a:	b928      	cbnz	r0, 801a388 <__pow5mult+0x40>
 801a37c:	4b1d      	ldr	r3, [pc, #116]	@ (801a3f4 <__pow5mult+0xac>)
 801a37e:	481e      	ldr	r0, [pc, #120]	@ (801a3f8 <__pow5mult+0xb0>)
 801a380:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801a384:	f7fe ffe4 	bl	8019350 <__assert_func>
 801a388:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a38c:	6004      	str	r4, [r0, #0]
 801a38e:	60c4      	str	r4, [r0, #12]
 801a390:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801a394:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a398:	b94c      	cbnz	r4, 801a3ae <__pow5mult+0x66>
 801a39a:	f240 2171 	movw	r1, #625	@ 0x271
 801a39e:	4638      	mov	r0, r7
 801a3a0:	f7ff ff1a 	bl	801a1d8 <__i2b>
 801a3a4:	2300      	movs	r3, #0
 801a3a6:	f8c8 0008 	str.w	r0, [r8, #8]
 801a3aa:	4604      	mov	r4, r0
 801a3ac:	6003      	str	r3, [r0, #0]
 801a3ae:	f04f 0900 	mov.w	r9, #0
 801a3b2:	07eb      	lsls	r3, r5, #31
 801a3b4:	d50a      	bpl.n	801a3cc <__pow5mult+0x84>
 801a3b6:	4631      	mov	r1, r6
 801a3b8:	4622      	mov	r2, r4
 801a3ba:	4638      	mov	r0, r7
 801a3bc:	f7ff ff22 	bl	801a204 <__multiply>
 801a3c0:	4631      	mov	r1, r6
 801a3c2:	4680      	mov	r8, r0
 801a3c4:	4638      	mov	r0, r7
 801a3c6:	f7ff fe53 	bl	801a070 <_Bfree>
 801a3ca:	4646      	mov	r6, r8
 801a3cc:	106d      	asrs	r5, r5, #1
 801a3ce:	d00b      	beq.n	801a3e8 <__pow5mult+0xa0>
 801a3d0:	6820      	ldr	r0, [r4, #0]
 801a3d2:	b938      	cbnz	r0, 801a3e4 <__pow5mult+0x9c>
 801a3d4:	4622      	mov	r2, r4
 801a3d6:	4621      	mov	r1, r4
 801a3d8:	4638      	mov	r0, r7
 801a3da:	f7ff ff13 	bl	801a204 <__multiply>
 801a3de:	6020      	str	r0, [r4, #0]
 801a3e0:	f8c0 9000 	str.w	r9, [r0]
 801a3e4:	4604      	mov	r4, r0
 801a3e6:	e7e4      	b.n	801a3b2 <__pow5mult+0x6a>
 801a3e8:	4630      	mov	r0, r6
 801a3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a3ee:	bf00      	nop
 801a3f0:	0801b82c 	.word	0x0801b82c
 801a3f4:	0801b660 	.word	0x0801b660
 801a3f8:	0801b7b5 	.word	0x0801b7b5

0801a3fc <__lshift>:
 801a3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a400:	460c      	mov	r4, r1
 801a402:	6849      	ldr	r1, [r1, #4]
 801a404:	6923      	ldr	r3, [r4, #16]
 801a406:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a40a:	68a3      	ldr	r3, [r4, #8]
 801a40c:	4607      	mov	r7, r0
 801a40e:	4691      	mov	r9, r2
 801a410:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a414:	f108 0601 	add.w	r6, r8, #1
 801a418:	42b3      	cmp	r3, r6
 801a41a:	db0b      	blt.n	801a434 <__lshift+0x38>
 801a41c:	4638      	mov	r0, r7
 801a41e:	f7ff fde7 	bl	8019ff0 <_Balloc>
 801a422:	4605      	mov	r5, r0
 801a424:	b948      	cbnz	r0, 801a43a <__lshift+0x3e>
 801a426:	4602      	mov	r2, r0
 801a428:	4b28      	ldr	r3, [pc, #160]	@ (801a4cc <__lshift+0xd0>)
 801a42a:	4829      	ldr	r0, [pc, #164]	@ (801a4d0 <__lshift+0xd4>)
 801a42c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801a430:	f7fe ff8e 	bl	8019350 <__assert_func>
 801a434:	3101      	adds	r1, #1
 801a436:	005b      	lsls	r3, r3, #1
 801a438:	e7ee      	b.n	801a418 <__lshift+0x1c>
 801a43a:	2300      	movs	r3, #0
 801a43c:	f100 0114 	add.w	r1, r0, #20
 801a440:	f100 0210 	add.w	r2, r0, #16
 801a444:	4618      	mov	r0, r3
 801a446:	4553      	cmp	r3, sl
 801a448:	db33      	blt.n	801a4b2 <__lshift+0xb6>
 801a44a:	6920      	ldr	r0, [r4, #16]
 801a44c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a450:	f104 0314 	add.w	r3, r4, #20
 801a454:	f019 091f 	ands.w	r9, r9, #31
 801a458:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a45c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a460:	d02b      	beq.n	801a4ba <__lshift+0xbe>
 801a462:	f1c9 0e20 	rsb	lr, r9, #32
 801a466:	468a      	mov	sl, r1
 801a468:	2200      	movs	r2, #0
 801a46a:	6818      	ldr	r0, [r3, #0]
 801a46c:	fa00 f009 	lsl.w	r0, r0, r9
 801a470:	4310      	orrs	r0, r2
 801a472:	f84a 0b04 	str.w	r0, [sl], #4
 801a476:	f853 2b04 	ldr.w	r2, [r3], #4
 801a47a:	459c      	cmp	ip, r3
 801a47c:	fa22 f20e 	lsr.w	r2, r2, lr
 801a480:	d8f3      	bhi.n	801a46a <__lshift+0x6e>
 801a482:	ebac 0304 	sub.w	r3, ip, r4
 801a486:	3b15      	subs	r3, #21
 801a488:	f023 0303 	bic.w	r3, r3, #3
 801a48c:	3304      	adds	r3, #4
 801a48e:	f104 0015 	add.w	r0, r4, #21
 801a492:	4560      	cmp	r0, ip
 801a494:	bf88      	it	hi
 801a496:	2304      	movhi	r3, #4
 801a498:	50ca      	str	r2, [r1, r3]
 801a49a:	b10a      	cbz	r2, 801a4a0 <__lshift+0xa4>
 801a49c:	f108 0602 	add.w	r6, r8, #2
 801a4a0:	3e01      	subs	r6, #1
 801a4a2:	4638      	mov	r0, r7
 801a4a4:	612e      	str	r6, [r5, #16]
 801a4a6:	4621      	mov	r1, r4
 801a4a8:	f7ff fde2 	bl	801a070 <_Bfree>
 801a4ac:	4628      	mov	r0, r5
 801a4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4b2:	f842 0f04 	str.w	r0, [r2, #4]!
 801a4b6:	3301      	adds	r3, #1
 801a4b8:	e7c5      	b.n	801a446 <__lshift+0x4a>
 801a4ba:	3904      	subs	r1, #4
 801a4bc:	f853 2b04 	ldr.w	r2, [r3], #4
 801a4c0:	f841 2f04 	str.w	r2, [r1, #4]!
 801a4c4:	459c      	cmp	ip, r3
 801a4c6:	d8f9      	bhi.n	801a4bc <__lshift+0xc0>
 801a4c8:	e7ea      	b.n	801a4a0 <__lshift+0xa4>
 801a4ca:	bf00      	nop
 801a4cc:	0801b7a4 	.word	0x0801b7a4
 801a4d0:	0801b7b5 	.word	0x0801b7b5

0801a4d4 <__mcmp>:
 801a4d4:	690a      	ldr	r2, [r1, #16]
 801a4d6:	4603      	mov	r3, r0
 801a4d8:	6900      	ldr	r0, [r0, #16]
 801a4da:	1a80      	subs	r0, r0, r2
 801a4dc:	b530      	push	{r4, r5, lr}
 801a4de:	d10e      	bne.n	801a4fe <__mcmp+0x2a>
 801a4e0:	3314      	adds	r3, #20
 801a4e2:	3114      	adds	r1, #20
 801a4e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801a4e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801a4ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801a4f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801a4f4:	4295      	cmp	r5, r2
 801a4f6:	d003      	beq.n	801a500 <__mcmp+0x2c>
 801a4f8:	d205      	bcs.n	801a506 <__mcmp+0x32>
 801a4fa:	f04f 30ff 	mov.w	r0, #4294967295
 801a4fe:	bd30      	pop	{r4, r5, pc}
 801a500:	42a3      	cmp	r3, r4
 801a502:	d3f3      	bcc.n	801a4ec <__mcmp+0x18>
 801a504:	e7fb      	b.n	801a4fe <__mcmp+0x2a>
 801a506:	2001      	movs	r0, #1
 801a508:	e7f9      	b.n	801a4fe <__mcmp+0x2a>
	...

0801a50c <__mdiff>:
 801a50c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a510:	4689      	mov	r9, r1
 801a512:	4606      	mov	r6, r0
 801a514:	4611      	mov	r1, r2
 801a516:	4648      	mov	r0, r9
 801a518:	4614      	mov	r4, r2
 801a51a:	f7ff ffdb 	bl	801a4d4 <__mcmp>
 801a51e:	1e05      	subs	r5, r0, #0
 801a520:	d112      	bne.n	801a548 <__mdiff+0x3c>
 801a522:	4629      	mov	r1, r5
 801a524:	4630      	mov	r0, r6
 801a526:	f7ff fd63 	bl	8019ff0 <_Balloc>
 801a52a:	4602      	mov	r2, r0
 801a52c:	b928      	cbnz	r0, 801a53a <__mdiff+0x2e>
 801a52e:	4b3f      	ldr	r3, [pc, #252]	@ (801a62c <__mdiff+0x120>)
 801a530:	f240 2137 	movw	r1, #567	@ 0x237
 801a534:	483e      	ldr	r0, [pc, #248]	@ (801a630 <__mdiff+0x124>)
 801a536:	f7fe ff0b 	bl	8019350 <__assert_func>
 801a53a:	2301      	movs	r3, #1
 801a53c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a540:	4610      	mov	r0, r2
 801a542:	b003      	add	sp, #12
 801a544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a548:	bfbc      	itt	lt
 801a54a:	464b      	movlt	r3, r9
 801a54c:	46a1      	movlt	r9, r4
 801a54e:	4630      	mov	r0, r6
 801a550:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801a554:	bfba      	itte	lt
 801a556:	461c      	movlt	r4, r3
 801a558:	2501      	movlt	r5, #1
 801a55a:	2500      	movge	r5, #0
 801a55c:	f7ff fd48 	bl	8019ff0 <_Balloc>
 801a560:	4602      	mov	r2, r0
 801a562:	b918      	cbnz	r0, 801a56c <__mdiff+0x60>
 801a564:	4b31      	ldr	r3, [pc, #196]	@ (801a62c <__mdiff+0x120>)
 801a566:	f240 2145 	movw	r1, #581	@ 0x245
 801a56a:	e7e3      	b.n	801a534 <__mdiff+0x28>
 801a56c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801a570:	6926      	ldr	r6, [r4, #16]
 801a572:	60c5      	str	r5, [r0, #12]
 801a574:	f109 0310 	add.w	r3, r9, #16
 801a578:	f109 0514 	add.w	r5, r9, #20
 801a57c:	f104 0e14 	add.w	lr, r4, #20
 801a580:	f100 0b14 	add.w	fp, r0, #20
 801a584:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801a588:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801a58c:	9301      	str	r3, [sp, #4]
 801a58e:	46d9      	mov	r9, fp
 801a590:	f04f 0c00 	mov.w	ip, #0
 801a594:	9b01      	ldr	r3, [sp, #4]
 801a596:	f85e 0b04 	ldr.w	r0, [lr], #4
 801a59a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801a59e:	9301      	str	r3, [sp, #4]
 801a5a0:	fa1f f38a 	uxth.w	r3, sl
 801a5a4:	4619      	mov	r1, r3
 801a5a6:	b283      	uxth	r3, r0
 801a5a8:	1acb      	subs	r3, r1, r3
 801a5aa:	0c00      	lsrs	r0, r0, #16
 801a5ac:	4463      	add	r3, ip
 801a5ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801a5b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801a5b6:	b29b      	uxth	r3, r3
 801a5b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801a5bc:	4576      	cmp	r6, lr
 801a5be:	f849 3b04 	str.w	r3, [r9], #4
 801a5c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a5c6:	d8e5      	bhi.n	801a594 <__mdiff+0x88>
 801a5c8:	1b33      	subs	r3, r6, r4
 801a5ca:	3b15      	subs	r3, #21
 801a5cc:	f023 0303 	bic.w	r3, r3, #3
 801a5d0:	3415      	adds	r4, #21
 801a5d2:	3304      	adds	r3, #4
 801a5d4:	42a6      	cmp	r6, r4
 801a5d6:	bf38      	it	cc
 801a5d8:	2304      	movcc	r3, #4
 801a5da:	441d      	add	r5, r3
 801a5dc:	445b      	add	r3, fp
 801a5de:	461e      	mov	r6, r3
 801a5e0:	462c      	mov	r4, r5
 801a5e2:	4544      	cmp	r4, r8
 801a5e4:	d30e      	bcc.n	801a604 <__mdiff+0xf8>
 801a5e6:	f108 0103 	add.w	r1, r8, #3
 801a5ea:	1b49      	subs	r1, r1, r5
 801a5ec:	f021 0103 	bic.w	r1, r1, #3
 801a5f0:	3d03      	subs	r5, #3
 801a5f2:	45a8      	cmp	r8, r5
 801a5f4:	bf38      	it	cc
 801a5f6:	2100      	movcc	r1, #0
 801a5f8:	440b      	add	r3, r1
 801a5fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a5fe:	b191      	cbz	r1, 801a626 <__mdiff+0x11a>
 801a600:	6117      	str	r7, [r2, #16]
 801a602:	e79d      	b.n	801a540 <__mdiff+0x34>
 801a604:	f854 1b04 	ldr.w	r1, [r4], #4
 801a608:	46e6      	mov	lr, ip
 801a60a:	0c08      	lsrs	r0, r1, #16
 801a60c:	fa1c fc81 	uxtah	ip, ip, r1
 801a610:	4471      	add	r1, lr
 801a612:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801a616:	b289      	uxth	r1, r1
 801a618:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801a61c:	f846 1b04 	str.w	r1, [r6], #4
 801a620:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a624:	e7dd      	b.n	801a5e2 <__mdiff+0xd6>
 801a626:	3f01      	subs	r7, #1
 801a628:	e7e7      	b.n	801a5fa <__mdiff+0xee>
 801a62a:	bf00      	nop
 801a62c:	0801b7a4 	.word	0x0801b7a4
 801a630:	0801b7b5 	.word	0x0801b7b5

0801a634 <__d2b>:
 801a634:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a638:	460f      	mov	r7, r1
 801a63a:	2101      	movs	r1, #1
 801a63c:	ec59 8b10 	vmov	r8, r9, d0
 801a640:	4616      	mov	r6, r2
 801a642:	f7ff fcd5 	bl	8019ff0 <_Balloc>
 801a646:	4604      	mov	r4, r0
 801a648:	b930      	cbnz	r0, 801a658 <__d2b+0x24>
 801a64a:	4602      	mov	r2, r0
 801a64c:	4b23      	ldr	r3, [pc, #140]	@ (801a6dc <__d2b+0xa8>)
 801a64e:	4824      	ldr	r0, [pc, #144]	@ (801a6e0 <__d2b+0xac>)
 801a650:	f240 310f 	movw	r1, #783	@ 0x30f
 801a654:	f7fe fe7c 	bl	8019350 <__assert_func>
 801a658:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a65c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a660:	b10d      	cbz	r5, 801a666 <__d2b+0x32>
 801a662:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801a666:	9301      	str	r3, [sp, #4]
 801a668:	f1b8 0300 	subs.w	r3, r8, #0
 801a66c:	d023      	beq.n	801a6b6 <__d2b+0x82>
 801a66e:	4668      	mov	r0, sp
 801a670:	9300      	str	r3, [sp, #0]
 801a672:	f7ff fd84 	bl	801a17e <__lo0bits>
 801a676:	e9dd 1200 	ldrd	r1, r2, [sp]
 801a67a:	b1d0      	cbz	r0, 801a6b2 <__d2b+0x7e>
 801a67c:	f1c0 0320 	rsb	r3, r0, #32
 801a680:	fa02 f303 	lsl.w	r3, r2, r3
 801a684:	430b      	orrs	r3, r1
 801a686:	40c2      	lsrs	r2, r0
 801a688:	6163      	str	r3, [r4, #20]
 801a68a:	9201      	str	r2, [sp, #4]
 801a68c:	9b01      	ldr	r3, [sp, #4]
 801a68e:	61a3      	str	r3, [r4, #24]
 801a690:	2b00      	cmp	r3, #0
 801a692:	bf0c      	ite	eq
 801a694:	2201      	moveq	r2, #1
 801a696:	2202      	movne	r2, #2
 801a698:	6122      	str	r2, [r4, #16]
 801a69a:	b1a5      	cbz	r5, 801a6c6 <__d2b+0x92>
 801a69c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801a6a0:	4405      	add	r5, r0
 801a6a2:	603d      	str	r5, [r7, #0]
 801a6a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801a6a8:	6030      	str	r0, [r6, #0]
 801a6aa:	4620      	mov	r0, r4
 801a6ac:	b003      	add	sp, #12
 801a6ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a6b2:	6161      	str	r1, [r4, #20]
 801a6b4:	e7ea      	b.n	801a68c <__d2b+0x58>
 801a6b6:	a801      	add	r0, sp, #4
 801a6b8:	f7ff fd61 	bl	801a17e <__lo0bits>
 801a6bc:	9b01      	ldr	r3, [sp, #4]
 801a6be:	6163      	str	r3, [r4, #20]
 801a6c0:	3020      	adds	r0, #32
 801a6c2:	2201      	movs	r2, #1
 801a6c4:	e7e8      	b.n	801a698 <__d2b+0x64>
 801a6c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a6ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801a6ce:	6038      	str	r0, [r7, #0]
 801a6d0:	6918      	ldr	r0, [r3, #16]
 801a6d2:	f7ff fd35 	bl	801a140 <__hi0bits>
 801a6d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a6da:	e7e5      	b.n	801a6a8 <__d2b+0x74>
 801a6dc:	0801b7a4 	.word	0x0801b7a4
 801a6e0:	0801b7b5 	.word	0x0801b7b5

0801a6e4 <__ssputs_r>:
 801a6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a6e8:	688e      	ldr	r6, [r1, #8]
 801a6ea:	461f      	mov	r7, r3
 801a6ec:	42be      	cmp	r6, r7
 801a6ee:	680b      	ldr	r3, [r1, #0]
 801a6f0:	4682      	mov	sl, r0
 801a6f2:	460c      	mov	r4, r1
 801a6f4:	4690      	mov	r8, r2
 801a6f6:	d82d      	bhi.n	801a754 <__ssputs_r+0x70>
 801a6f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a6fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a700:	d026      	beq.n	801a750 <__ssputs_r+0x6c>
 801a702:	6965      	ldr	r5, [r4, #20]
 801a704:	6909      	ldr	r1, [r1, #16]
 801a706:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a70a:	eba3 0901 	sub.w	r9, r3, r1
 801a70e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a712:	1c7b      	adds	r3, r7, #1
 801a714:	444b      	add	r3, r9
 801a716:	106d      	asrs	r5, r5, #1
 801a718:	429d      	cmp	r5, r3
 801a71a:	bf38      	it	cc
 801a71c:	461d      	movcc	r5, r3
 801a71e:	0553      	lsls	r3, r2, #21
 801a720:	d527      	bpl.n	801a772 <__ssputs_r+0x8e>
 801a722:	4629      	mov	r1, r5
 801a724:	f7fd ff4e 	bl	80185c4 <_malloc_r>
 801a728:	4606      	mov	r6, r0
 801a72a:	b360      	cbz	r0, 801a786 <__ssputs_r+0xa2>
 801a72c:	6921      	ldr	r1, [r4, #16]
 801a72e:	464a      	mov	r2, r9
 801a730:	f7fe fdff 	bl	8019332 <memcpy>
 801a734:	89a3      	ldrh	r3, [r4, #12]
 801a736:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a73a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a73e:	81a3      	strh	r3, [r4, #12]
 801a740:	6126      	str	r6, [r4, #16]
 801a742:	6165      	str	r5, [r4, #20]
 801a744:	444e      	add	r6, r9
 801a746:	eba5 0509 	sub.w	r5, r5, r9
 801a74a:	6026      	str	r6, [r4, #0]
 801a74c:	60a5      	str	r5, [r4, #8]
 801a74e:	463e      	mov	r6, r7
 801a750:	42be      	cmp	r6, r7
 801a752:	d900      	bls.n	801a756 <__ssputs_r+0x72>
 801a754:	463e      	mov	r6, r7
 801a756:	6820      	ldr	r0, [r4, #0]
 801a758:	4632      	mov	r2, r6
 801a75a:	4641      	mov	r1, r8
 801a75c:	f000 f9d8 	bl	801ab10 <memmove>
 801a760:	68a3      	ldr	r3, [r4, #8]
 801a762:	1b9b      	subs	r3, r3, r6
 801a764:	60a3      	str	r3, [r4, #8]
 801a766:	6823      	ldr	r3, [r4, #0]
 801a768:	4433      	add	r3, r6
 801a76a:	6023      	str	r3, [r4, #0]
 801a76c:	2000      	movs	r0, #0
 801a76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a772:	462a      	mov	r2, r5
 801a774:	f000 fa13 	bl	801ab9e <_realloc_r>
 801a778:	4606      	mov	r6, r0
 801a77a:	2800      	cmp	r0, #0
 801a77c:	d1e0      	bne.n	801a740 <__ssputs_r+0x5c>
 801a77e:	6921      	ldr	r1, [r4, #16]
 801a780:	4650      	mov	r0, sl
 801a782:	f7ff fbeb 	bl	8019f5c <_free_r>
 801a786:	230c      	movs	r3, #12
 801a788:	f8ca 3000 	str.w	r3, [sl]
 801a78c:	89a3      	ldrh	r3, [r4, #12]
 801a78e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a792:	81a3      	strh	r3, [r4, #12]
 801a794:	f04f 30ff 	mov.w	r0, #4294967295
 801a798:	e7e9      	b.n	801a76e <__ssputs_r+0x8a>
	...

0801a79c <_svfiprintf_r>:
 801a79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7a0:	4698      	mov	r8, r3
 801a7a2:	898b      	ldrh	r3, [r1, #12]
 801a7a4:	061b      	lsls	r3, r3, #24
 801a7a6:	b09d      	sub	sp, #116	@ 0x74
 801a7a8:	4607      	mov	r7, r0
 801a7aa:	460d      	mov	r5, r1
 801a7ac:	4614      	mov	r4, r2
 801a7ae:	d510      	bpl.n	801a7d2 <_svfiprintf_r+0x36>
 801a7b0:	690b      	ldr	r3, [r1, #16]
 801a7b2:	b973      	cbnz	r3, 801a7d2 <_svfiprintf_r+0x36>
 801a7b4:	2140      	movs	r1, #64	@ 0x40
 801a7b6:	f7fd ff05 	bl	80185c4 <_malloc_r>
 801a7ba:	6028      	str	r0, [r5, #0]
 801a7bc:	6128      	str	r0, [r5, #16]
 801a7be:	b930      	cbnz	r0, 801a7ce <_svfiprintf_r+0x32>
 801a7c0:	230c      	movs	r3, #12
 801a7c2:	603b      	str	r3, [r7, #0]
 801a7c4:	f04f 30ff 	mov.w	r0, #4294967295
 801a7c8:	b01d      	add	sp, #116	@ 0x74
 801a7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7ce:	2340      	movs	r3, #64	@ 0x40
 801a7d0:	616b      	str	r3, [r5, #20]
 801a7d2:	2300      	movs	r3, #0
 801a7d4:	9309      	str	r3, [sp, #36]	@ 0x24
 801a7d6:	2320      	movs	r3, #32
 801a7d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a7dc:	f8cd 800c 	str.w	r8, [sp, #12]
 801a7e0:	2330      	movs	r3, #48	@ 0x30
 801a7e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a980 <_svfiprintf_r+0x1e4>
 801a7e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a7ea:	f04f 0901 	mov.w	r9, #1
 801a7ee:	4623      	mov	r3, r4
 801a7f0:	469a      	mov	sl, r3
 801a7f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a7f6:	b10a      	cbz	r2, 801a7fc <_svfiprintf_r+0x60>
 801a7f8:	2a25      	cmp	r2, #37	@ 0x25
 801a7fa:	d1f9      	bne.n	801a7f0 <_svfiprintf_r+0x54>
 801a7fc:	ebba 0b04 	subs.w	fp, sl, r4
 801a800:	d00b      	beq.n	801a81a <_svfiprintf_r+0x7e>
 801a802:	465b      	mov	r3, fp
 801a804:	4622      	mov	r2, r4
 801a806:	4629      	mov	r1, r5
 801a808:	4638      	mov	r0, r7
 801a80a:	f7ff ff6b 	bl	801a6e4 <__ssputs_r>
 801a80e:	3001      	adds	r0, #1
 801a810:	f000 80a7 	beq.w	801a962 <_svfiprintf_r+0x1c6>
 801a814:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a816:	445a      	add	r2, fp
 801a818:	9209      	str	r2, [sp, #36]	@ 0x24
 801a81a:	f89a 3000 	ldrb.w	r3, [sl]
 801a81e:	2b00      	cmp	r3, #0
 801a820:	f000 809f 	beq.w	801a962 <_svfiprintf_r+0x1c6>
 801a824:	2300      	movs	r3, #0
 801a826:	f04f 32ff 	mov.w	r2, #4294967295
 801a82a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a82e:	f10a 0a01 	add.w	sl, sl, #1
 801a832:	9304      	str	r3, [sp, #16]
 801a834:	9307      	str	r3, [sp, #28]
 801a836:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a83a:	931a      	str	r3, [sp, #104]	@ 0x68
 801a83c:	4654      	mov	r4, sl
 801a83e:	2205      	movs	r2, #5
 801a840:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a844:	484e      	ldr	r0, [pc, #312]	@ (801a980 <_svfiprintf_r+0x1e4>)
 801a846:	f7e5 fd4b 	bl	80002e0 <memchr>
 801a84a:	9a04      	ldr	r2, [sp, #16]
 801a84c:	b9d8      	cbnz	r0, 801a886 <_svfiprintf_r+0xea>
 801a84e:	06d0      	lsls	r0, r2, #27
 801a850:	bf44      	itt	mi
 801a852:	2320      	movmi	r3, #32
 801a854:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a858:	0711      	lsls	r1, r2, #28
 801a85a:	bf44      	itt	mi
 801a85c:	232b      	movmi	r3, #43	@ 0x2b
 801a85e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a862:	f89a 3000 	ldrb.w	r3, [sl]
 801a866:	2b2a      	cmp	r3, #42	@ 0x2a
 801a868:	d015      	beq.n	801a896 <_svfiprintf_r+0xfa>
 801a86a:	9a07      	ldr	r2, [sp, #28]
 801a86c:	4654      	mov	r4, sl
 801a86e:	2000      	movs	r0, #0
 801a870:	f04f 0c0a 	mov.w	ip, #10
 801a874:	4621      	mov	r1, r4
 801a876:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a87a:	3b30      	subs	r3, #48	@ 0x30
 801a87c:	2b09      	cmp	r3, #9
 801a87e:	d94b      	bls.n	801a918 <_svfiprintf_r+0x17c>
 801a880:	b1b0      	cbz	r0, 801a8b0 <_svfiprintf_r+0x114>
 801a882:	9207      	str	r2, [sp, #28]
 801a884:	e014      	b.n	801a8b0 <_svfiprintf_r+0x114>
 801a886:	eba0 0308 	sub.w	r3, r0, r8
 801a88a:	fa09 f303 	lsl.w	r3, r9, r3
 801a88e:	4313      	orrs	r3, r2
 801a890:	9304      	str	r3, [sp, #16]
 801a892:	46a2      	mov	sl, r4
 801a894:	e7d2      	b.n	801a83c <_svfiprintf_r+0xa0>
 801a896:	9b03      	ldr	r3, [sp, #12]
 801a898:	1d19      	adds	r1, r3, #4
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	9103      	str	r1, [sp, #12]
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	bfbb      	ittet	lt
 801a8a2:	425b      	neglt	r3, r3
 801a8a4:	f042 0202 	orrlt.w	r2, r2, #2
 801a8a8:	9307      	strge	r3, [sp, #28]
 801a8aa:	9307      	strlt	r3, [sp, #28]
 801a8ac:	bfb8      	it	lt
 801a8ae:	9204      	strlt	r2, [sp, #16]
 801a8b0:	7823      	ldrb	r3, [r4, #0]
 801a8b2:	2b2e      	cmp	r3, #46	@ 0x2e
 801a8b4:	d10a      	bne.n	801a8cc <_svfiprintf_r+0x130>
 801a8b6:	7863      	ldrb	r3, [r4, #1]
 801a8b8:	2b2a      	cmp	r3, #42	@ 0x2a
 801a8ba:	d132      	bne.n	801a922 <_svfiprintf_r+0x186>
 801a8bc:	9b03      	ldr	r3, [sp, #12]
 801a8be:	1d1a      	adds	r2, r3, #4
 801a8c0:	681b      	ldr	r3, [r3, #0]
 801a8c2:	9203      	str	r2, [sp, #12]
 801a8c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a8c8:	3402      	adds	r4, #2
 801a8ca:	9305      	str	r3, [sp, #20]
 801a8cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a990 <_svfiprintf_r+0x1f4>
 801a8d0:	7821      	ldrb	r1, [r4, #0]
 801a8d2:	2203      	movs	r2, #3
 801a8d4:	4650      	mov	r0, sl
 801a8d6:	f7e5 fd03 	bl	80002e0 <memchr>
 801a8da:	b138      	cbz	r0, 801a8ec <_svfiprintf_r+0x150>
 801a8dc:	9b04      	ldr	r3, [sp, #16]
 801a8de:	eba0 000a 	sub.w	r0, r0, sl
 801a8e2:	2240      	movs	r2, #64	@ 0x40
 801a8e4:	4082      	lsls	r2, r0
 801a8e6:	4313      	orrs	r3, r2
 801a8e8:	3401      	adds	r4, #1
 801a8ea:	9304      	str	r3, [sp, #16]
 801a8ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a8f0:	4824      	ldr	r0, [pc, #144]	@ (801a984 <_svfiprintf_r+0x1e8>)
 801a8f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a8f6:	2206      	movs	r2, #6
 801a8f8:	f7e5 fcf2 	bl	80002e0 <memchr>
 801a8fc:	2800      	cmp	r0, #0
 801a8fe:	d036      	beq.n	801a96e <_svfiprintf_r+0x1d2>
 801a900:	4b21      	ldr	r3, [pc, #132]	@ (801a988 <_svfiprintf_r+0x1ec>)
 801a902:	bb1b      	cbnz	r3, 801a94c <_svfiprintf_r+0x1b0>
 801a904:	9b03      	ldr	r3, [sp, #12]
 801a906:	3307      	adds	r3, #7
 801a908:	f023 0307 	bic.w	r3, r3, #7
 801a90c:	3308      	adds	r3, #8
 801a90e:	9303      	str	r3, [sp, #12]
 801a910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a912:	4433      	add	r3, r6
 801a914:	9309      	str	r3, [sp, #36]	@ 0x24
 801a916:	e76a      	b.n	801a7ee <_svfiprintf_r+0x52>
 801a918:	fb0c 3202 	mla	r2, ip, r2, r3
 801a91c:	460c      	mov	r4, r1
 801a91e:	2001      	movs	r0, #1
 801a920:	e7a8      	b.n	801a874 <_svfiprintf_r+0xd8>
 801a922:	2300      	movs	r3, #0
 801a924:	3401      	adds	r4, #1
 801a926:	9305      	str	r3, [sp, #20]
 801a928:	4619      	mov	r1, r3
 801a92a:	f04f 0c0a 	mov.w	ip, #10
 801a92e:	4620      	mov	r0, r4
 801a930:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a934:	3a30      	subs	r2, #48	@ 0x30
 801a936:	2a09      	cmp	r2, #9
 801a938:	d903      	bls.n	801a942 <_svfiprintf_r+0x1a6>
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d0c6      	beq.n	801a8cc <_svfiprintf_r+0x130>
 801a93e:	9105      	str	r1, [sp, #20]
 801a940:	e7c4      	b.n	801a8cc <_svfiprintf_r+0x130>
 801a942:	fb0c 2101 	mla	r1, ip, r1, r2
 801a946:	4604      	mov	r4, r0
 801a948:	2301      	movs	r3, #1
 801a94a:	e7f0      	b.n	801a92e <_svfiprintf_r+0x192>
 801a94c:	ab03      	add	r3, sp, #12
 801a94e:	9300      	str	r3, [sp, #0]
 801a950:	462a      	mov	r2, r5
 801a952:	4b0e      	ldr	r3, [pc, #56]	@ (801a98c <_svfiprintf_r+0x1f0>)
 801a954:	a904      	add	r1, sp, #16
 801a956:	4638      	mov	r0, r7
 801a958:	f7fd ff8e 	bl	8018878 <_printf_float>
 801a95c:	1c42      	adds	r2, r0, #1
 801a95e:	4606      	mov	r6, r0
 801a960:	d1d6      	bne.n	801a910 <_svfiprintf_r+0x174>
 801a962:	89ab      	ldrh	r3, [r5, #12]
 801a964:	065b      	lsls	r3, r3, #25
 801a966:	f53f af2d 	bmi.w	801a7c4 <_svfiprintf_r+0x28>
 801a96a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a96c:	e72c      	b.n	801a7c8 <_svfiprintf_r+0x2c>
 801a96e:	ab03      	add	r3, sp, #12
 801a970:	9300      	str	r3, [sp, #0]
 801a972:	462a      	mov	r2, r5
 801a974:	4b05      	ldr	r3, [pc, #20]	@ (801a98c <_svfiprintf_r+0x1f0>)
 801a976:	a904      	add	r1, sp, #16
 801a978:	4638      	mov	r0, r7
 801a97a:	f7fe fa05 	bl	8018d88 <_printf_i>
 801a97e:	e7ed      	b.n	801a95c <_svfiprintf_r+0x1c0>
 801a980:	0801b80e 	.word	0x0801b80e
 801a984:	0801b818 	.word	0x0801b818
 801a988:	08018879 	.word	0x08018879
 801a98c:	0801a6e5 	.word	0x0801a6e5
 801a990:	0801b814 	.word	0x0801b814

0801a994 <__sflush_r>:
 801a994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a99c:	0716      	lsls	r6, r2, #28
 801a99e:	4605      	mov	r5, r0
 801a9a0:	460c      	mov	r4, r1
 801a9a2:	d454      	bmi.n	801aa4e <__sflush_r+0xba>
 801a9a4:	684b      	ldr	r3, [r1, #4]
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	dc02      	bgt.n	801a9b0 <__sflush_r+0x1c>
 801a9aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a9ac:	2b00      	cmp	r3, #0
 801a9ae:	dd48      	ble.n	801aa42 <__sflush_r+0xae>
 801a9b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a9b2:	2e00      	cmp	r6, #0
 801a9b4:	d045      	beq.n	801aa42 <__sflush_r+0xae>
 801a9b6:	2300      	movs	r3, #0
 801a9b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a9bc:	682f      	ldr	r7, [r5, #0]
 801a9be:	6a21      	ldr	r1, [r4, #32]
 801a9c0:	602b      	str	r3, [r5, #0]
 801a9c2:	d030      	beq.n	801aa26 <__sflush_r+0x92>
 801a9c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a9c6:	89a3      	ldrh	r3, [r4, #12]
 801a9c8:	0759      	lsls	r1, r3, #29
 801a9ca:	d505      	bpl.n	801a9d8 <__sflush_r+0x44>
 801a9cc:	6863      	ldr	r3, [r4, #4]
 801a9ce:	1ad2      	subs	r2, r2, r3
 801a9d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a9d2:	b10b      	cbz	r3, 801a9d8 <__sflush_r+0x44>
 801a9d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a9d6:	1ad2      	subs	r2, r2, r3
 801a9d8:	2300      	movs	r3, #0
 801a9da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a9dc:	6a21      	ldr	r1, [r4, #32]
 801a9de:	4628      	mov	r0, r5
 801a9e0:	47b0      	blx	r6
 801a9e2:	1c43      	adds	r3, r0, #1
 801a9e4:	89a3      	ldrh	r3, [r4, #12]
 801a9e6:	d106      	bne.n	801a9f6 <__sflush_r+0x62>
 801a9e8:	6829      	ldr	r1, [r5, #0]
 801a9ea:	291d      	cmp	r1, #29
 801a9ec:	d82b      	bhi.n	801aa46 <__sflush_r+0xb2>
 801a9ee:	4a2a      	ldr	r2, [pc, #168]	@ (801aa98 <__sflush_r+0x104>)
 801a9f0:	40ca      	lsrs	r2, r1
 801a9f2:	07d6      	lsls	r6, r2, #31
 801a9f4:	d527      	bpl.n	801aa46 <__sflush_r+0xb2>
 801a9f6:	2200      	movs	r2, #0
 801a9f8:	6062      	str	r2, [r4, #4]
 801a9fa:	04d9      	lsls	r1, r3, #19
 801a9fc:	6922      	ldr	r2, [r4, #16]
 801a9fe:	6022      	str	r2, [r4, #0]
 801aa00:	d504      	bpl.n	801aa0c <__sflush_r+0x78>
 801aa02:	1c42      	adds	r2, r0, #1
 801aa04:	d101      	bne.n	801aa0a <__sflush_r+0x76>
 801aa06:	682b      	ldr	r3, [r5, #0]
 801aa08:	b903      	cbnz	r3, 801aa0c <__sflush_r+0x78>
 801aa0a:	6560      	str	r0, [r4, #84]	@ 0x54
 801aa0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801aa0e:	602f      	str	r7, [r5, #0]
 801aa10:	b1b9      	cbz	r1, 801aa42 <__sflush_r+0xae>
 801aa12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801aa16:	4299      	cmp	r1, r3
 801aa18:	d002      	beq.n	801aa20 <__sflush_r+0x8c>
 801aa1a:	4628      	mov	r0, r5
 801aa1c:	f7ff fa9e 	bl	8019f5c <_free_r>
 801aa20:	2300      	movs	r3, #0
 801aa22:	6363      	str	r3, [r4, #52]	@ 0x34
 801aa24:	e00d      	b.n	801aa42 <__sflush_r+0xae>
 801aa26:	2301      	movs	r3, #1
 801aa28:	4628      	mov	r0, r5
 801aa2a:	47b0      	blx	r6
 801aa2c:	4602      	mov	r2, r0
 801aa2e:	1c50      	adds	r0, r2, #1
 801aa30:	d1c9      	bne.n	801a9c6 <__sflush_r+0x32>
 801aa32:	682b      	ldr	r3, [r5, #0]
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	d0c6      	beq.n	801a9c6 <__sflush_r+0x32>
 801aa38:	2b1d      	cmp	r3, #29
 801aa3a:	d001      	beq.n	801aa40 <__sflush_r+0xac>
 801aa3c:	2b16      	cmp	r3, #22
 801aa3e:	d11e      	bne.n	801aa7e <__sflush_r+0xea>
 801aa40:	602f      	str	r7, [r5, #0]
 801aa42:	2000      	movs	r0, #0
 801aa44:	e022      	b.n	801aa8c <__sflush_r+0xf8>
 801aa46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801aa4a:	b21b      	sxth	r3, r3
 801aa4c:	e01b      	b.n	801aa86 <__sflush_r+0xf2>
 801aa4e:	690f      	ldr	r7, [r1, #16]
 801aa50:	2f00      	cmp	r7, #0
 801aa52:	d0f6      	beq.n	801aa42 <__sflush_r+0xae>
 801aa54:	0793      	lsls	r3, r2, #30
 801aa56:	680e      	ldr	r6, [r1, #0]
 801aa58:	bf08      	it	eq
 801aa5a:	694b      	ldreq	r3, [r1, #20]
 801aa5c:	600f      	str	r7, [r1, #0]
 801aa5e:	bf18      	it	ne
 801aa60:	2300      	movne	r3, #0
 801aa62:	eba6 0807 	sub.w	r8, r6, r7
 801aa66:	608b      	str	r3, [r1, #8]
 801aa68:	f1b8 0f00 	cmp.w	r8, #0
 801aa6c:	dde9      	ble.n	801aa42 <__sflush_r+0xae>
 801aa6e:	6a21      	ldr	r1, [r4, #32]
 801aa70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801aa72:	4643      	mov	r3, r8
 801aa74:	463a      	mov	r2, r7
 801aa76:	4628      	mov	r0, r5
 801aa78:	47b0      	blx	r6
 801aa7a:	2800      	cmp	r0, #0
 801aa7c:	dc08      	bgt.n	801aa90 <__sflush_r+0xfc>
 801aa7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aa82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801aa86:	81a3      	strh	r3, [r4, #12]
 801aa88:	f04f 30ff 	mov.w	r0, #4294967295
 801aa8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa90:	4407      	add	r7, r0
 801aa92:	eba8 0800 	sub.w	r8, r8, r0
 801aa96:	e7e7      	b.n	801aa68 <__sflush_r+0xd4>
 801aa98:	20400001 	.word	0x20400001

0801aa9c <_fflush_r>:
 801aa9c:	b538      	push	{r3, r4, r5, lr}
 801aa9e:	690b      	ldr	r3, [r1, #16]
 801aaa0:	4605      	mov	r5, r0
 801aaa2:	460c      	mov	r4, r1
 801aaa4:	b913      	cbnz	r3, 801aaac <_fflush_r+0x10>
 801aaa6:	2500      	movs	r5, #0
 801aaa8:	4628      	mov	r0, r5
 801aaaa:	bd38      	pop	{r3, r4, r5, pc}
 801aaac:	b118      	cbz	r0, 801aab6 <_fflush_r+0x1a>
 801aaae:	6a03      	ldr	r3, [r0, #32]
 801aab0:	b90b      	cbnz	r3, 801aab6 <_fflush_r+0x1a>
 801aab2:	f7fe fb13 	bl	80190dc <__sinit>
 801aab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	d0f3      	beq.n	801aaa6 <_fflush_r+0xa>
 801aabe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801aac0:	07d0      	lsls	r0, r2, #31
 801aac2:	d404      	bmi.n	801aace <_fflush_r+0x32>
 801aac4:	0599      	lsls	r1, r3, #22
 801aac6:	d402      	bmi.n	801aace <_fflush_r+0x32>
 801aac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801aaca:	f7fe fc30 	bl	801932e <__retarget_lock_acquire_recursive>
 801aace:	4628      	mov	r0, r5
 801aad0:	4621      	mov	r1, r4
 801aad2:	f7ff ff5f 	bl	801a994 <__sflush_r>
 801aad6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801aad8:	07da      	lsls	r2, r3, #31
 801aada:	4605      	mov	r5, r0
 801aadc:	d4e4      	bmi.n	801aaa8 <_fflush_r+0xc>
 801aade:	89a3      	ldrh	r3, [r4, #12]
 801aae0:	059b      	lsls	r3, r3, #22
 801aae2:	d4e1      	bmi.n	801aaa8 <_fflush_r+0xc>
 801aae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801aae6:	f7fe fc23 	bl	8019330 <__retarget_lock_release_recursive>
 801aaea:	e7dd      	b.n	801aaa8 <_fflush_r+0xc>

0801aaec <fiprintf>:
 801aaec:	b40e      	push	{r1, r2, r3}
 801aaee:	b503      	push	{r0, r1, lr}
 801aaf0:	4601      	mov	r1, r0
 801aaf2:	ab03      	add	r3, sp, #12
 801aaf4:	4805      	ldr	r0, [pc, #20]	@ (801ab0c <fiprintf+0x20>)
 801aaf6:	f853 2b04 	ldr.w	r2, [r3], #4
 801aafa:	6800      	ldr	r0, [r0, #0]
 801aafc:	9301      	str	r3, [sp, #4]
 801aafe:	f000 f8b3 	bl	801ac68 <_vfiprintf_r>
 801ab02:	b002      	add	sp, #8
 801ab04:	f85d eb04 	ldr.w	lr, [sp], #4
 801ab08:	b003      	add	sp, #12
 801ab0a:	4770      	bx	lr
 801ab0c:	24000128 	.word	0x24000128

0801ab10 <memmove>:
 801ab10:	4288      	cmp	r0, r1
 801ab12:	b510      	push	{r4, lr}
 801ab14:	eb01 0402 	add.w	r4, r1, r2
 801ab18:	d902      	bls.n	801ab20 <memmove+0x10>
 801ab1a:	4284      	cmp	r4, r0
 801ab1c:	4623      	mov	r3, r4
 801ab1e:	d807      	bhi.n	801ab30 <memmove+0x20>
 801ab20:	1e43      	subs	r3, r0, #1
 801ab22:	42a1      	cmp	r1, r4
 801ab24:	d008      	beq.n	801ab38 <memmove+0x28>
 801ab26:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ab2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ab2e:	e7f8      	b.n	801ab22 <memmove+0x12>
 801ab30:	4402      	add	r2, r0
 801ab32:	4601      	mov	r1, r0
 801ab34:	428a      	cmp	r2, r1
 801ab36:	d100      	bne.n	801ab3a <memmove+0x2a>
 801ab38:	bd10      	pop	{r4, pc}
 801ab3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ab3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ab42:	e7f7      	b.n	801ab34 <memmove+0x24>

0801ab44 <abort>:
 801ab44:	b508      	push	{r3, lr}
 801ab46:	2006      	movs	r0, #6
 801ab48:	f000 fa62 	bl	801b010 <raise>
 801ab4c:	2001      	movs	r0, #1
 801ab4e:	f7e8 f9a1 	bl	8002e94 <_exit>

0801ab52 <_calloc_r>:
 801ab52:	b570      	push	{r4, r5, r6, lr}
 801ab54:	fba1 5402 	umull	r5, r4, r1, r2
 801ab58:	b934      	cbnz	r4, 801ab68 <_calloc_r+0x16>
 801ab5a:	4629      	mov	r1, r5
 801ab5c:	f7fd fd32 	bl	80185c4 <_malloc_r>
 801ab60:	4606      	mov	r6, r0
 801ab62:	b928      	cbnz	r0, 801ab70 <_calloc_r+0x1e>
 801ab64:	4630      	mov	r0, r6
 801ab66:	bd70      	pop	{r4, r5, r6, pc}
 801ab68:	220c      	movs	r2, #12
 801ab6a:	6002      	str	r2, [r0, #0]
 801ab6c:	2600      	movs	r6, #0
 801ab6e:	e7f9      	b.n	801ab64 <_calloc_r+0x12>
 801ab70:	462a      	mov	r2, r5
 801ab72:	4621      	mov	r1, r4
 801ab74:	f7fe fb4d 	bl	8019212 <memset>
 801ab78:	e7f4      	b.n	801ab64 <_calloc_r+0x12>

0801ab7a <__ascii_mbtowc>:
 801ab7a:	b082      	sub	sp, #8
 801ab7c:	b901      	cbnz	r1, 801ab80 <__ascii_mbtowc+0x6>
 801ab7e:	a901      	add	r1, sp, #4
 801ab80:	b142      	cbz	r2, 801ab94 <__ascii_mbtowc+0x1a>
 801ab82:	b14b      	cbz	r3, 801ab98 <__ascii_mbtowc+0x1e>
 801ab84:	7813      	ldrb	r3, [r2, #0]
 801ab86:	600b      	str	r3, [r1, #0]
 801ab88:	7812      	ldrb	r2, [r2, #0]
 801ab8a:	1e10      	subs	r0, r2, #0
 801ab8c:	bf18      	it	ne
 801ab8e:	2001      	movne	r0, #1
 801ab90:	b002      	add	sp, #8
 801ab92:	4770      	bx	lr
 801ab94:	4610      	mov	r0, r2
 801ab96:	e7fb      	b.n	801ab90 <__ascii_mbtowc+0x16>
 801ab98:	f06f 0001 	mvn.w	r0, #1
 801ab9c:	e7f8      	b.n	801ab90 <__ascii_mbtowc+0x16>

0801ab9e <_realloc_r>:
 801ab9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aba2:	4607      	mov	r7, r0
 801aba4:	4614      	mov	r4, r2
 801aba6:	460d      	mov	r5, r1
 801aba8:	b921      	cbnz	r1, 801abb4 <_realloc_r+0x16>
 801abaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801abae:	4611      	mov	r1, r2
 801abb0:	f7fd bd08 	b.w	80185c4 <_malloc_r>
 801abb4:	b92a      	cbnz	r2, 801abc2 <_realloc_r+0x24>
 801abb6:	f7ff f9d1 	bl	8019f5c <_free_r>
 801abba:	4625      	mov	r5, r4
 801abbc:	4628      	mov	r0, r5
 801abbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abc2:	f000 fa41 	bl	801b048 <_malloc_usable_size_r>
 801abc6:	4284      	cmp	r4, r0
 801abc8:	4606      	mov	r6, r0
 801abca:	d802      	bhi.n	801abd2 <_realloc_r+0x34>
 801abcc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801abd0:	d8f4      	bhi.n	801abbc <_realloc_r+0x1e>
 801abd2:	4621      	mov	r1, r4
 801abd4:	4638      	mov	r0, r7
 801abd6:	f7fd fcf5 	bl	80185c4 <_malloc_r>
 801abda:	4680      	mov	r8, r0
 801abdc:	b908      	cbnz	r0, 801abe2 <_realloc_r+0x44>
 801abde:	4645      	mov	r5, r8
 801abe0:	e7ec      	b.n	801abbc <_realloc_r+0x1e>
 801abe2:	42b4      	cmp	r4, r6
 801abe4:	4622      	mov	r2, r4
 801abe6:	4629      	mov	r1, r5
 801abe8:	bf28      	it	cs
 801abea:	4632      	movcs	r2, r6
 801abec:	f7fe fba1 	bl	8019332 <memcpy>
 801abf0:	4629      	mov	r1, r5
 801abf2:	4638      	mov	r0, r7
 801abf4:	f7ff f9b2 	bl	8019f5c <_free_r>
 801abf8:	e7f1      	b.n	801abde <_realloc_r+0x40>

0801abfa <__ascii_wctomb>:
 801abfa:	4603      	mov	r3, r0
 801abfc:	4608      	mov	r0, r1
 801abfe:	b141      	cbz	r1, 801ac12 <__ascii_wctomb+0x18>
 801ac00:	2aff      	cmp	r2, #255	@ 0xff
 801ac02:	d904      	bls.n	801ac0e <__ascii_wctomb+0x14>
 801ac04:	228a      	movs	r2, #138	@ 0x8a
 801ac06:	601a      	str	r2, [r3, #0]
 801ac08:	f04f 30ff 	mov.w	r0, #4294967295
 801ac0c:	4770      	bx	lr
 801ac0e:	700a      	strb	r2, [r1, #0]
 801ac10:	2001      	movs	r0, #1
 801ac12:	4770      	bx	lr

0801ac14 <__sfputc_r>:
 801ac14:	6893      	ldr	r3, [r2, #8]
 801ac16:	3b01      	subs	r3, #1
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	b410      	push	{r4}
 801ac1c:	6093      	str	r3, [r2, #8]
 801ac1e:	da08      	bge.n	801ac32 <__sfputc_r+0x1e>
 801ac20:	6994      	ldr	r4, [r2, #24]
 801ac22:	42a3      	cmp	r3, r4
 801ac24:	db01      	blt.n	801ac2a <__sfputc_r+0x16>
 801ac26:	290a      	cmp	r1, #10
 801ac28:	d103      	bne.n	801ac32 <__sfputc_r+0x1e>
 801ac2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ac2e:	f000 b933 	b.w	801ae98 <__swbuf_r>
 801ac32:	6813      	ldr	r3, [r2, #0]
 801ac34:	1c58      	adds	r0, r3, #1
 801ac36:	6010      	str	r0, [r2, #0]
 801ac38:	7019      	strb	r1, [r3, #0]
 801ac3a:	4608      	mov	r0, r1
 801ac3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ac40:	4770      	bx	lr

0801ac42 <__sfputs_r>:
 801ac42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac44:	4606      	mov	r6, r0
 801ac46:	460f      	mov	r7, r1
 801ac48:	4614      	mov	r4, r2
 801ac4a:	18d5      	adds	r5, r2, r3
 801ac4c:	42ac      	cmp	r4, r5
 801ac4e:	d101      	bne.n	801ac54 <__sfputs_r+0x12>
 801ac50:	2000      	movs	r0, #0
 801ac52:	e007      	b.n	801ac64 <__sfputs_r+0x22>
 801ac54:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac58:	463a      	mov	r2, r7
 801ac5a:	4630      	mov	r0, r6
 801ac5c:	f7ff ffda 	bl	801ac14 <__sfputc_r>
 801ac60:	1c43      	adds	r3, r0, #1
 801ac62:	d1f3      	bne.n	801ac4c <__sfputs_r+0xa>
 801ac64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ac68 <_vfiprintf_r>:
 801ac68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac6c:	460d      	mov	r5, r1
 801ac6e:	b09d      	sub	sp, #116	@ 0x74
 801ac70:	4614      	mov	r4, r2
 801ac72:	4698      	mov	r8, r3
 801ac74:	4606      	mov	r6, r0
 801ac76:	b118      	cbz	r0, 801ac80 <_vfiprintf_r+0x18>
 801ac78:	6a03      	ldr	r3, [r0, #32]
 801ac7a:	b90b      	cbnz	r3, 801ac80 <_vfiprintf_r+0x18>
 801ac7c:	f7fe fa2e 	bl	80190dc <__sinit>
 801ac80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ac82:	07d9      	lsls	r1, r3, #31
 801ac84:	d405      	bmi.n	801ac92 <_vfiprintf_r+0x2a>
 801ac86:	89ab      	ldrh	r3, [r5, #12]
 801ac88:	059a      	lsls	r2, r3, #22
 801ac8a:	d402      	bmi.n	801ac92 <_vfiprintf_r+0x2a>
 801ac8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ac8e:	f7fe fb4e 	bl	801932e <__retarget_lock_acquire_recursive>
 801ac92:	89ab      	ldrh	r3, [r5, #12]
 801ac94:	071b      	lsls	r3, r3, #28
 801ac96:	d501      	bpl.n	801ac9c <_vfiprintf_r+0x34>
 801ac98:	692b      	ldr	r3, [r5, #16]
 801ac9a:	b99b      	cbnz	r3, 801acc4 <_vfiprintf_r+0x5c>
 801ac9c:	4629      	mov	r1, r5
 801ac9e:	4630      	mov	r0, r6
 801aca0:	f000 f938 	bl	801af14 <__swsetup_r>
 801aca4:	b170      	cbz	r0, 801acc4 <_vfiprintf_r+0x5c>
 801aca6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801aca8:	07dc      	lsls	r4, r3, #31
 801acaa:	d504      	bpl.n	801acb6 <_vfiprintf_r+0x4e>
 801acac:	f04f 30ff 	mov.w	r0, #4294967295
 801acb0:	b01d      	add	sp, #116	@ 0x74
 801acb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acb6:	89ab      	ldrh	r3, [r5, #12]
 801acb8:	0598      	lsls	r0, r3, #22
 801acba:	d4f7      	bmi.n	801acac <_vfiprintf_r+0x44>
 801acbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801acbe:	f7fe fb37 	bl	8019330 <__retarget_lock_release_recursive>
 801acc2:	e7f3      	b.n	801acac <_vfiprintf_r+0x44>
 801acc4:	2300      	movs	r3, #0
 801acc6:	9309      	str	r3, [sp, #36]	@ 0x24
 801acc8:	2320      	movs	r3, #32
 801acca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801acce:	f8cd 800c 	str.w	r8, [sp, #12]
 801acd2:	2330      	movs	r3, #48	@ 0x30
 801acd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ae84 <_vfiprintf_r+0x21c>
 801acd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801acdc:	f04f 0901 	mov.w	r9, #1
 801ace0:	4623      	mov	r3, r4
 801ace2:	469a      	mov	sl, r3
 801ace4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ace8:	b10a      	cbz	r2, 801acee <_vfiprintf_r+0x86>
 801acea:	2a25      	cmp	r2, #37	@ 0x25
 801acec:	d1f9      	bne.n	801ace2 <_vfiprintf_r+0x7a>
 801acee:	ebba 0b04 	subs.w	fp, sl, r4
 801acf2:	d00b      	beq.n	801ad0c <_vfiprintf_r+0xa4>
 801acf4:	465b      	mov	r3, fp
 801acf6:	4622      	mov	r2, r4
 801acf8:	4629      	mov	r1, r5
 801acfa:	4630      	mov	r0, r6
 801acfc:	f7ff ffa1 	bl	801ac42 <__sfputs_r>
 801ad00:	3001      	adds	r0, #1
 801ad02:	f000 80a7 	beq.w	801ae54 <_vfiprintf_r+0x1ec>
 801ad06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ad08:	445a      	add	r2, fp
 801ad0a:	9209      	str	r2, [sp, #36]	@ 0x24
 801ad0c:	f89a 3000 	ldrb.w	r3, [sl]
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	f000 809f 	beq.w	801ae54 <_vfiprintf_r+0x1ec>
 801ad16:	2300      	movs	r3, #0
 801ad18:	f04f 32ff 	mov.w	r2, #4294967295
 801ad1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ad20:	f10a 0a01 	add.w	sl, sl, #1
 801ad24:	9304      	str	r3, [sp, #16]
 801ad26:	9307      	str	r3, [sp, #28]
 801ad28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ad2c:	931a      	str	r3, [sp, #104]	@ 0x68
 801ad2e:	4654      	mov	r4, sl
 801ad30:	2205      	movs	r2, #5
 801ad32:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad36:	4853      	ldr	r0, [pc, #332]	@ (801ae84 <_vfiprintf_r+0x21c>)
 801ad38:	f7e5 fad2 	bl	80002e0 <memchr>
 801ad3c:	9a04      	ldr	r2, [sp, #16]
 801ad3e:	b9d8      	cbnz	r0, 801ad78 <_vfiprintf_r+0x110>
 801ad40:	06d1      	lsls	r1, r2, #27
 801ad42:	bf44      	itt	mi
 801ad44:	2320      	movmi	r3, #32
 801ad46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ad4a:	0713      	lsls	r3, r2, #28
 801ad4c:	bf44      	itt	mi
 801ad4e:	232b      	movmi	r3, #43	@ 0x2b
 801ad50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ad54:	f89a 3000 	ldrb.w	r3, [sl]
 801ad58:	2b2a      	cmp	r3, #42	@ 0x2a
 801ad5a:	d015      	beq.n	801ad88 <_vfiprintf_r+0x120>
 801ad5c:	9a07      	ldr	r2, [sp, #28]
 801ad5e:	4654      	mov	r4, sl
 801ad60:	2000      	movs	r0, #0
 801ad62:	f04f 0c0a 	mov.w	ip, #10
 801ad66:	4621      	mov	r1, r4
 801ad68:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ad6c:	3b30      	subs	r3, #48	@ 0x30
 801ad6e:	2b09      	cmp	r3, #9
 801ad70:	d94b      	bls.n	801ae0a <_vfiprintf_r+0x1a2>
 801ad72:	b1b0      	cbz	r0, 801ada2 <_vfiprintf_r+0x13a>
 801ad74:	9207      	str	r2, [sp, #28]
 801ad76:	e014      	b.n	801ada2 <_vfiprintf_r+0x13a>
 801ad78:	eba0 0308 	sub.w	r3, r0, r8
 801ad7c:	fa09 f303 	lsl.w	r3, r9, r3
 801ad80:	4313      	orrs	r3, r2
 801ad82:	9304      	str	r3, [sp, #16]
 801ad84:	46a2      	mov	sl, r4
 801ad86:	e7d2      	b.n	801ad2e <_vfiprintf_r+0xc6>
 801ad88:	9b03      	ldr	r3, [sp, #12]
 801ad8a:	1d19      	adds	r1, r3, #4
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	9103      	str	r1, [sp, #12]
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	bfbb      	ittet	lt
 801ad94:	425b      	neglt	r3, r3
 801ad96:	f042 0202 	orrlt.w	r2, r2, #2
 801ad9a:	9307      	strge	r3, [sp, #28]
 801ad9c:	9307      	strlt	r3, [sp, #28]
 801ad9e:	bfb8      	it	lt
 801ada0:	9204      	strlt	r2, [sp, #16]
 801ada2:	7823      	ldrb	r3, [r4, #0]
 801ada4:	2b2e      	cmp	r3, #46	@ 0x2e
 801ada6:	d10a      	bne.n	801adbe <_vfiprintf_r+0x156>
 801ada8:	7863      	ldrb	r3, [r4, #1]
 801adaa:	2b2a      	cmp	r3, #42	@ 0x2a
 801adac:	d132      	bne.n	801ae14 <_vfiprintf_r+0x1ac>
 801adae:	9b03      	ldr	r3, [sp, #12]
 801adb0:	1d1a      	adds	r2, r3, #4
 801adb2:	681b      	ldr	r3, [r3, #0]
 801adb4:	9203      	str	r2, [sp, #12]
 801adb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801adba:	3402      	adds	r4, #2
 801adbc:	9305      	str	r3, [sp, #20]
 801adbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ae94 <_vfiprintf_r+0x22c>
 801adc2:	7821      	ldrb	r1, [r4, #0]
 801adc4:	2203      	movs	r2, #3
 801adc6:	4650      	mov	r0, sl
 801adc8:	f7e5 fa8a 	bl	80002e0 <memchr>
 801adcc:	b138      	cbz	r0, 801adde <_vfiprintf_r+0x176>
 801adce:	9b04      	ldr	r3, [sp, #16]
 801add0:	eba0 000a 	sub.w	r0, r0, sl
 801add4:	2240      	movs	r2, #64	@ 0x40
 801add6:	4082      	lsls	r2, r0
 801add8:	4313      	orrs	r3, r2
 801adda:	3401      	adds	r4, #1
 801addc:	9304      	str	r3, [sp, #16]
 801adde:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ade2:	4829      	ldr	r0, [pc, #164]	@ (801ae88 <_vfiprintf_r+0x220>)
 801ade4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ade8:	2206      	movs	r2, #6
 801adea:	f7e5 fa79 	bl	80002e0 <memchr>
 801adee:	2800      	cmp	r0, #0
 801adf0:	d03f      	beq.n	801ae72 <_vfiprintf_r+0x20a>
 801adf2:	4b26      	ldr	r3, [pc, #152]	@ (801ae8c <_vfiprintf_r+0x224>)
 801adf4:	bb1b      	cbnz	r3, 801ae3e <_vfiprintf_r+0x1d6>
 801adf6:	9b03      	ldr	r3, [sp, #12]
 801adf8:	3307      	adds	r3, #7
 801adfa:	f023 0307 	bic.w	r3, r3, #7
 801adfe:	3308      	adds	r3, #8
 801ae00:	9303      	str	r3, [sp, #12]
 801ae02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae04:	443b      	add	r3, r7
 801ae06:	9309      	str	r3, [sp, #36]	@ 0x24
 801ae08:	e76a      	b.n	801ace0 <_vfiprintf_r+0x78>
 801ae0a:	fb0c 3202 	mla	r2, ip, r2, r3
 801ae0e:	460c      	mov	r4, r1
 801ae10:	2001      	movs	r0, #1
 801ae12:	e7a8      	b.n	801ad66 <_vfiprintf_r+0xfe>
 801ae14:	2300      	movs	r3, #0
 801ae16:	3401      	adds	r4, #1
 801ae18:	9305      	str	r3, [sp, #20]
 801ae1a:	4619      	mov	r1, r3
 801ae1c:	f04f 0c0a 	mov.w	ip, #10
 801ae20:	4620      	mov	r0, r4
 801ae22:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ae26:	3a30      	subs	r2, #48	@ 0x30
 801ae28:	2a09      	cmp	r2, #9
 801ae2a:	d903      	bls.n	801ae34 <_vfiprintf_r+0x1cc>
 801ae2c:	2b00      	cmp	r3, #0
 801ae2e:	d0c6      	beq.n	801adbe <_vfiprintf_r+0x156>
 801ae30:	9105      	str	r1, [sp, #20]
 801ae32:	e7c4      	b.n	801adbe <_vfiprintf_r+0x156>
 801ae34:	fb0c 2101 	mla	r1, ip, r1, r2
 801ae38:	4604      	mov	r4, r0
 801ae3a:	2301      	movs	r3, #1
 801ae3c:	e7f0      	b.n	801ae20 <_vfiprintf_r+0x1b8>
 801ae3e:	ab03      	add	r3, sp, #12
 801ae40:	9300      	str	r3, [sp, #0]
 801ae42:	462a      	mov	r2, r5
 801ae44:	4b12      	ldr	r3, [pc, #72]	@ (801ae90 <_vfiprintf_r+0x228>)
 801ae46:	a904      	add	r1, sp, #16
 801ae48:	4630      	mov	r0, r6
 801ae4a:	f7fd fd15 	bl	8018878 <_printf_float>
 801ae4e:	4607      	mov	r7, r0
 801ae50:	1c78      	adds	r0, r7, #1
 801ae52:	d1d6      	bne.n	801ae02 <_vfiprintf_r+0x19a>
 801ae54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ae56:	07d9      	lsls	r1, r3, #31
 801ae58:	d405      	bmi.n	801ae66 <_vfiprintf_r+0x1fe>
 801ae5a:	89ab      	ldrh	r3, [r5, #12]
 801ae5c:	059a      	lsls	r2, r3, #22
 801ae5e:	d402      	bmi.n	801ae66 <_vfiprintf_r+0x1fe>
 801ae60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ae62:	f7fe fa65 	bl	8019330 <__retarget_lock_release_recursive>
 801ae66:	89ab      	ldrh	r3, [r5, #12]
 801ae68:	065b      	lsls	r3, r3, #25
 801ae6a:	f53f af1f 	bmi.w	801acac <_vfiprintf_r+0x44>
 801ae6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ae70:	e71e      	b.n	801acb0 <_vfiprintf_r+0x48>
 801ae72:	ab03      	add	r3, sp, #12
 801ae74:	9300      	str	r3, [sp, #0]
 801ae76:	462a      	mov	r2, r5
 801ae78:	4b05      	ldr	r3, [pc, #20]	@ (801ae90 <_vfiprintf_r+0x228>)
 801ae7a:	a904      	add	r1, sp, #16
 801ae7c:	4630      	mov	r0, r6
 801ae7e:	f7fd ff83 	bl	8018d88 <_printf_i>
 801ae82:	e7e4      	b.n	801ae4e <_vfiprintf_r+0x1e6>
 801ae84:	0801b80e 	.word	0x0801b80e
 801ae88:	0801b818 	.word	0x0801b818
 801ae8c:	08018879 	.word	0x08018879
 801ae90:	0801ac43 	.word	0x0801ac43
 801ae94:	0801b814 	.word	0x0801b814

0801ae98 <__swbuf_r>:
 801ae98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae9a:	460e      	mov	r6, r1
 801ae9c:	4614      	mov	r4, r2
 801ae9e:	4605      	mov	r5, r0
 801aea0:	b118      	cbz	r0, 801aeaa <__swbuf_r+0x12>
 801aea2:	6a03      	ldr	r3, [r0, #32]
 801aea4:	b90b      	cbnz	r3, 801aeaa <__swbuf_r+0x12>
 801aea6:	f7fe f919 	bl	80190dc <__sinit>
 801aeaa:	69a3      	ldr	r3, [r4, #24]
 801aeac:	60a3      	str	r3, [r4, #8]
 801aeae:	89a3      	ldrh	r3, [r4, #12]
 801aeb0:	071a      	lsls	r2, r3, #28
 801aeb2:	d501      	bpl.n	801aeb8 <__swbuf_r+0x20>
 801aeb4:	6923      	ldr	r3, [r4, #16]
 801aeb6:	b943      	cbnz	r3, 801aeca <__swbuf_r+0x32>
 801aeb8:	4621      	mov	r1, r4
 801aeba:	4628      	mov	r0, r5
 801aebc:	f000 f82a 	bl	801af14 <__swsetup_r>
 801aec0:	b118      	cbz	r0, 801aeca <__swbuf_r+0x32>
 801aec2:	f04f 37ff 	mov.w	r7, #4294967295
 801aec6:	4638      	mov	r0, r7
 801aec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aeca:	6823      	ldr	r3, [r4, #0]
 801aecc:	6922      	ldr	r2, [r4, #16]
 801aece:	1a98      	subs	r0, r3, r2
 801aed0:	6963      	ldr	r3, [r4, #20]
 801aed2:	b2f6      	uxtb	r6, r6
 801aed4:	4283      	cmp	r3, r0
 801aed6:	4637      	mov	r7, r6
 801aed8:	dc05      	bgt.n	801aee6 <__swbuf_r+0x4e>
 801aeda:	4621      	mov	r1, r4
 801aedc:	4628      	mov	r0, r5
 801aede:	f7ff fddd 	bl	801aa9c <_fflush_r>
 801aee2:	2800      	cmp	r0, #0
 801aee4:	d1ed      	bne.n	801aec2 <__swbuf_r+0x2a>
 801aee6:	68a3      	ldr	r3, [r4, #8]
 801aee8:	3b01      	subs	r3, #1
 801aeea:	60a3      	str	r3, [r4, #8]
 801aeec:	6823      	ldr	r3, [r4, #0]
 801aeee:	1c5a      	adds	r2, r3, #1
 801aef0:	6022      	str	r2, [r4, #0]
 801aef2:	701e      	strb	r6, [r3, #0]
 801aef4:	6962      	ldr	r2, [r4, #20]
 801aef6:	1c43      	adds	r3, r0, #1
 801aef8:	429a      	cmp	r2, r3
 801aefa:	d004      	beq.n	801af06 <__swbuf_r+0x6e>
 801aefc:	89a3      	ldrh	r3, [r4, #12]
 801aefe:	07db      	lsls	r3, r3, #31
 801af00:	d5e1      	bpl.n	801aec6 <__swbuf_r+0x2e>
 801af02:	2e0a      	cmp	r6, #10
 801af04:	d1df      	bne.n	801aec6 <__swbuf_r+0x2e>
 801af06:	4621      	mov	r1, r4
 801af08:	4628      	mov	r0, r5
 801af0a:	f7ff fdc7 	bl	801aa9c <_fflush_r>
 801af0e:	2800      	cmp	r0, #0
 801af10:	d0d9      	beq.n	801aec6 <__swbuf_r+0x2e>
 801af12:	e7d6      	b.n	801aec2 <__swbuf_r+0x2a>

0801af14 <__swsetup_r>:
 801af14:	b538      	push	{r3, r4, r5, lr}
 801af16:	4b29      	ldr	r3, [pc, #164]	@ (801afbc <__swsetup_r+0xa8>)
 801af18:	4605      	mov	r5, r0
 801af1a:	6818      	ldr	r0, [r3, #0]
 801af1c:	460c      	mov	r4, r1
 801af1e:	b118      	cbz	r0, 801af28 <__swsetup_r+0x14>
 801af20:	6a03      	ldr	r3, [r0, #32]
 801af22:	b90b      	cbnz	r3, 801af28 <__swsetup_r+0x14>
 801af24:	f7fe f8da 	bl	80190dc <__sinit>
 801af28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801af2c:	0719      	lsls	r1, r3, #28
 801af2e:	d422      	bmi.n	801af76 <__swsetup_r+0x62>
 801af30:	06da      	lsls	r2, r3, #27
 801af32:	d407      	bmi.n	801af44 <__swsetup_r+0x30>
 801af34:	2209      	movs	r2, #9
 801af36:	602a      	str	r2, [r5, #0]
 801af38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801af3c:	81a3      	strh	r3, [r4, #12]
 801af3e:	f04f 30ff 	mov.w	r0, #4294967295
 801af42:	e033      	b.n	801afac <__swsetup_r+0x98>
 801af44:	0758      	lsls	r0, r3, #29
 801af46:	d512      	bpl.n	801af6e <__swsetup_r+0x5a>
 801af48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801af4a:	b141      	cbz	r1, 801af5e <__swsetup_r+0x4a>
 801af4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801af50:	4299      	cmp	r1, r3
 801af52:	d002      	beq.n	801af5a <__swsetup_r+0x46>
 801af54:	4628      	mov	r0, r5
 801af56:	f7ff f801 	bl	8019f5c <_free_r>
 801af5a:	2300      	movs	r3, #0
 801af5c:	6363      	str	r3, [r4, #52]	@ 0x34
 801af5e:	89a3      	ldrh	r3, [r4, #12]
 801af60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801af64:	81a3      	strh	r3, [r4, #12]
 801af66:	2300      	movs	r3, #0
 801af68:	6063      	str	r3, [r4, #4]
 801af6a:	6923      	ldr	r3, [r4, #16]
 801af6c:	6023      	str	r3, [r4, #0]
 801af6e:	89a3      	ldrh	r3, [r4, #12]
 801af70:	f043 0308 	orr.w	r3, r3, #8
 801af74:	81a3      	strh	r3, [r4, #12]
 801af76:	6923      	ldr	r3, [r4, #16]
 801af78:	b94b      	cbnz	r3, 801af8e <__swsetup_r+0x7a>
 801af7a:	89a3      	ldrh	r3, [r4, #12]
 801af7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801af80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801af84:	d003      	beq.n	801af8e <__swsetup_r+0x7a>
 801af86:	4621      	mov	r1, r4
 801af88:	4628      	mov	r0, r5
 801af8a:	f000 f88b 	bl	801b0a4 <__smakebuf_r>
 801af8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801af92:	f013 0201 	ands.w	r2, r3, #1
 801af96:	d00a      	beq.n	801afae <__swsetup_r+0x9a>
 801af98:	2200      	movs	r2, #0
 801af9a:	60a2      	str	r2, [r4, #8]
 801af9c:	6962      	ldr	r2, [r4, #20]
 801af9e:	4252      	negs	r2, r2
 801afa0:	61a2      	str	r2, [r4, #24]
 801afa2:	6922      	ldr	r2, [r4, #16]
 801afa4:	b942      	cbnz	r2, 801afb8 <__swsetup_r+0xa4>
 801afa6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801afaa:	d1c5      	bne.n	801af38 <__swsetup_r+0x24>
 801afac:	bd38      	pop	{r3, r4, r5, pc}
 801afae:	0799      	lsls	r1, r3, #30
 801afb0:	bf58      	it	pl
 801afb2:	6962      	ldrpl	r2, [r4, #20]
 801afb4:	60a2      	str	r2, [r4, #8]
 801afb6:	e7f4      	b.n	801afa2 <__swsetup_r+0x8e>
 801afb8:	2000      	movs	r0, #0
 801afba:	e7f7      	b.n	801afac <__swsetup_r+0x98>
 801afbc:	24000128 	.word	0x24000128

0801afc0 <_raise_r>:
 801afc0:	291f      	cmp	r1, #31
 801afc2:	b538      	push	{r3, r4, r5, lr}
 801afc4:	4605      	mov	r5, r0
 801afc6:	460c      	mov	r4, r1
 801afc8:	d904      	bls.n	801afd4 <_raise_r+0x14>
 801afca:	2316      	movs	r3, #22
 801afcc:	6003      	str	r3, [r0, #0]
 801afce:	f04f 30ff 	mov.w	r0, #4294967295
 801afd2:	bd38      	pop	{r3, r4, r5, pc}
 801afd4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801afd6:	b112      	cbz	r2, 801afde <_raise_r+0x1e>
 801afd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801afdc:	b94b      	cbnz	r3, 801aff2 <_raise_r+0x32>
 801afde:	4628      	mov	r0, r5
 801afe0:	f000 f830 	bl	801b044 <_getpid_r>
 801afe4:	4622      	mov	r2, r4
 801afe6:	4601      	mov	r1, r0
 801afe8:	4628      	mov	r0, r5
 801afea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801afee:	f000 b817 	b.w	801b020 <_kill_r>
 801aff2:	2b01      	cmp	r3, #1
 801aff4:	d00a      	beq.n	801b00c <_raise_r+0x4c>
 801aff6:	1c59      	adds	r1, r3, #1
 801aff8:	d103      	bne.n	801b002 <_raise_r+0x42>
 801affa:	2316      	movs	r3, #22
 801affc:	6003      	str	r3, [r0, #0]
 801affe:	2001      	movs	r0, #1
 801b000:	e7e7      	b.n	801afd2 <_raise_r+0x12>
 801b002:	2100      	movs	r1, #0
 801b004:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b008:	4620      	mov	r0, r4
 801b00a:	4798      	blx	r3
 801b00c:	2000      	movs	r0, #0
 801b00e:	e7e0      	b.n	801afd2 <_raise_r+0x12>

0801b010 <raise>:
 801b010:	4b02      	ldr	r3, [pc, #8]	@ (801b01c <raise+0xc>)
 801b012:	4601      	mov	r1, r0
 801b014:	6818      	ldr	r0, [r3, #0]
 801b016:	f7ff bfd3 	b.w	801afc0 <_raise_r>
 801b01a:	bf00      	nop
 801b01c:	24000128 	.word	0x24000128

0801b020 <_kill_r>:
 801b020:	b538      	push	{r3, r4, r5, lr}
 801b022:	4d07      	ldr	r5, [pc, #28]	@ (801b040 <_kill_r+0x20>)
 801b024:	2300      	movs	r3, #0
 801b026:	4604      	mov	r4, r0
 801b028:	4608      	mov	r0, r1
 801b02a:	4611      	mov	r1, r2
 801b02c:	602b      	str	r3, [r5, #0]
 801b02e:	f7e7 ff21 	bl	8002e74 <_kill>
 801b032:	1c43      	adds	r3, r0, #1
 801b034:	d102      	bne.n	801b03c <_kill_r+0x1c>
 801b036:	682b      	ldr	r3, [r5, #0]
 801b038:	b103      	cbz	r3, 801b03c <_kill_r+0x1c>
 801b03a:	6023      	str	r3, [r4, #0]
 801b03c:	bd38      	pop	{r3, r4, r5, pc}
 801b03e:	bf00      	nop
 801b040:	24027a9c 	.word	0x24027a9c

0801b044 <_getpid_r>:
 801b044:	f7e7 bf0e 	b.w	8002e64 <_getpid>

0801b048 <_malloc_usable_size_r>:
 801b048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b04c:	1f18      	subs	r0, r3, #4
 801b04e:	2b00      	cmp	r3, #0
 801b050:	bfbc      	itt	lt
 801b052:	580b      	ldrlt	r3, [r1, r0]
 801b054:	18c0      	addlt	r0, r0, r3
 801b056:	4770      	bx	lr

0801b058 <__swhatbuf_r>:
 801b058:	b570      	push	{r4, r5, r6, lr}
 801b05a:	460c      	mov	r4, r1
 801b05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b060:	2900      	cmp	r1, #0
 801b062:	b096      	sub	sp, #88	@ 0x58
 801b064:	4615      	mov	r5, r2
 801b066:	461e      	mov	r6, r3
 801b068:	da0d      	bge.n	801b086 <__swhatbuf_r+0x2e>
 801b06a:	89a3      	ldrh	r3, [r4, #12]
 801b06c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b070:	f04f 0100 	mov.w	r1, #0
 801b074:	bf14      	ite	ne
 801b076:	2340      	movne	r3, #64	@ 0x40
 801b078:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b07c:	2000      	movs	r0, #0
 801b07e:	6031      	str	r1, [r6, #0]
 801b080:	602b      	str	r3, [r5, #0]
 801b082:	b016      	add	sp, #88	@ 0x58
 801b084:	bd70      	pop	{r4, r5, r6, pc}
 801b086:	466a      	mov	r2, sp
 801b088:	f000 f848 	bl	801b11c <_fstat_r>
 801b08c:	2800      	cmp	r0, #0
 801b08e:	dbec      	blt.n	801b06a <__swhatbuf_r+0x12>
 801b090:	9901      	ldr	r1, [sp, #4]
 801b092:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b096:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b09a:	4259      	negs	r1, r3
 801b09c:	4159      	adcs	r1, r3
 801b09e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b0a2:	e7eb      	b.n	801b07c <__swhatbuf_r+0x24>

0801b0a4 <__smakebuf_r>:
 801b0a4:	898b      	ldrh	r3, [r1, #12]
 801b0a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b0a8:	079d      	lsls	r5, r3, #30
 801b0aa:	4606      	mov	r6, r0
 801b0ac:	460c      	mov	r4, r1
 801b0ae:	d507      	bpl.n	801b0c0 <__smakebuf_r+0x1c>
 801b0b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b0b4:	6023      	str	r3, [r4, #0]
 801b0b6:	6123      	str	r3, [r4, #16]
 801b0b8:	2301      	movs	r3, #1
 801b0ba:	6163      	str	r3, [r4, #20]
 801b0bc:	b003      	add	sp, #12
 801b0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0c0:	ab01      	add	r3, sp, #4
 801b0c2:	466a      	mov	r2, sp
 801b0c4:	f7ff ffc8 	bl	801b058 <__swhatbuf_r>
 801b0c8:	9f00      	ldr	r7, [sp, #0]
 801b0ca:	4605      	mov	r5, r0
 801b0cc:	4639      	mov	r1, r7
 801b0ce:	4630      	mov	r0, r6
 801b0d0:	f7fd fa78 	bl	80185c4 <_malloc_r>
 801b0d4:	b948      	cbnz	r0, 801b0ea <__smakebuf_r+0x46>
 801b0d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b0da:	059a      	lsls	r2, r3, #22
 801b0dc:	d4ee      	bmi.n	801b0bc <__smakebuf_r+0x18>
 801b0de:	f023 0303 	bic.w	r3, r3, #3
 801b0e2:	f043 0302 	orr.w	r3, r3, #2
 801b0e6:	81a3      	strh	r3, [r4, #12]
 801b0e8:	e7e2      	b.n	801b0b0 <__smakebuf_r+0xc>
 801b0ea:	89a3      	ldrh	r3, [r4, #12]
 801b0ec:	6020      	str	r0, [r4, #0]
 801b0ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b0f2:	81a3      	strh	r3, [r4, #12]
 801b0f4:	9b01      	ldr	r3, [sp, #4]
 801b0f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b0fa:	b15b      	cbz	r3, 801b114 <__smakebuf_r+0x70>
 801b0fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b100:	4630      	mov	r0, r6
 801b102:	f000 f81d 	bl	801b140 <_isatty_r>
 801b106:	b128      	cbz	r0, 801b114 <__smakebuf_r+0x70>
 801b108:	89a3      	ldrh	r3, [r4, #12]
 801b10a:	f023 0303 	bic.w	r3, r3, #3
 801b10e:	f043 0301 	orr.w	r3, r3, #1
 801b112:	81a3      	strh	r3, [r4, #12]
 801b114:	89a3      	ldrh	r3, [r4, #12]
 801b116:	431d      	orrs	r5, r3
 801b118:	81a5      	strh	r5, [r4, #12]
 801b11a:	e7cf      	b.n	801b0bc <__smakebuf_r+0x18>

0801b11c <_fstat_r>:
 801b11c:	b538      	push	{r3, r4, r5, lr}
 801b11e:	4d07      	ldr	r5, [pc, #28]	@ (801b13c <_fstat_r+0x20>)
 801b120:	2300      	movs	r3, #0
 801b122:	4604      	mov	r4, r0
 801b124:	4608      	mov	r0, r1
 801b126:	4611      	mov	r1, r2
 801b128:	602b      	str	r3, [r5, #0]
 801b12a:	f7e7 ff03 	bl	8002f34 <_fstat>
 801b12e:	1c43      	adds	r3, r0, #1
 801b130:	d102      	bne.n	801b138 <_fstat_r+0x1c>
 801b132:	682b      	ldr	r3, [r5, #0]
 801b134:	b103      	cbz	r3, 801b138 <_fstat_r+0x1c>
 801b136:	6023      	str	r3, [r4, #0]
 801b138:	bd38      	pop	{r3, r4, r5, pc}
 801b13a:	bf00      	nop
 801b13c:	24027a9c 	.word	0x24027a9c

0801b140 <_isatty_r>:
 801b140:	b538      	push	{r3, r4, r5, lr}
 801b142:	4d06      	ldr	r5, [pc, #24]	@ (801b15c <_isatty_r+0x1c>)
 801b144:	2300      	movs	r3, #0
 801b146:	4604      	mov	r4, r0
 801b148:	4608      	mov	r0, r1
 801b14a:	602b      	str	r3, [r5, #0]
 801b14c:	f7e7 ff02 	bl	8002f54 <_isatty>
 801b150:	1c43      	adds	r3, r0, #1
 801b152:	d102      	bne.n	801b15a <_isatty_r+0x1a>
 801b154:	682b      	ldr	r3, [r5, #0]
 801b156:	b103      	cbz	r3, 801b15a <_isatty_r+0x1a>
 801b158:	6023      	str	r3, [r4, #0]
 801b15a:	bd38      	pop	{r3, r4, r5, pc}
 801b15c:	24027a9c 	.word	0x24027a9c

0801b160 <_init>:
 801b160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b162:	bf00      	nop
 801b164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b166:	bc08      	pop	{r3}
 801b168:	469e      	mov	lr, r3
 801b16a:	4770      	bx	lr

0801b16c <_fini>:
 801b16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b16e:	bf00      	nop
 801b170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b172:	bc08      	pop	{r3}
 801b174:	469e      	mov	lr, r3
 801b176:	4770      	bx	lr
