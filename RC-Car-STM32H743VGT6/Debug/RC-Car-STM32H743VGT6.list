
RC-Car-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017974  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  08017c14  08017c14  00018c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080180f4  080180f4  000190f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080180fc  080180fc  000190fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08018100  08018100  00019100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000016c  24000000  08018104  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00027770  2400016c  08018270  0001a16c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240278dc  08018270  0001a8dc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001a16c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002e51e  00000000  00000000  0001a19a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005558  00000000  00000000  000486b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000021b8  00000000  00000000  0004dc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001a56  00000000  00000000  0004fdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d0a1  00000000  00000000  0005181e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030bb0  00000000  00000000  0008e8bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001710a0  00000000  00000000  000bf46f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0023050f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009614  00000000  00000000  00230554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  00239b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400016c 	.word	0x2400016c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017bfc 	.word	0x08017bfc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000170 	.word	0x24000170
 80002dc:	08017bfc 	.word	0x08017bfc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006c0:	f3bf 8f4f 	dsb	sy
}
 80006c4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <__NVIC_SystemReset+0x24>)
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006ce:	4904      	ldr	r1, [pc, #16]	@ (80006e0 <__NVIC_SystemReset+0x24>)
 80006d0:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <__NVIC_SystemReset+0x28>)
 80006d2:	4313      	orrs	r3, r2
 80006d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80006d6:	f3bf 8f4f 	dsb	sy
}
 80006da:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <__NVIC_SystemReset+0x20>
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	05fa0004 	.word	0x05fa0004

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006ee:	f001 fb03 	bl	8001cf8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f002 fa25 	bl	8002b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f911 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f000 fd79 	bl	80011f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80006fe:	f000 fd1f 	bl	8001140 <MX_DMA_Init>
  MX_MDMA_Init();
 8000702:	f000 fd55 	bl	80011b0 <MX_MDMA_Init>
  MX_USART1_UART_Init();
 8000706:	f000 fcc9 	bl	800109c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800070a:	f016 f875 	bl	80167f8 <MX_USB_DEVICE_Init>
  MX_DCMI_Init();
 800070e:	f000 f97f 	bl	8000a10 <MX_DCMI_Init>
  MX_I2C2_Init();
 8000712:	f000 f9b3 	bl	8000a7c <MX_I2C2_Init>
  MX_TIM14_Init();
 8000716:	f000 fc75 	bl	8001004 <MX_TIM14_Init>
  MX_TIM2_Init();
 800071a:	f000 fae7 	bl	8000cec <MX_TIM2_Init>
  MX_TIM4_Init();
 800071e:	f000 fbbb 	bl	8000e98 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000722:	f000 fa55 	bl	8000bd0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000726:	f000 fb51 	bl	8000dcc <MX_TIM3_Init>
  MX_JPEG_Init();
 800072a:	f000 f9e7 	bl	8000afc <MX_JPEG_Init>
  MX_SPI2_Init();
 800072e:	f000 f9f9 	bl	8000b24 <MX_SPI2_Init>
  MX_TIM5_Init();
 8000732:	f000 fc17 	bl	8000f64 <MX_TIM5_Init>

	// ------------------------------------------------------------ SETUP USB MESSAGING -- //
	//uint8_t usb_msg[100] = {0};	// Reserve 100 bytes for USB Debug messages

	// ------------------------------------------------------------ SETUP CAMERA INTERFACE -- //
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// XCLK - Start the camera's core clock
 8000736:	2100      	movs	r1, #0
 8000738:	4865      	ldr	r0, [pc, #404]	@ (80008d0 <main+0x1e8>)
 800073a:	f00f f97d 	bl	800fa38 <HAL_TIM_PWM_Start>
	// X 		  COM15 [6] = 1 (Data range [00-FF])
	// X 		  COM15 [5] = 0 (RGB 565)
	// X 		  COM15 [4] = 1 (RGB 565)
	uint8_t cam_regCache;

	cam_regCache = 0b00001000;
 800073e:	2308      	movs	r3, #8
 8000740:	71fb      	strb	r3, [r7, #7]
	while (CAM_SetRegister(0x0C, cam_regCache, 0)) {}
 8000742:	bf00      	nop
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	2200      	movs	r2, #0
 8000748:	4619      	mov	r1, r3
 800074a:	200c      	movs	r0, #12
 800074c:	f001 f98c 	bl	8001a68 <CAM_SetRegister>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d1f6      	bne.n	8000744 <main+0x5c>

	cam_regCache = 0b00010000;
 8000756:	2310      	movs	r3, #16
 8000758:	71fb      	strb	r3, [r7, #7]
	while (CAM_SetRegister(0x12, cam_regCache, 0)) {}
 800075a:	bf00      	nop
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2200      	movs	r2, #0
 8000760:	4619      	mov	r1, r3
 8000762:	2012      	movs	r0, #18
 8000764:	f001 f980 	bl	8001a68 <CAM_SetRegister>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1f6      	bne.n	800075c <main+0x74>

	cam_regCache = 0b10000110;
 800076e:	2386      	movs	r3, #134	@ 0x86
 8000770:	71fb      	strb	r3, [r7, #7]
	while (CAM_SetRegister(0x32, cam_regCache, 0)) {}
 8000772:	bf00      	nop
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2200      	movs	r2, #0
 8000778:	4619      	mov	r1, r3
 800077a:	2032      	movs	r0, #50	@ 0x32
 800077c:	f001 f974 	bl	8001a68 <CAM_SetRegister>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1f6      	bne.n	8000774 <main+0x8c>
	//while (CAM_SetRegister(0x40, cam_regCache, 0)) {}

	// ------------------------------------------------------------ SETUP JPEG ENCODING -- //
	// Set the CONFIG
	JPEG_ConfTypeDef* jpeg_config;
	jpeg_config->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
	//jpeg_config->ColorSpace = JPEG_YCBCR_COLORSPACE;
	//jpeg_config->ChromaSubsampling = JPEG_422_SUBSAMPLING;
	jpeg_config->ImageWidth = jpeg_mcu_widths[jpeg_quality]*8;
 800078c:	4b51      	ldr	r3, [pc, #324]	@ (80008d4 <main+0x1ec>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4b51      	ldr	r3, [pc, #324]	@ (80008d8 <main+0x1f0>)
 8000794:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	461a      	mov	r2, r3
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	60da      	str	r2, [r3, #12]
	jpeg_config->ImageHeight = jpeg_mcu_heights[jpeg_quality]*8;
 80007a0:	4b4c      	ldr	r3, [pc, #304]	@ (80008d4 <main+0x1ec>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b4d      	ldr	r3, [pc, #308]	@ (80008dc <main+0x1f4>)
 80007a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007ac:	00db      	lsls	r3, r3, #3
 80007ae:	461a      	mov	r2, r3
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	609a      	str	r2, [r3, #8]
	jpeg_config->ImageQuality = JPEG_QUALITY;
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	2214      	movs	r2, #20
 80007b8:	611a      	str	r2, [r3, #16]
	HAL_JPEG_ConfigEncoding(&hjpeg, jpeg_config);
 80007ba:	6839      	ldr	r1, [r7, #0]
 80007bc:	4848      	ldr	r0, [pc, #288]	@ (80008e0 <main+0x1f8>)
 80007be:	f008 f907 	bl	80089d0 <HAL_JPEG_ConfigEncoding>

	// ------------------------------------------------------------ SETUP WATCHDOG TIMER-- //
	if (HAL_TIM_Base_Start_IT(&htim5) != HAL_OK)
 80007c2:	4848      	ldr	r0, [pc, #288]	@ (80008e4 <main+0x1fc>)
 80007c4:	f00f f868 	bl	800f898 <HAL_TIM_Base_Start_IT>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00e      	beq.n	80007ec <main+0x104>
	{
		sprintf(ssd_msg, " Failed to Start Watchdog");
 80007ce:	4946      	ldr	r1, [pc, #280]	@ (80008e8 <main+0x200>)
 80007d0:	4846      	ldr	r0, [pc, #280]	@ (80008ec <main+0x204>)
 80007d2:	f016 fe21 	bl	8017418 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 80007d6:	4845      	ldr	r0, [pc, #276]	@ (80008ec <main+0x204>)
 80007d8:	f7ff fd82 	bl	80002e0 <strlen>
 80007dc:	4603      	mov	r3, r0
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	4619      	mov	r1, r3
 80007e2:	4842      	ldr	r0, [pc, #264]	@ (80008ec <main+0x204>)
 80007e4:	f001 f8b7 	bl	8001956 <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 80007e8:	f7ff ff68 	bl	80006bc <__NVIC_SystemReset>
		while (1) {}
	}

	// ------------------------------------------------------------ SETUP XBEE -- //
	hxbee.uart_handle = &huart1;
 80007ec:	4b40      	ldr	r3, [pc, #256]	@ (80008f0 <main+0x208>)
 80007ee:	4a41      	ldr	r2, [pc, #260]	@ (80008f4 <main+0x20c>)
 80007f0:	601a      	str	r2, [r3, #0]
	hxbee.pktRx_max = 2;
 80007f2:	4b3f      	ldr	r3, [pc, #252]	@ (80008f0 <main+0x208>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	761a      	strb	r2, [r3, #24]
	hxbee.pktTx_max = 2;
 80007f8:	4b3d      	ldr	r3, [pc, #244]	@ (80008f0 <main+0x208>)
 80007fa:	2202      	movs	r2, #2
 80007fc:	f883 2020 	strb.w	r2, [r3, #32]

	if (XBEE_Init(&hxbee)) {
 8000800:	483b      	ldr	r0, [pc, #236]	@ (80008f0 <main+0x208>)
 8000802:	f013 fe16 	bl	8014432 <XBEE_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00e      	beq.n	800082a <main+0x142>
		sprintf(ssd_msg, " Failed to Init XBEE");
 800080c:	493a      	ldr	r1, [pc, #232]	@ (80008f8 <main+0x210>)
 800080e:	4837      	ldr	r0, [pc, #220]	@ (80008ec <main+0x204>)
 8000810:	f016 fe02 	bl	8017418 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8000814:	4835      	ldr	r0, [pc, #212]	@ (80008ec <main+0x204>)
 8000816:	f7ff fd63 	bl	80002e0 <strlen>
 800081a:	4603      	mov	r3, r0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	4619      	mov	r1, r3
 8000820:	4832      	ldr	r0, [pc, #200]	@ (80008ec <main+0x204>)
 8000822:	f001 f898 	bl	8001956 <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000826:	f7ff ff49 	bl	80006bc <__NVIC_SystemReset>
	}

	// SETUP MOTOR
	TIM2->CCR1 = 0;
 800082a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800082e:	2200      	movs	r2, #0
 8000830:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = 0;
 8000832:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000836:	2200      	movs	r2, #0
 8000838:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR4 = 0;
 800083a:	4b30      	ldr	r3, [pc, #192]	@ (80008fc <main+0x214>)
 800083c:	2200      	movs	r2, #0
 800083e:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM4->CCR3 = 0;
 8000840:	4b2e      	ldr	r3, [pc, #184]	@ (80008fc <main+0x214>)
 8000842:	2200      	movs	r2, #0
 8000844:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // LEFT_PWM_1
 8000846:	2100      	movs	r1, #0
 8000848:	482d      	ldr	r0, [pc, #180]	@ (8000900 <main+0x218>)
 800084a:	f00f f8f5 	bl	800fa38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // RIGHT_PWM_1
 800084e:	2104      	movs	r1, #4
 8000850:	482b      	ldr	r0, [pc, #172]	@ (8000900 <main+0x218>)
 8000852:	f00f f8f1 	bl	800fa38 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // LEFT_PWM_2
 8000856:	210c      	movs	r1, #12
 8000858:	482a      	ldr	r0, [pc, #168]	@ (8000904 <main+0x21c>)
 800085a:	f00f f8ed 	bl	800fa38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // RIGHT_PWM_2
 800085e:	2108      	movs	r1, #8
 8000860:	4828      	ldr	r0, [pc, #160]	@ (8000904 <main+0x21c>)
 8000862:	f00f f8e9 	bl	800fa38 <HAL_TIM_PWM_Start>

	// Setup lights
	TIM1->CCR4 = 1000; // 0 - 2000
 8000866:	4b28      	ldr	r3, [pc, #160]	@ (8000908 <main+0x220>)
 8000868:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800086c:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM3->CCR4 = 1000;
 800086e:	4b27      	ldr	r3, [pc, #156]	@ (800090c <main+0x224>)
 8000870:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000874:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM3->CCR3 = 1000;
 8000876:	4b25      	ldr	r3, [pc, #148]	@ (800090c <main+0x224>)
 8000878:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800087c:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2->CCR4 = 1000;
 800087e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000882:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000886:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // LIGHTS_PWM_1
 8000888:	210c      	movs	r1, #12
 800088a:	4821      	ldr	r0, [pc, #132]	@ (8000910 <main+0x228>)
 800088c:	f00f f8d4 	bl	800fa38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // LIGHTS_PWM_2
 8000890:	210c      	movs	r1, #12
 8000892:	4820      	ldr	r0, [pc, #128]	@ (8000914 <main+0x22c>)
 8000894:	f00f f8d0 	bl	800fa38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // LIGHTS_PWM_3
 8000898:	2108      	movs	r1, #8
 800089a:	481e      	ldr	r0, [pc, #120]	@ (8000914 <main+0x22c>)
 800089c:	f00f f8cc 	bl	800fa38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // LIGHTS_PWM_4
 80008a0:	2108      	movs	r1, #8
 80008a2:	4817      	ldr	r0, [pc, #92]	@ (8000900 <main+0x218>)
 80008a4:	f00f f8c8 	bl	800fa38 <HAL_TIM_PWM_Start>

	// Delay for goofiness
	HAL_Delay(1000);
 80008a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008ac:	f002 f9da 	bl	8002c64 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); // Motor_en
 80008b0:	2200      	movs	r2, #0
 80008b2:	2108      	movs	r1, #8
 80008b4:	4818      	ldr	r0, [pc, #96]	@ (8000918 <main+0x230>)
 80008b6:	f006 fb23 	bl	8006f00 <HAL_GPIO_WritePin>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		SCH_XBeeRX();	// Handle radio recieve
 80008ba:	f000 fd8d 	bl	80013d8 <SCH_XBeeRX>
		SCH_Camera();	// Take a picture if camera idle
 80008be:	f000 ff01 	bl	80016c4 <SCH_Camera>
		SCH_JPEG();		// Convert JPEG if camera ready to present
 80008c2:	f000 ff3f 	bl	8001744 <SCH_JPEG>
		SCH_XBeeTX();	// Transmit JPEG if JPEG ready
 80008c6:	f000 fe63 	bl	8001590 <SCH_XBeeTX>
		SCH_XBeeRX();	// Handle radio recieve
 80008ca:	bf00      	nop
 80008cc:	e7f5      	b.n	80008ba <main+0x1d2>
 80008ce:	bf00      	nop
 80008d0:	240005d8 	.word	0x240005d8
 80008d4:	24025b78 	.word	0x24025b78
 80008d8:	24000004 	.word	0x24000004
 80008dc:	2400000c 	.word	0x2400000c
 80008e0:	240002a4 	.word	0x240002a4
 80008e4:	2400058c 	.word	0x2400058c
 80008e8:	08017c14 	.word	0x08017c14
 80008ec:	24000738 	.word	0x24000738
 80008f0:	24025b7c 	.word	0x24025b7c
 80008f4:	24000624 	.word	0x24000624
 80008f8:	08017c30 	.word	0x08017c30
 80008fc:	40000800 	.word	0x40000800
 8000900:	240004a8 	.word	0x240004a8
 8000904:	24000540 	.word	0x24000540
 8000908:	40010000 	.word	0x40010000
 800090c:	40000400 	.word	0x40000400
 8000910:	2400045c 	.word	0x2400045c
 8000914:	240004f4 	.word	0x240004f4
 8000918:	58020000 	.word	0x58020000

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b09c      	sub	sp, #112	@ 0x70
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000926:	224c      	movs	r2, #76	@ 0x4c
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f016 fd96 	bl	801745c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2220      	movs	r2, #32
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f016 fd90 	bl	801745c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800093c:	2002      	movs	r0, #2
 800093e:	f00b ffb9 	bl	800c8b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b30      	ldr	r3, [pc, #192]	@ (8000a08 <SystemClock_Config+0xec>)
 8000948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800094a:	4a2f      	ldr	r2, [pc, #188]	@ (8000a08 <SystemClock_Config+0xec>)
 800094c:	f023 0301 	bic.w	r3, r3, #1
 8000950:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000952:	4b2d      	ldr	r3, [pc, #180]	@ (8000a08 <SystemClock_Config+0xec>)
 8000954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a0c <SystemClock_Config+0xf0>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a2a      	ldr	r2, [pc, #168]	@ (8000a0c <SystemClock_Config+0xf0>)
 8000962:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b28      	ldr	r3, [pc, #160]	@ (8000a0c <SystemClock_Config+0xf0>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000974:	bf00      	nop
 8000976:	4b25      	ldr	r3, [pc, #148]	@ (8000a0c <SystemClock_Config+0xf0>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800097e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000982:	d1f8      	bne.n	8000976 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000984:	2301      	movs	r3, #1
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000988:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800098c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098e:	2302      	movs	r3, #2
 8000990:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000992:	2302      	movs	r3, #2
 8000994:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000996:	2302      	movs	r3, #2
 8000998:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800099a:	2318      	movs	r3, #24
 800099c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800099e:	2302      	movs	r3, #2
 80009a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80009a2:	2306      	movs	r3, #6
 80009a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009a6:	2302      	movs	r3, #2
 80009a8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009aa:	230c      	movs	r3, #12
 80009ac:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ba:	4618      	mov	r0, r3
 80009bc:	f00b ffc4 	bl	800c948 <HAL_RCC_OscConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009c6:	f001 f9c3 	bl	8001d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ca:	233f      	movs	r3, #63	@ 0x3f
 80009cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ce:	2303      	movs	r3, #3
 80009d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009da:	2340      	movs	r3, #64	@ 0x40
 80009dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009de:	2340      	movs	r3, #64	@ 0x40
 80009e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009e8:	2340      	movs	r3, #64	@ 0x40
 80009ea:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2102      	movs	r1, #2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f00c fc03 	bl	800d1fc <HAL_RCC_ClockConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80009fc:	f001 f9a8 	bl	8001d50 <Error_Handler>
  }
}
 8000a00:	bf00      	nop
 8000a02:	3770      	adds	r7, #112	@ 0x70
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	58000400 	.word	0x58000400
 8000a0c:	58024800 	.word	0x58024800

08000a10 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000a14:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <MX_DCMI_Init+0x64>)
 8000a16:	4a18      	ldr	r2, [pc, #96]	@ (8000a78 <MX_DCMI_Init+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <MX_DCMI_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000a20:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <MX_DCMI_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000a26:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <MX_DCMI_Init+0x64>)
 8000a28:	2280      	movs	r2, #128	@ 0x80
 8000a2a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_DCMI_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <MX_DCMI_Init+0x64>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000a38:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_DCMI_Init+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <MX_DCMI_Init+0x64>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_OTHER;
 8000a44:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <MX_DCMI_Init+0x64>)
 8000a46:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_EVEN;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_DCMI_Init+0x64>)
 8000a4e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a52:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000a54:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <MX_DCMI_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <MX_DCMI_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	@ (8000a74 <MX_DCMI_Init+0x64>)
 8000a62:	f002 fab7 	bl	8002fd4 <HAL_DCMI_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_DCMI_Init+0x60>
  {
    Error_Handler();
 8000a6c:	f001 f970 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	24000188 	.word	0x24000188
 8000a78:	48020000 	.word	0x48020000

08000a7c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000a82:	4a1c      	ldr	r2, [pc, #112]	@ (8000af4 <MX_I2C2_Init+0x78>)
 8000a84:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 8000a86:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000a88:	4a1b      	ldr	r2, [pc, #108]	@ (8000af8 <MX_I2C2_Init+0x7c>)
 8000a8a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a8c:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a92:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a98:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a9e:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ab6:	480e      	ldr	r0, [pc, #56]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000ab8:	f006 fa3c 	bl	8006f34 <HAL_I2C_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ac2:	f001 f945 	bl	8001d50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4809      	ldr	r0, [pc, #36]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000aca:	f007 fe67 	bl	800879c <HAL_I2CEx_ConfigAnalogFilter>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ad4:	f001 f93c 	bl	8001d50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <MX_I2C2_Init+0x74>)
 8000adc:	f007 fea9 	bl	8008832 <HAL_I2CEx_ConfigDigitalFilter>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ae6:	f001 f933 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	24000250 	.word	0x24000250
 8000af4:	40005800 	.word	0x40005800
 8000af8:	00c0eaff 	.word	0x00c0eaff

08000afc <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <MX_JPEG_Init+0x20>)
 8000b02:	4a07      	ldr	r2, [pc, #28]	@ (8000b20 <MX_JPEG_Init+0x24>)
 8000b04:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <MX_JPEG_Init+0x20>)
 8000b08:	f007 fee0 	bl	80088cc <HAL_JPEG_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000b12:	f001 f91d 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	240002a4 	.word	0x240002a4
 8000b20:	52003000 	.word	0x52003000

08000b24 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b28:	4b27      	ldr	r3, [pc, #156]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000b2a:	4a28      	ldr	r2, [pc, #160]	@ (8000bcc <MX_SPI2_Init+0xa8>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b2e:	4b26      	ldr	r3, [pc, #152]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000b30:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b36:	4b24      	ldr	r3, [pc, #144]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b3c:	4b22      	ldr	r3, [pc, #136]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000b3e:	2203      	movs	r2, #3
 8000b40:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b42:	4b21      	ldr	r3, [pc, #132]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b48:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000b50:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b54:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b56:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b62:	4b19      	ldr	r3, [pc, #100]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b68:	4b17      	ldr	r3, [pc, #92]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000b6e:	4b16      	ldr	r3, [pc, #88]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b74:	4b14      	ldr	r3, [pc, #80]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000b76:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b7a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b82:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <MX_SPI2_Init+0xa4>)
 8000bb4:	f00e fcda 	bl	800f56c <HAL_SPI_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000bbe:	f001 f8c7 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	240003d4 	.word	0x240003d4
 8000bcc:	40003800 	.word	0x40003800

08000bd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b096      	sub	sp, #88	@ 0x58
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000be2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]
 8000bf2:	615a      	str	r2, [r3, #20]
 8000bf4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	222c      	movs	r2, #44	@ 0x2c
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f016 fc2d 	bl	801745c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c02:	4b38      	ldr	r3, [pc, #224]	@ (8000ce4 <MX_TIM1_Init+0x114>)
 8000c04:	4a38      	ldr	r2, [pc, #224]	@ (8000ce8 <MX_TIM1_Init+0x118>)
 8000c06:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c08:	4b36      	ldr	r3, [pc, #216]	@ (8000ce4 <MX_TIM1_Init+0x114>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0e:	4b35      	ldr	r3, [pc, #212]	@ (8000ce4 <MX_TIM1_Init+0x114>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000c14:	4b33      	ldr	r3, [pc, #204]	@ (8000ce4 <MX_TIM1_Init+0x114>)
 8000c16:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000c1a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1c:	4b31      	ldr	r3, [pc, #196]	@ (8000ce4 <MX_TIM1_Init+0x114>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c22:	4b30      	ldr	r3, [pc, #192]	@ (8000ce4 <MX_TIM1_Init+0x114>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c28:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce4 <MX_TIM1_Init+0x114>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c2e:	482d      	ldr	r0, [pc, #180]	@ (8000ce4 <MX_TIM1_Init+0x114>)
 8000c30:	f00e feaa 	bl	800f988 <HAL_TIM_PWM_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000c3a:	f001 f889 	bl	8001d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c42:	2300      	movs	r3, #0
 8000c44:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c4a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4824      	ldr	r0, [pc, #144]	@ (8000ce4 <MX_TIM1_Init+0x114>)
 8000c52:	f00f ff7f 	bl	8010b54 <HAL_TIMEx_MasterConfigSynchronization>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c5c:	f001 f878 	bl	8001d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c60:	2360      	movs	r3, #96	@ 0x60
 8000c62:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c70:	2300      	movs	r3, #0
 8000c72:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c74:	2300      	movs	r3, #0
 8000c76:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c78:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c7c:	220c      	movs	r2, #12
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4818      	ldr	r0, [pc, #96]	@ (8000ce4 <MX_TIM1_Init+0x114>)
 8000c82:	f00f f8ef 	bl	800fe64 <HAL_TIM_PWM_ConfigChannel>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000c8c:	f001 f860 	bl	8001d50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ca4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ca8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000cb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4807      	ldr	r0, [pc, #28]	@ (8000ce4 <MX_TIM1_Init+0x114>)
 8000cc6:	f00f ffd3 	bl	8010c70 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000cd0:	f001 f83e 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cd4:	4803      	ldr	r0, [pc, #12]	@ (8000ce4 <MX_TIM1_Init+0x114>)
 8000cd6:	f001 fbf5 	bl	80024c4 <HAL_TIM_MspPostInit>

}
 8000cda:	bf00      	nop
 8000cdc:	3758      	adds	r7, #88	@ 0x58
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2400045c 	.word	0x2400045c
 8000ce8:	40010000 	.word	0x40010000

08000cec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	@ 0x28
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
 8000d0c:	615a      	str	r2, [r3, #20]
 8000d0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d10:	4b2d      	ldr	r3, [pc, #180]	@ (8000dc8 <MX_TIM2_Init+0xdc>)
 8000d12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d18:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc8 <MX_TIM2_Init+0xdc>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc8 <MX_TIM2_Init+0xdc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000d24:	4b28      	ldr	r3, [pc, #160]	@ (8000dc8 <MX_TIM2_Init+0xdc>)
 8000d26:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2c:	4b26      	ldr	r3, [pc, #152]	@ (8000dc8 <MX_TIM2_Init+0xdc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d32:	4b25      	ldr	r3, [pc, #148]	@ (8000dc8 <MX_TIM2_Init+0xdc>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d38:	4823      	ldr	r0, [pc, #140]	@ (8000dc8 <MX_TIM2_Init+0xdc>)
 8000d3a:	f00e fe25 	bl	800f988 <HAL_TIM_PWM_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000d44:	f001 f804 	bl	8001d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	481c      	ldr	r0, [pc, #112]	@ (8000dc8 <MX_TIM2_Init+0xdc>)
 8000d58:	f00f fefc 	bl	8010b54 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000d62:	f000 fff5 	bl	8001d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d66:	2360      	movs	r3, #96	@ 0x60
 8000d68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d76:	463b      	mov	r3, r7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4812      	ldr	r0, [pc, #72]	@ (8000dc8 <MX_TIM2_Init+0xdc>)
 8000d7e:	f00f f871 	bl	800fe64 <HAL_TIM_PWM_ConfigChannel>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000d88:	f000 ffe2 	bl	8001d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	2204      	movs	r2, #4
 8000d90:	4619      	mov	r1, r3
 8000d92:	480d      	ldr	r0, [pc, #52]	@ (8000dc8 <MX_TIM2_Init+0xdc>)
 8000d94:	f00f f866 	bl	800fe64 <HAL_TIM_PWM_ConfigChannel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000d9e:	f000 ffd7 	bl	8001d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000da2:	463b      	mov	r3, r7
 8000da4:	2208      	movs	r2, #8
 8000da6:	4619      	mov	r1, r3
 8000da8:	4807      	ldr	r0, [pc, #28]	@ (8000dc8 <MX_TIM2_Init+0xdc>)
 8000daa:	f00f f85b 	bl	800fe64 <HAL_TIM_PWM_ConfigChannel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000db4:	f000 ffcc 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000db8:	4803      	ldr	r0, [pc, #12]	@ (8000dc8 <MX_TIM2_Init+0xdc>)
 8000dba:	f001 fb83 	bl	80024c4 <HAL_TIM_MspPostInit>

}
 8000dbe:	bf00      	nop
 8000dc0:	3728      	adds	r7, #40	@ 0x28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	240004a8 	.word	0x240004a8

08000dcc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	@ 0x28
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dde:	463b      	mov	r3, r7
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
 8000dec:	615a      	str	r2, [r3, #20]
 8000dee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000df0:	4b27      	ldr	r3, [pc, #156]	@ (8000e90 <MX_TIM3_Init+0xc4>)
 8000df2:	4a28      	ldr	r2, [pc, #160]	@ (8000e94 <MX_TIM3_Init+0xc8>)
 8000df4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000df6:	4b26      	ldr	r3, [pc, #152]	@ (8000e90 <MX_TIM3_Init+0xc4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfc:	4b24      	ldr	r3, [pc, #144]	@ (8000e90 <MX_TIM3_Init+0xc4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000e02:	4b23      	ldr	r3, [pc, #140]	@ (8000e90 <MX_TIM3_Init+0xc4>)
 8000e04:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0a:	4b21      	ldr	r3, [pc, #132]	@ (8000e90 <MX_TIM3_Init+0xc4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e10:	4b1f      	ldr	r3, [pc, #124]	@ (8000e90 <MX_TIM3_Init+0xc4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e16:	481e      	ldr	r0, [pc, #120]	@ (8000e90 <MX_TIM3_Init+0xc4>)
 8000e18:	f00e fdb6 	bl	800f988 <HAL_TIM_PWM_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000e22:	f000 ff95 	bl	8001d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	4619      	mov	r1, r3
 8000e34:	4816      	ldr	r0, [pc, #88]	@ (8000e90 <MX_TIM3_Init+0xc4>)
 8000e36:	f00f fe8d 	bl	8010b54 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000e40:	f000 ff86 	bl	8001d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e44:	2360      	movs	r3, #96	@ 0x60
 8000e46:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e54:	463b      	mov	r3, r7
 8000e56:	2208      	movs	r2, #8
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480d      	ldr	r0, [pc, #52]	@ (8000e90 <MX_TIM3_Init+0xc4>)
 8000e5c:	f00f f802 	bl	800fe64 <HAL_TIM_PWM_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000e66:	f000 ff73 	bl	8001d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	220c      	movs	r2, #12
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4807      	ldr	r0, [pc, #28]	@ (8000e90 <MX_TIM3_Init+0xc4>)
 8000e72:	f00e fff7 	bl	800fe64 <HAL_TIM_PWM_ConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000e7c:	f000 ff68 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e80:	4803      	ldr	r0, [pc, #12]	@ (8000e90 <MX_TIM3_Init+0xc4>)
 8000e82:	f001 fb1f 	bl	80024c4 <HAL_TIM_MspPostInit>

}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	@ 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	240004f4 	.word	0x240004f4
 8000e94:	40000400 	.word	0x40000400

08000e98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	@ 0x28
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	615a      	str	r2, [r3, #20]
 8000eba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ebc:	4b27      	ldr	r3, [pc, #156]	@ (8000f5c <MX_TIM4_Init+0xc4>)
 8000ebe:	4a28      	ldr	r2, [pc, #160]	@ (8000f60 <MX_TIM4_Init+0xc8>)
 8000ec0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ec2:	4b26      	ldr	r3, [pc, #152]	@ (8000f5c <MX_TIM4_Init+0xc4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec8:	4b24      	ldr	r3, [pc, #144]	@ (8000f5c <MX_TIM4_Init+0xc4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000ece:	4b23      	ldr	r3, [pc, #140]	@ (8000f5c <MX_TIM4_Init+0xc4>)
 8000ed0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000ed4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed6:	4b21      	ldr	r3, [pc, #132]	@ (8000f5c <MX_TIM4_Init+0xc4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000edc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f5c <MX_TIM4_Init+0xc4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ee2:	481e      	ldr	r0, [pc, #120]	@ (8000f5c <MX_TIM4_Init+0xc4>)
 8000ee4:	f00e fd50 	bl	800f988 <HAL_TIM_PWM_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000eee:	f000 ff2f 	bl	8001d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	4816      	ldr	r0, [pc, #88]	@ (8000f5c <MX_TIM4_Init+0xc4>)
 8000f02:	f00f fe27 	bl	8010b54 <HAL_TIMEx_MasterConfigSynchronization>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000f0c:	f000 ff20 	bl	8001d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f10:	2360      	movs	r3, #96	@ 0x60
 8000f12:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f20:	463b      	mov	r3, r7
 8000f22:	2208      	movs	r2, #8
 8000f24:	4619      	mov	r1, r3
 8000f26:	480d      	ldr	r0, [pc, #52]	@ (8000f5c <MX_TIM4_Init+0xc4>)
 8000f28:	f00e ff9c 	bl	800fe64 <HAL_TIM_PWM_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000f32:	f000 ff0d 	bl	8001d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f36:	463b      	mov	r3, r7
 8000f38:	220c      	movs	r2, #12
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4807      	ldr	r0, [pc, #28]	@ (8000f5c <MX_TIM4_Init+0xc4>)
 8000f3e:	f00e ff91 	bl	800fe64 <HAL_TIM_PWM_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000f48:	f000 ff02 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f4c:	4803      	ldr	r0, [pc, #12]	@ (8000f5c <MX_TIM4_Init+0xc4>)
 8000f4e:	f001 fab9 	bl	80024c4 <HAL_TIM_MspPostInit>

}
 8000f52:	bf00      	nop
 8000f54:	3728      	adds	r7, #40	@ 0x28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	24000540 	.word	0x24000540
 8000f60:	40000800 	.word	0x40000800

08000f64 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff8 <MX_TIM5_Init+0x94>)
 8000f84:	4a1d      	ldr	r2, [pc, #116]	@ (8000ffc <MX_TIM5_Init+0x98>)
 8000f86:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <MX_TIM5_Init+0x94>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <MX_TIM5_Init+0x94>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 7499998;
 8000f94:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <MX_TIM5_Init+0x94>)
 8000f96:	4a1a      	ldr	r2, [pc, #104]	@ (8001000 <MX_TIM5_Init+0x9c>)
 8000f98:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <MX_TIM5_Init+0x94>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <MX_TIM5_Init+0x94>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000fa6:	4814      	ldr	r0, [pc, #80]	@ (8000ff8 <MX_TIM5_Init+0x94>)
 8000fa8:	f00e fc1f 	bl	800f7ea <HAL_TIM_Base_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000fb2:	f000 fecd 	bl	8001d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480d      	ldr	r0, [pc, #52]	@ (8000ff8 <MX_TIM5_Init+0x94>)
 8000fc4:	f00f f862 	bl	801008c <HAL_TIM_ConfigClockSource>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000fce:	f000 febf 	bl	8001d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4806      	ldr	r0, [pc, #24]	@ (8000ff8 <MX_TIM5_Init+0x94>)
 8000fe0:	f00f fdb8 	bl	8010b54 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000fea:	f000 feb1 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	3720      	adds	r7, #32
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2400058c 	.word	0x2400058c
 8000ffc:	40000c00 	.word	0x40000c00
 8001000:	007270de 	.word	0x007270de

08001004 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
 8001018:	615a      	str	r2, [r3, #20]
 800101a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800101c:	4b1d      	ldr	r3, [pc, #116]	@ (8001094 <MX_TIM14_Init+0x90>)
 800101e:	4a1e      	ldr	r2, [pc, #120]	@ (8001098 <MX_TIM14_Init+0x94>)
 8001020:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001022:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <MX_TIM14_Init+0x90>)
 8001024:	2200      	movs	r2, #0
 8001026:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	4b1a      	ldr	r3, [pc, #104]	@ (8001094 <MX_TIM14_Init+0x90>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5;
 800102e:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <MX_TIM14_Init+0x90>)
 8001030:	2205      	movs	r2, #5
 8001032:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001034:	4b17      	ldr	r3, [pc, #92]	@ (8001094 <MX_TIM14_Init+0x90>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800103a:	4b16      	ldr	r3, [pc, #88]	@ (8001094 <MX_TIM14_Init+0x90>)
 800103c:	2280      	movs	r2, #128	@ 0x80
 800103e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001040:	4814      	ldr	r0, [pc, #80]	@ (8001094 <MX_TIM14_Init+0x90>)
 8001042:	f00e fbd2 	bl	800f7ea <HAL_TIM_Base_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 800104c:	f000 fe80 	bl	8001d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001050:	4810      	ldr	r0, [pc, #64]	@ (8001094 <MX_TIM14_Init+0x90>)
 8001052:	f00e fc99 	bl	800f988 <HAL_TIM_PWM_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 800105c:	f000 fe78 	bl	8001d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001060:	2360      	movs	r3, #96	@ 0x60
 8001062:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3;
 8001064:	2303      	movs	r3, #3
 8001066:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800106c:	2304      	movs	r3, #4
 800106e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	4807      	ldr	r0, [pc, #28]	@ (8001094 <MX_TIM14_Init+0x90>)
 8001078:	f00e fef4 	bl	800fe64 <HAL_TIM_PWM_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 8001082:	f000 fe65 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001086:	4803      	ldr	r0, [pc, #12]	@ (8001094 <MX_TIM14_Init+0x90>)
 8001088:	f001 fa1c 	bl	80024c4 <HAL_TIM_MspPostInit>

}
 800108c:	bf00      	nop
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	240005d8 	.word	0x240005d8
 8001098:	40002000 	.word	0x40002000

0800109c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010a0:	4b24      	ldr	r3, [pc, #144]	@ (8001134 <MX_USART1_UART_Init+0x98>)
 80010a2:	4a25      	ldr	r2, [pc, #148]	@ (8001138 <MX_USART1_UART_Init+0x9c>)
 80010a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 111111;
 80010a6:	4b23      	ldr	r3, [pc, #140]	@ (8001134 <MX_USART1_UART_Init+0x98>)
 80010a8:	4a24      	ldr	r2, [pc, #144]	@ (800113c <MX_USART1_UART_Init+0xa0>)
 80010aa:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ac:	4b21      	ldr	r3, [pc, #132]	@ (8001134 <MX_USART1_UART_Init+0x98>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010b2:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <MX_USART1_UART_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <MX_USART1_UART_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010be:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <MX_USART1_UART_Init+0x98>)
 80010c0:	220c      	movs	r2, #12
 80010c2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <MX_USART1_UART_Init+0x98>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <MX_USART1_UART_Init+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010d0:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <MX_USART1_UART_Init+0x98>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010d6:	4b17      	ldr	r3, [pc, #92]	@ (8001134 <MX_USART1_UART_Init+0x98>)
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80010dc:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <MX_USART1_UART_Init+0x98>)
 80010de:	2220      	movs	r2, #32
 80010e0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80010e2:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <MX_USART1_UART_Init+0x98>)
 80010e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010e8:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ea:	4812      	ldr	r0, [pc, #72]	@ (8001134 <MX_USART1_UART_Init+0x98>)
 80010ec:	f00f fe5c 	bl	8010da8 <HAL_UART_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 80010f6:	f000 fe2b 	bl	8001d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010fa:	2100      	movs	r1, #0
 80010fc:	480d      	ldr	r0, [pc, #52]	@ (8001134 <MX_USART1_UART_Init+0x98>)
 80010fe:	f011 fd76 	bl	8012bee <HAL_UARTEx_SetTxFifoThreshold>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8001108:	f000 fe22 	bl	8001d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800110c:	2100      	movs	r1, #0
 800110e:	4809      	ldr	r0, [pc, #36]	@ (8001134 <MX_USART1_UART_Init+0x98>)
 8001110:	f011 fdab 	bl	8012c6a <HAL_UARTEx_SetRxFifoThreshold>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 800111a:	f000 fe19 	bl	8001d50 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <MX_USART1_UART_Init+0x98>)
 8001120:	f011 fd2a 	bl	8012b78 <HAL_UARTEx_EnableFifoMode>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 800112a:	f000 fe11 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	24000624 	.word	0x24000624
 8001138:	40011000 	.word	0x40011000
 800113c:	0001b207 	.word	0x0001b207

08001140 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001146:	4b19      	ldr	r3, [pc, #100]	@ (80011ac <MX_DMA_Init+0x6c>)
 8001148:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800114c:	4a17      	ldr	r2, [pc, #92]	@ (80011ac <MX_DMA_Init+0x6c>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <MX_DMA_Init+0x6c>)
 8001158:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001164:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <MX_DMA_Init+0x6c>)
 8001166:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800116a:	4a10      	ldr	r2, [pc, #64]	@ (80011ac <MX_DMA_Init+0x6c>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001174:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <MX_DMA_Init+0x6c>)
 8001176:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	200b      	movs	r0, #11
 8001188:	f001 fe77 	bl	8002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800118c:	200b      	movs	r0, #11
 800118e:	f001 fe8e 	bl	8002eae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	2038      	movs	r0, #56	@ 0x38
 8001198:	f001 fe6f 	bl	8002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800119c:	2038      	movs	r0, #56	@ 0x38
 800119e:	f001 fe86 	bl	8002eae <HAL_NVIC_EnableIRQ>

}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	58024400 	.word	0x58024400

080011b0 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 80011b6:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <MX_MDMA_Init+0x3c>)
 80011b8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011bc:	4a0b      	ldr	r2, [pc, #44]	@ (80011ec <MX_MDMA_Init+0x3c>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <MX_MDMA_Init+0x3c>)
 80011c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	207a      	movs	r0, #122	@ 0x7a
 80011da:	f001 fe4e 	bl	8002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 80011de:	207a      	movs	r0, #122	@ 0x7a
 80011e0:	f001 fe65 	bl	8002eae <HAL_NVIC_EnableIRQ>

}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	58024400 	.word	0x58024400

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08c      	sub	sp, #48	@ 0x30
 80011f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001206:	4b52      	ldr	r3, [pc, #328]	@ (8001350 <MX_GPIO_Init+0x160>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120c:	4a50      	ldr	r2, [pc, #320]	@ (8001350 <MX_GPIO_Init+0x160>)
 800120e:	f043 0310 	orr.w	r3, r3, #16
 8001212:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001216:	4b4e      	ldr	r3, [pc, #312]	@ (8001350 <MX_GPIO_Init+0x160>)
 8001218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121c:	f003 0310 	and.w	r3, r3, #16
 8001220:	61bb      	str	r3, [r7, #24]
 8001222:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001224:	4b4a      	ldr	r3, [pc, #296]	@ (8001350 <MX_GPIO_Init+0x160>)
 8001226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122a:	4a49      	ldr	r2, [pc, #292]	@ (8001350 <MX_GPIO_Init+0x160>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001234:	4b46      	ldr	r3, [pc, #280]	@ (8001350 <MX_GPIO_Init+0x160>)
 8001236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001242:	4b43      	ldr	r3, [pc, #268]	@ (8001350 <MX_GPIO_Init+0x160>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001248:	4a41      	ldr	r2, [pc, #260]	@ (8001350 <MX_GPIO_Init+0x160>)
 800124a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800124e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001252:	4b3f      	ldr	r3, [pc, #252]	@ (8001350 <MX_GPIO_Init+0x160>)
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001260:	4b3b      	ldr	r3, [pc, #236]	@ (8001350 <MX_GPIO_Init+0x160>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001266:	4a3a      	ldr	r2, [pc, #232]	@ (8001350 <MX_GPIO_Init+0x160>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001270:	4b37      	ldr	r3, [pc, #220]	@ (8001350 <MX_GPIO_Init+0x160>)
 8001272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	4b34      	ldr	r3, [pc, #208]	@ (8001350 <MX_GPIO_Init+0x160>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001284:	4a32      	ldr	r2, [pc, #200]	@ (8001350 <MX_GPIO_Init+0x160>)
 8001286:	f043 0302 	orr.w	r3, r3, #2
 800128a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800128e:	4b30      	ldr	r3, [pc, #192]	@ (8001350 <MX_GPIO_Init+0x160>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129c:	4b2c      	ldr	r3, [pc, #176]	@ (8001350 <MX_GPIO_Init+0x160>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a2:	4a2b      	ldr	r2, [pc, #172]	@ (8001350 <MX_GPIO_Init+0x160>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ac:	4b28      	ldr	r3, [pc, #160]	@ (8001350 <MX_GPIO_Init+0x160>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80012c0:	4824      	ldr	r0, [pc, #144]	@ (8001354 <MX_GPIO_Init+0x164>)
 80012c2:	f005 fe1d 	bl	8006f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	2108      	movs	r1, #8
 80012ca:	4823      	ldr	r0, [pc, #140]	@ (8001358 <MX_GPIO_Init+0x168>)
 80012cc:	f005 fe18 	bl	8006f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2101      	movs	r1, #1
 80012d4:	4821      	ldr	r0, [pc, #132]	@ (800135c <MX_GPIO_Init+0x16c>)
 80012d6:	f005 fe13 	bl	8006f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80012da:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	4818      	ldr	r0, [pc, #96]	@ (8001354 <MX_GPIO_Init+0x164>)
 80012f4:	f005 fc54 	bl	8006ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	4812      	ldr	r0, [pc, #72]	@ (8001354 <MX_GPIO_Init+0x164>)
 800130c:	f005 fc48 	bl	8006ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001310:	2308      	movs	r3, #8
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	480c      	ldr	r0, [pc, #48]	@ (8001358 <MX_GPIO_Init+0x168>)
 8001328:	f005 fc3a 	bl	8006ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800132c:	2301      	movs	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	@ (800135c <MX_GPIO_Init+0x16c>)
 8001344:	f005 fc2c 	bl	8006ba0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001348:	bf00      	nop
 800134a:	3730      	adds	r7, #48	@ 0x30
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	58024400 	.word	0x58024400
 8001354:	58020800 	.word	0x58020800
 8001358:	58020000 	.word	0x58020000
 800135c:	58020c00 	.word	0x58020c00

08001360 <NetworkTimeout>:

/* USER CODE BEGIN 4 */

// Watchdog Fucntions
void NetworkTimeout() {
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	if (wdog_network < WDOG_NETWORK_CUTOFF) {
 8001364:	4b17      	ldr	r3, [pc, #92]	@ (80013c4 <NetworkTimeout+0x64>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b03      	cmp	r3, #3
 800136a:	d829      	bhi.n	80013c0 <NetworkTimeout+0x60>
		// Increment the timeout ctr
		wdog_network++;
 800136c:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <NetworkTimeout+0x64>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	3301      	adds	r3, #1
 8001372:	b2da      	uxtb	r2, r3
 8001374:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <NetworkTimeout+0x64>)
 8001376:	701a      	strb	r2, [r3, #0]

		// A timeout occurs when wdog_network == the Cutoff
		if (wdog_network == WDOG_NETWORK_CUTOFF) {
 8001378:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <NetworkTimeout+0x64>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b04      	cmp	r3, #4
 800137e:	d11f      	bne.n	80013c0 <NetworkTimeout+0x60>
			// Kill the motors
			TIM2->CCR1 = 0;
 8001380:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001384:	2200      	movs	r2, #0
 8001386:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM2->CCR2 = 0;
 8001388:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800138c:	2200      	movs	r2, #0
 800138e:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM4->CCR4 = 0;
 8001390:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <NetworkTimeout+0x68>)
 8001392:	2200      	movs	r2, #0
 8001394:	641a      	str	r2, [r3, #64]	@ 0x40
			TIM4->CCR3 = 0;
 8001396:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <NetworkTimeout+0x68>)
 8001398:	2200      	movs	r2, #0
 800139a:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); // Motor_disable
 800139c:	2201      	movs	r2, #1
 800139e:	2108      	movs	r1, #8
 80013a0:	480a      	ldr	r0, [pc, #40]	@ (80013cc <NetworkTimeout+0x6c>)
 80013a2:	f005 fdad 	bl	8006f00 <HAL_GPIO_WritePin>
			// DEBUG
			sprintf(ssd_msg, "Network Dead!\n");
 80013a6:	490a      	ldr	r1, [pc, #40]	@ (80013d0 <NetworkTimeout+0x70>)
 80013a8:	480a      	ldr	r0, [pc, #40]	@ (80013d4 <NetworkTimeout+0x74>)
 80013aa:	f016 f835 	bl	8017418 <siprintf>
			WriteDebug(ssd_msg, strlen(ssd_msg));
 80013ae:	4809      	ldr	r0, [pc, #36]	@ (80013d4 <NetworkTimeout+0x74>)
 80013b0:	f7fe ff96 	bl	80002e0 <strlen>
 80013b4:	4603      	mov	r3, r0
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	4619      	mov	r1, r3
 80013ba:	4806      	ldr	r0, [pc, #24]	@ (80013d4 <NetworkTimeout+0x74>)
 80013bc:	f000 facb 	bl	8001956 <WriteDebug>
		}
	}
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	24000730 	.word	0x24000730
 80013c8:	40000800 	.word	0x40000800
 80013cc:	58020000 	.word	0x58020000
 80013d0:	08017c48 	.word	0x08017c48
 80013d4:	24000738 	.word	0x24000738

080013d8 <SCH_XBeeRX>:

// ------------------------------------------------------------ SCHEDULING FUNCTIONS -- //
void SCH_XBeeRX() {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
	uint8_t *packet;
	uint16_t byte_num;
	if (XBEE_RXPacket(&hxbee, &packet, &byte_num)) {
 80013de:	1cba      	adds	r2, r7, #2
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	4619      	mov	r1, r3
 80013e4:	485c      	ldr	r0, [pc, #368]	@ (8001558 <SCH_XBeeRX+0x180>)
 80013e6:	f013 f877 	bl	80144d8 <XBEE_RXPacket>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f040 80ae 	bne.w	800154e <SCH_XBeeRX+0x176>
		return;
	}

	// Network active, reset the watchdog
	if (wdog_network >= WDOG_NETWORK_CUTOFF) {
 80013f2:	4b5a      	ldr	r3, [pc, #360]	@ (800155c <SCH_XBeeRX+0x184>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d911      	bls.n	800141e <SCH_XBeeRX+0x46>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); // Motor_en
 80013fa:	2200      	movs	r2, #0
 80013fc:	2108      	movs	r1, #8
 80013fe:	4858      	ldr	r0, [pc, #352]	@ (8001560 <SCH_XBeeRX+0x188>)
 8001400:	f005 fd7e 	bl	8006f00 <HAL_GPIO_WritePin>
		// DEBUG
		sprintf(ssd_msg, "Network Alive!\n");
 8001404:	4957      	ldr	r1, [pc, #348]	@ (8001564 <SCH_XBeeRX+0x18c>)
 8001406:	4858      	ldr	r0, [pc, #352]	@ (8001568 <SCH_XBeeRX+0x190>)
 8001408:	f016 f806 	bl	8017418 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 800140c:	4856      	ldr	r0, [pc, #344]	@ (8001568 <SCH_XBeeRX+0x190>)
 800140e:	f7fe ff67 	bl	80002e0 <strlen>
 8001412:	4603      	mov	r3, r0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4619      	mov	r1, r3
 8001418:	4853      	ldr	r0, [pc, #332]	@ (8001568 <SCH_XBeeRX+0x190>)
 800141a:	f000 fa9c 	bl	8001956 <WriteDebug>
	}
	wdog_network = 0;
 800141e:	4b4f      	ldr	r3, [pc, #316]	@ (800155c <SCH_XBeeRX+0x184>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]

	// Parse the packet
	if (byte_num == 0xFFFF) {
 8001424:	887b      	ldrh	r3, [r7, #2]
 8001426:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800142a:	4293      	cmp	r3, r2
 800142c:	f040 8090 	bne.w	8001550 <SCH_XBeeRX+0x178>
		// Configuration Packet
		if (packet[1] != jpeg_quality) {
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3301      	adds	r3, #1
 8001434:	781a      	ldrb	r2, [r3, #0]
 8001436:	4b4d      	ldr	r3, [pc, #308]	@ (800156c <SCH_XBeeRX+0x194>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d027      	beq.n	800148e <SCH_XBeeRX+0xb6>
			// JPEG QUALITY CHANGED
			jpeg_quality = packet[1];
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	785a      	ldrb	r2, [r3, #1]
 8001442:	4b4a      	ldr	r3, [pc, #296]	@ (800156c <SCH_XBeeRX+0x194>)
 8001444:	701a      	strb	r2, [r3, #0]
			// Reconfigure the JPEG HW
			JPEG_ConfTypeDef* jpeg_config;
			jpeg_config->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
			jpeg_config->ImageWidth = jpeg_mcu_widths[jpeg_quality]*8;
 800144c:	4b47      	ldr	r3, [pc, #284]	@ (800156c <SCH_XBeeRX+0x194>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b47      	ldr	r3, [pc, #284]	@ (8001570 <SCH_XBeeRX+0x198>)
 8001454:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	461a      	mov	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	60da      	str	r2, [r3, #12]
			jpeg_config->ImageHeight = jpeg_mcu_heights[jpeg_quality]*8;
 8001460:	4b42      	ldr	r3, [pc, #264]	@ (800156c <SCH_XBeeRX+0x194>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b43      	ldr	r3, [pc, #268]	@ (8001574 <SCH_XBeeRX+0x19c>)
 8001468:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	461a      	mov	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	609a      	str	r2, [r3, #8]
			jpeg_config->ImageQuality = JPEG_QUALITY;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2214      	movs	r2, #20
 8001478:	611a      	str	r2, [r3, #16]
			HAL_JPEG_ConfigEncoding(&hjpeg, jpeg_config);
 800147a:	68f9      	ldr	r1, [r7, #12]
 800147c:	483e      	ldr	r0, [pc, #248]	@ (8001578 <SCH_XBeeRX+0x1a0>)
 800147e:	f007 faa7 	bl	80089d0 <HAL_JPEG_ConfigEncoding>

			jpeg_state = 0;	// Invalidate current JPEG
 8001482:	4b3e      	ldr	r3, [pc, #248]	@ (800157c <SCH_XBeeRX+0x1a4>)
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
			tx_state = 2;	// Flag a header re-transmit
 8001488:	4b3d      	ldr	r3, [pc, #244]	@ (8001580 <SCH_XBeeRX+0x1a8>)
 800148a:	2202      	movs	r2, #2
 800148c:	701a      	strb	r2, [r3, #0]
		}

		// LIGHTS (0-2000)
		TIM1->CCR4 = packet[3]*500; // L1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3303      	adds	r3, #3
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800149a:	fb03 f202 	mul.w	r2, r3, r2
 800149e:	4b39      	ldr	r3, [pc, #228]	@ (8001584 <SCH_XBeeRX+0x1ac>)
 80014a0:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM3->CCR4 = packet[4]*500; // L2
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3304      	adds	r3, #4
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014ae:	fb03 f202 	mul.w	r2, r3, r2
 80014b2:	4b35      	ldr	r3, [pc, #212]	@ (8001588 <SCH_XBeeRX+0x1b0>)
 80014b4:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM3->CCR3 = packet[5]*500; // L3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3305      	adds	r3, #5
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014c2:	fb03 f202 	mul.w	r2, r3, r2
 80014c6:	4b30      	ldr	r3, [pc, #192]	@ (8001588 <SCH_XBeeRX+0x1b0>)
 80014c8:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM2->CCR4 = packet[6]*500; // L4
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3306      	adds	r3, #6
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014d6:	fb03 f202 	mul.w	r2, r3, r2
 80014da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014de:	641a      	str	r2, [r3, #64]	@ 0x40

		// TANK CONTROL (THIS IS EXTREMELY IMPORTANT)
		uint8_t motor1_dir = packet[0x0A];	// DIR_LEFT
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7a9b      	ldrb	r3, [r3, #10]
 80014e4:	72fb      	strb	r3, [r7, #11]
		uint8_t motor2_dir = packet[0x09];	// DIR_RIGHT
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7a5b      	ldrb	r3, [r3, #9]
 80014ea:	72bb      	strb	r3, [r7, #10]

		// Use the direction to selectively disable one of the two BTNs
		if (motor1_dir) {
 80014ec:	7afb      	ldrb	r3, [r7, #11]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00b      	beq.n	800150a <SCH_XBeeRX+0x132>
			TIM2->CCR1 = 0;
 80014f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014f6:	2200      	movs	r2, #0
 80014f8:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM2->CCR2 = packet[0x08]*4;	// MAG_LEFT
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3308      	adds	r3, #8
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	009a      	lsls	r2, r3, #2
 8001502:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001506:	639a      	str	r2, [r3, #56]	@ 0x38
 8001508:	e00a      	b.n	8001520 <SCH_XBeeRX+0x148>
		} else {
			TIM2->CCR1 = packet[0x08]*4;	// MAG_LEFT
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3308      	adds	r3, #8
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	009a      	lsls	r2, r3, #2
 8001512:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001516:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM2->CCR2 = 0;
 8001518:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800151c:	2200      	movs	r2, #0
 800151e:	639a      	str	r2, [r3, #56]	@ 0x38
		}

		// Use the direction to selectively disable one of the two BTNs
		if (motor2_dir) {
 8001520:	7abb      	ldrb	r3, [r7, #10]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d009      	beq.n	800153a <SCH_XBeeRX+0x162>
			TIM4->CCR4 = packet[0x07]*4;	// MAG_RIGHT
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3307      	adds	r3, #7
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	009a      	lsls	r2, r3, #2
 800152e:	4b17      	ldr	r3, [pc, #92]	@ (800158c <SCH_XBeeRX+0x1b4>)
 8001530:	641a      	str	r2, [r3, #64]	@ 0x40
			TIM4->CCR3 = 0;
 8001532:	4b16      	ldr	r3, [pc, #88]	@ (800158c <SCH_XBeeRX+0x1b4>)
 8001534:	2200      	movs	r2, #0
 8001536:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001538:	e00a      	b.n	8001550 <SCH_XBeeRX+0x178>

		} else {
			TIM4->CCR4 = 0;
 800153a:	4b14      	ldr	r3, [pc, #80]	@ (800158c <SCH_XBeeRX+0x1b4>)
 800153c:	2200      	movs	r2, #0
 800153e:	641a      	str	r2, [r3, #64]	@ 0x40
			TIM4->CCR3 = packet[0x07]*4;	// MAG_RIGHT
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3307      	adds	r3, #7
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	009a      	lsls	r2, r3, #2
 8001548:	4b10      	ldr	r3, [pc, #64]	@ (800158c <SCH_XBeeRX+0x1b4>)
 800154a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800154c:	e000      	b.n	8001550 <SCH_XBeeRX+0x178>
		return;
 800154e:	bf00      	nop
		}
	}
}
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	24025b7c 	.word	0x24025b7c
 800155c:	24000730 	.word	0x24000730
 8001560:	58020000 	.word	0x58020000
 8001564:	08017c58 	.word	0x08017c58
 8001568:	24000738 	.word	0x24000738
 800156c:	24025b78 	.word	0x24025b78
 8001570:	24000004 	.word	0x24000004
 8001574:	2400000c 	.word	0x2400000c
 8001578:	240002a4 	.word	0x240002a4
 800157c:	24025b72 	.word	0x24025b72
 8001580:	24025ba2 	.word	0x24025ba2
 8001584:	40010000 	.word	0x40010000
 8001588:	40000400 	.word	0x40000400
 800158c:	40000800 	.word	0x40000800

08001590 <SCH_XBeeTX>:

void SCH_XBeeTX() {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0

	// Early exit if the JPEG isn't ready, nothing to transmit
	if (jpeg_state != 2)
 8001596:	4b44      	ldr	r3, [pc, #272]	@ (80016a8 <SCH_XBeeTX+0x118>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d17a      	bne.n	8001696 <SCH_XBeeTX+0x106>
		return;

	// Get delta time, there has to be a delay for the TX to work properly
	uint32_t delta_t = DeltaTime(sch_tim_tx);
 80015a0:	4b42      	ldr	r3, [pc, #264]	@ (80016ac <SCH_XBeeTX+0x11c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 f9bf 	bl	8001928 <DeltaTime>
 80015aa:	6078      	str	r0, [r7, #4]
	if (delta_t < SCH_MS_TX) return;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	d973      	bls.n	800169a <SCH_XBeeTX+0x10a>

	if (tx_state == 0)
 80015b2:	4b3f      	ldr	r3, [pc, #252]	@ (80016b0 <SCH_XBeeTX+0x120>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <SCH_XBeeTX+0x32>
		tx_state = 1;	// If Idle, Flag as transmitting IMAGE
 80015bc:	4b3c      	ldr	r3, [pc, #240]	@ (80016b0 <SCH_XBeeTX+0x120>)
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]

	if (tx_state == 1) {
 80015c2:	4b3b      	ldr	r3, [pc, #236]	@ (80016b0 <SCH_XBeeTX+0x120>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d112      	bne.n	80015f2 <SCH_XBeeTX+0x62>
		// Send an IMAGE packet
		// Image packet numbers:  0000, 0001, 0002, ...
		if (XBEE_TXPacket(&hxbee, jpeg_out + tx_byte*UART_TXSIZE + JPEG_HEADERSIZE, tx_byte)) {
 80015cc:	4b39      	ldr	r3, [pc, #228]	@ (80016b4 <SCH_XBeeTX+0x124>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	019b      	lsls	r3, r3, #6
 80015d4:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 80015d8:	4a37      	ldr	r2, [pc, #220]	@ (80016b8 <SCH_XBeeTX+0x128>)
 80015da:	4413      	add	r3, r2
 80015dc:	4a35      	ldr	r2, [pc, #212]	@ (80016b4 <SCH_XBeeTX+0x124>)
 80015de:	8812      	ldrh	r2, [r2, #0]
 80015e0:	b292      	uxth	r2, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	4835      	ldr	r0, [pc, #212]	@ (80016bc <SCH_XBeeTX+0x12c>)
 80015e6:	f012 ffe7 	bl	80145b8 <XBEE_TXPacket>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d01a      	beq.n	8001626 <SCH_XBeeTX+0x96>
			return;
 80015f0:	e056      	b.n	80016a0 <SCH_XBeeTX+0x110>
		}
	} else if (tx_state == 2) {
 80015f2:	4b2f      	ldr	r3, [pc, #188]	@ (80016b0 <SCH_XBeeTX+0x120>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d114      	bne.n	8001626 <SCH_XBeeTX+0x96>
		// Send a HEADER packet
		// Header packet numbers: FFFE, FFFD, FFFC, ...
		if (XBEE_TXPacket(&hxbee, jpeg_out + tx_byte*UART_TXSIZE, 0xFFFF - (tx_byte+1))) {
 80015fc:	4b2d      	ldr	r3, [pc, #180]	@ (80016b4 <SCH_XBeeTX+0x124>)
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	b29b      	uxth	r3, r3
 8001602:	019b      	lsls	r3, r3, #6
 8001604:	461a      	mov	r2, r3
 8001606:	4b2c      	ldr	r3, [pc, #176]	@ (80016b8 <SCH_XBeeTX+0x128>)
 8001608:	18d1      	adds	r1, r2, r3
 800160a:	4b2a      	ldr	r3, [pc, #168]	@ (80016b4 <SCH_XBeeTX+0x124>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	b29a      	uxth	r2, r3
 8001610:	f06f 0301 	mvn.w	r3, #1
 8001614:	1a9b      	subs	r3, r3, r2
 8001616:	b29b      	uxth	r3, r3
 8001618:	461a      	mov	r2, r3
 800161a:	4828      	ldr	r0, [pc, #160]	@ (80016bc <SCH_XBeeTX+0x12c>)
 800161c:	f012 ffcc 	bl	80145b8 <XBEE_TXPacket>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d13b      	bne.n	800169e <SCH_XBeeTX+0x10e>
			return;
		}
	}

	// Update the timer for the next DT period
	sch_tim_tx = HAL_GetTick();
 8001626:	f001 fb11 	bl	8002c4c <HAL_GetTick>
 800162a:	4603      	mov	r3, r0
 800162c:	4a1f      	ldr	r2, [pc, #124]	@ (80016ac <SCH_XBeeTX+0x11c>)
 800162e:	6013      	str	r3, [r2, #0]
	tx_byte++;
 8001630:	4b20      	ldr	r3, [pc, #128]	@ (80016b4 <SCH_XBeeTX+0x124>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	b29b      	uxth	r3, r3
 8001636:	3301      	adds	r3, #1
 8001638:	b29a      	uxth	r2, r3
 800163a:	4b1e      	ldr	r3, [pc, #120]	@ (80016b4 <SCH_XBeeTX+0x124>)
 800163c:	801a      	strh	r2, [r3, #0]

	// IMAGE Transmission complete
	if (tx_state == 1 && tx_byte > (jpeg_size - JPEG_HEADERSIZE) / UART_TXSIZE + 1) {
 800163e:	4b1c      	ldr	r3, [pc, #112]	@ (80016b0 <SCH_XBeeTX+0x120>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b01      	cmp	r3, #1
 8001646:	d115      	bne.n	8001674 <SCH_XBeeTX+0xe4>
 8001648:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <SCH_XBeeTX+0x124>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	b29b      	uxth	r3, r3
 800164e:	461a      	mov	r2, r3
 8001650:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <SCH_XBeeTX+0x130>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 8001658:	099b      	lsrs	r3, r3, #6
 800165a:	3301      	adds	r3, #1
 800165c:	429a      	cmp	r2, r3
 800165e:	d909      	bls.n	8001674 <SCH_XBeeTX+0xe4>
		tx_state = 0;	// Flag the radio as idle
 8001660:	4b13      	ldr	r3, [pc, #76]	@ (80016b0 <SCH_XBeeTX+0x120>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
		tx_byte = 0;	// Reset the packet counter to 0
 8001666:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <SCH_XBeeTX+0x124>)
 8001668:	2200      	movs	r2, #0
 800166a:	801a      	strh	r2, [r3, #0]
		jpeg_state = 0;	// Flag the JPEG as idle
 800166c:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <SCH_XBeeTX+0x118>)
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
		return;
 8001672:	e015      	b.n	80016a0 <SCH_XBeeTX+0x110>
	}

	// HEADER Transmission complete
	if (tx_state == 2 && tx_byte > JPEG_HEADERSIZE / UART_TXSIZE + 1) {
 8001674:	4b0e      	ldr	r3, [pc, #56]	@ (80016b0 <SCH_XBeeTX+0x120>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d110      	bne.n	80016a0 <SCH_XBeeTX+0x110>
 800167e:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <SCH_XBeeTX+0x124>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	b29b      	uxth	r3, r3
 8001684:	2b09      	cmp	r3, #9
 8001686:	d90b      	bls.n	80016a0 <SCH_XBeeTX+0x110>
		tx_state = 0;	// Flag the radio as idle
 8001688:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <SCH_XBeeTX+0x120>)
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
		tx_byte = 0;	// Reset the packet counter to 0
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <SCH_XBeeTX+0x124>)
 8001690:	2200      	movs	r2, #0
 8001692:	801a      	strh	r2, [r3, #0]
		return;
 8001694:	e004      	b.n	80016a0 <SCH_XBeeTX+0x110>
		return;
 8001696:	bf00      	nop
 8001698:	e002      	b.n	80016a0 <SCH_XBeeTX+0x110>
	if (delta_t < SCH_MS_TX) return;
 800169a:	bf00      	nop
 800169c:	e000      	b.n	80016a0 <SCH_XBeeTX+0x110>
			return;
 800169e:	bf00      	nop

//	for (uint16_t i = 0; i < ((jpeg_size - JPEG_HEADERSIZE) / UART_TXSIZE) + 1; i++) {
//		XBEE_TXPacket(&hxbee, jpeg_out + i*UART_TXSIZE + JPEG_HEADERSIZE, i);
//		HAL_Delay(5);
//	}
}
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	24025b72 	.word	0x24025b72
 80016ac:	24000734 	.word	0x24000734
 80016b0:	24025ba2 	.word	0x24025ba2
 80016b4:	24025ba0 	.word	0x24025ba0
 80016b8:	240131ac 	.word	0x240131ac
 80016bc:	24025b7c 	.word	0x24025b7c
 80016c0:	24025b74 	.word	0x24025b74

080016c4 <SCH_Camera>:

void SCH_Camera() {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
	if (camera_state != 0) return;	// Exit if the camera is capturing, queued, or has un-encoded data
 80016ca:	4b18      	ldr	r3, [pc, #96]	@ (800172c <SCH_Camera+0x68>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d124      	bne.n	800171e <SCH_Camera+0x5a>
	if (jpeg_state != 0) return;	// Exit if the JPEG is processing (camera DMA can corrupt the working buffer of JPEG)
 80016d4:	4b16      	ldr	r3, [pc, #88]	@ (8001730 <SCH_Camera+0x6c>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d121      	bne.n	8001722 <SCH_Camera+0x5e>

	// Take a snapshot
	uint8_t ovStat = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, camera_mem, CAM_GRAYSIZE / 4);
 80016de:	4a15      	ldr	r2, [pc, #84]	@ (8001734 <SCH_Camera+0x70>)
 80016e0:	f644 2371 	movw	r3, #19057	@ 0x4a71
 80016e4:	2102      	movs	r1, #2
 80016e6:	4814      	ldr	r0, [pc, #80]	@ (8001738 <SCH_Camera+0x74>)
 80016e8:	f001 fcee 	bl	80030c8 <HAL_DCMI_Start_DMA>
 80016ec:	4603      	mov	r3, r0
 80016ee:	71fb      	strb	r3, [r7, #7]
	if (ovStat) {
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00f      	beq.n	8001716 <SCH_Camera+0x52>
		sprintf(ssd_msg, "DCMI/DMA ERROR - Code 0x%X\r\n", ovStat);
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	461a      	mov	r2, r3
 80016fa:	4910      	ldr	r1, [pc, #64]	@ (800173c <SCH_Camera+0x78>)
 80016fc:	4810      	ldr	r0, [pc, #64]	@ (8001740 <SCH_Camera+0x7c>)
 80016fe:	f015 fe8b 	bl	8017418 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8001702:	480f      	ldr	r0, [pc, #60]	@ (8001740 <SCH_Camera+0x7c>)
 8001704:	f7fe fdec 	bl	80002e0 <strlen>
 8001708:	4603      	mov	r3, r0
 800170a:	b2db      	uxtb	r3, r3
 800170c:	4619      	mov	r1, r3
 800170e:	480c      	ldr	r0, [pc, #48]	@ (8001740 <SCH_Camera+0x7c>)
 8001710:	f000 f921 	bl	8001956 <WriteDebug>
		return;
 8001714:	e006      	b.n	8001724 <SCH_Camera+0x60>
	}

	camera_state = 1;	// Flag Camera as DMA Queued
 8001716:	4b05      	ldr	r3, [pc, #20]	@ (800172c <SCH_Camera+0x68>)
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
 800171c:	e002      	b.n	8001724 <SCH_Camera+0x60>
	if (camera_state != 0) return;	// Exit if the camera is capturing, queued, or has un-encoded data
 800171e:	bf00      	nop
 8001720:	e000      	b.n	8001724 <SCH_Camera+0x60>
	if (jpeg_state != 0) return;	// Exit if the JPEG is processing (camera DMA can corrupt the working buffer of JPEG)
 8001722:	bf00      	nop
}
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	24013166 	.word	0x24013166
 8001730:	24025b72 	.word	0x24025b72
 8001734:	240007a0 	.word	0x240007a0
 8001738:	24000188 	.word	0x24000188
 800173c:	08017c68 	.word	0x08017c68
 8001740:	24000738 	.word	0x24000738

08001744 <SCH_JPEG>:

void SCH_JPEG() {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af02      	add	r7, sp, #8

	if (jpeg_state != 0) return;	// Exit if the JPEG is already processing
 800174a:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <SCH_JPEG+0x60>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d120      	bne.n	8001796 <SCH_JPEG+0x52>
	if (camera_state != 3) return;	// Exit if the camera does not have a new image to present
 8001754:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <SCH_JPEG+0x64>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b03      	cmp	r3, #3
 800175c:	d11d      	bne.n	800179a <SCH_JPEG+0x56>
	if (tx_state == 1) return;		// Exit if the radio is transmitting
 800175e:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <SCH_JPEG+0x68>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b01      	cmp	r3, #1
 8001766:	d01a      	beq.n	800179e <SCH_JPEG+0x5a>

	camera_state = 0;	// flag the camera as idle, it won't start again until the JPEG is done
 8001768:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <SCH_JPEG+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
	jpeg_state = 1;		// flag JPG as encoding
 800176e:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <SCH_JPEG+0x60>)
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]

	jpeg_block = 0;		// Reset the JEPG block idx
 8001774:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <SCH_JPEG+0x6c>)
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
	jpeg_size = 0;		// Reset the JPEG size counter
 800177a:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <SCH_JPEG+0x70>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]

	GenerateJPEGMCUBlock();
 8001780:	f000 fa18 	bl	8001bb4 <GenerateJPEGMCUBlock>
	HAL_JPEG_Encode_DMA(&hjpeg, jpeg_mcu, 64, jpeg_out, JPEG_OUTBUF_SIZE);
 8001784:	2340      	movs	r3, #64	@ 0x40
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	4b0b      	ldr	r3, [pc, #44]	@ (80017b8 <SCH_JPEG+0x74>)
 800178a:	2240      	movs	r2, #64	@ 0x40
 800178c:	490b      	ldr	r1, [pc, #44]	@ (80017bc <SCH_JPEG+0x78>)
 800178e:	480c      	ldr	r0, [pc, #48]	@ (80017c0 <SCH_JPEG+0x7c>)
 8001790:	f007 fb56 	bl	8008e40 <HAL_JPEG_Encode_DMA>
 8001794:	e004      	b.n	80017a0 <SCH_JPEG+0x5c>
	if (jpeg_state != 0) return;	// Exit if the JPEG is already processing
 8001796:	bf00      	nop
 8001798:	e002      	b.n	80017a0 <SCH_JPEG+0x5c>
	if (camera_state != 3) return;	// Exit if the camera does not have a new image to present
 800179a:	bf00      	nop
 800179c:	e000      	b.n	80017a0 <SCH_JPEG+0x5c>
	if (tx_state == 1) return;		// Exit if the radio is transmitting
 800179e:	bf00      	nop
}
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	24025b72 	.word	0x24025b72
 80017a8:	24013166 	.word	0x24013166
 80017ac:	24025ba2 	.word	0x24025ba2
 80017b0:	240131a8 	.word	0x240131a8
 80017b4:	24025b74 	.word	0x24025b74
 80017b8:	240131ac 	.word	0x240131ac
 80017bc:	24013168 	.word	0x24013168
 80017c0:	240002a4 	.word	0x240002a4

080017c4 <HAL_DCMI_VsyncEventCallback>:

// ------------------------------------------------------------ OVERRIDE CALLBACKS -- //
// Frame captured event, called when the DMA buffer is full of new frame data
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	if (!camera_state) return;	// Do nothing if the camera is IDLE
 80017cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <HAL_DCMI_VsyncEventCallback+0x44>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d014      	beq.n	8001800 <HAL_DCMI_VsyncEventCallback+0x3c>

	if (camera_state == 1) {	// Transition flag to CAPTURING
 80017d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <HAL_DCMI_VsyncEventCallback+0x44>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d103      	bne.n	80017e8 <HAL_DCMI_VsyncEventCallback+0x24>
		camera_state = 2;
 80017e0:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <HAL_DCMI_VsyncEventCallback+0x44>)
 80017e2:	2202      	movs	r2, #2
 80017e4:	701a      	strb	r2, [r3, #0]
		return;
 80017e6:	e00c      	b.n	8001802 <HAL_DCMI_VsyncEventCallback+0x3e>
	}

	if (camera_state == 2) {	// Transition flag to READY
 80017e8:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <HAL_DCMI_VsyncEventCallback+0x44>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d107      	bne.n	8001802 <HAL_DCMI_VsyncEventCallback+0x3e>
		HAL_DCMI_Stop(hdcmi);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f001 fd2a 	bl	800324c <HAL_DCMI_Stop>
		camera_state = 3;
 80017f8:	4b03      	ldr	r3, [pc, #12]	@ (8001808 <HAL_DCMI_VsyncEventCallback+0x44>)
 80017fa:	2203      	movs	r2, #3
 80017fc:	701a      	strb	r2, [r3, #0]
		return;
 80017fe:	e000      	b.n	8001802 <HAL_DCMI_VsyncEventCallback+0x3e>
	if (!camera_state) return;	// Do nothing if the camera is IDLE
 8001800:	bf00      	nop
	}
}
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	24013166 	.word	0x24013166

0800180c <HAL_UART_RxCpltCallback>:

// ------------------------------------------------------------ OVERRIDE UART DMA CALLBACKS -- //
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	XBEE_RX_DMACallback(&hxbee);
 8001814:	4803      	ldr	r0, [pc, #12]	@ (8001824 <HAL_UART_RxCpltCallback+0x18>)
 8001816:	f012 ff39 	bl	801468c <XBEE_RX_DMACallback>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	24025b7c 	.word	0x24025b7c

08001828 <HAL_JPEG_GetDataCallback>:

// JPEG hardware is requesting the next MCU block
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]

	// Restock the input buffer with new MCU
	if (GenerateJPEGMCUBlock()) {
 8001832:	f000 f9bf 	bl	8001bb4 <GenerateJPEGMCUBlock>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d013      	beq.n	8001864 <HAL_JPEG_GetDataCallback+0x3c>
		// ERROR while generating MCU, probable memory leak - recover JPEG peripheral by restarting
		jpeg_state = 0;	// Flag JPEG as idle
 800183c:	4b0e      	ldr	r3, [pc, #56]	@ (8001878 <HAL_JPEG_GetDataCallback+0x50>)
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
		jpeg_block = 0;	// Reset the JPEG block IDX
 8001842:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <HAL_JPEG_GetDataCallback+0x54>)
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]

		sprintf(ssd_msg, "JPEG OVERRUN\n");
 8001848:	490d      	ldr	r1, [pc, #52]	@ (8001880 <HAL_JPEG_GetDataCallback+0x58>)
 800184a:	480e      	ldr	r0, [pc, #56]	@ (8001884 <HAL_JPEG_GetDataCallback+0x5c>)
 800184c:	f015 fde4 	bl	8017418 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8001850:	480c      	ldr	r0, [pc, #48]	@ (8001884 <HAL_JPEG_GetDataCallback+0x5c>)
 8001852:	f7fe fd45 	bl	80002e0 <strlen>
 8001856:	4603      	mov	r3, r0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	4619      	mov	r1, r3
 800185c:	4809      	ldr	r0, [pc, #36]	@ (8001884 <HAL_JPEG_GetDataCallback+0x5c>)
 800185e:	f000 f87a 	bl	8001956 <WriteDebug>
	}
	else {
		// Configure the buffer to be the same as before, it's contents have changed
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
	}
}
 8001862:	e004      	b.n	800186e <HAL_JPEG_GetDataCallback+0x46>
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
 8001864:	2240      	movs	r2, #64	@ 0x40
 8001866:	4908      	ldr	r1, [pc, #32]	@ (8001888 <HAL_JPEG_GetDataCallback+0x60>)
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f007 fbb1 	bl	8008fd0 <HAL_JPEG_ConfigInputBuffer>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	24025b72 	.word	0x24025b72
 800187c:	240131a8 	.word	0x240131a8
 8001880:	08017c88 	.word	0x08017c88
 8001884:	24000738 	.word	0x24000738
 8001888:	24013168 	.word	0x24013168

0800188c <HAL_JPEG_DataReadyCallback>:

// JPEG hardware is requesting a larger output buffer.
// This is done to manage JPEG output size, give it a buffer only as large as required
void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
	// Setup new output buffer location (part of contiguous super-buffer)
	jpeg_size += JPEG_OUTBUF_SIZE;
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <HAL_JPEG_DataReadyCallback+0x30>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	3340      	adds	r3, #64	@ 0x40
 800189e:	4a07      	ldr	r2, [pc, #28]	@ (80018bc <HAL_JPEG_DataReadyCallback+0x30>)
 80018a0:	6013      	str	r3, [r2, #0]
	HAL_JPEG_ConfigOutputBuffer(hjpeg, jpeg_out + jpeg_size, JPEG_OUTBUF_SIZE);
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_JPEG_DataReadyCallback+0x30>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a06      	ldr	r2, [pc, #24]	@ (80018c0 <HAL_JPEG_DataReadyCallback+0x34>)
 80018a8:	4413      	add	r3, r2
 80018aa:	2240      	movs	r2, #64	@ 0x40
 80018ac:	4619      	mov	r1, r3
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f007 fba0 	bl	8008ff4 <HAL_JPEG_ConfigOutputBuffer>
}
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	24025b74 	.word	0x24025b74
 80018c0:	240131ac 	.word	0x240131ac

080018c4 <HAL_JPEG_EncodeCpltCallback>:

// JPEG hardware has completed the current image
void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg) {
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	jpeg_state = 2;	// Flag JPEG as ready
 80018cc:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <HAL_JPEG_EncodeCpltCallback+0x20>)
 80018ce:	2202      	movs	r2, #2
 80018d0:	701a      	strb	r2, [r3, #0]
	jpeg_block = 0;	// Reset the JPEG block IDX
 80018d2:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <HAL_JPEG_EncodeCpltCallback+0x24>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
//	sprintf(ssd_msg, "JPEG DONE\n");
//	WriteDebug(ssd_msg, strlen(ssd_msg));
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	24025b72 	.word	0x24025b72
 80018e8:	240131a8 	.word	0x240131a8

080018ec <HAL_JPEG_ErrorCallback>:

// JPEG hardware encountered an error
void HAL_JPEG_ErrorCallback (JPEG_HandleTypeDef * hjpeg) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	sprintf(ssd_msg, " JPEG ERROR");
 80018f4:	4909      	ldr	r1, [pc, #36]	@ (800191c <HAL_JPEG_ErrorCallback+0x30>)
 80018f6:	480a      	ldr	r0, [pc, #40]	@ (8001920 <HAL_JPEG_ErrorCallback+0x34>)
 80018f8:	f015 fd8e 	bl	8017418 <siprintf>
	WriteDebug(ssd_msg, strlen(ssd_msg));
 80018fc:	4808      	ldr	r0, [pc, #32]	@ (8001920 <HAL_JPEG_ErrorCallback+0x34>)
 80018fe:	f7fe fcef 	bl	80002e0 <strlen>
 8001902:	4603      	mov	r3, r0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	4619      	mov	r1, r3
 8001908:	4805      	ldr	r0, [pc, #20]	@ (8001920 <HAL_JPEG_ErrorCallback+0x34>)
 800190a:	f000 f824 	bl	8001956 <WriteDebug>
	//HAL_JPEG_Abort(&hjpeg);
	jpeg_state = 0;	// Flag JPEG as idle
 800190e:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <HAL_JPEG_ErrorCallback+0x38>)
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	08017c98 	.word	0x08017c98
 8001920:	24000738 	.word	0x24000738
 8001924:	24025b72 	.word	0x24025b72

08001928 <DeltaTime>:

// ------------------------------------------------------------ UTILITY FUNCTIONS -- //
uint32_t DeltaTime(uint32_t start_t) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	uint32_t now_t = HAL_GetTick();
 8001930:	f001 f98c 	bl	8002c4c <HAL_GetTick>
 8001934:	60f8      	str	r0, [r7, #12]
	if (now_t < start_t) {
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	429a      	cmp	r2, r3
 800193c:	d204      	bcs.n	8001948 <DeltaTime+0x20>
		// Overflow has occurred
		return (0xFFFFFFFF - start_t) + now_t;
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	3b01      	subs	r3, #1
 8001946:	e002      	b.n	800194e <DeltaTime+0x26>
	}

	return now_t - start_t;
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	1ad3      	subs	r3, r2, r3
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <WriteDebug>:

// Transmit wrapper, this is for continuity across Controller project which debugs by printing to OLEDs
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	460b      	mov	r3, r1
 8001960:	70fb      	strb	r3, [r7, #3]
	CDC_Transmit_FS(str_ptr, str_len);
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	4619      	mov	r1, r3
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f015 f820 	bl	80169ac <CDC_Transmit_FS>
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <CAM_GetRegister>:

HAL_StatusTypeDef CAM_GetRegister(uint8_t addr, uint8_t* pData, uint8_t haltOnError) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b09e      	sub	sp, #120	@ 0x78
 8001978:	af02      	add	r7, sp, #8
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
 8001980:	4613      	mov	r3, r2
 8001982:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ov_result;
	uint8_t usb_msg[100] = {0};
 8001984:	f107 0308 	add.w	r3, r7, #8
 8001988:	2264      	movs	r2, #100	@ 0x64
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f015 fd65 	bl	801745c <memset>

	ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_READ, &addr, 1, 100);
 8001992:	1dfa      	adds	r2, r7, #7
 8001994:	2364      	movs	r3, #100	@ 0x64
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2301      	movs	r3, #1
 800199a:	2143      	movs	r1, #67	@ 0x43
 800199c:	482f      	ldr	r0, [pc, #188]	@ (8001a5c <CAM_GetRegister+0xe8>)
 800199e:	f005 fb65 	bl	800706c <HAL_I2C_Master_Transmit>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (ov_result) {
 80019a8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d020      	beq.n	80019f2 <CAM_GetRegister+0x7e>
		if (haltOnError) {
 80019b0:	79bb      	ldrb	r3, [r7, #6]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d01a      	beq.n	80019ec <CAM_GetRegister+0x78>
			sprintf(usb_msg, "TX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	461a      	mov	r2, r3
 80019ba:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80019be:	f107 0008 	add.w	r0, r7, #8
 80019c2:	4927      	ldr	r1, [pc, #156]	@ (8001a60 <CAM_GetRegister+0xec>)
 80019c4:	f015 fd28 	bl	8017418 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80019c8:	f107 0308 	add.w	r3, r7, #8
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fc87 	bl	80002e0 <strlen>
 80019d2:	4602      	mov	r2, r0
 80019d4:	f107 0308 	add.w	r3, r7, #8
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f014 ffe6 	bl	80169ac <CDC_Transmit_FS>
				HAL_Delay(1000);
 80019e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019e4:	f001 f93e 	bl	8002c64 <HAL_Delay>
			while (1) {
 80019e8:	bf00      	nop
 80019ea:	e7ed      	b.n	80019c8 <CAM_GetRegister+0x54>
			}
		}
		return ov_result;
 80019ec:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80019f0:	e030      	b.n	8001a54 <CAM_GetRegister+0xe0>
	}


	ov_result = HAL_I2C_Master_Receive(&hi2c2, OV7670_ADDR_READ, pData, 1, 100);
 80019f2:	2364      	movs	r3, #100	@ 0x64
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2301      	movs	r3, #1
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	2143      	movs	r1, #67	@ 0x43
 80019fc:	4817      	ldr	r0, [pc, #92]	@ (8001a5c <CAM_GetRegister+0xe8>)
 80019fe:	f005 fc4d 	bl	800729c <HAL_I2C_Master_Receive>
 8001a02:	4603      	mov	r3, r0
 8001a04:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (ov_result) {
 8001a08:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d020      	beq.n	8001a52 <CAM_GetRegister+0xde>
		if (haltOnError) {
 8001a10:	79bb      	ldrb	r3, [r7, #6]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d01a      	beq.n	8001a4c <CAM_GetRegister+0xd8>
			sprintf(usb_msg, "RX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001a1e:	f107 0008 	add.w	r0, r7, #8
 8001a22:	4910      	ldr	r1, [pc, #64]	@ (8001a64 <CAM_GetRegister+0xf0>)
 8001a24:	f015 fcf8 	bl	8017418 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001a28:	f107 0308 	add.w	r3, r7, #8
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fc57 	bl	80002e0 <strlen>
 8001a32:	4602      	mov	r2, r0
 8001a34:	f107 0308 	add.w	r3, r7, #8
 8001a38:	4611      	mov	r1, r2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f014 ffb6 	bl	80169ac <CDC_Transmit_FS>
				HAL_Delay(1000);
 8001a40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a44:	f001 f90e 	bl	8002c64 <HAL_Delay>
			while (1) {
 8001a48:	bf00      	nop
 8001a4a:	e7ed      	b.n	8001a28 <CAM_GetRegister+0xb4>
			}
		}
		return ov_result;
 8001a4c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001a50:	e000      	b.n	8001a54 <CAM_GetRegister+0xe0>
	}


	return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3770      	adds	r7, #112	@ 0x70
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	24000250 	.word	0x24000250
 8001a60:	08017ca4 	.word	0x08017ca4
 8001a64:	08017ce0 	.word	0x08017ce0

08001a68 <CAM_SetRegister>:

HAL_StatusTypeDef CAM_SetRegister(uint8_t addr, uint8_t data, uint8_t haltOnError) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b0a0      	sub	sp, #128	@ 0x80
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
 8001a72:	460b      	mov	r3, r1
 8001a74:	71bb      	strb	r3, [r7, #6]
 8001a76:	4613      	mov	r3, r2
 8001a78:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef ov_result;
	uint8_t usb_msg[100] = {0};
 8001a7a:	f107 0310 	add.w	r3, r7, #16
 8001a7e:	2264      	movs	r2, #100	@ 0x64
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f015 fcea 	bl	801745c <memset>

	uint8_t reg_set[2] = {addr, data};
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	733b      	strb	r3, [r7, #12]
 8001a8c:	79bb      	ldrb	r3, [r7, #6]
 8001a8e:	737b      	strb	r3, [r7, #13]

	ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_WRITE, reg_set, 2, 100);
 8001a90:	f107 020c 	add.w	r2, r7, #12
 8001a94:	2364      	movs	r3, #100	@ 0x64
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	2302      	movs	r3, #2
 8001a9a:	2142      	movs	r1, #66	@ 0x42
 8001a9c:	4841      	ldr	r0, [pc, #260]	@ (8001ba4 <CAM_SetRegister+0x13c>)
 8001a9e:	f005 fae5 	bl	800706c <HAL_I2C_Master_Transmit>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (ov_result) {
 8001aa8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01f      	beq.n	8001af0 <CAM_SetRegister+0x88>
		if (haltOnError) {
 8001ab0:	797b      	ldrb	r3, [r7, #5]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d019      	beq.n	8001aea <CAM_SetRegister+0x82>
			sprintf(usb_msg, "TX ERROR: Cannot write camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8001ab6:	79fa      	ldrb	r2, [r7, #7]
 8001ab8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001abc:	f107 0010 	add.w	r0, r7, #16
 8001ac0:	4939      	ldr	r1, [pc, #228]	@ (8001ba8 <CAM_SetRegister+0x140>)
 8001ac2:	f015 fca9 	bl	8017418 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fc08 	bl	80002e0 <strlen>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f107 0310 	add.w	r3, r7, #16
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f014 ff67 	bl	80169ac <CDC_Transmit_FS>
				HAL_Delay(1000);
 8001ade:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ae2:	f001 f8bf 	bl	8002c64 <HAL_Delay>
			while (1) {
 8001ae6:	bf00      	nop
 8001ae8:	e7ed      	b.n	8001ac6 <CAM_SetRegister+0x5e>
			}
		}
		return ov_result;
 8001aea:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001aee:	e054      	b.n	8001b9a <CAM_SetRegister+0x132>
	}

	// Confirm write
	uint8_t reg_get = 0x00;
 8001af0:	2300      	movs	r3, #0
 8001af2:	72fb      	strb	r3, [r7, #11]
	ov_result = CAM_GetRegister(addr, &reg_get, 1);
 8001af4:	f107 010b 	add.w	r1, r7, #11
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	2201      	movs	r2, #1
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff39 	bl	8001974 <CAM_GetRegister>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (ov_result) {
 8001b08:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d01f      	beq.n	8001b50 <CAM_SetRegister+0xe8>
		if (haltOnError) {
 8001b10:	797b      	ldrb	r3, [r7, #5]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d019      	beq.n	8001b4a <CAM_SetRegister+0xe2>
			sprintf(usb_msg, "CF ERROR: Cannot confirm camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8001b16:	79fa      	ldrb	r2, [r7, #7]
 8001b18:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001b1c:	f107 0010 	add.w	r0, r7, #16
 8001b20:	4922      	ldr	r1, [pc, #136]	@ (8001bac <CAM_SetRegister+0x144>)
 8001b22:	f015 fc79 	bl	8017418 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001b26:	f107 0310 	add.w	r3, r7, #16
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fbd8 	bl	80002e0 <strlen>
 8001b30:	4602      	mov	r2, r0
 8001b32:	f107 0310 	add.w	r3, r7, #16
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f014 ff37 	bl	80169ac <CDC_Transmit_FS>
				HAL_Delay(1000);
 8001b3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b42:	f001 f88f 	bl	8002c64 <HAL_Delay>
			while (1) {
 8001b46:	bf00      	nop
 8001b48:	e7ed      	b.n	8001b26 <CAM_SetRegister+0xbe>
			}
		}
		else {
			return ov_result;
 8001b4a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001b4e:	e024      	b.n	8001b9a <CAM_SetRegister+0x132>
		}
	}

	if (reg_get != data) {
 8001b50:	7afb      	ldrb	r3, [r7, #11]
 8001b52:	79ba      	ldrb	r2, [r7, #6]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d01f      	beq.n	8001b98 <CAM_SetRegister+0x130>
		// Error, bad write
		if (haltOnError) {
 8001b58:	797b      	ldrb	r3, [r7, #5]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d01a      	beq.n	8001b94 <CAM_SetRegister+0x12c>
			sprintf(usb_msg, "CF ERROR: Bad write to register 0x%X - EXPECTED 0x%X, GOT 0x%X\r\n", addr, data, reg_get);
 8001b5e:	79fa      	ldrb	r2, [r7, #7]
 8001b60:	79bb      	ldrb	r3, [r7, #6]
 8001b62:	7af9      	ldrb	r1, [r7, #11]
 8001b64:	f107 0010 	add.w	r0, r7, #16
 8001b68:	9100      	str	r1, [sp, #0]
 8001b6a:	4911      	ldr	r1, [pc, #68]	@ (8001bb0 <CAM_SetRegister+0x148>)
 8001b6c:	f015 fc54 	bl	8017418 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001b70:	f107 0310 	add.w	r3, r7, #16
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fbb3 	bl	80002e0 <strlen>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	4611      	mov	r1, r2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f014 ff12 	bl	80169ac <CDC_Transmit_FS>
				HAL_Delay(1000);
 8001b88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b8c:	f001 f86a 	bl	8002c64 <HAL_Delay>
			while (1) {
 8001b90:	bf00      	nop
 8001b92:	e7ed      	b.n	8001b70 <CAM_SetRegister+0x108>
			}
		}
		return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <CAM_SetRegister+0x132>
	}

	return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3778      	adds	r7, #120	@ 0x78
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	24000250 	.word	0x24000250
 8001ba8:	08017d1c 	.word	0x08017d1c
 8001bac:	08017d58 	.word	0x08017d58
 8001bb0:	08017d94 	.word	0x08017d94

08001bb4 <GenerateJPEGMCUBlock>:

// GENERATE JPEG MCU BLOCK
uint8_t GenerateJPEGMCUBlock() {
 8001bb4:	b480      	push	{r7}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af00      	add	r7, sp, #0
	// Don't go over the bounds of the specified MCU area
	if (jpeg_block > jpeg_mcu_widths[jpeg_quality]*jpeg_mcu_heights[jpeg_quality]) { return 1; }
 8001bba:	4b47      	ldr	r3, [pc, #284]	@ (8001cd8 <GenerateJPEGMCUBlock+0x124>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4b46      	ldr	r3, [pc, #280]	@ (8001cdc <GenerateJPEGMCUBlock+0x128>)
 8001bc2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b43      	ldr	r3, [pc, #268]	@ (8001cd8 <GenerateJPEGMCUBlock+0x124>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4b44      	ldr	r3, [pc, #272]	@ (8001ce0 <GenerateJPEGMCUBlock+0x12c>)
 8001bd0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001bd4:	fb02 f303 	mul.w	r3, r2, r3
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b42      	ldr	r3, [pc, #264]	@ (8001ce4 <GenerateJPEGMCUBlock+0x130>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d201      	bcs.n	8001be6 <GenerateJPEGMCUBlock+0x32>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e072      	b.n	8001ccc <GenerateJPEGMCUBlock+0x118>

	int xStart = (jpeg_block % jpeg_mcu_widths[jpeg_quality]) * 8;
 8001be6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ce4 <GenerateJPEGMCUBlock+0x130>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a3b      	ldr	r2, [pc, #236]	@ (8001cd8 <GenerateJPEGMCUBlock+0x124>)
 8001bec:	7812      	ldrb	r2, [r2, #0]
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4a3a      	ldr	r2, [pc, #232]	@ (8001cdc <GenerateJPEGMCUBlock+0x128>)
 8001bf2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001bf6:	fbb3 f1f2 	udiv	r1, r3, r2
 8001bfa:	fb01 f202 	mul.w	r2, r1, r2
 8001bfe:	1a9b      	subs	r3, r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	60bb      	str	r3, [r7, #8]
	int yStart = (jpeg_block / jpeg_mcu_widths[jpeg_quality]) * 8;
 8001c04:	4b37      	ldr	r3, [pc, #220]	@ (8001ce4 <GenerateJPEGMCUBlock+0x130>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a33      	ldr	r2, [pc, #204]	@ (8001cd8 <GenerateJPEGMCUBlock+0x124>)
 8001c0a:	7812      	ldrb	r2, [r2, #0]
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	4a33      	ldr	r2, [pc, #204]	@ (8001cdc <GenerateJPEGMCUBlock+0x128>)
 8001c10:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001c14:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	607b      	str	r3, [r7, #4]
	int i = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
	for (int y = yStart; y < yStart + 8; y++) {
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	e047      	b.n	8001cb6 <GenerateJPEGMCUBlock+0x102>
		uint16_t cached_y = y*jpeg_scaleFactors[jpeg_quality];
 8001c26:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd8 <GenerateJPEGMCUBlock+0x124>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ce8 <GenerateJPEGMCUBlock+0x134>)
 8001c2e:	5c9b      	ldrb	r3, [r3, r2]
 8001c30:	461a      	mov	r2, r3
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	fb12 f303 	smulbb	r3, r2, r3
 8001c3a:	807b      	strh	r3, [r7, #2]

		for (int x = xStart; x < xStart + 8; x++) {
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	e031      	b.n	8001ca6 <GenerateJPEGMCUBlock+0xf2>
			uint16_t cached_x = x*jpeg_scaleFactors[jpeg_quality] + camera_vshift;
 8001c42:	4b25      	ldr	r3, [pc, #148]	@ (8001cd8 <GenerateJPEGMCUBlock+0x124>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b27      	ldr	r3, [pc, #156]	@ (8001ce8 <GenerateJPEGMCUBlock+0x134>)
 8001c4a:	5c9b      	ldrb	r3, [r3, r2]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	fb12 f303 	smulbb	r3, r2, r3
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	4b24      	ldr	r3, [pc, #144]	@ (8001cec <GenerateJPEGMCUBlock+0x138>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	4413      	add	r3, r2
 8001c60:	803b      	strh	r3, [r7, #0]
			// Pad to 8x8
			if (cached_x >= CAM_WIDTH || cached_y >= CAM_HEIGHT) {
 8001c62:	883b      	ldrh	r3, [r7, #0]
 8001c64:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8001c68:	d802      	bhi.n	8001c70 <GenerateJPEGMCUBlock+0xbc>
 8001c6a:	887b      	ldrh	r3, [r7, #2]
 8001c6c:	2bf1      	cmp	r3, #241	@ 0xf1
 8001c6e:	d905      	bls.n	8001c7c <GenerateJPEGMCUBlock+0xc8>
				jpeg_mcu[i] = 0x00;
 8001c70:	4a1f      	ldr	r2, [pc, #124]	@ (8001cf0 <GenerateJPEGMCUBlock+0x13c>)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	4413      	add	r3, r2
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	e00e      	b.n	8001c9a <GenerateJPEGMCUBlock+0xe6>
			} else {
				jpeg_mcu[i] = camera_mem[cached_x + cached_y * CAM_WIDTH];
 8001c7c:	8839      	ldrh	r1, [r7, #0]
 8001c7e:	887a      	ldrh	r2, [r7, #2]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	019a      	lsls	r2, r3, #6
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	440b      	add	r3, r1
 8001c8c:	4a19      	ldr	r2, [pc, #100]	@ (8001cf4 <GenerateJPEGMCUBlock+0x140>)
 8001c8e:	5cd1      	ldrb	r1, [r2, r3]
 8001c90:	4a17      	ldr	r2, [pc, #92]	@ (8001cf0 <GenerateJPEGMCUBlock+0x13c>)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	4413      	add	r3, r2
 8001c96:	460a      	mov	r2, r1
 8001c98:	701a      	strb	r2, [r3, #0]
			}
			i++;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
		for (int x = xStart; x < xStart + 8; x++) {
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	3307      	adds	r3, #7
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	ddc8      	ble.n	8001c42 <GenerateJPEGMCUBlock+0x8e>
	for (int y = yStart; y < yStart + 8; y++) {
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3307      	adds	r3, #7
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	ddb2      	ble.n	8001c26 <GenerateJPEGMCUBlock+0x72>
		}
	}
	jpeg_block++;
 8001cc0:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <GenerateJPEGMCUBlock+0x130>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	4a07      	ldr	r2, [pc, #28]	@ (8001ce4 <GenerateJPEGMCUBlock+0x130>)
 8001cc8:	6013      	str	r3, [r2, #0]
	return 0;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	371c      	adds	r7, #28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	24025b78 	.word	0x24025b78
 8001cdc:	24000004 	.word	0x24000004
 8001ce0:	2400000c 	.word	0x2400000c
 8001ce4:	240131a8 	.word	0x240131a8
 8001ce8:	24000014 	.word	0x24000014
 8001cec:	24000000 	.word	0x24000000
 8001cf0:	24013168 	.word	0x24013168
 8001cf4:	240007a0 	.word	0x240007a0

08001cf8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001cfe:	463b      	mov	r3, r7
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001d0a:	f001 f8eb 	bl	8002ee4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001d1a:	231f      	movs	r3, #31
 8001d1c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001d1e:	2387      	movs	r3, #135	@ 0x87
 8001d20:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001d26:	2300      	movs	r3, #0
 8001d28:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f001 f909 	bl	8002f54 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001d42:	2004      	movs	r0, #4
 8001d44:	f001 f8e6 	bl	8002f14 <HAL_MPU_Enable>

}
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d54:	b672      	cpsid	i
}
 8001d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <Error_Handler+0x8>

08001d5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	4b0a      	ldr	r3, [pc, #40]	@ (8001d8c <HAL_MspInit+0x30>)
 8001d64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d68:	4a08      	ldr	r2, [pc, #32]	@ (8001d8c <HAL_MspInit+0x30>)
 8001d6a:	f043 0302 	orr.w	r3, r3, #2
 8001d6e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <HAL_MspInit+0x30>)
 8001d74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	58024400 	.word	0x58024400

08001d90 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08e      	sub	sp, #56	@ 0x38
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a79      	ldr	r2, [pc, #484]	@ (8001f94 <HAL_DCMI_MspInit+0x204>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	f040 80ec 	bne.w	8001f8c <HAL_DCMI_MspInit+0x1fc>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001db4:	4b78      	ldr	r3, [pc, #480]	@ (8001f98 <HAL_DCMI_MspInit+0x208>)
 8001db6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001dba:	4a77      	ldr	r2, [pc, #476]	@ (8001f98 <HAL_DCMI_MspInit+0x208>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8001dc4:	4b74      	ldr	r3, [pc, #464]	@ (8001f98 <HAL_DCMI_MspInit+0x208>)
 8001dc6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	623b      	str	r3, [r7, #32]
 8001dd0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dd2:	4b71      	ldr	r3, [pc, #452]	@ (8001f98 <HAL_DCMI_MspInit+0x208>)
 8001dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd8:	4a6f      	ldr	r2, [pc, #444]	@ (8001f98 <HAL_DCMI_MspInit+0x208>)
 8001dda:	f043 0310 	orr.w	r3, r3, #16
 8001dde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001de2:	4b6d      	ldr	r3, [pc, #436]	@ (8001f98 <HAL_DCMI_MspInit+0x208>)
 8001de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df0:	4b69      	ldr	r3, [pc, #420]	@ (8001f98 <HAL_DCMI_MspInit+0x208>)
 8001df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df6:	4a68      	ldr	r2, [pc, #416]	@ (8001f98 <HAL_DCMI_MspInit+0x208>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e00:	4b65      	ldr	r3, [pc, #404]	@ (8001f98 <HAL_DCMI_MspInit+0x208>)
 8001e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0e:	4b62      	ldr	r3, [pc, #392]	@ (8001f98 <HAL_DCMI_MspInit+0x208>)
 8001e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e14:	4a60      	ldr	r2, [pc, #384]	@ (8001f98 <HAL_DCMI_MspInit+0x208>)
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e1e:	4b5e      	ldr	r3, [pc, #376]	@ (8001f98 <HAL_DCMI_MspInit+0x208>)
 8001e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e2c:	4b5a      	ldr	r3, [pc, #360]	@ (8001f98 <HAL_DCMI_MspInit+0x208>)
 8001e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e32:	4a59      	ldr	r2, [pc, #356]	@ (8001f98 <HAL_DCMI_MspInit+0x208>)
 8001e34:	f043 0308 	orr.w	r3, r3, #8
 8001e38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e3c:	4b56      	ldr	r3, [pc, #344]	@ (8001f98 <HAL_DCMI_MspInit+0x208>)
 8001e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4a:	4b53      	ldr	r3, [pc, #332]	@ (8001f98 <HAL_DCMI_MspInit+0x208>)
 8001e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e50:	4a51      	ldr	r2, [pc, #324]	@ (8001f98 <HAL_DCMI_MspInit+0x208>)
 8001e52:	f043 0302 	orr.w	r3, r3, #2
 8001e56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8001f98 <HAL_DCMI_MspInit+0x208>)
 8001e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 8001e68:	2373      	movs	r3, #115	@ 0x73
 8001e6a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	2300      	movs	r3, #0
 8001e76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e78:	230d      	movs	r3, #13
 8001e7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e80:	4619      	mov	r1, r3
 8001e82:	4846      	ldr	r0, [pc, #280]	@ (8001f9c <HAL_DCMI_MspInit+0x20c>)
 8001e84:	f004 fe8c 	bl	8006ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001e88:	2350      	movs	r3, #80	@ 0x50
 8001e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e98:	230d      	movs	r3, #13
 8001e9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	483f      	ldr	r0, [pc, #252]	@ (8001fa0 <HAL_DCMI_MspInit+0x210>)
 8001ea4:	f004 fe7c 	bl	8006ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ea8:	23c0      	movs	r3, #192	@ 0xc0
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001eb8:	230d      	movs	r3, #13
 8001eba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ebc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4838      	ldr	r0, [pc, #224]	@ (8001fa4 <HAL_DCMI_MspInit+0x214>)
 8001ec4:	f004 fe6c 	bl	8006ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ec8:	2308      	movs	r3, #8
 8001eca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ed8:	230d      	movs	r3, #13
 8001eda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001edc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4831      	ldr	r0, [pc, #196]	@ (8001fa8 <HAL_DCMI_MspInit+0x218>)
 8001ee4:	f004 fe5c 	bl	8006ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ee8:	2380      	movs	r3, #128	@ 0x80
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ef8:	230d      	movs	r3, #13
 8001efa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f00:	4619      	mov	r1, r3
 8001f02:	482a      	ldr	r0, [pc, #168]	@ (8001fac <HAL_DCMI_MspInit+0x21c>)
 8001f04:	f004 fe4c 	bl	8006ba0 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8001f08:	4b29      	ldr	r3, [pc, #164]	@ (8001fb0 <HAL_DCMI_MspInit+0x220>)
 8001f0a:	4a2a      	ldr	r2, [pc, #168]	@ (8001fb4 <HAL_DCMI_MspInit+0x224>)
 8001f0c:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8001f0e:	4b28      	ldr	r3, [pc, #160]	@ (8001fb0 <HAL_DCMI_MspInit+0x220>)
 8001f10:	224b      	movs	r2, #75	@ 0x4b
 8001f12:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f14:	4b26      	ldr	r3, [pc, #152]	@ (8001fb0 <HAL_DCMI_MspInit+0x220>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f1a:	4b25      	ldr	r3, [pc, #148]	@ (8001fb0 <HAL_DCMI_MspInit+0x220>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001f20:	4b23      	ldr	r3, [pc, #140]	@ (8001fb0 <HAL_DCMI_MspInit+0x220>)
 8001f22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f26:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f28:	4b21      	ldr	r3, [pc, #132]	@ (8001fb0 <HAL_DCMI_MspInit+0x220>)
 8001f2a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f2e:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f30:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb0 <HAL_DCMI_MspInit+0x220>)
 8001f32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f36:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8001f38:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb0 <HAL_DCMI_MspInit+0x220>)
 8001f3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f3e:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8001f40:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb0 <HAL_DCMI_MspInit+0x220>)
 8001f42:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f46:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f48:	4b19      	ldr	r3, [pc, #100]	@ (8001fb0 <HAL_DCMI_MspInit+0x220>)
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001f4e:	4b18      	ldr	r3, [pc, #96]	@ (8001fb0 <HAL_DCMI_MspInit+0x220>)
 8001f50:	2203      	movs	r2, #3
 8001f52:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001f54:	4b16      	ldr	r3, [pc, #88]	@ (8001fb0 <HAL_DCMI_MspInit+0x220>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001f5a:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <HAL_DCMI_MspInit+0x220>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001f60:	4813      	ldr	r0, [pc, #76]	@ (8001fb0 <HAL_DCMI_MspInit+0x220>)
 8001f62:	f001 fb23 	bl	80035ac <HAL_DMA_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <HAL_DCMI_MspInit+0x1e0>
    {
      Error_Handler();
 8001f6c:	f7ff fef0 	bl	8001d50 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a0f      	ldr	r2, [pc, #60]	@ (8001fb0 <HAL_DCMI_MspInit+0x220>)
 8001f74:	649a      	str	r2, [r3, #72]	@ 0x48
 8001f76:	4a0e      	ldr	r2, [pc, #56]	@ (8001fb0 <HAL_DCMI_MspInit+0x220>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2100      	movs	r1, #0
 8001f80:	204e      	movs	r0, #78	@ 0x4e
 8001f82:	f000 ff7a 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001f86:	204e      	movs	r0, #78	@ 0x4e
 8001f88:	f000 ff91 	bl	8002eae <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8001f8c:	bf00      	nop
 8001f8e:	3738      	adds	r7, #56	@ 0x38
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	48020000 	.word	0x48020000
 8001f98:	58024400 	.word	0x58024400
 8001f9c:	58021000 	.word	0x58021000
 8001fa0:	58020000 	.word	0x58020000
 8001fa4:	58020800 	.word	0x58020800
 8001fa8:	58020c00 	.word	0x58020c00
 8001fac:	58020400 	.word	0x58020400
 8001fb0:	240001d8 	.word	0x240001d8
 8001fb4:	40020010 	.word	0x40020010

08001fb8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b0ba      	sub	sp, #232	@ 0xe8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd0:	f107 0310 	add.w	r3, r7, #16
 8001fd4:	22c0      	movs	r2, #192	@ 0xc0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f015 fa3f 	bl	801745c <memset>
  if(hi2c->Instance==I2C2)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a38      	ldr	r2, [pc, #224]	@ (80020c4 <HAL_I2C_MspInit+0x10c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d169      	bne.n	80020bc <HAL_I2C_MspInit+0x104>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001fe8:	f04f 0208 	mov.w	r2, #8
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 12;
 8001ff8:	230c      	movs	r3, #12
 8001ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002000:	2302      	movs	r3, #2
 8002002:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 8002004:	2303      	movs	r3, #3
 8002006:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002008:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800200c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800200e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002012:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8002018:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800201c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002020:	f107 0310 	add.w	r3, r7, #16
 8002024:	4618      	mov	r0, r3
 8002026:	f00b fc75 	bl	800d914 <HAL_RCCEx_PeriphCLKConfig>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <HAL_I2C_MspInit+0x7c>
    {
      Error_Handler();
 8002030:	f7ff fe8e 	bl	8001d50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002034:	4b24      	ldr	r3, [pc, #144]	@ (80020c8 <HAL_I2C_MspInit+0x110>)
 8002036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800203a:	4a23      	ldr	r2, [pc, #140]	@ (80020c8 <HAL_I2C_MspInit+0x110>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002044:	4b20      	ldr	r3, [pc, #128]	@ (80020c8 <HAL_I2C_MspInit+0x110>)
 8002046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002052:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002056:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800205a:	2312      	movs	r3, #18
 800205c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002060:	2301      	movs	r3, #1
 8002062:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002066:	2303      	movs	r3, #3
 8002068:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800206c:	2304      	movs	r3, #4
 800206e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002072:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002076:	4619      	mov	r1, r3
 8002078:	4814      	ldr	r0, [pc, #80]	@ (80020cc <HAL_I2C_MspInit+0x114>)
 800207a:	f004 fd91 	bl	8006ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800207e:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <HAL_I2C_MspInit+0x110>)
 8002080:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002084:	4a10      	ldr	r2, [pc, #64]	@ (80020c8 <HAL_I2C_MspInit+0x110>)
 8002086:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800208a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800208e:	4b0e      	ldr	r3, [pc, #56]	@ (80020c8 <HAL_I2C_MspInit+0x110>)
 8002090:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002094:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800209c:	2200      	movs	r2, #0
 800209e:	2100      	movs	r1, #0
 80020a0:	2021      	movs	r0, #33	@ 0x21
 80020a2:	f000 feea 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80020a6:	2021      	movs	r0, #33	@ 0x21
 80020a8:	f000 ff01 	bl	8002eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2100      	movs	r1, #0
 80020b0:	2022      	movs	r0, #34	@ 0x22
 80020b2:	f000 fee2 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80020b6:	2022      	movs	r0, #34	@ 0x22
 80020b8:	f000 fef9 	bl	8002eae <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80020bc:	bf00      	nop
 80020be:	37e8      	adds	r7, #232	@ 0xe8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40005800 	.word	0x40005800
 80020c8:	58024400 	.word	0x58024400
 80020cc:	58020400 	.word	0x58020400

080020d0 <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a55      	ldr	r2, [pc, #340]	@ (8002234 <HAL_JPEG_MspInit+0x164>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	f040 80a3 	bne.w	800222a <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80020e4:	4b54      	ldr	r3, [pc, #336]	@ (8002238 <HAL_JPEG_MspInit+0x168>)
 80020e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020ea:	4a53      	ldr	r2, [pc, #332]	@ (8002238 <HAL_JPEG_MspInit+0x168>)
 80020ec:	f043 0320 	orr.w	r3, r3, #32
 80020f0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80020f4:	4b50      	ldr	r3, [pc, #320]	@ (8002238 <HAL_JPEG_MspInit+0x168>)
 80020f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 8002102:	4b4e      	ldr	r3, [pc, #312]	@ (800223c <HAL_JPEG_MspInit+0x16c>)
 8002104:	4a4e      	ldr	r2, [pc, #312]	@ (8002240 <HAL_JPEG_MspInit+0x170>)
 8002106:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8002108:	4b4c      	ldr	r3, [pc, #304]	@ (800223c <HAL_JPEG_MspInit+0x16c>)
 800210a:	2211      	movs	r2, #17
 800210c:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 800210e:	4b4b      	ldr	r3, [pc, #300]	@ (800223c <HAL_JPEG_MspInit+0x16c>)
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8002114:	4b49      	ldr	r3, [pc, #292]	@ (800223c <HAL_JPEG_MspInit+0x16c>)
 8002116:	2240      	movs	r2, #64	@ 0x40
 8002118:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800211a:	4b48      	ldr	r3, [pc, #288]	@ (800223c <HAL_JPEG_MspInit+0x16c>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8002120:	4b46      	ldr	r3, [pc, #280]	@ (800223c <HAL_JPEG_MspInit+0x16c>)
 8002122:	2202      	movs	r2, #2
 8002124:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8002126:	4b45      	ldr	r3, [pc, #276]	@ (800223c <HAL_JPEG_MspInit+0x16c>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 800212c:	4b43      	ldr	r3, [pc, #268]	@ (800223c <HAL_JPEG_MspInit+0x16c>)
 800212e:	2200      	movs	r2, #0
 8002130:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8002132:	4b42      	ldr	r3, [pc, #264]	@ (800223c <HAL_JPEG_MspInit+0x16c>)
 8002134:	2280      	movs	r2, #128	@ 0x80
 8002136:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002138:	4b40      	ldr	r3, [pc, #256]	@ (800223c <HAL_JPEG_MspInit+0x16c>)
 800213a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800213e:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8002140:	4b3e      	ldr	r3, [pc, #248]	@ (800223c <HAL_JPEG_MspInit+0x16c>)
 8002142:	2220      	movs	r2, #32
 8002144:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002146:	4b3d      	ldr	r3, [pc, #244]	@ (800223c <HAL_JPEG_MspInit+0x16c>)
 8002148:	2200      	movs	r2, #0
 800214a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800214c:	4b3b      	ldr	r3, [pc, #236]	@ (800223c <HAL_JPEG_MspInit+0x16c>)
 800214e:	2200      	movs	r2, #0
 8002150:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 8002152:	4b3a      	ldr	r3, [pc, #232]	@ (800223c <HAL_JPEG_MspInit+0x16c>)
 8002154:	2200      	movs	r2, #0
 8002156:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8002158:	4b38      	ldr	r3, [pc, #224]	@ (800223c <HAL_JPEG_MspInit+0x16c>)
 800215a:	2200      	movs	r2, #0
 800215c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 800215e:	4837      	ldr	r0, [pc, #220]	@ (800223c <HAL_JPEG_MspInit+0x16c>)
 8002160:	f008 fd66 	bl	800ac30 <HAL_MDMA_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 800216a:	f7ff fdf1 	bl	8001d50 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 800216e:	2200      	movs	r2, #0
 8002170:	2100      	movs	r1, #0
 8002172:	4832      	ldr	r0, [pc, #200]	@ (800223c <HAL_JPEG_MspInit+0x16c>)
 8002174:	f008 fda8 	bl	800acc8 <HAL_MDMA_ConfigPostRequestMask>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 800217e:	f7ff fde7 	bl	8001d50 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a2d      	ldr	r2, [pc, #180]	@ (800223c <HAL_JPEG_MspInit+0x16c>)
 8002186:	631a      	str	r2, [r3, #48]	@ 0x30
 8002188:	4a2c      	ldr	r2, [pc, #176]	@ (800223c <HAL_JPEG_MspInit+0x16c>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 800218e:	4b2d      	ldr	r3, [pc, #180]	@ (8002244 <HAL_JPEG_MspInit+0x174>)
 8002190:	4a2d      	ldr	r2, [pc, #180]	@ (8002248 <HAL_JPEG_MspInit+0x178>)
 8002192:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 8002194:	4b2b      	ldr	r3, [pc, #172]	@ (8002244 <HAL_JPEG_MspInit+0x174>)
 8002196:	2214      	movs	r2, #20
 8002198:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 800219a:	4b2a      	ldr	r3, [pc, #168]	@ (8002244 <HAL_JPEG_MspInit+0x174>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 80021a0:	4b28      	ldr	r3, [pc, #160]	@ (8002244 <HAL_JPEG_MspInit+0x174>)
 80021a2:	2240      	movs	r2, #64	@ 0x40
 80021a4:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80021a6:	4b27      	ldr	r3, [pc, #156]	@ (8002244 <HAL_JPEG_MspInit+0x174>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 80021ac:	4b25      	ldr	r3, [pc, #148]	@ (8002244 <HAL_JPEG_MspInit+0x174>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 80021b2:	4b24      	ldr	r3, [pc, #144]	@ (8002244 <HAL_JPEG_MspInit+0x174>)
 80021b4:	2208      	movs	r2, #8
 80021b6:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80021b8:	4b22      	ldr	r3, [pc, #136]	@ (8002244 <HAL_JPEG_MspInit+0x174>)
 80021ba:	2220      	movs	r2, #32
 80021bc:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 80021be:	4b21      	ldr	r3, [pc, #132]	@ (8002244 <HAL_JPEG_MspInit+0x174>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80021c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002244 <HAL_JPEG_MspInit+0x174>)
 80021c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 80021cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002244 <HAL_JPEG_MspInit+0x174>)
 80021ce:	2204      	movs	r2, #4
 80021d0:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80021d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002244 <HAL_JPEG_MspInit+0x174>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80021d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002244 <HAL_JPEG_MspInit+0x174>)
 80021da:	2200      	movs	r2, #0
 80021dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 80021de:	4b19      	ldr	r3, [pc, #100]	@ (8002244 <HAL_JPEG_MspInit+0x174>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 80021e4:	4b17      	ldr	r3, [pc, #92]	@ (8002244 <HAL_JPEG_MspInit+0x174>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 80021ea:	4816      	ldr	r0, [pc, #88]	@ (8002244 <HAL_JPEG_MspInit+0x174>)
 80021ec:	f008 fd20 	bl	800ac30 <HAL_MDMA_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 80021f6:	f7ff fdab 	bl	8001d50 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 80021fa:	2200      	movs	r2, #0
 80021fc:	2100      	movs	r1, #0
 80021fe:	4811      	ldr	r0, [pc, #68]	@ (8002244 <HAL_JPEG_MspInit+0x174>)
 8002200:	f008 fd62 	bl	800acc8 <HAL_MDMA_ConfigPostRequestMask>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 800220a:	f7ff fda1 	bl	8001d50 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a0c      	ldr	r2, [pc, #48]	@ (8002244 <HAL_JPEG_MspInit+0x174>)
 8002212:	635a      	str	r2, [r3, #52]	@ 0x34
 8002214:	4a0b      	ldr	r2, [pc, #44]	@ (8002244 <HAL_JPEG_MspInit+0x174>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	2079      	movs	r0, #121	@ 0x79
 8002220:	f000 fe2b 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8002224:	2079      	movs	r0, #121	@ 0x79
 8002226:	f000 fe42 	bl	8002eae <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	52003000 	.word	0x52003000
 8002238:	58024400 	.word	0x58024400
 800223c:	240002fc 	.word	0x240002fc
 8002240:	52000040 	.word	0x52000040
 8002244:	24000368 	.word	0x24000368
 8002248:	52000080 	.word	0x52000080

0800224c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b0bc      	sub	sp, #240	@ 0xf0
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002264:	f107 0318 	add.w	r3, r7, #24
 8002268:	22c0      	movs	r2, #192	@ 0xc0
 800226a:	2100      	movs	r1, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f015 f8f5 	bl	801745c <memset>
  if(hspi->Instance==SPI2)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a38      	ldr	r2, [pc, #224]	@ (8002358 <HAL_SPI_MspInit+0x10c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d169      	bne.n	8002350 <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800227c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002288:	2300      	movs	r3, #0
 800228a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800228c:	f107 0318 	add.w	r3, r7, #24
 8002290:	4618      	mov	r0, r3
 8002292:	f00b fb3f 	bl	800d914 <HAL_RCCEx_PeriphCLKConfig>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800229c:	f7ff fd58 	bl	8001d50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022a0:	4b2e      	ldr	r3, [pc, #184]	@ (800235c <HAL_SPI_MspInit+0x110>)
 80022a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022a6:	4a2d      	ldr	r2, [pc, #180]	@ (800235c <HAL_SPI_MspInit+0x110>)
 80022a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022b0:	4b2a      	ldr	r3, [pc, #168]	@ (800235c <HAL_SPI_MspInit+0x110>)
 80022b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022be:	4b27      	ldr	r3, [pc, #156]	@ (800235c <HAL_SPI_MspInit+0x110>)
 80022c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c4:	4a25      	ldr	r2, [pc, #148]	@ (800235c <HAL_SPI_MspInit+0x110>)
 80022c6:	f043 0304 	orr.w	r3, r3, #4
 80022ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022ce:	4b23      	ldr	r3, [pc, #140]	@ (800235c <HAL_SPI_MspInit+0x110>)
 80022d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022dc:	4b1f      	ldr	r3, [pc, #124]	@ (800235c <HAL_SPI_MspInit+0x110>)
 80022de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e2:	4a1e      	ldr	r2, [pc, #120]	@ (800235c <HAL_SPI_MspInit+0x110>)
 80022e4:	f043 0302 	orr.w	r3, r3, #2
 80022e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022ec:	4b1b      	ldr	r3, [pc, #108]	@ (800235c <HAL_SPI_MspInit+0x110>)
 80022ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80022fa:	2306      	movs	r3, #6
 80022fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230c:	2300      	movs	r3, #0
 800230e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002312:	2305      	movs	r3, #5
 8002314:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002318:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800231c:	4619      	mov	r1, r3
 800231e:	4810      	ldr	r0, [pc, #64]	@ (8002360 <HAL_SPI_MspInit+0x114>)
 8002320:	f004 fc3e 	bl	8006ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002324:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002328:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	2300      	movs	r3, #0
 800233a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800233e:	2305      	movs	r3, #5
 8002340:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002344:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002348:	4619      	mov	r1, r3
 800234a:	4806      	ldr	r0, [pc, #24]	@ (8002364 <HAL_SPI_MspInit+0x118>)
 800234c:	f004 fc28 	bl	8006ba0 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002350:	bf00      	nop
 8002352:	37f0      	adds	r7, #240	@ 0xf0
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40003800 	.word	0x40003800
 800235c:	58024400 	.word	0x58024400
 8002360:	58020800 	.word	0x58020800
 8002364:	58020400 	.word	0x58020400

08002368 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002368:	b480      	push	{r7}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a2b      	ldr	r2, [pc, #172]	@ (8002424 <HAL_TIM_PWM_MspInit+0xbc>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d10f      	bne.n	800239a <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800237a:	4b2b      	ldr	r3, [pc, #172]	@ (8002428 <HAL_TIM_PWM_MspInit+0xc0>)
 800237c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002380:	4a29      	ldr	r2, [pc, #164]	@ (8002428 <HAL_TIM_PWM_MspInit+0xc0>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800238a:	4b27      	ldr	r3, [pc, #156]	@ (8002428 <HAL_TIM_PWM_MspInit+0xc0>)
 800238c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002398:	e03d      	b.n	8002416 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023a2:	d10f      	bne.n	80023c4 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023a4:	4b20      	ldr	r3, [pc, #128]	@ (8002428 <HAL_TIM_PWM_MspInit+0xc0>)
 80023a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002428 <HAL_TIM_PWM_MspInit+0xc0>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002428 <HAL_TIM_PWM_MspInit+0xc0>)
 80023b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
}
 80023c2:	e028      	b.n	8002416 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a18      	ldr	r2, [pc, #96]	@ (800242c <HAL_TIM_PWM_MspInit+0xc4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d10f      	bne.n	80023ee <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023ce:	4b16      	ldr	r3, [pc, #88]	@ (8002428 <HAL_TIM_PWM_MspInit+0xc0>)
 80023d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023d4:	4a14      	ldr	r2, [pc, #80]	@ (8002428 <HAL_TIM_PWM_MspInit+0xc0>)
 80023d6:	f043 0302 	orr.w	r3, r3, #2
 80023da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023de:	4b12      	ldr	r3, [pc, #72]	@ (8002428 <HAL_TIM_PWM_MspInit+0xc0>)
 80023e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
}
 80023ec:	e013      	b.n	8002416 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002430 <HAL_TIM_PWM_MspInit+0xc8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d10e      	bne.n	8002416 <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <HAL_TIM_PWM_MspInit+0xc0>)
 80023fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002428 <HAL_TIM_PWM_MspInit+0xc0>)
 8002400:	f043 0304 	orr.w	r3, r3, #4
 8002404:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002408:	4b07      	ldr	r3, [pc, #28]	@ (8002428 <HAL_TIM_PWM_MspInit+0xc0>)
 800240a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
}
 8002416:	bf00      	nop
 8002418:	371c      	adds	r7, #28
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40010000 	.word	0x40010000
 8002428:	58024400 	.word	0x58024400
 800242c:	40000400 	.word	0x40000400
 8002430:	40000800 	.word	0x40000800

08002434 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a1d      	ldr	r2, [pc, #116]	@ (80024b8 <HAL_TIM_Base_MspInit+0x84>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d117      	bne.n	8002476 <HAL_TIM_Base_MspInit+0x42>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002446:	4b1d      	ldr	r3, [pc, #116]	@ (80024bc <HAL_TIM_Base_MspInit+0x88>)
 8002448:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800244c:	4a1b      	ldr	r2, [pc, #108]	@ (80024bc <HAL_TIM_Base_MspInit+0x88>)
 800244e:	f043 0308 	orr.w	r3, r3, #8
 8002452:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002456:	4b19      	ldr	r3, [pc, #100]	@ (80024bc <HAL_TIM_Base_MspInit+0x88>)
 8002458:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002464:	2200      	movs	r2, #0
 8002466:	2100      	movs	r1, #0
 8002468:	2032      	movs	r0, #50	@ 0x32
 800246a:	f000 fd06 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800246e:	2032      	movs	r0, #50	@ 0x32
 8002470:	f000 fd1d 	bl	8002eae <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002474:	e01b      	b.n	80024ae <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM14)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a11      	ldr	r2, [pc, #68]	@ (80024c0 <HAL_TIM_Base_MspInit+0x8c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d116      	bne.n	80024ae <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002480:	4b0e      	ldr	r3, [pc, #56]	@ (80024bc <HAL_TIM_Base_MspInit+0x88>)
 8002482:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002486:	4a0d      	ldr	r2, [pc, #52]	@ (80024bc <HAL_TIM_Base_MspInit+0x88>)
 8002488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800248c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002490:	4b0a      	ldr	r3, [pc, #40]	@ (80024bc <HAL_TIM_Base_MspInit+0x88>)
 8002492:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2100      	movs	r1, #0
 80024a2:	202d      	movs	r0, #45	@ 0x2d
 80024a4:	f000 fce9 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80024a8:	202d      	movs	r0, #45	@ 0x2d
 80024aa:	f000 fd00 	bl	8002eae <HAL_NVIC_EnableIRQ>
}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40000c00 	.word	0x40000c00
 80024bc:	58024400 	.word	0x58024400
 80024c0:	40002000 	.word	0x40002000

080024c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08c      	sub	sp, #48	@ 0x30
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 031c 	add.w	r3, r7, #28
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a5d      	ldr	r2, [pc, #372]	@ (8002658 <HAL_TIM_MspPostInit+0x194>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d120      	bne.n	8002528 <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024e6:	4b5d      	ldr	r3, [pc, #372]	@ (800265c <HAL_TIM_MspPostInit+0x198>)
 80024e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ec:	4a5b      	ldr	r2, [pc, #364]	@ (800265c <HAL_TIM_MspPostInit+0x198>)
 80024ee:	f043 0310 	orr.w	r3, r3, #16
 80024f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024f6:	4b59      	ldr	r3, [pc, #356]	@ (800265c <HAL_TIM_MspPostInit+0x198>)
 80024f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	61bb      	str	r3, [r7, #24]
 8002502:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002504:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002512:	2300      	movs	r3, #0
 8002514:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002516:	2301      	movs	r3, #1
 8002518:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800251a:	f107 031c 	add.w	r3, r7, #28
 800251e:	4619      	mov	r1, r3
 8002520:	484f      	ldr	r0, [pc, #316]	@ (8002660 <HAL_TIM_MspPostInit+0x19c>)
 8002522:	f004 fb3d 	bl	8006ba0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002526:	e093      	b.n	8002650 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002530:	d11f      	bne.n	8002572 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002532:	4b4a      	ldr	r3, [pc, #296]	@ (800265c <HAL_TIM_MspPostInit+0x198>)
 8002534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002538:	4a48      	ldr	r2, [pc, #288]	@ (800265c <HAL_TIM_MspPostInit+0x198>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002542:	4b46      	ldr	r3, [pc, #280]	@ (800265c <HAL_TIM_MspPostInit+0x198>)
 8002544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002550:	2307      	movs	r3, #7
 8002552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002554:	2302      	movs	r3, #2
 8002556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255c:	2300      	movs	r3, #0
 800255e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002560:	2301      	movs	r3, #1
 8002562:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002564:	f107 031c 	add.w	r3, r7, #28
 8002568:	4619      	mov	r1, r3
 800256a:	483e      	ldr	r0, [pc, #248]	@ (8002664 <HAL_TIM_MspPostInit+0x1a0>)
 800256c:	f004 fb18 	bl	8006ba0 <HAL_GPIO_Init>
}
 8002570:	e06e      	b.n	8002650 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM3)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a3c      	ldr	r2, [pc, #240]	@ (8002668 <HAL_TIM_MspPostInit+0x1a4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d11f      	bne.n	80025bc <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800257c:	4b37      	ldr	r3, [pc, #220]	@ (800265c <HAL_TIM_MspPostInit+0x198>)
 800257e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002582:	4a36      	ldr	r2, [pc, #216]	@ (800265c <HAL_TIM_MspPostInit+0x198>)
 8002584:	f043 0302 	orr.w	r3, r3, #2
 8002588:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800258c:	4b33      	ldr	r3, [pc, #204]	@ (800265c <HAL_TIM_MspPostInit+0x198>)
 800258e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800259a:	2303      	movs	r3, #3
 800259c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	2302      	movs	r3, #2
 80025a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	2300      	movs	r3, #0
 80025a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025aa:	2302      	movs	r3, #2
 80025ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ae:	f107 031c 	add.w	r3, r7, #28
 80025b2:	4619      	mov	r1, r3
 80025b4:	482d      	ldr	r0, [pc, #180]	@ (800266c <HAL_TIM_MspPostInit+0x1a8>)
 80025b6:	f004 faf3 	bl	8006ba0 <HAL_GPIO_Init>
}
 80025ba:	e049      	b.n	8002650 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM4)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002670 <HAL_TIM_MspPostInit+0x1ac>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d120      	bne.n	8002608 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c6:	4b25      	ldr	r3, [pc, #148]	@ (800265c <HAL_TIM_MspPostInit+0x198>)
 80025c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025cc:	4a23      	ldr	r2, [pc, #140]	@ (800265c <HAL_TIM_MspPostInit+0x198>)
 80025ce:	f043 0302 	orr.w	r3, r3, #2
 80025d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025d6:	4b21      	ldr	r3, [pc, #132]	@ (800265c <HAL_TIM_MspPostInit+0x198>)
 80025d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ea:	2302      	movs	r3, #2
 80025ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f2:	2300      	movs	r3, #0
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025f6:	2302      	movs	r3, #2
 80025f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fa:	f107 031c 	add.w	r3, r7, #28
 80025fe:	4619      	mov	r1, r3
 8002600:	481a      	ldr	r0, [pc, #104]	@ (800266c <HAL_TIM_MspPostInit+0x1a8>)
 8002602:	f004 facd 	bl	8006ba0 <HAL_GPIO_Init>
}
 8002606:	e023      	b.n	8002650 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM14)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a19      	ldr	r2, [pc, #100]	@ (8002674 <HAL_TIM_MspPostInit+0x1b0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d11e      	bne.n	8002650 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002612:	4b12      	ldr	r3, [pc, #72]	@ (800265c <HAL_TIM_MspPostInit+0x198>)
 8002614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002618:	4a10      	ldr	r2, [pc, #64]	@ (800265c <HAL_TIM_MspPostInit+0x198>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002622:	4b0e      	ldr	r3, [pc, #56]	@ (800265c <HAL_TIM_MspPostInit+0x198>)
 8002624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002630:	2380      	movs	r3, #128	@ 0x80
 8002632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002634:	2302      	movs	r3, #2
 8002636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	2300      	movs	r3, #0
 800263e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002640:	2309      	movs	r3, #9
 8002642:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002644:	f107 031c 	add.w	r3, r7, #28
 8002648:	4619      	mov	r1, r3
 800264a:	4806      	ldr	r0, [pc, #24]	@ (8002664 <HAL_TIM_MspPostInit+0x1a0>)
 800264c:	f004 faa8 	bl	8006ba0 <HAL_GPIO_Init>
}
 8002650:	bf00      	nop
 8002652:	3730      	adds	r7, #48	@ 0x30
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40010000 	.word	0x40010000
 800265c:	58024400 	.word	0x58024400
 8002660:	58021000 	.word	0x58021000
 8002664:	58020000 	.word	0x58020000
 8002668:	40000400 	.word	0x40000400
 800266c:	58020400 	.word	0x58020400
 8002670:	40000800 	.word	0x40000800
 8002674:	40002000 	.word	0x40002000

08002678 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b0ba      	sub	sp, #232	@ 0xe8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002680:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002690:	f107 0310 	add.w	r3, r7, #16
 8002694:	22c0      	movs	r2, #192	@ 0xc0
 8002696:	2100      	movs	r1, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f014 fedf 	bl	801745c <memset>
  if(huart->Instance==USART1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a43      	ldr	r2, [pc, #268]	@ (80027b0 <HAL_UART_MspInit+0x138>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d17e      	bne.n	80027a6 <HAL_UART_MspInit+0x12e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026a8:	f04f 0201 	mov.w	r2, #1
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80026b4:	2300      	movs	r3, #0
 80026b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026ba:	f107 0310 	add.w	r3, r7, #16
 80026be:	4618      	mov	r0, r3
 80026c0:	f00b f928 	bl	800d914 <HAL_RCCEx_PeriphCLKConfig>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80026ca:	f7ff fb41 	bl	8001d50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ce:	4b39      	ldr	r3, [pc, #228]	@ (80027b4 <HAL_UART_MspInit+0x13c>)
 80026d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026d4:	4a37      	ldr	r2, [pc, #220]	@ (80027b4 <HAL_UART_MspInit+0x13c>)
 80026d6:	f043 0310 	orr.w	r3, r3, #16
 80026da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026de:	4b35      	ldr	r3, [pc, #212]	@ (80027b4 <HAL_UART_MspInit+0x13c>)
 80026e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ec:	4b31      	ldr	r3, [pc, #196]	@ (80027b4 <HAL_UART_MspInit+0x13c>)
 80026ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026f2:	4a30      	ldr	r2, [pc, #192]	@ (80027b4 <HAL_UART_MspInit+0x13c>)
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026fc:	4b2d      	ldr	r3, [pc, #180]	@ (80027b4 <HAL_UART_MspInit+0x13c>)
 80026fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800270a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800270e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	2302      	movs	r3, #2
 8002714:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	2300      	movs	r3, #0
 8002720:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002724:	2304      	movs	r3, #4
 8002726:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800272e:	4619      	mov	r1, r3
 8002730:	4821      	ldr	r0, [pc, #132]	@ (80027b8 <HAL_UART_MspInit+0x140>)
 8002732:	f004 fa35 	bl	8006ba0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 8002736:	4b21      	ldr	r3, [pc, #132]	@ (80027bc <HAL_UART_MspInit+0x144>)
 8002738:	4a21      	ldr	r2, [pc, #132]	@ (80027c0 <HAL_UART_MspInit+0x148>)
 800273a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800273c:	4b1f      	ldr	r3, [pc, #124]	@ (80027bc <HAL_UART_MspInit+0x144>)
 800273e:	2229      	movs	r2, #41	@ 0x29
 8002740:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002742:	4b1e      	ldr	r3, [pc, #120]	@ (80027bc <HAL_UART_MspInit+0x144>)
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002748:	4b1c      	ldr	r3, [pc, #112]	@ (80027bc <HAL_UART_MspInit+0x144>)
 800274a:	2200      	movs	r2, #0
 800274c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800274e:	4b1b      	ldr	r3, [pc, #108]	@ (80027bc <HAL_UART_MspInit+0x144>)
 8002750:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002754:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002756:	4b19      	ldr	r3, [pc, #100]	@ (80027bc <HAL_UART_MspInit+0x144>)
 8002758:	2200      	movs	r2, #0
 800275a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800275c:	4b17      	ldr	r3, [pc, #92]	@ (80027bc <HAL_UART_MspInit+0x144>)
 800275e:	2200      	movs	r2, #0
 8002760:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002762:	4b16      	ldr	r3, [pc, #88]	@ (80027bc <HAL_UART_MspInit+0x144>)
 8002764:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002768:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800276a:	4b14      	ldr	r3, [pc, #80]	@ (80027bc <HAL_UART_MspInit+0x144>)
 800276c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002770:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002772:	4b12      	ldr	r3, [pc, #72]	@ (80027bc <HAL_UART_MspInit+0x144>)
 8002774:	2200      	movs	r2, #0
 8002776:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002778:	4810      	ldr	r0, [pc, #64]	@ (80027bc <HAL_UART_MspInit+0x144>)
 800277a:	f000 ff17 	bl	80035ac <HAL_DMA_Init>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8002784:	f7ff fae4 	bl	8001d50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a0c      	ldr	r2, [pc, #48]	@ (80027bc <HAL_UART_MspInit+0x144>)
 800278c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002790:	4a0a      	ldr	r2, [pc, #40]	@ (80027bc <HAL_UART_MspInit+0x144>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002796:	2200      	movs	r2, #0
 8002798:	2100      	movs	r1, #0
 800279a:	2025      	movs	r0, #37	@ 0x25
 800279c:	f000 fb6d 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027a0:	2025      	movs	r0, #37	@ 0x25
 80027a2:	f000 fb84 	bl	8002eae <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80027a6:	bf00      	nop
 80027a8:	37e8      	adds	r7, #232	@ 0xe8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40011000 	.word	0x40011000
 80027b4:	58024400 	.word	0x58024400
 80027b8:	58020400 	.word	0x58020400
 80027bc:	240006b8 	.word	0x240006b8
 80027c0:	40020410 	.word	0x40020410

080027c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027c8:	bf00      	nop
 80027ca:	e7fd      	b.n	80027c8 <NMI_Handler+0x4>

080027cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027d0:	bf00      	nop
 80027d2:	e7fd      	b.n	80027d0 <HardFault_Handler+0x4>

080027d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027d8:	bf00      	nop
 80027da:	e7fd      	b.n	80027d8 <MemManage_Handler+0x4>

080027dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027e0:	bf00      	nop
 80027e2:	e7fd      	b.n	80027e0 <BusFault_Handler+0x4>

080027e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027e8:	bf00      	nop
 80027ea:	e7fd      	b.n	80027e8 <UsageFault_Handler+0x4>

080027ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800281a:	f000 fa03 	bl	8002c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002828:	4802      	ldr	r0, [pc, #8]	@ (8002834 <DMA1_Stream0_IRQHandler+0x10>)
 800282a:	f002 f9e9 	bl	8004c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	240001d8 	.word	0x240001d8

08002838 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800283c:	4802      	ldr	r0, [pc, #8]	@ (8002848 <I2C2_EV_IRQHandler+0x10>)
 800283e:	f004 fe23 	bl	8007488 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	24000250 	.word	0x24000250

0800284c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002850:	4802      	ldr	r0, [pc, #8]	@ (800285c <I2C2_ER_IRQHandler+0x10>)
 8002852:	f004 fe33 	bl	80074bc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	24000250 	.word	0x24000250

08002860 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002864:	4802      	ldr	r0, [pc, #8]	@ (8002870 <USART1_IRQHandler+0x10>)
 8002866:	f00e fbc9 	bl	8010ffc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	24000624 	.word	0x24000624

08002874 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002878:	4802      	ldr	r0, [pc, #8]	@ (8002884 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800287a:	f00d f9eb 	bl	800fc54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	240005d8 	.word	0x240005d8

08002888 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  NetworkTimeout();
 800288c:	f7fe fd68 	bl	8001360 <NetworkTimeout>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002890:	4802      	ldr	r0, [pc, #8]	@ (800289c <TIM5_IRQHandler+0x14>)
 8002892:	f00d f9df 	bl	800fc54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	2400058c 	.word	0x2400058c

080028a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80028a4:	4802      	ldr	r0, [pc, #8]	@ (80028b0 <DMA2_Stream0_IRQHandler+0x10>)
 80028a6:	f002 f9ab 	bl	8004c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	240006b8 	.word	0x240006b8

080028b4 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80028b8:	4802      	ldr	r0, [pc, #8]	@ (80028c4 <DCMI_IRQHandler+0x10>)
 80028ba:	f000 fd27 	bl	800330c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	24000188 	.word	0x24000188

080028c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80028cc:	4802      	ldr	r0, [pc, #8]	@ (80028d8 <OTG_FS_IRQHandler+0x10>)
 80028ce:	f008 fe92 	bl	800b5f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	24027090 	.word	0x24027090

080028dc <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 80028e0:	4802      	ldr	r0, [pc, #8]	@ (80028ec <JPEG_IRQHandler+0x10>)
 80028e2:	f006 fbae 	bl	8009042 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	240002a4 	.word	0x240002a4

080028f0 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 80028f4:	4803      	ldr	r0, [pc, #12]	@ (8002904 <MDMA_IRQHandler+0x14>)
 80028f6:	f008 fae1 	bl	800aebc <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 80028fa:	4803      	ldr	r0, [pc, #12]	@ (8002908 <MDMA_IRQHandler+0x18>)
 80028fc:	f008 fade 	bl	800aebc <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}
 8002904:	240002fc 	.word	0x240002fc
 8002908:	24000368 	.word	0x24000368

0800290c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002914:	4a14      	ldr	r2, [pc, #80]	@ (8002968 <_sbrk+0x5c>)
 8002916:	4b15      	ldr	r3, [pc, #84]	@ (800296c <_sbrk+0x60>)
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002920:	4b13      	ldr	r3, [pc, #76]	@ (8002970 <_sbrk+0x64>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002928:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <_sbrk+0x64>)
 800292a:	4a12      	ldr	r2, [pc, #72]	@ (8002974 <_sbrk+0x68>)
 800292c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800292e:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <_sbrk+0x64>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	429a      	cmp	r2, r3
 800293a:	d207      	bcs.n	800294c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800293c:	f014 fda6 	bl	801748c <__errno>
 8002940:	4603      	mov	r3, r0
 8002942:	220c      	movs	r2, #12
 8002944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002946:	f04f 33ff 	mov.w	r3, #4294967295
 800294a:	e009      	b.n	8002960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800294c:	4b08      	ldr	r3, [pc, #32]	@ (8002970 <_sbrk+0x64>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002952:	4b07      	ldr	r3, [pc, #28]	@ (8002970 <_sbrk+0x64>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	4a05      	ldr	r2, [pc, #20]	@ (8002970 <_sbrk+0x64>)
 800295c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800295e:	68fb      	ldr	r3, [r7, #12]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	24080000 	.word	0x24080000
 800296c:	00000400 	.word	0x00000400
 8002970:	24025ba4 	.word	0x24025ba4
 8002974:	240278e0 	.word	0x240278e0

08002978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800297c:	4b43      	ldr	r3, [pc, #268]	@ (8002a8c <SystemInit+0x114>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002982:	4a42      	ldr	r2, [pc, #264]	@ (8002a8c <SystemInit+0x114>)
 8002984:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002988:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800298c:	4b40      	ldr	r3, [pc, #256]	@ (8002a90 <SystemInit+0x118>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	2b06      	cmp	r3, #6
 8002996:	d807      	bhi.n	80029a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002998:	4b3d      	ldr	r3, [pc, #244]	@ (8002a90 <SystemInit+0x118>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f023 030f 	bic.w	r3, r3, #15
 80029a0:	4a3b      	ldr	r2, [pc, #236]	@ (8002a90 <SystemInit+0x118>)
 80029a2:	f043 0307 	orr.w	r3, r3, #7
 80029a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80029a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002a94 <SystemInit+0x11c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a39      	ldr	r2, [pc, #228]	@ (8002a94 <SystemInit+0x11c>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80029b4:	4b37      	ldr	r3, [pc, #220]	@ (8002a94 <SystemInit+0x11c>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80029ba:	4b36      	ldr	r3, [pc, #216]	@ (8002a94 <SystemInit+0x11c>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	4935      	ldr	r1, [pc, #212]	@ (8002a94 <SystemInit+0x11c>)
 80029c0:	4b35      	ldr	r3, [pc, #212]	@ (8002a98 <SystemInit+0x120>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80029c6:	4b32      	ldr	r3, [pc, #200]	@ (8002a90 <SystemInit+0x118>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80029d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002a90 <SystemInit+0x118>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 030f 	bic.w	r3, r3, #15
 80029da:	4a2d      	ldr	r2, [pc, #180]	@ (8002a90 <SystemInit+0x118>)
 80029dc:	f043 0307 	orr.w	r3, r3, #7
 80029e0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80029e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002a94 <SystemInit+0x11c>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80029e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002a94 <SystemInit+0x11c>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80029ee:	4b29      	ldr	r3, [pc, #164]	@ (8002a94 <SystemInit+0x11c>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80029f4:	4b27      	ldr	r3, [pc, #156]	@ (8002a94 <SystemInit+0x11c>)
 80029f6:	4a29      	ldr	r2, [pc, #164]	@ (8002a9c <SystemInit+0x124>)
 80029f8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80029fa:	4b26      	ldr	r3, [pc, #152]	@ (8002a94 <SystemInit+0x11c>)
 80029fc:	4a28      	ldr	r2, [pc, #160]	@ (8002aa0 <SystemInit+0x128>)
 80029fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002a00:	4b24      	ldr	r3, [pc, #144]	@ (8002a94 <SystemInit+0x11c>)
 8002a02:	4a28      	ldr	r2, [pc, #160]	@ (8002aa4 <SystemInit+0x12c>)
 8002a04:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002a06:	4b23      	ldr	r3, [pc, #140]	@ (8002a94 <SystemInit+0x11c>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002a0c:	4b21      	ldr	r3, [pc, #132]	@ (8002a94 <SystemInit+0x11c>)
 8002a0e:	4a25      	ldr	r2, [pc, #148]	@ (8002aa4 <SystemInit+0x12c>)
 8002a10:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002a12:	4b20      	ldr	r3, [pc, #128]	@ (8002a94 <SystemInit+0x11c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002a18:	4b1e      	ldr	r3, [pc, #120]	@ (8002a94 <SystemInit+0x11c>)
 8002a1a:	4a22      	ldr	r2, [pc, #136]	@ (8002aa4 <SystemInit+0x12c>)
 8002a1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a94 <SystemInit+0x11c>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a24:	4b1b      	ldr	r3, [pc, #108]	@ (8002a94 <SystemInit+0x11c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a1a      	ldr	r2, [pc, #104]	@ (8002a94 <SystemInit+0x11c>)
 8002a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a30:	4b18      	ldr	r3, [pc, #96]	@ (8002a94 <SystemInit+0x11c>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002a36:	4b1c      	ldr	r3, [pc, #112]	@ (8002aa8 <SystemInit+0x130>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002aac <SystemInit+0x134>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a42:	d202      	bcs.n	8002a4a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002a44:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab0 <SystemInit+0x138>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002a4a:	4b12      	ldr	r3, [pc, #72]	@ (8002a94 <SystemInit+0x11c>)
 8002a4c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002a50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d113      	bne.n	8002a80 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002a58:	4b0e      	ldr	r3, [pc, #56]	@ (8002a94 <SystemInit+0x11c>)
 8002a5a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002a5e:	4a0d      	ldr	r2, [pc, #52]	@ (8002a94 <SystemInit+0x11c>)
 8002a60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a64:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002a68:	4b12      	ldr	r3, [pc, #72]	@ (8002ab4 <SystemInit+0x13c>)
 8002a6a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002a6e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002a70:	4b08      	ldr	r3, [pc, #32]	@ (8002a94 <SystemInit+0x11c>)
 8002a72:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002a76:	4a07      	ldr	r2, [pc, #28]	@ (8002a94 <SystemInit+0x11c>)
 8002a78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a7c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	e000ed00 	.word	0xe000ed00
 8002a90:	52002000 	.word	0x52002000
 8002a94:	58024400 	.word	0x58024400
 8002a98:	eaf6ed7f 	.word	0xeaf6ed7f
 8002a9c:	02020200 	.word	0x02020200
 8002aa0:	01ff0000 	.word	0x01ff0000
 8002aa4:	01010280 	.word	0x01010280
 8002aa8:	5c001000 	.word	0x5c001000
 8002aac:	ffff0000 	.word	0xffff0000
 8002ab0:	51008108 	.word	0x51008108
 8002ab4:	52004000 	.word	0x52004000

08002ab8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002abc:	4b09      	ldr	r3, [pc, #36]	@ (8002ae4 <ExitRun0Mode+0x2c>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	4a08      	ldr	r2, [pc, #32]	@ (8002ae4 <ExitRun0Mode+0x2c>)
 8002ac2:	f043 0302 	orr.w	r3, r3, #2
 8002ac6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002ac8:	bf00      	nop
 8002aca:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <ExitRun0Mode+0x2c>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f9      	beq.n	8002aca <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002ad6:	bf00      	nop
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	58024800 	.word	0x58024800

08002ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002ae8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002b24 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002aec:	f7ff ffe4 	bl	8002ab8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002af0:	f7ff ff42 	bl	8002978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002af4:	480c      	ldr	r0, [pc, #48]	@ (8002b28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002af6:	490d      	ldr	r1, [pc, #52]	@ (8002b2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002af8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002afc:	e002      	b.n	8002b04 <LoopCopyDataInit>

08002afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b02:	3304      	adds	r3, #4

08002b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b08:	d3f9      	bcc.n	8002afe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b0c:	4c0a      	ldr	r4, [pc, #40]	@ (8002b38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b10:	e001      	b.n	8002b16 <LoopFillZerobss>

08002b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b14:	3204      	adds	r2, #4

08002b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b18:	d3fb      	bcc.n	8002b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b1a:	f014 fcbd 	bl	8017498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b1e:	f7fd fde3 	bl	80006e8 <main>
  bx  lr
 8002b22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b24:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002b28:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002b2c:	2400016c 	.word	0x2400016c
  ldr r2, =_sidata
 8002b30:	08018104 	.word	0x08018104
  ldr r2, =_sbss
 8002b34:	2400016c 	.word	0x2400016c
  ldr r4, =_ebss
 8002b38:	240278dc 	.word	0x240278dc

08002b3c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b3c:	e7fe      	b.n	8002b3c <ADC3_IRQHandler>
	...

08002b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b46:	2003      	movs	r0, #3
 8002b48:	f000 f98c 	bl	8002e64 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b4c:	f00a fd0c 	bl	800d568 <HAL_RCC_GetSysClockFreq>
 8002b50:	4602      	mov	r2, r0
 8002b52:	4b15      	ldr	r3, [pc, #84]	@ (8002ba8 <HAL_Init+0x68>)
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	0a1b      	lsrs	r3, r3, #8
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	4913      	ldr	r1, [pc, #76]	@ (8002bac <HAL_Init+0x6c>)
 8002b5e:	5ccb      	ldrb	r3, [r1, r3]
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
 8002b68:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba8 <HAL_Init+0x68>)
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	4a0e      	ldr	r2, [pc, #56]	@ (8002bac <HAL_Init+0x6c>)
 8002b74:	5cd3      	ldrb	r3, [r2, r3]
 8002b76:	f003 031f 	and.w	r3, r3, #31
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b80:	4a0b      	ldr	r2, [pc, #44]	@ (8002bb0 <HAL_Init+0x70>)
 8002b82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b84:	4a0b      	ldr	r2, [pc, #44]	@ (8002bb4 <HAL_Init+0x74>)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b8a:	200f      	movs	r0, #15
 8002b8c:	f000 f814 	bl	8002bb8 <HAL_InitTick>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e002      	b.n	8002ba0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b9a:	f7ff f8df 	bl	8001d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	58024400 	.word	0x58024400
 8002bac:	08017e20 	.word	0x08017e20
 8002bb0:	2400001c 	.word	0x2400001c
 8002bb4:	24000018 	.word	0x24000018

08002bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002bc0:	4b15      	ldr	r3, [pc, #84]	@ (8002c18 <HAL_InitTick+0x60>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e021      	b.n	8002c10 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002bcc:	4b13      	ldr	r3, [pc, #76]	@ (8002c1c <HAL_InitTick+0x64>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b11      	ldr	r3, [pc, #68]	@ (8002c18 <HAL_InitTick+0x60>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f971 	bl	8002eca <HAL_SYSTICK_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e00e      	b.n	8002c10 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b0f      	cmp	r3, #15
 8002bf6:	d80a      	bhi.n	8002c0e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	f000 f93b 	bl	8002e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c04:	4a06      	ldr	r2, [pc, #24]	@ (8002c20 <HAL_InitTick+0x68>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	24000024 	.word	0x24000024
 8002c1c:	24000018 	.word	0x24000018
 8002c20:	24000020 	.word	0x24000020

08002c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c28:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <HAL_IncTick+0x20>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <HAL_IncTick+0x24>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4413      	add	r3, r2
 8002c34:	4a04      	ldr	r2, [pc, #16]	@ (8002c48 <HAL_IncTick+0x24>)
 8002c36:	6013      	str	r3, [r2, #0]
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	24000024 	.word	0x24000024
 8002c48:	24025ba8 	.word	0x24025ba8

08002c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c50:	4b03      	ldr	r3, [pc, #12]	@ (8002c60 <HAL_GetTick+0x14>)
 8002c52:	681b      	ldr	r3, [r3, #0]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	24025ba8 	.word	0x24025ba8

08002c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c6c:	f7ff ffee 	bl	8002c4c <HAL_GetTick>
 8002c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7c:	d005      	beq.n	8002c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca8 <HAL_Delay+0x44>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4413      	add	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c8a:	bf00      	nop
 8002c8c:	f7ff ffde 	bl	8002c4c <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d8f7      	bhi.n	8002c8c <HAL_Delay+0x28>
  {
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	24000024 	.word	0x24000024

08002cac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002cb0:	4b03      	ldr	r3, [pc, #12]	@ (8002cc0 <HAL_GetREVID+0x14>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	0c1b      	lsrs	r3, r3, #16
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	5c001000 	.word	0x5c001000

08002cc4 <__NVIC_SetPriorityGrouping>:
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d04 <__NVIC_SetPriorityGrouping+0x40>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cec:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <__NVIC_SetPriorityGrouping+0x44>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cf2:	4a04      	ldr	r2, [pc, #16]	@ (8002d04 <__NVIC_SetPriorityGrouping+0x40>)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	60d3      	str	r3, [r2, #12]
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000ed00 	.word	0xe000ed00
 8002d08:	05fa0000 	.word	0x05fa0000

08002d0c <__NVIC_GetPriorityGrouping>:
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d10:	4b04      	ldr	r3, [pc, #16]	@ (8002d24 <__NVIC_GetPriorityGrouping+0x18>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	0a1b      	lsrs	r3, r3, #8
 8002d16:	f003 0307 	and.w	r3, r3, #7
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <__NVIC_EnableIRQ>:
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	db0b      	blt.n	8002d52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	4907      	ldr	r1, [pc, #28]	@ (8002d60 <__NVIC_EnableIRQ+0x38>)
 8002d42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	2001      	movs	r0, #1
 8002d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	e000e100 	.word	0xe000e100

08002d64 <__NVIC_SetPriority>:
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	6039      	str	r1, [r7, #0]
 8002d6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	db0a      	blt.n	8002d8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	490c      	ldr	r1, [pc, #48]	@ (8002db0 <__NVIC_SetPriority+0x4c>)
 8002d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d82:	0112      	lsls	r2, r2, #4
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	440b      	add	r3, r1
 8002d88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002d8c:	e00a      	b.n	8002da4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	4908      	ldr	r1, [pc, #32]	@ (8002db4 <__NVIC_SetPriority+0x50>)
 8002d94:	88fb      	ldrh	r3, [r7, #6]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	3b04      	subs	r3, #4
 8002d9c:	0112      	lsls	r2, r2, #4
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	440b      	add	r3, r1
 8002da2:	761a      	strb	r2, [r3, #24]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000e100 	.word	0xe000e100
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <NVIC_EncodePriority>:
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	@ 0x24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f1c3 0307 	rsb	r3, r3, #7
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	bf28      	it	cs
 8002dd6:	2304      	movcs	r3, #4
 8002dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d902      	bls.n	8002de8 <NVIC_EncodePriority+0x30>
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3b03      	subs	r3, #3
 8002de6:	e000      	b.n	8002dea <NVIC_EncodePriority+0x32>
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	f04f 32ff 	mov.w	r2, #4294967295
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43da      	mvns	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e00:	f04f 31ff 	mov.w	r1, #4294967295
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	43d9      	mvns	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e10:	4313      	orrs	r3, r2
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3724      	adds	r7, #36	@ 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e30:	d301      	bcc.n	8002e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e32:	2301      	movs	r3, #1
 8002e34:	e00f      	b.n	8002e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e36:	4a0a      	ldr	r2, [pc, #40]	@ (8002e60 <SysTick_Config+0x40>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e3e:	210f      	movs	r1, #15
 8002e40:	f04f 30ff 	mov.w	r0, #4294967295
 8002e44:	f7ff ff8e 	bl	8002d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e48:	4b05      	ldr	r3, [pc, #20]	@ (8002e60 <SysTick_Config+0x40>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e4e:	4b04      	ldr	r3, [pc, #16]	@ (8002e60 <SysTick_Config+0x40>)
 8002e50:	2207      	movs	r2, #7
 8002e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	e000e010 	.word	0xe000e010

08002e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff ff29 	bl	8002cc4 <__NVIC_SetPriorityGrouping>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b086      	sub	sp, #24
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4603      	mov	r3, r0
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e88:	f7ff ff40 	bl	8002d0c <__NVIC_GetPriorityGrouping>
 8002e8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	68b9      	ldr	r1, [r7, #8]
 8002e92:	6978      	ldr	r0, [r7, #20]
 8002e94:	f7ff ff90 	bl	8002db8 <NVIC_EncodePriority>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff5f 	bl	8002d64 <__NVIC_SetPriority>
}
 8002ea6:	bf00      	nop
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff33 	bl	8002d28 <__NVIC_EnableIRQ>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff ffa4 	bl	8002e20 <SysTick_Config>
 8002ed8:	4603      	mov	r3, r0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002ee8:	f3bf 8f5f 	dmb	sy
}
 8002eec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002eee:	4b07      	ldr	r3, [pc, #28]	@ (8002f0c <HAL_MPU_Disable+0x28>)
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef2:	4a06      	ldr	r2, [pc, #24]	@ (8002f0c <HAL_MPU_Disable+0x28>)
 8002ef4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ef8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002efa:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <HAL_MPU_Disable+0x2c>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	605a      	str	r2, [r3, #4]
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	e000ed00 	.word	0xe000ed00
 8002f10:	e000ed90 	.word	0xe000ed90

08002f14 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002f4c <HAL_MPU_Enable+0x38>)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002f26:	4b0a      	ldr	r3, [pc, #40]	@ (8002f50 <HAL_MPU_Enable+0x3c>)
 8002f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2a:	4a09      	ldr	r2, [pc, #36]	@ (8002f50 <HAL_MPU_Enable+0x3c>)
 8002f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f30:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002f32:	f3bf 8f4f 	dsb	sy
}
 8002f36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f38:	f3bf 8f6f 	isb	sy
}
 8002f3c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	e000ed90 	.word	0xe000ed90
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	785a      	ldrb	r2, [r3, #1]
 8002f60:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd0 <HAL_MPU_ConfigRegion+0x7c>)
 8002f62:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002f64:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd0 <HAL_MPU_ConfigRegion+0x7c>)
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	4a19      	ldr	r2, [pc, #100]	@ (8002fd0 <HAL_MPU_ConfigRegion+0x7c>)
 8002f6a:	f023 0301 	bic.w	r3, r3, #1
 8002f6e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002f70:	4a17      	ldr	r2, [pc, #92]	@ (8002fd0 <HAL_MPU_ConfigRegion+0x7c>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	7b1b      	ldrb	r3, [r3, #12]
 8002f7c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	7adb      	ldrb	r3, [r3, #11]
 8002f82:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7a9b      	ldrb	r3, [r3, #10]
 8002f8a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7b5b      	ldrb	r3, [r3, #13]
 8002f92:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002f94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	7b9b      	ldrb	r3, [r3, #14]
 8002f9a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7bdb      	ldrb	r3, [r3, #15]
 8002fa2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002fa4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	7a5b      	ldrb	r3, [r3, #9]
 8002faa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002fac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	7a1b      	ldrb	r3, [r3, #8]
 8002fb2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002fb4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	7812      	ldrb	r2, [r2, #0]
 8002fba:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002fbc:	4a04      	ldr	r2, [pc, #16]	@ (8002fd0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002fbe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002fc0:	6113      	str	r3, [r2, #16]
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	e000ed90 	.word	0xe000ed90

08002fd4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e069      	b.n	80030ba <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d102      	bne.n	8002ff8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fe fecc 	bl	8001d90 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6819      	ldr	r1, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4b2a      	ldr	r3, [pc, #168]	@ (80030c4 <HAL_DCMI_Init+0xf0>)
 800301a:	400b      	ands	r3, r1
 800301c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6819      	ldr	r1, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003032:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800303e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800304a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003056:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003062:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b10      	cmp	r3, #16
 8003072:	d112      	bne.n	800309a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	7f1b      	ldrb	r3, [r3, #28]
 8003078:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	7f5b      	ldrb	r3, [r3, #29]
 800307e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003080:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	7f9b      	ldrb	r3, [r3, #30]
 8003086:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003088:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	7fdb      	ldrb	r3, [r3, #31]
 8003090:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003096:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003098:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 021e 	orr.w	r2, r2, #30
 80030a8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	ffe0f007 	.word	0xffe0f007

080030c8 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
 80030d4:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_DCMI_Start_DMA+0x1c>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e0ab      	b.n	800323c <HAL_DCMI_Start_DMA+0x174>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003102:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0202 	bic.w	r2, r2, #2
 8003112:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6819      	ldr	r1, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	430a      	orrs	r2, r1
 8003122:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003128:	4a46      	ldr	r2, [pc, #280]	@ (8003244 <HAL_DCMI_Start_DMA+0x17c>)
 800312a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003130:	4a45      	ldr	r2, [pc, #276]	@ (8003248 <HAL_DCMI_Start_DMA+0x180>)
 8003132:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003138:	2200      	movs	r2, #0
 800313a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800315a:	d219      	bcs.n	8003190 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3328      	adds	r3, #40	@ 0x28
 8003166:	4619      	mov	r1, r3
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	f000 fd7a 	bl	8003c64 <HAL_DMA_Start_IT>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d055      	beq.n	8003222 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2240      	movs	r2, #64	@ 0x40
 800317a:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e055      	b.n	800323c <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003194:	4a2b      	ldr	r2, [pc, #172]	@ (8003244 <HAL_DCMI_Start_DMA+0x17c>)
 8003196:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 80031aa:	e009      	b.n	80031c0 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b0:	085a      	lsrs	r2, r3, #1
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ba:	005a      	lsls	r2, r3, #1
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031c8:	d2f0      	bcs.n	80031ac <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ce:	1e9a      	subs	r2, r3, #2
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	4413      	add	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3328      	adds	r3, #40	@ 0x28
 80031f2:	4619      	mov	r1, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	f003 f81f 	bl	8006240 <HAL_DMAEx_MultiBufferStart_IT>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00c      	beq.n	8003222 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2240      	movs	r2, #64	@ 0x40
 800320c:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e00c      	b.n	800323c <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f042 0201 	orr.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	0800344d 	.word	0x0800344d
 8003248:	08003573 	.word	0x08003573

0800324c <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8003254:	4b2b      	ldr	r3, [pc, #172]	@ (8003304 <HAL_DCMI_Stop+0xb8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a2b      	ldr	r2, [pc, #172]	@ (8003308 <HAL_DCMI_Stop+0xbc>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	0a5b      	lsrs	r3, r3, #9
 8003260:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003264:	fb02 f303 	mul.w	r3, r2, r3
 8003268:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_DCMI_Stop+0x30>
 8003278:	2302      	movs	r3, #2
 800327a:	e03f      	b.n	80032fc <HAL_DCMI_Stop+0xb0>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0201 	bic.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3b01      	subs	r3, #1
 80032a0:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d108      	bne.n	80032ba <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ac:	f043 0220 	orr.w	r2, r3, #32
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	72fb      	strb	r3, [r7, #11]
      break;
 80032b8:	e006      	b.n	80032c8 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1e9      	bne.n	800329c <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032d6:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 ff2b 	bl	8004138 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 80032fa:	7afb      	ldrb	r3, [r7, #11]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	24000018 	.word	0x24000018
 8003308:	10624dd3 	.word	0x10624dd3

0800330c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b00      	cmp	r3, #0
 8003324:	d016      	beq.n	8003354 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2204      	movs	r2, #4
 800332c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003332:	f043 0202 	orr.w	r2, r3, #2
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2204      	movs	r2, #4
 800333e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003346:	4a31      	ldr	r2, [pc, #196]	@ (800340c <HAL_DCMI_IRQHandler+0x100>)
 8003348:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800334e:	4618      	mov	r0, r3
 8003350:	f001 fa10 	bl	8004774 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d016      	beq.n	800338c <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2202      	movs	r2, #2
 8003364:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800336a:	f043 0201 	orr.w	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2204      	movs	r2, #4
 8003376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800337e:	4a23      	ldr	r2, [pc, #140]	@ (800340c <HAL_DCMI_IRQHandler+0x100>)
 8003380:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003386:	4618      	mov	r0, r3
 8003388:	f001 f9f4 	bl	8004774 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b00      	cmp	r3, #0
 8003394:	d006      	beq.n	80033a4 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2210      	movs	r2, #16
 800339c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f840 	bl	8003424 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d006      	beq.n	80033bc <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2208      	movs	r2, #8
 80033b4:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7fe fa04 	bl	80017c4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d01d      	beq.n	8003402 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d107      	bne.n	80033e4 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 021e 	bic.w	r2, r2, #30
 80033e2:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0201 	bic.w	r2, r2, #1
 80033f2:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2201      	movs	r2, #1
 80033fa:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f81b 	bl	8003438 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	08003573 	.word	0x08003573

08003410 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003458:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345e:	2b00      	cmp	r3, #0
 8003460:	d043      	beq.n	80034ea <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800346e:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d118      	bne.n	80034ae <DCMI_DMAXferCplt+0x62>
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d015      	beq.n	80034ae <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003494:	00da      	lsls	r2, r3, #3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	4413      	add	r3, r2
 800349a:	2200      	movs	r2, #0
 800349c:	4619      	mov	r1, r3
 800349e:	f003 fa2d 	bl	80068fc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a6:	1e5a      	subs	r2, r3, #1
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80034ac:	e044      	b.n	8003538 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d13c      	bne.n	8003538 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d0:	00da      	lsls	r2, r3, #3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4413      	add	r3, r2
 80034d6:	2201      	movs	r2, #1
 80034d8:	4619      	mov	r1, r3
 80034da:	f003 fa0f 	bl	80068fc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e2:	1e5a      	subs	r2, r3, #1
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80034e8:	e026      	b.n	8003538 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d006      	beq.n	8003508 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003504:	60da      	str	r2, [r3, #12]
 8003506:	e017      	b.n	8003538 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10f      	bne.n	8003538 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351c:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003522:	0099      	lsls	r1, r3, #2
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	440a      	add	r2, r1
 800352e:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003540:	429a      	cmp	r2, r3
 8003542:	d112      	bne.n	800356a <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b02      	cmp	r3, #2
 8003560:	d103      	bne.n	800356a <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 800356a:	bf00      	nop
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b084      	sub	sp, #16
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800357e:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003586:	2b02      	cmp	r3, #2
 8003588:	d009      	beq.n	800359e <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003596:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f7ff ff36 	bl	8003410 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80035a4:	bf00      	nop
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80035b4:	f7ff fb4a 	bl	8002c4c <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e316      	b.n	8003bf2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a66      	ldr	r2, [pc, #408]	@ (8003764 <HAL_DMA_Init+0x1b8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d04a      	beq.n	8003664 <HAL_DMA_Init+0xb8>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a65      	ldr	r2, [pc, #404]	@ (8003768 <HAL_DMA_Init+0x1bc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d045      	beq.n	8003664 <HAL_DMA_Init+0xb8>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a63      	ldr	r2, [pc, #396]	@ (800376c <HAL_DMA_Init+0x1c0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d040      	beq.n	8003664 <HAL_DMA_Init+0xb8>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a62      	ldr	r2, [pc, #392]	@ (8003770 <HAL_DMA_Init+0x1c4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d03b      	beq.n	8003664 <HAL_DMA_Init+0xb8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a60      	ldr	r2, [pc, #384]	@ (8003774 <HAL_DMA_Init+0x1c8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d036      	beq.n	8003664 <HAL_DMA_Init+0xb8>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a5f      	ldr	r2, [pc, #380]	@ (8003778 <HAL_DMA_Init+0x1cc>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d031      	beq.n	8003664 <HAL_DMA_Init+0xb8>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a5d      	ldr	r2, [pc, #372]	@ (800377c <HAL_DMA_Init+0x1d0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d02c      	beq.n	8003664 <HAL_DMA_Init+0xb8>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a5c      	ldr	r2, [pc, #368]	@ (8003780 <HAL_DMA_Init+0x1d4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d027      	beq.n	8003664 <HAL_DMA_Init+0xb8>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a5a      	ldr	r2, [pc, #360]	@ (8003784 <HAL_DMA_Init+0x1d8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d022      	beq.n	8003664 <HAL_DMA_Init+0xb8>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a59      	ldr	r2, [pc, #356]	@ (8003788 <HAL_DMA_Init+0x1dc>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d01d      	beq.n	8003664 <HAL_DMA_Init+0xb8>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a57      	ldr	r2, [pc, #348]	@ (800378c <HAL_DMA_Init+0x1e0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d018      	beq.n	8003664 <HAL_DMA_Init+0xb8>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a56      	ldr	r2, [pc, #344]	@ (8003790 <HAL_DMA_Init+0x1e4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d013      	beq.n	8003664 <HAL_DMA_Init+0xb8>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a54      	ldr	r2, [pc, #336]	@ (8003794 <HAL_DMA_Init+0x1e8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00e      	beq.n	8003664 <HAL_DMA_Init+0xb8>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a53      	ldr	r2, [pc, #332]	@ (8003798 <HAL_DMA_Init+0x1ec>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d009      	beq.n	8003664 <HAL_DMA_Init+0xb8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a51      	ldr	r2, [pc, #324]	@ (800379c <HAL_DMA_Init+0x1f0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d004      	beq.n	8003664 <HAL_DMA_Init+0xb8>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a50      	ldr	r2, [pc, #320]	@ (80037a0 <HAL_DMA_Init+0x1f4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d101      	bne.n	8003668 <HAL_DMA_Init+0xbc>
 8003664:	2301      	movs	r3, #1
 8003666:	e000      	b.n	800366a <HAL_DMA_Init+0xbe>
 8003668:	2300      	movs	r3, #0
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 813b 	beq.w	80038e6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a37      	ldr	r2, [pc, #220]	@ (8003764 <HAL_DMA_Init+0x1b8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d04a      	beq.n	8003720 <HAL_DMA_Init+0x174>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a36      	ldr	r2, [pc, #216]	@ (8003768 <HAL_DMA_Init+0x1bc>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d045      	beq.n	8003720 <HAL_DMA_Init+0x174>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a34      	ldr	r2, [pc, #208]	@ (800376c <HAL_DMA_Init+0x1c0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d040      	beq.n	8003720 <HAL_DMA_Init+0x174>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a33      	ldr	r2, [pc, #204]	@ (8003770 <HAL_DMA_Init+0x1c4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d03b      	beq.n	8003720 <HAL_DMA_Init+0x174>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a31      	ldr	r2, [pc, #196]	@ (8003774 <HAL_DMA_Init+0x1c8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d036      	beq.n	8003720 <HAL_DMA_Init+0x174>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a30      	ldr	r2, [pc, #192]	@ (8003778 <HAL_DMA_Init+0x1cc>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d031      	beq.n	8003720 <HAL_DMA_Init+0x174>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a2e      	ldr	r2, [pc, #184]	@ (800377c <HAL_DMA_Init+0x1d0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d02c      	beq.n	8003720 <HAL_DMA_Init+0x174>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a2d      	ldr	r2, [pc, #180]	@ (8003780 <HAL_DMA_Init+0x1d4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d027      	beq.n	8003720 <HAL_DMA_Init+0x174>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003784 <HAL_DMA_Init+0x1d8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d022      	beq.n	8003720 <HAL_DMA_Init+0x174>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a2a      	ldr	r2, [pc, #168]	@ (8003788 <HAL_DMA_Init+0x1dc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d01d      	beq.n	8003720 <HAL_DMA_Init+0x174>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a28      	ldr	r2, [pc, #160]	@ (800378c <HAL_DMA_Init+0x1e0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d018      	beq.n	8003720 <HAL_DMA_Init+0x174>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a27      	ldr	r2, [pc, #156]	@ (8003790 <HAL_DMA_Init+0x1e4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d013      	beq.n	8003720 <HAL_DMA_Init+0x174>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a25      	ldr	r2, [pc, #148]	@ (8003794 <HAL_DMA_Init+0x1e8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00e      	beq.n	8003720 <HAL_DMA_Init+0x174>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a24      	ldr	r2, [pc, #144]	@ (8003798 <HAL_DMA_Init+0x1ec>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d009      	beq.n	8003720 <HAL_DMA_Init+0x174>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a22      	ldr	r2, [pc, #136]	@ (800379c <HAL_DMA_Init+0x1f0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d004      	beq.n	8003720 <HAL_DMA_Init+0x174>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a21      	ldr	r2, [pc, #132]	@ (80037a0 <HAL_DMA_Init+0x1f4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d108      	bne.n	8003732 <HAL_DMA_Init+0x186>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0201 	bic.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	e007      	b.n	8003742 <HAL_DMA_Init+0x196>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0201 	bic.w	r2, r2, #1
 8003740:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003742:	e02f      	b.n	80037a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003744:	f7ff fa82 	bl	8002c4c <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b05      	cmp	r3, #5
 8003750:	d928      	bls.n	80037a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2220      	movs	r2, #32
 8003756:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2203      	movs	r2, #3
 800375c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e246      	b.n	8003bf2 <HAL_DMA_Init+0x646>
 8003764:	40020010 	.word	0x40020010
 8003768:	40020028 	.word	0x40020028
 800376c:	40020040 	.word	0x40020040
 8003770:	40020058 	.word	0x40020058
 8003774:	40020070 	.word	0x40020070
 8003778:	40020088 	.word	0x40020088
 800377c:	400200a0 	.word	0x400200a0
 8003780:	400200b8 	.word	0x400200b8
 8003784:	40020410 	.word	0x40020410
 8003788:	40020428 	.word	0x40020428
 800378c:	40020440 	.word	0x40020440
 8003790:	40020458 	.word	0x40020458
 8003794:	40020470 	.word	0x40020470
 8003798:	40020488 	.word	0x40020488
 800379c:	400204a0 	.word	0x400204a0
 80037a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1c8      	bne.n	8003744 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4b83      	ldr	r3, [pc, #524]	@ (80039cc <HAL_DMA_Init+0x420>)
 80037be:	4013      	ands	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80037ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d107      	bne.n	8003808 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003800:	4313      	orrs	r3, r2
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	4313      	orrs	r3, r2
 8003806:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003808:	4b71      	ldr	r3, [pc, #452]	@ (80039d0 <HAL_DMA_Init+0x424>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4b71      	ldr	r3, [pc, #452]	@ (80039d4 <HAL_DMA_Init+0x428>)
 800380e:	4013      	ands	r3, r2
 8003810:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003814:	d328      	bcc.n	8003868 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b28      	cmp	r3, #40	@ 0x28
 800381c:	d903      	bls.n	8003826 <HAL_DMA_Init+0x27a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b2e      	cmp	r3, #46	@ 0x2e
 8003824:	d917      	bls.n	8003856 <HAL_DMA_Init+0x2aa>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b3e      	cmp	r3, #62	@ 0x3e
 800382c:	d903      	bls.n	8003836 <HAL_DMA_Init+0x28a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b42      	cmp	r3, #66	@ 0x42
 8003834:	d90f      	bls.n	8003856 <HAL_DMA_Init+0x2aa>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b46      	cmp	r3, #70	@ 0x46
 800383c:	d903      	bls.n	8003846 <HAL_DMA_Init+0x29a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b48      	cmp	r3, #72	@ 0x48
 8003844:	d907      	bls.n	8003856 <HAL_DMA_Init+0x2aa>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b4e      	cmp	r3, #78	@ 0x4e
 800384c:	d905      	bls.n	800385a <HAL_DMA_Init+0x2ae>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b52      	cmp	r3, #82	@ 0x52
 8003854:	d801      	bhi.n	800385a <HAL_DMA_Init+0x2ae>
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <HAL_DMA_Init+0x2b0>
 800385a:	2300      	movs	r3, #0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003866:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f023 0307 	bic.w	r3, r3, #7
 800387e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	2b04      	cmp	r3, #4
 8003890:	d117      	bne.n	80038c2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00e      	beq.n	80038c2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f002 fb41 	bl	8005f2c <DMA_CheckFifoParam>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2240      	movs	r2, #64	@ 0x40
 80038b4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e197      	b.n	8003bf2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f002 fa7c 	bl	8005dc8 <DMA_CalcBaseAndBitshift>
 80038d0:	4603      	mov	r3, r0
 80038d2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d8:	f003 031f 	and.w	r3, r3, #31
 80038dc:	223f      	movs	r2, #63	@ 0x3f
 80038de:	409a      	lsls	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	e0cd      	b.n	8003a82 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a3b      	ldr	r2, [pc, #236]	@ (80039d8 <HAL_DMA_Init+0x42c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d022      	beq.n	8003936 <HAL_DMA_Init+0x38a>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a39      	ldr	r2, [pc, #228]	@ (80039dc <HAL_DMA_Init+0x430>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d01d      	beq.n	8003936 <HAL_DMA_Init+0x38a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a38      	ldr	r2, [pc, #224]	@ (80039e0 <HAL_DMA_Init+0x434>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d018      	beq.n	8003936 <HAL_DMA_Init+0x38a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a36      	ldr	r2, [pc, #216]	@ (80039e4 <HAL_DMA_Init+0x438>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d013      	beq.n	8003936 <HAL_DMA_Init+0x38a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a35      	ldr	r2, [pc, #212]	@ (80039e8 <HAL_DMA_Init+0x43c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00e      	beq.n	8003936 <HAL_DMA_Init+0x38a>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a33      	ldr	r2, [pc, #204]	@ (80039ec <HAL_DMA_Init+0x440>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d009      	beq.n	8003936 <HAL_DMA_Init+0x38a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a32      	ldr	r2, [pc, #200]	@ (80039f0 <HAL_DMA_Init+0x444>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d004      	beq.n	8003936 <HAL_DMA_Init+0x38a>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a30      	ldr	r2, [pc, #192]	@ (80039f4 <HAL_DMA_Init+0x448>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d101      	bne.n	800393a <HAL_DMA_Init+0x38e>
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <HAL_DMA_Init+0x390>
 800393a:	2300      	movs	r3, #0
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8097 	beq.w	8003a70 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a24      	ldr	r2, [pc, #144]	@ (80039d8 <HAL_DMA_Init+0x42c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d021      	beq.n	8003990 <HAL_DMA_Init+0x3e4>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a22      	ldr	r2, [pc, #136]	@ (80039dc <HAL_DMA_Init+0x430>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d01c      	beq.n	8003990 <HAL_DMA_Init+0x3e4>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a21      	ldr	r2, [pc, #132]	@ (80039e0 <HAL_DMA_Init+0x434>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d017      	beq.n	8003990 <HAL_DMA_Init+0x3e4>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a1f      	ldr	r2, [pc, #124]	@ (80039e4 <HAL_DMA_Init+0x438>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d012      	beq.n	8003990 <HAL_DMA_Init+0x3e4>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a1e      	ldr	r2, [pc, #120]	@ (80039e8 <HAL_DMA_Init+0x43c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00d      	beq.n	8003990 <HAL_DMA_Init+0x3e4>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a1c      	ldr	r2, [pc, #112]	@ (80039ec <HAL_DMA_Init+0x440>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d008      	beq.n	8003990 <HAL_DMA_Init+0x3e4>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1b      	ldr	r2, [pc, #108]	@ (80039f0 <HAL_DMA_Init+0x444>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d003      	beq.n	8003990 <HAL_DMA_Init+0x3e4>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a19      	ldr	r2, [pc, #100]	@ (80039f4 <HAL_DMA_Init+0x448>)
 800398e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	4b13      	ldr	r3, [pc, #76]	@ (80039f8 <HAL_DMA_Init+0x44c>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b40      	cmp	r3, #64	@ 0x40
 80039b6:	d021      	beq.n	80039fc <HAL_DMA_Init+0x450>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b80      	cmp	r3, #128	@ 0x80
 80039be:	d102      	bne.n	80039c6 <HAL_DMA_Init+0x41a>
 80039c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80039c4:	e01b      	b.n	80039fe <HAL_DMA_Init+0x452>
 80039c6:	2300      	movs	r3, #0
 80039c8:	e019      	b.n	80039fe <HAL_DMA_Init+0x452>
 80039ca:	bf00      	nop
 80039cc:	fe10803f 	.word	0xfe10803f
 80039d0:	5c001000 	.word	0x5c001000
 80039d4:	ffff0000 	.word	0xffff0000
 80039d8:	58025408 	.word	0x58025408
 80039dc:	5802541c 	.word	0x5802541c
 80039e0:	58025430 	.word	0x58025430
 80039e4:	58025444 	.word	0x58025444
 80039e8:	58025458 	.word	0x58025458
 80039ec:	5802546c 	.word	0x5802546c
 80039f0:	58025480 	.word	0x58025480
 80039f4:	58025494 	.word	0x58025494
 80039f8:	fffe000f 	.word	0xfffe000f
 80039fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	68d2      	ldr	r2, [r2, #12]
 8003a02:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a2c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	4b6e      	ldr	r3, [pc, #440]	@ (8003bfc <HAL_DMA_Init+0x650>)
 8003a44:	4413      	add	r3, r2
 8003a46:	4a6e      	ldr	r2, [pc, #440]	@ (8003c00 <HAL_DMA_Init+0x654>)
 8003a48:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	009a      	lsls	r2, r3, #2
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f002 f9b7 	bl	8005dc8 <DMA_CalcBaseAndBitshift>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a62:	f003 031f 	and.w	r3, r3, #31
 8003a66:	2201      	movs	r2, #1
 8003a68:	409a      	lsls	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	e008      	b.n	8003a82 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2240      	movs	r2, #64	@ 0x40
 8003a74:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2203      	movs	r2, #3
 8003a7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e0b7      	b.n	8003bf2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a5f      	ldr	r2, [pc, #380]	@ (8003c04 <HAL_DMA_Init+0x658>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d072      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a5d      	ldr	r2, [pc, #372]	@ (8003c08 <HAL_DMA_Init+0x65c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d06d      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a5c      	ldr	r2, [pc, #368]	@ (8003c0c <HAL_DMA_Init+0x660>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d068      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a5a      	ldr	r2, [pc, #360]	@ (8003c10 <HAL_DMA_Init+0x664>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d063      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a59      	ldr	r2, [pc, #356]	@ (8003c14 <HAL_DMA_Init+0x668>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d05e      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a57      	ldr	r2, [pc, #348]	@ (8003c18 <HAL_DMA_Init+0x66c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d059      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a56      	ldr	r2, [pc, #344]	@ (8003c1c <HAL_DMA_Init+0x670>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d054      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a54      	ldr	r2, [pc, #336]	@ (8003c20 <HAL_DMA_Init+0x674>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d04f      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a53      	ldr	r2, [pc, #332]	@ (8003c24 <HAL_DMA_Init+0x678>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d04a      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a51      	ldr	r2, [pc, #324]	@ (8003c28 <HAL_DMA_Init+0x67c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d045      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a50      	ldr	r2, [pc, #320]	@ (8003c2c <HAL_DMA_Init+0x680>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d040      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a4e      	ldr	r2, [pc, #312]	@ (8003c30 <HAL_DMA_Init+0x684>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d03b      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a4d      	ldr	r2, [pc, #308]	@ (8003c34 <HAL_DMA_Init+0x688>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d036      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a4b      	ldr	r2, [pc, #300]	@ (8003c38 <HAL_DMA_Init+0x68c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d031      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a4a      	ldr	r2, [pc, #296]	@ (8003c3c <HAL_DMA_Init+0x690>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d02c      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a48      	ldr	r2, [pc, #288]	@ (8003c40 <HAL_DMA_Init+0x694>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d027      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a47      	ldr	r2, [pc, #284]	@ (8003c44 <HAL_DMA_Init+0x698>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d022      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a45      	ldr	r2, [pc, #276]	@ (8003c48 <HAL_DMA_Init+0x69c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d01d      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a44      	ldr	r2, [pc, #272]	@ (8003c4c <HAL_DMA_Init+0x6a0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d018      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a42      	ldr	r2, [pc, #264]	@ (8003c50 <HAL_DMA_Init+0x6a4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d013      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a41      	ldr	r2, [pc, #260]	@ (8003c54 <HAL_DMA_Init+0x6a8>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00e      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a3f      	ldr	r2, [pc, #252]	@ (8003c58 <HAL_DMA_Init+0x6ac>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d009      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a3e      	ldr	r2, [pc, #248]	@ (8003c5c <HAL_DMA_Init+0x6b0>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d004      	beq.n	8003b72 <HAL_DMA_Init+0x5c6>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a3c      	ldr	r2, [pc, #240]	@ (8003c60 <HAL_DMA_Init+0x6b4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d101      	bne.n	8003b76 <HAL_DMA_Init+0x5ca>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <HAL_DMA_Init+0x5cc>
 8003b76:	2300      	movs	r3, #0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d032      	beq.n	8003be2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f002 fa51 	bl	8006024 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b80      	cmp	r3, #128	@ 0x80
 8003b88:	d102      	bne.n	8003b90 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ba4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d010      	beq.n	8003bd0 <HAL_DMA_Init+0x624>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d80c      	bhi.n	8003bd0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f002 face 	bl	8006158 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	e008      	b.n	8003be2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	a7fdabf8 	.word	0xa7fdabf8
 8003c00:	cccccccd 	.word	0xcccccccd
 8003c04:	40020010 	.word	0x40020010
 8003c08:	40020028 	.word	0x40020028
 8003c0c:	40020040 	.word	0x40020040
 8003c10:	40020058 	.word	0x40020058
 8003c14:	40020070 	.word	0x40020070
 8003c18:	40020088 	.word	0x40020088
 8003c1c:	400200a0 	.word	0x400200a0
 8003c20:	400200b8 	.word	0x400200b8
 8003c24:	40020410 	.word	0x40020410
 8003c28:	40020428 	.word	0x40020428
 8003c2c:	40020440 	.word	0x40020440
 8003c30:	40020458 	.word	0x40020458
 8003c34:	40020470 	.word	0x40020470
 8003c38:	40020488 	.word	0x40020488
 8003c3c:	400204a0 	.word	0x400204a0
 8003c40:	400204b8 	.word	0x400204b8
 8003c44:	58025408 	.word	0x58025408
 8003c48:	5802541c 	.word	0x5802541c
 8003c4c:	58025430 	.word	0x58025430
 8003c50:	58025444 	.word	0x58025444
 8003c54:	58025458 	.word	0x58025458
 8003c58:	5802546c 	.word	0x5802546c
 8003c5c:	58025480 	.word	0x58025480
 8003c60:	58025494 	.word	0x58025494

08003c64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e226      	b.n	80040ce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_DMA_Start_IT+0x2a>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e21f      	b.n	80040ce <HAL_DMA_Start_IT+0x46a>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	f040 820a 	bne.w	80040b8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a68      	ldr	r2, [pc, #416]	@ (8003e58 <HAL_DMA_Start_IT+0x1f4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d04a      	beq.n	8003d52 <HAL_DMA_Start_IT+0xee>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a66      	ldr	r2, [pc, #408]	@ (8003e5c <HAL_DMA_Start_IT+0x1f8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d045      	beq.n	8003d52 <HAL_DMA_Start_IT+0xee>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a65      	ldr	r2, [pc, #404]	@ (8003e60 <HAL_DMA_Start_IT+0x1fc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d040      	beq.n	8003d52 <HAL_DMA_Start_IT+0xee>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a63      	ldr	r2, [pc, #396]	@ (8003e64 <HAL_DMA_Start_IT+0x200>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d03b      	beq.n	8003d52 <HAL_DMA_Start_IT+0xee>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a62      	ldr	r2, [pc, #392]	@ (8003e68 <HAL_DMA_Start_IT+0x204>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d036      	beq.n	8003d52 <HAL_DMA_Start_IT+0xee>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a60      	ldr	r2, [pc, #384]	@ (8003e6c <HAL_DMA_Start_IT+0x208>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d031      	beq.n	8003d52 <HAL_DMA_Start_IT+0xee>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a5f      	ldr	r2, [pc, #380]	@ (8003e70 <HAL_DMA_Start_IT+0x20c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d02c      	beq.n	8003d52 <HAL_DMA_Start_IT+0xee>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a5d      	ldr	r2, [pc, #372]	@ (8003e74 <HAL_DMA_Start_IT+0x210>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d027      	beq.n	8003d52 <HAL_DMA_Start_IT+0xee>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a5c      	ldr	r2, [pc, #368]	@ (8003e78 <HAL_DMA_Start_IT+0x214>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d022      	beq.n	8003d52 <HAL_DMA_Start_IT+0xee>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a5a      	ldr	r2, [pc, #360]	@ (8003e7c <HAL_DMA_Start_IT+0x218>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d01d      	beq.n	8003d52 <HAL_DMA_Start_IT+0xee>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a59      	ldr	r2, [pc, #356]	@ (8003e80 <HAL_DMA_Start_IT+0x21c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d018      	beq.n	8003d52 <HAL_DMA_Start_IT+0xee>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a57      	ldr	r2, [pc, #348]	@ (8003e84 <HAL_DMA_Start_IT+0x220>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d013      	beq.n	8003d52 <HAL_DMA_Start_IT+0xee>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a56      	ldr	r2, [pc, #344]	@ (8003e88 <HAL_DMA_Start_IT+0x224>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d00e      	beq.n	8003d52 <HAL_DMA_Start_IT+0xee>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a54      	ldr	r2, [pc, #336]	@ (8003e8c <HAL_DMA_Start_IT+0x228>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d009      	beq.n	8003d52 <HAL_DMA_Start_IT+0xee>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a53      	ldr	r2, [pc, #332]	@ (8003e90 <HAL_DMA_Start_IT+0x22c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d004      	beq.n	8003d52 <HAL_DMA_Start_IT+0xee>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a51      	ldr	r2, [pc, #324]	@ (8003e94 <HAL_DMA_Start_IT+0x230>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d108      	bne.n	8003d64 <HAL_DMA_Start_IT+0x100>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0201 	bic.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	e007      	b.n	8003d74 <HAL_DMA_Start_IT+0x110>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0201 	bic.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	68b9      	ldr	r1, [r7, #8]
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f001 fe78 	bl	8005a70 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a34      	ldr	r2, [pc, #208]	@ (8003e58 <HAL_DMA_Start_IT+0x1f4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d04a      	beq.n	8003e20 <HAL_DMA_Start_IT+0x1bc>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a33      	ldr	r2, [pc, #204]	@ (8003e5c <HAL_DMA_Start_IT+0x1f8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d045      	beq.n	8003e20 <HAL_DMA_Start_IT+0x1bc>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a31      	ldr	r2, [pc, #196]	@ (8003e60 <HAL_DMA_Start_IT+0x1fc>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d040      	beq.n	8003e20 <HAL_DMA_Start_IT+0x1bc>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a30      	ldr	r2, [pc, #192]	@ (8003e64 <HAL_DMA_Start_IT+0x200>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d03b      	beq.n	8003e20 <HAL_DMA_Start_IT+0x1bc>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a2e      	ldr	r2, [pc, #184]	@ (8003e68 <HAL_DMA_Start_IT+0x204>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d036      	beq.n	8003e20 <HAL_DMA_Start_IT+0x1bc>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a2d      	ldr	r2, [pc, #180]	@ (8003e6c <HAL_DMA_Start_IT+0x208>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d031      	beq.n	8003e20 <HAL_DMA_Start_IT+0x1bc>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a2b      	ldr	r2, [pc, #172]	@ (8003e70 <HAL_DMA_Start_IT+0x20c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d02c      	beq.n	8003e20 <HAL_DMA_Start_IT+0x1bc>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a2a      	ldr	r2, [pc, #168]	@ (8003e74 <HAL_DMA_Start_IT+0x210>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d027      	beq.n	8003e20 <HAL_DMA_Start_IT+0x1bc>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a28      	ldr	r2, [pc, #160]	@ (8003e78 <HAL_DMA_Start_IT+0x214>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d022      	beq.n	8003e20 <HAL_DMA_Start_IT+0x1bc>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a27      	ldr	r2, [pc, #156]	@ (8003e7c <HAL_DMA_Start_IT+0x218>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d01d      	beq.n	8003e20 <HAL_DMA_Start_IT+0x1bc>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a25      	ldr	r2, [pc, #148]	@ (8003e80 <HAL_DMA_Start_IT+0x21c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d018      	beq.n	8003e20 <HAL_DMA_Start_IT+0x1bc>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a24      	ldr	r2, [pc, #144]	@ (8003e84 <HAL_DMA_Start_IT+0x220>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d013      	beq.n	8003e20 <HAL_DMA_Start_IT+0x1bc>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a22      	ldr	r2, [pc, #136]	@ (8003e88 <HAL_DMA_Start_IT+0x224>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00e      	beq.n	8003e20 <HAL_DMA_Start_IT+0x1bc>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a21      	ldr	r2, [pc, #132]	@ (8003e8c <HAL_DMA_Start_IT+0x228>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d009      	beq.n	8003e20 <HAL_DMA_Start_IT+0x1bc>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1f      	ldr	r2, [pc, #124]	@ (8003e90 <HAL_DMA_Start_IT+0x22c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d004      	beq.n	8003e20 <HAL_DMA_Start_IT+0x1bc>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003e94 <HAL_DMA_Start_IT+0x230>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d101      	bne.n	8003e24 <HAL_DMA_Start_IT+0x1c0>
 8003e20:	2301      	movs	r3, #1
 8003e22:	e000      	b.n	8003e26 <HAL_DMA_Start_IT+0x1c2>
 8003e24:	2300      	movs	r3, #0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d036      	beq.n	8003e98 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f023 021e 	bic.w	r2, r3, #30
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0216 	orr.w	r2, r2, #22
 8003e3c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d03e      	beq.n	8003ec4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 0208 	orr.w	r2, r2, #8
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	e035      	b.n	8003ec4 <HAL_DMA_Start_IT+0x260>
 8003e58:	40020010 	.word	0x40020010
 8003e5c:	40020028 	.word	0x40020028
 8003e60:	40020040 	.word	0x40020040
 8003e64:	40020058 	.word	0x40020058
 8003e68:	40020070 	.word	0x40020070
 8003e6c:	40020088 	.word	0x40020088
 8003e70:	400200a0 	.word	0x400200a0
 8003e74:	400200b8 	.word	0x400200b8
 8003e78:	40020410 	.word	0x40020410
 8003e7c:	40020428 	.word	0x40020428
 8003e80:	40020440 	.word	0x40020440
 8003e84:	40020458 	.word	0x40020458
 8003e88:	40020470 	.word	0x40020470
 8003e8c:	40020488 	.word	0x40020488
 8003e90:	400204a0 	.word	0x400204a0
 8003e94:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f023 020e 	bic.w	r2, r3, #14
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 020a 	orr.w	r2, r2, #10
 8003eaa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d007      	beq.n	8003ec4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0204 	orr.w	r2, r2, #4
 8003ec2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a83      	ldr	r2, [pc, #524]	@ (80040d8 <HAL_DMA_Start_IT+0x474>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d072      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a82      	ldr	r2, [pc, #520]	@ (80040dc <HAL_DMA_Start_IT+0x478>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d06d      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a80      	ldr	r2, [pc, #512]	@ (80040e0 <HAL_DMA_Start_IT+0x47c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d068      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a7f      	ldr	r2, [pc, #508]	@ (80040e4 <HAL_DMA_Start_IT+0x480>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d063      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a7d      	ldr	r2, [pc, #500]	@ (80040e8 <HAL_DMA_Start_IT+0x484>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d05e      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a7c      	ldr	r2, [pc, #496]	@ (80040ec <HAL_DMA_Start_IT+0x488>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d059      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a7a      	ldr	r2, [pc, #488]	@ (80040f0 <HAL_DMA_Start_IT+0x48c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d054      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a79      	ldr	r2, [pc, #484]	@ (80040f4 <HAL_DMA_Start_IT+0x490>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d04f      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a77      	ldr	r2, [pc, #476]	@ (80040f8 <HAL_DMA_Start_IT+0x494>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d04a      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a76      	ldr	r2, [pc, #472]	@ (80040fc <HAL_DMA_Start_IT+0x498>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d045      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a74      	ldr	r2, [pc, #464]	@ (8004100 <HAL_DMA_Start_IT+0x49c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d040      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a73      	ldr	r2, [pc, #460]	@ (8004104 <HAL_DMA_Start_IT+0x4a0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d03b      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a71      	ldr	r2, [pc, #452]	@ (8004108 <HAL_DMA_Start_IT+0x4a4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d036      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a70      	ldr	r2, [pc, #448]	@ (800410c <HAL_DMA_Start_IT+0x4a8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d031      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a6e      	ldr	r2, [pc, #440]	@ (8004110 <HAL_DMA_Start_IT+0x4ac>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d02c      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a6d      	ldr	r2, [pc, #436]	@ (8004114 <HAL_DMA_Start_IT+0x4b0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d027      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a6b      	ldr	r2, [pc, #428]	@ (8004118 <HAL_DMA_Start_IT+0x4b4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d022      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a6a      	ldr	r2, [pc, #424]	@ (800411c <HAL_DMA_Start_IT+0x4b8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d01d      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a68      	ldr	r2, [pc, #416]	@ (8004120 <HAL_DMA_Start_IT+0x4bc>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d018      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a67      	ldr	r2, [pc, #412]	@ (8004124 <HAL_DMA_Start_IT+0x4c0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d013      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a65      	ldr	r2, [pc, #404]	@ (8004128 <HAL_DMA_Start_IT+0x4c4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00e      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a64      	ldr	r2, [pc, #400]	@ (800412c <HAL_DMA_Start_IT+0x4c8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d009      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a62      	ldr	r2, [pc, #392]	@ (8004130 <HAL_DMA_Start_IT+0x4cc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d004      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x350>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a61      	ldr	r2, [pc, #388]	@ (8004134 <HAL_DMA_Start_IT+0x4d0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d101      	bne.n	8003fb8 <HAL_DMA_Start_IT+0x354>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <HAL_DMA_Start_IT+0x356>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d01a      	beq.n	8003ff4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d007      	beq.n	8003fdc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fda:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d007      	beq.n	8003ff4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ff2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a37      	ldr	r2, [pc, #220]	@ (80040d8 <HAL_DMA_Start_IT+0x474>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d04a      	beq.n	8004094 <HAL_DMA_Start_IT+0x430>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a36      	ldr	r2, [pc, #216]	@ (80040dc <HAL_DMA_Start_IT+0x478>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d045      	beq.n	8004094 <HAL_DMA_Start_IT+0x430>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a34      	ldr	r2, [pc, #208]	@ (80040e0 <HAL_DMA_Start_IT+0x47c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d040      	beq.n	8004094 <HAL_DMA_Start_IT+0x430>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a33      	ldr	r2, [pc, #204]	@ (80040e4 <HAL_DMA_Start_IT+0x480>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d03b      	beq.n	8004094 <HAL_DMA_Start_IT+0x430>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a31      	ldr	r2, [pc, #196]	@ (80040e8 <HAL_DMA_Start_IT+0x484>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d036      	beq.n	8004094 <HAL_DMA_Start_IT+0x430>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a30      	ldr	r2, [pc, #192]	@ (80040ec <HAL_DMA_Start_IT+0x488>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d031      	beq.n	8004094 <HAL_DMA_Start_IT+0x430>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a2e      	ldr	r2, [pc, #184]	@ (80040f0 <HAL_DMA_Start_IT+0x48c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d02c      	beq.n	8004094 <HAL_DMA_Start_IT+0x430>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a2d      	ldr	r2, [pc, #180]	@ (80040f4 <HAL_DMA_Start_IT+0x490>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d027      	beq.n	8004094 <HAL_DMA_Start_IT+0x430>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a2b      	ldr	r2, [pc, #172]	@ (80040f8 <HAL_DMA_Start_IT+0x494>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d022      	beq.n	8004094 <HAL_DMA_Start_IT+0x430>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a2a      	ldr	r2, [pc, #168]	@ (80040fc <HAL_DMA_Start_IT+0x498>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d01d      	beq.n	8004094 <HAL_DMA_Start_IT+0x430>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a28      	ldr	r2, [pc, #160]	@ (8004100 <HAL_DMA_Start_IT+0x49c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d018      	beq.n	8004094 <HAL_DMA_Start_IT+0x430>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a27      	ldr	r2, [pc, #156]	@ (8004104 <HAL_DMA_Start_IT+0x4a0>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d013      	beq.n	8004094 <HAL_DMA_Start_IT+0x430>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a25      	ldr	r2, [pc, #148]	@ (8004108 <HAL_DMA_Start_IT+0x4a4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00e      	beq.n	8004094 <HAL_DMA_Start_IT+0x430>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a24      	ldr	r2, [pc, #144]	@ (800410c <HAL_DMA_Start_IT+0x4a8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d009      	beq.n	8004094 <HAL_DMA_Start_IT+0x430>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a22      	ldr	r2, [pc, #136]	@ (8004110 <HAL_DMA_Start_IT+0x4ac>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d004      	beq.n	8004094 <HAL_DMA_Start_IT+0x430>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a21      	ldr	r2, [pc, #132]	@ (8004114 <HAL_DMA_Start_IT+0x4b0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d108      	bne.n	80040a6 <HAL_DMA_Start_IT+0x442>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	e012      	b.n	80040cc <HAL_DMA_Start_IT+0x468>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 0201 	orr.w	r2, r2, #1
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	e009      	b.n	80040cc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040be:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80040cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40020010 	.word	0x40020010
 80040dc:	40020028 	.word	0x40020028
 80040e0:	40020040 	.word	0x40020040
 80040e4:	40020058 	.word	0x40020058
 80040e8:	40020070 	.word	0x40020070
 80040ec:	40020088 	.word	0x40020088
 80040f0:	400200a0 	.word	0x400200a0
 80040f4:	400200b8 	.word	0x400200b8
 80040f8:	40020410 	.word	0x40020410
 80040fc:	40020428 	.word	0x40020428
 8004100:	40020440 	.word	0x40020440
 8004104:	40020458 	.word	0x40020458
 8004108:	40020470 	.word	0x40020470
 800410c:	40020488 	.word	0x40020488
 8004110:	400204a0 	.word	0x400204a0
 8004114:	400204b8 	.word	0x400204b8
 8004118:	58025408 	.word	0x58025408
 800411c:	5802541c 	.word	0x5802541c
 8004120:	58025430 	.word	0x58025430
 8004124:	58025444 	.word	0x58025444
 8004128:	58025458 	.word	0x58025458
 800412c:	5802546c 	.word	0x5802546c
 8004130:	58025480 	.word	0x58025480
 8004134:	58025494 	.word	0x58025494

08004138 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004140:	f7fe fd84 	bl	8002c4c <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e2dc      	b.n	800470a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d008      	beq.n	800416e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2280      	movs	r2, #128	@ 0x80
 8004160:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e2cd      	b.n	800470a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a76      	ldr	r2, [pc, #472]	@ (800434c <HAL_DMA_Abort+0x214>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d04a      	beq.n	800420e <HAL_DMA_Abort+0xd6>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a74      	ldr	r2, [pc, #464]	@ (8004350 <HAL_DMA_Abort+0x218>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d045      	beq.n	800420e <HAL_DMA_Abort+0xd6>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a73      	ldr	r2, [pc, #460]	@ (8004354 <HAL_DMA_Abort+0x21c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d040      	beq.n	800420e <HAL_DMA_Abort+0xd6>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a71      	ldr	r2, [pc, #452]	@ (8004358 <HAL_DMA_Abort+0x220>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d03b      	beq.n	800420e <HAL_DMA_Abort+0xd6>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a70      	ldr	r2, [pc, #448]	@ (800435c <HAL_DMA_Abort+0x224>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d036      	beq.n	800420e <HAL_DMA_Abort+0xd6>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a6e      	ldr	r2, [pc, #440]	@ (8004360 <HAL_DMA_Abort+0x228>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d031      	beq.n	800420e <HAL_DMA_Abort+0xd6>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a6d      	ldr	r2, [pc, #436]	@ (8004364 <HAL_DMA_Abort+0x22c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d02c      	beq.n	800420e <HAL_DMA_Abort+0xd6>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a6b      	ldr	r2, [pc, #428]	@ (8004368 <HAL_DMA_Abort+0x230>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d027      	beq.n	800420e <HAL_DMA_Abort+0xd6>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a6a      	ldr	r2, [pc, #424]	@ (800436c <HAL_DMA_Abort+0x234>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d022      	beq.n	800420e <HAL_DMA_Abort+0xd6>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a68      	ldr	r2, [pc, #416]	@ (8004370 <HAL_DMA_Abort+0x238>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d01d      	beq.n	800420e <HAL_DMA_Abort+0xd6>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a67      	ldr	r2, [pc, #412]	@ (8004374 <HAL_DMA_Abort+0x23c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d018      	beq.n	800420e <HAL_DMA_Abort+0xd6>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a65      	ldr	r2, [pc, #404]	@ (8004378 <HAL_DMA_Abort+0x240>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d013      	beq.n	800420e <HAL_DMA_Abort+0xd6>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a64      	ldr	r2, [pc, #400]	@ (800437c <HAL_DMA_Abort+0x244>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d00e      	beq.n	800420e <HAL_DMA_Abort+0xd6>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a62      	ldr	r2, [pc, #392]	@ (8004380 <HAL_DMA_Abort+0x248>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d009      	beq.n	800420e <HAL_DMA_Abort+0xd6>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a61      	ldr	r2, [pc, #388]	@ (8004384 <HAL_DMA_Abort+0x24c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d004      	beq.n	800420e <HAL_DMA_Abort+0xd6>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a5f      	ldr	r2, [pc, #380]	@ (8004388 <HAL_DMA_Abort+0x250>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d101      	bne.n	8004212 <HAL_DMA_Abort+0xda>
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <HAL_DMA_Abort+0xdc>
 8004212:	2300      	movs	r3, #0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d013      	beq.n	8004240 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 021e 	bic.w	r2, r2, #30
 8004226:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695a      	ldr	r2, [r3, #20]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004236:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	e00a      	b.n	8004256 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 020e 	bic.w	r2, r2, #14
 800424e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a3c      	ldr	r2, [pc, #240]	@ (800434c <HAL_DMA_Abort+0x214>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d072      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a3a      	ldr	r2, [pc, #232]	@ (8004350 <HAL_DMA_Abort+0x218>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d06d      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a39      	ldr	r2, [pc, #228]	@ (8004354 <HAL_DMA_Abort+0x21c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d068      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a37      	ldr	r2, [pc, #220]	@ (8004358 <HAL_DMA_Abort+0x220>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d063      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a36      	ldr	r2, [pc, #216]	@ (800435c <HAL_DMA_Abort+0x224>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d05e      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a34      	ldr	r2, [pc, #208]	@ (8004360 <HAL_DMA_Abort+0x228>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d059      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a33      	ldr	r2, [pc, #204]	@ (8004364 <HAL_DMA_Abort+0x22c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d054      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a31      	ldr	r2, [pc, #196]	@ (8004368 <HAL_DMA_Abort+0x230>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d04f      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a30      	ldr	r2, [pc, #192]	@ (800436c <HAL_DMA_Abort+0x234>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d04a      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a2e      	ldr	r2, [pc, #184]	@ (8004370 <HAL_DMA_Abort+0x238>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d045      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a2d      	ldr	r2, [pc, #180]	@ (8004374 <HAL_DMA_Abort+0x23c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d040      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004378 <HAL_DMA_Abort+0x240>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d03b      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a2a      	ldr	r2, [pc, #168]	@ (800437c <HAL_DMA_Abort+0x244>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d036      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a28      	ldr	r2, [pc, #160]	@ (8004380 <HAL_DMA_Abort+0x248>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d031      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a27      	ldr	r2, [pc, #156]	@ (8004384 <HAL_DMA_Abort+0x24c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d02c      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a25      	ldr	r2, [pc, #148]	@ (8004388 <HAL_DMA_Abort+0x250>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d027      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a24      	ldr	r2, [pc, #144]	@ (800438c <HAL_DMA_Abort+0x254>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d022      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a22      	ldr	r2, [pc, #136]	@ (8004390 <HAL_DMA_Abort+0x258>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d01d      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a21      	ldr	r2, [pc, #132]	@ (8004394 <HAL_DMA_Abort+0x25c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d018      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a1f      	ldr	r2, [pc, #124]	@ (8004398 <HAL_DMA_Abort+0x260>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d013      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a1e      	ldr	r2, [pc, #120]	@ (800439c <HAL_DMA_Abort+0x264>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00e      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a1c      	ldr	r2, [pc, #112]	@ (80043a0 <HAL_DMA_Abort+0x268>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d009      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a1b      	ldr	r2, [pc, #108]	@ (80043a4 <HAL_DMA_Abort+0x26c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d004      	beq.n	8004346 <HAL_DMA_Abort+0x20e>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a19      	ldr	r2, [pc, #100]	@ (80043a8 <HAL_DMA_Abort+0x270>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d132      	bne.n	80043ac <HAL_DMA_Abort+0x274>
 8004346:	2301      	movs	r3, #1
 8004348:	e031      	b.n	80043ae <HAL_DMA_Abort+0x276>
 800434a:	bf00      	nop
 800434c:	40020010 	.word	0x40020010
 8004350:	40020028 	.word	0x40020028
 8004354:	40020040 	.word	0x40020040
 8004358:	40020058 	.word	0x40020058
 800435c:	40020070 	.word	0x40020070
 8004360:	40020088 	.word	0x40020088
 8004364:	400200a0 	.word	0x400200a0
 8004368:	400200b8 	.word	0x400200b8
 800436c:	40020410 	.word	0x40020410
 8004370:	40020428 	.word	0x40020428
 8004374:	40020440 	.word	0x40020440
 8004378:	40020458 	.word	0x40020458
 800437c:	40020470 	.word	0x40020470
 8004380:	40020488 	.word	0x40020488
 8004384:	400204a0 	.word	0x400204a0
 8004388:	400204b8 	.word	0x400204b8
 800438c:	58025408 	.word	0x58025408
 8004390:	5802541c 	.word	0x5802541c
 8004394:	58025430 	.word	0x58025430
 8004398:	58025444 	.word	0x58025444
 800439c:	58025458 	.word	0x58025458
 80043a0:	5802546c 	.word	0x5802546c
 80043a4:	58025480 	.word	0x58025480
 80043a8:	58025494 	.word	0x58025494
 80043ac:	2300      	movs	r3, #0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a6d      	ldr	r2, [pc, #436]	@ (800457c <HAL_DMA_Abort+0x444>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d04a      	beq.n	8004462 <HAL_DMA_Abort+0x32a>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a6b      	ldr	r2, [pc, #428]	@ (8004580 <HAL_DMA_Abort+0x448>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d045      	beq.n	8004462 <HAL_DMA_Abort+0x32a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a6a      	ldr	r2, [pc, #424]	@ (8004584 <HAL_DMA_Abort+0x44c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d040      	beq.n	8004462 <HAL_DMA_Abort+0x32a>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a68      	ldr	r2, [pc, #416]	@ (8004588 <HAL_DMA_Abort+0x450>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d03b      	beq.n	8004462 <HAL_DMA_Abort+0x32a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a67      	ldr	r2, [pc, #412]	@ (800458c <HAL_DMA_Abort+0x454>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d036      	beq.n	8004462 <HAL_DMA_Abort+0x32a>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a65      	ldr	r2, [pc, #404]	@ (8004590 <HAL_DMA_Abort+0x458>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d031      	beq.n	8004462 <HAL_DMA_Abort+0x32a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a64      	ldr	r2, [pc, #400]	@ (8004594 <HAL_DMA_Abort+0x45c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d02c      	beq.n	8004462 <HAL_DMA_Abort+0x32a>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a62      	ldr	r2, [pc, #392]	@ (8004598 <HAL_DMA_Abort+0x460>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d027      	beq.n	8004462 <HAL_DMA_Abort+0x32a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a61      	ldr	r2, [pc, #388]	@ (800459c <HAL_DMA_Abort+0x464>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d022      	beq.n	8004462 <HAL_DMA_Abort+0x32a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a5f      	ldr	r2, [pc, #380]	@ (80045a0 <HAL_DMA_Abort+0x468>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d01d      	beq.n	8004462 <HAL_DMA_Abort+0x32a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a5e      	ldr	r2, [pc, #376]	@ (80045a4 <HAL_DMA_Abort+0x46c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d018      	beq.n	8004462 <HAL_DMA_Abort+0x32a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a5c      	ldr	r2, [pc, #368]	@ (80045a8 <HAL_DMA_Abort+0x470>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d013      	beq.n	8004462 <HAL_DMA_Abort+0x32a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a5b      	ldr	r2, [pc, #364]	@ (80045ac <HAL_DMA_Abort+0x474>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d00e      	beq.n	8004462 <HAL_DMA_Abort+0x32a>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a59      	ldr	r2, [pc, #356]	@ (80045b0 <HAL_DMA_Abort+0x478>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d009      	beq.n	8004462 <HAL_DMA_Abort+0x32a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a58      	ldr	r2, [pc, #352]	@ (80045b4 <HAL_DMA_Abort+0x47c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d004      	beq.n	8004462 <HAL_DMA_Abort+0x32a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a56      	ldr	r2, [pc, #344]	@ (80045b8 <HAL_DMA_Abort+0x480>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d108      	bne.n	8004474 <HAL_DMA_Abort+0x33c>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0201 	bic.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	e007      	b.n	8004484 <HAL_DMA_Abort+0x34c>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0201 	bic.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004484:	e013      	b.n	80044ae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004486:	f7fe fbe1 	bl	8002c4c <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b05      	cmp	r3, #5
 8004492:	d90c      	bls.n	80044ae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2203      	movs	r2, #3
 800449e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e12d      	b.n	800470a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1e5      	bne.n	8004486 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a2f      	ldr	r2, [pc, #188]	@ (800457c <HAL_DMA_Abort+0x444>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d04a      	beq.n	800455a <HAL_DMA_Abort+0x422>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004580 <HAL_DMA_Abort+0x448>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d045      	beq.n	800455a <HAL_DMA_Abort+0x422>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004584 <HAL_DMA_Abort+0x44c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d040      	beq.n	800455a <HAL_DMA_Abort+0x422>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a2a      	ldr	r2, [pc, #168]	@ (8004588 <HAL_DMA_Abort+0x450>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d03b      	beq.n	800455a <HAL_DMA_Abort+0x422>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a29      	ldr	r2, [pc, #164]	@ (800458c <HAL_DMA_Abort+0x454>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d036      	beq.n	800455a <HAL_DMA_Abort+0x422>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a27      	ldr	r2, [pc, #156]	@ (8004590 <HAL_DMA_Abort+0x458>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d031      	beq.n	800455a <HAL_DMA_Abort+0x422>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a26      	ldr	r2, [pc, #152]	@ (8004594 <HAL_DMA_Abort+0x45c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d02c      	beq.n	800455a <HAL_DMA_Abort+0x422>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a24      	ldr	r2, [pc, #144]	@ (8004598 <HAL_DMA_Abort+0x460>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d027      	beq.n	800455a <HAL_DMA_Abort+0x422>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a23      	ldr	r2, [pc, #140]	@ (800459c <HAL_DMA_Abort+0x464>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d022      	beq.n	800455a <HAL_DMA_Abort+0x422>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a21      	ldr	r2, [pc, #132]	@ (80045a0 <HAL_DMA_Abort+0x468>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d01d      	beq.n	800455a <HAL_DMA_Abort+0x422>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a20      	ldr	r2, [pc, #128]	@ (80045a4 <HAL_DMA_Abort+0x46c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d018      	beq.n	800455a <HAL_DMA_Abort+0x422>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a1e      	ldr	r2, [pc, #120]	@ (80045a8 <HAL_DMA_Abort+0x470>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d013      	beq.n	800455a <HAL_DMA_Abort+0x422>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a1d      	ldr	r2, [pc, #116]	@ (80045ac <HAL_DMA_Abort+0x474>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00e      	beq.n	800455a <HAL_DMA_Abort+0x422>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a1b      	ldr	r2, [pc, #108]	@ (80045b0 <HAL_DMA_Abort+0x478>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d009      	beq.n	800455a <HAL_DMA_Abort+0x422>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a1a      	ldr	r2, [pc, #104]	@ (80045b4 <HAL_DMA_Abort+0x47c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d004      	beq.n	800455a <HAL_DMA_Abort+0x422>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a18      	ldr	r2, [pc, #96]	@ (80045b8 <HAL_DMA_Abort+0x480>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d101      	bne.n	800455e <HAL_DMA_Abort+0x426>
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <HAL_DMA_Abort+0x428>
 800455e:	2300      	movs	r3, #0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d02b      	beq.n	80045bc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004568:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800456e:	f003 031f 	and.w	r3, r3, #31
 8004572:	223f      	movs	r2, #63	@ 0x3f
 8004574:	409a      	lsls	r2, r3
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	609a      	str	r2, [r3, #8]
 800457a:	e02a      	b.n	80045d2 <HAL_DMA_Abort+0x49a>
 800457c:	40020010 	.word	0x40020010
 8004580:	40020028 	.word	0x40020028
 8004584:	40020040 	.word	0x40020040
 8004588:	40020058 	.word	0x40020058
 800458c:	40020070 	.word	0x40020070
 8004590:	40020088 	.word	0x40020088
 8004594:	400200a0 	.word	0x400200a0
 8004598:	400200b8 	.word	0x400200b8
 800459c:	40020410 	.word	0x40020410
 80045a0:	40020428 	.word	0x40020428
 80045a4:	40020440 	.word	0x40020440
 80045a8:	40020458 	.word	0x40020458
 80045ac:	40020470 	.word	0x40020470
 80045b0:	40020488 	.word	0x40020488
 80045b4:	400204a0 	.word	0x400204a0
 80045b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c6:	f003 031f 	and.w	r3, r3, #31
 80045ca:	2201      	movs	r2, #1
 80045cc:	409a      	lsls	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a4f      	ldr	r2, [pc, #316]	@ (8004714 <HAL_DMA_Abort+0x5dc>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d072      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a4d      	ldr	r2, [pc, #308]	@ (8004718 <HAL_DMA_Abort+0x5e0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d06d      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a4c      	ldr	r2, [pc, #304]	@ (800471c <HAL_DMA_Abort+0x5e4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d068      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a4a      	ldr	r2, [pc, #296]	@ (8004720 <HAL_DMA_Abort+0x5e8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d063      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a49      	ldr	r2, [pc, #292]	@ (8004724 <HAL_DMA_Abort+0x5ec>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d05e      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a47      	ldr	r2, [pc, #284]	@ (8004728 <HAL_DMA_Abort+0x5f0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d059      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a46      	ldr	r2, [pc, #280]	@ (800472c <HAL_DMA_Abort+0x5f4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d054      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a44      	ldr	r2, [pc, #272]	@ (8004730 <HAL_DMA_Abort+0x5f8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d04f      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a43      	ldr	r2, [pc, #268]	@ (8004734 <HAL_DMA_Abort+0x5fc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d04a      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a41      	ldr	r2, [pc, #260]	@ (8004738 <HAL_DMA_Abort+0x600>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d045      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a40      	ldr	r2, [pc, #256]	@ (800473c <HAL_DMA_Abort+0x604>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d040      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a3e      	ldr	r2, [pc, #248]	@ (8004740 <HAL_DMA_Abort+0x608>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d03b      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a3d      	ldr	r2, [pc, #244]	@ (8004744 <HAL_DMA_Abort+0x60c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d036      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a3b      	ldr	r2, [pc, #236]	@ (8004748 <HAL_DMA_Abort+0x610>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d031      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a3a      	ldr	r2, [pc, #232]	@ (800474c <HAL_DMA_Abort+0x614>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d02c      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a38      	ldr	r2, [pc, #224]	@ (8004750 <HAL_DMA_Abort+0x618>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d027      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a37      	ldr	r2, [pc, #220]	@ (8004754 <HAL_DMA_Abort+0x61c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d022      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a35      	ldr	r2, [pc, #212]	@ (8004758 <HAL_DMA_Abort+0x620>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d01d      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a34      	ldr	r2, [pc, #208]	@ (800475c <HAL_DMA_Abort+0x624>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d018      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a32      	ldr	r2, [pc, #200]	@ (8004760 <HAL_DMA_Abort+0x628>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a31      	ldr	r2, [pc, #196]	@ (8004764 <HAL_DMA_Abort+0x62c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00e      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a2f      	ldr	r2, [pc, #188]	@ (8004768 <HAL_DMA_Abort+0x630>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d009      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a2e      	ldr	r2, [pc, #184]	@ (800476c <HAL_DMA_Abort+0x634>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d004      	beq.n	80046c2 <HAL_DMA_Abort+0x58a>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a2c      	ldr	r2, [pc, #176]	@ (8004770 <HAL_DMA_Abort+0x638>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d101      	bne.n	80046c6 <HAL_DMA_Abort+0x58e>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <HAL_DMA_Abort+0x590>
 80046c6:	2300      	movs	r3, #0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d015      	beq.n	80046f8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80046d4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00c      	beq.n	80046f8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046ec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80046f6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40020010 	.word	0x40020010
 8004718:	40020028 	.word	0x40020028
 800471c:	40020040 	.word	0x40020040
 8004720:	40020058 	.word	0x40020058
 8004724:	40020070 	.word	0x40020070
 8004728:	40020088 	.word	0x40020088
 800472c:	400200a0 	.word	0x400200a0
 8004730:	400200b8 	.word	0x400200b8
 8004734:	40020410 	.word	0x40020410
 8004738:	40020428 	.word	0x40020428
 800473c:	40020440 	.word	0x40020440
 8004740:	40020458 	.word	0x40020458
 8004744:	40020470 	.word	0x40020470
 8004748:	40020488 	.word	0x40020488
 800474c:	400204a0 	.word	0x400204a0
 8004750:	400204b8 	.word	0x400204b8
 8004754:	58025408 	.word	0x58025408
 8004758:	5802541c 	.word	0x5802541c
 800475c:	58025430 	.word	0x58025430
 8004760:	58025444 	.word	0x58025444
 8004764:	58025458 	.word	0x58025458
 8004768:	5802546c 	.word	0x5802546c
 800476c:	58025480 	.word	0x58025480
 8004770:	58025494 	.word	0x58025494

08004774 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e237      	b.n	8004bf6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d004      	beq.n	800479c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2280      	movs	r2, #128	@ 0x80
 8004796:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e22c      	b.n	8004bf6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a5c      	ldr	r2, [pc, #368]	@ (8004914 <HAL_DMA_Abort_IT+0x1a0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d04a      	beq.n	800483c <HAL_DMA_Abort_IT+0xc8>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a5b      	ldr	r2, [pc, #364]	@ (8004918 <HAL_DMA_Abort_IT+0x1a4>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d045      	beq.n	800483c <HAL_DMA_Abort_IT+0xc8>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a59      	ldr	r2, [pc, #356]	@ (800491c <HAL_DMA_Abort_IT+0x1a8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d040      	beq.n	800483c <HAL_DMA_Abort_IT+0xc8>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a58      	ldr	r2, [pc, #352]	@ (8004920 <HAL_DMA_Abort_IT+0x1ac>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d03b      	beq.n	800483c <HAL_DMA_Abort_IT+0xc8>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a56      	ldr	r2, [pc, #344]	@ (8004924 <HAL_DMA_Abort_IT+0x1b0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d036      	beq.n	800483c <HAL_DMA_Abort_IT+0xc8>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a55      	ldr	r2, [pc, #340]	@ (8004928 <HAL_DMA_Abort_IT+0x1b4>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d031      	beq.n	800483c <HAL_DMA_Abort_IT+0xc8>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a53      	ldr	r2, [pc, #332]	@ (800492c <HAL_DMA_Abort_IT+0x1b8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d02c      	beq.n	800483c <HAL_DMA_Abort_IT+0xc8>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a52      	ldr	r2, [pc, #328]	@ (8004930 <HAL_DMA_Abort_IT+0x1bc>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d027      	beq.n	800483c <HAL_DMA_Abort_IT+0xc8>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a50      	ldr	r2, [pc, #320]	@ (8004934 <HAL_DMA_Abort_IT+0x1c0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d022      	beq.n	800483c <HAL_DMA_Abort_IT+0xc8>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a4f      	ldr	r2, [pc, #316]	@ (8004938 <HAL_DMA_Abort_IT+0x1c4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d01d      	beq.n	800483c <HAL_DMA_Abort_IT+0xc8>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a4d      	ldr	r2, [pc, #308]	@ (800493c <HAL_DMA_Abort_IT+0x1c8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d018      	beq.n	800483c <HAL_DMA_Abort_IT+0xc8>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a4c      	ldr	r2, [pc, #304]	@ (8004940 <HAL_DMA_Abort_IT+0x1cc>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d013      	beq.n	800483c <HAL_DMA_Abort_IT+0xc8>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a4a      	ldr	r2, [pc, #296]	@ (8004944 <HAL_DMA_Abort_IT+0x1d0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00e      	beq.n	800483c <HAL_DMA_Abort_IT+0xc8>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a49      	ldr	r2, [pc, #292]	@ (8004948 <HAL_DMA_Abort_IT+0x1d4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d009      	beq.n	800483c <HAL_DMA_Abort_IT+0xc8>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a47      	ldr	r2, [pc, #284]	@ (800494c <HAL_DMA_Abort_IT+0x1d8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d004      	beq.n	800483c <HAL_DMA_Abort_IT+0xc8>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a46      	ldr	r2, [pc, #280]	@ (8004950 <HAL_DMA_Abort_IT+0x1dc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d101      	bne.n	8004840 <HAL_DMA_Abort_IT+0xcc>
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <HAL_DMA_Abort_IT+0xce>
 8004840:	2300      	movs	r3, #0
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 8086 	beq.w	8004954 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2204      	movs	r2, #4
 800484c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a2f      	ldr	r2, [pc, #188]	@ (8004914 <HAL_DMA_Abort_IT+0x1a0>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d04a      	beq.n	80048f0 <HAL_DMA_Abort_IT+0x17c>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a2e      	ldr	r2, [pc, #184]	@ (8004918 <HAL_DMA_Abort_IT+0x1a4>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d045      	beq.n	80048f0 <HAL_DMA_Abort_IT+0x17c>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a2c      	ldr	r2, [pc, #176]	@ (800491c <HAL_DMA_Abort_IT+0x1a8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d040      	beq.n	80048f0 <HAL_DMA_Abort_IT+0x17c>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a2b      	ldr	r2, [pc, #172]	@ (8004920 <HAL_DMA_Abort_IT+0x1ac>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d03b      	beq.n	80048f0 <HAL_DMA_Abort_IT+0x17c>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a29      	ldr	r2, [pc, #164]	@ (8004924 <HAL_DMA_Abort_IT+0x1b0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d036      	beq.n	80048f0 <HAL_DMA_Abort_IT+0x17c>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a28      	ldr	r2, [pc, #160]	@ (8004928 <HAL_DMA_Abort_IT+0x1b4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d031      	beq.n	80048f0 <HAL_DMA_Abort_IT+0x17c>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a26      	ldr	r2, [pc, #152]	@ (800492c <HAL_DMA_Abort_IT+0x1b8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d02c      	beq.n	80048f0 <HAL_DMA_Abort_IT+0x17c>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a25      	ldr	r2, [pc, #148]	@ (8004930 <HAL_DMA_Abort_IT+0x1bc>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d027      	beq.n	80048f0 <HAL_DMA_Abort_IT+0x17c>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a23      	ldr	r2, [pc, #140]	@ (8004934 <HAL_DMA_Abort_IT+0x1c0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d022      	beq.n	80048f0 <HAL_DMA_Abort_IT+0x17c>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a22      	ldr	r2, [pc, #136]	@ (8004938 <HAL_DMA_Abort_IT+0x1c4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d01d      	beq.n	80048f0 <HAL_DMA_Abort_IT+0x17c>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a20      	ldr	r2, [pc, #128]	@ (800493c <HAL_DMA_Abort_IT+0x1c8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d018      	beq.n	80048f0 <HAL_DMA_Abort_IT+0x17c>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004940 <HAL_DMA_Abort_IT+0x1cc>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d013      	beq.n	80048f0 <HAL_DMA_Abort_IT+0x17c>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004944 <HAL_DMA_Abort_IT+0x1d0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00e      	beq.n	80048f0 <HAL_DMA_Abort_IT+0x17c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004948 <HAL_DMA_Abort_IT+0x1d4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d009      	beq.n	80048f0 <HAL_DMA_Abort_IT+0x17c>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a1a      	ldr	r2, [pc, #104]	@ (800494c <HAL_DMA_Abort_IT+0x1d8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <HAL_DMA_Abort_IT+0x17c>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a19      	ldr	r2, [pc, #100]	@ (8004950 <HAL_DMA_Abort_IT+0x1dc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d108      	bne.n	8004902 <HAL_DMA_Abort_IT+0x18e>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0201 	bic.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	e178      	b.n	8004bf4 <HAL_DMA_Abort_IT+0x480>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0201 	bic.w	r2, r2, #1
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	e16f      	b.n	8004bf4 <HAL_DMA_Abort_IT+0x480>
 8004914:	40020010 	.word	0x40020010
 8004918:	40020028 	.word	0x40020028
 800491c:	40020040 	.word	0x40020040
 8004920:	40020058 	.word	0x40020058
 8004924:	40020070 	.word	0x40020070
 8004928:	40020088 	.word	0x40020088
 800492c:	400200a0 	.word	0x400200a0
 8004930:	400200b8 	.word	0x400200b8
 8004934:	40020410 	.word	0x40020410
 8004938:	40020428 	.word	0x40020428
 800493c:	40020440 	.word	0x40020440
 8004940:	40020458 	.word	0x40020458
 8004944:	40020470 	.word	0x40020470
 8004948:	40020488 	.word	0x40020488
 800494c:	400204a0 	.word	0x400204a0
 8004950:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 020e 	bic.w	r2, r2, #14
 8004962:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a6c      	ldr	r2, [pc, #432]	@ (8004b1c <HAL_DMA_Abort_IT+0x3a8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d04a      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x290>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a6b      	ldr	r2, [pc, #428]	@ (8004b20 <HAL_DMA_Abort_IT+0x3ac>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d045      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x290>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a69      	ldr	r2, [pc, #420]	@ (8004b24 <HAL_DMA_Abort_IT+0x3b0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d040      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x290>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a68      	ldr	r2, [pc, #416]	@ (8004b28 <HAL_DMA_Abort_IT+0x3b4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d03b      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x290>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a66      	ldr	r2, [pc, #408]	@ (8004b2c <HAL_DMA_Abort_IT+0x3b8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d036      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x290>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a65      	ldr	r2, [pc, #404]	@ (8004b30 <HAL_DMA_Abort_IT+0x3bc>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d031      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x290>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a63      	ldr	r2, [pc, #396]	@ (8004b34 <HAL_DMA_Abort_IT+0x3c0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d02c      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x290>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a62      	ldr	r2, [pc, #392]	@ (8004b38 <HAL_DMA_Abort_IT+0x3c4>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d027      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x290>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a60      	ldr	r2, [pc, #384]	@ (8004b3c <HAL_DMA_Abort_IT+0x3c8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d022      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x290>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a5f      	ldr	r2, [pc, #380]	@ (8004b40 <HAL_DMA_Abort_IT+0x3cc>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d01d      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x290>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a5d      	ldr	r2, [pc, #372]	@ (8004b44 <HAL_DMA_Abort_IT+0x3d0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d018      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x290>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a5c      	ldr	r2, [pc, #368]	@ (8004b48 <HAL_DMA_Abort_IT+0x3d4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d013      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x290>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a5a      	ldr	r2, [pc, #360]	@ (8004b4c <HAL_DMA_Abort_IT+0x3d8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00e      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x290>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a59      	ldr	r2, [pc, #356]	@ (8004b50 <HAL_DMA_Abort_IT+0x3dc>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d009      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x290>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a57      	ldr	r2, [pc, #348]	@ (8004b54 <HAL_DMA_Abort_IT+0x3e0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d004      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x290>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a56      	ldr	r2, [pc, #344]	@ (8004b58 <HAL_DMA_Abort_IT+0x3e4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d108      	bne.n	8004a16 <HAL_DMA_Abort_IT+0x2a2>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0201 	bic.w	r2, r2, #1
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	e007      	b.n	8004a26 <HAL_DMA_Abort_IT+0x2b2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0201 	bic.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a3c      	ldr	r2, [pc, #240]	@ (8004b1c <HAL_DMA_Abort_IT+0x3a8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d072      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a3a      	ldr	r2, [pc, #232]	@ (8004b20 <HAL_DMA_Abort_IT+0x3ac>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d06d      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a39      	ldr	r2, [pc, #228]	@ (8004b24 <HAL_DMA_Abort_IT+0x3b0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d068      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a37      	ldr	r2, [pc, #220]	@ (8004b28 <HAL_DMA_Abort_IT+0x3b4>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d063      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a36      	ldr	r2, [pc, #216]	@ (8004b2c <HAL_DMA_Abort_IT+0x3b8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d05e      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a34      	ldr	r2, [pc, #208]	@ (8004b30 <HAL_DMA_Abort_IT+0x3bc>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d059      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a33      	ldr	r2, [pc, #204]	@ (8004b34 <HAL_DMA_Abort_IT+0x3c0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d054      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a31      	ldr	r2, [pc, #196]	@ (8004b38 <HAL_DMA_Abort_IT+0x3c4>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d04f      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a30      	ldr	r2, [pc, #192]	@ (8004b3c <HAL_DMA_Abort_IT+0x3c8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d04a      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a2e      	ldr	r2, [pc, #184]	@ (8004b40 <HAL_DMA_Abort_IT+0x3cc>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d045      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a2d      	ldr	r2, [pc, #180]	@ (8004b44 <HAL_DMA_Abort_IT+0x3d0>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d040      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a2b      	ldr	r2, [pc, #172]	@ (8004b48 <HAL_DMA_Abort_IT+0x3d4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d03b      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8004b4c <HAL_DMA_Abort_IT+0x3d8>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d036      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a28      	ldr	r2, [pc, #160]	@ (8004b50 <HAL_DMA_Abort_IT+0x3dc>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d031      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a27      	ldr	r2, [pc, #156]	@ (8004b54 <HAL_DMA_Abort_IT+0x3e0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d02c      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a25      	ldr	r2, [pc, #148]	@ (8004b58 <HAL_DMA_Abort_IT+0x3e4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d027      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a24      	ldr	r2, [pc, #144]	@ (8004b5c <HAL_DMA_Abort_IT+0x3e8>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d022      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a22      	ldr	r2, [pc, #136]	@ (8004b60 <HAL_DMA_Abort_IT+0x3ec>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d01d      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a21      	ldr	r2, [pc, #132]	@ (8004b64 <HAL_DMA_Abort_IT+0x3f0>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d018      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8004b68 <HAL_DMA_Abort_IT+0x3f4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d013      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1e      	ldr	r2, [pc, #120]	@ (8004b6c <HAL_DMA_Abort_IT+0x3f8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00e      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1c      	ldr	r2, [pc, #112]	@ (8004b70 <HAL_DMA_Abort_IT+0x3fc>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d009      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1b      	ldr	r2, [pc, #108]	@ (8004b74 <HAL_DMA_Abort_IT+0x400>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d004      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x3a2>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a19      	ldr	r2, [pc, #100]	@ (8004b78 <HAL_DMA_Abort_IT+0x404>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d132      	bne.n	8004b7c <HAL_DMA_Abort_IT+0x408>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e031      	b.n	8004b7e <HAL_DMA_Abort_IT+0x40a>
 8004b1a:	bf00      	nop
 8004b1c:	40020010 	.word	0x40020010
 8004b20:	40020028 	.word	0x40020028
 8004b24:	40020040 	.word	0x40020040
 8004b28:	40020058 	.word	0x40020058
 8004b2c:	40020070 	.word	0x40020070
 8004b30:	40020088 	.word	0x40020088
 8004b34:	400200a0 	.word	0x400200a0
 8004b38:	400200b8 	.word	0x400200b8
 8004b3c:	40020410 	.word	0x40020410
 8004b40:	40020428 	.word	0x40020428
 8004b44:	40020440 	.word	0x40020440
 8004b48:	40020458 	.word	0x40020458
 8004b4c:	40020470 	.word	0x40020470
 8004b50:	40020488 	.word	0x40020488
 8004b54:	400204a0 	.word	0x400204a0
 8004b58:	400204b8 	.word	0x400204b8
 8004b5c:	58025408 	.word	0x58025408
 8004b60:	5802541c 	.word	0x5802541c
 8004b64:	58025430 	.word	0x58025430
 8004b68:	58025444 	.word	0x58025444
 8004b6c:	58025458 	.word	0x58025458
 8004b70:	5802546c 	.word	0x5802546c
 8004b74:	58025480 	.word	0x58025480
 8004b78:	58025494 	.word	0x58025494
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d028      	beq.n	8004bd4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b90:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b96:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	409a      	lsls	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004bb0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00c      	beq.n	8004bd4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bc8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004bd2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop

08004c00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08a      	sub	sp, #40	@ 0x28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c0c:	4b67      	ldr	r3, [pc, #412]	@ (8004dac <HAL_DMA_IRQHandler+0x1ac>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a67      	ldr	r2, [pc, #412]	@ (8004db0 <HAL_DMA_IRQHandler+0x1b0>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	0a9b      	lsrs	r3, r3, #10
 8004c18:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c1e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c24:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a5f      	ldr	r2, [pc, #380]	@ (8004db4 <HAL_DMA_IRQHandler+0x1b4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d04a      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xd2>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a5d      	ldr	r2, [pc, #372]	@ (8004db8 <HAL_DMA_IRQHandler+0x1b8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d045      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xd2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a5c      	ldr	r2, [pc, #368]	@ (8004dbc <HAL_DMA_IRQHandler+0x1bc>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d040      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xd2>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a5a      	ldr	r2, [pc, #360]	@ (8004dc0 <HAL_DMA_IRQHandler+0x1c0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d03b      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xd2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a59      	ldr	r2, [pc, #356]	@ (8004dc4 <HAL_DMA_IRQHandler+0x1c4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d036      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xd2>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a57      	ldr	r2, [pc, #348]	@ (8004dc8 <HAL_DMA_IRQHandler+0x1c8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d031      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xd2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a56      	ldr	r2, [pc, #344]	@ (8004dcc <HAL_DMA_IRQHandler+0x1cc>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d02c      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xd2>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a54      	ldr	r2, [pc, #336]	@ (8004dd0 <HAL_DMA_IRQHandler+0x1d0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d027      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xd2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a53      	ldr	r2, [pc, #332]	@ (8004dd4 <HAL_DMA_IRQHandler+0x1d4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d022      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xd2>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a51      	ldr	r2, [pc, #324]	@ (8004dd8 <HAL_DMA_IRQHandler+0x1d8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d01d      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xd2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a50      	ldr	r2, [pc, #320]	@ (8004ddc <HAL_DMA_IRQHandler+0x1dc>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d018      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xd2>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a4e      	ldr	r2, [pc, #312]	@ (8004de0 <HAL_DMA_IRQHandler+0x1e0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d013      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xd2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a4d      	ldr	r2, [pc, #308]	@ (8004de4 <HAL_DMA_IRQHandler+0x1e4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00e      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xd2>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a4b      	ldr	r2, [pc, #300]	@ (8004de8 <HAL_DMA_IRQHandler+0x1e8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d009      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xd2>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a4a      	ldr	r2, [pc, #296]	@ (8004dec <HAL_DMA_IRQHandler+0x1ec>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d004      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xd2>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a48      	ldr	r2, [pc, #288]	@ (8004df0 <HAL_DMA_IRQHandler+0x1f0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d101      	bne.n	8004cd6 <HAL_DMA_IRQHandler+0xd6>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <HAL_DMA_IRQHandler+0xd8>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 842b 	beq.w	8005534 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce2:	f003 031f 	and.w	r3, r3, #31
 8004ce6:	2208      	movs	r2, #8
 8004ce8:	409a      	lsls	r2, r3
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	4013      	ands	r3, r2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 80a2 	beq.w	8004e38 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a2e      	ldr	r2, [pc, #184]	@ (8004db4 <HAL_DMA_IRQHandler+0x1b4>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d04a      	beq.n	8004d94 <HAL_DMA_IRQHandler+0x194>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a2d      	ldr	r2, [pc, #180]	@ (8004db8 <HAL_DMA_IRQHandler+0x1b8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d045      	beq.n	8004d94 <HAL_DMA_IRQHandler+0x194>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a2b      	ldr	r2, [pc, #172]	@ (8004dbc <HAL_DMA_IRQHandler+0x1bc>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d040      	beq.n	8004d94 <HAL_DMA_IRQHandler+0x194>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a2a      	ldr	r2, [pc, #168]	@ (8004dc0 <HAL_DMA_IRQHandler+0x1c0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d03b      	beq.n	8004d94 <HAL_DMA_IRQHandler+0x194>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a28      	ldr	r2, [pc, #160]	@ (8004dc4 <HAL_DMA_IRQHandler+0x1c4>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d036      	beq.n	8004d94 <HAL_DMA_IRQHandler+0x194>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a27      	ldr	r2, [pc, #156]	@ (8004dc8 <HAL_DMA_IRQHandler+0x1c8>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d031      	beq.n	8004d94 <HAL_DMA_IRQHandler+0x194>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a25      	ldr	r2, [pc, #148]	@ (8004dcc <HAL_DMA_IRQHandler+0x1cc>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d02c      	beq.n	8004d94 <HAL_DMA_IRQHandler+0x194>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a24      	ldr	r2, [pc, #144]	@ (8004dd0 <HAL_DMA_IRQHandler+0x1d0>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d027      	beq.n	8004d94 <HAL_DMA_IRQHandler+0x194>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a22      	ldr	r2, [pc, #136]	@ (8004dd4 <HAL_DMA_IRQHandler+0x1d4>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d022      	beq.n	8004d94 <HAL_DMA_IRQHandler+0x194>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a21      	ldr	r2, [pc, #132]	@ (8004dd8 <HAL_DMA_IRQHandler+0x1d8>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d01d      	beq.n	8004d94 <HAL_DMA_IRQHandler+0x194>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8004ddc <HAL_DMA_IRQHandler+0x1dc>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d018      	beq.n	8004d94 <HAL_DMA_IRQHandler+0x194>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a1e      	ldr	r2, [pc, #120]	@ (8004de0 <HAL_DMA_IRQHandler+0x1e0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d013      	beq.n	8004d94 <HAL_DMA_IRQHandler+0x194>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a1c      	ldr	r2, [pc, #112]	@ (8004de4 <HAL_DMA_IRQHandler+0x1e4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00e      	beq.n	8004d94 <HAL_DMA_IRQHandler+0x194>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8004de8 <HAL_DMA_IRQHandler+0x1e8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d009      	beq.n	8004d94 <HAL_DMA_IRQHandler+0x194>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a19      	ldr	r2, [pc, #100]	@ (8004dec <HAL_DMA_IRQHandler+0x1ec>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d004      	beq.n	8004d94 <HAL_DMA_IRQHandler+0x194>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a18      	ldr	r2, [pc, #96]	@ (8004df0 <HAL_DMA_IRQHandler+0x1f0>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d12f      	bne.n	8004df4 <HAL_DMA_IRQHandler+0x1f4>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	bf14      	ite	ne
 8004da2:	2301      	movne	r3, #1
 8004da4:	2300      	moveq	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	e02e      	b.n	8004e08 <HAL_DMA_IRQHandler+0x208>
 8004daa:	bf00      	nop
 8004dac:	24000018 	.word	0x24000018
 8004db0:	1b4e81b5 	.word	0x1b4e81b5
 8004db4:	40020010 	.word	0x40020010
 8004db8:	40020028 	.word	0x40020028
 8004dbc:	40020040 	.word	0x40020040
 8004dc0:	40020058 	.word	0x40020058
 8004dc4:	40020070 	.word	0x40020070
 8004dc8:	40020088 	.word	0x40020088
 8004dcc:	400200a0 	.word	0x400200a0
 8004dd0:	400200b8 	.word	0x400200b8
 8004dd4:	40020410 	.word	0x40020410
 8004dd8:	40020428 	.word	0x40020428
 8004ddc:	40020440 	.word	0x40020440
 8004de0:	40020458 	.word	0x40020458
 8004de4:	40020470 	.word	0x40020470
 8004de8:	40020488 	.word	0x40020488
 8004dec:	400204a0 	.word	0x400204a0
 8004df0:	400204b8 	.word	0x400204b8
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0308 	and.w	r3, r3, #8
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bf14      	ite	ne
 8004e02:	2301      	movne	r3, #1
 8004e04:	2300      	moveq	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d015      	beq.n	8004e38 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0204 	bic.w	r2, r2, #4
 8004e1a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e20:	f003 031f 	and.w	r3, r3, #31
 8004e24:	2208      	movs	r2, #8
 8004e26:	409a      	lsls	r2, r3
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e30:	f043 0201 	orr.w	r2, r3, #1
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e3c:	f003 031f 	and.w	r3, r3, #31
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	fa22 f303 	lsr.w	r3, r2, r3
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d06e      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a69      	ldr	r2, [pc, #420]	@ (8004ff8 <HAL_DMA_IRQHandler+0x3f8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d04a      	beq.n	8004eee <HAL_DMA_IRQHandler+0x2ee>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a67      	ldr	r2, [pc, #412]	@ (8004ffc <HAL_DMA_IRQHandler+0x3fc>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d045      	beq.n	8004eee <HAL_DMA_IRQHandler+0x2ee>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a66      	ldr	r2, [pc, #408]	@ (8005000 <HAL_DMA_IRQHandler+0x400>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d040      	beq.n	8004eee <HAL_DMA_IRQHandler+0x2ee>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a64      	ldr	r2, [pc, #400]	@ (8005004 <HAL_DMA_IRQHandler+0x404>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d03b      	beq.n	8004eee <HAL_DMA_IRQHandler+0x2ee>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a63      	ldr	r2, [pc, #396]	@ (8005008 <HAL_DMA_IRQHandler+0x408>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d036      	beq.n	8004eee <HAL_DMA_IRQHandler+0x2ee>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a61      	ldr	r2, [pc, #388]	@ (800500c <HAL_DMA_IRQHandler+0x40c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d031      	beq.n	8004eee <HAL_DMA_IRQHandler+0x2ee>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a60      	ldr	r2, [pc, #384]	@ (8005010 <HAL_DMA_IRQHandler+0x410>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d02c      	beq.n	8004eee <HAL_DMA_IRQHandler+0x2ee>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a5e      	ldr	r2, [pc, #376]	@ (8005014 <HAL_DMA_IRQHandler+0x414>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d027      	beq.n	8004eee <HAL_DMA_IRQHandler+0x2ee>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a5d      	ldr	r2, [pc, #372]	@ (8005018 <HAL_DMA_IRQHandler+0x418>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d022      	beq.n	8004eee <HAL_DMA_IRQHandler+0x2ee>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a5b      	ldr	r2, [pc, #364]	@ (800501c <HAL_DMA_IRQHandler+0x41c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d01d      	beq.n	8004eee <HAL_DMA_IRQHandler+0x2ee>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a5a      	ldr	r2, [pc, #360]	@ (8005020 <HAL_DMA_IRQHandler+0x420>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d018      	beq.n	8004eee <HAL_DMA_IRQHandler+0x2ee>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a58      	ldr	r2, [pc, #352]	@ (8005024 <HAL_DMA_IRQHandler+0x424>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d013      	beq.n	8004eee <HAL_DMA_IRQHandler+0x2ee>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a57      	ldr	r2, [pc, #348]	@ (8005028 <HAL_DMA_IRQHandler+0x428>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00e      	beq.n	8004eee <HAL_DMA_IRQHandler+0x2ee>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a55      	ldr	r2, [pc, #340]	@ (800502c <HAL_DMA_IRQHandler+0x42c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d009      	beq.n	8004eee <HAL_DMA_IRQHandler+0x2ee>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a54      	ldr	r2, [pc, #336]	@ (8005030 <HAL_DMA_IRQHandler+0x430>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d004      	beq.n	8004eee <HAL_DMA_IRQHandler+0x2ee>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a52      	ldr	r2, [pc, #328]	@ (8005034 <HAL_DMA_IRQHandler+0x434>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d10a      	bne.n	8004f04 <HAL_DMA_IRQHandler+0x304>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	bf14      	ite	ne
 8004efc:	2301      	movne	r3, #1
 8004efe:	2300      	moveq	r3, #0
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	e003      	b.n	8004f0c <HAL_DMA_IRQHandler+0x30c>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00d      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f14:	f003 031f 	and.w	r3, r3, #31
 8004f18:	2201      	movs	r2, #1
 8004f1a:	409a      	lsls	r2, r3
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f24:	f043 0202 	orr.w	r2, r3, #2
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f30:	f003 031f 	and.w	r3, r3, #31
 8004f34:	2204      	movs	r2, #4
 8004f36:	409a      	lsls	r2, r3
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 808f 	beq.w	8005060 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a2c      	ldr	r2, [pc, #176]	@ (8004ff8 <HAL_DMA_IRQHandler+0x3f8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d04a      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x3e2>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a2a      	ldr	r2, [pc, #168]	@ (8004ffc <HAL_DMA_IRQHandler+0x3fc>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d045      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x3e2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a29      	ldr	r2, [pc, #164]	@ (8005000 <HAL_DMA_IRQHandler+0x400>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d040      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x3e2>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a27      	ldr	r2, [pc, #156]	@ (8005004 <HAL_DMA_IRQHandler+0x404>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d03b      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x3e2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a26      	ldr	r2, [pc, #152]	@ (8005008 <HAL_DMA_IRQHandler+0x408>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d036      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x3e2>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a24      	ldr	r2, [pc, #144]	@ (800500c <HAL_DMA_IRQHandler+0x40c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d031      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x3e2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a23      	ldr	r2, [pc, #140]	@ (8005010 <HAL_DMA_IRQHandler+0x410>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d02c      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x3e2>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a21      	ldr	r2, [pc, #132]	@ (8005014 <HAL_DMA_IRQHandler+0x414>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d027      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x3e2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a20      	ldr	r2, [pc, #128]	@ (8005018 <HAL_DMA_IRQHandler+0x418>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d022      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x3e2>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a1e      	ldr	r2, [pc, #120]	@ (800501c <HAL_DMA_IRQHandler+0x41c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01d      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x3e2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a1d      	ldr	r2, [pc, #116]	@ (8005020 <HAL_DMA_IRQHandler+0x420>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d018      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x3e2>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8005024 <HAL_DMA_IRQHandler+0x424>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d013      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x3e2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a1a      	ldr	r2, [pc, #104]	@ (8005028 <HAL_DMA_IRQHandler+0x428>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d00e      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x3e2>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a18      	ldr	r2, [pc, #96]	@ (800502c <HAL_DMA_IRQHandler+0x42c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d009      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x3e2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a17      	ldr	r2, [pc, #92]	@ (8005030 <HAL_DMA_IRQHandler+0x430>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d004      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x3e2>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a15      	ldr	r2, [pc, #84]	@ (8005034 <HAL_DMA_IRQHandler+0x434>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d12a      	bne.n	8005038 <HAL_DMA_IRQHandler+0x438>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	bf14      	ite	ne
 8004ff0:	2301      	movne	r3, #1
 8004ff2:	2300      	moveq	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	e023      	b.n	8005040 <HAL_DMA_IRQHandler+0x440>
 8004ff8:	40020010 	.word	0x40020010
 8004ffc:	40020028 	.word	0x40020028
 8005000:	40020040 	.word	0x40020040
 8005004:	40020058 	.word	0x40020058
 8005008:	40020070 	.word	0x40020070
 800500c:	40020088 	.word	0x40020088
 8005010:	400200a0 	.word	0x400200a0
 8005014:	400200b8 	.word	0x400200b8
 8005018:	40020410 	.word	0x40020410
 800501c:	40020428 	.word	0x40020428
 8005020:	40020440 	.word	0x40020440
 8005024:	40020458 	.word	0x40020458
 8005028:	40020470 	.word	0x40020470
 800502c:	40020488 	.word	0x40020488
 8005030:	400204a0 	.word	0x400204a0
 8005034:	400204b8 	.word	0x400204b8
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2300      	movs	r3, #0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00d      	beq.n	8005060 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005048:	f003 031f 	and.w	r3, r3, #31
 800504c:	2204      	movs	r2, #4
 800504e:	409a      	lsls	r2, r3
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005058:	f043 0204 	orr.w	r2, r3, #4
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005064:	f003 031f 	and.w	r3, r3, #31
 8005068:	2210      	movs	r2, #16
 800506a:	409a      	lsls	r2, r3
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	4013      	ands	r3, r2
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 80a6 	beq.w	80051c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a85      	ldr	r2, [pc, #532]	@ (8005290 <HAL_DMA_IRQHandler+0x690>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d04a      	beq.n	8005116 <HAL_DMA_IRQHandler+0x516>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a83      	ldr	r2, [pc, #524]	@ (8005294 <HAL_DMA_IRQHandler+0x694>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d045      	beq.n	8005116 <HAL_DMA_IRQHandler+0x516>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a82      	ldr	r2, [pc, #520]	@ (8005298 <HAL_DMA_IRQHandler+0x698>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d040      	beq.n	8005116 <HAL_DMA_IRQHandler+0x516>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a80      	ldr	r2, [pc, #512]	@ (800529c <HAL_DMA_IRQHandler+0x69c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d03b      	beq.n	8005116 <HAL_DMA_IRQHandler+0x516>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a7f      	ldr	r2, [pc, #508]	@ (80052a0 <HAL_DMA_IRQHandler+0x6a0>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d036      	beq.n	8005116 <HAL_DMA_IRQHandler+0x516>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a7d      	ldr	r2, [pc, #500]	@ (80052a4 <HAL_DMA_IRQHandler+0x6a4>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d031      	beq.n	8005116 <HAL_DMA_IRQHandler+0x516>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a7c      	ldr	r2, [pc, #496]	@ (80052a8 <HAL_DMA_IRQHandler+0x6a8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d02c      	beq.n	8005116 <HAL_DMA_IRQHandler+0x516>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a7a      	ldr	r2, [pc, #488]	@ (80052ac <HAL_DMA_IRQHandler+0x6ac>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d027      	beq.n	8005116 <HAL_DMA_IRQHandler+0x516>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a79      	ldr	r2, [pc, #484]	@ (80052b0 <HAL_DMA_IRQHandler+0x6b0>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d022      	beq.n	8005116 <HAL_DMA_IRQHandler+0x516>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a77      	ldr	r2, [pc, #476]	@ (80052b4 <HAL_DMA_IRQHandler+0x6b4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d01d      	beq.n	8005116 <HAL_DMA_IRQHandler+0x516>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a76      	ldr	r2, [pc, #472]	@ (80052b8 <HAL_DMA_IRQHandler+0x6b8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d018      	beq.n	8005116 <HAL_DMA_IRQHandler+0x516>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a74      	ldr	r2, [pc, #464]	@ (80052bc <HAL_DMA_IRQHandler+0x6bc>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d013      	beq.n	8005116 <HAL_DMA_IRQHandler+0x516>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a73      	ldr	r2, [pc, #460]	@ (80052c0 <HAL_DMA_IRQHandler+0x6c0>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d00e      	beq.n	8005116 <HAL_DMA_IRQHandler+0x516>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a71      	ldr	r2, [pc, #452]	@ (80052c4 <HAL_DMA_IRQHandler+0x6c4>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d009      	beq.n	8005116 <HAL_DMA_IRQHandler+0x516>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a70      	ldr	r2, [pc, #448]	@ (80052c8 <HAL_DMA_IRQHandler+0x6c8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d004      	beq.n	8005116 <HAL_DMA_IRQHandler+0x516>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a6e      	ldr	r2, [pc, #440]	@ (80052cc <HAL_DMA_IRQHandler+0x6cc>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d10a      	bne.n	800512c <HAL_DMA_IRQHandler+0x52c>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0308 	and.w	r3, r3, #8
 8005120:	2b00      	cmp	r3, #0
 8005122:	bf14      	ite	ne
 8005124:	2301      	movne	r3, #1
 8005126:	2300      	moveq	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	e009      	b.n	8005140 <HAL_DMA_IRQHandler+0x540>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	2b00      	cmp	r3, #0
 8005138:	bf14      	ite	ne
 800513a:	2301      	movne	r3, #1
 800513c:	2300      	moveq	r3, #0
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d03e      	beq.n	80051c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005148:	f003 031f 	and.w	r3, r3, #31
 800514c:	2210      	movs	r2, #16
 800514e:	409a      	lsls	r2, r3
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d018      	beq.n	8005194 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d108      	bne.n	8005182 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005174:	2b00      	cmp	r3, #0
 8005176:	d024      	beq.n	80051c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	4798      	blx	r3
 8005180:	e01f      	b.n	80051c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005186:	2b00      	cmp	r3, #0
 8005188:	d01b      	beq.n	80051c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	4798      	blx	r3
 8005192:	e016      	b.n	80051c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d107      	bne.n	80051b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0208 	bic.w	r2, r2, #8
 80051b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c6:	f003 031f 	and.w	r3, r3, #31
 80051ca:	2220      	movs	r2, #32
 80051cc:	409a      	lsls	r2, r3
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	4013      	ands	r3, r2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 8110 	beq.w	80053f8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a2c      	ldr	r2, [pc, #176]	@ (8005290 <HAL_DMA_IRQHandler+0x690>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d04a      	beq.n	8005278 <HAL_DMA_IRQHandler+0x678>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a2b      	ldr	r2, [pc, #172]	@ (8005294 <HAL_DMA_IRQHandler+0x694>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d045      	beq.n	8005278 <HAL_DMA_IRQHandler+0x678>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a29      	ldr	r2, [pc, #164]	@ (8005298 <HAL_DMA_IRQHandler+0x698>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d040      	beq.n	8005278 <HAL_DMA_IRQHandler+0x678>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a28      	ldr	r2, [pc, #160]	@ (800529c <HAL_DMA_IRQHandler+0x69c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d03b      	beq.n	8005278 <HAL_DMA_IRQHandler+0x678>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a26      	ldr	r2, [pc, #152]	@ (80052a0 <HAL_DMA_IRQHandler+0x6a0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d036      	beq.n	8005278 <HAL_DMA_IRQHandler+0x678>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a25      	ldr	r2, [pc, #148]	@ (80052a4 <HAL_DMA_IRQHandler+0x6a4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d031      	beq.n	8005278 <HAL_DMA_IRQHandler+0x678>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a23      	ldr	r2, [pc, #140]	@ (80052a8 <HAL_DMA_IRQHandler+0x6a8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d02c      	beq.n	8005278 <HAL_DMA_IRQHandler+0x678>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a22      	ldr	r2, [pc, #136]	@ (80052ac <HAL_DMA_IRQHandler+0x6ac>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d027      	beq.n	8005278 <HAL_DMA_IRQHandler+0x678>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a20      	ldr	r2, [pc, #128]	@ (80052b0 <HAL_DMA_IRQHandler+0x6b0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d022      	beq.n	8005278 <HAL_DMA_IRQHandler+0x678>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1f      	ldr	r2, [pc, #124]	@ (80052b4 <HAL_DMA_IRQHandler+0x6b4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d01d      	beq.n	8005278 <HAL_DMA_IRQHandler+0x678>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a1d      	ldr	r2, [pc, #116]	@ (80052b8 <HAL_DMA_IRQHandler+0x6b8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d018      	beq.n	8005278 <HAL_DMA_IRQHandler+0x678>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a1c      	ldr	r2, [pc, #112]	@ (80052bc <HAL_DMA_IRQHandler+0x6bc>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d013      	beq.n	8005278 <HAL_DMA_IRQHandler+0x678>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a1a      	ldr	r2, [pc, #104]	@ (80052c0 <HAL_DMA_IRQHandler+0x6c0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00e      	beq.n	8005278 <HAL_DMA_IRQHandler+0x678>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a19      	ldr	r2, [pc, #100]	@ (80052c4 <HAL_DMA_IRQHandler+0x6c4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d009      	beq.n	8005278 <HAL_DMA_IRQHandler+0x678>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a17      	ldr	r2, [pc, #92]	@ (80052c8 <HAL_DMA_IRQHandler+0x6c8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d004      	beq.n	8005278 <HAL_DMA_IRQHandler+0x678>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a16      	ldr	r2, [pc, #88]	@ (80052cc <HAL_DMA_IRQHandler+0x6cc>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d12b      	bne.n	80052d0 <HAL_DMA_IRQHandler+0x6d0>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0310 	and.w	r3, r3, #16
 8005282:	2b00      	cmp	r3, #0
 8005284:	bf14      	ite	ne
 8005286:	2301      	movne	r3, #1
 8005288:	2300      	moveq	r3, #0
 800528a:	b2db      	uxtb	r3, r3
 800528c:	e02a      	b.n	80052e4 <HAL_DMA_IRQHandler+0x6e4>
 800528e:	bf00      	nop
 8005290:	40020010 	.word	0x40020010
 8005294:	40020028 	.word	0x40020028
 8005298:	40020040 	.word	0x40020040
 800529c:	40020058 	.word	0x40020058
 80052a0:	40020070 	.word	0x40020070
 80052a4:	40020088 	.word	0x40020088
 80052a8:	400200a0 	.word	0x400200a0
 80052ac:	400200b8 	.word	0x400200b8
 80052b0:	40020410 	.word	0x40020410
 80052b4:	40020428 	.word	0x40020428
 80052b8:	40020440 	.word	0x40020440
 80052bc:	40020458 	.word	0x40020458
 80052c0:	40020470 	.word	0x40020470
 80052c4:	40020488 	.word	0x40020488
 80052c8:	400204a0 	.word	0x400204a0
 80052cc:	400204b8 	.word	0x400204b8
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	bf14      	ite	ne
 80052de:	2301      	movne	r3, #1
 80052e0:	2300      	moveq	r3, #0
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 8087 	beq.w	80053f8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ee:	f003 031f 	and.w	r3, r3, #31
 80052f2:	2220      	movs	r2, #32
 80052f4:	409a      	lsls	r2, r3
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b04      	cmp	r3, #4
 8005304:	d139      	bne.n	800537a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0216 	bic.w	r2, r2, #22
 8005314:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695a      	ldr	r2, [r3, #20]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005324:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532a:	2b00      	cmp	r3, #0
 800532c:	d103      	bne.n	8005336 <HAL_DMA_IRQHandler+0x736>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005332:	2b00      	cmp	r3, #0
 8005334:	d007      	beq.n	8005346 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0208 	bic.w	r2, r2, #8
 8005344:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800534a:	f003 031f 	and.w	r3, r3, #31
 800534e:	223f      	movs	r2, #63	@ 0x3f
 8005350:	409a      	lsls	r2, r3
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 834a 	beq.w	8005a04 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	4798      	blx	r3
          }
          return;
 8005378:	e344      	b.n	8005a04 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d018      	beq.n	80053ba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d108      	bne.n	80053a8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800539a:	2b00      	cmp	r3, #0
 800539c:	d02c      	beq.n	80053f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	4798      	blx	r3
 80053a6:	e027      	b.n	80053f8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d023      	beq.n	80053f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	4798      	blx	r3
 80053b8:	e01e      	b.n	80053f8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10f      	bne.n	80053e8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0210 	bic.w	r2, r2, #16
 80053d6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 8306 	beq.w	8005a0e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 8088 	beq.w	8005520 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2204      	movs	r2, #4
 8005414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a7a      	ldr	r2, [pc, #488]	@ (8005608 <HAL_DMA_IRQHandler+0xa08>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d04a      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x8b8>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a79      	ldr	r2, [pc, #484]	@ (800560c <HAL_DMA_IRQHandler+0xa0c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d045      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x8b8>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a77      	ldr	r2, [pc, #476]	@ (8005610 <HAL_DMA_IRQHandler+0xa10>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d040      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x8b8>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a76      	ldr	r2, [pc, #472]	@ (8005614 <HAL_DMA_IRQHandler+0xa14>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d03b      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x8b8>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a74      	ldr	r2, [pc, #464]	@ (8005618 <HAL_DMA_IRQHandler+0xa18>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d036      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x8b8>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a73      	ldr	r2, [pc, #460]	@ (800561c <HAL_DMA_IRQHandler+0xa1c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d031      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x8b8>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a71      	ldr	r2, [pc, #452]	@ (8005620 <HAL_DMA_IRQHandler+0xa20>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d02c      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x8b8>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a70      	ldr	r2, [pc, #448]	@ (8005624 <HAL_DMA_IRQHandler+0xa24>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d027      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x8b8>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a6e      	ldr	r2, [pc, #440]	@ (8005628 <HAL_DMA_IRQHandler+0xa28>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d022      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x8b8>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a6d      	ldr	r2, [pc, #436]	@ (800562c <HAL_DMA_IRQHandler+0xa2c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d01d      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x8b8>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a6b      	ldr	r2, [pc, #428]	@ (8005630 <HAL_DMA_IRQHandler+0xa30>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d018      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x8b8>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a6a      	ldr	r2, [pc, #424]	@ (8005634 <HAL_DMA_IRQHandler+0xa34>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d013      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x8b8>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a68      	ldr	r2, [pc, #416]	@ (8005638 <HAL_DMA_IRQHandler+0xa38>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d00e      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x8b8>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a67      	ldr	r2, [pc, #412]	@ (800563c <HAL_DMA_IRQHandler+0xa3c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d009      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x8b8>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a65      	ldr	r2, [pc, #404]	@ (8005640 <HAL_DMA_IRQHandler+0xa40>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d004      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x8b8>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a64      	ldr	r2, [pc, #400]	@ (8005644 <HAL_DMA_IRQHandler+0xa44>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d108      	bne.n	80054ca <HAL_DMA_IRQHandler+0x8ca>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0201 	bic.w	r2, r2, #1
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	e007      	b.n	80054da <HAL_DMA_IRQHandler+0x8da>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0201 	bic.w	r2, r2, #1
 80054d8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	3301      	adds	r3, #1
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d307      	bcc.n	80054f6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1f2      	bne.n	80054da <HAL_DMA_IRQHandler+0x8da>
 80054f4:	e000      	b.n	80054f8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80054f6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d004      	beq.n	8005510 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2203      	movs	r2, #3
 800550a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800550e:	e003      	b.n	8005518 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 8272 	beq.w	8005a0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	4798      	blx	r3
 8005532:	e26c      	b.n	8005a0e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a43      	ldr	r2, [pc, #268]	@ (8005648 <HAL_DMA_IRQHandler+0xa48>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d022      	beq.n	8005584 <HAL_DMA_IRQHandler+0x984>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a42      	ldr	r2, [pc, #264]	@ (800564c <HAL_DMA_IRQHandler+0xa4c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d01d      	beq.n	8005584 <HAL_DMA_IRQHandler+0x984>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a40      	ldr	r2, [pc, #256]	@ (8005650 <HAL_DMA_IRQHandler+0xa50>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d018      	beq.n	8005584 <HAL_DMA_IRQHandler+0x984>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a3f      	ldr	r2, [pc, #252]	@ (8005654 <HAL_DMA_IRQHandler+0xa54>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d013      	beq.n	8005584 <HAL_DMA_IRQHandler+0x984>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a3d      	ldr	r2, [pc, #244]	@ (8005658 <HAL_DMA_IRQHandler+0xa58>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00e      	beq.n	8005584 <HAL_DMA_IRQHandler+0x984>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a3c      	ldr	r2, [pc, #240]	@ (800565c <HAL_DMA_IRQHandler+0xa5c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d009      	beq.n	8005584 <HAL_DMA_IRQHandler+0x984>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a3a      	ldr	r2, [pc, #232]	@ (8005660 <HAL_DMA_IRQHandler+0xa60>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d004      	beq.n	8005584 <HAL_DMA_IRQHandler+0x984>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a39      	ldr	r2, [pc, #228]	@ (8005664 <HAL_DMA_IRQHandler+0xa64>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d101      	bne.n	8005588 <HAL_DMA_IRQHandler+0x988>
 8005584:	2301      	movs	r3, #1
 8005586:	e000      	b.n	800558a <HAL_DMA_IRQHandler+0x98a>
 8005588:	2300      	movs	r3, #0
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 823f 	beq.w	8005a0e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800559c:	f003 031f 	and.w	r3, r3, #31
 80055a0:	2204      	movs	r2, #4
 80055a2:	409a      	lsls	r2, r3
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	4013      	ands	r3, r2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 80cd 	beq.w	8005748 <HAL_DMA_IRQHandler+0xb48>
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 80c7 	beq.w	8005748 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055be:	f003 031f 	and.w	r3, r3, #31
 80055c2:	2204      	movs	r2, #4
 80055c4:	409a      	lsls	r2, r3
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d049      	beq.n	8005668 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d109      	bne.n	80055f2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 8210 	beq.w	8005a08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055f0:	e20a      	b.n	8005a08 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 8206 	beq.w	8005a08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005604:	e200      	b.n	8005a08 <HAL_DMA_IRQHandler+0xe08>
 8005606:	bf00      	nop
 8005608:	40020010 	.word	0x40020010
 800560c:	40020028 	.word	0x40020028
 8005610:	40020040 	.word	0x40020040
 8005614:	40020058 	.word	0x40020058
 8005618:	40020070 	.word	0x40020070
 800561c:	40020088 	.word	0x40020088
 8005620:	400200a0 	.word	0x400200a0
 8005624:	400200b8 	.word	0x400200b8
 8005628:	40020410 	.word	0x40020410
 800562c:	40020428 	.word	0x40020428
 8005630:	40020440 	.word	0x40020440
 8005634:	40020458 	.word	0x40020458
 8005638:	40020470 	.word	0x40020470
 800563c:	40020488 	.word	0x40020488
 8005640:	400204a0 	.word	0x400204a0
 8005644:	400204b8 	.word	0x400204b8
 8005648:	58025408 	.word	0x58025408
 800564c:	5802541c 	.word	0x5802541c
 8005650:	58025430 	.word	0x58025430
 8005654:	58025444 	.word	0x58025444
 8005658:	58025458 	.word	0x58025458
 800565c:	5802546c 	.word	0x5802546c
 8005660:	58025480 	.word	0x58025480
 8005664:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b00      	cmp	r3, #0
 8005670:	d160      	bne.n	8005734 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a7f      	ldr	r2, [pc, #508]	@ (8005874 <HAL_DMA_IRQHandler+0xc74>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d04a      	beq.n	8005712 <HAL_DMA_IRQHandler+0xb12>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a7d      	ldr	r2, [pc, #500]	@ (8005878 <HAL_DMA_IRQHandler+0xc78>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d045      	beq.n	8005712 <HAL_DMA_IRQHandler+0xb12>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a7c      	ldr	r2, [pc, #496]	@ (800587c <HAL_DMA_IRQHandler+0xc7c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d040      	beq.n	8005712 <HAL_DMA_IRQHandler+0xb12>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a7a      	ldr	r2, [pc, #488]	@ (8005880 <HAL_DMA_IRQHandler+0xc80>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d03b      	beq.n	8005712 <HAL_DMA_IRQHandler+0xb12>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a79      	ldr	r2, [pc, #484]	@ (8005884 <HAL_DMA_IRQHandler+0xc84>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d036      	beq.n	8005712 <HAL_DMA_IRQHandler+0xb12>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a77      	ldr	r2, [pc, #476]	@ (8005888 <HAL_DMA_IRQHandler+0xc88>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d031      	beq.n	8005712 <HAL_DMA_IRQHandler+0xb12>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a76      	ldr	r2, [pc, #472]	@ (800588c <HAL_DMA_IRQHandler+0xc8c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d02c      	beq.n	8005712 <HAL_DMA_IRQHandler+0xb12>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a74      	ldr	r2, [pc, #464]	@ (8005890 <HAL_DMA_IRQHandler+0xc90>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d027      	beq.n	8005712 <HAL_DMA_IRQHandler+0xb12>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a73      	ldr	r2, [pc, #460]	@ (8005894 <HAL_DMA_IRQHandler+0xc94>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d022      	beq.n	8005712 <HAL_DMA_IRQHandler+0xb12>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a71      	ldr	r2, [pc, #452]	@ (8005898 <HAL_DMA_IRQHandler+0xc98>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d01d      	beq.n	8005712 <HAL_DMA_IRQHandler+0xb12>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a70      	ldr	r2, [pc, #448]	@ (800589c <HAL_DMA_IRQHandler+0xc9c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d018      	beq.n	8005712 <HAL_DMA_IRQHandler+0xb12>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a6e      	ldr	r2, [pc, #440]	@ (80058a0 <HAL_DMA_IRQHandler+0xca0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d013      	beq.n	8005712 <HAL_DMA_IRQHandler+0xb12>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a6d      	ldr	r2, [pc, #436]	@ (80058a4 <HAL_DMA_IRQHandler+0xca4>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00e      	beq.n	8005712 <HAL_DMA_IRQHandler+0xb12>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a6b      	ldr	r2, [pc, #428]	@ (80058a8 <HAL_DMA_IRQHandler+0xca8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d009      	beq.n	8005712 <HAL_DMA_IRQHandler+0xb12>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a6a      	ldr	r2, [pc, #424]	@ (80058ac <HAL_DMA_IRQHandler+0xcac>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d004      	beq.n	8005712 <HAL_DMA_IRQHandler+0xb12>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a68      	ldr	r2, [pc, #416]	@ (80058b0 <HAL_DMA_IRQHandler+0xcb0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d108      	bne.n	8005724 <HAL_DMA_IRQHandler+0xb24>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0208 	bic.w	r2, r2, #8
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	e007      	b.n	8005734 <HAL_DMA_IRQHandler+0xb34>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0204 	bic.w	r2, r2, #4
 8005732:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 8165 	beq.w	8005a08 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005746:	e15f      	b.n	8005a08 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800574c:	f003 031f 	and.w	r3, r3, #31
 8005750:	2202      	movs	r2, #2
 8005752:	409a      	lsls	r2, r3
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	4013      	ands	r3, r2
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 80c5 	beq.w	80058e8 <HAL_DMA_IRQHandler+0xce8>
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 80bf 	beq.w	80058e8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800576e:	f003 031f 	and.w	r3, r3, #31
 8005772:	2202      	movs	r2, #2
 8005774:	409a      	lsls	r2, r3
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d018      	beq.n	80057b6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d109      	bne.n	80057a2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 813a 	beq.w	8005a0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057a0:	e134      	b.n	8005a0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 8130 	beq.w	8005a0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057b4:	e12a      	b.n	8005a0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f040 8089 	bne.w	80058d4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a2b      	ldr	r2, [pc, #172]	@ (8005874 <HAL_DMA_IRQHandler+0xc74>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d04a      	beq.n	8005862 <HAL_DMA_IRQHandler+0xc62>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a29      	ldr	r2, [pc, #164]	@ (8005878 <HAL_DMA_IRQHandler+0xc78>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d045      	beq.n	8005862 <HAL_DMA_IRQHandler+0xc62>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a28      	ldr	r2, [pc, #160]	@ (800587c <HAL_DMA_IRQHandler+0xc7c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d040      	beq.n	8005862 <HAL_DMA_IRQHandler+0xc62>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a26      	ldr	r2, [pc, #152]	@ (8005880 <HAL_DMA_IRQHandler+0xc80>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d03b      	beq.n	8005862 <HAL_DMA_IRQHandler+0xc62>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a25      	ldr	r2, [pc, #148]	@ (8005884 <HAL_DMA_IRQHandler+0xc84>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d036      	beq.n	8005862 <HAL_DMA_IRQHandler+0xc62>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a23      	ldr	r2, [pc, #140]	@ (8005888 <HAL_DMA_IRQHandler+0xc88>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d031      	beq.n	8005862 <HAL_DMA_IRQHandler+0xc62>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a22      	ldr	r2, [pc, #136]	@ (800588c <HAL_DMA_IRQHandler+0xc8c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d02c      	beq.n	8005862 <HAL_DMA_IRQHandler+0xc62>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a20      	ldr	r2, [pc, #128]	@ (8005890 <HAL_DMA_IRQHandler+0xc90>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d027      	beq.n	8005862 <HAL_DMA_IRQHandler+0xc62>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a1f      	ldr	r2, [pc, #124]	@ (8005894 <HAL_DMA_IRQHandler+0xc94>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d022      	beq.n	8005862 <HAL_DMA_IRQHandler+0xc62>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a1d      	ldr	r2, [pc, #116]	@ (8005898 <HAL_DMA_IRQHandler+0xc98>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d01d      	beq.n	8005862 <HAL_DMA_IRQHandler+0xc62>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a1c      	ldr	r2, [pc, #112]	@ (800589c <HAL_DMA_IRQHandler+0xc9c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d018      	beq.n	8005862 <HAL_DMA_IRQHandler+0xc62>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a1a      	ldr	r2, [pc, #104]	@ (80058a0 <HAL_DMA_IRQHandler+0xca0>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d013      	beq.n	8005862 <HAL_DMA_IRQHandler+0xc62>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a19      	ldr	r2, [pc, #100]	@ (80058a4 <HAL_DMA_IRQHandler+0xca4>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d00e      	beq.n	8005862 <HAL_DMA_IRQHandler+0xc62>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a17      	ldr	r2, [pc, #92]	@ (80058a8 <HAL_DMA_IRQHandler+0xca8>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d009      	beq.n	8005862 <HAL_DMA_IRQHandler+0xc62>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a16      	ldr	r2, [pc, #88]	@ (80058ac <HAL_DMA_IRQHandler+0xcac>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d004      	beq.n	8005862 <HAL_DMA_IRQHandler+0xc62>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a14      	ldr	r2, [pc, #80]	@ (80058b0 <HAL_DMA_IRQHandler+0xcb0>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d128      	bne.n	80058b4 <HAL_DMA_IRQHandler+0xcb4>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0214 	bic.w	r2, r2, #20
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	e027      	b.n	80058c4 <HAL_DMA_IRQHandler+0xcc4>
 8005874:	40020010 	.word	0x40020010
 8005878:	40020028 	.word	0x40020028
 800587c:	40020040 	.word	0x40020040
 8005880:	40020058 	.word	0x40020058
 8005884:	40020070 	.word	0x40020070
 8005888:	40020088 	.word	0x40020088
 800588c:	400200a0 	.word	0x400200a0
 8005890:	400200b8 	.word	0x400200b8
 8005894:	40020410 	.word	0x40020410
 8005898:	40020428 	.word	0x40020428
 800589c:	40020440 	.word	0x40020440
 80058a0:	40020458 	.word	0x40020458
 80058a4:	40020470 	.word	0x40020470
 80058a8:	40020488 	.word	0x40020488
 80058ac:	400204a0 	.word	0x400204a0
 80058b0:	400204b8 	.word	0x400204b8
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 020a 	bic.w	r2, r2, #10
 80058c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 8097 	beq.w	8005a0c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058e6:	e091      	b.n	8005a0c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ec:	f003 031f 	and.w	r3, r3, #31
 80058f0:	2208      	movs	r2, #8
 80058f2:	409a      	lsls	r2, r3
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	4013      	ands	r3, r2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 8088 	beq.w	8005a0e <HAL_DMA_IRQHandler+0xe0e>
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 8082 	beq.w	8005a0e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a41      	ldr	r2, [pc, #260]	@ (8005a14 <HAL_DMA_IRQHandler+0xe14>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d04a      	beq.n	80059aa <HAL_DMA_IRQHandler+0xdaa>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a3f      	ldr	r2, [pc, #252]	@ (8005a18 <HAL_DMA_IRQHandler+0xe18>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d045      	beq.n	80059aa <HAL_DMA_IRQHandler+0xdaa>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a3e      	ldr	r2, [pc, #248]	@ (8005a1c <HAL_DMA_IRQHandler+0xe1c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d040      	beq.n	80059aa <HAL_DMA_IRQHandler+0xdaa>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a3c      	ldr	r2, [pc, #240]	@ (8005a20 <HAL_DMA_IRQHandler+0xe20>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d03b      	beq.n	80059aa <HAL_DMA_IRQHandler+0xdaa>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a3b      	ldr	r2, [pc, #236]	@ (8005a24 <HAL_DMA_IRQHandler+0xe24>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d036      	beq.n	80059aa <HAL_DMA_IRQHandler+0xdaa>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a39      	ldr	r2, [pc, #228]	@ (8005a28 <HAL_DMA_IRQHandler+0xe28>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d031      	beq.n	80059aa <HAL_DMA_IRQHandler+0xdaa>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a38      	ldr	r2, [pc, #224]	@ (8005a2c <HAL_DMA_IRQHandler+0xe2c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d02c      	beq.n	80059aa <HAL_DMA_IRQHandler+0xdaa>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a36      	ldr	r2, [pc, #216]	@ (8005a30 <HAL_DMA_IRQHandler+0xe30>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d027      	beq.n	80059aa <HAL_DMA_IRQHandler+0xdaa>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a35      	ldr	r2, [pc, #212]	@ (8005a34 <HAL_DMA_IRQHandler+0xe34>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d022      	beq.n	80059aa <HAL_DMA_IRQHandler+0xdaa>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a33      	ldr	r2, [pc, #204]	@ (8005a38 <HAL_DMA_IRQHandler+0xe38>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d01d      	beq.n	80059aa <HAL_DMA_IRQHandler+0xdaa>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a32      	ldr	r2, [pc, #200]	@ (8005a3c <HAL_DMA_IRQHandler+0xe3c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d018      	beq.n	80059aa <HAL_DMA_IRQHandler+0xdaa>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a30      	ldr	r2, [pc, #192]	@ (8005a40 <HAL_DMA_IRQHandler+0xe40>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d013      	beq.n	80059aa <HAL_DMA_IRQHandler+0xdaa>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a2f      	ldr	r2, [pc, #188]	@ (8005a44 <HAL_DMA_IRQHandler+0xe44>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00e      	beq.n	80059aa <HAL_DMA_IRQHandler+0xdaa>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a2d      	ldr	r2, [pc, #180]	@ (8005a48 <HAL_DMA_IRQHandler+0xe48>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d009      	beq.n	80059aa <HAL_DMA_IRQHandler+0xdaa>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a2c      	ldr	r2, [pc, #176]	@ (8005a4c <HAL_DMA_IRQHandler+0xe4c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d004      	beq.n	80059aa <HAL_DMA_IRQHandler+0xdaa>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a2a      	ldr	r2, [pc, #168]	@ (8005a50 <HAL_DMA_IRQHandler+0xe50>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d108      	bne.n	80059bc <HAL_DMA_IRQHandler+0xdbc>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 021c 	bic.w	r2, r2, #28
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	e007      	b.n	80059cc <HAL_DMA_IRQHandler+0xdcc>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 020e 	bic.w	r2, r2, #14
 80059ca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059d0:	f003 031f 	and.w	r3, r3, #31
 80059d4:	2201      	movs	r2, #1
 80059d6:	409a      	lsls	r2, r3
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d009      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	4798      	blx	r3
 8005a02:	e004      	b.n	8005a0e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005a04:	bf00      	nop
 8005a06:	e002      	b.n	8005a0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a08:	bf00      	nop
 8005a0a:	e000      	b.n	8005a0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a0c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005a0e:	3728      	adds	r7, #40	@ 0x28
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40020010 	.word	0x40020010
 8005a18:	40020028 	.word	0x40020028
 8005a1c:	40020040 	.word	0x40020040
 8005a20:	40020058 	.word	0x40020058
 8005a24:	40020070 	.word	0x40020070
 8005a28:	40020088 	.word	0x40020088
 8005a2c:	400200a0 	.word	0x400200a0
 8005a30:	400200b8 	.word	0x400200b8
 8005a34:	40020410 	.word	0x40020410
 8005a38:	40020428 	.word	0x40020428
 8005a3c:	40020440 	.word	0x40020440
 8005a40:	40020458 	.word	0x40020458
 8005a44:	40020470 	.word	0x40020470
 8005a48:	40020488 	.word	0x40020488
 8005a4c:	400204a0 	.word	0x400204a0
 8005a50:	400204b8 	.word	0x400204b8

08005a54 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a62:	b2db      	uxtb	r3, r3
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
 8005a7c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a82:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a88:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a7f      	ldr	r2, [pc, #508]	@ (8005c8c <DMA_SetConfig+0x21c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d072      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a7d      	ldr	r2, [pc, #500]	@ (8005c90 <DMA_SetConfig+0x220>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d06d      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a7c      	ldr	r2, [pc, #496]	@ (8005c94 <DMA_SetConfig+0x224>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d068      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a7a      	ldr	r2, [pc, #488]	@ (8005c98 <DMA_SetConfig+0x228>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d063      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a79      	ldr	r2, [pc, #484]	@ (8005c9c <DMA_SetConfig+0x22c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d05e      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a77      	ldr	r2, [pc, #476]	@ (8005ca0 <DMA_SetConfig+0x230>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d059      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a76      	ldr	r2, [pc, #472]	@ (8005ca4 <DMA_SetConfig+0x234>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d054      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a74      	ldr	r2, [pc, #464]	@ (8005ca8 <DMA_SetConfig+0x238>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d04f      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a73      	ldr	r2, [pc, #460]	@ (8005cac <DMA_SetConfig+0x23c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d04a      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a71      	ldr	r2, [pc, #452]	@ (8005cb0 <DMA_SetConfig+0x240>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d045      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a70      	ldr	r2, [pc, #448]	@ (8005cb4 <DMA_SetConfig+0x244>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d040      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a6e      	ldr	r2, [pc, #440]	@ (8005cb8 <DMA_SetConfig+0x248>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d03b      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a6d      	ldr	r2, [pc, #436]	@ (8005cbc <DMA_SetConfig+0x24c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d036      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a6b      	ldr	r2, [pc, #428]	@ (8005cc0 <DMA_SetConfig+0x250>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d031      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a6a      	ldr	r2, [pc, #424]	@ (8005cc4 <DMA_SetConfig+0x254>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d02c      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a68      	ldr	r2, [pc, #416]	@ (8005cc8 <DMA_SetConfig+0x258>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d027      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a67      	ldr	r2, [pc, #412]	@ (8005ccc <DMA_SetConfig+0x25c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d022      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a65      	ldr	r2, [pc, #404]	@ (8005cd0 <DMA_SetConfig+0x260>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d01d      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a64      	ldr	r2, [pc, #400]	@ (8005cd4 <DMA_SetConfig+0x264>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d018      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a62      	ldr	r2, [pc, #392]	@ (8005cd8 <DMA_SetConfig+0x268>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d013      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a61      	ldr	r2, [pc, #388]	@ (8005cdc <DMA_SetConfig+0x26c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00e      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a5f      	ldr	r2, [pc, #380]	@ (8005ce0 <DMA_SetConfig+0x270>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d009      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a5e      	ldr	r2, [pc, #376]	@ (8005ce4 <DMA_SetConfig+0x274>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d004      	beq.n	8005b7a <DMA_SetConfig+0x10a>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a5c      	ldr	r2, [pc, #368]	@ (8005ce8 <DMA_SetConfig+0x278>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d101      	bne.n	8005b7e <DMA_SetConfig+0x10e>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e000      	b.n	8005b80 <DMA_SetConfig+0x110>
 8005b7e:	2300      	movs	r3, #0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00d      	beq.n	8005ba0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005b8c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d004      	beq.n	8005ba0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b9e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a39      	ldr	r2, [pc, #228]	@ (8005c8c <DMA_SetConfig+0x21c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d04a      	beq.n	8005c40 <DMA_SetConfig+0x1d0>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a38      	ldr	r2, [pc, #224]	@ (8005c90 <DMA_SetConfig+0x220>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d045      	beq.n	8005c40 <DMA_SetConfig+0x1d0>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a36      	ldr	r2, [pc, #216]	@ (8005c94 <DMA_SetConfig+0x224>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d040      	beq.n	8005c40 <DMA_SetConfig+0x1d0>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a35      	ldr	r2, [pc, #212]	@ (8005c98 <DMA_SetConfig+0x228>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d03b      	beq.n	8005c40 <DMA_SetConfig+0x1d0>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a33      	ldr	r2, [pc, #204]	@ (8005c9c <DMA_SetConfig+0x22c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d036      	beq.n	8005c40 <DMA_SetConfig+0x1d0>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a32      	ldr	r2, [pc, #200]	@ (8005ca0 <DMA_SetConfig+0x230>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d031      	beq.n	8005c40 <DMA_SetConfig+0x1d0>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a30      	ldr	r2, [pc, #192]	@ (8005ca4 <DMA_SetConfig+0x234>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d02c      	beq.n	8005c40 <DMA_SetConfig+0x1d0>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a2f      	ldr	r2, [pc, #188]	@ (8005ca8 <DMA_SetConfig+0x238>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d027      	beq.n	8005c40 <DMA_SetConfig+0x1d0>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8005cac <DMA_SetConfig+0x23c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d022      	beq.n	8005c40 <DMA_SetConfig+0x1d0>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a2c      	ldr	r2, [pc, #176]	@ (8005cb0 <DMA_SetConfig+0x240>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d01d      	beq.n	8005c40 <DMA_SetConfig+0x1d0>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a2a      	ldr	r2, [pc, #168]	@ (8005cb4 <DMA_SetConfig+0x244>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d018      	beq.n	8005c40 <DMA_SetConfig+0x1d0>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a29      	ldr	r2, [pc, #164]	@ (8005cb8 <DMA_SetConfig+0x248>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d013      	beq.n	8005c40 <DMA_SetConfig+0x1d0>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a27      	ldr	r2, [pc, #156]	@ (8005cbc <DMA_SetConfig+0x24c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00e      	beq.n	8005c40 <DMA_SetConfig+0x1d0>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a26      	ldr	r2, [pc, #152]	@ (8005cc0 <DMA_SetConfig+0x250>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d009      	beq.n	8005c40 <DMA_SetConfig+0x1d0>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a24      	ldr	r2, [pc, #144]	@ (8005cc4 <DMA_SetConfig+0x254>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d004      	beq.n	8005c40 <DMA_SetConfig+0x1d0>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a23      	ldr	r2, [pc, #140]	@ (8005cc8 <DMA_SetConfig+0x258>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d101      	bne.n	8005c44 <DMA_SetConfig+0x1d4>
 8005c40:	2301      	movs	r3, #1
 8005c42:	e000      	b.n	8005c46 <DMA_SetConfig+0x1d6>
 8005c44:	2300      	movs	r3, #0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d059      	beq.n	8005cfe <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c4e:	f003 031f 	and.w	r3, r3, #31
 8005c52:	223f      	movs	r2, #63	@ 0x3f
 8005c54:	409a      	lsls	r2, r3
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005c68:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	2b40      	cmp	r3, #64	@ 0x40
 8005c78:	d138      	bne.n	8005cec <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005c8a:	e086      	b.n	8005d9a <DMA_SetConfig+0x32a>
 8005c8c:	40020010 	.word	0x40020010
 8005c90:	40020028 	.word	0x40020028
 8005c94:	40020040 	.word	0x40020040
 8005c98:	40020058 	.word	0x40020058
 8005c9c:	40020070 	.word	0x40020070
 8005ca0:	40020088 	.word	0x40020088
 8005ca4:	400200a0 	.word	0x400200a0
 8005ca8:	400200b8 	.word	0x400200b8
 8005cac:	40020410 	.word	0x40020410
 8005cb0:	40020428 	.word	0x40020428
 8005cb4:	40020440 	.word	0x40020440
 8005cb8:	40020458 	.word	0x40020458
 8005cbc:	40020470 	.word	0x40020470
 8005cc0:	40020488 	.word	0x40020488
 8005cc4:	400204a0 	.word	0x400204a0
 8005cc8:	400204b8 	.word	0x400204b8
 8005ccc:	58025408 	.word	0x58025408
 8005cd0:	5802541c 	.word	0x5802541c
 8005cd4:	58025430 	.word	0x58025430
 8005cd8:	58025444 	.word	0x58025444
 8005cdc:	58025458 	.word	0x58025458
 8005ce0:	5802546c 	.word	0x5802546c
 8005ce4:	58025480 	.word	0x58025480
 8005ce8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	60da      	str	r2, [r3, #12]
}
 8005cfc:	e04d      	b.n	8005d9a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a29      	ldr	r2, [pc, #164]	@ (8005da8 <DMA_SetConfig+0x338>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d022      	beq.n	8005d4e <DMA_SetConfig+0x2de>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a27      	ldr	r2, [pc, #156]	@ (8005dac <DMA_SetConfig+0x33c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d01d      	beq.n	8005d4e <DMA_SetConfig+0x2de>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a26      	ldr	r2, [pc, #152]	@ (8005db0 <DMA_SetConfig+0x340>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d018      	beq.n	8005d4e <DMA_SetConfig+0x2de>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a24      	ldr	r2, [pc, #144]	@ (8005db4 <DMA_SetConfig+0x344>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d013      	beq.n	8005d4e <DMA_SetConfig+0x2de>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a23      	ldr	r2, [pc, #140]	@ (8005db8 <DMA_SetConfig+0x348>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00e      	beq.n	8005d4e <DMA_SetConfig+0x2de>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a21      	ldr	r2, [pc, #132]	@ (8005dbc <DMA_SetConfig+0x34c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d009      	beq.n	8005d4e <DMA_SetConfig+0x2de>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a20      	ldr	r2, [pc, #128]	@ (8005dc0 <DMA_SetConfig+0x350>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d004      	beq.n	8005d4e <DMA_SetConfig+0x2de>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a1e      	ldr	r2, [pc, #120]	@ (8005dc4 <DMA_SetConfig+0x354>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d101      	bne.n	8005d52 <DMA_SetConfig+0x2e2>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e000      	b.n	8005d54 <DMA_SetConfig+0x2e4>
 8005d52:	2300      	movs	r3, #0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d020      	beq.n	8005d9a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d5c:	f003 031f 	and.w	r3, r3, #31
 8005d60:	2201      	movs	r2, #1
 8005d62:	409a      	lsls	r2, r3
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	2b40      	cmp	r3, #64	@ 0x40
 8005d76:	d108      	bne.n	8005d8a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	60da      	str	r2, [r3, #12]
}
 8005d88:	e007      	b.n	8005d9a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	60da      	str	r2, [r3, #12]
}
 8005d9a:	bf00      	nop
 8005d9c:	371c      	adds	r7, #28
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	58025408 	.word	0x58025408
 8005dac:	5802541c 	.word	0x5802541c
 8005db0:	58025430 	.word	0x58025430
 8005db4:	58025444 	.word	0x58025444
 8005db8:	58025458 	.word	0x58025458
 8005dbc:	5802546c 	.word	0x5802546c
 8005dc0:	58025480 	.word	0x58025480
 8005dc4:	58025494 	.word	0x58025494

08005dc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a42      	ldr	r2, [pc, #264]	@ (8005ee0 <DMA_CalcBaseAndBitshift+0x118>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d04a      	beq.n	8005e70 <DMA_CalcBaseAndBitshift+0xa8>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a41      	ldr	r2, [pc, #260]	@ (8005ee4 <DMA_CalcBaseAndBitshift+0x11c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d045      	beq.n	8005e70 <DMA_CalcBaseAndBitshift+0xa8>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a3f      	ldr	r2, [pc, #252]	@ (8005ee8 <DMA_CalcBaseAndBitshift+0x120>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d040      	beq.n	8005e70 <DMA_CalcBaseAndBitshift+0xa8>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a3e      	ldr	r2, [pc, #248]	@ (8005eec <DMA_CalcBaseAndBitshift+0x124>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d03b      	beq.n	8005e70 <DMA_CalcBaseAndBitshift+0xa8>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a3c      	ldr	r2, [pc, #240]	@ (8005ef0 <DMA_CalcBaseAndBitshift+0x128>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d036      	beq.n	8005e70 <DMA_CalcBaseAndBitshift+0xa8>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a3b      	ldr	r2, [pc, #236]	@ (8005ef4 <DMA_CalcBaseAndBitshift+0x12c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d031      	beq.n	8005e70 <DMA_CalcBaseAndBitshift+0xa8>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a39      	ldr	r2, [pc, #228]	@ (8005ef8 <DMA_CalcBaseAndBitshift+0x130>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d02c      	beq.n	8005e70 <DMA_CalcBaseAndBitshift+0xa8>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a38      	ldr	r2, [pc, #224]	@ (8005efc <DMA_CalcBaseAndBitshift+0x134>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d027      	beq.n	8005e70 <DMA_CalcBaseAndBitshift+0xa8>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a36      	ldr	r2, [pc, #216]	@ (8005f00 <DMA_CalcBaseAndBitshift+0x138>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d022      	beq.n	8005e70 <DMA_CalcBaseAndBitshift+0xa8>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a35      	ldr	r2, [pc, #212]	@ (8005f04 <DMA_CalcBaseAndBitshift+0x13c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d01d      	beq.n	8005e70 <DMA_CalcBaseAndBitshift+0xa8>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a33      	ldr	r2, [pc, #204]	@ (8005f08 <DMA_CalcBaseAndBitshift+0x140>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d018      	beq.n	8005e70 <DMA_CalcBaseAndBitshift+0xa8>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a32      	ldr	r2, [pc, #200]	@ (8005f0c <DMA_CalcBaseAndBitshift+0x144>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d013      	beq.n	8005e70 <DMA_CalcBaseAndBitshift+0xa8>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a30      	ldr	r2, [pc, #192]	@ (8005f10 <DMA_CalcBaseAndBitshift+0x148>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00e      	beq.n	8005e70 <DMA_CalcBaseAndBitshift+0xa8>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a2f      	ldr	r2, [pc, #188]	@ (8005f14 <DMA_CalcBaseAndBitshift+0x14c>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d009      	beq.n	8005e70 <DMA_CalcBaseAndBitshift+0xa8>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a2d      	ldr	r2, [pc, #180]	@ (8005f18 <DMA_CalcBaseAndBitshift+0x150>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d004      	beq.n	8005e70 <DMA_CalcBaseAndBitshift+0xa8>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a2c      	ldr	r2, [pc, #176]	@ (8005f1c <DMA_CalcBaseAndBitshift+0x154>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d101      	bne.n	8005e74 <DMA_CalcBaseAndBitshift+0xac>
 8005e70:	2301      	movs	r3, #1
 8005e72:	e000      	b.n	8005e76 <DMA_CalcBaseAndBitshift+0xae>
 8005e74:	2300      	movs	r3, #0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d024      	beq.n	8005ec4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	3b10      	subs	r3, #16
 8005e82:	4a27      	ldr	r2, [pc, #156]	@ (8005f20 <DMA_CalcBaseAndBitshift+0x158>)
 8005e84:	fba2 2303 	umull	r2, r3, r2, r3
 8005e88:	091b      	lsrs	r3, r3, #4
 8005e8a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	4a24      	ldr	r2, [pc, #144]	@ (8005f24 <DMA_CalcBaseAndBitshift+0x15c>)
 8005e94:	5cd3      	ldrb	r3, [r2, r3]
 8005e96:	461a      	mov	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b03      	cmp	r3, #3
 8005ea0:	d908      	bls.n	8005eb4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8005f28 <DMA_CalcBaseAndBitshift+0x160>)
 8005eaa:	4013      	ands	r3, r2
 8005eac:	1d1a      	adds	r2, r3, #4
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	659a      	str	r2, [r3, #88]	@ 0x58
 8005eb2:	e00d      	b.n	8005ed0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4b1b      	ldr	r3, [pc, #108]	@ (8005f28 <DMA_CalcBaseAndBitshift+0x160>)
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ec2:	e005      	b.n	8005ed0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	40020010 	.word	0x40020010
 8005ee4:	40020028 	.word	0x40020028
 8005ee8:	40020040 	.word	0x40020040
 8005eec:	40020058 	.word	0x40020058
 8005ef0:	40020070 	.word	0x40020070
 8005ef4:	40020088 	.word	0x40020088
 8005ef8:	400200a0 	.word	0x400200a0
 8005efc:	400200b8 	.word	0x400200b8
 8005f00:	40020410 	.word	0x40020410
 8005f04:	40020428 	.word	0x40020428
 8005f08:	40020440 	.word	0x40020440
 8005f0c:	40020458 	.word	0x40020458
 8005f10:	40020470 	.word	0x40020470
 8005f14:	40020488 	.word	0x40020488
 8005f18:	400204a0 	.word	0x400204a0
 8005f1c:	400204b8 	.word	0x400204b8
 8005f20:	aaaaaaab 	.word	0xaaaaaaab
 8005f24:	08017e30 	.word	0x08017e30
 8005f28:	fffffc00 	.word	0xfffffc00

08005f2c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d120      	bne.n	8005f82 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f44:	2b03      	cmp	r3, #3
 8005f46:	d858      	bhi.n	8005ffa <DMA_CheckFifoParam+0xce>
 8005f48:	a201      	add	r2, pc, #4	@ (adr r2, 8005f50 <DMA_CheckFifoParam+0x24>)
 8005f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4e:	bf00      	nop
 8005f50:	08005f61 	.word	0x08005f61
 8005f54:	08005f73 	.word	0x08005f73
 8005f58:	08005f61 	.word	0x08005f61
 8005f5c:	08005ffb 	.word	0x08005ffb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d048      	beq.n	8005ffe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005f70:	e045      	b.n	8005ffe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f76:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005f7a:	d142      	bne.n	8006002 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005f80:	e03f      	b.n	8006002 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f8a:	d123      	bne.n	8005fd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d838      	bhi.n	8006006 <DMA_CheckFifoParam+0xda>
 8005f94:	a201      	add	r2, pc, #4	@ (adr r2, 8005f9c <DMA_CheckFifoParam+0x70>)
 8005f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9a:	bf00      	nop
 8005f9c:	08005fad 	.word	0x08005fad
 8005fa0:	08005fb3 	.word	0x08005fb3
 8005fa4:	08005fad 	.word	0x08005fad
 8005fa8:	08005fc5 	.word	0x08005fc5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	73fb      	strb	r3, [r7, #15]
        break;
 8005fb0:	e030      	b.n	8006014 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d025      	beq.n	800600a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005fc2:	e022      	b.n	800600a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005fcc:	d11f      	bne.n	800600e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005fd2:	e01c      	b.n	800600e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d902      	bls.n	8005fe2 <DMA_CheckFifoParam+0xb6>
 8005fdc:	2b03      	cmp	r3, #3
 8005fde:	d003      	beq.n	8005fe8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005fe0:	e018      	b.n	8006014 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	73fb      	strb	r3, [r7, #15]
        break;
 8005fe6:	e015      	b.n	8006014 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00e      	beq.n	8006012 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	73fb      	strb	r3, [r7, #15]
    break;
 8005ff8:	e00b      	b.n	8006012 <DMA_CheckFifoParam+0xe6>
        break;
 8005ffa:	bf00      	nop
 8005ffc:	e00a      	b.n	8006014 <DMA_CheckFifoParam+0xe8>
        break;
 8005ffe:	bf00      	nop
 8006000:	e008      	b.n	8006014 <DMA_CheckFifoParam+0xe8>
        break;
 8006002:	bf00      	nop
 8006004:	e006      	b.n	8006014 <DMA_CheckFifoParam+0xe8>
        break;
 8006006:	bf00      	nop
 8006008:	e004      	b.n	8006014 <DMA_CheckFifoParam+0xe8>
        break;
 800600a:	bf00      	nop
 800600c:	e002      	b.n	8006014 <DMA_CheckFifoParam+0xe8>
        break;
 800600e:	bf00      	nop
 8006010:	e000      	b.n	8006014 <DMA_CheckFifoParam+0xe8>
    break;
 8006012:	bf00      	nop
    }
  }

  return status;
 8006014:	7bfb      	ldrb	r3, [r7, #15]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop

08006024 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a38      	ldr	r2, [pc, #224]	@ (8006118 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d022      	beq.n	8006082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a36      	ldr	r2, [pc, #216]	@ (800611c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d01d      	beq.n	8006082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a35      	ldr	r2, [pc, #212]	@ (8006120 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d018      	beq.n	8006082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a33      	ldr	r2, [pc, #204]	@ (8006124 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d013      	beq.n	8006082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a32      	ldr	r2, [pc, #200]	@ (8006128 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d00e      	beq.n	8006082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a30      	ldr	r2, [pc, #192]	@ (800612c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d009      	beq.n	8006082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a2f      	ldr	r2, [pc, #188]	@ (8006130 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d004      	beq.n	8006082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a2d      	ldr	r2, [pc, #180]	@ (8006134 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d101      	bne.n	8006086 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006082:	2301      	movs	r3, #1
 8006084:	e000      	b.n	8006088 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006086:	2300      	movs	r3, #0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d01a      	beq.n	80060c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	b2db      	uxtb	r3, r3
 8006092:	3b08      	subs	r3, #8
 8006094:	4a28      	ldr	r2, [pc, #160]	@ (8006138 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006096:	fba2 2303 	umull	r2, r3, r2, r3
 800609a:	091b      	lsrs	r3, r3, #4
 800609c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4b26      	ldr	r3, [pc, #152]	@ (800613c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80060a2:	4413      	add	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	461a      	mov	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a24      	ldr	r2, [pc, #144]	@ (8006140 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80060b0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f003 031f 	and.w	r3, r3, #31
 80060b8:	2201      	movs	r2, #1
 80060ba:	409a      	lsls	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80060c0:	e024      	b.n	800610c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	3b10      	subs	r3, #16
 80060ca:	4a1e      	ldr	r2, [pc, #120]	@ (8006144 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80060cc:	fba2 2303 	umull	r2, r3, r2, r3
 80060d0:	091b      	lsrs	r3, r3, #4
 80060d2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	4a1c      	ldr	r2, [pc, #112]	@ (8006148 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d806      	bhi.n	80060ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	4a1b      	ldr	r2, [pc, #108]	@ (800614c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d902      	bls.n	80060ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	3308      	adds	r3, #8
 80060e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	4b18      	ldr	r3, [pc, #96]	@ (8006150 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80060ee:	4413      	add	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	461a      	mov	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a16      	ldr	r2, [pc, #88]	@ (8006154 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80060fc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f003 031f 	and.w	r3, r3, #31
 8006104:	2201      	movs	r2, #1
 8006106:	409a      	lsls	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800610c:	bf00      	nop
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	58025408 	.word	0x58025408
 800611c:	5802541c 	.word	0x5802541c
 8006120:	58025430 	.word	0x58025430
 8006124:	58025444 	.word	0x58025444
 8006128:	58025458 	.word	0x58025458
 800612c:	5802546c 	.word	0x5802546c
 8006130:	58025480 	.word	0x58025480
 8006134:	58025494 	.word	0x58025494
 8006138:	cccccccd 	.word	0xcccccccd
 800613c:	16009600 	.word	0x16009600
 8006140:	58025880 	.word	0x58025880
 8006144:	aaaaaaab 	.word	0xaaaaaaab
 8006148:	400204b8 	.word	0x400204b8
 800614c:	4002040f 	.word	0x4002040f
 8006150:	10008200 	.word	0x10008200
 8006154:	40020880 	.word	0x40020880

08006158 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	b2db      	uxtb	r3, r3
 8006166:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d04a      	beq.n	8006204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b08      	cmp	r3, #8
 8006172:	d847      	bhi.n	8006204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a25      	ldr	r2, [pc, #148]	@ (8006210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d022      	beq.n	80061c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a24      	ldr	r2, [pc, #144]	@ (8006214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d01d      	beq.n	80061c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a22      	ldr	r2, [pc, #136]	@ (8006218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d018      	beq.n	80061c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a21      	ldr	r2, [pc, #132]	@ (800621c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d013      	beq.n	80061c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a1f      	ldr	r2, [pc, #124]	@ (8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d00e      	beq.n	80061c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d009      	beq.n	80061c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d004      	beq.n	80061c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a1b      	ldr	r2, [pc, #108]	@ (800622c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d101      	bne.n	80061c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80061c4:	2301      	movs	r3, #1
 80061c6:	e000      	b.n	80061ca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80061c8:	2300      	movs	r3, #0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00a      	beq.n	80061e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	4b17      	ldr	r3, [pc, #92]	@ (8006230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80061d2:	4413      	add	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	461a      	mov	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a15      	ldr	r2, [pc, #84]	@ (8006234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80061e0:	671a      	str	r2, [r3, #112]	@ 0x70
 80061e2:	e009      	b.n	80061f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	4b14      	ldr	r3, [pc, #80]	@ (8006238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80061e8:	4413      	add	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	461a      	mov	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a11      	ldr	r2, [pc, #68]	@ (800623c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80061f6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	2201      	movs	r2, #1
 80061fe:	409a      	lsls	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006204:	bf00      	nop
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	58025408 	.word	0x58025408
 8006214:	5802541c 	.word	0x5802541c
 8006218:	58025430 	.word	0x58025430
 800621c:	58025444 	.word	0x58025444
 8006220:	58025458 	.word	0x58025458
 8006224:	5802546c 	.word	0x5802546c
 8006228:	58025480 	.word	0x58025480
 800622c:	58025494 	.word	0x58025494
 8006230:	1600963f 	.word	0x1600963f
 8006234:	58025940 	.word	0x58025940
 8006238:	1000823f 	.word	0x1000823f
 800623c:	40020940 	.word	0x40020940

08006240 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	2b80      	cmp	r3, #128	@ 0x80
 8006258:	d105      	bne.n	8006266 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006260:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e315      	b.n	8006892 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800626c:	2b01      	cmp	r3, #1
 800626e:	d101      	bne.n	8006274 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8006270:	2302      	movs	r3, #2
 8006272:	e30e      	b.n	8006892 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b01      	cmp	r3, #1
 8006286:	f040 82fd 	bne.w	8006884 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2202      	movs	r2, #2
 800628e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a82      	ldr	r2, [pc, #520]	@ (80064a8 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d04a      	beq.n	8006338 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a81      	ldr	r2, [pc, #516]	@ (80064ac <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d045      	beq.n	8006338 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a7f      	ldr	r2, [pc, #508]	@ (80064b0 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d040      	beq.n	8006338 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a7e      	ldr	r2, [pc, #504]	@ (80064b4 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d03b      	beq.n	8006338 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a7c      	ldr	r2, [pc, #496]	@ (80064b8 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d036      	beq.n	8006338 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a7b      	ldr	r2, [pc, #492]	@ (80064bc <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d031      	beq.n	8006338 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a79      	ldr	r2, [pc, #484]	@ (80064c0 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d02c      	beq.n	8006338 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a78      	ldr	r2, [pc, #480]	@ (80064c4 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d027      	beq.n	8006338 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a76      	ldr	r2, [pc, #472]	@ (80064c8 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d022      	beq.n	8006338 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a75      	ldr	r2, [pc, #468]	@ (80064cc <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d01d      	beq.n	8006338 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a73      	ldr	r2, [pc, #460]	@ (80064d0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d018      	beq.n	8006338 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a72      	ldr	r2, [pc, #456]	@ (80064d4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d013      	beq.n	8006338 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a70      	ldr	r2, [pc, #448]	@ (80064d8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d00e      	beq.n	8006338 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a6f      	ldr	r2, [pc, #444]	@ (80064dc <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d009      	beq.n	8006338 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a6d      	ldr	r2, [pc, #436]	@ (80064e0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d004      	beq.n	8006338 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a6c      	ldr	r2, [pc, #432]	@ (80064e4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d101      	bne.n	800633c <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8006338:	2301      	movs	r3, #1
 800633a:	e000      	b.n	800633e <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 800633c:	2300      	movs	r3, #0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d018      	beq.n	8006374 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006350:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635e:	3308      	adds	r3, #8
 8006360:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006366:	f003 031f 	and.w	r3, r3, #31
 800636a:	223f      	movs	r2, #63	@ 0x3f
 800636c:	409a      	lsls	r2, r3
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	e018      	b.n	80063a6 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6819      	ldr	r1, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	f248 0320 	movw	r3, #32800	@ 0x8020
 8006382:	430b      	orrs	r3, r1
 8006384:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006392:	3304      	adds	r3, #4
 8006394:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800639a:	f003 031f 	and.w	r3, r3, #31
 800639e:	2201      	movs	r2, #1
 80063a0:	409a      	lsls	r2, r3
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	68b9      	ldr	r1, [r7, #8]
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 fb41 	bl	8006a34 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a3c      	ldr	r2, [pc, #240]	@ (80064a8 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d072      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a3a      	ldr	r2, [pc, #232]	@ (80064ac <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d06d      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a39      	ldr	r2, [pc, #228]	@ (80064b0 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d068      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a37      	ldr	r2, [pc, #220]	@ (80064b4 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d063      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a36      	ldr	r2, [pc, #216]	@ (80064b8 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d05e      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a34      	ldr	r2, [pc, #208]	@ (80064bc <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d059      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a33      	ldr	r2, [pc, #204]	@ (80064c0 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d054      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a31      	ldr	r2, [pc, #196]	@ (80064c4 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d04f      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a30      	ldr	r2, [pc, #192]	@ (80064c8 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d04a      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a2e      	ldr	r2, [pc, #184]	@ (80064cc <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d045      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a2d      	ldr	r2, [pc, #180]	@ (80064d0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d040      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a2b      	ldr	r2, [pc, #172]	@ (80064d4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d03b      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a2a      	ldr	r2, [pc, #168]	@ (80064d8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d036      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a28      	ldr	r2, [pc, #160]	@ (80064dc <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d031      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a27      	ldr	r2, [pc, #156]	@ (80064e0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d02c      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a25      	ldr	r2, [pc, #148]	@ (80064e4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d027      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a24      	ldr	r2, [pc, #144]	@ (80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d022      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a22      	ldr	r2, [pc, #136]	@ (80064ec <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d01d      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a21      	ldr	r2, [pc, #132]	@ (80064f0 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d018      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a1f      	ldr	r2, [pc, #124]	@ (80064f4 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d013      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1e      	ldr	r2, [pc, #120]	@ (80064f8 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d00e      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a1c      	ldr	r2, [pc, #112]	@ (80064fc <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d009      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1b      	ldr	r2, [pc, #108]	@ (8006500 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d004      	beq.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a19      	ldr	r2, [pc, #100]	@ (8006504 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d132      	bne.n	8006508 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80064a2:	2301      	movs	r3, #1
 80064a4:	e031      	b.n	800650a <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80064a6:	bf00      	nop
 80064a8:	40020010 	.word	0x40020010
 80064ac:	40020028 	.word	0x40020028
 80064b0:	40020040 	.word	0x40020040
 80064b4:	40020058 	.word	0x40020058
 80064b8:	40020070 	.word	0x40020070
 80064bc:	40020088 	.word	0x40020088
 80064c0:	400200a0 	.word	0x400200a0
 80064c4:	400200b8 	.word	0x400200b8
 80064c8:	40020410 	.word	0x40020410
 80064cc:	40020428 	.word	0x40020428
 80064d0:	40020440 	.word	0x40020440
 80064d4:	40020458 	.word	0x40020458
 80064d8:	40020470 	.word	0x40020470
 80064dc:	40020488 	.word	0x40020488
 80064e0:	400204a0 	.word	0x400204a0
 80064e4:	400204b8 	.word	0x400204b8
 80064e8:	58025408 	.word	0x58025408
 80064ec:	5802541c 	.word	0x5802541c
 80064f0:	58025430 	.word	0x58025430
 80064f4:	58025444 	.word	0x58025444
 80064f8:	58025458 	.word	0x58025458
 80064fc:	5802546c 	.word	0x5802546c
 8006500:	58025480 	.word	0x58025480
 8006504:	58025494 	.word	0x58025494
 8006508:	2300      	movs	r3, #0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00d      	beq.n	800652a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006516:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800651c:	2b00      	cmp	r3, #0
 800651e:	d004      	beq.n	800652a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006528:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a3b      	ldr	r2, [pc, #236]	@ (800661c <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d04a      	beq.n	80065ca <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a39      	ldr	r2, [pc, #228]	@ (8006620 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d045      	beq.n	80065ca <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a38      	ldr	r2, [pc, #224]	@ (8006624 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d040      	beq.n	80065ca <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a36      	ldr	r2, [pc, #216]	@ (8006628 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d03b      	beq.n	80065ca <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a35      	ldr	r2, [pc, #212]	@ (800662c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d036      	beq.n	80065ca <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a33      	ldr	r2, [pc, #204]	@ (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d031      	beq.n	80065ca <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a32      	ldr	r2, [pc, #200]	@ (8006634 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d02c      	beq.n	80065ca <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a30      	ldr	r2, [pc, #192]	@ (8006638 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d027      	beq.n	80065ca <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a2f      	ldr	r2, [pc, #188]	@ (800663c <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d022      	beq.n	80065ca <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a2d      	ldr	r2, [pc, #180]	@ (8006640 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d01d      	beq.n	80065ca <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a2c      	ldr	r2, [pc, #176]	@ (8006644 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d018      	beq.n	80065ca <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a2a      	ldr	r2, [pc, #168]	@ (8006648 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d013      	beq.n	80065ca <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a29      	ldr	r2, [pc, #164]	@ (800664c <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d00e      	beq.n	80065ca <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a27      	ldr	r2, [pc, #156]	@ (8006650 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d009      	beq.n	80065ca <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a26      	ldr	r2, [pc, #152]	@ (8006654 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d004      	beq.n	80065ca <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a24      	ldr	r2, [pc, #144]	@ (8006658 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d101      	bne.n	80065ce <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80065ca:	2301      	movs	r3, #1
 80065cc:	e000      	b.n	80065d0 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 80065ce:	2300      	movs	r3, #0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d043      	beq.n	800665c <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f023 021e 	bic.w	r2, r3, #30
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0216 	orr.w	r2, r2, #22
 80065e6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695a      	ldr	r2, [r3, #20]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80065f6:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d103      	bne.n	8006608 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006604:	2b00      	cmp	r3, #0
 8006606:	d043      	beq.n	8006690 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 0208 	orr.w	r2, r2, #8
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	e03a      	b.n	8006690 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 800661a:	bf00      	nop
 800661c:	40020010 	.word	0x40020010
 8006620:	40020028 	.word	0x40020028
 8006624:	40020040 	.word	0x40020040
 8006628:	40020058 	.word	0x40020058
 800662c:	40020070 	.word	0x40020070
 8006630:	40020088 	.word	0x40020088
 8006634:	400200a0 	.word	0x400200a0
 8006638:	400200b8 	.word	0x400200b8
 800663c:	40020410 	.word	0x40020410
 8006640:	40020428 	.word	0x40020428
 8006644:	40020440 	.word	0x40020440
 8006648:	40020458 	.word	0x40020458
 800664c:	40020470 	.word	0x40020470
 8006650:	40020488 	.word	0x40020488
 8006654:	400204a0 	.word	0x400204a0
 8006658:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f023 020e 	bic.w	r2, r3, #14
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 020a 	orr.w	r2, r2, #10
 800666e:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006674:	2b00      	cmp	r3, #0
 8006676:	d103      	bne.n	8006680 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800667c:	2b00      	cmp	r3, #0
 800667e:	d007      	beq.n	8006690 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0204 	orr.w	r2, r2, #4
 800668e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a81      	ldr	r2, [pc, #516]	@ (800689c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d072      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a80      	ldr	r2, [pc, #512]	@ (80068a0 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d06d      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a7e      	ldr	r2, [pc, #504]	@ (80068a4 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d068      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a7d      	ldr	r2, [pc, #500]	@ (80068a8 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d063      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a7b      	ldr	r2, [pc, #492]	@ (80068ac <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d05e      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a7a      	ldr	r2, [pc, #488]	@ (80068b0 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d059      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a78      	ldr	r2, [pc, #480]	@ (80068b4 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d054      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a77      	ldr	r2, [pc, #476]	@ (80068b8 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d04f      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a75      	ldr	r2, [pc, #468]	@ (80068bc <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d04a      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a74      	ldr	r2, [pc, #464]	@ (80068c0 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d045      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a72      	ldr	r2, [pc, #456]	@ (80068c4 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d040      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a71      	ldr	r2, [pc, #452]	@ (80068c8 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d03b      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a6f      	ldr	r2, [pc, #444]	@ (80068cc <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d036      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a6e      	ldr	r2, [pc, #440]	@ (80068d0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d031      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a6c      	ldr	r2, [pc, #432]	@ (80068d4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d02c      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a6b      	ldr	r2, [pc, #428]	@ (80068d8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d027      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a69      	ldr	r2, [pc, #420]	@ (80068dc <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d022      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a68      	ldr	r2, [pc, #416]	@ (80068e0 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d01d      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a66      	ldr	r2, [pc, #408]	@ (80068e4 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d018      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a65      	ldr	r2, [pc, #404]	@ (80068e8 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d013      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a63      	ldr	r2, [pc, #396]	@ (80068ec <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00e      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a62      	ldr	r2, [pc, #392]	@ (80068f0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d009      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a60      	ldr	r2, [pc, #384]	@ (80068f4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d004      	beq.n	8006780 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a5f      	ldr	r2, [pc, #380]	@ (80068f8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d101      	bne.n	8006784 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8006780:	2301      	movs	r3, #1
 8006782:	e000      	b.n	8006786 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8006784:	2300      	movs	r3, #0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d01a      	beq.n	80067c0 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d007      	beq.n	80067a8 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067a6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d007      	beq.n	80067c0 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067be:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a35      	ldr	r2, [pc, #212]	@ (800689c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d04a      	beq.n	8006860 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a34      	ldr	r2, [pc, #208]	@ (80068a0 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d045      	beq.n	8006860 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a32      	ldr	r2, [pc, #200]	@ (80068a4 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d040      	beq.n	8006860 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a31      	ldr	r2, [pc, #196]	@ (80068a8 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d03b      	beq.n	8006860 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a2f      	ldr	r2, [pc, #188]	@ (80068ac <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d036      	beq.n	8006860 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a2e      	ldr	r2, [pc, #184]	@ (80068b0 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d031      	beq.n	8006860 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a2c      	ldr	r2, [pc, #176]	@ (80068b4 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d02c      	beq.n	8006860 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a2b      	ldr	r2, [pc, #172]	@ (80068b8 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d027      	beq.n	8006860 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a29      	ldr	r2, [pc, #164]	@ (80068bc <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d022      	beq.n	8006860 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a28      	ldr	r2, [pc, #160]	@ (80068c0 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d01d      	beq.n	8006860 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a26      	ldr	r2, [pc, #152]	@ (80068c4 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d018      	beq.n	8006860 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a25      	ldr	r2, [pc, #148]	@ (80068c8 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d013      	beq.n	8006860 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a23      	ldr	r2, [pc, #140]	@ (80068cc <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00e      	beq.n	8006860 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a22      	ldr	r2, [pc, #136]	@ (80068d0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d009      	beq.n	8006860 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a20      	ldr	r2, [pc, #128]	@ (80068d4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d004      	beq.n	8006860 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a1f      	ldr	r2, [pc, #124]	@ (80068d8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d108      	bne.n	8006872 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0201 	orr.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]
 8006870:	e00e      	b.n	8006890 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f042 0201 	orr.w	r2, r2, #1
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	e005      	b.n	8006890 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800688a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006890:	7dfb      	ldrb	r3, [r7, #23]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	40020010 	.word	0x40020010
 80068a0:	40020028 	.word	0x40020028
 80068a4:	40020040 	.word	0x40020040
 80068a8:	40020058 	.word	0x40020058
 80068ac:	40020070 	.word	0x40020070
 80068b0:	40020088 	.word	0x40020088
 80068b4:	400200a0 	.word	0x400200a0
 80068b8:	400200b8 	.word	0x400200b8
 80068bc:	40020410 	.word	0x40020410
 80068c0:	40020428 	.word	0x40020428
 80068c4:	40020440 	.word	0x40020440
 80068c8:	40020458 	.word	0x40020458
 80068cc:	40020470 	.word	0x40020470
 80068d0:	40020488 	.word	0x40020488
 80068d4:	400204a0 	.word	0x400204a0
 80068d8:	400204b8 	.word	0x400204b8
 80068dc:	58025408 	.word	0x58025408
 80068e0:	5802541c 	.word	0x5802541c
 80068e4:	58025430 	.word	0x58025430
 80068e8:	58025444 	.word	0x58025444
 80068ec:	58025458 	.word	0x58025458
 80068f0:	5802546c 	.word	0x5802546c
 80068f4:	58025480 	.word	0x58025480
 80068f8:	58025494 	.word	0x58025494

080068fc <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	4613      	mov	r3, r2
 8006908:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a39      	ldr	r2, [pc, #228]	@ (80069f4 <HAL_DMAEx_ChangeMemory+0xf8>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d04a      	beq.n	80069aa <HAL_DMAEx_ChangeMemory+0xae>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a37      	ldr	r2, [pc, #220]	@ (80069f8 <HAL_DMAEx_ChangeMemory+0xfc>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d045      	beq.n	80069aa <HAL_DMAEx_ChangeMemory+0xae>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a36      	ldr	r2, [pc, #216]	@ (80069fc <HAL_DMAEx_ChangeMemory+0x100>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d040      	beq.n	80069aa <HAL_DMAEx_ChangeMemory+0xae>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a34      	ldr	r2, [pc, #208]	@ (8006a00 <HAL_DMAEx_ChangeMemory+0x104>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d03b      	beq.n	80069aa <HAL_DMAEx_ChangeMemory+0xae>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a33      	ldr	r2, [pc, #204]	@ (8006a04 <HAL_DMAEx_ChangeMemory+0x108>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d036      	beq.n	80069aa <HAL_DMAEx_ChangeMemory+0xae>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a31      	ldr	r2, [pc, #196]	@ (8006a08 <HAL_DMAEx_ChangeMemory+0x10c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d031      	beq.n	80069aa <HAL_DMAEx_ChangeMemory+0xae>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a30      	ldr	r2, [pc, #192]	@ (8006a0c <HAL_DMAEx_ChangeMemory+0x110>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d02c      	beq.n	80069aa <HAL_DMAEx_ChangeMemory+0xae>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a2e      	ldr	r2, [pc, #184]	@ (8006a10 <HAL_DMAEx_ChangeMemory+0x114>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d027      	beq.n	80069aa <HAL_DMAEx_ChangeMemory+0xae>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a2d      	ldr	r2, [pc, #180]	@ (8006a14 <HAL_DMAEx_ChangeMemory+0x118>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d022      	beq.n	80069aa <HAL_DMAEx_ChangeMemory+0xae>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a2b      	ldr	r2, [pc, #172]	@ (8006a18 <HAL_DMAEx_ChangeMemory+0x11c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d01d      	beq.n	80069aa <HAL_DMAEx_ChangeMemory+0xae>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a2a      	ldr	r2, [pc, #168]	@ (8006a1c <HAL_DMAEx_ChangeMemory+0x120>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d018      	beq.n	80069aa <HAL_DMAEx_ChangeMemory+0xae>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a28      	ldr	r2, [pc, #160]	@ (8006a20 <HAL_DMAEx_ChangeMemory+0x124>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d013      	beq.n	80069aa <HAL_DMAEx_ChangeMemory+0xae>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a27      	ldr	r2, [pc, #156]	@ (8006a24 <HAL_DMAEx_ChangeMemory+0x128>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00e      	beq.n	80069aa <HAL_DMAEx_ChangeMemory+0xae>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a25      	ldr	r2, [pc, #148]	@ (8006a28 <HAL_DMAEx_ChangeMemory+0x12c>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d009      	beq.n	80069aa <HAL_DMAEx_ChangeMemory+0xae>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a24      	ldr	r2, [pc, #144]	@ (8006a2c <HAL_DMAEx_ChangeMemory+0x130>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d004      	beq.n	80069aa <HAL_DMAEx_ChangeMemory+0xae>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a22      	ldr	r2, [pc, #136]	@ (8006a30 <HAL_DMAEx_ChangeMemory+0x134>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d101      	bne.n	80069ae <HAL_DMAEx_ChangeMemory+0xb2>
 80069aa:	2301      	movs	r3, #1
 80069ac:	e000      	b.n	80069b0 <HAL_DMAEx_ChangeMemory+0xb4>
 80069ae:	2300      	movs	r3, #0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00c      	beq.n	80069ce <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 80069b4:	79fb      	ldrb	r3, [r7, #7]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d104      	bne.n	80069c4 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	60da      	str	r2, [r3, #12]
 80069c2:	e010      	b.n	80069e6 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	611a      	str	r2, [r3, #16]
 80069cc:	e00b      	b.n	80069e6 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 80069ce:	79fb      	ldrb	r3, [r7, #7]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d104      	bne.n	80069de <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	60da      	str	r2, [r3, #12]
 80069dc:	e003      	b.n	80069e6 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr
 80069f4:	40020010 	.word	0x40020010
 80069f8:	40020028 	.word	0x40020028
 80069fc:	40020040 	.word	0x40020040
 8006a00:	40020058 	.word	0x40020058
 8006a04:	40020070 	.word	0x40020070
 8006a08:	40020088 	.word	0x40020088
 8006a0c:	400200a0 	.word	0x400200a0
 8006a10:	400200b8 	.word	0x400200b8
 8006a14:	40020410 	.word	0x40020410
 8006a18:	40020428 	.word	0x40020428
 8006a1c:	40020440 	.word	0x40020440
 8006a20:	40020458 	.word	0x40020458
 8006a24:	40020470 	.word	0x40020470
 8006a28:	40020488 	.word	0x40020488
 8006a2c:	400204a0 	.word	0x400204a0
 8006a30:	400204b8 	.word	0x400204b8

08006a34 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
 8006a40:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a46      	ldr	r2, [pc, #280]	@ (8006b60 <DMA_MultiBufferSetConfig+0x12c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d04a      	beq.n	8006ae2 <DMA_MultiBufferSetConfig+0xae>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a44      	ldr	r2, [pc, #272]	@ (8006b64 <DMA_MultiBufferSetConfig+0x130>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d045      	beq.n	8006ae2 <DMA_MultiBufferSetConfig+0xae>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a43      	ldr	r2, [pc, #268]	@ (8006b68 <DMA_MultiBufferSetConfig+0x134>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d040      	beq.n	8006ae2 <DMA_MultiBufferSetConfig+0xae>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a41      	ldr	r2, [pc, #260]	@ (8006b6c <DMA_MultiBufferSetConfig+0x138>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d03b      	beq.n	8006ae2 <DMA_MultiBufferSetConfig+0xae>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a40      	ldr	r2, [pc, #256]	@ (8006b70 <DMA_MultiBufferSetConfig+0x13c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d036      	beq.n	8006ae2 <DMA_MultiBufferSetConfig+0xae>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a3e      	ldr	r2, [pc, #248]	@ (8006b74 <DMA_MultiBufferSetConfig+0x140>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d031      	beq.n	8006ae2 <DMA_MultiBufferSetConfig+0xae>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a3d      	ldr	r2, [pc, #244]	@ (8006b78 <DMA_MultiBufferSetConfig+0x144>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d02c      	beq.n	8006ae2 <DMA_MultiBufferSetConfig+0xae>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a3b      	ldr	r2, [pc, #236]	@ (8006b7c <DMA_MultiBufferSetConfig+0x148>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d027      	beq.n	8006ae2 <DMA_MultiBufferSetConfig+0xae>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a3a      	ldr	r2, [pc, #232]	@ (8006b80 <DMA_MultiBufferSetConfig+0x14c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d022      	beq.n	8006ae2 <DMA_MultiBufferSetConfig+0xae>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a38      	ldr	r2, [pc, #224]	@ (8006b84 <DMA_MultiBufferSetConfig+0x150>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d01d      	beq.n	8006ae2 <DMA_MultiBufferSetConfig+0xae>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a37      	ldr	r2, [pc, #220]	@ (8006b88 <DMA_MultiBufferSetConfig+0x154>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d018      	beq.n	8006ae2 <DMA_MultiBufferSetConfig+0xae>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a35      	ldr	r2, [pc, #212]	@ (8006b8c <DMA_MultiBufferSetConfig+0x158>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d013      	beq.n	8006ae2 <DMA_MultiBufferSetConfig+0xae>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a34      	ldr	r2, [pc, #208]	@ (8006b90 <DMA_MultiBufferSetConfig+0x15c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d00e      	beq.n	8006ae2 <DMA_MultiBufferSetConfig+0xae>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a32      	ldr	r2, [pc, #200]	@ (8006b94 <DMA_MultiBufferSetConfig+0x160>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d009      	beq.n	8006ae2 <DMA_MultiBufferSetConfig+0xae>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a31      	ldr	r2, [pc, #196]	@ (8006b98 <DMA_MultiBufferSetConfig+0x164>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d004      	beq.n	8006ae2 <DMA_MultiBufferSetConfig+0xae>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a2f      	ldr	r2, [pc, #188]	@ (8006b9c <DMA_MultiBufferSetConfig+0x168>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d101      	bne.n	8006ae6 <DMA_MultiBufferSetConfig+0xb2>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e000      	b.n	8006ae8 <DMA_MultiBufferSetConfig+0xb4>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d019      	beq.n	8006b20 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	2b40      	cmp	r3, #64	@ 0x40
 8006afa:	d108      	bne.n	8006b0e <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8006b0c:	e021      	b.n	8006b52 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	60da      	str	r2, [r3, #12]
}
 8006b1e:	e018      	b.n	8006b52 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	2b40      	cmp	r3, #64	@ 0x40
 8006b2e:	d108      	bne.n	8006b42 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	60da      	str	r2, [r3, #12]
}
 8006b40:	e007      	b.n	8006b52 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	60da      	str	r2, [r3, #12]
}
 8006b52:	bf00      	nop
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	40020010 	.word	0x40020010
 8006b64:	40020028 	.word	0x40020028
 8006b68:	40020040 	.word	0x40020040
 8006b6c:	40020058 	.word	0x40020058
 8006b70:	40020070 	.word	0x40020070
 8006b74:	40020088 	.word	0x40020088
 8006b78:	400200a0 	.word	0x400200a0
 8006b7c:	400200b8 	.word	0x400200b8
 8006b80:	40020410 	.word	0x40020410
 8006b84:	40020428 	.word	0x40020428
 8006b88:	40020440 	.word	0x40020440
 8006b8c:	40020458 	.word	0x40020458
 8006b90:	40020470 	.word	0x40020470
 8006b94:	40020488 	.word	0x40020488
 8006b98:	400204a0 	.word	0x400204a0
 8006b9c:	400204b8 	.word	0x400204b8

08006ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b089      	sub	sp, #36	@ 0x24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006bae:	4b89      	ldr	r3, [pc, #548]	@ (8006dd4 <HAL_GPIO_Init+0x234>)
 8006bb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006bb2:	e194      	b.n	8006ede <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	2101      	movs	r1, #1
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 8186 	beq.w	8006ed8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f003 0303 	and.w	r3, r3, #3
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d005      	beq.n	8006be4 <HAL_GPIO_Init+0x44>
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f003 0303 	and.w	r3, r3, #3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d130      	bne.n	8006c46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	2203      	movs	r2, #3
 8006bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf4:	43db      	mvns	r3, r3
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	68da      	ldr	r2, [r3, #12]
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	005b      	lsls	r3, r3, #1
 8006c04:	fa02 f303 	lsl.w	r3, r2, r3
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c22:	43db      	mvns	r3, r3
 8006c24:	69ba      	ldr	r2, [r7, #24]
 8006c26:	4013      	ands	r3, r2
 8006c28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	091b      	lsrs	r3, r3, #4
 8006c30:	f003 0201 	and.w	r2, r3, #1
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3a:	69ba      	ldr	r2, [r7, #24]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	d017      	beq.n	8006c82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	2203      	movs	r2, #3
 8006c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c62:	43db      	mvns	r3, r3
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	4013      	ands	r3, r2
 8006c68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	689a      	ldr	r2, [r3, #8]
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	fa02 f303 	lsl.w	r3, r2, r3
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f003 0303 	and.w	r3, r3, #3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d123      	bne.n	8006cd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	08da      	lsrs	r2, r3, #3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	3208      	adds	r2, #8
 8006c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	f003 0307 	and.w	r3, r3, #7
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	220f      	movs	r2, #15
 8006ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8006caa:	43db      	mvns	r3, r3
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	4013      	ands	r3, r2
 8006cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	691a      	ldr	r2, [r3, #16]
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc2:	69ba      	ldr	r2, [r7, #24]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	08da      	lsrs	r2, r3, #3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	3208      	adds	r2, #8
 8006cd0:	69b9      	ldr	r1, [r7, #24]
 8006cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	005b      	lsls	r3, r3, #1
 8006ce0:	2203      	movs	r2, #3
 8006ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce6:	43db      	mvns	r3, r3
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	4013      	ands	r3, r2
 8006cec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f003 0203 	and.w	r2, r3, #3
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f000 80e0 	beq.w	8006ed8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d18:	4b2f      	ldr	r3, [pc, #188]	@ (8006dd8 <HAL_GPIO_Init+0x238>)
 8006d1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d1e:	4a2e      	ldr	r2, [pc, #184]	@ (8006dd8 <HAL_GPIO_Init+0x238>)
 8006d20:	f043 0302 	orr.w	r3, r3, #2
 8006d24:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006d28:	4b2b      	ldr	r3, [pc, #172]	@ (8006dd8 <HAL_GPIO_Init+0x238>)
 8006d2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	60fb      	str	r3, [r7, #12]
 8006d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d36:	4a29      	ldr	r2, [pc, #164]	@ (8006ddc <HAL_GPIO_Init+0x23c>)
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	089b      	lsrs	r3, r3, #2
 8006d3c:	3302      	adds	r3, #2
 8006d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	f003 0303 	and.w	r3, r3, #3
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	220f      	movs	r2, #15
 8006d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d52:	43db      	mvns	r3, r3
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	4013      	ands	r3, r2
 8006d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a20      	ldr	r2, [pc, #128]	@ (8006de0 <HAL_GPIO_Init+0x240>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d052      	beq.n	8006e08 <HAL_GPIO_Init+0x268>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a1f      	ldr	r2, [pc, #124]	@ (8006de4 <HAL_GPIO_Init+0x244>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d031      	beq.n	8006dce <HAL_GPIO_Init+0x22e>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8006de8 <HAL_GPIO_Init+0x248>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d02b      	beq.n	8006dca <HAL_GPIO_Init+0x22a>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a1d      	ldr	r2, [pc, #116]	@ (8006dec <HAL_GPIO_Init+0x24c>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d025      	beq.n	8006dc6 <HAL_GPIO_Init+0x226>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8006df0 <HAL_GPIO_Init+0x250>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d01f      	beq.n	8006dc2 <HAL_GPIO_Init+0x222>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a1b      	ldr	r2, [pc, #108]	@ (8006df4 <HAL_GPIO_Init+0x254>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d019      	beq.n	8006dbe <HAL_GPIO_Init+0x21e>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a1a      	ldr	r2, [pc, #104]	@ (8006df8 <HAL_GPIO_Init+0x258>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d013      	beq.n	8006dba <HAL_GPIO_Init+0x21a>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a19      	ldr	r2, [pc, #100]	@ (8006dfc <HAL_GPIO_Init+0x25c>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d00d      	beq.n	8006db6 <HAL_GPIO_Init+0x216>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a18      	ldr	r2, [pc, #96]	@ (8006e00 <HAL_GPIO_Init+0x260>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d007      	beq.n	8006db2 <HAL_GPIO_Init+0x212>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a17      	ldr	r2, [pc, #92]	@ (8006e04 <HAL_GPIO_Init+0x264>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d101      	bne.n	8006dae <HAL_GPIO_Init+0x20e>
 8006daa:	2309      	movs	r3, #9
 8006dac:	e02d      	b.n	8006e0a <HAL_GPIO_Init+0x26a>
 8006dae:	230a      	movs	r3, #10
 8006db0:	e02b      	b.n	8006e0a <HAL_GPIO_Init+0x26a>
 8006db2:	2308      	movs	r3, #8
 8006db4:	e029      	b.n	8006e0a <HAL_GPIO_Init+0x26a>
 8006db6:	2307      	movs	r3, #7
 8006db8:	e027      	b.n	8006e0a <HAL_GPIO_Init+0x26a>
 8006dba:	2306      	movs	r3, #6
 8006dbc:	e025      	b.n	8006e0a <HAL_GPIO_Init+0x26a>
 8006dbe:	2305      	movs	r3, #5
 8006dc0:	e023      	b.n	8006e0a <HAL_GPIO_Init+0x26a>
 8006dc2:	2304      	movs	r3, #4
 8006dc4:	e021      	b.n	8006e0a <HAL_GPIO_Init+0x26a>
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e01f      	b.n	8006e0a <HAL_GPIO_Init+0x26a>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	e01d      	b.n	8006e0a <HAL_GPIO_Init+0x26a>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e01b      	b.n	8006e0a <HAL_GPIO_Init+0x26a>
 8006dd2:	bf00      	nop
 8006dd4:	58000080 	.word	0x58000080
 8006dd8:	58024400 	.word	0x58024400
 8006ddc:	58000400 	.word	0x58000400
 8006de0:	58020000 	.word	0x58020000
 8006de4:	58020400 	.word	0x58020400
 8006de8:	58020800 	.word	0x58020800
 8006dec:	58020c00 	.word	0x58020c00
 8006df0:	58021000 	.word	0x58021000
 8006df4:	58021400 	.word	0x58021400
 8006df8:	58021800 	.word	0x58021800
 8006dfc:	58021c00 	.word	0x58021c00
 8006e00:	58022000 	.word	0x58022000
 8006e04:	58022400 	.word	0x58022400
 8006e08:	2300      	movs	r3, #0
 8006e0a:	69fa      	ldr	r2, [r7, #28]
 8006e0c:	f002 0203 	and.w	r2, r2, #3
 8006e10:	0092      	lsls	r2, r2, #2
 8006e12:	4093      	lsls	r3, r2
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e1a:	4938      	ldr	r1, [pc, #224]	@ (8006efc <HAL_GPIO_Init+0x35c>)
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	089b      	lsrs	r3, r3, #2
 8006e20:	3302      	adds	r3, #2
 8006e22:	69ba      	ldr	r2, [r7, #24]
 8006e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	43db      	mvns	r3, r3
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	4013      	ands	r3, r2
 8006e38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d003      	beq.n	8006e4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006e4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006e56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	43db      	mvns	r3, r3
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	4013      	ands	r3, r2
 8006e66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006e7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	43db      	mvns	r3, r3
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	4013      	ands	r3, r2
 8006e92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d003      	beq.n	8006ea8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006ea0:	69ba      	ldr	r2, [r7, #24]
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	69ba      	ldr	r2, [r7, #24]
 8006eac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	43db      	mvns	r3, r3
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	4013      	ands	r3, r2
 8006ebc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	3301      	adds	r3, #1
 8006edc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f47f ae63 	bne.w	8006bb4 <HAL_GPIO_Init+0x14>
  }
}
 8006eee:	bf00      	nop
 8006ef0:	bf00      	nop
 8006ef2:	3724      	adds	r7, #36	@ 0x24
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	58000400 	.word	0x58000400

08006f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	460b      	mov	r3, r1
 8006f0a:	807b      	strh	r3, [r7, #2]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f10:	787b      	ldrb	r3, [r7, #1]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f16:	887a      	ldrh	r2, [r7, #2]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006f1c:	e003      	b.n	8006f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006f1e:	887b      	ldrh	r3, [r7, #2]
 8006f20:	041a      	lsls	r2, r3, #16
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	619a      	str	r2, [r3, #24]
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
	...

08006f34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e08b      	b.n	800705e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d106      	bne.n	8006f60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7fb f82c 	bl	8001fb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2224      	movs	r2, #36	@ 0x24
 8006f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0201 	bic.w	r2, r2, #1
 8006f76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006f84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d107      	bne.n	8006fae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	689a      	ldr	r2, [r3, #8]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006faa:	609a      	str	r2, [r3, #8]
 8006fac:	e006      	b.n	8006fbc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	689a      	ldr	r2, [r3, #8]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006fba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d108      	bne.n	8006fd6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fd2:	605a      	str	r2, [r3, #4]
 8006fd4:	e007      	b.n	8006fe6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fe4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6859      	ldr	r1, [r3, #4]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8007068 <HAL_I2C_Init+0x134>)
 8006ff2:	430b      	orrs	r3, r1
 8006ff4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68da      	ldr	r2, [r3, #12]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007004:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	691a      	ldr	r2, [r3, #16]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	69d9      	ldr	r1, [r3, #28]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a1a      	ldr	r2, [r3, #32]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 0201 	orr.w	r2, r2, #1
 800703e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2220      	movs	r2, #32
 800704a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	02008000 	.word	0x02008000

0800706c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b088      	sub	sp, #32
 8007070:	af02      	add	r7, sp, #8
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	607a      	str	r2, [r7, #4]
 8007076:	461a      	mov	r2, r3
 8007078:	460b      	mov	r3, r1
 800707a:	817b      	strh	r3, [r7, #10]
 800707c:	4613      	mov	r3, r2
 800707e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b20      	cmp	r3, #32
 800708a:	f040 80fd 	bne.w	8007288 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007094:	2b01      	cmp	r3, #1
 8007096:	d101      	bne.n	800709c <HAL_I2C_Master_Transmit+0x30>
 8007098:	2302      	movs	r3, #2
 800709a:	e0f6      	b.n	800728a <HAL_I2C_Master_Transmit+0x21e>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80070a4:	f7fb fdd2 	bl	8002c4c <HAL_GetTick>
 80070a8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	2319      	movs	r3, #25
 80070b0:	2201      	movs	r2, #1
 80070b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f001 f891 	bl	80081de <I2C_WaitOnFlagUntilTimeout>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e0e1      	b.n	800728a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2221      	movs	r2, #33	@ 0x21
 80070ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2210      	movs	r2, #16
 80070d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	893a      	ldrh	r2, [r7, #8]
 80070e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	2bff      	cmp	r3, #255	@ 0xff
 80070f6:	d906      	bls.n	8007106 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	22ff      	movs	r2, #255	@ 0xff
 80070fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80070fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007102:	617b      	str	r3, [r7, #20]
 8007104:	e007      	b.n	8007116 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800710a:	b29a      	uxth	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007110:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007114:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800711a:	2b00      	cmp	r3, #0
 800711c:	d024      	beq.n	8007168 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007122:	781a      	ldrb	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712e:	1c5a      	adds	r2, r3, #1
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007138:	b29b      	uxth	r3, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	b29a      	uxth	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007146:	3b01      	subs	r3, #1
 8007148:	b29a      	uxth	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007152:	b2db      	uxtb	r3, r3
 8007154:	3301      	adds	r3, #1
 8007156:	b2da      	uxtb	r2, r3
 8007158:	8979      	ldrh	r1, [r7, #10]
 800715a:	4b4e      	ldr	r3, [pc, #312]	@ (8007294 <HAL_I2C_Master_Transmit+0x228>)
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f001 fa8b 	bl	800867c <I2C_TransferConfig>
 8007166:	e066      	b.n	8007236 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800716c:	b2da      	uxtb	r2, r3
 800716e:	8979      	ldrh	r1, [r7, #10]
 8007170:	4b48      	ldr	r3, [pc, #288]	@ (8007294 <HAL_I2C_Master_Transmit+0x228>)
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f001 fa80 	bl	800867c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800717c:	e05b      	b.n	8007236 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	6a39      	ldr	r1, [r7, #32]
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f001 f884 	bl	8008290 <I2C_WaitOnTXISFlagUntilTimeout>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e07b      	b.n	800728a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007196:	781a      	ldrb	r2, [r3, #0]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	3b01      	subs	r3, #1
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071ba:	3b01      	subs	r3, #1
 80071bc:	b29a      	uxth	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d034      	beq.n	8007236 <HAL_I2C_Master_Transmit+0x1ca>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d130      	bne.n	8007236 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	6a3b      	ldr	r3, [r7, #32]
 80071da:	2200      	movs	r2, #0
 80071dc:	2180      	movs	r1, #128	@ 0x80
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f000 fffd 	bl	80081de <I2C_WaitOnFlagUntilTimeout>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e04d      	b.n	800728a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	2bff      	cmp	r3, #255	@ 0xff
 80071f6:	d90e      	bls.n	8007216 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	22ff      	movs	r2, #255	@ 0xff
 80071fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007202:	b2da      	uxtb	r2, r3
 8007204:	8979      	ldrh	r1, [r7, #10]
 8007206:	2300      	movs	r3, #0
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f001 fa34 	bl	800867c <I2C_TransferConfig>
 8007214:	e00f      	b.n	8007236 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800721a:	b29a      	uxth	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007224:	b2da      	uxtb	r2, r3
 8007226:	8979      	ldrh	r1, [r7, #10]
 8007228:	2300      	movs	r3, #0
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f001 fa23 	bl	800867c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800723a:	b29b      	uxth	r3, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	d19e      	bne.n	800717e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	6a39      	ldr	r1, [r7, #32]
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f001 f86a 	bl	800831e <I2C_WaitOnSTOPFlagUntilTimeout>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e01a      	b.n	800728a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2220      	movs	r2, #32
 800725a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6859      	ldr	r1, [r3, #4]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	4b0c      	ldr	r3, [pc, #48]	@ (8007298 <HAL_I2C_Master_Transmit+0x22c>)
 8007268:	400b      	ands	r3, r1
 800726a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2220      	movs	r2, #32
 8007270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	e000      	b.n	800728a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007288:	2302      	movs	r3, #2
  }
}
 800728a:	4618      	mov	r0, r3
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	80002000 	.word	0x80002000
 8007298:	fe00e800 	.word	0xfe00e800

0800729c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b088      	sub	sp, #32
 80072a0:	af02      	add	r7, sp, #8
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	607a      	str	r2, [r7, #4]
 80072a6:	461a      	mov	r2, r3
 80072a8:	460b      	mov	r3, r1
 80072aa:	817b      	strh	r3, [r7, #10]
 80072ac:	4613      	mov	r3, r2
 80072ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	2b20      	cmp	r3, #32
 80072ba:	f040 80db 	bne.w	8007474 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d101      	bne.n	80072cc <HAL_I2C_Master_Receive+0x30>
 80072c8:	2302      	movs	r3, #2
 80072ca:	e0d4      	b.n	8007476 <HAL_I2C_Master_Receive+0x1da>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80072d4:	f7fb fcba 	bl	8002c4c <HAL_GetTick>
 80072d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	2319      	movs	r3, #25
 80072e0:	2201      	movs	r2, #1
 80072e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f000 ff79 	bl	80081de <I2C_WaitOnFlagUntilTimeout>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e0bf      	b.n	8007476 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2222      	movs	r2, #34	@ 0x22
 80072fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2210      	movs	r2, #16
 8007302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	893a      	ldrh	r2, [r7, #8]
 8007316:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007322:	b29b      	uxth	r3, r3
 8007324:	2bff      	cmp	r3, #255	@ 0xff
 8007326:	d90e      	bls.n	8007346 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	22ff      	movs	r2, #255	@ 0xff
 800732c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007332:	b2da      	uxtb	r2, r3
 8007334:	8979      	ldrh	r1, [r7, #10]
 8007336:	4b52      	ldr	r3, [pc, #328]	@ (8007480 <HAL_I2C_Master_Receive+0x1e4>)
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f001 f99c 	bl	800867c <I2C_TransferConfig>
 8007344:	e06d      	b.n	8007422 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800734a:	b29a      	uxth	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007354:	b2da      	uxtb	r2, r3
 8007356:	8979      	ldrh	r1, [r7, #10]
 8007358:	4b49      	ldr	r3, [pc, #292]	@ (8007480 <HAL_I2C_Master_Receive+0x1e4>)
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f001 f98b 	bl	800867c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007366:	e05c      	b.n	8007422 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	6a39      	ldr	r1, [r7, #32]
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f001 f819 	bl	80083a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e07c      	b.n	8007476 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007386:	b2d2      	uxtb	r2, r2
 8007388:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007398:	3b01      	subs	r3, #1
 800739a:	b29a      	uxth	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	3b01      	subs	r3, #1
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d034      	beq.n	8007422 <HAL_I2C_Master_Receive+0x186>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d130      	bne.n	8007422 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	2200      	movs	r2, #0
 80073c8:	2180      	movs	r1, #128	@ 0x80
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f000 ff07 	bl	80081de <I2C_WaitOnFlagUntilTimeout>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d001      	beq.n	80073da <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e04d      	b.n	8007476 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073de:	b29b      	uxth	r3, r3
 80073e0:	2bff      	cmp	r3, #255	@ 0xff
 80073e2:	d90e      	bls.n	8007402 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	22ff      	movs	r2, #255	@ 0xff
 80073e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	8979      	ldrh	r1, [r7, #10]
 80073f2:	2300      	movs	r3, #0
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f001 f93e 	bl	800867c <I2C_TransferConfig>
 8007400:	e00f      	b.n	8007422 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007406:	b29a      	uxth	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007410:	b2da      	uxtb	r2, r3
 8007412:	8979      	ldrh	r1, [r7, #10]
 8007414:	2300      	movs	r3, #0
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f001 f92d 	bl	800867c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007426:	b29b      	uxth	r3, r3
 8007428:	2b00      	cmp	r3, #0
 800742a:	d19d      	bne.n	8007368 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	6a39      	ldr	r1, [r7, #32]
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f000 ff74 	bl	800831e <I2C_WaitOnSTOPFlagUntilTimeout>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e01a      	b.n	8007476 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2220      	movs	r2, #32
 8007446:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	6859      	ldr	r1, [r3, #4]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	4b0c      	ldr	r3, [pc, #48]	@ (8007484 <HAL_I2C_Master_Receive+0x1e8>)
 8007454:	400b      	ands	r3, r1
 8007456:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2220      	movs	r2, #32
 800745c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007470:	2300      	movs	r3, #0
 8007472:	e000      	b.n	8007476 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007474:	2302      	movs	r3, #2
  }
}
 8007476:	4618      	mov	r0, r3
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	80002400 	.word	0x80002400
 8007484:	fe00e800 	.word	0xfe00e800

08007488 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d005      	beq.n	80074b4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	68f9      	ldr	r1, [r7, #12]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	4798      	blx	r3
  }
}
 80074b4:	bf00      	nop
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	0a1b      	lsrs	r3, r3, #8
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d010      	beq.n	8007502 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	09db      	lsrs	r3, r3, #7
 80074e4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00a      	beq.n	8007502 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074f0:	f043 0201 	orr.w	r2, r3, #1
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007500:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	0a9b      	lsrs	r3, r3, #10
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b00      	cmp	r3, #0
 800750c:	d010      	beq.n	8007530 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	09db      	lsrs	r3, r3, #7
 8007512:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00a      	beq.n	8007530 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800751e:	f043 0208 	orr.w	r2, r3, #8
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800752e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	0a5b      	lsrs	r3, r3, #9
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	2b00      	cmp	r3, #0
 800753a:	d010      	beq.n	800755e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	09db      	lsrs	r3, r3, #7
 8007540:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00a      	beq.n	800755e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800754c:	f043 0202 	orr.w	r2, r3, #2
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800755c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007562:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f003 030b 	and.w	r3, r3, #11
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800756e:	68f9      	ldr	r1, [r7, #12]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fcdb 	bl	8007f2c <I2C_ITError>
  }
}
 8007576:	bf00      	nop
 8007578:	3718      	adds	r7, #24
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007586:	bf00      	nop
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800759a:	bf00      	nop
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	460b      	mov	r3, r1
 80075b0:	70fb      	strb	r3, [r7, #3]
 80075b2:	4613      	mov	r3, r2
 80075b4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b083      	sub	sp, #12
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80075ca:	bf00      	nop
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80075de:	bf00      	nop
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b083      	sub	sp, #12
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80075f2:	bf00      	nop
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b086      	sub	sp, #24
 8007602:	af00      	add	r7, sp, #0
 8007604:	60f8      	str	r0, [r7, #12]
 8007606:	60b9      	str	r1, [r7, #8]
 8007608:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800761a:	2b01      	cmp	r3, #1
 800761c:	d101      	bne.n	8007622 <I2C_Slave_ISR_IT+0x24>
 800761e:	2302      	movs	r3, #2
 8007620:	e0ed      	b.n	80077fe <I2C_Slave_ISR_IT+0x200>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	095b      	lsrs	r3, r3, #5
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00a      	beq.n	800764c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	095b      	lsrs	r3, r3, #5
 800763a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800763e:	2b00      	cmp	r3, #0
 8007640:	d004      	beq.n	800764c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007642:	6939      	ldr	r1, [r7, #16]
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f000 f9c1 	bl	80079cc <I2C_ITSlaveCplt>
 800764a:	e0d3      	b.n	80077f4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	091b      	lsrs	r3, r3, #4
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	2b00      	cmp	r3, #0
 8007656:	d04d      	beq.n	80076f4 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	091b      	lsrs	r3, r3, #4
 800765c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007660:	2b00      	cmp	r3, #0
 8007662:	d047      	beq.n	80076f4 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007668:	b29b      	uxth	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d128      	bne.n	80076c0 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b28      	cmp	r3, #40	@ 0x28
 8007678:	d108      	bne.n	800768c <I2C_Slave_ISR_IT+0x8e>
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007680:	d104      	bne.n	800768c <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007682:	6939      	ldr	r1, [r7, #16]
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f000 fbfb 	bl	8007e80 <I2C_ITListenCplt>
 800768a:	e032      	b.n	80076f2 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b29      	cmp	r3, #41	@ 0x29
 8007696:	d10e      	bne.n	80076b6 <I2C_Slave_ISR_IT+0xb8>
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800769e:	d00a      	beq.n	80076b6 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2210      	movs	r2, #16
 80076a6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 fd56 	bl	800815a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 f92d 	bl	800790e <I2C_ITSlaveSeqCplt>
 80076b4:	e01d      	b.n	80076f2 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2210      	movs	r2, #16
 80076bc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80076be:	e096      	b.n	80077ee <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2210      	movs	r2, #16
 80076c6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076cc:	f043 0204 	orr.w	r2, r3, #4
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d004      	beq.n	80076e4 <I2C_Slave_ISR_IT+0xe6>
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076e0:	f040 8085 	bne.w	80077ee <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076e8:	4619      	mov	r1, r3
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 fc1e 	bl	8007f2c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80076f0:	e07d      	b.n	80077ee <I2C_Slave_ISR_IT+0x1f0>
 80076f2:	e07c      	b.n	80077ee <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	089b      	lsrs	r3, r3, #2
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d030      	beq.n	8007762 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	089b      	lsrs	r3, r3, #2
 8007704:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007708:	2b00      	cmp	r3, #0
 800770a:	d02a      	beq.n	8007762 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007710:	b29b      	uxth	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d018      	beq.n	8007748 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007720:	b2d2      	uxtb	r2, r2
 8007722:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007732:	3b01      	subs	r3, #1
 8007734:	b29a      	uxth	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800773e:	b29b      	uxth	r3, r3
 8007740:	3b01      	subs	r3, #1
 8007742:	b29a      	uxth	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800774c:	b29b      	uxth	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	d14f      	bne.n	80077f2 <I2C_Slave_ISR_IT+0x1f4>
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007758:	d04b      	beq.n	80077f2 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f000 f8d7 	bl	800790e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007760:	e047      	b.n	80077f2 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	08db      	lsrs	r3, r3, #3
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00a      	beq.n	8007784 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	08db      	lsrs	r3, r3, #3
 8007772:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007776:	2b00      	cmp	r3, #0
 8007778:	d004      	beq.n	8007784 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800777a:	6939      	ldr	r1, [r7, #16]
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f000 f842 	bl	8007806 <I2C_ITAddrCplt>
 8007782:	e037      	b.n	80077f4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	085b      	lsrs	r3, r3, #1
 8007788:	f003 0301 	and.w	r3, r3, #1
 800778c:	2b00      	cmp	r3, #0
 800778e:	d031      	beq.n	80077f4 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	085b      	lsrs	r3, r3, #1
 8007794:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007798:	2b00      	cmp	r3, #0
 800779a:	d02b      	beq.n	80077f4 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d018      	beq.n	80077d8 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077aa:	781a      	ldrb	r2, [r3, #0]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b6:	1c5a      	adds	r2, r3, #1
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	3b01      	subs	r3, #1
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077ce:	3b01      	subs	r3, #1
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80077d6:	e00d      	b.n	80077f4 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077de:	d002      	beq.n	80077e6 <I2C_Slave_ISR_IT+0x1e8>
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d106      	bne.n	80077f4 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f000 f891 	bl	800790e <I2C_ITSlaveSeqCplt>
 80077ec:	e002      	b.n	80077f4 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80077ee:	bf00      	nop
 80077f0:	e000      	b.n	80077f4 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80077f2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3718      	adds	r7, #24
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b084      	sub	sp, #16
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007816:	b2db      	uxtb	r3, r3
 8007818:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800781c:	2b28      	cmp	r3, #40	@ 0x28
 800781e:	d16a      	bne.n	80078f6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	0c1b      	lsrs	r3, r3, #16
 8007828:	b2db      	uxtb	r3, r3
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	0c1b      	lsrs	r3, r3, #16
 8007838:	b29b      	uxth	r3, r3
 800783a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800783e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	b29b      	uxth	r3, r3
 8007848:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800784c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	b29b      	uxth	r3, r3
 8007856:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800785a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	2b02      	cmp	r3, #2
 8007862:	d138      	bne.n	80078d6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007864:	897b      	ldrh	r3, [r7, #10]
 8007866:	09db      	lsrs	r3, r3, #7
 8007868:	b29a      	uxth	r2, r3
 800786a:	89bb      	ldrh	r3, [r7, #12]
 800786c:	4053      	eors	r3, r2
 800786e:	b29b      	uxth	r3, r3
 8007870:	f003 0306 	and.w	r3, r3, #6
 8007874:	2b00      	cmp	r3, #0
 8007876:	d11c      	bne.n	80078b2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007878:	897b      	ldrh	r3, [r7, #10]
 800787a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800788a:	2b02      	cmp	r3, #2
 800788c:	d13b      	bne.n	8007906 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2208      	movs	r2, #8
 800789a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80078a4:	89ba      	ldrh	r2, [r7, #12]
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7ff fe7b 	bl	80075a6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80078b0:	e029      	b.n	8007906 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80078b2:	893b      	ldrh	r3, [r7, #8]
 80078b4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80078b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 ff10 	bl	80086e0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80078c8:	89ba      	ldrh	r2, [r7, #12]
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	4619      	mov	r1, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7ff fe69 	bl	80075a6 <HAL_I2C_AddrCallback>
}
 80078d4:	e017      	b.n	8007906 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80078d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 ff00 	bl	80086e0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80078e8:	89ba      	ldrh	r2, [r7, #12]
 80078ea:	7bfb      	ldrb	r3, [r7, #15]
 80078ec:	4619      	mov	r1, r3
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7ff fe59 	bl	80075a6 <HAL_I2C_AddrCallback>
}
 80078f4:	e007      	b.n	8007906 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2208      	movs	r2, #8
 80078fc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007906:	bf00      	nop
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b084      	sub	sp, #16
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	0b9b      	lsrs	r3, r3, #14
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	d008      	beq.n	8007944 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007940:	601a      	str	r2, [r3, #0]
 8007942:	e00d      	b.n	8007960 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	0bdb      	lsrs	r3, r3, #15
 8007948:	f003 0301 	and.w	r3, r3, #1
 800794c:	2b00      	cmp	r3, #0
 800794e:	d007      	beq.n	8007960 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800795e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b29      	cmp	r3, #41	@ 0x29
 800796a:	d112      	bne.n	8007992 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2228      	movs	r2, #40	@ 0x28
 8007970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2221      	movs	r2, #33	@ 0x21
 8007978:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800797a:	2101      	movs	r1, #1
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 feaf 	bl	80086e0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7ff fdf7 	bl	800757e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007990:	e017      	b.n	80079c2 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b2a      	cmp	r3, #42	@ 0x2a
 800799c:	d111      	bne.n	80079c2 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2228      	movs	r2, #40	@ 0x28
 80079a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2222      	movs	r2, #34	@ 0x22
 80079aa:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80079ac:	2102      	movs	r1, #2
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fe96 	bl	80086e0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7ff fde8 	bl	8007592 <HAL_I2C_SlaveRxCpltCallback>
}
 80079c2:	bf00      	nop
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
	...

080079cc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079ee:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2220      	movs	r2, #32
 80079f6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80079f8:	7afb      	ldrb	r3, [r7, #11]
 80079fa:	2b21      	cmp	r3, #33	@ 0x21
 80079fc:	d002      	beq.n	8007a04 <I2C_ITSlaveCplt+0x38>
 80079fe:	7afb      	ldrb	r3, [r7, #11]
 8007a00:	2b29      	cmp	r3, #41	@ 0x29
 8007a02:	d108      	bne.n	8007a16 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007a04:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fe69 	bl	80086e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2221      	movs	r2, #33	@ 0x21
 8007a12:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a14:	e019      	b.n	8007a4a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007a16:	7afb      	ldrb	r3, [r7, #11]
 8007a18:	2b22      	cmp	r3, #34	@ 0x22
 8007a1a:	d002      	beq.n	8007a22 <I2C_ITSlaveCplt+0x56>
 8007a1c:	7afb      	ldrb	r3, [r7, #11]
 8007a1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a20:	d108      	bne.n	8007a34 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007a22:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fe5a 	bl	80086e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2222      	movs	r2, #34	@ 0x22
 8007a30:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a32:	e00a      	b.n	8007a4a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007a34:	7afb      	ldrb	r3, [r7, #11]
 8007a36:	2b28      	cmp	r3, #40	@ 0x28
 8007a38:	d107      	bne.n	8007a4a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007a3a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fe4e 	bl	80086e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a58:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6859      	ldr	r1, [r3, #4]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	4b80      	ldr	r3, [pc, #512]	@ (8007c68 <I2C_ITSlaveCplt+0x29c>)
 8007a66:	400b      	ands	r3, r1
 8007a68:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fb75 	bl	800815a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	0b9b      	lsrs	r3, r3, #14
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d07a      	beq.n	8007b72 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007a8a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 8112 	beq.w	8007cba <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a73      	ldr	r2, [pc, #460]	@ (8007c6c <I2C_ITSlaveCplt+0x2a0>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d059      	beq.n	8007b56 <I2C_ITSlaveCplt+0x18a>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a71      	ldr	r2, [pc, #452]	@ (8007c70 <I2C_ITSlaveCplt+0x2a4>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d053      	beq.n	8007b56 <I2C_ITSlaveCplt+0x18a>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a6f      	ldr	r2, [pc, #444]	@ (8007c74 <I2C_ITSlaveCplt+0x2a8>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d04d      	beq.n	8007b56 <I2C_ITSlaveCplt+0x18a>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a6d      	ldr	r2, [pc, #436]	@ (8007c78 <I2C_ITSlaveCplt+0x2ac>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d047      	beq.n	8007b56 <I2C_ITSlaveCplt+0x18a>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a6b      	ldr	r2, [pc, #428]	@ (8007c7c <I2C_ITSlaveCplt+0x2b0>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d041      	beq.n	8007b56 <I2C_ITSlaveCplt+0x18a>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a69      	ldr	r2, [pc, #420]	@ (8007c80 <I2C_ITSlaveCplt+0x2b4>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d03b      	beq.n	8007b56 <I2C_ITSlaveCplt+0x18a>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a67      	ldr	r2, [pc, #412]	@ (8007c84 <I2C_ITSlaveCplt+0x2b8>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d035      	beq.n	8007b56 <I2C_ITSlaveCplt+0x18a>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a65      	ldr	r2, [pc, #404]	@ (8007c88 <I2C_ITSlaveCplt+0x2bc>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d02f      	beq.n	8007b56 <I2C_ITSlaveCplt+0x18a>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a63      	ldr	r2, [pc, #396]	@ (8007c8c <I2C_ITSlaveCplt+0x2c0>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d029      	beq.n	8007b56 <I2C_ITSlaveCplt+0x18a>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a61      	ldr	r2, [pc, #388]	@ (8007c90 <I2C_ITSlaveCplt+0x2c4>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d023      	beq.n	8007b56 <I2C_ITSlaveCplt+0x18a>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a5f      	ldr	r2, [pc, #380]	@ (8007c94 <I2C_ITSlaveCplt+0x2c8>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d01d      	beq.n	8007b56 <I2C_ITSlaveCplt+0x18a>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a5d      	ldr	r2, [pc, #372]	@ (8007c98 <I2C_ITSlaveCplt+0x2cc>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d017      	beq.n	8007b56 <I2C_ITSlaveCplt+0x18a>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a5b      	ldr	r2, [pc, #364]	@ (8007c9c <I2C_ITSlaveCplt+0x2d0>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d011      	beq.n	8007b56 <I2C_ITSlaveCplt+0x18a>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a59      	ldr	r2, [pc, #356]	@ (8007ca0 <I2C_ITSlaveCplt+0x2d4>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d00b      	beq.n	8007b56 <I2C_ITSlaveCplt+0x18a>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a57      	ldr	r2, [pc, #348]	@ (8007ca4 <I2C_ITSlaveCplt+0x2d8>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d005      	beq.n	8007b56 <I2C_ITSlaveCplt+0x18a>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a55      	ldr	r2, [pc, #340]	@ (8007ca8 <I2C_ITSlaveCplt+0x2dc>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d105      	bne.n	8007b62 <I2C_ITSlaveCplt+0x196>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	e004      	b.n	8007b6c <I2C_ITSlaveCplt+0x1a0>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8007b70:	e0a3      	b.n	8007cba <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	0bdb      	lsrs	r3, r3, #15
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f000 809d 	beq.w	8007cba <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b8e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 8090 	beq.w	8007cba <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a32      	ldr	r2, [pc, #200]	@ (8007c6c <I2C_ITSlaveCplt+0x2a0>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d059      	beq.n	8007c5a <I2C_ITSlaveCplt+0x28e>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a30      	ldr	r2, [pc, #192]	@ (8007c70 <I2C_ITSlaveCplt+0x2a4>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d053      	beq.n	8007c5a <I2C_ITSlaveCplt+0x28e>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a2e      	ldr	r2, [pc, #184]	@ (8007c74 <I2C_ITSlaveCplt+0x2a8>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d04d      	beq.n	8007c5a <I2C_ITSlaveCplt+0x28e>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a2c      	ldr	r2, [pc, #176]	@ (8007c78 <I2C_ITSlaveCplt+0x2ac>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d047      	beq.n	8007c5a <I2C_ITSlaveCplt+0x28e>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a2a      	ldr	r2, [pc, #168]	@ (8007c7c <I2C_ITSlaveCplt+0x2b0>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d041      	beq.n	8007c5a <I2C_ITSlaveCplt+0x28e>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a28      	ldr	r2, [pc, #160]	@ (8007c80 <I2C_ITSlaveCplt+0x2b4>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d03b      	beq.n	8007c5a <I2C_ITSlaveCplt+0x28e>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a26      	ldr	r2, [pc, #152]	@ (8007c84 <I2C_ITSlaveCplt+0x2b8>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d035      	beq.n	8007c5a <I2C_ITSlaveCplt+0x28e>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a24      	ldr	r2, [pc, #144]	@ (8007c88 <I2C_ITSlaveCplt+0x2bc>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d02f      	beq.n	8007c5a <I2C_ITSlaveCplt+0x28e>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a22      	ldr	r2, [pc, #136]	@ (8007c8c <I2C_ITSlaveCplt+0x2c0>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d029      	beq.n	8007c5a <I2C_ITSlaveCplt+0x28e>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a20      	ldr	r2, [pc, #128]	@ (8007c90 <I2C_ITSlaveCplt+0x2c4>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d023      	beq.n	8007c5a <I2C_ITSlaveCplt+0x28e>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a1e      	ldr	r2, [pc, #120]	@ (8007c94 <I2C_ITSlaveCplt+0x2c8>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d01d      	beq.n	8007c5a <I2C_ITSlaveCplt+0x28e>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a1c      	ldr	r2, [pc, #112]	@ (8007c98 <I2C_ITSlaveCplt+0x2cc>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d017      	beq.n	8007c5a <I2C_ITSlaveCplt+0x28e>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a1a      	ldr	r2, [pc, #104]	@ (8007c9c <I2C_ITSlaveCplt+0x2d0>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d011      	beq.n	8007c5a <I2C_ITSlaveCplt+0x28e>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a18      	ldr	r2, [pc, #96]	@ (8007ca0 <I2C_ITSlaveCplt+0x2d4>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d00b      	beq.n	8007c5a <I2C_ITSlaveCplt+0x28e>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a16      	ldr	r2, [pc, #88]	@ (8007ca4 <I2C_ITSlaveCplt+0x2d8>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d005      	beq.n	8007c5a <I2C_ITSlaveCplt+0x28e>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a14      	ldr	r2, [pc, #80]	@ (8007ca8 <I2C_ITSlaveCplt+0x2dc>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d128      	bne.n	8007cac <I2C_ITSlaveCplt+0x2e0>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	e027      	b.n	8007cb6 <I2C_ITSlaveCplt+0x2ea>
 8007c66:	bf00      	nop
 8007c68:	fe00e800 	.word	0xfe00e800
 8007c6c:	40020010 	.word	0x40020010
 8007c70:	40020028 	.word	0x40020028
 8007c74:	40020040 	.word	0x40020040
 8007c78:	40020058 	.word	0x40020058
 8007c7c:	40020070 	.word	0x40020070
 8007c80:	40020088 	.word	0x40020088
 8007c84:	400200a0 	.word	0x400200a0
 8007c88:	400200b8 	.word	0x400200b8
 8007c8c:	40020410 	.word	0x40020410
 8007c90:	40020428 	.word	0x40020428
 8007c94:	40020440 	.word	0x40020440
 8007c98:	40020458 	.word	0x40020458
 8007c9c:	40020470 	.word	0x40020470
 8007ca0:	40020488 	.word	0x40020488
 8007ca4:	400204a0 	.word	0x400204a0
 8007ca8:	400204b8 	.word	0x400204b8
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	089b      	lsrs	r3, r3, #2
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d020      	beq.n	8007d08 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f023 0304 	bic.w	r3, r3, #4
 8007ccc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd8:	b2d2      	uxtb	r2, r2
 8007cda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce0:	1c5a      	adds	r2, r3, #1
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00c      	beq.n	8007d08 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	3b01      	subs	r3, #1
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d005      	beq.n	8007d1e <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d16:	f043 0204 	orr.w	r2, r3, #4
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	091b      	lsrs	r3, r3, #4
 8007d22:	f003 0301 	and.w	r3, r3, #1
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d04a      	beq.n	8007dc0 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	091b      	lsrs	r3, r3, #4
 8007d2e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d044      	beq.n	8007dc0 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d128      	bne.n	8007d92 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b28      	cmp	r3, #40	@ 0x28
 8007d4a:	d108      	bne.n	8007d5e <I2C_ITSlaveCplt+0x392>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d52:	d104      	bne.n	8007d5e <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007d54:	6979      	ldr	r1, [r7, #20]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f892 	bl	8007e80 <I2C_ITListenCplt>
 8007d5c:	e030      	b.n	8007dc0 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b29      	cmp	r3, #41	@ 0x29
 8007d68:	d10e      	bne.n	8007d88 <I2C_ITSlaveCplt+0x3bc>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007d70:	d00a      	beq.n	8007d88 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2210      	movs	r2, #16
 8007d78:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f9ed 	bl	800815a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7ff fdc4 	bl	800790e <I2C_ITSlaveSeqCplt>
 8007d86:	e01b      	b.n	8007dc0 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2210      	movs	r2, #16
 8007d8e:	61da      	str	r2, [r3, #28]
 8007d90:	e016      	b.n	8007dc0 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2210      	movs	r2, #16
 8007d98:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d9e:	f043 0204 	orr.w	r2, r3, #4
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d003      	beq.n	8007db4 <I2C_ITSlaveCplt+0x3e8>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007db2:	d105      	bne.n	8007dc0 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007db8:	4619      	mov	r1, r3
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f8b6 	bl	8007f2c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d010      	beq.n	8007df8 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f8a5 	bl	8007f2c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b28      	cmp	r3, #40	@ 0x28
 8007dec:	d141      	bne.n	8007e72 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007dee:	6979      	ldr	r1, [r7, #20]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f845 	bl	8007e80 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007df6:	e03c      	b.n	8007e72 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007e00:	d014      	beq.n	8007e2c <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7ff fd83 	bl	800790e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8007e7c <I2C_ITSlaveCplt+0x4b0>)
 8007e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2220      	movs	r2, #32
 8007e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7ff fbcc 	bl	80075c2 <HAL_I2C_ListenCpltCallback>
}
 8007e2a:	e022      	b.n	8007e72 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b22      	cmp	r3, #34	@ 0x22
 8007e36:	d10e      	bne.n	8007e56 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7ff fb9f 	bl	8007592 <HAL_I2C_SlaveRxCpltCallback>
}
 8007e54:	e00d      	b.n	8007e72 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7ff fb86 	bl	800757e <HAL_I2C_SlaveTxCpltCallback>
}
 8007e72:	bf00      	nop
 8007e74:	3718      	adds	r7, #24
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	ffff0000 	.word	0xffff0000

08007e80 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a26      	ldr	r2, [pc, #152]	@ (8007f28 <I2C_ITListenCplt+0xa8>)
 8007e8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	089b      	lsrs	r3, r3, #2
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d022      	beq.n	8007efe <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec2:	b2d2      	uxtb	r2, r2
 8007ec4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eca:	1c5a      	adds	r2, r3, #1
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d012      	beq.n	8007efe <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007edc:	3b01      	subs	r3, #1
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	3b01      	subs	r3, #1
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ef6:	f043 0204 	orr.w	r2, r3, #4
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007efe:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fbec 	bl	80086e0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2210      	movs	r2, #16
 8007f0e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7ff fb52 	bl	80075c2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007f1e:	bf00      	nop
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	ffff0000 	.word	0xffff0000

08007f2c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f3c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a6d      	ldr	r2, [pc, #436]	@ (8008100 <I2C_ITError+0x1d4>)
 8007f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
 8007f60:	2b28      	cmp	r3, #40	@ 0x28
 8007f62:	d005      	beq.n	8007f70 <I2C_ITError+0x44>
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
 8007f66:	2b29      	cmp	r3, #41	@ 0x29
 8007f68:	d002      	beq.n	8007f70 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007f6a:	7bfb      	ldrb	r3, [r7, #15]
 8007f6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f6e:	d10b      	bne.n	8007f88 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007f70:	2103      	movs	r1, #3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fbb4 	bl	80086e0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2228      	movs	r2, #40	@ 0x28
 8007f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a60      	ldr	r2, [pc, #384]	@ (8008104 <I2C_ITError+0x1d8>)
 8007f84:	635a      	str	r2, [r3, #52]	@ 0x34
 8007f86:	e030      	b.n	8007fea <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007f88:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fba7 	bl	80086e0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f8e1 	bl	800815a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	2b60      	cmp	r3, #96	@ 0x60
 8007fa2:	d01f      	beq.n	8007fe4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2220      	movs	r2, #32
 8007fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	f003 0320 	and.w	r3, r3, #32
 8007fb6:	2b20      	cmp	r3, #32
 8007fb8:	d114      	bne.n	8007fe4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	f003 0310 	and.w	r3, r3, #16
 8007fc4:	2b10      	cmp	r3, #16
 8007fc6:	d109      	bne.n	8007fdc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2210      	movs	r2, #16
 8007fce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fd4:	f043 0204 	orr.w	r2, r3, #4
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2220      	movs	r2, #32
 8007fe2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fee:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d039      	beq.n	800806c <I2C_ITError+0x140>
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	2b11      	cmp	r3, #17
 8007ffc:	d002      	beq.n	8008004 <I2C_ITError+0xd8>
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2b21      	cmp	r3, #33	@ 0x21
 8008002:	d133      	bne.n	800806c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800800e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008012:	d107      	bne.n	8008024 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008022:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008028:	4618      	mov	r0, r3
 800802a:	f7fd fd13 	bl	8005a54 <HAL_DMA_GetState>
 800802e:	4603      	mov	r3, r0
 8008030:	2b01      	cmp	r3, #1
 8008032:	d017      	beq.n	8008064 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008038:	4a33      	ldr	r2, [pc, #204]	@ (8008108 <I2C_ITError+0x1dc>)
 800803a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008048:	4618      	mov	r0, r3
 800804a:	f7fc fb93 	bl	8004774 <HAL_DMA_Abort_IT>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d04d      	beq.n	80080f0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800805e:	4610      	mov	r0, r2
 8008060:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008062:	e045      	b.n	80080f0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f851 	bl	800810c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800806a:	e041      	b.n	80080f0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008070:	2b00      	cmp	r3, #0
 8008072:	d039      	beq.n	80080e8 <I2C_ITError+0x1bc>
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	2b12      	cmp	r3, #18
 8008078:	d002      	beq.n	8008080 <I2C_ITError+0x154>
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	2b22      	cmp	r3, #34	@ 0x22
 800807e:	d133      	bne.n	80080e8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800808a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800808e:	d107      	bne.n	80080a0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800809e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fd fcd5 	bl	8005a54 <HAL_DMA_GetState>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d017      	beq.n	80080e0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080b4:	4a14      	ldr	r2, [pc, #80]	@ (8008108 <I2C_ITError+0x1dc>)
 80080b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7fc fb55 	bl	8004774 <HAL_DMA_Abort_IT>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d011      	beq.n	80080f4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80080da:	4610      	mov	r0, r2
 80080dc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80080de:	e009      	b.n	80080f4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f813 	bl	800810c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80080e6:	e005      	b.n	80080f4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f80f 	bl	800810c <I2C_TreatErrorCallback>
  }
}
 80080ee:	e002      	b.n	80080f6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80080f0:	bf00      	nop
 80080f2:	e000      	b.n	80080f6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80080f4:	bf00      	nop
}
 80080f6:	bf00      	nop
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	ffff0000 	.word	0xffff0000
 8008104:	080075ff 	.word	0x080075ff
 8008108:	080081a3 	.word	0x080081a3

0800810c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800811a:	b2db      	uxtb	r3, r3
 800811c:	2b60      	cmp	r3, #96	@ 0x60
 800811e:	d10e      	bne.n	800813e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2220      	movs	r2, #32
 8008124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7ff fa57 	bl	80075ea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800813c:	e009      	b.n	8008152 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7ff fa42 	bl	80075d6 <HAL_I2C_ErrorCallback>
}
 8008152:	bf00      	nop
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800815a:	b480      	push	{r7}
 800815c:	b083      	sub	sp, #12
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	f003 0302 	and.w	r3, r3, #2
 800816c:	2b02      	cmp	r3, #2
 800816e:	d103      	bne.n	8008178 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2200      	movs	r2, #0
 8008176:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	699b      	ldr	r3, [r3, #24]
 800817e:	f003 0301 	and.w	r3, r3, #1
 8008182:	2b01      	cmp	r3, #1
 8008184:	d007      	beq.n	8008196 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	699a      	ldr	r2, [r3, #24]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f042 0201 	orr.w	r2, r2, #1
 8008194:	619a      	str	r2, [r3, #24]
  }
}
 8008196:	bf00      	nop
 8008198:	370c      	adds	r7, #12
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr

080081a2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b084      	sub	sp, #16
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ae:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d003      	beq.n	80081c0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081bc:	2200      	movs	r2, #0
 80081be:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d003      	beq.n	80081d0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081cc:	2200      	movs	r2, #0
 80081ce:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f7ff ff9b 	bl	800810c <I2C_TreatErrorCallback>
}
 80081d6:	bf00      	nop
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	60f8      	str	r0, [r7, #12]
 80081e6:	60b9      	str	r1, [r7, #8]
 80081e8:	603b      	str	r3, [r7, #0]
 80081ea:	4613      	mov	r3, r2
 80081ec:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081ee:	e03b      	b.n	8008268 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80081f0:	69ba      	ldr	r2, [r7, #24]
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f000 f961 	bl	80084bc <I2C_IsErrorOccurred>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e041      	b.n	8008288 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820a:	d02d      	beq.n	8008268 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800820c:	f7fa fd1e 	bl	8002c4c <HAL_GetTick>
 8008210:	4602      	mov	r2, r0
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	429a      	cmp	r2, r3
 800821a:	d302      	bcc.n	8008222 <I2C_WaitOnFlagUntilTimeout+0x44>
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d122      	bne.n	8008268 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	699a      	ldr	r2, [r3, #24]
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	4013      	ands	r3, r2
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	429a      	cmp	r2, r3
 8008230:	bf0c      	ite	eq
 8008232:	2301      	moveq	r3, #1
 8008234:	2300      	movne	r3, #0
 8008236:	b2db      	uxtb	r3, r3
 8008238:	461a      	mov	r2, r3
 800823a:	79fb      	ldrb	r3, [r7, #7]
 800823c:	429a      	cmp	r2, r3
 800823e:	d113      	bne.n	8008268 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008244:	f043 0220 	orr.w	r2, r3, #32
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2220      	movs	r2, #32
 8008250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e00f      	b.n	8008288 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	699a      	ldr	r2, [r3, #24]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	4013      	ands	r3, r2
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	429a      	cmp	r2, r3
 8008276:	bf0c      	ite	eq
 8008278:	2301      	moveq	r3, #1
 800827a:	2300      	movne	r3, #0
 800827c:	b2db      	uxtb	r3, r3
 800827e:	461a      	mov	r2, r3
 8008280:	79fb      	ldrb	r3, [r7, #7]
 8008282:	429a      	cmp	r2, r3
 8008284:	d0b4      	beq.n	80081f0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800829c:	e033      	b.n	8008306 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	68b9      	ldr	r1, [r7, #8]
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 f90a 	bl	80084bc <I2C_IsErrorOccurred>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e031      	b.n	8008316 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b8:	d025      	beq.n	8008306 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ba:	f7fa fcc7 	bl	8002c4c <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d302      	bcc.n	80082d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d11a      	bne.n	8008306 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d013      	beq.n	8008306 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082e2:	f043 0220 	orr.w	r2, r3, #32
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2220      	movs	r2, #32
 80082ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e007      	b.n	8008316 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	f003 0302 	and.w	r3, r3, #2
 8008310:	2b02      	cmp	r3, #2
 8008312:	d1c4      	bne.n	800829e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b084      	sub	sp, #16
 8008322:	af00      	add	r7, sp, #0
 8008324:	60f8      	str	r0, [r7, #12]
 8008326:	60b9      	str	r1, [r7, #8]
 8008328:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800832a:	e02f      	b.n	800838c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	68b9      	ldr	r1, [r7, #8]
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f000 f8c3 	bl	80084bc <I2C_IsErrorOccurred>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d001      	beq.n	8008340 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e02d      	b.n	800839c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008340:	f7fa fc84 	bl	8002c4c <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	429a      	cmp	r2, r3
 800834e:	d302      	bcc.n	8008356 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d11a      	bne.n	800838c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	f003 0320 	and.w	r3, r3, #32
 8008360:	2b20      	cmp	r3, #32
 8008362:	d013      	beq.n	800838c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008368:	f043 0220 	orr.w	r2, r3, #32
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2220      	movs	r2, #32
 8008374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2200      	movs	r2, #0
 800837c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e007      	b.n	800839c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	f003 0320 	and.w	r3, r3, #32
 8008396:	2b20      	cmp	r3, #32
 8008398:	d1c8      	bne.n	800832c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b086      	sub	sp, #24
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80083b4:	e071      	b.n	800849a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	68b9      	ldr	r1, [r7, #8]
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f000 f87e 	bl	80084bc <I2C_IsErrorOccurred>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	f003 0320 	and.w	r3, r3, #32
 80083d4:	2b20      	cmp	r3, #32
 80083d6:	d13b      	bne.n	8008450 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80083d8:	7dfb      	ldrb	r3, [r7, #23]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d138      	bne.n	8008450 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	f003 0304 	and.w	r3, r3, #4
 80083e8:	2b04      	cmp	r3, #4
 80083ea:	d105      	bne.n	80083f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	f003 0310 	and.w	r3, r3, #16
 8008402:	2b10      	cmp	r3, #16
 8008404:	d121      	bne.n	800844a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2210      	movs	r2, #16
 800840c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2204      	movs	r2, #4
 8008412:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2220      	movs	r2, #32
 800841a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6859      	ldr	r1, [r3, #4]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	4b24      	ldr	r3, [pc, #144]	@ (80084b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008428:	400b      	ands	r3, r1
 800842a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2220      	movs	r2, #32
 8008430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	75fb      	strb	r3, [r7, #23]
 8008448:	e002      	b.n	8008450 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008450:	f7fa fbfc 	bl	8002c4c <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	429a      	cmp	r2, r3
 800845e:	d302      	bcc.n	8008466 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d119      	bne.n	800849a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008466:	7dfb      	ldrb	r3, [r7, #23]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d116      	bne.n	800849a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	f003 0304 	and.w	r3, r3, #4
 8008476:	2b04      	cmp	r3, #4
 8008478:	d00f      	beq.n	800849a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800847e:	f043 0220 	orr.w	r2, r3, #32
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2220      	movs	r2, #32
 800848a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	f003 0304 	and.w	r3, r3, #4
 80084a4:	2b04      	cmp	r3, #4
 80084a6:	d002      	beq.n	80084ae <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80084a8:	7dfb      	ldrb	r3, [r7, #23]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d083      	beq.n	80083b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80084ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3718      	adds	r7, #24
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	fe00e800 	.word	0xfe00e800

080084bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b08a      	sub	sp, #40	@ 0x28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	f003 0310 	and.w	r3, r3, #16
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d068      	beq.n	80085ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2210      	movs	r2, #16
 80084ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80084f0:	e049      	b.n	8008586 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f8:	d045      	beq.n	8008586 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80084fa:	f7fa fba7 	bl	8002c4c <HAL_GetTick>
 80084fe:	4602      	mov	r2, r0
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	68ba      	ldr	r2, [r7, #8]
 8008506:	429a      	cmp	r2, r3
 8008508:	d302      	bcc.n	8008510 <I2C_IsErrorOccurred+0x54>
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d13a      	bne.n	8008586 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800851a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008522:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800852e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008532:	d121      	bne.n	8008578 <I2C_IsErrorOccurred+0xbc>
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800853a:	d01d      	beq.n	8008578 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800853c:	7cfb      	ldrb	r3, [r7, #19]
 800853e:	2b20      	cmp	r3, #32
 8008540:	d01a      	beq.n	8008578 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008550:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008552:	f7fa fb7b 	bl	8002c4c <HAL_GetTick>
 8008556:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008558:	e00e      	b.n	8008578 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800855a:	f7fa fb77 	bl	8002c4c <HAL_GetTick>
 800855e:	4602      	mov	r2, r0
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	2b19      	cmp	r3, #25
 8008566:	d907      	bls.n	8008578 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008568:	6a3b      	ldr	r3, [r7, #32]
 800856a:	f043 0320 	orr.w	r3, r3, #32
 800856e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008576:	e006      	b.n	8008586 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	f003 0320 	and.w	r3, r3, #32
 8008582:	2b20      	cmp	r3, #32
 8008584:	d1e9      	bne.n	800855a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	f003 0320 	and.w	r3, r3, #32
 8008590:	2b20      	cmp	r3, #32
 8008592:	d003      	beq.n	800859c <I2C_IsErrorOccurred+0xe0>
 8008594:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008598:	2b00      	cmp	r3, #0
 800859a:	d0aa      	beq.n	80084f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800859c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d103      	bne.n	80085ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2220      	movs	r2, #32
 80085aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80085ac:	6a3b      	ldr	r3, [r7, #32]
 80085ae:	f043 0304 	orr.w	r3, r3, #4
 80085b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00b      	beq.n	80085e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	f043 0301 	orr.w	r3, r3, #1
 80085d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80085dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00b      	beq.n	8008606 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	f043 0308 	orr.w	r3, r3, #8
 80085f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80085fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00b      	beq.n	8008628 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	f043 0302 	orr.w	r3, r3, #2
 8008616:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008620:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008628:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800862c:	2b00      	cmp	r3, #0
 800862e:	d01c      	beq.n	800866a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f7ff fd92 	bl	800815a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	6859      	ldr	r1, [r3, #4]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	4b0d      	ldr	r3, [pc, #52]	@ (8008678 <I2C_IsErrorOccurred+0x1bc>)
 8008642:	400b      	ands	r3, r1
 8008644:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	431a      	orrs	r2, r3
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2220      	movs	r2, #32
 8008656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2200      	movs	r2, #0
 8008666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800866a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800866e:	4618      	mov	r0, r3
 8008670:	3728      	adds	r7, #40	@ 0x28
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	fe00e800 	.word	0xfe00e800

0800867c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800867c:	b480      	push	{r7}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	607b      	str	r3, [r7, #4]
 8008686:	460b      	mov	r3, r1
 8008688:	817b      	strh	r3, [r7, #10]
 800868a:	4613      	mov	r3, r2
 800868c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800868e:	897b      	ldrh	r3, [r7, #10]
 8008690:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008694:	7a7b      	ldrb	r3, [r7, #9]
 8008696:	041b      	lsls	r3, r3, #16
 8008698:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800869c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80086a2:	6a3b      	ldr	r3, [r7, #32]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80086aa:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	685a      	ldr	r2, [r3, #4]
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	0d5b      	lsrs	r3, r3, #21
 80086b6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80086ba:	4b08      	ldr	r3, [pc, #32]	@ (80086dc <I2C_TransferConfig+0x60>)
 80086bc:	430b      	orrs	r3, r1
 80086be:	43db      	mvns	r3, r3
 80086c0:	ea02 0103 	and.w	r1, r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	430a      	orrs	r2, r1
 80086cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80086ce:	bf00      	nop
 80086d0:	371c      	adds	r7, #28
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	03ff63ff 	.word	0x03ff63ff

080086e0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80086f0:	887b      	ldrh	r3, [r7, #2]
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00f      	beq.n	800871a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008700:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008708:	b2db      	uxtb	r3, r3
 800870a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800870e:	2b28      	cmp	r3, #40	@ 0x28
 8008710:	d003      	beq.n	800871a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008718:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800871a:	887b      	ldrh	r3, [r7, #2]
 800871c:	f003 0302 	and.w	r3, r3, #2
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00f      	beq.n	8008744 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800872a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008732:	b2db      	uxtb	r3, r3
 8008734:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008738:	2b28      	cmp	r3, #40	@ 0x28
 800873a:	d003      	beq.n	8008744 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008742:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008744:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008748:	2b00      	cmp	r3, #0
 800874a:	da03      	bge.n	8008754 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008752:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008754:	887b      	ldrh	r3, [r7, #2]
 8008756:	2b10      	cmp	r3, #16
 8008758:	d103      	bne.n	8008762 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008760:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008762:	887b      	ldrh	r3, [r7, #2]
 8008764:	2b20      	cmp	r3, #32
 8008766:	d103      	bne.n	8008770 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f043 0320 	orr.w	r3, r3, #32
 800876e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008770:	887b      	ldrh	r3, [r7, #2]
 8008772:	2b40      	cmp	r3, #64	@ 0x40
 8008774:	d103      	bne.n	800877e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800877c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	6819      	ldr	r1, [r3, #0]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	43da      	mvns	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	400a      	ands	r2, r1
 800878e:	601a      	str	r2, [r3, #0]
}
 8008790:	bf00      	nop
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b20      	cmp	r3, #32
 80087b0:	d138      	bne.n	8008824 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d101      	bne.n	80087c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80087bc:	2302      	movs	r3, #2
 80087be:	e032      	b.n	8008826 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2224      	movs	r2, #36	@ 0x24
 80087cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f022 0201 	bic.w	r2, r2, #1
 80087de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80087ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6819      	ldr	r1, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	430a      	orrs	r2, r1
 80087fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f042 0201 	orr.w	r2, r2, #1
 800880e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2220      	movs	r2, #32
 8008814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	e000      	b.n	8008826 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008824:	2302      	movs	r3, #2
  }
}
 8008826:	4618      	mov	r0, r3
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008832:	b480      	push	{r7}
 8008834:	b085      	sub	sp, #20
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008842:	b2db      	uxtb	r3, r3
 8008844:	2b20      	cmp	r3, #32
 8008846:	d139      	bne.n	80088bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800884e:	2b01      	cmp	r3, #1
 8008850:	d101      	bne.n	8008856 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008852:	2302      	movs	r3, #2
 8008854:	e033      	b.n	80088be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2201      	movs	r2, #1
 800885a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2224      	movs	r2, #36	@ 0x24
 8008862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f022 0201 	bic.w	r2, r2, #1
 8008874:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008884:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	021b      	lsls	r3, r3, #8
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	4313      	orrs	r3, r2
 800888e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f042 0201 	orr.w	r2, r2, #1
 80088a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2220      	movs	r2, #32
 80088ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80088b8:	2300      	movs	r3, #0
 80088ba:	e000      	b.n	80088be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80088bc:	2302      	movs	r3, #2
  }
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
	...

080088cc <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d101      	bne.n	80088de <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e070      	b.n	80089c0 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d106      	bne.n	80088f8 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f7f9 fbec 	bl	80020d0 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2202      	movs	r2, #2
 80088fc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f042 0201 	orr.w	r2, r2, #1
 800890e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f022 0201 	bic.w	r2, r2, #1
 800891e:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800892e:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800893e:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800894e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800895e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a19      	ldr	r2, [pc, #100]	@ (80089c8 <HAL_JPEG_Init+0xfc>)
 8008964:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a18      	ldr	r2, [pc, #96]	@ (80089cc <HAL_JPEG_Init+0x100>)
 800896a:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fe97 	bl	80096ac <JPEG_Set_HuffEnc_Mem>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d004      	beq.n	800898e <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e018      	b.n	80089c0 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800899c:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	08018018 	.word	0x08018018
 80089cc:	08018058 	.word	0x08018058

080089d0 <HAL_JPEG_ConfigEncoding>:
  * @param  pConf pointer to a JPEG_ConfTypeDef structure that contains
  *         the encoding configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_ConfigEncoding(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pConf)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b088      	sub	sp, #32
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  uint32_t vfactor;
  uint32_t hMCU;
  uint32_t vMCU;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pConf == NULL))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <HAL_JPEG_ConfigEncoding+0x16>
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <HAL_JPEG_ConfigEncoding+0x1a>
  {
    return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e191      	b.n	8008d0e <HAL_JPEG_ConfigEncoding+0x33e>
    assert_param(IS_JPEG_COLORSPACE(pConf->ColorSpace));
    assert_param(IS_JPEG_CHROMASUBSAMPLING(pConf->ChromaSubsampling));
    assert_param(IS_JPEG_IMAGE_QUALITY(pConf->ImageQuality));

    /* Process Locked */
    __HAL_LOCK(hjpeg);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d101      	bne.n	80089f8 <HAL_JPEG_ConfigEncoding+0x28>
 80089f4:	2302      	movs	r3, #2
 80089f6:	e18a      	b.n	8008d0e <HAL_JPEG_ConfigEncoding+0x33e>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    if (hjpeg->State == HAL_JPEG_STATE_READY)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	f040 817b 	bne.w	8008d04 <HAL_JPEG_ConfigEncoding+0x334>
    {
      hjpeg->State = HAL_JPEG_STATE_BUSY;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2202      	movs	r2, #2
 8008a12:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      hjpeg->Conf.ColorSpace          =  pConf->ColorSpace;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	605a      	str	r2, [r3, #4]
      hjpeg->Conf.ChromaSubsampling   =  pConf->ChromaSubsampling;
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	609a      	str	r2, [r3, #8]
      hjpeg->Conf.ImageHeight         =  pConf->ImageHeight;
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	689a      	ldr	r2, [r3, #8]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	60da      	str	r2, [r3, #12]
      hjpeg->Conf.ImageWidth          =  pConf->ImageWidth;
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	68da      	ldr	r2, [r3, #12]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	611a      	str	r2, [r3, #16]
      hjpeg->Conf.ImageQuality        =  pConf->ImageQuality;
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	691a      	ldr	r2, [r3, #16]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	615a      	str	r2, [r3, #20]

      /* Reset the Color Space : by default only one quantization table is used*/
      hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_COLORSPACE;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	685a      	ldr	r2, [r3, #4]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8008a4c:	605a      	str	r2, [r3, #4]

      /* Set Number of color components*/
      if (hjpeg->Conf.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d110      	bne.n	8008a78 <HAL_JPEG_ConfigEncoding+0xa8>
      {
        /*Gray Scale is only one component 8x8 blocks i.e 4:4:4*/
        hjpeg->Conf.ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	609a      	str	r2, [r3, #8]

        JPEG_SetColorGrayScale(hjpeg);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f001 f991 	bl	8009d84 <JPEG_SetColorGrayScale>
        /* Set quantization table 0*/
        error = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	3350      	adds	r3, #80	@ 0x50
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f001 f89e 	bl	8009bb0 <JPEG_Set_Quantization_Mem>
 8008a74:	61f8      	str	r0, [r7, #28]
 8008a76:	e0c5      	b.n	8008c04 <HAL_JPEG_ConfigEncoding+0x234>
      }
      else if (hjpeg->Conf.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	2b10      	cmp	r3, #16
 8008a7e:	d166      	bne.n	8008b4e <HAL_JPEG_ConfigEncoding+0x17e>
      {
        /*
           Set the Color Space for YCbCr : 2 quantization tables are used
           one for Luminance(Y) and one for both Chrominances (Cb & Cr)
          */
        hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE_0;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	685a      	ldr	r2, [r3, #4]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f042 0210 	orr.w	r2, r2, #16
 8008a8e:	605a      	str	r2, [r3, #4]

        JPEG_SetColorYCBCR(hjpeg);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f001 f8ff 	bl	8009c94 <JPEG_SetColorYCBCR>

        /* Set quantization table 0*/
        error  = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3350      	adds	r3, #80	@ 0x50
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f001 f884 	bl	8009bb0 <JPEG_Set_Quantization_Mem>
 8008aa8:	61f8      	str	r0, [r7, #28]
        /*By default quantization table 0 for component 0 and quantization table 1 for both components 1 and 2*/
        error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable1, (hjpeg->Instance->QMEM1));
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	3390      	adds	r3, #144	@ 0x90
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f001 f87a 	bl	8009bb0 <JPEG_Set_Quantization_Mem>
 8008abc:	4602      	mov	r2, r0
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	61fb      	str	r3, [r7, #28]

        if ((hjpeg->Context & JPEG_CONTEXT_CUSTOM_TABLES) != 0UL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ac8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 8099 	beq.w	8008c04 <HAL_JPEG_ConfigEncoding+0x234>
        {
          /*Use user customized quantization tables , 1 table per component*/
          /* use 3 quantization tables , one for each component*/
          hjpeg->Instance->CONFR1 &= (~JPEG_CONFR1_COLORSPACE);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	685a      	ldr	r2, [r3, #4]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8008ae0:	605a      	str	r2, [r3, #4]
          hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE_1;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	685a      	ldr	r2, [r3, #4]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f042 0220 	orr.w	r2, r2, #32
 8008af0:	605a      	str	r2, [r3, #4]

          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable2, (hjpeg->Instance->QMEM2));
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	33d0      	adds	r3, #208	@ 0xd0
 8008afc:	461a      	mov	r2, r3
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f001 f856 	bl	8009bb0 <JPEG_Set_Quantization_Mem>
 8008b04:	4602      	mov	r2, r0
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	61fb      	str	r3, [r7, #28]

          /*Use Quantization 1 table for component 1*/
          hjpeg->Instance->CONFR5 &= (~JPEG_CONFR5_QT);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	695a      	ldr	r2, [r3, #20]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f022 020c 	bic.w	r2, r2, #12
 8008b1a:	615a      	str	r2, [r3, #20]
          hjpeg->Instance->CONFR5 |=  JPEG_CONFR5_QT_0;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	695a      	ldr	r2, [r3, #20]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f042 0204 	orr.w	r2, r2, #4
 8008b2a:	615a      	str	r2, [r3, #20]

          /*Use Quantization 2 table for component 2*/
          hjpeg->Instance->CONFR6 &= (~JPEG_CONFR6_QT);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	699a      	ldr	r2, [r3, #24]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f022 020c 	bic.w	r2, r2, #12
 8008b3a:	619a      	str	r2, [r3, #24]
          hjpeg->Instance->CONFR6 |=  JPEG_CONFR6_QT_1;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	699a      	ldr	r2, [r3, #24]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f042 0208 	orr.w	r2, r2, #8
 8008b4a:	619a      	str	r2, [r3, #24]
 8008b4c:	e05a      	b.n	8008c04 <HAL_JPEG_ConfigEncoding+0x234>
        }
      }
      else /* ColorSpace == JPEG_CMYK_COLORSPACE */
      {
        JPEG_SetColorCMYK(hjpeg);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f001 f936 	bl	8009dc0 <JPEG_SetColorCMYK>

        /* Set quantization table 0*/
        error  = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	3350      	adds	r3, #80	@ 0x50
 8008b5e:	461a      	mov	r2, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f001 f825 	bl	8009bb0 <JPEG_Set_Quantization_Mem>
 8008b66:	61f8      	str	r0, [r7, #28]
        /*By default quantization table 0 for All components*/

        if ((hjpeg->Context & JPEG_CONTEXT_CUSTOM_TABLES) != 0UL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d047      	beq.n	8008c04 <HAL_JPEG_ConfigEncoding+0x234>
        {
          /*Use user customized quantization tables , 1 table per component*/
          /* use 4 quantization tables , one for each component*/
          hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	685a      	ldr	r2, [r3, #4]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8008b82:	605a      	str	r2, [r3, #4]

          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable1, (hjpeg->Instance->QMEM1));
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	3390      	adds	r3, #144	@ 0x90
 8008b8e:	461a      	mov	r2, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f001 f80d 	bl	8009bb0 <JPEG_Set_Quantization_Mem>
 8008b96:	4602      	mov	r2, r0
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	61fb      	str	r3, [r7, #28]
          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable2, (hjpeg->Instance->QMEM2));
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	33d0      	adds	r3, #208	@ 0xd0
 8008ba8:	461a      	mov	r2, r3
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f001 f800 	bl	8009bb0 <JPEG_Set_Quantization_Mem>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	61fb      	str	r3, [r7, #28]
          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable3, (hjpeg->Instance->QMEM3));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fff2 	bl	8009bb0 <JPEG_Set_Quantization_Mem>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	61fb      	str	r3, [r7, #28]

          /*Use Quantization 1 table for component 1*/
          hjpeg->Instance->CONFR5 |=  JPEG_CONFR5_QT_0;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	695a      	ldr	r2, [r3, #20]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f042 0204 	orr.w	r2, r2, #4
 8008be2:	615a      	str	r2, [r3, #20]

          /*Use Quantization 2 table for component 2*/
          hjpeg->Instance->CONFR6 |=  JPEG_CONFR6_QT_1;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	699a      	ldr	r2, [r3, #24]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f042 0208 	orr.w	r2, r2, #8
 8008bf2:	619a      	str	r2, [r3, #24]

          /*Use Quantization 3 table for component 3*/
          hjpeg->Instance->CONFR7 |=  JPEG_CONFR7_QT;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	69da      	ldr	r2, [r3, #28]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f042 020c 	orr.w	r2, r2, #12
 8008c02:	61da      	str	r2, [r3, #28]
        }
      }

      if (error != 0UL)
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00c      	beq.n	8008c24 <HAL_JPEG_ConfigEncoding+0x254>
      {
        hjpeg->ErrorCode = HAL_JPEG_ERROR_QUANT_TABLE;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2202      	movs	r2, #2
 8008c0e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Process Unlocked */
        __HAL_UNLOCK(hjpeg);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Set the JPEG State to ready */
        hjpeg->State = HAL_JPEG_STATE_READY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

        return  HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e074      	b.n	8008d0e <HAL_JPEG_ConfigEncoding+0x33e>
      }
      /* Set the image size*/
      /* set the number of lines*/
      MODIFY_REG(hjpeg->Instance->CONFR1, JPEG_CONFR1_YSIZE, ((hjpeg->Conf.ImageHeight & 0x0000FFFFUL) << 16));
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	b299      	uxth	r1, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	041a      	lsls	r2, r3, #16
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	430a      	orrs	r2, r1
 8008c38:	605a      	str	r2, [r3, #4]
      /* set the number of pixels per line*/
      MODIFY_REG(hjpeg->Instance->CONFR3, JPEG_CONFR3_XSIZE, ((hjpeg->Conf.ImageWidth & 0x0000FFFFUL) << 16));
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	b299      	uxth	r1, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	041a      	lsls	r2, r3, #16
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	430a      	orrs	r2, r1
 8008c4e:	60da      	str	r2, [r3, #12]


      if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING) /* 4:2:0*/
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d104      	bne.n	8008c62 <HAL_JPEG_ConfigEncoding+0x292>
      {
        hfactor = 16;
 8008c58:	2310      	movs	r3, #16
 8008c5a:	61bb      	str	r3, [r7, #24]
        vfactor = 16;
 8008c5c:	2310      	movs	r3, #16
 8008c5e:	617b      	str	r3, [r7, #20]
 8008c60:	e00c      	b.n	8008c7c <HAL_JPEG_ConfigEncoding+0x2ac>
      }
      else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING) /* 4:2:2*/
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d104      	bne.n	8008c74 <HAL_JPEG_ConfigEncoding+0x2a4>
      {
        hfactor = 16;
 8008c6a:	2310      	movs	r3, #16
 8008c6c:	61bb      	str	r3, [r7, #24]
        vfactor = 8;
 8008c6e:	2308      	movs	r3, #8
 8008c70:	617b      	str	r3, [r7, #20]
 8008c72:	e003      	b.n	8008c7c <HAL_JPEG_ConfigEncoding+0x2ac>
      }
      else /* Default is 8x8 MCU,  4:4:4*/
      {
        hfactor = 8;
 8008c74:	2308      	movs	r3, #8
 8008c76:	61bb      	str	r3, [r7, #24]
        vfactor = 8;
 8008c78:	2308      	movs	r3, #8
 8008c7a:	617b      	str	r3, [r7, #20]
      }

      hMCU = (hjpeg->Conf.ImageWidth / hfactor);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	691a      	ldr	r2, [r3, #16]
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c86:	613b      	str	r3, [r7, #16]
      if ((hjpeg->Conf.ImageWidth % hfactor) != 0UL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c92:	69b9      	ldr	r1, [r7, #24]
 8008c94:	fb01 f202 	mul.w	r2, r1, r2
 8008c98:	1a9b      	subs	r3, r3, r2
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <HAL_JPEG_ConfigEncoding+0x2d4>
      {
        hMCU++; /*+1 for horizontal incomplete MCU */
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	613b      	str	r3, [r7, #16]
      }

      vMCU = (hjpeg->Conf.ImageHeight / vfactor);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68da      	ldr	r2, [r3, #12]
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cae:	60fb      	str	r3, [r7, #12]
      if ((hjpeg->Conf.ImageHeight % vfactor) != 0UL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	697a      	ldr	r2, [r7, #20]
 8008cb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8008cba:	6979      	ldr	r1, [r7, #20]
 8008cbc:	fb01 f202 	mul.w	r2, r1, r2
 8008cc0:	1a9b      	subs	r3, r3, r2
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d002      	beq.n	8008ccc <HAL_JPEG_ConfigEncoding+0x2fc>
      {
        vMCU++; /*+1 for vertical incomplete MCU */
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	60fb      	str	r3, [r7, #12]
      }

      numberMCU = (hMCU * vMCU) - 1UL; /* Bit Field JPEG_CONFR2_NMCU shall be set to NB_MCU - 1*/
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	fb02 f303 	mul.w	r3, r2, r3
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	60bb      	str	r3, [r7, #8]
      /* Set the number of MCU*/
      hjpeg->Instance->CONFR2 = (numberMCU & JPEG_CONFR2_NMCU);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8008ce2:	609a      	str	r2, [r3, #8]

      hjpeg->Context |= JPEG_CONTEXT_CONF_ENCODING;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ce8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Set the JPEG State to ready */
      hjpeg->State = HAL_JPEG_STATE_READY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Return function status */
      return HAL_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	e004      	b.n	8008d0e <HAL_JPEG_ConfigEncoding+0x33e>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Return function status */
      return HAL_BUSY;
 8008d0c:	2302      	movs	r3, #2
    }
  }
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3720      	adds	r7, #32
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b086      	sub	sp, #24
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d002      	beq.n	8008d2c <HAL_JPEG_GetInfo+0x16>
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d101      	bne.n	8008d30 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e083      	b.n	8008e38 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	f003 0303 	and.w	r3, r3, #3
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d103      	bne.n	8008d46 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	2210      	movs	r2, #16
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	e017      	b.n	8008d76 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	f003 0303 	and.w	r3, r3, #3
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d103      	bne.n	8008d5c <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	2200      	movs	r2, #0
 8008d58:	601a      	str	r2, [r3, #0]
 8008d5a:	e00c      	b.n	8008d76 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	f003 0303 	and.w	r3, r3, #3
 8008d66:	2b03      	cmp	r3, #3
 8008d68:	d103      	bne.n	8008d72 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2230      	movs	r2, #48	@ 0x30
 8008d6e:	601a      	str	r2, [r3, #0]
 8008d70:	e001      	b.n	8008d76 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e060      	b.n	8008e38 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	0c1b      	lsrs	r3, r3, #16
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	0c1b      	lsrs	r3, r3, #16
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2b10      	cmp	r3, #16
 8008d98:	d003      	beq.n	8008da2 <HAL_JPEG_GetInfo+0x8c>
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b30      	cmp	r3, #48	@ 0x30
 8008da0:	d140      	bne.n	8008e24 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	091b      	lsrs	r3, r3, #4
 8008daa:	f003 030f 	and.w	r3, r3, #15
 8008dae:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	695b      	ldr	r3, [r3, #20]
 8008db6:	091b      	lsrs	r3, r3, #4
 8008db8:	f003 030f 	and.w	r3, r3, #15
 8008dbc:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	699b      	ldr	r3, [r3, #24]
 8008dc4:	091b      	lsrs	r3, r3, #4
 8008dc6:	f003 030f 	and.w	r3, r3, #15
 8008dca:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d109      	bne.n	8008de6 <HAL_JPEG_GetInfo+0xd0>
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d106      	bne.n	8008de6 <HAL_JPEG_GetInfo+0xd0>
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d103      	bne.n	8008de6 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	2202      	movs	r2, #2
 8008de2:	605a      	str	r2, [r3, #4]
 8008de4:	e01d      	b.n	8008e22 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d109      	bne.n	8008e00 <HAL_JPEG_GetInfo+0xea>
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d106      	bne.n	8008e00 <HAL_JPEG_GetInfo+0xea>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d103      	bne.n	8008e00 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	605a      	str	r2, [r3, #4]
 8008dfe:	e010      	b.n	8008e22 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d109      	bne.n	8008e1a <HAL_JPEG_GetInfo+0x104>
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d106      	bne.n	8008e1a <HAL_JPEG_GetInfo+0x104>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d103      	bne.n	8008e1a <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2201      	movs	r2, #1
 8008e16:	605a      	str	r2, [r3, #4]
 8008e18:	e003      	b.n	8008e22 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008e20:	e003      	b.n	8008e2a <HAL_JPEG_GetInfo+0x114>
 8008e22:	e002      	b.n	8008e2a <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2200      	movs	r2, #0
 8008e28:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f001 fea2 	bl	800ab74 <JPEG_GetQuality>
 8008e30:	4602      	mov	r2, r0
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3718      	adds	r7, #24
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <HAL_JPEG_Encode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Encode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataInMCU, uint32_t InDataLength,
                                       uint8_t *pDataOut, uint32_t OutDataLength)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
 8008e4c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataInMCU == NULL) || (pDataOut == NULL))
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d005      	beq.n	8008e60 <HAL_JPEG_Encode_DMA+0x20>
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d002      	beq.n	8008e60 <HAL_JPEG_Encode_DMA+0x20>
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d101      	bne.n	8008e64 <HAL_JPEG_Encode_DMA+0x24>
  {
    return HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	e059      	b.n	8008f18 <HAL_JPEG_Encode_DMA+0xd8>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d101      	bne.n	8008e72 <HAL_JPEG_Encode_DMA+0x32>
 8008e6e:	2302      	movs	r3, #2
 8008e70:	e052      	b.n	8008f18 <HAL_JPEG_Encode_DMA+0xd8>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State != HAL_JPEG_STATE_READY)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d005      	beq.n	8008e92 <HAL_JPEG_Encode_DMA+0x52>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 8008e8e:	2302      	movs	r3, #2
 8008e90:	e042      	b.n	8008f18 <HAL_JPEG_Encode_DMA+0xd8>
  }
  else
  {
    if ((hjpeg->Context & JPEG_CONTEXT_CONF_ENCODING) == JPEG_CONTEXT_CONF_ENCODING)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e9e:	d134      	bne.n	8008f0a <HAL_JPEG_Encode_DMA+0xca>
    {
      /*Change JPEG state*/
      hjpeg->State = HAL_JPEG_STATE_BUSY_ENCODING;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2203      	movs	r2, #3
 8008ea4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /*Set the Context to Encode with DMA*/
      hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eac:	f023 020f 	bic.w	r2, r3, #15
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	655a      	str	r2, [r3, #84]	@ 0x54
      hjpeg->Context |= (JPEG_CONTEXT_ENCODE | JPEG_CONTEXT_DMA);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eb8:	f043 020d 	orr.w	r2, r3, #13
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	655a      	str	r2, [r3, #84]	@ 0x54

      /*Store In/out buffers pointers and size*/
      hjpeg->pJpegInBuffPtr = pDataInMCU;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	68ba      	ldr	r2, [r7, #8]
 8008ec4:	619a      	str	r2, [r3, #24]
      hjpeg->pJpegOutBuffPtr = pDataOut;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	61da      	str	r2, [r3, #28]
      hjpeg->InDataLength = InDataLength;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	629a      	str	r2, [r3, #40]	@ 0x28
      hjpeg->OutDataLength = OutDataLength;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /*Reset In/out data counter */
      hjpeg->JpegInCount = 0;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	621a      	str	r2, [r3, #32]
      hjpeg->JpegOutCount = 0;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Init decoding process*/
      JPEG_Init_Process(hjpeg);
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f000 ffd5 	bl	8009e94 <JPEG_Init_Process>

      /* JPEG encoding process using DMA */
      if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f001 faf6 	bl	800a4dc <JPEG_DMA_StartProcess>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00f      	beq.n	8008f16 <HAL_JPEG_Encode_DMA+0xd6>
      {
        /* Update State */
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2206      	movs	r2, #6
 8008efa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        /* Process Unlocked */
        __HAL_UNLOCK(hjpeg);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e006      	b.n	8008f18 <HAL_JPEG_Encode_DMA+0xd8>

    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e000      	b.n	8008f18 <HAL_JPEG_Encode_DMA+0xd8>
    }
  }
  /* Return function status */
  return HAL_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f32:	f003 030c 	and.w	r3, r3, #12
 8008f36:	2b0c      	cmp	r3, #12
 8008f38:	d116      	bne.n	8008f68 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	f003 0301 	and.w	r3, r3, #1
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d005      	beq.n	8008f50 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f48:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	f003 0302 	and.w	r3, r3, #2
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d033      	beq.n	8008fc2 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f5e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	655a      	str	r2, [r3, #84]	@ 0x54
 8008f66:	e02c      	b.n	8008fc2 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f6c:	f003 030c 	and.w	r3, r3, #12
 8008f70:	2b08      	cmp	r3, #8
 8008f72:	d126      	bne.n	8008fc2 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d009      	beq.n	8008f92 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f82:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f043 0306 	orr.w	r3, r3, #6
 8008f90:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	f003 0302 	and.w	r3, r3, #2
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d009      	beq.n	8008fb0 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fa0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8008fae:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	43da      	mvns	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	400a      	ands	r2, r1
 8008fc0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008fe8:	bf00      	nop
 8008fea:	3714      	adds	r7, #20
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800900c:	bf00      	nop
 800900e:	3714      	adds	r7, #20
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 8009022:	bf00      	nop
 8009024:	370c      	adds	r7, #12
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800902e:	b480      	push	{r7}
 8009030:	b083      	sub	sp, #12
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8009036:	bf00      	nop
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b082      	sub	sp, #8
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009050:	b2db      	uxtb	r3, r3
 8009052:	3b03      	subs	r3, #3
 8009054:	2b01      	cmp	r3, #1
 8009056:	d813      	bhi.n	8009080 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800905c:	f003 030c 	and.w	r3, r3, #12
 8009060:	2b08      	cmp	r3, #8
 8009062:	d103      	bne.n	800906c <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 ff89 	bl	8009f7c <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 800906a:	e00b      	b.n	8009084 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009070:	f003 030c 	and.w	r3, r3, #12
 8009074:	2b0c      	cmp	r3, #12
 8009076:	d105      	bne.n	8009084 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f001 fac9 	bl	800a610 <JPEG_DMA_ContinueProcess>
      break;
 800907e:	e001      	b.n	8009084 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8009080:	bf00      	nop
 8009082:	e000      	b.n	8009086 <HAL_JPEG_IRQHandler+0x44>
      break;
 8009084:	bf00      	nop
  }
}
 8009086:	bf00      	nop
 8009088:	3708      	adds	r7, #8
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800908e:	b480      	push	{r7}
 8009090:	b08b      	sub	sp, #44	@ 0x2c
 8009092:	af00      	add	r7, sp, #0
 8009094:	60f8      	str	r0, [r7, #12]
 8009096:	60b9      	str	r1, [r7, #8]
 8009098:	607a      	str	r2, [r7, #4]
 800909a:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800909c:	2300      	movs	r3, #0
 800909e:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 80090a0:	2300      	movs	r3, #0
 80090a2:	61fb      	str	r3, [r7, #28]
 80090a4:	e020      	b.n	80090e8 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	4413      	add	r3, r2
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 80090b0:	6a3a      	ldr	r2, [r7, #32]
 80090b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b4:	4413      	add	r3, r2
 80090b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090ba:	d90f      	bls.n	80090dc <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e055      	b.n	800916c <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	68b9      	ldr	r1, [r7, #8]
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	440b      	add	r3, r1
 80090ca:	3201      	adds	r2, #1
 80090cc:	b2d2      	uxtb	r2, r2
 80090ce:	701a      	strb	r2, [r3, #0]
      p++;
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	3301      	adds	r3, #1
 80090d4:	623b      	str	r3, [r7, #32]
      i--;
 80090d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d8:	3b01      	subs	r3, #1
 80090da:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 80090dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1ee      	bne.n	80090c0 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	3301      	adds	r3, #1
 80090e6:	61fb      	str	r3, [r7, #28]
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	2b0f      	cmp	r3, #15
 80090ec:	d9db      	bls.n	80090a6 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	6a3b      	ldr	r3, [r7, #32]
 80090f2:	4413      	add	r3, r2
 80090f4:	2200      	movs	r2, #0
 80090f6:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	6a3a      	ldr	r2, [r7, #32]
 80090fc:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 80090fe:	2300      	movs	r3, #0
 8009100:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	617b      	str	r3, [r7, #20]
  p = 0;
 8009108:	2300      	movs	r3, #0
 800910a:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800910c:	e027      	b.n	800915e <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800910e:	6a3b      	ldr	r3, [r7, #32]
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	4413      	add	r3, r2
 8009116:	69ba      	ldr	r2, [r7, #24]
 8009118:	601a      	str	r2, [r3, #0]
      p++;
 800911a:	6a3b      	ldr	r3, [r7, #32]
 800911c:	3301      	adds	r3, #1
 800911e:	623b      	str	r3, [r7, #32]
      code++;
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	3301      	adds	r3, #1
 8009124:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	6a3b      	ldr	r3, [r7, #32]
 800912a:	4413      	add	r3, r2
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	461a      	mov	r2, r3
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	4293      	cmp	r3, r2
 8009134:	d0eb      	beq.n	800910e <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	2b1f      	cmp	r3, #31
 800913a:	d901      	bls.n	8009140 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	e015      	b.n	800916c <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8009140:	2201      	movs	r2, #1
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	fa02 f303 	lsl.w	r3, r2, r3
 8009148:	69ba      	ldr	r2, [r7, #24]
 800914a:	429a      	cmp	r2, r3
 800914c:	d301      	bcc.n	8009152 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e00c      	b.n	800916c <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	005b      	lsls	r3, r3, #1
 8009156:	61bb      	str	r3, [r7, #24]
    si++;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	3301      	adds	r3, #1
 800915c:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	6a3b      	ldr	r3, [r7, #32]
 8009162:	4413      	add	r3, r2
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d1dd      	bne.n	8009126 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	372c      	adds	r7, #44	@ 0x2c
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 800917e:	af00      	add	r7, sp, #0
 8009180:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009184:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009188:	6018      	str	r0, [r3, #0]
 800918a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800918e:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009192:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009194:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009198:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800919c:	6818      	ldr	r0, [r3, #0]
 800919e:	f107 0308 	add.w	r3, r7, #8
 80091a2:	f107 020c 	add.w	r2, r7, #12
 80091a6:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 80091aa:	f7ff ff70 	bl	800908e <JPEG_Bits_To_SizeCodes>
 80091ae:	4603      	mov	r3, r0
 80091b0:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 80091b4:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d002      	beq.n	80091c2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80091bc:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 80091c0:	e075      	b.n	80092ae <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 80091c2:	2300      	movs	r3, #0
 80091c4:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 80091c8:	e067      	b.n	800929a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 80091ca:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80091ce:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80091d8:	4413      	add	r3, r2
 80091da:	3310      	adds	r3, #16
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 80091e2:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d103      	bne.n	80091f2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 80091ea:	23a0      	movs	r3, #160	@ 0xa0
 80091ec:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80091f0:	e021      	b.n	8009236 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80091f2:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80091f6:	2bf0      	cmp	r3, #240	@ 0xf0
 80091f8:	d103      	bne.n	8009202 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 80091fa:	23a1      	movs	r3, #161	@ 0xa1
 80091fc:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8009200:	e019      	b.n	8009236 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8009202:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009206:	091b      	lsrs	r3, r3, #4
 8009208:	f003 030f 	and.w	r3, r3, #15
 800920c:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8009210:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009214:	f003 030f 	and.w	r3, r3, #15
 8009218:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800921c:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8009220:	4613      	mov	r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	4413      	add	r3, r2
 8009226:	005b      	lsls	r3, r3, #1
 8009228:	461a      	mov	r2, r3
 800922a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800922e:	4413      	add	r3, r2
 8009230:	3b01      	subs	r3, #1
 8009232:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8009236:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800923a:	2ba1      	cmp	r3, #161	@ 0xa1
 800923c:	d901      	bls.n	8009242 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800923e:	2301      	movs	r3, #1
 8009240:	e035      	b.n	80092ae <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009242:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009246:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800924a:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800924e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009252:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009256:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800925a:	6819      	ldr	r1, [r3, #0]
 800925c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009260:	3328      	adds	r3, #40	@ 0x28
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	440b      	add	r3, r1
 8009266:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009268:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800926c:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8009270:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009274:	4413      	add	r3, r2
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	3b01      	subs	r3, #1
 800927a:	b2d9      	uxtb	r1, r3
 800927c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009280:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800928a:	4413      	add	r3, r2
 800928c:	460a      	mov	r2, r1
 800928e:	701a      	strb	r2, [r3, #0]
      k++;
 8009290:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009294:	3301      	adds	r3, #1
 8009296:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 800929a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800929e:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d38e      	bcc.n	80091ca <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 80092be:	af00      	add	r7, sp, #0
 80092c0:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80092c4:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80092c8:	6018      	str	r0, [r3, #0]
 80092ca:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80092ce:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80092d2:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80092d4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80092d8:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80092dc:	6818      	ldr	r0, [r3, #0]
 80092de:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80092e2:	f107 0208 	add.w	r2, r7, #8
 80092e6:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 80092ea:	f7ff fed0 	bl	800908e <JPEG_Bits_To_SizeCodes>
 80092ee:	4603      	mov	r3, r0
 80092f0:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 80092f4:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d002      	beq.n	8009302 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80092fc:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8009300:	e048      	b.n	8009394 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8009302:	2300      	movs	r3, #0
 8009304:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8009308:	e03d      	b.n	8009386 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800930a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800930e:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009318:	4413      	add	r3, r2
 800931a:	3310      	adds	r3, #16
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8009322:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009326:	2b0b      	cmp	r3, #11
 8009328:	d901      	bls.n	800932e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800932a:	2301      	movs	r3, #1
 800932c:	e032      	b.n	8009394 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800932e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009332:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8009336:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800933a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800933e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009342:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009346:	6819      	ldr	r1, [r3, #0]
 8009348:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800934c:	3302      	adds	r3, #2
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	440b      	add	r3, r1
 8009352:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009354:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009358:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800935c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009360:	4413      	add	r3, r2
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	3b01      	subs	r3, #1
 8009366:	b2d9      	uxtb	r1, r3
 8009368:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800936c:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009376:	4413      	add	r3, r2
 8009378:	460a      	mov	r2, r1
 800937a:	701a      	strb	r2, [r3, #0]
      k++;
 800937c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009380:	3301      	adds	r3, #1
 8009382:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8009386:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 800938a:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800938e:	429a      	cmp	r2, r3
 8009390:	d3bb      	bcc.n	800930a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b09a      	sub	sp, #104	@ 0x68
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	60f8      	str	r0, [r7, #12]
 80093a6:	60b9      	str	r1, [r7, #8]
 80093a8:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d106      	bne.n	80093c6 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 80093c0:	3318      	adds	r3, #24
 80093c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80093c4:	e00f      	b.n	80093e6 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d106      	bne.n	80093e2 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 80093dc:	3318      	adds	r3, #24
 80093de:	663b      	str	r3, [r7, #96]	@ 0x60
 80093e0:	e001      	b.n	80093e6 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e059      	b.n	800949a <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d055      	beq.n	8009498 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80093ec:	f107 0314 	add.w	r3, r7, #20
 80093f0:	4619      	mov	r1, r3
 80093f2:	68b8      	ldr	r0, [r7, #8]
 80093f4:	f7ff ff60 	bl	80092b8 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 80093f8:	4603      	mov	r3, r0
 80093fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 80093fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009402:	2b00      	cmp	r3, #0
 8009404:	d002      	beq.n	800940c <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8009406:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800940a:	e046      	b.n	800949a <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800940c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800940e:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8009410:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009412:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009416:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009418:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800941a:	3304      	adds	r3, #4
 800941c:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800941e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009420:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009424:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8009426:	230c      	movs	r3, #12
 8009428:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 800942a:	e032      	b.n	8009492 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800942c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800942e:	3b01      	subs	r3, #1
 8009430:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8009432:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009434:	3b04      	subs	r3, #4
 8009436:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009438:	f107 0214 	add.w	r2, r7, #20
 800943c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800943e:	4413      	add	r3, r2
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	021b      	lsls	r3, r3, #8
 8009444:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009448:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800944a:	3302      	adds	r3, #2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	3368      	adds	r3, #104	@ 0x68
 8009450:	443b      	add	r3, r7
 8009452:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8009456:	b2db      	uxtb	r3, r3
 8009458:	4313      	orrs	r3, r2
 800945a:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 800945c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800945e:	3b01      	subs	r3, #1
 8009460:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009462:	f107 0214 	add.w	r2, r7, #20
 8009466:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009468:	4413      	add	r3, r2
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	021b      	lsls	r3, r3, #8
 800946e:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009472:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009474:	3302      	adds	r3, #2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	3368      	adds	r3, #104	@ 0x68
 800947a:	443b      	add	r3, r7
 800947c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8009480:	b2db      	uxtb	r3, r3
 8009482:	4313      	orrs	r3, r2
 8009484:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8009486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009488:	041a      	lsls	r2, r3, #16
 800948a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800948c:	431a      	orrs	r2, r3
 800948e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009490:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8009492:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009494:	2b01      	cmp	r3, #1
 8009496:	d8c9      	bhi.n	800942c <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3768      	adds	r7, #104	@ 0x68
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
	...

080094a4 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80094b0:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80094b4:	6018      	str	r0, [r3, #0]
 80094b6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80094ba:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80094be:	6019      	str	r1, [r3, #0]
 80094c0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80094c4:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 80094c8:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80094ca:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80094ce:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094da:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 80094de:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 80094e2:	6812      	ldr	r2, [r2, #0]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d10c      	bne.n	8009502 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80094e8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80094ec:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094f8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80094fc:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8009500:	e01d      	b.n	800953e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8009502:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009506:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8009512:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8009516:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800951a:	6812      	ldr	r2, [r2, #0]
 800951c:	429a      	cmp	r2, r3
 800951e:	d10c      	bne.n	800953a <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009520:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009524:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8009530:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009534:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8009538:	e001      	b.n	800953e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e0a8      	b.n	8009690 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800953e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009542:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 80a0 	beq.w	800968e <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800954e:	f107 0214 	add.w	r2, r7, #20
 8009552:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009556:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800955a:	4611      	mov	r1, r2
 800955c:	6818      	ldr	r0, [r3, #0]
 800955e:	f7ff fe0b 	bl	8009178 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8009562:	4603      	mov	r3, r0
 8009564:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8009568:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 800956c:	2b00      	cmp	r3, #0
 800956e:	d002      	beq.n	8009576 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8009570:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8009574:	e08c      	b.n	8009690 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8009576:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800957a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800957e:	2300      	movs	r3, #0
 8009580:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8009584:	e00e      	b.n	80095a4 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8009586:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800958a:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800958e:	601a      	str	r2, [r3, #0]
      addressDef++;
 8009590:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009594:	3304      	adds	r3, #4
 8009596:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800959a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800959e:	3301      	adds	r3, #1
 80095a0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80095a4:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	d9ec      	bls.n	8009586 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 80095ac:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80095b0:	4a3a      	ldr	r2, [pc, #232]	@ (800969c <JPEG_Set_HuffAC_Mem+0x1f8>)
 80095b2:	601a      	str	r2, [r3, #0]
    addressDef++;
 80095b4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80095b8:	3304      	adds	r3, #4
 80095ba:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 80095be:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80095c2:	4a37      	ldr	r2, [pc, #220]	@ (80096a0 <JPEG_Set_HuffAC_Mem+0x1fc>)
 80095c4:	601a      	str	r2, [r3, #0]
    addressDef++;
 80095c6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80095ca:	3304      	adds	r3, #4
 80095cc:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 80095d0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80095d4:	4a33      	ldr	r2, [pc, #204]	@ (80096a4 <JPEG_Set_HuffAC_Mem+0x200>)
 80095d6:	601a      	str	r2, [r3, #0]
    addressDef++;
 80095d8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80095dc:	3304      	adds	r3, #4
 80095de:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 80095e2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80095e6:	4a30      	ldr	r2, [pc, #192]	@ (80096a8 <JPEG_Set_HuffAC_Mem+0x204>)
 80095e8:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 80095ea:	23a2      	movs	r3, #162	@ 0xa2
 80095ec:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 80095f0:	e049      	b.n	8009686 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 80095f2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80095f6:	3b01      	subs	r3, #1
 80095f8:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 80095fc:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009600:	3b04      	subs	r3, #4
 8009602:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8009606:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800960a:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800960e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009612:	4413      	add	r3, r2
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	021b      	lsls	r3, r3, #8
 8009618:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800961c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009620:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8009624:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009628:	3328      	adds	r3, #40	@ 0x28
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	440b      	add	r3, r1
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	b2db      	uxtb	r3, r3
 8009632:	4313      	orrs	r3, r2
 8009634:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8009638:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800963c:	3b01      	subs	r3, #1
 800963e:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8009642:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009646:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800964a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800964e:	4413      	add	r3, r2
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	021b      	lsls	r3, r3, #8
 8009654:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009658:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800965c:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8009660:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009664:	3328      	adds	r3, #40	@ 0x28
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	440b      	add	r3, r1
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	b2db      	uxtb	r3, r3
 800966e:	4313      	orrs	r3, r2
 8009670:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8009674:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8009678:	041a      	lsls	r2, r3, #16
 800967a:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 800967e:	431a      	orrs	r2, r3
 8009680:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009684:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8009686:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800968a:	2b01      	cmp	r3, #1
 800968c:	d8b1      	bhi.n	80095f2 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	0fd10fd0 	.word	0x0fd10fd0
 80096a0:	0fd30fd2 	.word	0x0fd30fd2
 80096a4:	0fd50fd4 	.word	0x0fd50fd4
 80096a8:	0fd70fd6 	.word	0x0fd70fd6

080096ac <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f84d 	bl	8009754 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 80096c2:	461a      	mov	r2, r3
 80096c4:	491f      	ldr	r1, [pc, #124]	@ (8009744 <JPEG_Set_HuffEnc_Mem+0x98>)
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7ff feec 	bl	80094a4 <JPEG_Set_HuffAC_Mem>
 80096cc:	4603      	mov	r3, r0
 80096ce:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80096d0:	7bfb      	ldrb	r3, [r7, #15]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d001      	beq.n	80096da <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 80096d6:	7bfb      	ldrb	r3, [r7, #15]
 80096d8:	e030      	b.n	800973c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 80096e2:	461a      	mov	r2, r3
 80096e4:	4918      	ldr	r1, [pc, #96]	@ (8009748 <JPEG_Set_HuffEnc_Mem+0x9c>)
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f7ff fedc 	bl	80094a4 <JPEG_Set_HuffAC_Mem>
 80096ec:	4603      	mov	r3, r0
 80096ee:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80096f0:	7bfb      	ldrb	r3, [r7, #15]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d001      	beq.n	80096fa <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
 80096f8:	e020      	b.n	800973c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8009702:	461a      	mov	r2, r3
 8009704:	4911      	ldr	r1, [pc, #68]	@ (800974c <JPEG_Set_HuffEnc_Mem+0xa0>)
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f7ff fe49 	bl	800939e <JPEG_Set_HuffDC_Mem>
 800970c:	4603      	mov	r3, r0
 800970e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009710:	7bfb      	ldrb	r3, [r7, #15]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d001      	beq.n	800971a <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8009716:	7bfb      	ldrb	r3, [r7, #15]
 8009718:	e010      	b.n	800973c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8009722:	461a      	mov	r2, r3
 8009724:	490a      	ldr	r1, [pc, #40]	@ (8009750 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f7ff fe39 	bl	800939e <JPEG_Set_HuffDC_Mem>
 800972c:	4603      	mov	r3, r0
 800972e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009730:	7bfb      	ldrb	r3, [r7, #15]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d001      	beq.n	800973a <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8009736:	7bfb      	ldrb	r3, [r7, #15]
 8009738:	e000      	b.n	800973c <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800973a:	2300      	movs	r3, #0
}
 800973c:	4618      	mov	r0, r3
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	08017e70 	.word	0x08017e70
 8009748:	08017f24 	.word	0x08017f24
 800974c:	08017e38 	.word	0x08017e38
 8009750:	08017e54 	.word	0x08017e54

08009754 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8009754:	b480      	push	{r7}
 8009756:	b08b      	sub	sp, #44	@ 0x2c
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 800975c:	4b80      	ldr	r3, [pc, #512]	@ (8009960 <JPEG_Set_Huff_DHTMem+0x20c>)
 800975e:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8009760:	4b80      	ldr	r3, [pc, #512]	@ (8009964 <JPEG_Set_Huff_DHTMem+0x210>)
 8009762:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8009764:	4b80      	ldr	r3, [pc, #512]	@ (8009968 <JPEG_Set_Huff_DHTMem+0x214>)
 8009766:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8009768:	4b80      	ldr	r3, [pc, #512]	@ (800996c <JPEG_Set_Huff_DHTMem+0x218>)
 800976a:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009774:	330c      	adds	r3, #12
 8009776:	623b      	str	r3, [r7, #32]
  index = 16;
 8009778:	2310      	movs	r3, #16
 800977a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800977c:	e01d      	b.n	80097ba <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800977e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009780:	3b01      	subs	r3, #1
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	5cd3      	ldrb	r3, [r2, r3]
 8009786:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978a:	3b02      	subs	r3, #2
 800978c:	6979      	ldr	r1, [r7, #20]
 800978e:	5ccb      	ldrb	r3, [r1, r3]
 8009790:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009792:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8009794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009796:	3b03      	subs	r3, #3
 8009798:	6979      	ldr	r1, [r7, #20]
 800979a:	5ccb      	ldrb	r3, [r1, r3]
 800979c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800979e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 80097a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097a2:	3a04      	subs	r2, #4
 80097a4:	6979      	ldr	r1, [r7, #20]
 80097a6:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80097a8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80097aa:	6a3b      	ldr	r3, [r7, #32]
 80097ac:	601a      	str	r2, [r3, #0]
    address--;
 80097ae:	6a3b      	ldr	r3, [r7, #32]
 80097b0:	3b04      	subs	r3, #4
 80097b2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80097b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b6:	3b04      	subs	r3, #4
 80097b8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80097ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097bc:	2b03      	cmp	r3, #3
 80097be:	d8de      	bhi.n	800977e <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80097c8:	3318      	adds	r3, #24
 80097ca:	623b      	str	r3, [r7, #32]
  index = 12;
 80097cc:	230c      	movs	r3, #12
 80097ce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80097d0:	e021      	b.n	8009816 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80097d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d4:	3b01      	subs	r3, #1
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	4413      	add	r3, r2
 80097da:	7c1b      	ldrb	r3, [r3, #16]
 80097dc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80097de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e0:	3b02      	subs	r3, #2
 80097e2:	6979      	ldr	r1, [r7, #20]
 80097e4:	440b      	add	r3, r1
 80097e6:	7c1b      	ldrb	r3, [r3, #16]
 80097e8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80097ea:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80097ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ee:	3b03      	subs	r3, #3
 80097f0:	6979      	ldr	r1, [r7, #20]
 80097f2:	440b      	add	r3, r1
 80097f4:	7c1b      	ldrb	r3, [r3, #16]
 80097f6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80097f8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 80097fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097fc:	3a04      	subs	r2, #4
 80097fe:	6979      	ldr	r1, [r7, #20]
 8009800:	440a      	add	r2, r1
 8009802:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009804:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009806:	6a3b      	ldr	r3, [r7, #32]
 8009808:	601a      	str	r2, [r3, #0]
    address--;
 800980a:	6a3b      	ldr	r3, [r7, #32]
 800980c:	3b04      	subs	r3, #4
 800980e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009812:	3b04      	subs	r3, #4
 8009814:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009818:	2b03      	cmp	r3, #3
 800981a:	d8da      	bhi.n	80097d2 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009824:	3328      	adds	r3, #40	@ 0x28
 8009826:	623b      	str	r3, [r7, #32]
  index = 16;
 8009828:	2310      	movs	r3, #16
 800982a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800982c:	e01d      	b.n	800986a <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800982e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009830:	3b01      	subs	r3, #1
 8009832:	69fa      	ldr	r2, [r7, #28]
 8009834:	5cd3      	ldrb	r3, [r2, r3]
 8009836:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983a:	3b02      	subs	r3, #2
 800983c:	69f9      	ldr	r1, [r7, #28]
 800983e:	5ccb      	ldrb	r3, [r1, r3]
 8009840:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009842:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8009844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009846:	3b03      	subs	r3, #3
 8009848:	69f9      	ldr	r1, [r7, #28]
 800984a:	5ccb      	ldrb	r3, [r1, r3]
 800984c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800984e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8009850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009852:	3a04      	subs	r2, #4
 8009854:	69f9      	ldr	r1, [r7, #28]
 8009856:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8009858:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800985a:	6a3b      	ldr	r3, [r7, #32]
 800985c:	601a      	str	r2, [r3, #0]
    address--;
 800985e:	6a3b      	ldr	r3, [r7, #32]
 8009860:	3b04      	subs	r3, #4
 8009862:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009866:	3b04      	subs	r3, #4
 8009868:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800986a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800986c:	2b03      	cmp	r3, #3
 800986e:	d8de      	bhi.n	800982e <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009878:	33cc      	adds	r3, #204	@ 0xcc
 800987a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800987c:	6a3b      	ldr	r3, [r7, #32]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	4b3b      	ldr	r3, [pc, #236]	@ (8009970 <JPEG_Set_Huff_DHTMem+0x21c>)
 8009882:	4013      	ands	r3, r2
 8009884:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800988c:	021a      	lsls	r2, r3, #8
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	4313      	orrs	r3, r2
 8009892:	69fa      	ldr	r2, [r7, #28]
 8009894:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 8009898:	4313      	orrs	r3, r2
 800989a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800989c:	6a3b      	ldr	r3, [r7, #32]
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80098a2:	6a3b      	ldr	r3, [r7, #32]
 80098a4:	3b04      	subs	r3, #4
 80098a6:	623b      	str	r3, [r7, #32]
  index = 160;
 80098a8:	23a0      	movs	r3, #160	@ 0xa0
 80098aa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80098ac:	e021      	b.n	80098f2 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80098ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b0:	3b01      	subs	r3, #1
 80098b2:	69fa      	ldr	r2, [r7, #28]
 80098b4:	4413      	add	r3, r2
 80098b6:	7c1b      	ldrb	r3, [r3, #16]
 80098b8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80098ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098bc:	3b02      	subs	r3, #2
 80098be:	69f9      	ldr	r1, [r7, #28]
 80098c0:	440b      	add	r3, r1
 80098c2:	7c1b      	ldrb	r3, [r3, #16]
 80098c4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80098c6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80098c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ca:	3b03      	subs	r3, #3
 80098cc:	69f9      	ldr	r1, [r7, #28]
 80098ce:	440b      	add	r3, r1
 80098d0:	7c1b      	ldrb	r3, [r3, #16]
 80098d2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80098d4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 80098d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098d8:	3a04      	subs	r2, #4
 80098da:	69f9      	ldr	r1, [r7, #28]
 80098dc:	440a      	add	r2, r1
 80098de:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80098e0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80098e2:	6a3b      	ldr	r3, [r7, #32]
 80098e4:	601a      	str	r2, [r3, #0]
    address--;
 80098e6:	6a3b      	ldr	r3, [r7, #32]
 80098e8:	3b04      	subs	r3, #4
 80098ea:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80098ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ee:	3b04      	subs	r3, #4
 80098f0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80098f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f4:	2b03      	cmp	r3, #3
 80098f6:	d8da      	bhi.n	80098ae <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009900:	33cc      	adds	r3, #204	@ 0xcc
 8009902:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	b29b      	uxth	r3, r3
 800990a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	785b      	ldrb	r3, [r3, #1]
 8009910:	061a      	lsls	r2, r3, #24
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	431a      	orrs	r2, r3
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	041b      	lsls	r3, r3, #16
 800991c:	4313      	orrs	r3, r2
 800991e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009920:	6a3b      	ldr	r3, [r7, #32]
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800992e:	33dc      	adds	r3, #220	@ 0xdc
 8009930:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8009932:	6a3b      	ldr	r3, [r7, #32]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	4b0e      	ldr	r3, [pc, #56]	@ (8009970 <JPEG_Set_Huff_DHTMem+0x21c>)
 8009938:	4013      	ands	r3, r2
 800993a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	7bdb      	ldrb	r3, [r3, #15]
 8009940:	021a      	lsls	r2, r3, #8
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	4313      	orrs	r3, r2
 8009946:	693a      	ldr	r2, [r7, #16]
 8009948:	7b92      	ldrb	r2, [r2, #14]
 800994a:	4313      	orrs	r3, r2
 800994c:	60fb      	str	r3, [r7, #12]
  *address = value;
 800994e:	6a3b      	ldr	r3, [r7, #32]
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	3b04      	subs	r3, #4
 8009958:	623b      	str	r3, [r7, #32]
  index = 12;
 800995a:	230c      	movs	r3, #12
 800995c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800995e:	e027      	b.n	80099b0 <JPEG_Set_Huff_DHTMem+0x25c>
 8009960:	08017e70 	.word	0x08017e70
 8009964:	08017f24 	.word	0x08017f24
 8009968:	08017e38 	.word	0x08017e38
 800996c:	08017e54 	.word	0x08017e54
 8009970:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009976:	3301      	adds	r3, #1
 8009978:	693a      	ldr	r2, [r7, #16]
 800997a:	5cd3      	ldrb	r3, [r2, r3]
 800997c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800997e:	6939      	ldr	r1, [r7, #16]
 8009980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009982:	440b      	add	r3, r1
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009988:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800998a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800998c:	3b01      	subs	r3, #1
 800998e:	6939      	ldr	r1, [r7, #16]
 8009990:	5ccb      	ldrb	r3, [r1, r3]
 8009992:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8009994:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8009996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009998:	3a02      	subs	r2, #2
 800999a:	6939      	ldr	r1, [r7, #16]
 800999c:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800999e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80099a0:	6a3b      	ldr	r3, [r7, #32]
 80099a2:	601a      	str	r2, [r3, #0]
    address--;
 80099a4:	6a3b      	ldr	r3, [r7, #32]
 80099a6:	3b04      	subs	r3, #4
 80099a8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80099aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ac:	3b04      	subs	r3, #4
 80099ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80099b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b2:	2b03      	cmp	r3, #3
 80099b4:	d8de      	bhi.n	8009974 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80099be:	33dc      	adds	r3, #220	@ 0xdc
 80099c0:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80099c2:	6a3b      	ldr	r3, [r7, #32]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	7c5b      	ldrb	r3, [r3, #17]
 80099ce:	061a      	lsls	r2, r3, #24
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	431a      	orrs	r2, r3
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	7c1b      	ldrb	r3, [r3, #16]
 80099d8:	041b      	lsls	r3, r3, #16
 80099da:	4313      	orrs	r3, r2
 80099dc:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80099de:	6a3b      	ldr	r3, [r7, #32]
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80099ec:	33e8      	adds	r3, #232	@ 0xe8
 80099ee:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 80099f0:	6a3b      	ldr	r3, [r7, #32]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	4b6d      	ldr	r3, [pc, #436]	@ (8009bac <JPEG_Set_Huff_DHTMem+0x458>)
 80099f6:	4013      	ands	r3, r2
 80099f8:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	7edb      	ldrb	r3, [r3, #27]
 80099fe:	021a      	lsls	r2, r3, #8
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	693a      	ldr	r2, [r7, #16]
 8009a06:	7e92      	ldrb	r2, [r2, #26]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009a0c:	6a3b      	ldr	r3, [r7, #32]
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8009a12:	6a3b      	ldr	r3, [r7, #32]
 8009a14:	3b04      	subs	r3, #4
 8009a16:	623b      	str	r3, [r7, #32]
  index = 8;
 8009a18:	2308      	movs	r3, #8
 8009a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009a1c:	e021      	b.n	8009a62 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a20:	3301      	adds	r3, #1
 8009a22:	693a      	ldr	r2, [r7, #16]
 8009a24:	4413      	add	r3, r2
 8009a26:	7c1b      	ldrb	r3, [r3, #16]
 8009a28:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8009a2a:	6939      	ldr	r1, [r7, #16]
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2e:	440b      	add	r3, r1
 8009a30:	3310      	adds	r3, #16
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009a36:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8009a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	6939      	ldr	r1, [r7, #16]
 8009a3e:	440b      	add	r3, r1
 8009a40:	7c1b      	ldrb	r3, [r3, #16]
 8009a42:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8009a44:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8009a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a48:	3a02      	subs	r2, #2
 8009a4a:	6939      	ldr	r1, [r7, #16]
 8009a4c:	440a      	add	r2, r1
 8009a4e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8009a50:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009a52:	6a3b      	ldr	r3, [r7, #32]
 8009a54:	601a      	str	r2, [r3, #0]
    address--;
 8009a56:	6a3b      	ldr	r3, [r7, #32]
 8009a58:	3b04      	subs	r3, #4
 8009a5a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a5e:	3b04      	subs	r3, #4
 8009a60:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a64:	2b03      	cmp	r3, #3
 8009a66:	d8da      	bhi.n	8009a1e <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009a70:	33e8      	adds	r3, #232	@ 0xe8
 8009a72:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	785b      	ldrb	r3, [r3, #1]
 8009a80:	061a      	lsls	r2, r3, #24
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	431a      	orrs	r2, r3
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	041b      	lsls	r3, r3, #16
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009a90:	6a3b      	ldr	r3, [r7, #32]
 8009a92:	68fa      	ldr	r2, [r7, #12]
 8009a94:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009a9e:	33f8      	adds	r3, #248	@ 0xf8
 8009aa0:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8009aa2:	6a3b      	ldr	r3, [r7, #32]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	4b41      	ldr	r3, [pc, #260]	@ (8009bac <JPEG_Set_Huff_DHTMem+0x458>)
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	7bdb      	ldrb	r3, [r3, #15]
 8009ab0:	021a      	lsls	r2, r3, #8
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	69ba      	ldr	r2, [r7, #24]
 8009ab8:	7b92      	ldrb	r2, [r2, #14]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009abe:	6a3b      	ldr	r3, [r7, #32]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8009ac4:	6a3b      	ldr	r3, [r7, #32]
 8009ac6:	3b04      	subs	r3, #4
 8009ac8:	623b      	str	r3, [r7, #32]
  index = 12;
 8009aca:	230c      	movs	r3, #12
 8009acc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009ace:	e01d      	b.n	8009b0c <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	69ba      	ldr	r2, [r7, #24]
 8009ad6:	5cd3      	ldrb	r3, [r2, r3]
 8009ad8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8009ada:	69b9      	ldr	r1, [r7, #24]
 8009adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ade:	440b      	add	r3, r1
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009ae4:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	69b9      	ldr	r1, [r7, #24]
 8009aec:	5ccb      	ldrb	r3, [r1, r3]
 8009aee:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8009af0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8009af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009af4:	3a02      	subs	r2, #2
 8009af6:	69b9      	ldr	r1, [r7, #24]
 8009af8:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8009afa:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009afc:	6a3b      	ldr	r3, [r7, #32]
 8009afe:	601a      	str	r2, [r3, #0]
    address--;
 8009b00:	6a3b      	ldr	r3, [r7, #32]
 8009b02:	3b04      	subs	r3, #4
 8009b04:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b08:	3b04      	subs	r3, #4
 8009b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b0e:	2b03      	cmp	r3, #3
 8009b10:	d8de      	bhi.n	8009ad0 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009b1a:	33f8      	adds	r3, #248	@ 0xf8
 8009b1c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8009b1e:	6a3b      	ldr	r3, [r7, #32]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	7c5b      	ldrb	r3, [r3, #17]
 8009b2a:	061a      	lsls	r2, r3, #24
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	431a      	orrs	r2, r3
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	7c1b      	ldrb	r3, [r3, #16]
 8009b34:	041b      	lsls	r3, r3, #16
 8009b36:	4313      	orrs	r3, r2
 8009b38:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8009b3a:	6a3b      	ldr	r3, [r7, #32]
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009b48:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8009b4c:	623b      	str	r3, [r7, #32]
  index = 160;
 8009b4e:	23a0      	movs	r3, #160	@ 0xa0
 8009b50:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009b52:	e021      	b.n	8009b98 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b56:	3301      	adds	r3, #1
 8009b58:	69ba      	ldr	r2, [r7, #24]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	7c1b      	ldrb	r3, [r3, #16]
 8009b5e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8009b60:	69b9      	ldr	r1, [r7, #24]
 8009b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b64:	440b      	add	r3, r1
 8009b66:	3310      	adds	r3, #16
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009b6c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8009b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b70:	3b01      	subs	r3, #1
 8009b72:	69b9      	ldr	r1, [r7, #24]
 8009b74:	440b      	add	r3, r1
 8009b76:	7c1b      	ldrb	r3, [r3, #16]
 8009b78:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8009b7a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8009b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b7e:	3a02      	subs	r2, #2
 8009b80:	69b9      	ldr	r1, [r7, #24]
 8009b82:	440a      	add	r2, r1
 8009b84:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8009b86:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009b88:	6a3b      	ldr	r3, [r7, #32]
 8009b8a:	601a      	str	r2, [r3, #0]
    address--;
 8009b8c:	6a3b      	ldr	r3, [r7, #32]
 8009b8e:	3b04      	subs	r3, #4
 8009b90:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b94:	3b04      	subs	r3, #4
 8009b96:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9a:	2b03      	cmp	r3, #3
 8009b9c:	d8da      	bhi.n	8009b54 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8009b9e:	bf00      	nop
 8009ba0:	bf00      	nop
 8009ba2:	372c      	adds	r7, #44	@ 0x2c
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	ffff0000 	.word	0xffff0000

08009bb0 <JPEG_Set_Quantization_Mem>:
  *         it could be QMEM0, QMEM1, QMEM2 or QMEM3
  * @retval 0 if no error, 1 if error
  */
static uint32_t JPEG_Set_Quantization_Mem(JPEG_HandleTypeDef *hjpeg, uint8_t *QTable,
                                                    __IO uint32_t *QTableAddress)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b08b      	sub	sp, #44	@ 0x2c
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
  uint32_t quantRow;
  uint32_t quantVal;
  uint32_t ScaleFactor;
  __IO uint32_t *tableAddress;

  tableAddress = QTableAddress;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	613b      	str	r3, [r7, #16]

  if ((hjpeg->Conf.ImageQuality >= 50UL) && (hjpeg->Conf.ImageQuality <= 100UL))
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	695b      	ldr	r3, [r3, #20]
 8009bc4:	2b31      	cmp	r3, #49	@ 0x31
 8009bc6:	d90a      	bls.n	8009bde <JPEG_Set_Quantization_Mem+0x2e>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	695b      	ldr	r3, [r3, #20]
 8009bcc:	2b64      	cmp	r3, #100	@ 0x64
 8009bce:	d806      	bhi.n	8009bde <JPEG_Set_Quantization_Mem+0x2e>
  {
    ScaleFactor = 200UL - (hjpeg->Conf.ImageQuality * 2UL);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	695b      	ldr	r3, [r3, #20]
 8009bd4:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8009bd8:	005b      	lsls	r3, r3, #1
 8009bda:	617b      	str	r3, [r7, #20]
 8009bdc:	e00d      	b.n	8009bfa <JPEG_Set_Quantization_Mem+0x4a>
  }
  else if (hjpeg->Conf.ImageQuality > 0UL)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	695b      	ldr	r3, [r3, #20]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d007      	beq.n	8009bf6 <JPEG_Set_Quantization_Mem+0x46>
  {
    ScaleFactor = ((uint32_t) 5000) / ((uint32_t) hjpeg->Conf.ImageQuality);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	695b      	ldr	r3, [r3, #20]
 8009bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bf2:	617b      	str	r3, [r7, #20]
 8009bf4:	e001      	b.n	8009bfa <JPEG_Set_Quantization_Mem+0x4a>
  }
  else
  {
    return 1UL;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e041      	b.n	8009c7e <JPEG_Set_Quantization_Mem+0xce>
  }

  /*Quantization_table = (Standard_quanization_table * ScaleFactor + 50) / 100*/
  i = 0;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8009bfe:	e03a      	b.n	8009c76 <JPEG_Set_Quantization_Mem+0xc6>
  {
    quantRow = 0;
 8009c00:	2300      	movs	r3, #0
 8009c02:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < 4UL; j++)
 8009c04:	2300      	movs	r3, #0
 8009c06:	623b      	str	r3, [r7, #32]
 8009c08:	e029      	b.n	8009c5e <JPEG_Set_Quantization_Mem+0xae>
    {
      /* Note that the quantization coefficients must be specified in the table in zigzag order */
      quantVal = ((((uint32_t) QTable[JPEG_ZIGZAG_ORDER[i + j]]) * ScaleFactor) + 50UL) / 100UL;
 8009c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c0c:	6a3b      	ldr	r3, [r7, #32]
 8009c0e:	4413      	add	r3, r2
 8009c10:	4a1e      	ldr	r2, [pc, #120]	@ (8009c8c <JPEG_Set_Quantization_Mem+0xdc>)
 8009c12:	5cd3      	ldrb	r3, [r2, r3]
 8009c14:	461a      	mov	r2, r3
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	4413      	add	r3, r2
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	fb02 f303 	mul.w	r3, r2, r3
 8009c24:	3332      	adds	r3, #50	@ 0x32
 8009c26:	4a1a      	ldr	r2, [pc, #104]	@ (8009c90 <JPEG_Set_Quantization_Mem+0xe0>)
 8009c28:	fba2 2303 	umull	r2, r3, r2, r3
 8009c2c:	095b      	lsrs	r3, r3, #5
 8009c2e:	61bb      	str	r3, [r7, #24]

      if (quantVal == 0UL)
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d102      	bne.n	8009c3c <JPEG_Set_Quantization_Mem+0x8c>
      {
        quantVal = 1UL;
 8009c36:	2301      	movs	r3, #1
 8009c38:	61bb      	str	r3, [r7, #24]
 8009c3a:	e004      	b.n	8009c46 <JPEG_Set_Quantization_Mem+0x96>
      }
      else if (quantVal > 255UL)
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	2bff      	cmp	r3, #255	@ 0xff
 8009c40:	d901      	bls.n	8009c46 <JPEG_Set_Quantization_Mem+0x96>
      {
        quantVal = 255UL;
 8009c42:	23ff      	movs	r3, #255	@ 0xff
 8009c44:	61bb      	str	r3, [r7, #24]
      else
      {
        /* Nothing to do, keep same value of quantVal */
      }

      quantRow |= ((quantVal & 0xFFUL) << (8UL * j));
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	b2da      	uxtb	r2, r3
 8009c4a:	6a3b      	ldr	r3, [r7, #32]
 8009c4c:	00db      	lsls	r3, r3, #3
 8009c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c52:	69fa      	ldr	r2, [r7, #28]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < 4UL; j++)
 8009c58:	6a3b      	ldr	r3, [r7, #32]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	623b      	str	r3, [r7, #32]
 8009c5e:	6a3b      	ldr	r3, [r7, #32]
 8009c60:	2b03      	cmp	r3, #3
 8009c62:	d9d2      	bls.n	8009c0a <JPEG_Set_Quantization_Mem+0x5a>
    }

    i += 4UL;
 8009c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c66:	3304      	adds	r3, #4
 8009c68:	627b      	str	r3, [r7, #36]	@ 0x24
    *tableAddress = quantRow;
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	69fa      	ldr	r2, [r7, #28]
 8009c6e:	601a      	str	r2, [r3, #0]
    tableAddress ++;
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	3304      	adds	r3, #4
 8009c74:	613b      	str	r3, [r7, #16]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8009c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c78:	2b3c      	cmp	r3, #60	@ 0x3c
 8009c7a:	d9c1      	bls.n	8009c00 <JPEG_Set_Quantization_Mem+0x50>
  }

  /* Return function status */
  return 0UL;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	372c      	adds	r7, #44	@ 0x2c
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	08017fd8 	.word	0x08017fd8
 8009c90:	51eb851f 	.word	0x51eb851f

08009c94 <JPEG_SetColorYCBCR>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorYCBCR(JPEG_HandleTypeDef *hjpeg)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b087      	sub	sp, #28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  uint32_t ySamplingH;
  uint32_t ySamplingV;
  uint32_t yblockNb;

  /*Set Number of color components to 3*/
  hjpeg->Instance->CONFR1 &=  ~JPEG_CONFR1_NF;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	685a      	ldr	r2, [r3, #4]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f022 0203 	bic.w	r2, r2, #3
 8009caa:	605a      	str	r2, [r3, #4]
  hjpeg->Instance->CONFR1 |=  JPEG_CONFR1_NF_1;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	685a      	ldr	r2, [r3, #4]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f042 0202 	orr.w	r2, r2, #2
 8009cba:	605a      	str	r2, [r3, #4]

  /* compute MCU block size and Y, Cb ,Cr sampling factors*/
  if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d108      	bne.n	8009cd6 <JPEG_SetColorYCBCR+0x42>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 8009cc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009cc8:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_1;   /* Vs = 2*/
 8009cca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009cce:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x30; /* 4 blocks of 8x8*/
 8009cd0:	2330      	movs	r3, #48	@ 0x30
 8009cd2:	60fb      	str	r3, [r7, #12]
 8009cd4:	e014      	b.n	8009d00 <JPEG_SetColorYCBCR+0x6c>
  }
  else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	2b02      	cmp	r3, #2
 8009cdc:	d108      	bne.n	8009cf0 <JPEG_SetColorYCBCR+0x5c>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 8009cde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009ce2:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 8009ce4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009ce8:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x10; /* 2 blocks of 8x8*/
 8009cea:	2310      	movs	r3, #16
 8009cec:	60fb      	str	r3, [r7, #12]
 8009cee:	e007      	b.n	8009d00 <JPEG_SetColorYCBCR+0x6c>
  }
  else /*JPEG_444_SUBSAMPLING and default*/
  {
    ySamplingH  = JPEG_CONFR4_HSF_0;   /* Hs = 1*/
 8009cf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009cf4:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 8009cf6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009cfa:	613b      	str	r3, [r7, #16]

    yblockNb  = 0; /* 1 block of 8x8*/
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	60fb      	str	r3, [r7, #12]
  }

  hjpeg->Instance->CONFR1 &= ~(JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	685a      	ldr	r2, [r3, #4]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f022 02c3 	bic.w	r2, r2, #195	@ 0xc3
 8009d0e:	605a      	str	r2, [r3, #4]
  hjpeg->Instance->CONFR1 |= (JPEG_CONFR1_NF_1 | JPEG_CONFR1_NS_1);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	685a      	ldr	r2, [r3, #4]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f042 0282 	orr.w	r2, r2, #130	@ 0x82
 8009d1e:	605a      	str	r2, [r3, #4]

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2200      	movs	r2, #0
 8009d26:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |= (ySamplingH | ySamplingV | (yblockNb & JPEG_CONFR4_NB));
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	6919      	ldr	r1, [r3, #16]
 8009d2e:	697a      	ldr	r2, [r7, #20]
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	431a      	orrs	r2, r3
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009d3a:	431a      	orrs	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	430a      	orrs	r2, r1
 8009d42:	611a      	str	r2, [r3, #16]

  /*Reset CONFR5 register*/
  hjpeg->Instance->CONFR5 =  0;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	615a      	str	r2, [r3, #20]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 1*/
  hjpeg->Instance->CONFR5 |= (JPEG_CONFR5_HSF_0 | JPEG_CONFR5_VSF_0 | JPEG_CONFR5_QT_0 | JPEG_CONFR5_HA | JPEG_CONFR5_HD);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	6959      	ldr	r1, [r3, #20]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	f241 1307 	movw	r3, #4359	@ 0x1107
 8009d5a:	430b      	orrs	r3, r1
 8009d5c:	6153      	str	r3, [r2, #20]

  /*Reset CONFR6 register*/
  hjpeg->Instance->CONFR6 =  0;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2200      	movs	r2, #0
 8009d64:	619a      	str	r2, [r3, #24]
  /*Set Horizental and Vertical  sampling factor and number of blocks for component 2*/
  /* In YCBCR , by default, both chrominance components (component 1 and component 2) use the same Quantization table (table 1) */
  /* In YCBCR , both chrominance components (component 1 and component 2) use the same Huffman tables (table 1) */
  hjpeg->Instance->CONFR6 |= (JPEG_CONFR6_HSF_0 | JPEG_CONFR6_VSF_0 | JPEG_CONFR6_QT_0 | JPEG_CONFR6_HA | JPEG_CONFR6_HD);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	6999      	ldr	r1, [r3, #24]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	f241 1307 	movw	r3, #4359	@ 0x1107
 8009d74:	430b      	orrs	r3, r1
 8009d76:	6193      	str	r3, [r2, #24]

}
 8009d78:	bf00      	nop
 8009d7a:	371c      	adds	r7, #28
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <JPEG_SetColorGrayScale>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorGrayScale(JPEG_HandleTypeDef *hjpeg)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  /*Set Number of color components to 1*/
  hjpeg->Instance->CONFR1 &= ~(JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	685a      	ldr	r2, [r3, #4]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f022 02c3 	bic.w	r2, r2, #195	@ 0xc3
 8009d9a:	605a      	str	r2, [r3, #4]

  /*in GrayScale use 1 single Quantization table (Table 0)*/
  /*in GrayScale use only one couple of AC/DC huffman table (table 0)*/

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2200      	movs	r2, #0
 8009da2:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |=  JPEG_CONFR4_HSF_0 | JPEG_CONFR4_VSF_0 ;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	691a      	ldr	r2, [r3, #16]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8009db2:	611a      	str	r2, [r3, #16]
}
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <JPEG_SetColorCMYK>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorCMYK(JPEG_HandleTypeDef *hjpeg)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b087      	sub	sp, #28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  uint32_t ySamplingH;
  uint32_t ySamplingV;
  uint32_t yblockNb;

  /*Set Number of color components to 4*/
  hjpeg->Instance->CONFR1 |= (JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	685a      	ldr	r2, [r3, #4]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f042 02c3 	orr.w	r2, r2, #195	@ 0xc3
 8009dd6:	605a      	str	r2, [r3, #4]

  /* compute MCU block size and Y, Cb ,Cr sampling factors*/
  if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d108      	bne.n	8009df2 <JPEG_SetColorCMYK+0x32>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 8009de0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009de4:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_1;   /* Vs = 2*/
 8009de6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009dea:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x30; /* 4 blocks of 8x8*/
 8009dec:	2330      	movs	r3, #48	@ 0x30
 8009dee:	60fb      	str	r3, [r7, #12]
 8009df0:	e014      	b.n	8009e1c <JPEG_SetColorCMYK+0x5c>
  }
  else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d108      	bne.n	8009e0c <JPEG_SetColorCMYK+0x4c>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 8009dfa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009dfe:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 8009e00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e04:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x10; /* 2 blocks of 8x8*/
 8009e06:	2310      	movs	r3, #16
 8009e08:	60fb      	str	r3, [r7, #12]
 8009e0a:	e007      	b.n	8009e1c <JPEG_SetColorCMYK+0x5c>
  }
  else /*JPEG_444_SUBSAMPLING and default*/
  {
    ySamplingH  = JPEG_CONFR4_HSF_0;   /* Hs = 1*/
 8009e0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009e10:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 8009e12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e16:	613b      	str	r3, [r7, #16]

    yblockNb  = 0; /* 1 block of 8x8*/
 8009e18:	2300      	movs	r3, #0
 8009e1a:	60fb      	str	r3, [r7, #12]
  }

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2200      	movs	r2, #0
 8009e22:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |= (ySamplingH | ySamplingV | (yblockNb & JPEG_CONFR4_NB));
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	6919      	ldr	r1, [r3, #16]
 8009e2a:	697a      	ldr	r2, [r7, #20]
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	431a      	orrs	r2, r3
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009e36:	431a      	orrs	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	430a      	orrs	r2, r1
 8009e3e:	611a      	str	r2, [r3, #16]

  /*Reset CONFR5 register*/
  hjpeg->Instance->CONFR5 =  0;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2200      	movs	r2, #0
 8009e46:	615a      	str	r2, [r3, #20]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 1*/
  hjpeg->Instance->CONFR5 |= (JPEG_CONFR5_HSF_0 | JPEG_CONFR5_VSF_0);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	695a      	ldr	r2, [r3, #20]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8009e56:	615a      	str	r2, [r3, #20]

  /*Reset CONFR6 register*/
  hjpeg->Instance->CONFR6 =  0;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	619a      	str	r2, [r3, #24]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 2*/
  hjpeg->Instance->CONFR6 |= (JPEG_CONFR6_HSF_0 | JPEG_CONFR6_VSF_0);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	699a      	ldr	r2, [r3, #24]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8009e6e:	619a      	str	r2, [r3, #24]

  /*Reset CONFR7 register*/
  hjpeg->Instance->CONFR7 =  0;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2200      	movs	r2, #0
 8009e76:	61da      	str	r2, [r3, #28]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 3*/
  hjpeg->Instance->CONFR7 |= (JPEG_CONFR7_HSF_0 | JPEG_CONFR7_VSF_0);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	69da      	ldr	r2, [r3, #28]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8009e86:	61da      	str	r2, [r3, #28]
}
 8009e88:	bf00      	nop
 8009e8a:	371c      	adds	r7, #28
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ea0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009eac:	f003 0303 	and.w	r3, r3, #3
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d108      	bne.n	8009ec6 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	685a      	ldr	r2, [r3, #4]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f042 0208 	orr.w	r2, r2, #8
 8009ec2:	605a      	str	r2, [r3, #4]
 8009ec4:	e007      	b.n	8009ed6 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	685a      	ldr	r2, [r3, #4]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f022 0208 	bic.w	r2, r2, #8
 8009ed4:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f022 0201 	bic.w	r2, r2, #1
 8009ee4:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009ef4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009f04:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009f14:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009f24:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f042 0201 	orr.w	r2, r2, #1
 8009f34:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f3a:	f003 030c 	and.w	r3, r3, #12
 8009f3e:	2b08      	cmp	r3, #8
 8009f40:	d108      	bne.n	8009f54 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8009f50:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8009f52:	e00d      	b.n	8009f70 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f58:	f003 030c 	and.w	r3, r3, #12
 8009f5c:	2b0c      	cmp	r3, #12
 8009f5e:	d107      	bne.n	8009f70 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009f6e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009f70:	bf00      	nop
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f88:	f003 0303 	and.w	r3, r3, #3
 8009f8c:	2b02      	cmp	r3, #2
 8009f8e:	d125      	bne.n	8009fdc <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d01e      	beq.n	8009fdc <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f7fe feb6 	bl	8008d16 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	3304      	adds	r3, #4
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7ff f82e 	bl	8009018 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009fca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009fda:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fe0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d116      	bne.n	800a016 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fee:	f003 0302 	and.w	r3, r3, #2
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d004      	beq.n	800a000 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8009ff6:	2108      	movs	r1, #8
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 f988 	bl	800a30e <JPEG_ReadInputData>
 8009ffe:	e00a      	b.n	800a016 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a006:	f003 0304 	and.w	r3, r3, #4
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d003      	beq.n	800a016 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800a00e:	2101      	movs	r1, #1
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 f97c 	bl	800a30e <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a01a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d116      	bne.n	800a050 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a028:	f003 0308 	and.w	r3, r3, #8
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d004      	beq.n	800a03a <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800a030:	2108      	movs	r1, #8
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 f864 	bl	800a100 <JPEG_StoreOutputData>
 800a038:	e00a      	b.n	800a050 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a040:	f003 0310 	and.w	r3, r3, #16
 800a044:	2b00      	cmp	r3, #0
 800a046:	d003      	beq.n	800a050 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800a048:	2101      	movs	r1, #1
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 f858 	bl	800a100 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a056:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a05a:	2b20      	cmp	r3, #32
 800a05c:	d14b      	bne.n	800a0f6 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f022 0201 	bic.w	r2, r2, #1
 800a06c:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a072:	f003 030c 	and.w	r3, r3, #12
 800a076:	2b08      	cmp	r3, #8
 800a078:	d107      	bne.n	800a08a <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a088:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a098:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00a      	beq.n	800a0b8 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	69d9      	ldr	r1, [r3, #28]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f7f7 fbed 	bl	800188c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0bc:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0c2:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f003 0303 	and.w	r3, r3, #3
 800a0e0:	2b02      	cmp	r3, #2
 800a0e2:	d103      	bne.n	800a0ec <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f7fe ffa2 	bl	800902e <HAL_JPEG_DecodeCpltCallback>
 800a0ea:	e002      	b.n	800a0f2 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f7f7 fbe9 	bl	80018c4 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e000      	b.n	800a0f8 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b086      	sub	sp, #24
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	440b      	add	r3, r1
 800a118:	429a      	cmp	r2, r3
 800a11a:	d34b      	bcc.n	800a1b4 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800a11c:	2300      	movs	r3, #0
 800a11e:	617b      	str	r3, [r7, #20]
 800a120:	e031      	b.n	800a186 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a128:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	69da      	ldr	r2, [r3, #28]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a132:	4413      	add	r3, r2
 800a134:	68ba      	ldr	r2, [r7, #8]
 800a136:	b2d2      	uxtb	r2, r2
 800a138:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	0a19      	lsrs	r1, r3, #8
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	69da      	ldr	r2, [r3, #28]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a146:	3301      	adds	r3, #1
 800a148:	4413      	add	r3, r2
 800a14a:	b2ca      	uxtb	r2, r1
 800a14c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	0c19      	lsrs	r1, r3, #16
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	69da      	ldr	r2, [r3, #28]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a15a:	3302      	adds	r3, #2
 800a15c:	4413      	add	r3, r2
 800a15e:	b2ca      	uxtb	r2, r1
 800a160:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	0e19      	lsrs	r1, r3, #24
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	69da      	ldr	r2, [r3, #28]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a16e:	3303      	adds	r3, #3
 800a170:	4413      	add	r3, r2
 800a172:	b2ca      	uxtb	r2, r1
 800a174:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a17a:	1d1a      	adds	r2, r3, #4
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	3301      	adds	r3, #1
 800a184:	617b      	str	r3, [r7, #20]
 800a186:	697a      	ldr	r2, [r7, #20]
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d3c9      	bcc.n	800a122 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a196:	429a      	cmp	r2, r3
 800a198:	f040 80b5 	bne.w	800a306 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	69d9      	ldr	r1, [r3, #28]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f7f7 fb70 	bl	800188c <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800a1b2:	e0a8      	b.n	800a306 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	f240 80a2 	bls.w	800a306 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ca:	1ad3      	subs	r3, r2, r3
 800a1cc:	089b      	lsrs	r3, r3, #2
 800a1ce:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	617b      	str	r3, [r7, #20]
 800a1d4:	e031      	b.n	800a23a <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1dc:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	69da      	ldr	r2, [r3, #28]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1e6:	4413      	add	r3, r2
 800a1e8:	68ba      	ldr	r2, [r7, #8]
 800a1ea:	b2d2      	uxtb	r2, r2
 800a1ec:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	0a19      	lsrs	r1, r3, #8
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	69da      	ldr	r2, [r3, #28]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	4413      	add	r3, r2
 800a1fe:	b2ca      	uxtb	r2, r1
 800a200:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	0c19      	lsrs	r1, r3, #16
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	69da      	ldr	r2, [r3, #28]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a20e:	3302      	adds	r3, #2
 800a210:	4413      	add	r3, r2
 800a212:	b2ca      	uxtb	r2, r1
 800a214:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	0e19      	lsrs	r1, r3, #24
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	69da      	ldr	r2, [r3, #28]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a222:	3303      	adds	r3, #3
 800a224:	4413      	add	r3, r2
 800a226:	b2ca      	uxtb	r2, r1
 800a228:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a22e:	1d1a      	adds	r2, r3, #4
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	3301      	adds	r3, #1
 800a238:	617b      	str	r3, [r7, #20]
 800a23a:	697a      	ldr	r2, [r7, #20]
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d3c9      	bcc.n	800a1d6 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d10b      	bne.n	800a266 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	69d9      	ldr	r1, [r3, #28]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a256:	461a      	mov	r2, r3
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f7f7 fb17 	bl	800188c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800a264:	e04f      	b.n	800a306 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a26e:	1ad3      	subs	r3, r2, r3
 800a270:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a278:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800a27a:	2300      	movs	r3, #0
 800a27c:	617b      	str	r3, [r7, #20]
 800a27e:	e015      	b.n	800a2ac <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	f003 0303 	and.w	r3, r3, #3
 800a286:	00db      	lsls	r3, r3, #3
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	fa22 f103 	lsr.w	r1, r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	69da      	ldr	r2, [r3, #28]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a296:	4413      	add	r3, r2
 800a298:	b2ca      	uxtb	r2, r1
 800a29a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2a0:	1c5a      	adds	r2, r3, #1
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	617b      	str	r3, [r7, #20]
 800a2ac:	697a      	ldr	r2, [r7, #20]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d3e5      	bcc.n	800a280 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	69d9      	ldr	r1, [r3, #28]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2bc:	461a      	mov	r2, r3
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f7f7 fae4 	bl	800188c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f1c3 0304 	rsb	r3, r3, #4
 800a2d0:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	617b      	str	r3, [r7, #20]
 800a2d6:	e013      	b.n	800a300 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	00db      	lsls	r3, r3, #3
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	fa22 f103 	lsr.w	r1, r2, r3
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	69da      	ldr	r2, [r3, #28]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ea:	4413      	add	r3, r2
 800a2ec:	b2ca      	uxtb	r2, r1
 800a2ee:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2f4:	1c5a      	adds	r2, r3, #1
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	617b      	str	r3, [r7, #20]
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	2b03      	cmp	r3, #3
 800a304:	d9e8      	bls.n	800a2d8 <JPEG_StoreOutputData+0x1d8>
}
 800a306:	bf00      	nop
 800a308:	3718      	adds	r7, #24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b088      	sub	sp, #32
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800a318:	2300      	movs	r3, #0
 800a31a:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a320:	2b00      	cmp	r3, #0
 800a322:	d002      	beq.n	800a32a <JPEG_ReadInputData+0x1c>
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d104      	bne.n	800a334 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800a32a:	2101      	movs	r1, #1
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f7fe fdf7 	bl	8008f20 <HAL_JPEG_Pause>
 800a332:	e028      	b.n	800a386 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6a1b      	ldr	r3, [r3, #32]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d906      	bls.n	800a34e <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6a1b      	ldr	r3, [r3, #32]
 800a348:	1ad3      	subs	r3, r2, r3
 800a34a:	61fb      	str	r3, [r7, #28]
 800a34c:	e01b      	b.n	800a386 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a1b      	ldr	r3, [r3, #32]
 800a356:	429a      	cmp	r2, r3
 800a358:	d115      	bne.n	800a386 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a1b      	ldr	r3, [r3, #32]
 800a35e:	4619      	mov	r1, r3
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f7f7 fa61 	bl	8001828 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a36a:	2b04      	cmp	r3, #4
 800a36c:	d905      	bls.n	800a37a <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a372:	f023 0203 	bic.w	r2, r3, #3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a384:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a38a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f040 809f 	bne.w	800a4d2 <JPEG_ReadInputData+0x1c4>
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	2b00      	cmp	r3, #0
 800a398:	f000 809b 	beq.w	800a4d2 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	089b      	lsrs	r3, r3, #2
 800a3a0:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800a3a2:	693a      	ldr	r2, [r7, #16]
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d335      	bcc.n	800a416 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	61bb      	str	r3, [r7, #24]
 800a3ae:	e02d      	b.n	800a40c <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a1b      	ldr	r3, [r3, #32]
 800a3b4:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	699a      	ldr	r2, [r3, #24]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	4413      	add	r3, r2
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	699a      	ldr	r2, [r3, #24]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	4413      	add	r3, r2
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a3d0:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6999      	ldr	r1, [r3, #24]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	3302      	adds	r3, #2
 800a3dc:	440b      	add	r3, r1
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a3e2:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	699a      	ldr	r2, [r3, #24]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	3303      	adds	r3, #3
 800a3ee:	4413      	add	r3, r2
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a3f8:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a3fa:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6a1b      	ldr	r3, [r3, #32]
 800a400:	1d1a      	adds	r2, r3, #4
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	3301      	adds	r3, #1
 800a40a:	61bb      	str	r3, [r7, #24]
 800a40c:	69ba      	ldr	r2, [r7, #24]
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	429a      	cmp	r2, r3
 800a412:	d3cd      	bcc.n	800a3b0 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800a414:	e05d      	b.n	800a4d2 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d035      	beq.n	800a488 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800a41c:	2300      	movs	r3, #0
 800a41e:	61bb      	str	r3, [r7, #24]
 800a420:	e02d      	b.n	800a47e <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a1b      	ldr	r3, [r3, #32]
 800a426:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	699a      	ldr	r2, [r3, #24]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	4413      	add	r3, r2
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	699a      	ldr	r2, [r3, #24]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	3301      	adds	r3, #1
 800a43c:	4413      	add	r3, r2
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a442:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6999      	ldr	r1, [r3, #24]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3302      	adds	r3, #2
 800a44e:	440b      	add	r3, r1
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a454:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	699a      	ldr	r2, [r3, #24]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	3303      	adds	r3, #3
 800a460:	4413      	add	r3, r2
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a46a:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a46c:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a1b      	ldr	r3, [r3, #32]
 800a472:	1d1a      	adds	r2, r3, #4
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	3301      	adds	r3, #1
 800a47c:	61bb      	str	r3, [r7, #24]
 800a47e:	69ba      	ldr	r2, [r7, #24]
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	429a      	cmp	r2, r3
 800a484:	d3cd      	bcc.n	800a422 <JPEG_ReadInputData+0x114>
}
 800a486:	e024      	b.n	800a4d2 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800a488:	2300      	movs	r3, #0
 800a48a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800a48c:	2300      	movs	r3, #0
 800a48e:	61bb      	str	r3, [r7, #24]
 800a490:	e017      	b.n	800a4c2 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	699a      	ldr	r2, [r3, #24]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a1b      	ldr	r3, [r3, #32]
 800a49a:	4413      	add	r3, r2
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	f003 0303 	and.w	r3, r3, #3
 800a4a6:	00db      	lsls	r3, r3, #3
 800a4a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ac:	697a      	ldr	r2, [r7, #20]
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a1b      	ldr	r3, [r3, #32]
 800a4b6:	1c5a      	adds	r2, r3, #1
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	61bb      	str	r3, [r7, #24]
 800a4c2:	69ba      	ldr	r2, [r7, #24]
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d3e3      	bcc.n	800a492 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	697a      	ldr	r2, [r7, #20]
 800a4d0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800a4d2:	bf00      	nop
 800a4d4:	3720      	adds	r7, #32
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
	...

0800a4dc <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800a4dc:	b590      	push	{r4, r7, lr}
 800a4de:	b087      	sub	sp, #28
 800a4e0:	af02      	add	r7, sp, #8
 800a4e2:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ea:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f2:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d804      	bhi.n	800a508 <JPEG_DMA_StartProcess+0x2c>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a502:	68ba      	ldr	r2, [r7, #8]
 800a504:	429a      	cmp	r2, r3
 800a506:	d901      	bls.n	800a50c <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 800a508:	2301      	movs	r3, #1
 800a50a:	e074      	b.n	800a5f6 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a510:	4a3b      	ldr	r2, [pc, #236]	@ (800a600 <JPEG_DMA_StartProcess+0x124>)
 800a512:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a518:	4a3a      	ldr	r2, [pc, #232]	@ (800a604 <JPEG_DMA_StartProcess+0x128>)
 800a51a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a520:	4a39      	ldr	r2, [pc, #228]	@ (800a608 <JPEG_DMA_StartProcess+0x12c>)
 800a522:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a528:	4a36      	ldr	r2, [pc, #216]	@ (800a604 <JPEG_DMA_StartProcess+0x128>)
 800a52a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a530:	4a36      	ldr	r2, [pc, #216]	@ (800a60c <JPEG_DMA_StartProcess+0x130>)
 800a532:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d002      	beq.n	800a540 <JPEG_DMA_StartProcess+0x64>
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d107      	bne.n	800a550 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a544:	f043 0204 	orr.w	r2, r3, #4
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	e052      	b.n	800a5f6 <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a558:	68f9      	ldr	r1, [r7, #12]
 800a55a:	fbb3 f1f1 	udiv	r1, r3, r1
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	fb00 f101 	mul.w	r1, r0, r1
 800a564:	1a5b      	subs	r3, r3, r1
 800a566:	1ad2      	subs	r2, r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a574:	68b9      	ldr	r1, [r7, #8]
 800a576:	fbb3 f1f1 	udiv	r1, r3, r1
 800a57a:	68b8      	ldr	r0, [r7, #8]
 800a57c:	fb00 f101 	mul.w	r1, r0, r1
 800a580:	1a5b      	subs	r3, r3, r1
 800a582:	1ad2      	subs	r2, r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	3344      	adds	r3, #68	@ 0x44
 800a592:	4619      	mov	r1, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	69db      	ldr	r3, [r3, #28]
 800a598:	461c      	mov	r4, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a59e:	2201      	movs	r2, #1
 800a5a0:	9200      	str	r2, [sp, #0]
 800a5a2:	4622      	mov	r2, r4
 800a5a4:	f000 fbe2 	bl	800ad6c <HAL_MDMA_Start_IT>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d007      	beq.n	800a5be <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5b2:	f043 0204 	orr.w	r2, r3, #4
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e01b      	b.n	800a5f6 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	699b      	ldr	r3, [r3, #24]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	3340      	adds	r3, #64	@ 0x40
 800a5ce:	461c      	mov	r4, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	9200      	str	r2, [sp, #0]
 800a5d8:	4622      	mov	r2, r4
 800a5da:	f000 fbc7 	bl	800ad6c <HAL_MDMA_Start_IT>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d007      	beq.n	800a5f4 <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5e8:	f043 0204 	orr.w	r2, r3, #4
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e000      	b.n	800a5f6 <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3714      	adds	r7, #20
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd90      	pop	{r4, r7, pc}
 800a5fe:	bf00      	nop
 800a600:	0800a90f 	.word	0x0800a90f
 800a604:	0800aafd 	.word	0x0800aafd
 800a608:	0800aa3b 	.word	0x0800aa3b
 800a60c:	0800ab4d 	.word	0x0800ab4d

0800a610 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a61c:	f003 0303 	and.w	r3, r3, #3
 800a620:	2b02      	cmp	r3, #2
 800a622:	d125      	bne.n	800a670 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a62a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d01e      	beq.n	800a670 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	3304      	adds	r3, #4
 800a636:	4619      	mov	r1, r3
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f7fe fb6c 	bl	8008d16 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	3304      	adds	r3, #4
 800a648:	4619      	mov	r1, r3
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f7fe fce4 	bl	8009018 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a65e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a66e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a676:	f003 0320 	and.w	r3, r3, #32
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d039      	beq.n	800a6f2 <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a682:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f022 0201 	bic.w	r2, r2, #1
 800a698:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a6a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a6b8:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	d104      	bne.n	800a6d2 <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 fbce 	bl	800ae6e <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	d105      	bne.n	800a6ec <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f000 fbc2 	bl	800ae6e <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800a6ea:	e002      	b.n	800a6f2 <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 f804 	bl	800a6fa <JPEG_DMA_EndProcess>
}
 800a6f2:	bf00      	nop
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b084      	sub	sp, #16
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	695b      	ldr	r3, [r3, #20]
 800a70e:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800a712:	1ad2      	subs	r2, r2, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a720:	429a      	cmp	r2, r3
 800a722:	d10a      	bne.n	800a73a <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	69d9      	ldr	r1, [r3, #28]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a72c:	461a      	mov	r2, r3
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7f7 f8ac 	bl	800188c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a740:	f003 0310 	and.w	r3, r3, #16
 800a744:	2b00      	cmp	r3, #0
 800a746:	d134      	bne.n	800a7b2 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d00a      	beq.n	800a766 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	69d9      	ldr	r1, [r3, #28]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a758:	461a      	mov	r2, r3
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7f7 f896 	bl	800188c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f022 0201 	bic.w	r2, r2, #1
 800a774:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a77a:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a780:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f003 0303 	and.w	r3, r3, #3
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	d103      	bne.n	800a7aa <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f7fe fc43 	bl	800902e <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800a7a8:	e00c      	b.n	800a7c4 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7f7 f88a 	bl	80018c4 <HAL_JPEG_EncodeCpltCallback>
}
 800a7b0:	e008      	b.n	800a7c4 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d102      	bne.n	800a7c4 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 f804 	bl	800a7cc <JPEG_DMA_PollResidualData>
}
 800a7c4:	bf00      	nop
 800a7c6:	3710      	adds	r7, #16
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b086      	sub	sp, #24
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800a7d4:	2310      	movs	r3, #16
 800a7d6:	617b      	str	r3, [r7, #20]
 800a7d8:	e04f      	b.n	800a87a <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d146      	bne.n	800a874 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ec:	f003 0310 	and.w	r3, r3, #16
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d03f      	beq.n	800a874 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7fa:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	69da      	ldr	r2, [r3, #28]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a804:	4413      	add	r3, r2
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	b2d2      	uxtb	r2, r2
 800a80a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	0a19      	lsrs	r1, r3, #8
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	69da      	ldr	r2, [r3, #28]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a818:	3301      	adds	r3, #1
 800a81a:	4413      	add	r3, r2
 800a81c:	b2ca      	uxtb	r2, r1
 800a81e:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	0c19      	lsrs	r1, r3, #16
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	69da      	ldr	r2, [r3, #28]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a82c:	3302      	adds	r3, #2
 800a82e:	4413      	add	r3, r2
 800a830:	b2ca      	uxtb	r2, r1
 800a832:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	0e19      	lsrs	r1, r3, #24
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	69da      	ldr	r2, [r3, #28]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a840:	3303      	adds	r3, #3
 800a842:	4413      	add	r3, r2
 800a844:	b2ca      	uxtb	r2, r1
 800a846:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a84c:	1d1a      	adds	r2, r3, #4
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d10a      	bne.n	800a874 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	69d9      	ldr	r1, [r3, #28]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a866:	461a      	mov	r2, r3
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f7f7 f80f 	bl	800188c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	3b01      	subs	r3, #1
 800a878:	617b      	str	r3, [r7, #20]
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d1ac      	bne.n	800a7da <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a884:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a88c:	f003 0310 	and.w	r3, r3, #16
 800a890:	2b00      	cmp	r3, #0
 800a892:	d004      	beq.n	800a89e <JPEG_DMA_PollResidualData+0xd2>
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d133      	bne.n	800a906 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f022 0201 	bic.w	r2, r2, #1
 800a8ac:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00a      	beq.n	800a8cc <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	69d9      	ldr	r1, [r3, #28]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8be:	461a      	mov	r2, r3
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f7f6 ffe3 	bl	800188c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8d0:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8d6:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	f003 0303 	and.w	r3, r3, #3
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d103      	bne.n	800a900 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f7fe fb98 	bl	800902e <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800a8fe:	e002      	b.n	800a906 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f7f6 ffdf 	bl	80018c4 <HAL_JPEG_EncodeCpltCallback>
}
 800a906:	bf00      	nop
 800a908:	3718      	adds	r7, #24
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800a90e:	b590      	push	{r4, r7, lr}
 800a910:	b087      	sub	sp, #28
 800a912:	af02      	add	r7, sp, #8
 800a914:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a91a:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a92a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a930:	f248 030c 	movw	r3, #32780	@ 0x800c
 800a934:	4013      	ands	r3, r2
 800a936:	2b0c      	cmp	r3, #12
 800a938:	d17c      	bne.n	800aa34 <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a93e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a940:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	695b      	ldr	r3, [r3, #20]
 800a94c:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800a950:	1ad2      	subs	r2, r2, r3
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	6a1b      	ldr	r3, [r3, #32]
 800a95a:	4619      	mov	r1, r3
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f7f6 ff63 	bl	8001828 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a966:	68ba      	ldr	r2, [r7, #8]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d81f      	bhi.n	800a9ac <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10d      	bne.n	800a98e <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a976:	f043 0204 	orr.w	r2, r3, #4
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2206      	movs	r2, #6
 800a982:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f7f6 ffb0 	bl	80018ec <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800a98c:	e052      	b.n	800aa34 <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a996:	68b9      	ldr	r1, [r7, #8]
 800a998:	fbb3 f1f1 	udiv	r1, r3, r1
 800a99c:	68b8      	ldr	r0, [r7, #8]
 800a99e:	fb00 f101 	mul.w	r1, r0, r1
 800a9a2:	1a5b      	subs	r3, r3, r1
 800a9a4:	1ad2      	subs	r2, r2, r3
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	629a      	str	r2, [r3, #40]	@ 0x28
 800a9aa:	e010      	b.n	800a9ce <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00c      	beq.n	800a9ce <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9b8:	f003 0303 	and.w	r3, r3, #3
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d006      	beq.n	800a9ce <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9c4:	089b      	lsrs	r3, r3, #2
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	009a      	lsls	r2, r3, #2
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d124      	bne.n	800aa24 <JPEG_MDMAInCpltCallback+0x116>
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d020      	beq.n	800aa24 <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	699b      	ldr	r3, [r3, #24]
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	3340      	adds	r3, #64	@ 0x40
 800a9f2:	461c      	mov	r4, r3
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	9200      	str	r2, [sp, #0]
 800a9fc:	4622      	mov	r2, r4
 800a9fe:	f000 f9b5 	bl	800ad6c <HAL_MDMA_Start_IT>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00d      	beq.n	800aa24 <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa0c:	f043 0204 	orr.w	r2, r3, #4
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2206      	movs	r2, #6
 800aa18:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f7f6 ff65 	bl	80018ec <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800aa22:	e007      	b.n	800aa34 <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800aa32:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 800aa34:	3714      	adds	r7, #20
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd90      	pop	{r4, r7, pc}

0800aa3a <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800aa3a:	b590      	push	{r4, r7, lr}
 800aa3c:	b087      	sub	sp, #28
 800aa3e:	af02      	add	r7, sp, #8
 800aa40:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa46:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800aa56:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aa5c:	f248 030c 	movw	r3, #32780	@ 0x800c
 800aa60:	4013      	ands	r3, r2
 800aa62:	2b0c      	cmp	r3, #12
 800aa64:	d147      	bne.n	800aaf6 <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa6c:	f003 0320 	and.w	r3, r3, #32
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d138      	bne.n	800aae6 <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	695b      	ldr	r3, [r3, #20]
 800aa7e:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800aa82:	1ad2      	subs	r2, r2, r3
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	69d9      	ldr	r1, [r3, #28]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa90:	461a      	mov	r2, r3
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f7f6 fefa 	bl	800188c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d120      	bne.n	800aae6 <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	3344      	adds	r3, #68	@ 0x44
 800aaae:	4619      	mov	r1, r3
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	69db      	ldr	r3, [r3, #28]
 800aab4:	461c      	mov	r4, r3
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaba:	2201      	movs	r2, #1
 800aabc:	9200      	str	r2, [sp, #0]
 800aabe:	4622      	mov	r2, r4
 800aac0:	f000 f954 	bl	800ad6c <HAL_MDMA_Start_IT>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d00d      	beq.n	800aae6 <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aace:	f043 0204 	orr.w	r2, r3, #4
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2206      	movs	r2, #6
 800aada:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f7f6 ff04 	bl	80018ec <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800aae4:	e007      	b.n	800aaf6 <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800aaf4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800aaf6:	3714      	adds	r7, #20
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd90      	pop	{r4, r7, pc}

0800aafc <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab08:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f022 0201 	bic.w	r2, r2, #1
 800ab18:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800ab28:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab36:	f043 0204 	orr.w	r2, r3, #4
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f7f6 fed4 	bl	80018ec <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800ab44:	bf00      	nop
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab58:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d002      	beq.n	800ab6c <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f7ff fdc7 	bl	800a6fa <JPEG_DMA_EndProcess>
  }
}
 800ab6c:	bf00      	nop
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b08b      	sub	sp, #44	@ 0x2c
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	3350      	adds	r3, #80	@ 0x50
 800ab86:	61bb      	str	r3, [r7, #24]

  i = 0;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800ab8c:	e042      	b.n	800ac14 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800ab94:	2300      	movs	r3, #0
 800ab96:	61fb      	str	r3, [r7, #28]
 800ab98:	e033      	b.n	800ac02 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	00db      	lsls	r3, r3, #3
 800ab9e:	697a      	ldr	r2, [r7, #20]
 800aba0:	fa22 f303 	lsr.w	r3, r2, r3
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d103      	bne.n	800abb6 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800abae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb0:	3364      	adds	r3, #100	@ 0x64
 800abb2:	627b      	str	r3, [r7, #36]	@ 0x24
 800abb4:	e022      	b.n	800abfc <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	2264      	movs	r2, #100	@ 0x64
 800abba:	fb02 f303 	mul.w	r3, r2, r3
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800abc2:	6a38      	ldr	r0, [r7, #32]
 800abc4:	69f9      	ldr	r1, [r7, #28]
 800abc6:	4401      	add	r1, r0
 800abc8:	4818      	ldr	r0, [pc, #96]	@ (800ac2c <JPEG_GetQuality+0xb8>)
 800abca:	5c41      	ldrb	r1, [r0, r1]
 800abcc:	440a      	add	r2, r1
 800abce:	7812      	ldrb	r2, [r2, #0]
 800abd0:	fbb3 f3f2 	udiv	r3, r3, r2
 800abd4:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2b64      	cmp	r3, #100	@ 0x64
 800abda:	d807      	bhi.n	800abec <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800abe2:	085b      	lsrs	r3, r3, #1
 800abe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abe6:	4413      	add	r3, r2
 800abe8:	627b      	str	r3, [r7, #36]	@ 0x24
 800abea:	e007      	b.n	800abfc <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800abec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800abf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abf8:	4413      	add	r3, r2
 800abfa:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	3301      	adds	r3, #1
 800ac00:	61fb      	str	r3, [r7, #28]
 800ac02:	69fb      	ldr	r3, [r7, #28]
 800ac04:	2b03      	cmp	r3, #3
 800ac06:	d9c8      	bls.n	800ab9a <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800ac08:	6a3b      	ldr	r3, [r7, #32]
 800ac0a:	3304      	adds	r3, #4
 800ac0c:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	3304      	adds	r3, #4
 800ac12:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800ac14:	6a3b      	ldr	r3, [r7, #32]
 800ac16:	2b3c      	cmp	r3, #60	@ 0x3c
 800ac18:	d9b9      	bls.n	800ab8e <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800ac1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac1c:	099b      	lsrs	r3, r3, #6
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	372c      	adds	r7, #44	@ 0x2c
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	08017fd8 	.word	0x08017fd8

0800ac30 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ac38:	f7f8 f808 	bl	8002c4c <HAL_GetTick>
 800ac3c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d101      	bne.n	800ac48 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	e03b      	b.n	800acc0 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2202      	movs	r2, #2
 800ac54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	68da      	ldr	r2, [r3, #12]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f022 0201 	bic.w	r2, r2, #1
 800ac66:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ac68:	e00f      	b.n	800ac8a <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800ac6a:	f7f7 ffef 	bl	8002c4c <HAL_GetTick>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	1ad3      	subs	r3, r2, r3
 800ac74:	2b05      	cmp	r3, #5
 800ac76:	d908      	bls.n	800ac8a <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2240      	movs	r2, #64	@ 0x40
 800ac7c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2203      	movs	r2, #3
 800ac82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	e01a      	b.n	800acc0 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	f003 0301 	and.w	r3, r3, #1
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d1e8      	bne.n	800ac6a <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 fad3 	bl	800b244 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2201      	movs	r2, #1
 800acba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3710      	adds	r7, #16
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800acc8:	b480      	push	{r7}
 800acca:	b087      	sub	sp, #28
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800acd4:	2300      	movs	r3, #0
 800acd6:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d101      	bne.n	800ace2 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	e03e      	b.n	800ad60 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d101      	bne.n	800acf0 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800acec:	2302      	movs	r3, #2
 800acee:	e037      	b.n	800ad60 <HAL_MDMA_ConfigPostRequestMask+0x98>
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d126      	bne.n	800ad52 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d11c      	bne.n	800ad4c <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	68ba      	ldr	r2, [r7, #8]
 800ad18:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d108      	bne.n	800ad3a <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	691a      	ldr	r2, [r3, #16]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ad36:	611a      	str	r2, [r3, #16]
 800ad38:	e00d      	b.n	800ad56 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	691a      	ldr	r2, [r3, #16]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ad48:	611a      	str	r2, [r3, #16]
 800ad4a:	e004      	b.n	800ad56 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	75fb      	strb	r3, [r7, #23]
 800ad50:	e001      	b.n	800ad56 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ad5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	371c      	adds	r7, #28
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b086      	sub	sp, #24
 800ad70:	af02      	add	r7, sp, #8
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
 800ad78:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d101      	bne.n	800ad84 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ad80:	2301      	movs	r3, #1
 800ad82:	e070      	b.n	800ae66 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d101      	bne.n	800ad92 <HAL_MDMA_Start_IT+0x26>
 800ad8e:	2302      	movs	r3, #2
 800ad90:	e069      	b.n	800ae66 <HAL_MDMA_Start_IT+0xfa>
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2201      	movs	r2, #1
 800ad96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d158      	bne.n	800ae58 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2202      	movs	r2, #2
 800adaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2200      	movs	r2, #0
 800adb2:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	68da      	ldr	r2, [r3, #12]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f022 0201 	bic.w	r2, r2, #1
 800adc2:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	9300      	str	r3, [sp, #0]
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	68b9      	ldr	r1, [r7, #8]
 800adce:	68f8      	ldr	r0, [r7, #12]
 800add0:	f000 f9c8 	bl	800b164 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	68da      	ldr	r2, [r3, #12]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f042 0206 	orr.w	r2, r2, #6
 800ade2:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d007      	beq.n	800adfc <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	68da      	ldr	r2, [r3, #12]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f042 0210 	orr.w	r2, r2, #16
 800adfa:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d007      	beq.n	800ae14 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	68da      	ldr	r2, [r3, #12]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f042 0208 	orr.w	r2, r2, #8
 800ae12:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d007      	beq.n	800ae2c <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	68da      	ldr	r2, [r3, #12]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f042 0220 	orr.w	r2, r2, #32
 800ae2a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	68da      	ldr	r2, [r3, #12]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f042 0201 	orr.w	r2, r2, #1
 800ae3a:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae44:	d10e      	bne.n	800ae64 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	68da      	ldr	r2, [r3, #12]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ae54:	60da      	str	r2, [r3, #12]
 800ae56:	e005      	b.n	800ae64 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 800ae60:	2302      	movs	r3, #2
 800ae62:	e000      	b.n	800ae66 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800ae6e:	b480      	push	{r7}
 800ae70:	b083      	sub	sp, #12
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d101      	bne.n	800ae80 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e017      	b.n	800aeb0 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae86:	b2db      	uxtb	r3, r3
 800ae88:	2b02      	cmp	r3, #2
 800ae8a:	d004      	beq.n	800ae96 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2280      	movs	r2, #128	@ 0x80
 800ae90:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800ae92:	2301      	movs	r3, #1
 800ae94:	e00c      	b.n	800aeb0 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2204      	movs	r2, #4
 800ae9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	68da      	ldr	r2, [r3, #12]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f022 0201 	bic.w	r2, r2, #1
 800aeac:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800aeae:	2300      	movs	r3, #0
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	370c      	adds	r7, #12
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b086      	sub	sp, #24
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800aec4:	2300      	movs	r3, #0
 800aec6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800aec8:	4b91      	ldr	r3, [pc, #580]	@ (800b110 <HAL_MDMA_IRQHandler+0x254>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a91      	ldr	r2, [pc, #580]	@ (800b114 <HAL_MDMA_IRQHandler+0x258>)
 800aece:	fba2 2303 	umull	r2, r3, r2, r3
 800aed2:	0a9b      	lsrs	r3, r3, #10
 800aed4:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	461a      	mov	r2, r3
 800aedc:	4b8e      	ldr	r3, [pc, #568]	@ (800b118 <HAL_MDMA_IRQHandler+0x25c>)
 800aede:	4413      	add	r3, r2
 800aee0:	099b      	lsrs	r3, r3, #6
 800aee2:	f003 031f 	and.w	r3, r3, #31
 800aee6:	2201      	movs	r2, #1
 800aee8:	fa02 f303 	lsl.w	r3, r2, r3
 800aeec:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800aeee:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	4013      	ands	r3, r2
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f000 812d 	beq.w	800b158 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f003 0301 	and.w	r3, r3, #1
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d054      	beq.n	800afb6 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	f003 0302 	and.w	r3, r3, #2
 800af16:	2b00      	cmp	r3, #0
 800af18:	d04d      	beq.n	800afb6 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68da      	ldr	r2, [r3, #12]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f022 0202 	bic.w	r2, r2, #2
 800af28:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d106      	bne.n	800af4a <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af40:	f043 0201 	orr.w	r2, r3, #1
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	669a      	str	r2, [r3, #104]	@ 0x68
 800af48:	e005      	b.n	800af56 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af4e:	f043 0202 	orr.w	r2, r3, #2
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d005      	beq.n	800af6c <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af64:	f043 0204 	orr.w	r2, r3, #4
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af72:	2b00      	cmp	r3, #0
 800af74:	d005      	beq.n	800af82 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af7a:	f043 0208 	orr.w	r2, r3, #8
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d005      	beq.n	800af98 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af90:	f043 0210 	orr.w	r2, r3, #16
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d005      	beq.n	800afae <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800afa6:	f043 0220 	orr.w	r2, r3, #32
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2201      	movs	r2, #1
 800afb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f003 0310 	and.w	r3, r3, #16
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d012      	beq.n	800afea <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	f003 0320 	and.w	r3, r3, #32
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d00b      	beq.n	800afea <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2210      	movs	r2, #16
 800afd8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d003      	beq.n	800afea <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f003 0308 	and.w	r3, r3, #8
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d012      	beq.n	800b01e <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	f003 0310 	and.w	r3, r3, #16
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00b      	beq.n	800b01e <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2208      	movs	r2, #8
 800b00c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b012:	2b00      	cmp	r3, #0
 800b014:	d003      	beq.n	800b01e <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f003 0304 	and.w	r3, r3, #4
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d012      	beq.n	800b052 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	68db      	ldr	r3, [r3, #12]
 800b032:	f003 0308 	and.w	r3, r3, #8
 800b036:	2b00      	cmp	r3, #0
 800b038:	d00b      	beq.n	800b052 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	2204      	movs	r2, #4
 800b040:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b046:	2b00      	cmp	r3, #0
 800b048:	d003      	beq.n	800b052 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f003 0302 	and.w	r3, r3, #2
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d039      	beq.n	800b0d4 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	f003 0304 	and.w	r3, r3, #4
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d032      	beq.n	800b0d4 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	68da      	ldr	r2, [r3, #12]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800b07c:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b084:	b2db      	uxtb	r3, r3
 800b086:	2b04      	cmp	r3, #4
 800b088:	d110      	bne.n	800b0ac <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2201      	movs	r2, #1
 800b096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d05c      	beq.n	800b15c <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	4798      	blx	r3
        }
        return;
 800b0aa:	e057      	b.n	800b15c <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2202      	movs	r2, #2
 800b0b2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d003      	beq.n	800b0d4 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d040      	beq.n	800b15e <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2204      	movs	r2, #4
 800b0e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	68da      	ldr	r2, [r3, #12]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f022 0201 	bic.w	r2, r2, #1
 800b0f2:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	60bb      	str	r3, [r7, #8]
 800b0fa:	697a      	ldr	r2, [r7, #20]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d30d      	bcc.n	800b11c <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	68db      	ldr	r3, [r3, #12]
 800b106:	f003 0301 	and.w	r3, r3, #1
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d1f2      	bne.n	800b0f4 <HAL_MDMA_IRQHandler+0x238>
 800b10e:	e006      	b.n	800b11e <HAL_MDMA_IRQHandler+0x262>
 800b110:	24000018 	.word	0x24000018
 800b114:	1b4e81b5 	.word	0x1b4e81b5
 800b118:	adffffc0 	.word	0xadffffc0
        break;
 800b11c:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	f003 0301 	and.w	r3, r3, #1
 800b130:	2b00      	cmp	r3, #0
 800b132:	d004      	beq.n	800b13e <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2203      	movs	r2, #3
 800b138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b13c:	e003      	b.n	800b146 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2201      	movs	r2, #1
 800b142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d007      	beq.n	800b15e <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	4798      	blx	r3
 800b156:	e002      	b.n	800b15e <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800b158:	bf00      	nop
 800b15a:	e000      	b.n	800b15e <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800b15c:	bf00      	nop
    }
  }
}
 800b15e:	3718      	adds	r7, #24
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800b164:	b480      	push	{r7}
 800b166:	b087      	sub	sp, #28
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	607a      	str	r2, [r7, #4]
 800b170:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	695a      	ldr	r2, [r3, #20]
 800b178:	4b31      	ldr	r3, [pc, #196]	@ (800b240 <MDMA_SetConfig+0xdc>)
 800b17a:	4013      	ands	r3, r2
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	f3c2 0110 	ubfx	r1, r2, #0, #17
 800b182:	68fa      	ldr	r2, [r7, #12]
 800b184:	6812      	ldr	r2, [r2, #0]
 800b186:	430b      	orrs	r3, r1
 800b188:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	695b      	ldr	r3, [r3, #20]
 800b190:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800b194:	6a3b      	ldr	r3, [r7, #32]
 800b196:	3b01      	subs	r3, #1
 800b198:	051a      	lsls	r2, r3, #20
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	430a      	orrs	r2, r1
 800b1a0:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	221f      	movs	r2, #31
 800b1a8:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800b1c0:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1c8:	d002      	beq.n	800b1d0 <MDMA_SetConfig+0x6c>
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d108      	bne.n	800b1e2 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b1de:	629a      	str	r2, [r3, #40]	@ 0x28
 800b1e0:	e007      	b.n	800b1f2 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b1f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800b1f8:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b200:	d002      	beq.n	800b208 <MDMA_SetConfig+0xa4>
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d108      	bne.n	800b21a <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b216:	629a      	str	r2, [r3, #40]	@ 0x28
 800b218:	e007      	b.n	800b22a <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800b228:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b234:	bf00      	nop
 800b236:	371c      	adds	r7, #28
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr
 800b240:	fffe0000 	.word	0xfffe0000

0800b244 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800b244:	b480      	push	{r7}
 800b246:	b085      	sub	sp, #20
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	68d9      	ldr	r1, [r3, #12]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	691a      	ldr	r2, [r3, #16]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	430a      	orrs	r2, r1
 800b25a:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	695a      	ldr	r2, [r3, #20]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	699b      	ldr	r3, [r3, #24]
 800b264:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b26a:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6a1b      	ldr	r3, [r3, #32]
 800b270:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800b276:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b27c:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800b282:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b288:	3b01      	subs	r3, #1
 800b28a:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800b28c:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800b298:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b29a:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2a4:	d107      	bne.n	800b2b6 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	691a      	ldr	r2, [r3, #16]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800b2b4:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	da11      	bge.n	800b2ea <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	695a      	ldr	r2, [r3, #20]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800b2d4:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2da:	425b      	negs	r3, r3
 800b2dc:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	68fa      	ldr	r2, [r7, #12]
 800b2e4:	b292      	uxth	r2, r2
 800b2e6:	621a      	str	r2, [r3, #32]
 800b2e8:	e006      	b.n	800b2f8 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	b292      	uxth	r2, r2
 800b2f6:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	da15      	bge.n	800b32c <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	695a      	ldr	r2, [r3, #20]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800b30e:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b314:	425b      	negs	r3, r3
 800b316:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	6a19      	ldr	r1, [r3, #32]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	041a      	lsls	r2, r3, #16
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	430a      	orrs	r2, r1
 800b328:	621a      	str	r2, [r3, #32]
 800b32a:	e009      	b.n	800b340 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	6a19      	ldr	r1, [r3, #32]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b336:	041a      	lsls	r2, r3, #16
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	430a      	orrs	r2, r1
 800b33e:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b348:	d006      	beq.n	800b358 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	685a      	ldr	r2, [r3, #4]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	b2d2      	uxtb	r2, r2
 800b354:	629a      	str	r2, [r3, #40]	@ 0x28
 800b356:	e003      	b.n	800b360 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2200      	movs	r2, #0
 800b35e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	2200      	movs	r2, #0
 800b366:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b368:	bf00      	nop
 800b36a:	3714      	adds	r7, #20
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr

0800b374 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b086      	sub	sp, #24
 800b378:	af02      	add	r7, sp, #8
 800b37a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d101      	bne.n	800b386 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	e0fe      	b.n	800b584 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d106      	bne.n	800b3a0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2200      	movs	r2, #0
 800b396:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f00b fc4e 	bl	8016c3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2203      	movs	r2, #3
 800b3a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f007 fe0e 	bl	8012fce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6818      	ldr	r0, [r3, #0]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	7c1a      	ldrb	r2, [r3, #16]
 800b3ba:	f88d 2000 	strb.w	r2, [sp]
 800b3be:	3304      	adds	r3, #4
 800b3c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b3c2:	f007 fcdf 	bl	8012d84 <USB_CoreInit>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d005      	beq.n	800b3d8 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2202      	movs	r2, #2
 800b3d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e0d5      	b.n	800b584 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2100      	movs	r1, #0
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f007 fe06 	bl	8012ff0 <USB_SetCurrentMode>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d005      	beq.n	800b3f6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2202      	movs	r2, #2
 800b3ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	e0c6      	b.n	800b584 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	73fb      	strb	r3, [r7, #15]
 800b3fa:	e04a      	b.n	800b492 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b3fc:	7bfa      	ldrb	r2, [r7, #15]
 800b3fe:	6879      	ldr	r1, [r7, #4]
 800b400:	4613      	mov	r3, r2
 800b402:	00db      	lsls	r3, r3, #3
 800b404:	4413      	add	r3, r2
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	440b      	add	r3, r1
 800b40a:	3315      	adds	r3, #21
 800b40c:	2201      	movs	r2, #1
 800b40e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b410:	7bfa      	ldrb	r2, [r7, #15]
 800b412:	6879      	ldr	r1, [r7, #4]
 800b414:	4613      	mov	r3, r2
 800b416:	00db      	lsls	r3, r3, #3
 800b418:	4413      	add	r3, r2
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	440b      	add	r3, r1
 800b41e:	3314      	adds	r3, #20
 800b420:	7bfa      	ldrb	r2, [r7, #15]
 800b422:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b424:	7bfa      	ldrb	r2, [r7, #15]
 800b426:	7bfb      	ldrb	r3, [r7, #15]
 800b428:	b298      	uxth	r0, r3
 800b42a:	6879      	ldr	r1, [r7, #4]
 800b42c:	4613      	mov	r3, r2
 800b42e:	00db      	lsls	r3, r3, #3
 800b430:	4413      	add	r3, r2
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	440b      	add	r3, r1
 800b436:	332e      	adds	r3, #46	@ 0x2e
 800b438:	4602      	mov	r2, r0
 800b43a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b43c:	7bfa      	ldrb	r2, [r7, #15]
 800b43e:	6879      	ldr	r1, [r7, #4]
 800b440:	4613      	mov	r3, r2
 800b442:	00db      	lsls	r3, r3, #3
 800b444:	4413      	add	r3, r2
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	440b      	add	r3, r1
 800b44a:	3318      	adds	r3, #24
 800b44c:	2200      	movs	r2, #0
 800b44e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b450:	7bfa      	ldrb	r2, [r7, #15]
 800b452:	6879      	ldr	r1, [r7, #4]
 800b454:	4613      	mov	r3, r2
 800b456:	00db      	lsls	r3, r3, #3
 800b458:	4413      	add	r3, r2
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	440b      	add	r3, r1
 800b45e:	331c      	adds	r3, #28
 800b460:	2200      	movs	r2, #0
 800b462:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b464:	7bfa      	ldrb	r2, [r7, #15]
 800b466:	6879      	ldr	r1, [r7, #4]
 800b468:	4613      	mov	r3, r2
 800b46a:	00db      	lsls	r3, r3, #3
 800b46c:	4413      	add	r3, r2
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	440b      	add	r3, r1
 800b472:	3320      	adds	r3, #32
 800b474:	2200      	movs	r2, #0
 800b476:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b478:	7bfa      	ldrb	r2, [r7, #15]
 800b47a:	6879      	ldr	r1, [r7, #4]
 800b47c:	4613      	mov	r3, r2
 800b47e:	00db      	lsls	r3, r3, #3
 800b480:	4413      	add	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	440b      	add	r3, r1
 800b486:	3324      	adds	r3, #36	@ 0x24
 800b488:	2200      	movs	r2, #0
 800b48a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
 800b48e:	3301      	adds	r3, #1
 800b490:	73fb      	strb	r3, [r7, #15]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	791b      	ldrb	r3, [r3, #4]
 800b496:	7bfa      	ldrb	r2, [r7, #15]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d3af      	bcc.n	800b3fc <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b49c:	2300      	movs	r3, #0
 800b49e:	73fb      	strb	r3, [r7, #15]
 800b4a0:	e044      	b.n	800b52c <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b4a2:	7bfa      	ldrb	r2, [r7, #15]
 800b4a4:	6879      	ldr	r1, [r7, #4]
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	00db      	lsls	r3, r3, #3
 800b4aa:	4413      	add	r3, r2
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	440b      	add	r3, r1
 800b4b0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b4b8:	7bfa      	ldrb	r2, [r7, #15]
 800b4ba:	6879      	ldr	r1, [r7, #4]
 800b4bc:	4613      	mov	r3, r2
 800b4be:	00db      	lsls	r3, r3, #3
 800b4c0:	4413      	add	r3, r2
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	440b      	add	r3, r1
 800b4c6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800b4ca:	7bfa      	ldrb	r2, [r7, #15]
 800b4cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b4ce:	7bfa      	ldrb	r2, [r7, #15]
 800b4d0:	6879      	ldr	r1, [r7, #4]
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	00db      	lsls	r3, r3, #3
 800b4d6:	4413      	add	r3, r2
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	440b      	add	r3, r1
 800b4dc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b4e4:	7bfa      	ldrb	r2, [r7, #15]
 800b4e6:	6879      	ldr	r1, [r7, #4]
 800b4e8:	4613      	mov	r3, r2
 800b4ea:	00db      	lsls	r3, r3, #3
 800b4ec:	4413      	add	r3, r2
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	440b      	add	r3, r1
 800b4f2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b4fa:	7bfa      	ldrb	r2, [r7, #15]
 800b4fc:	6879      	ldr	r1, [r7, #4]
 800b4fe:	4613      	mov	r3, r2
 800b500:	00db      	lsls	r3, r3, #3
 800b502:	4413      	add	r3, r2
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	440b      	add	r3, r1
 800b508:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b50c:	2200      	movs	r2, #0
 800b50e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b510:	7bfa      	ldrb	r2, [r7, #15]
 800b512:	6879      	ldr	r1, [r7, #4]
 800b514:	4613      	mov	r3, r2
 800b516:	00db      	lsls	r3, r3, #3
 800b518:	4413      	add	r3, r2
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	440b      	add	r3, r1
 800b51e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800b522:	2200      	movs	r2, #0
 800b524:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b526:	7bfb      	ldrb	r3, [r7, #15]
 800b528:	3301      	adds	r3, #1
 800b52a:	73fb      	strb	r3, [r7, #15]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	791b      	ldrb	r3, [r3, #4]
 800b530:	7bfa      	ldrb	r2, [r7, #15]
 800b532:	429a      	cmp	r2, r3
 800b534:	d3b5      	bcc.n	800b4a2 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6818      	ldr	r0, [r3, #0]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	7c1a      	ldrb	r2, [r3, #16]
 800b53e:	f88d 2000 	strb.w	r2, [sp]
 800b542:	3304      	adds	r3, #4
 800b544:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b546:	f007 fd9f 	bl	8013088 <USB_DevInit>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d005      	beq.n	800b55c <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2202      	movs	r2, #2
 800b554:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b558:	2301      	movs	r3, #1
 800b55a:	e013      	b.n	800b584 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2201      	movs	r2, #1
 800b566:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	7b1b      	ldrb	r3, [r3, #12]
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d102      	bne.n	800b578 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f001 f96e 	bl	800c854 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	4618      	mov	r0, r3
 800b57e:	f008 fde2 	bl	8014146 <USB_DevDisconnect>

  return HAL_OK;
 800b582:	2300      	movs	r3, #0
}
 800b584:	4618      	mov	r0, r3
 800b586:	3710      	adds	r7, #16
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d101      	bne.n	800b5a8 <HAL_PCD_Start+0x1c>
 800b5a4:	2302      	movs	r3, #2
 800b5a6:	e022      	b.n	800b5ee <HAL_PCD_Start+0x62>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d009      	beq.n	800b5d0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d105      	bne.n	800b5d0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f007 fce9 	bl	8012fac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f008 fd90 	bl	8014104 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b5ec:	2300      	movs	r3, #0
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b5f6:	b590      	push	{r4, r7, lr}
 800b5f8:	b08d      	sub	sp, #52	@ 0x34
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b604:	6a3b      	ldr	r3, [r7, #32]
 800b606:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4618      	mov	r0, r3
 800b60e:	f008 fe4e 	bl	80142ae <USB_GetMode>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	f040 84b9 	bne.w	800bf8c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4618      	mov	r0, r3
 800b620:	f008 fdb2 	bl	8014188 <USB_ReadInterrupts>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	f000 84af 	beq.w	800bf8a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	0a1b      	lsrs	r3, r3, #8
 800b636:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4618      	mov	r0, r3
 800b646:	f008 fd9f 	bl	8014188 <USB_ReadInterrupts>
 800b64a:	4603      	mov	r3, r0
 800b64c:	f003 0302 	and.w	r3, r3, #2
 800b650:	2b02      	cmp	r3, #2
 800b652:	d107      	bne.n	800b664 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	695a      	ldr	r2, [r3, #20]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f002 0202 	and.w	r2, r2, #2
 800b662:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4618      	mov	r0, r3
 800b66a:	f008 fd8d 	bl	8014188 <USB_ReadInterrupts>
 800b66e:	4603      	mov	r3, r0
 800b670:	f003 0310 	and.w	r3, r3, #16
 800b674:	2b10      	cmp	r3, #16
 800b676:	d161      	bne.n	800b73c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	699a      	ldr	r2, [r3, #24]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f022 0210 	bic.w	r2, r2, #16
 800b686:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800b688:	6a3b      	ldr	r3, [r7, #32]
 800b68a:	6a1b      	ldr	r3, [r3, #32]
 800b68c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	f003 020f 	and.w	r2, r3, #15
 800b694:	4613      	mov	r3, r2
 800b696:	00db      	lsls	r3, r3, #3
 800b698:	4413      	add	r3, r2
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	4413      	add	r3, r2
 800b6a4:	3304      	adds	r3, #4
 800b6a6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800b6ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b6b2:	d124      	bne.n	800b6fe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b6b4:	69ba      	ldr	r2, [r7, #24]
 800b6b6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800b6ba:	4013      	ands	r3, r2
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d035      	beq.n	800b72c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b6c4:	69bb      	ldr	r3, [r7, #24]
 800b6c6:	091b      	lsrs	r3, r3, #4
 800b6c8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b6ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	6a38      	ldr	r0, [r7, #32]
 800b6d4:	f008 fbc4 	bl	8013e60 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	68da      	ldr	r2, [r3, #12]
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	091b      	lsrs	r3, r3, #4
 800b6e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b6e4:	441a      	add	r2, r3
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	695a      	ldr	r2, [r3, #20]
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	091b      	lsrs	r3, r3, #4
 800b6f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b6f6:	441a      	add	r2, r3
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	615a      	str	r2, [r3, #20]
 800b6fc:	e016      	b.n	800b72c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800b704:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b708:	d110      	bne.n	800b72c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b710:	2208      	movs	r2, #8
 800b712:	4619      	mov	r1, r3
 800b714:	6a38      	ldr	r0, [r7, #32]
 800b716:	f008 fba3 	bl	8013e60 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	695a      	ldr	r2, [r3, #20]
 800b71e:	69bb      	ldr	r3, [r7, #24]
 800b720:	091b      	lsrs	r3, r3, #4
 800b722:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b726:	441a      	add	r2, r3
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	699a      	ldr	r2, [r3, #24]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f042 0210 	orr.w	r2, r2, #16
 800b73a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4618      	mov	r0, r3
 800b742:	f008 fd21 	bl	8014188 <USB_ReadInterrupts>
 800b746:	4603      	mov	r3, r0
 800b748:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b74c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b750:	f040 80a7 	bne.w	800b8a2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800b754:	2300      	movs	r3, #0
 800b756:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4618      	mov	r0, r3
 800b75e:	f008 fd26 	bl	80141ae <USB_ReadDevAllOutEpInterrupt>
 800b762:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800b764:	e099      	b.n	800b89a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b768:	f003 0301 	and.w	r3, r3, #1
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f000 808e 	beq.w	800b88e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b778:	b2d2      	uxtb	r2, r2
 800b77a:	4611      	mov	r1, r2
 800b77c:	4618      	mov	r0, r3
 800b77e:	f008 fd4a 	bl	8014216 <USB_ReadDevOutEPInterrupt>
 800b782:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	f003 0301 	and.w	r3, r3, #1
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d00c      	beq.n	800b7a8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b790:	015a      	lsls	r2, r3, #5
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	4413      	add	r3, r2
 800b796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b79a:	461a      	mov	r2, r3
 800b79c:	2301      	movs	r3, #1
 800b79e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b7a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 fed0 	bl	800c548 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	f003 0308 	and.w	r3, r3, #8
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d00c      	beq.n	800b7cc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b4:	015a      	lsls	r2, r3, #5
 800b7b6:	69fb      	ldr	r3, [r7, #28]
 800b7b8:	4413      	add	r3, r2
 800b7ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7be:	461a      	mov	r2, r3
 800b7c0:	2308      	movs	r3, #8
 800b7c2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b7c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 ffa6 	bl	800c718 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	f003 0310 	and.w	r3, r3, #16
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d008      	beq.n	800b7e8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d8:	015a      	lsls	r2, r3, #5
 800b7da:	69fb      	ldr	r3, [r7, #28]
 800b7dc:	4413      	add	r3, r2
 800b7de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	2310      	movs	r3, #16
 800b7e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	f003 0302 	and.w	r3, r3, #2
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d030      	beq.n	800b854 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b7f2:	6a3b      	ldr	r3, [r7, #32]
 800b7f4:	695b      	ldr	r3, [r3, #20]
 800b7f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7fa:	2b80      	cmp	r3, #128	@ 0x80
 800b7fc:	d109      	bne.n	800b812 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b7fe:	69fb      	ldr	r3, [r7, #28]
 800b800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	69fa      	ldr	r2, [r7, #28]
 800b808:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b80c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b810:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b814:	4613      	mov	r3, r2
 800b816:	00db      	lsls	r3, r3, #3
 800b818:	4413      	add	r3, r2
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	4413      	add	r3, r2
 800b824:	3304      	adds	r3, #4
 800b826:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	78db      	ldrb	r3, [r3, #3]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d108      	bne.n	800b842 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	2200      	movs	r2, #0
 800b834:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	4619      	mov	r1, r3
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f00b fb23 	bl	8016e88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b844:	015a      	lsls	r2, r3, #5
 800b846:	69fb      	ldr	r3, [r7, #28]
 800b848:	4413      	add	r3, r2
 800b84a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b84e:	461a      	mov	r2, r3
 800b850:	2302      	movs	r3, #2
 800b852:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	f003 0320 	and.w	r3, r3, #32
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d008      	beq.n	800b870 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b860:	015a      	lsls	r2, r3, #5
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	4413      	add	r3, r2
 800b866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b86a:	461a      	mov	r2, r3
 800b86c:	2320      	movs	r3, #32
 800b86e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b876:	2b00      	cmp	r3, #0
 800b878:	d009      	beq.n	800b88e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b87c:	015a      	lsls	r2, r3, #5
 800b87e:	69fb      	ldr	r3, [r7, #28]
 800b880:	4413      	add	r3, r2
 800b882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b886:	461a      	mov	r2, r3
 800b888:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b88c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b890:	3301      	adds	r3, #1
 800b892:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b896:	085b      	lsrs	r3, r3, #1
 800b898:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	f47f af62 	bne.w	800b766 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f008 fc6e 	bl	8014188 <USB_ReadInterrupts>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b8b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b8b6:	f040 80db 	bne.w	800ba70 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f008 fc8f 	bl	80141e2 <USB_ReadDevAllInEpInterrupt>
 800b8c4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800b8ca:	e0cd      	b.n	800ba68 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ce:	f003 0301 	and.w	r3, r3, #1
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	f000 80c2 	beq.w	800ba5c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8de:	b2d2      	uxtb	r2, r2
 800b8e0:	4611      	mov	r1, r2
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f008 fcb5 	bl	8014252 <USB_ReadDevInEPInterrupt>
 800b8e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	f003 0301 	and.w	r3, r3, #1
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d057      	beq.n	800b9a4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f6:	f003 030f 	and.w	r3, r3, #15
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b900:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b902:	69fb      	ldr	r3, [r7, #28]
 800b904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b908:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	43db      	mvns	r3, r3
 800b90e:	69f9      	ldr	r1, [r7, #28]
 800b910:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b914:	4013      	ands	r3, r2
 800b916:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b91a:	015a      	lsls	r2, r3, #5
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	4413      	add	r3, r2
 800b920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b924:	461a      	mov	r2, r3
 800b926:	2301      	movs	r3, #1
 800b928:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	799b      	ldrb	r3, [r3, #6]
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d132      	bne.n	800b998 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b932:	6879      	ldr	r1, [r7, #4]
 800b934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b936:	4613      	mov	r3, r2
 800b938:	00db      	lsls	r3, r3, #3
 800b93a:	4413      	add	r3, r2
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	440b      	add	r3, r1
 800b940:	3320      	adds	r3, #32
 800b942:	6819      	ldr	r1, [r3, #0]
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b948:	4613      	mov	r3, r2
 800b94a:	00db      	lsls	r3, r3, #3
 800b94c:	4413      	add	r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	4403      	add	r3, r0
 800b952:	331c      	adds	r3, #28
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4419      	add	r1, r3
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b95c:	4613      	mov	r3, r2
 800b95e:	00db      	lsls	r3, r3, #3
 800b960:	4413      	add	r3, r2
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	4403      	add	r3, r0
 800b966:	3320      	adds	r3, #32
 800b968:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d113      	bne.n	800b998 <HAL_PCD_IRQHandler+0x3a2>
 800b970:	6879      	ldr	r1, [r7, #4]
 800b972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b974:	4613      	mov	r3, r2
 800b976:	00db      	lsls	r3, r3, #3
 800b978:	4413      	add	r3, r2
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	440b      	add	r3, r1
 800b97e:	3324      	adds	r3, #36	@ 0x24
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d108      	bne.n	800b998 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6818      	ldr	r0, [r3, #0]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b990:	461a      	mov	r2, r3
 800b992:	2101      	movs	r1, #1
 800b994:	f008 fcbe 	bl	8014314 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	4619      	mov	r1, r3
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f00b f9ed 	bl	8016d7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	f003 0308 	and.w	r3, r3, #8
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d008      	beq.n	800b9c0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b0:	015a      	lsls	r2, r3, #5
 800b9b2:	69fb      	ldr	r3, [r7, #28]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	2308      	movs	r3, #8
 800b9be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	f003 0310 	and.w	r3, r3, #16
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d008      	beq.n	800b9dc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9cc:	015a      	lsls	r2, r3, #5
 800b9ce:	69fb      	ldr	r3, [r7, #28]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	2310      	movs	r3, #16
 800b9da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d008      	beq.n	800b9f8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e8:	015a      	lsls	r2, r3, #5
 800b9ea:	69fb      	ldr	r3, [r7, #28]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	2340      	movs	r3, #64	@ 0x40
 800b9f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	f003 0302 	and.w	r3, r3, #2
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d023      	beq.n	800ba4a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800ba02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ba04:	6a38      	ldr	r0, [r7, #32]
 800ba06:	f007 fc9d 	bl	8013344 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800ba0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba0c:	4613      	mov	r3, r2
 800ba0e:	00db      	lsls	r3, r3, #3
 800ba10:	4413      	add	r3, r2
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	3310      	adds	r3, #16
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	4413      	add	r3, r2
 800ba1a:	3304      	adds	r3, #4
 800ba1c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	78db      	ldrb	r3, [r3, #3]
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d108      	bne.n	800ba38 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	4619      	mov	r1, r3
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f00b fa3a 	bl	8016eac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800ba38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba3a:	015a      	lsls	r2, r3, #5
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	4413      	add	r3, r2
 800ba40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba44:	461a      	mov	r2, r3
 800ba46:	2302      	movs	r3, #2
 800ba48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d003      	beq.n	800ba5c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800ba54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 fcea 	bl	800c430 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5e:	3301      	adds	r3, #1
 800ba60:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800ba62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba64:	085b      	lsrs	r3, r3, #1
 800ba66:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800ba68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	f47f af2e 	bne.w	800b8cc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4618      	mov	r0, r3
 800ba76:	f008 fb87 	bl	8014188 <USB_ReadInterrupts>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba84:	d122      	bne.n	800bacc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ba86:	69fb      	ldr	r3, [r7, #28]
 800ba88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	69fa      	ldr	r2, [r7, #28]
 800ba90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba94:	f023 0301 	bic.w	r3, r3, #1
 800ba98:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d108      	bne.n	800bab6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800baac:	2100      	movs	r1, #0
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 fef4 	bl	800c89c <HAL_PCDEx_LPM_Callback>
 800bab4:	e002      	b.n	800babc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f00b f9d8 	bl	8016e6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	695a      	ldr	r2, [r3, #20]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800baca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4618      	mov	r0, r3
 800bad2:	f008 fb59 	bl	8014188 <USB_ReadInterrupts>
 800bad6:	4603      	mov	r3, r0
 800bad8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800badc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bae0:	d112      	bne.n	800bb08 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800bae2:	69fb      	ldr	r3, [r7, #28]
 800bae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bae8:	689b      	ldr	r3, [r3, #8]
 800baea:	f003 0301 	and.w	r3, r3, #1
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d102      	bne.n	800baf8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f00b f994 	bl	8016e20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	695a      	ldr	r2, [r3, #20]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800bb06:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f008 fb3b 	bl	8014188 <USB_ReadInterrupts>
 800bb12:	4603      	mov	r3, r0
 800bb14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bb1c:	d121      	bne.n	800bb62 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	695a      	ldr	r2, [r3, #20]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800bb2c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d111      	bne.n	800bb5c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb46:	089b      	lsrs	r3, r3, #2
 800bb48:	f003 020f 	and.w	r2, r3, #15
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800bb52:	2101      	movs	r1, #1
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 fea1 	bl	800c89c <HAL_PCDEx_LPM_Callback>
 800bb5a:	e002      	b.n	800bb62 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f00b f95f 	bl	8016e20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4618      	mov	r0, r3
 800bb68:	f008 fb0e 	bl	8014188 <USB_ReadInterrupts>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bb72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb76:	f040 80b7 	bne.w	800bce8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	69fa      	ldr	r2, [r7, #28]
 800bb84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bb88:	f023 0301 	bic.w	r3, r3, #1
 800bb8c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2110      	movs	r1, #16
 800bb94:	4618      	mov	r0, r3
 800bb96:	f007 fbd5 	bl	8013344 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb9e:	e046      	b.n	800bc2e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800bba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bba2:	015a      	lsls	r2, r3, #5
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	4413      	add	r3, r2
 800bba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbac:	461a      	mov	r2, r3
 800bbae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bbb2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bbb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbb6:	015a      	lsls	r2, r3, #5
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	4413      	add	r3, r2
 800bbbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbc4:	0151      	lsls	r1, r2, #5
 800bbc6:	69fa      	ldr	r2, [r7, #28]
 800bbc8:	440a      	add	r2, r1
 800bbca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bbce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bbd2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800bbd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbd6:	015a      	lsls	r2, r3, #5
 800bbd8:	69fb      	ldr	r3, [r7, #28]
 800bbda:	4413      	add	r3, r2
 800bbdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bbe6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbea:	015a      	lsls	r2, r3, #5
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	4413      	add	r3, r2
 800bbf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbf8:	0151      	lsls	r1, r2, #5
 800bbfa:	69fa      	ldr	r2, [r7, #28]
 800bbfc:	440a      	add	r2, r1
 800bbfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bc02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bc06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bc08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc0a:	015a      	lsls	r2, r3, #5
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	4413      	add	r3, r2
 800bc10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc18:	0151      	lsls	r1, r2, #5
 800bc1a:	69fa      	ldr	r2, [r7, #28]
 800bc1c:	440a      	add	r2, r1
 800bc1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bc22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bc26:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bc28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	791b      	ldrb	r3, [r3, #4]
 800bc32:	461a      	mov	r2, r3
 800bc34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d3b2      	bcc.n	800bba0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800bc3a:	69fb      	ldr	r3, [r7, #28]
 800bc3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc40:	69db      	ldr	r3, [r3, #28]
 800bc42:	69fa      	ldr	r2, [r7, #28]
 800bc44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc48:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800bc4c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	7bdb      	ldrb	r3, [r3, #15]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d016      	beq.n	800bc84 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800bc56:	69fb      	ldr	r3, [r7, #28]
 800bc58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc60:	69fa      	ldr	r2, [r7, #28]
 800bc62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc66:	f043 030b 	orr.w	r3, r3, #11
 800bc6a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc76:	69fa      	ldr	r2, [r7, #28]
 800bc78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc7c:	f043 030b 	orr.w	r3, r3, #11
 800bc80:	6453      	str	r3, [r2, #68]	@ 0x44
 800bc82:	e015      	b.n	800bcb0 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc8a:	695a      	ldr	r2, [r3, #20]
 800bc8c:	69fb      	ldr	r3, [r7, #28]
 800bc8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc92:	4619      	mov	r1, r3
 800bc94:	f242 032b 	movw	r3, #8235	@ 0x202b
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bca2:	691b      	ldr	r3, [r3, #16]
 800bca4:	69fa      	ldr	r2, [r7, #28]
 800bca6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bcaa:	f043 030b 	orr.w	r3, r3, #11
 800bcae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800bcb0:	69fb      	ldr	r3, [r7, #28]
 800bcb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	69fa      	ldr	r2, [r7, #28]
 800bcba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bcbe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800bcc2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6818      	ldr	r0, [r3, #0]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	f008 fb1e 	bl	8014314 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	695a      	ldr	r2, [r3, #20]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800bce6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4618      	mov	r0, r3
 800bcee:	f008 fa4b 	bl	8014188 <USB_ReadInterrupts>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bcf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bcfc:	d123      	bne.n	800bd46 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4618      	mov	r0, r3
 800bd04:	f008 fae2 	bl	80142cc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f007 fb92 	bl	8013436 <USB_GetDevSpeed>
 800bd12:	4603      	mov	r3, r0
 800bd14:	461a      	mov	r2, r3
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681c      	ldr	r4, [r3, #0]
 800bd1e:	f001 fd9d 	bl	800d85c <HAL_RCC_GetHCLKFreq>
 800bd22:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bd28:	461a      	mov	r2, r3
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	f007 f89c 	bl	8012e68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f00b f84c 	bl	8016dce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	695a      	ldr	r2, [r3, #20]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800bd44:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f008 fa1c 	bl	8014188 <USB_ReadInterrupts>
 800bd50:	4603      	mov	r3, r0
 800bd52:	f003 0308 	and.w	r3, r3, #8
 800bd56:	2b08      	cmp	r3, #8
 800bd58:	d10a      	bne.n	800bd70 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f00b f829 	bl	8016db2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	695a      	ldr	r2, [r3, #20]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f002 0208 	and.w	r2, r2, #8
 800bd6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4618      	mov	r0, r3
 800bd76:	f008 fa07 	bl	8014188 <USB_ReadInterrupts>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd80:	2b80      	cmp	r3, #128	@ 0x80
 800bd82:	d123      	bne.n	800bdcc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800bd84:	6a3b      	ldr	r3, [r7, #32]
 800bd86:	699b      	ldr	r3, [r3, #24]
 800bd88:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bd8c:	6a3b      	ldr	r3, [r7, #32]
 800bd8e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bd90:	2301      	movs	r3, #1
 800bd92:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd94:	e014      	b.n	800bdc0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800bd96:	6879      	ldr	r1, [r7, #4]
 800bd98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd9a:	4613      	mov	r3, r2
 800bd9c:	00db      	lsls	r3, r3, #3
 800bd9e:	4413      	add	r3, r2
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	440b      	add	r3, r1
 800bda4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d105      	bne.n	800bdba <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800bdae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f000 fb0a 	bl	800c3ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	791b      	ldrb	r3, [r3, #4]
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d3e4      	bcc.n	800bd96 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f008 f9d9 	bl	8014188 <USB_ReadInterrupts>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bddc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bde0:	d13c      	bne.n	800be5c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bde2:	2301      	movs	r3, #1
 800bde4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bde6:	e02b      	b.n	800be40 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800bde8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdea:	015a      	lsls	r2, r3, #5
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	4413      	add	r3, r2
 800bdf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bdf8:	6879      	ldr	r1, [r7, #4]
 800bdfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdfc:	4613      	mov	r3, r2
 800bdfe:	00db      	lsls	r3, r3, #3
 800be00:	4413      	add	r3, r2
 800be02:	009b      	lsls	r3, r3, #2
 800be04:	440b      	add	r3, r1
 800be06:	3318      	adds	r3, #24
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d115      	bne.n	800be3a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800be0e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800be10:	2b00      	cmp	r3, #0
 800be12:	da12      	bge.n	800be3a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800be14:	6879      	ldr	r1, [r7, #4]
 800be16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be18:	4613      	mov	r3, r2
 800be1a:	00db      	lsls	r3, r3, #3
 800be1c:	4413      	add	r3, r2
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	440b      	add	r3, r1
 800be22:	3317      	adds	r3, #23
 800be24:	2201      	movs	r2, #1
 800be26:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800be28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800be30:	b2db      	uxtb	r3, r3
 800be32:	4619      	mov	r1, r3
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 faca 	bl	800c3ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800be3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be3c:	3301      	adds	r3, #1
 800be3e:	627b      	str	r3, [r7, #36]	@ 0x24
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	791b      	ldrb	r3, [r3, #4]
 800be44:	461a      	mov	r2, r3
 800be46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be48:	4293      	cmp	r3, r2
 800be4a:	d3cd      	bcc.n	800bde8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	695a      	ldr	r2, [r3, #20]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800be5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4618      	mov	r0, r3
 800be62:	f008 f991 	bl	8014188 <USB_ReadInterrupts>
 800be66:	4603      	mov	r3, r0
 800be68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800be6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800be70:	d156      	bne.n	800bf20 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800be72:	2301      	movs	r3, #1
 800be74:	627b      	str	r3, [r7, #36]	@ 0x24
 800be76:	e045      	b.n	800bf04 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800be78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be7a:	015a      	lsls	r2, r3, #5
 800be7c:	69fb      	ldr	r3, [r7, #28]
 800be7e:	4413      	add	r3, r2
 800be80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800be88:	6879      	ldr	r1, [r7, #4]
 800be8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be8c:	4613      	mov	r3, r2
 800be8e:	00db      	lsls	r3, r3, #3
 800be90:	4413      	add	r3, r2
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	440b      	add	r3, r1
 800be96:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d12e      	bne.n	800befe <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bea0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	da2b      	bge.n	800befe <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800bea6:	69bb      	ldr	r3, [r7, #24]
 800bea8:	0c1a      	lsrs	r2, r3, #16
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800beb0:	4053      	eors	r3, r2
 800beb2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d121      	bne.n	800befe <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800beba:	6879      	ldr	r1, [r7, #4]
 800bebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bebe:	4613      	mov	r3, r2
 800bec0:	00db      	lsls	r3, r3, #3
 800bec2:	4413      	add	r3, r2
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	440b      	add	r3, r1
 800bec8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800becc:	2201      	movs	r2, #1
 800bece:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800bed0:	6a3b      	ldr	r3, [r7, #32]
 800bed2:	699b      	ldr	r3, [r3, #24]
 800bed4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bed8:	6a3b      	ldr	r3, [r7, #32]
 800beda:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800bedc:	6a3b      	ldr	r3, [r7, #32]
 800bede:	695b      	ldr	r3, [r3, #20]
 800bee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d10a      	bne.n	800befe <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800bee8:	69fb      	ldr	r3, [r7, #28]
 800beea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	69fa      	ldr	r2, [r7, #28]
 800bef2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bef6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800befa:	6053      	str	r3, [r2, #4]
            break;
 800befc:	e008      	b.n	800bf10 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800befe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf00:	3301      	adds	r3, #1
 800bf02:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	791b      	ldrb	r3, [r3, #4]
 800bf08:	461a      	mov	r2, r3
 800bf0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d3b3      	bcc.n	800be78 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	695a      	ldr	r2, [r3, #20]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800bf1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4618      	mov	r0, r3
 800bf26:	f008 f92f 	bl	8014188 <USB_ReadInterrupts>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bf30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf34:	d10a      	bne.n	800bf4c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f00a ffca 	bl	8016ed0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	695a      	ldr	r2, [r3, #20]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800bf4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4618      	mov	r0, r3
 800bf52:	f008 f919 	bl	8014188 <USB_ReadInterrupts>
 800bf56:	4603      	mov	r3, r0
 800bf58:	f003 0304 	and.w	r3, r3, #4
 800bf5c:	2b04      	cmp	r3, #4
 800bf5e:	d115      	bne.n	800bf8c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	f003 0304 	and.w	r3, r3, #4
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d002      	beq.n	800bf78 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f00a ffba 	bl	8016eec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	6859      	ldr	r1, [r3, #4]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	69ba      	ldr	r2, [r7, #24]
 800bf84:	430a      	orrs	r2, r1
 800bf86:	605a      	str	r2, [r3, #4]
 800bf88:	e000      	b.n	800bf8c <HAL_PCD_IRQHandler+0x996>
      return;
 800bf8a:	bf00      	nop
    }
  }
}
 800bf8c:	3734      	adds	r7, #52	@ 0x34
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd90      	pop	{r4, r7, pc}

0800bf92 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800bf92:	b580      	push	{r7, lr}
 800bf94:	b082      	sub	sp, #8
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d101      	bne.n	800bfac <HAL_PCD_SetAddress+0x1a>
 800bfa8:	2302      	movs	r3, #2
 800bfaa:	e012      	b.n	800bfd2 <HAL_PCD_SetAddress+0x40>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	78fa      	ldrb	r2, [r7, #3]
 800bfb8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	78fa      	ldrb	r2, [r7, #3]
 800bfc0:	4611      	mov	r1, r2
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f008 f878 	bl	80140b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3708      	adds	r7, #8
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b084      	sub	sp, #16
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
 800bfe2:	4608      	mov	r0, r1
 800bfe4:	4611      	mov	r1, r2
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	4603      	mov	r3, r0
 800bfea:	70fb      	strb	r3, [r7, #3]
 800bfec:	460b      	mov	r3, r1
 800bfee:	803b      	strh	r3, [r7, #0]
 800bff0:	4613      	mov	r3, r2
 800bff2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800bff4:	2300      	movs	r3, #0
 800bff6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	da0f      	bge.n	800c020 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c000:	78fb      	ldrb	r3, [r7, #3]
 800c002:	f003 020f 	and.w	r2, r3, #15
 800c006:	4613      	mov	r3, r2
 800c008:	00db      	lsls	r3, r3, #3
 800c00a:	4413      	add	r3, r2
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	3310      	adds	r3, #16
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	4413      	add	r3, r2
 800c014:	3304      	adds	r3, #4
 800c016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2201      	movs	r2, #1
 800c01c:	705a      	strb	r2, [r3, #1]
 800c01e:	e00f      	b.n	800c040 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c020:	78fb      	ldrb	r3, [r7, #3]
 800c022:	f003 020f 	and.w	r2, r3, #15
 800c026:	4613      	mov	r3, r2
 800c028:	00db      	lsls	r3, r3, #3
 800c02a:	4413      	add	r3, r2
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	4413      	add	r3, r2
 800c036:	3304      	adds	r3, #4
 800c038:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2200      	movs	r2, #0
 800c03e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c040:	78fb      	ldrb	r3, [r7, #3]
 800c042:	f003 030f 	and.w	r3, r3, #15
 800c046:	b2da      	uxtb	r2, r3
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800c04c:	883b      	ldrh	r3, [r7, #0]
 800c04e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	78ba      	ldrb	r2, [r7, #2]
 800c05a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	785b      	ldrb	r3, [r3, #1]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d004      	beq.n	800c06e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	461a      	mov	r2, r3
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c06e:	78bb      	ldrb	r3, [r7, #2]
 800c070:	2b02      	cmp	r3, #2
 800c072:	d102      	bne.n	800c07a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2200      	movs	r2, #0
 800c078:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c080:	2b01      	cmp	r3, #1
 800c082:	d101      	bne.n	800c088 <HAL_PCD_EP_Open+0xae>
 800c084:	2302      	movs	r3, #2
 800c086:	e00e      	b.n	800c0a6 <HAL_PCD_EP_Open+0xcc>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2201      	movs	r2, #1
 800c08c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	68f9      	ldr	r1, [r7, #12]
 800c096:	4618      	mov	r0, r3
 800c098:	f007 f9f2 	bl	8013480 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800c0a4:	7afb      	ldrb	r3, [r7, #11]
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3710      	adds	r7, #16
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b084      	sub	sp, #16
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c0ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	da0f      	bge.n	800c0e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c0c2:	78fb      	ldrb	r3, [r7, #3]
 800c0c4:	f003 020f 	and.w	r2, r3, #15
 800c0c8:	4613      	mov	r3, r2
 800c0ca:	00db      	lsls	r3, r3, #3
 800c0cc:	4413      	add	r3, r2
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	3310      	adds	r3, #16
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	4413      	add	r3, r2
 800c0d6:	3304      	adds	r3, #4
 800c0d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2201      	movs	r2, #1
 800c0de:	705a      	strb	r2, [r3, #1]
 800c0e0:	e00f      	b.n	800c102 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c0e2:	78fb      	ldrb	r3, [r7, #3]
 800c0e4:	f003 020f 	and.w	r2, r3, #15
 800c0e8:	4613      	mov	r3, r2
 800c0ea:	00db      	lsls	r3, r3, #3
 800c0ec:	4413      	add	r3, r2
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	3304      	adds	r3, #4
 800c0fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2200      	movs	r2, #0
 800c100:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c102:	78fb      	ldrb	r3, [r7, #3]
 800c104:	f003 030f 	and.w	r3, r3, #15
 800c108:	b2da      	uxtb	r2, r3
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c114:	2b01      	cmp	r3, #1
 800c116:	d101      	bne.n	800c11c <HAL_PCD_EP_Close+0x6e>
 800c118:	2302      	movs	r3, #2
 800c11a:	e00e      	b.n	800c13a <HAL_PCD_EP_Close+0x8c>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2201      	movs	r2, #1
 800c120:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	68f9      	ldr	r1, [r7, #12]
 800c12a:	4618      	mov	r0, r3
 800c12c:	f007 fa30 	bl	8013590 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2200      	movs	r2, #0
 800c134:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800c138:	2300      	movs	r3, #0
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3710      	adds	r7, #16
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}

0800c142 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c142:	b580      	push	{r7, lr}
 800c144:	b086      	sub	sp, #24
 800c146:	af00      	add	r7, sp, #0
 800c148:	60f8      	str	r0, [r7, #12]
 800c14a:	607a      	str	r2, [r7, #4]
 800c14c:	603b      	str	r3, [r7, #0]
 800c14e:	460b      	mov	r3, r1
 800c150:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c152:	7afb      	ldrb	r3, [r7, #11]
 800c154:	f003 020f 	and.w	r2, r3, #15
 800c158:	4613      	mov	r3, r2
 800c15a:	00db      	lsls	r3, r3, #3
 800c15c:	4413      	add	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c164:	68fa      	ldr	r2, [r7, #12]
 800c166:	4413      	add	r3, r2
 800c168:	3304      	adds	r3, #4
 800c16a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	683a      	ldr	r2, [r7, #0]
 800c176:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	2200      	movs	r2, #0
 800c17c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	2200      	movs	r2, #0
 800c182:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c184:	7afb      	ldrb	r3, [r7, #11]
 800c186:	f003 030f 	and.w	r3, r3, #15
 800c18a:	b2da      	uxtb	r2, r3
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	799b      	ldrb	r3, [r3, #6]
 800c194:	2b01      	cmp	r3, #1
 800c196:	d102      	bne.n	800c19e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6818      	ldr	r0, [r3, #0]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	799b      	ldrb	r3, [r3, #6]
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	6979      	ldr	r1, [r7, #20]
 800c1aa:	f007 facd 	bl	8013748 <USB_EPStartXfer>

  return HAL_OK;
 800c1ae:	2300      	movs	r3, #0
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3718      	adds	r7, #24
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b083      	sub	sp, #12
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c1c4:	78fb      	ldrb	r3, [r7, #3]
 800c1c6:	f003 020f 	and.w	r2, r3, #15
 800c1ca:	6879      	ldr	r1, [r7, #4]
 800c1cc:	4613      	mov	r3, r2
 800c1ce:	00db      	lsls	r3, r3, #3
 800c1d0:	4413      	add	r3, r2
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	440b      	add	r3, r1
 800c1d6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800c1da:	681b      	ldr	r3, [r3, #0]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	370c      	adds	r7, #12
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b086      	sub	sp, #24
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	60f8      	str	r0, [r7, #12]
 800c1f0:	607a      	str	r2, [r7, #4]
 800c1f2:	603b      	str	r3, [r7, #0]
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c1f8:	7afb      	ldrb	r3, [r7, #11]
 800c1fa:	f003 020f 	and.w	r2, r3, #15
 800c1fe:	4613      	mov	r3, r2
 800c200:	00db      	lsls	r3, r3, #3
 800c202:	4413      	add	r3, r2
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	3310      	adds	r3, #16
 800c208:	68fa      	ldr	r2, [r7, #12]
 800c20a:	4413      	add	r3, r2
 800c20c:	3304      	adds	r3, #4
 800c20e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	683a      	ldr	r2, [r7, #0]
 800c21a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	2200      	movs	r2, #0
 800c220:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	2201      	movs	r2, #1
 800c226:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c228:	7afb      	ldrb	r3, [r7, #11]
 800c22a:	f003 030f 	and.w	r3, r3, #15
 800c22e:	b2da      	uxtb	r2, r3
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	799b      	ldrb	r3, [r3, #6]
 800c238:	2b01      	cmp	r3, #1
 800c23a:	d102      	bne.n	800c242 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	6818      	ldr	r0, [r3, #0]
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	799b      	ldrb	r3, [r3, #6]
 800c24a:	461a      	mov	r2, r3
 800c24c:	6979      	ldr	r1, [r7, #20]
 800c24e:	f007 fa7b 	bl	8013748 <USB_EPStartXfer>

  return HAL_OK;
 800c252:	2300      	movs	r3, #0
}
 800c254:	4618      	mov	r0, r3
 800c256:	3718      	adds	r7, #24
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	460b      	mov	r3, r1
 800c266:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c268:	78fb      	ldrb	r3, [r7, #3]
 800c26a:	f003 030f 	and.w	r3, r3, #15
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	7912      	ldrb	r2, [r2, #4]
 800c272:	4293      	cmp	r3, r2
 800c274:	d901      	bls.n	800c27a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c276:	2301      	movs	r3, #1
 800c278:	e04f      	b.n	800c31a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c27a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	da0f      	bge.n	800c2a2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c282:	78fb      	ldrb	r3, [r7, #3]
 800c284:	f003 020f 	and.w	r2, r3, #15
 800c288:	4613      	mov	r3, r2
 800c28a:	00db      	lsls	r3, r3, #3
 800c28c:	4413      	add	r3, r2
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	3310      	adds	r3, #16
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	4413      	add	r3, r2
 800c296:	3304      	adds	r3, #4
 800c298:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2201      	movs	r2, #1
 800c29e:	705a      	strb	r2, [r3, #1]
 800c2a0:	e00d      	b.n	800c2be <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c2a2:	78fa      	ldrb	r2, [r7, #3]
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	00db      	lsls	r3, r3, #3
 800c2a8:	4413      	add	r3, r2
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	4413      	add	r3, r2
 800c2b4:	3304      	adds	r3, #4
 800c2b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c2c4:	78fb      	ldrb	r3, [r7, #3]
 800c2c6:	f003 030f 	and.w	r3, r3, #15
 800c2ca:	b2da      	uxtb	r2, r3
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d101      	bne.n	800c2de <HAL_PCD_EP_SetStall+0x82>
 800c2da:	2302      	movs	r3, #2
 800c2dc:	e01d      	b.n	800c31a <HAL_PCD_EP_SetStall+0xbe>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	68f9      	ldr	r1, [r7, #12]
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f007 fe0f 	bl	8013f10 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c2f2:	78fb      	ldrb	r3, [r7, #3]
 800c2f4:	f003 030f 	and.w	r3, r3, #15
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d109      	bne.n	800c310 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6818      	ldr	r0, [r3, #0]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	7999      	ldrb	r1, [r3, #6]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c30a:	461a      	mov	r2, r3
 800c30c:	f008 f802 	bl	8014314 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2200      	movs	r2, #0
 800c314:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c318:	2300      	movs	r3, #0
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3710      	adds	r7, #16
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c322:	b580      	push	{r7, lr}
 800c324:	b084      	sub	sp, #16
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
 800c32a:	460b      	mov	r3, r1
 800c32c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c32e:	78fb      	ldrb	r3, [r7, #3]
 800c330:	f003 030f 	and.w	r3, r3, #15
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	7912      	ldrb	r2, [r2, #4]
 800c338:	4293      	cmp	r3, r2
 800c33a:	d901      	bls.n	800c340 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c33c:	2301      	movs	r3, #1
 800c33e:	e042      	b.n	800c3c6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c340:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c344:	2b00      	cmp	r3, #0
 800c346:	da0f      	bge.n	800c368 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c348:	78fb      	ldrb	r3, [r7, #3]
 800c34a:	f003 020f 	and.w	r2, r3, #15
 800c34e:	4613      	mov	r3, r2
 800c350:	00db      	lsls	r3, r3, #3
 800c352:	4413      	add	r3, r2
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	3310      	adds	r3, #16
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	4413      	add	r3, r2
 800c35c:	3304      	adds	r3, #4
 800c35e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2201      	movs	r2, #1
 800c364:	705a      	strb	r2, [r3, #1]
 800c366:	e00f      	b.n	800c388 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c368:	78fb      	ldrb	r3, [r7, #3]
 800c36a:	f003 020f 	and.w	r2, r3, #15
 800c36e:	4613      	mov	r3, r2
 800c370:	00db      	lsls	r3, r3, #3
 800c372:	4413      	add	r3, r2
 800c374:	009b      	lsls	r3, r3, #2
 800c376:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	4413      	add	r3, r2
 800c37e:	3304      	adds	r3, #4
 800c380:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2200      	movs	r2, #0
 800c386:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2200      	movs	r2, #0
 800c38c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c38e:	78fb      	ldrb	r3, [r7, #3]
 800c390:	f003 030f 	and.w	r3, r3, #15
 800c394:	b2da      	uxtb	r2, r3
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d101      	bne.n	800c3a8 <HAL_PCD_EP_ClrStall+0x86>
 800c3a4:	2302      	movs	r3, #2
 800c3a6:	e00e      	b.n	800c3c6 <HAL_PCD_EP_ClrStall+0xa4>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	68f9      	ldr	r1, [r7, #12]
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f007 fe18 	bl	8013fec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c3c4:	2300      	movs	r3, #0
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b084      	sub	sp, #16
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800c3da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	da0c      	bge.n	800c3fc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c3e2:	78fb      	ldrb	r3, [r7, #3]
 800c3e4:	f003 020f 	and.w	r2, r3, #15
 800c3e8:	4613      	mov	r3, r2
 800c3ea:	00db      	lsls	r3, r3, #3
 800c3ec:	4413      	add	r3, r2
 800c3ee:	009b      	lsls	r3, r3, #2
 800c3f0:	3310      	adds	r3, #16
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	4413      	add	r3, r2
 800c3f6:	3304      	adds	r3, #4
 800c3f8:	60fb      	str	r3, [r7, #12]
 800c3fa:	e00c      	b.n	800c416 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c3fc:	78fb      	ldrb	r3, [r7, #3]
 800c3fe:	f003 020f 	and.w	r2, r3, #15
 800c402:	4613      	mov	r3, r2
 800c404:	00db      	lsls	r3, r3, #3
 800c406:	4413      	add	r3, r2
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	4413      	add	r3, r2
 800c412:	3304      	adds	r3, #4
 800c414:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	68f9      	ldr	r1, [r7, #12]
 800c41c:	4618      	mov	r0, r3
 800c41e:	f007 fc37 	bl	8013c90 <USB_EPStopXfer>
 800c422:	4603      	mov	r3, r0
 800c424:	72fb      	strb	r3, [r7, #11]

  return ret;
 800c426:	7afb      	ldrb	r3, [r7, #11]
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3710      	adds	r7, #16
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b08a      	sub	sp, #40	@ 0x28
 800c434:	af02      	add	r7, sp, #8
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c444:	683a      	ldr	r2, [r7, #0]
 800c446:	4613      	mov	r3, r2
 800c448:	00db      	lsls	r3, r3, #3
 800c44a:	4413      	add	r3, r2
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	3310      	adds	r3, #16
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	4413      	add	r3, r2
 800c454:	3304      	adds	r3, #4
 800c456:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	695a      	ldr	r2, [r3, #20]
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	691b      	ldr	r3, [r3, #16]
 800c460:	429a      	cmp	r2, r3
 800c462:	d901      	bls.n	800c468 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c464:	2301      	movs	r3, #1
 800c466:	e06b      	b.n	800c540 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	691a      	ldr	r2, [r3, #16]
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	695b      	ldr	r3, [r3, #20]
 800c470:	1ad3      	subs	r3, r2, r3
 800c472:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	69fa      	ldr	r2, [r7, #28]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d902      	bls.n	800c484 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	689b      	ldr	r3, [r3, #8]
 800c482:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	3303      	adds	r3, #3
 800c488:	089b      	lsrs	r3, r3, #2
 800c48a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c48c:	e02a      	b.n	800c4e4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	691a      	ldr	r2, [r3, #16]
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	695b      	ldr	r3, [r3, #20]
 800c496:	1ad3      	subs	r3, r2, r3
 800c498:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	689b      	ldr	r3, [r3, #8]
 800c49e:	69fa      	ldr	r2, [r7, #28]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d902      	bls.n	800c4aa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	689b      	ldr	r3, [r3, #8]
 800c4a8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	3303      	adds	r3, #3
 800c4ae:	089b      	lsrs	r3, r3, #2
 800c4b0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	68d9      	ldr	r1, [r3, #12]
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	b2da      	uxtb	r2, r3
 800c4ba:	69fb      	ldr	r3, [r7, #28]
 800c4bc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c4c2:	9300      	str	r3, [sp, #0]
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	6978      	ldr	r0, [r7, #20]
 800c4c8:	f007 fc8c 	bl	8013de4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	68da      	ldr	r2, [r3, #12]
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	441a      	add	r2, r3
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	695a      	ldr	r2, [r3, #20]
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	441a      	add	r2, r3
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	015a      	lsls	r2, r3, #5
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4f0:	699b      	ldr	r3, [r3, #24]
 800c4f2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c4f4:	69ba      	ldr	r2, [r7, #24]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d809      	bhi.n	800c50e <PCD_WriteEmptyTxFifo+0xde>
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	695a      	ldr	r2, [r3, #20]
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c502:	429a      	cmp	r2, r3
 800c504:	d203      	bcs.n	800c50e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	691b      	ldr	r3, [r3, #16]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d1bf      	bne.n	800c48e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	691a      	ldr	r2, [r3, #16]
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	695b      	ldr	r3, [r3, #20]
 800c516:	429a      	cmp	r2, r3
 800c518:	d811      	bhi.n	800c53e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	f003 030f 	and.w	r3, r3, #15
 800c520:	2201      	movs	r2, #1
 800c522:	fa02 f303 	lsl.w	r3, r2, r3
 800c526:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c52e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	43db      	mvns	r3, r3
 800c534:	6939      	ldr	r1, [r7, #16]
 800c536:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c53a:	4013      	ands	r3, r2
 800c53c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800c53e:	2300      	movs	r3, #0
}
 800c540:	4618      	mov	r0, r3
 800c542:	3720      	adds	r7, #32
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b088      	sub	sp, #32
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c558:	69fb      	ldr	r3, [r7, #28]
 800c55a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c55c:	69fb      	ldr	r3, [r7, #28]
 800c55e:	333c      	adds	r3, #60	@ 0x3c
 800c560:	3304      	adds	r3, #4
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	015a      	lsls	r2, r3, #5
 800c56a:	69bb      	ldr	r3, [r7, #24]
 800c56c:	4413      	add	r3, r2
 800c56e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c572:	689b      	ldr	r3, [r3, #8]
 800c574:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	799b      	ldrb	r3, [r3, #6]
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	d17b      	bne.n	800c676 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	f003 0308 	and.w	r3, r3, #8
 800c584:	2b00      	cmp	r3, #0
 800c586:	d015      	beq.n	800c5b4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	4a61      	ldr	r2, [pc, #388]	@ (800c710 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	f240 80b9 	bls.w	800c704 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c598:	2b00      	cmp	r3, #0
 800c59a:	f000 80b3 	beq.w	800c704 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	015a      	lsls	r2, r3, #5
 800c5a2:	69bb      	ldr	r3, [r7, #24]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c5b0:	6093      	str	r3, [r2, #8]
 800c5b2:	e0a7      	b.n	800c704 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	f003 0320 	and.w	r3, r3, #32
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d009      	beq.n	800c5d2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	015a      	lsls	r2, r3, #5
 800c5c2:	69bb      	ldr	r3, [r7, #24]
 800c5c4:	4413      	add	r3, r2
 800c5c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5ca:	461a      	mov	r2, r3
 800c5cc:	2320      	movs	r3, #32
 800c5ce:	6093      	str	r3, [r2, #8]
 800c5d0:	e098      	b.n	800c704 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f040 8093 	bne.w	800c704 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	4a4b      	ldr	r2, [pc, #300]	@ (800c710 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d90f      	bls.n	800c606 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d00a      	beq.n	800c606 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	015a      	lsls	r2, r3, #5
 800c5f4:	69bb      	ldr	r3, [r7, #24]
 800c5f6:	4413      	add	r3, r2
 800c5f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c602:	6093      	str	r3, [r2, #8]
 800c604:	e07e      	b.n	800c704 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800c606:	683a      	ldr	r2, [r7, #0]
 800c608:	4613      	mov	r3, r2
 800c60a:	00db      	lsls	r3, r3, #3
 800c60c:	4413      	add	r3, r2
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	4413      	add	r3, r2
 800c618:	3304      	adds	r3, #4
 800c61a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	6a1a      	ldr	r2, [r3, #32]
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	0159      	lsls	r1, r3, #5
 800c624:	69bb      	ldr	r3, [r7, #24]
 800c626:	440b      	add	r3, r1
 800c628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c62c:	691b      	ldr	r3, [r3, #16]
 800c62e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c632:	1ad2      	subs	r2, r2, r3
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d114      	bne.n	800c668 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	691b      	ldr	r3, [r3, #16]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d109      	bne.n	800c65a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6818      	ldr	r0, [r3, #0]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c650:	461a      	mov	r2, r3
 800c652:	2101      	movs	r1, #1
 800c654:	f007 fe5e 	bl	8014314 <USB_EP0_OutStart>
 800c658:	e006      	b.n	800c668 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	68da      	ldr	r2, [r3, #12]
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	695b      	ldr	r3, [r3, #20]
 800c662:	441a      	add	r2, r3
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	4619      	mov	r1, r3
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f00a fb6a 	bl	8016d48 <HAL_PCD_DataOutStageCallback>
 800c674:	e046      	b.n	800c704 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	4a26      	ldr	r2, [pc, #152]	@ (800c714 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d124      	bne.n	800c6c8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c684:	2b00      	cmp	r3, #0
 800c686:	d00a      	beq.n	800c69e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	015a      	lsls	r2, r3, #5
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	4413      	add	r3, r2
 800c690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c694:	461a      	mov	r2, r3
 800c696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c69a:	6093      	str	r3, [r2, #8]
 800c69c:	e032      	b.n	800c704 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	f003 0320 	and.w	r3, r3, #32
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d008      	beq.n	800c6ba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	015a      	lsls	r2, r3, #5
 800c6ac:	69bb      	ldr	r3, [r7, #24]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	2320      	movs	r3, #32
 800c6b8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	4619      	mov	r1, r3
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f00a fb41 	bl	8016d48 <HAL_PCD_DataOutStageCallback>
 800c6c6:	e01d      	b.n	800c704 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d114      	bne.n	800c6f8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800c6ce:	6879      	ldr	r1, [r7, #4]
 800c6d0:	683a      	ldr	r2, [r7, #0]
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	00db      	lsls	r3, r3, #3
 800c6d6:	4413      	add	r3, r2
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	440b      	add	r3, r1
 800c6dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d108      	bne.n	800c6f8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6818      	ldr	r0, [r3, #0]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	2100      	movs	r1, #0
 800c6f4:	f007 fe0e 	bl	8014314 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	b2db      	uxtb	r3, r3
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f00a fb22 	bl	8016d48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c704:	2300      	movs	r3, #0
}
 800c706:	4618      	mov	r0, r3
 800c708:	3720      	adds	r7, #32
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	4f54300a 	.word	0x4f54300a
 800c714:	4f54310a 	.word	0x4f54310a

0800c718 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b086      	sub	sp, #24
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	333c      	adds	r3, #60	@ 0x3c
 800c730:	3304      	adds	r3, #4
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	015a      	lsls	r2, r3, #5
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	4413      	add	r3, r2
 800c73e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c742:	689b      	ldr	r3, [r3, #8]
 800c744:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	4a15      	ldr	r2, [pc, #84]	@ (800c7a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d90e      	bls.n	800c76c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c754:	2b00      	cmp	r3, #0
 800c756:	d009      	beq.n	800c76c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	015a      	lsls	r2, r3, #5
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	4413      	add	r3, r2
 800c760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c764:	461a      	mov	r2, r3
 800c766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c76a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f00a fad9 	bl	8016d24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	4a0a      	ldr	r2, [pc, #40]	@ (800c7a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d90c      	bls.n	800c794 <PCD_EP_OutSetupPacket_int+0x7c>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	799b      	ldrb	r3, [r3, #6]
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d108      	bne.n	800c794 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6818      	ldr	r0, [r3, #0]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c78c:	461a      	mov	r2, r3
 800c78e:	2101      	movs	r1, #1
 800c790:	f007 fdc0 	bl	8014314 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c794:	2300      	movs	r3, #0
}
 800c796:	4618      	mov	r0, r3
 800c798:	3718      	adds	r7, #24
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	4f54300a 	.word	0x4f54300a

0800c7a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b085      	sub	sp, #20
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	70fb      	strb	r3, [r7, #3]
 800c7b0:	4613      	mov	r3, r2
 800c7b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c7bc:	78fb      	ldrb	r3, [r7, #3]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d107      	bne.n	800c7d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c7c2:	883b      	ldrh	r3, [r7, #0]
 800c7c4:	0419      	lsls	r1, r3, #16
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	68ba      	ldr	r2, [r7, #8]
 800c7cc:	430a      	orrs	r2, r1
 800c7ce:	629a      	str	r2, [r3, #40]	@ 0x28
 800c7d0:	e028      	b.n	800c824 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7d8:	0c1b      	lsrs	r3, r3, #16
 800c7da:	68ba      	ldr	r2, [r7, #8]
 800c7dc:	4413      	add	r3, r2
 800c7de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	73fb      	strb	r3, [r7, #15]
 800c7e4:	e00d      	b.n	800c802 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681a      	ldr	r2, [r3, #0]
 800c7ea:	7bfb      	ldrb	r3, [r7, #15]
 800c7ec:	3340      	adds	r3, #64	@ 0x40
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	4413      	add	r3, r2
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	0c1b      	lsrs	r3, r3, #16
 800c7f6:	68ba      	ldr	r2, [r7, #8]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c7fc:	7bfb      	ldrb	r3, [r7, #15]
 800c7fe:	3301      	adds	r3, #1
 800c800:	73fb      	strb	r3, [r7, #15]
 800c802:	7bfa      	ldrb	r2, [r7, #15]
 800c804:	78fb      	ldrb	r3, [r7, #3]
 800c806:	3b01      	subs	r3, #1
 800c808:	429a      	cmp	r2, r3
 800c80a:	d3ec      	bcc.n	800c7e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c80c:	883b      	ldrh	r3, [r7, #0]
 800c80e:	0418      	lsls	r0, r3, #16
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6819      	ldr	r1, [r3, #0]
 800c814:	78fb      	ldrb	r3, [r7, #3]
 800c816:	3b01      	subs	r3, #1
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	4302      	orrs	r2, r0
 800c81c:	3340      	adds	r3, #64	@ 0x40
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	440b      	add	r3, r1
 800c822:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c824:	2300      	movs	r3, #0
}
 800c826:	4618      	mov	r0, r3
 800c828:	3714      	adds	r7, #20
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr

0800c832 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c832:	b480      	push	{r7}
 800c834:	b083      	sub	sp, #12
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
 800c83a:	460b      	mov	r3, r1
 800c83c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	887a      	ldrh	r2, [r7, #2]
 800c844:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c846:	2300      	movs	r3, #0
}
 800c848:	4618      	mov	r0, r3
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2201      	movs	r2, #1
 800c866:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2200      	movs	r2, #0
 800c86e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	699b      	ldr	r3, [r3, #24]
 800c876:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c882:	4b05      	ldr	r3, [pc, #20]	@ (800c898 <HAL_PCDEx_ActivateLPM+0x44>)
 800c884:	4313      	orrs	r3, r2
 800c886:	68fa      	ldr	r2, [r7, #12]
 800c888:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800c88a:	2300      	movs	r3, #0
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3714      	adds	r7, #20
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr
 800c898:	10000003 	.word	0x10000003

0800c89c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c8a8:	bf00      	nop
 800c8aa:	370c      	adds	r7, #12
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr

0800c8b4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800c8bc:	4b19      	ldr	r3, [pc, #100]	@ (800c924 <HAL_PWREx_ConfigSupply+0x70>)
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	f003 0304 	and.w	r3, r3, #4
 800c8c4:	2b04      	cmp	r3, #4
 800c8c6:	d00a      	beq.n	800c8de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c8c8:	4b16      	ldr	r3, [pc, #88]	@ (800c924 <HAL_PWREx_ConfigSupply+0x70>)
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	f003 0307 	and.w	r3, r3, #7
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d001      	beq.n	800c8da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	e01f      	b.n	800c91a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	e01d      	b.n	800c91a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c8de:	4b11      	ldr	r3, [pc, #68]	@ (800c924 <HAL_PWREx_ConfigSupply+0x70>)
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	f023 0207 	bic.w	r2, r3, #7
 800c8e6:	490f      	ldr	r1, [pc, #60]	@ (800c924 <HAL_PWREx_ConfigSupply+0x70>)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c8ee:	f7f6 f9ad 	bl	8002c4c <HAL_GetTick>
 800c8f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c8f4:	e009      	b.n	800c90a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c8f6:	f7f6 f9a9 	bl	8002c4c <HAL_GetTick>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	1ad3      	subs	r3, r2, r3
 800c900:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c904:	d901      	bls.n	800c90a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c906:	2301      	movs	r3, #1
 800c908:	e007      	b.n	800c91a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c90a:	4b06      	ldr	r3, [pc, #24]	@ (800c924 <HAL_PWREx_ConfigSupply+0x70>)
 800c90c:	685b      	ldr	r3, [r3, #4]
 800c90e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c912:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c916:	d1ee      	bne.n	800c8f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c918:	2300      	movs	r3, #0
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3710      	adds	r7, #16
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	58024800 	.word	0x58024800

0800c928 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800c928:	b480      	push	{r7}
 800c92a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800c92c:	4b05      	ldr	r3, [pc, #20]	@ (800c944 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c92e:	68db      	ldr	r3, [r3, #12]
 800c930:	4a04      	ldr	r2, [pc, #16]	@ (800c944 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c932:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c936:	60d3      	str	r3, [r2, #12]
}
 800c938:	bf00      	nop
 800c93a:	46bd      	mov	sp, r7
 800c93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c940:	4770      	bx	lr
 800c942:	bf00      	nop
 800c944:	58024800 	.word	0x58024800

0800c948 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b08c      	sub	sp, #48	@ 0x30
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d102      	bne.n	800c95c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c956:	2301      	movs	r3, #1
 800c958:	f000 bc48 	b.w	800d1ec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f003 0301 	and.w	r3, r3, #1
 800c964:	2b00      	cmp	r3, #0
 800c966:	f000 8088 	beq.w	800ca7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c96a:	4b99      	ldr	r3, [pc, #612]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800c96c:	691b      	ldr	r3, [r3, #16]
 800c96e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c972:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c974:	4b96      	ldr	r3, [pc, #600]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800c976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c978:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c97a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c97c:	2b10      	cmp	r3, #16
 800c97e:	d007      	beq.n	800c990 <HAL_RCC_OscConfig+0x48>
 800c980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c982:	2b18      	cmp	r3, #24
 800c984:	d111      	bne.n	800c9aa <HAL_RCC_OscConfig+0x62>
 800c986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c988:	f003 0303 	and.w	r3, r3, #3
 800c98c:	2b02      	cmp	r3, #2
 800c98e:	d10c      	bne.n	800c9aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c990:	4b8f      	ldr	r3, [pc, #572]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d06d      	beq.n	800ca78 <HAL_RCC_OscConfig+0x130>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d169      	bne.n	800ca78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	f000 bc21 	b.w	800d1ec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9b2:	d106      	bne.n	800c9c2 <HAL_RCC_OscConfig+0x7a>
 800c9b4:	4b86      	ldr	r3, [pc, #536]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a85      	ldr	r2, [pc, #532]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800c9ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c9be:	6013      	str	r3, [r2, #0]
 800c9c0:	e02e      	b.n	800ca20 <HAL_RCC_OscConfig+0xd8>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d10c      	bne.n	800c9e4 <HAL_RCC_OscConfig+0x9c>
 800c9ca:	4b81      	ldr	r3, [pc, #516]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4a80      	ldr	r2, [pc, #512]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800c9d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c9d4:	6013      	str	r3, [r2, #0]
 800c9d6:	4b7e      	ldr	r3, [pc, #504]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4a7d      	ldr	r2, [pc, #500]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800c9dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c9e0:	6013      	str	r3, [r2, #0]
 800c9e2:	e01d      	b.n	800ca20 <HAL_RCC_OscConfig+0xd8>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c9ec:	d10c      	bne.n	800ca08 <HAL_RCC_OscConfig+0xc0>
 800c9ee:	4b78      	ldr	r3, [pc, #480]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4a77      	ldr	r2, [pc, #476]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800c9f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c9f8:	6013      	str	r3, [r2, #0]
 800c9fa:	4b75      	ldr	r3, [pc, #468]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4a74      	ldr	r2, [pc, #464]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800ca00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ca04:	6013      	str	r3, [r2, #0]
 800ca06:	e00b      	b.n	800ca20 <HAL_RCC_OscConfig+0xd8>
 800ca08:	4b71      	ldr	r3, [pc, #452]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a70      	ldr	r2, [pc, #448]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800ca0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ca12:	6013      	str	r3, [r2, #0]
 800ca14:	4b6e      	ldr	r3, [pc, #440]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a6d      	ldr	r2, [pc, #436]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800ca1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ca1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d013      	beq.n	800ca50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca28:	f7f6 f910 	bl	8002c4c <HAL_GetTick>
 800ca2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ca2e:	e008      	b.n	800ca42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca30:	f7f6 f90c 	bl	8002c4c <HAL_GetTick>
 800ca34:	4602      	mov	r2, r0
 800ca36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	2b64      	cmp	r3, #100	@ 0x64
 800ca3c:	d901      	bls.n	800ca42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ca3e:	2303      	movs	r3, #3
 800ca40:	e3d4      	b.n	800d1ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ca42:	4b63      	ldr	r3, [pc, #396]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d0f0      	beq.n	800ca30 <HAL_RCC_OscConfig+0xe8>
 800ca4e:	e014      	b.n	800ca7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca50:	f7f6 f8fc 	bl	8002c4c <HAL_GetTick>
 800ca54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ca56:	e008      	b.n	800ca6a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca58:	f7f6 f8f8 	bl	8002c4c <HAL_GetTick>
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca60:	1ad3      	subs	r3, r2, r3
 800ca62:	2b64      	cmp	r3, #100	@ 0x64
 800ca64:	d901      	bls.n	800ca6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800ca66:	2303      	movs	r3, #3
 800ca68:	e3c0      	b.n	800d1ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ca6a:	4b59      	ldr	r3, [pc, #356]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d1f0      	bne.n	800ca58 <HAL_RCC_OscConfig+0x110>
 800ca76:	e000      	b.n	800ca7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f003 0302 	and.w	r3, r3, #2
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	f000 80ca 	beq.w	800cc1c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ca88:	4b51      	ldr	r3, [pc, #324]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800ca8a:	691b      	ldr	r3, [r3, #16]
 800ca8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ca90:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ca92:	4b4f      	ldr	r3, [pc, #316]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800ca94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca96:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ca98:	6a3b      	ldr	r3, [r7, #32]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d007      	beq.n	800caae <HAL_RCC_OscConfig+0x166>
 800ca9e:	6a3b      	ldr	r3, [r7, #32]
 800caa0:	2b18      	cmp	r3, #24
 800caa2:	d156      	bne.n	800cb52 <HAL_RCC_OscConfig+0x20a>
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	f003 0303 	and.w	r3, r3, #3
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d151      	bne.n	800cb52 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800caae:	4b48      	ldr	r3, [pc, #288]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f003 0304 	and.w	r3, r3, #4
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d005      	beq.n	800cac6 <HAL_RCC_OscConfig+0x17e>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	68db      	ldr	r3, [r3, #12]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d101      	bne.n	800cac6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800cac2:	2301      	movs	r3, #1
 800cac4:	e392      	b.n	800d1ec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800cac6:	4b42      	ldr	r3, [pc, #264]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f023 0219 	bic.w	r2, r3, #25
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	493f      	ldr	r1, [pc, #252]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800cad4:	4313      	orrs	r3, r2
 800cad6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cad8:	f7f6 f8b8 	bl	8002c4c <HAL_GetTick>
 800cadc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cade:	e008      	b.n	800caf2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cae0:	f7f6 f8b4 	bl	8002c4c <HAL_GetTick>
 800cae4:	4602      	mov	r2, r0
 800cae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae8:	1ad3      	subs	r3, r2, r3
 800caea:	2b02      	cmp	r3, #2
 800caec:	d901      	bls.n	800caf2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800caee:	2303      	movs	r3, #3
 800caf0:	e37c      	b.n	800d1ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800caf2:	4b37      	ldr	r3, [pc, #220]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f003 0304 	and.w	r3, r3, #4
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d0f0      	beq.n	800cae0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cafe:	f7f6 f8d5 	bl	8002cac <HAL_GetREVID>
 800cb02:	4603      	mov	r3, r0
 800cb04:	f241 0203 	movw	r2, #4099	@ 0x1003
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d817      	bhi.n	800cb3c <HAL_RCC_OscConfig+0x1f4>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	691b      	ldr	r3, [r3, #16]
 800cb10:	2b40      	cmp	r3, #64	@ 0x40
 800cb12:	d108      	bne.n	800cb26 <HAL_RCC_OscConfig+0x1de>
 800cb14:	4b2e      	ldr	r3, [pc, #184]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800cb1c:	4a2c      	ldr	r2, [pc, #176]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800cb1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cb22:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cb24:	e07a      	b.n	800cc1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb26:	4b2a      	ldr	r3, [pc, #168]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	691b      	ldr	r3, [r3, #16]
 800cb32:	031b      	lsls	r3, r3, #12
 800cb34:	4926      	ldr	r1, [pc, #152]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800cb36:	4313      	orrs	r3, r2
 800cb38:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cb3a:	e06f      	b.n	800cc1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb3c:	4b24      	ldr	r3, [pc, #144]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	691b      	ldr	r3, [r3, #16]
 800cb48:	061b      	lsls	r3, r3, #24
 800cb4a:	4921      	ldr	r1, [pc, #132]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800cb4c:	4313      	orrs	r3, r2
 800cb4e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cb50:	e064      	b.n	800cc1c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	68db      	ldr	r3, [r3, #12]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d047      	beq.n	800cbea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800cb5a:	4b1d      	ldr	r3, [pc, #116]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f023 0219 	bic.w	r2, r3, #25
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	491a      	ldr	r1, [pc, #104]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb6c:	f7f6 f86e 	bl	8002c4c <HAL_GetTick>
 800cb70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cb72:	e008      	b.n	800cb86 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cb74:	f7f6 f86a 	bl	8002c4c <HAL_GetTick>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb7c:	1ad3      	subs	r3, r2, r3
 800cb7e:	2b02      	cmp	r3, #2
 800cb80:	d901      	bls.n	800cb86 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800cb82:	2303      	movs	r3, #3
 800cb84:	e332      	b.n	800d1ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cb86:	4b12      	ldr	r3, [pc, #72]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f003 0304 	and.w	r3, r3, #4
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d0f0      	beq.n	800cb74 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb92:	f7f6 f88b 	bl	8002cac <HAL_GetREVID>
 800cb96:	4603      	mov	r3, r0
 800cb98:	f241 0203 	movw	r2, #4099	@ 0x1003
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d819      	bhi.n	800cbd4 <HAL_RCC_OscConfig+0x28c>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	691b      	ldr	r3, [r3, #16]
 800cba4:	2b40      	cmp	r3, #64	@ 0x40
 800cba6:	d108      	bne.n	800cbba <HAL_RCC_OscConfig+0x272>
 800cba8:	4b09      	ldr	r3, [pc, #36]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800cbb0:	4a07      	ldr	r2, [pc, #28]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800cbb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cbb6:	6053      	str	r3, [r2, #4]
 800cbb8:	e030      	b.n	800cc1c <HAL_RCC_OscConfig+0x2d4>
 800cbba:	4b05      	ldr	r3, [pc, #20]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	691b      	ldr	r3, [r3, #16]
 800cbc6:	031b      	lsls	r3, r3, #12
 800cbc8:	4901      	ldr	r1, [pc, #4]	@ (800cbd0 <HAL_RCC_OscConfig+0x288>)
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	604b      	str	r3, [r1, #4]
 800cbce:	e025      	b.n	800cc1c <HAL_RCC_OscConfig+0x2d4>
 800cbd0:	58024400 	.word	0x58024400
 800cbd4:	4b9a      	ldr	r3, [pc, #616]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	691b      	ldr	r3, [r3, #16]
 800cbe0:	061b      	lsls	r3, r3, #24
 800cbe2:	4997      	ldr	r1, [pc, #604]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	604b      	str	r3, [r1, #4]
 800cbe8:	e018      	b.n	800cc1c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cbea:	4b95      	ldr	r3, [pc, #596]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a94      	ldr	r2, [pc, #592]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cbf0:	f023 0301 	bic.w	r3, r3, #1
 800cbf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbf6:	f7f6 f829 	bl	8002c4c <HAL_GetTick>
 800cbfa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cbfc:	e008      	b.n	800cc10 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cbfe:	f7f6 f825 	bl	8002c4c <HAL_GetTick>
 800cc02:	4602      	mov	r2, r0
 800cc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc06:	1ad3      	subs	r3, r2, r3
 800cc08:	2b02      	cmp	r3, #2
 800cc0a:	d901      	bls.n	800cc10 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800cc0c:	2303      	movs	r3, #3
 800cc0e:	e2ed      	b.n	800d1ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cc10:	4b8b      	ldr	r3, [pc, #556]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f003 0304 	and.w	r3, r3, #4
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d1f0      	bne.n	800cbfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f003 0310 	and.w	r3, r3, #16
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	f000 80a9 	beq.w	800cd7c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cc2a:	4b85      	ldr	r3, [pc, #532]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cc2c:	691b      	ldr	r3, [r3, #16]
 800cc2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cc32:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cc34:	4b82      	ldr	r3, [pc, #520]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cc36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc38:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800cc3a:	69bb      	ldr	r3, [r7, #24]
 800cc3c:	2b08      	cmp	r3, #8
 800cc3e:	d007      	beq.n	800cc50 <HAL_RCC_OscConfig+0x308>
 800cc40:	69bb      	ldr	r3, [r7, #24]
 800cc42:	2b18      	cmp	r3, #24
 800cc44:	d13a      	bne.n	800ccbc <HAL_RCC_OscConfig+0x374>
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	f003 0303 	and.w	r3, r3, #3
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d135      	bne.n	800ccbc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cc50:	4b7b      	ldr	r3, [pc, #492]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d005      	beq.n	800cc68 <HAL_RCC_OscConfig+0x320>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	69db      	ldr	r3, [r3, #28]
 800cc60:	2b80      	cmp	r3, #128	@ 0x80
 800cc62:	d001      	beq.n	800cc68 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800cc64:	2301      	movs	r3, #1
 800cc66:	e2c1      	b.n	800d1ec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cc68:	f7f6 f820 	bl	8002cac <HAL_GetREVID>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	f241 0203 	movw	r2, #4099	@ 0x1003
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d817      	bhi.n	800cca6 <HAL_RCC_OscConfig+0x35e>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6a1b      	ldr	r3, [r3, #32]
 800cc7a:	2b20      	cmp	r3, #32
 800cc7c:	d108      	bne.n	800cc90 <HAL_RCC_OscConfig+0x348>
 800cc7e:	4b70      	ldr	r3, [pc, #448]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800cc86:	4a6e      	ldr	r2, [pc, #440]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cc88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cc8c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cc8e:	e075      	b.n	800cd7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cc90:	4b6b      	ldr	r3, [pc, #428]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6a1b      	ldr	r3, [r3, #32]
 800cc9c:	069b      	lsls	r3, r3, #26
 800cc9e:	4968      	ldr	r1, [pc, #416]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cca0:	4313      	orrs	r3, r2
 800cca2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cca4:	e06a      	b.n	800cd7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cca6:	4b66      	ldr	r3, [pc, #408]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cca8:	68db      	ldr	r3, [r3, #12]
 800ccaa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6a1b      	ldr	r3, [r3, #32]
 800ccb2:	061b      	lsls	r3, r3, #24
 800ccb4:	4962      	ldr	r1, [pc, #392]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ccba:	e05f      	b.n	800cd7c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	69db      	ldr	r3, [r3, #28]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d042      	beq.n	800cd4a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ccc4:	4b5e      	ldr	r3, [pc, #376]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	4a5d      	ldr	r2, [pc, #372]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800ccca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccd0:	f7f5 ffbc 	bl	8002c4c <HAL_GetTick>
 800ccd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ccd6:	e008      	b.n	800ccea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ccd8:	f7f5 ffb8 	bl	8002c4c <HAL_GetTick>
 800ccdc:	4602      	mov	r2, r0
 800ccde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce0:	1ad3      	subs	r3, r2, r3
 800cce2:	2b02      	cmp	r3, #2
 800cce4:	d901      	bls.n	800ccea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800cce6:	2303      	movs	r3, #3
 800cce8:	e280      	b.n	800d1ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ccea:	4b55      	ldr	r3, [pc, #340]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d0f0      	beq.n	800ccd8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ccf6:	f7f5 ffd9 	bl	8002cac <HAL_GetREVID>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	f241 0203 	movw	r2, #4099	@ 0x1003
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d817      	bhi.n	800cd34 <HAL_RCC_OscConfig+0x3ec>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6a1b      	ldr	r3, [r3, #32]
 800cd08:	2b20      	cmp	r3, #32
 800cd0a:	d108      	bne.n	800cd1e <HAL_RCC_OscConfig+0x3d6>
 800cd0c:	4b4c      	ldr	r3, [pc, #304]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800cd14:	4a4a      	ldr	r2, [pc, #296]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cd16:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cd1a:	6053      	str	r3, [r2, #4]
 800cd1c:	e02e      	b.n	800cd7c <HAL_RCC_OscConfig+0x434>
 800cd1e:	4b48      	ldr	r3, [pc, #288]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6a1b      	ldr	r3, [r3, #32]
 800cd2a:	069b      	lsls	r3, r3, #26
 800cd2c:	4944      	ldr	r1, [pc, #272]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	604b      	str	r3, [r1, #4]
 800cd32:	e023      	b.n	800cd7c <HAL_RCC_OscConfig+0x434>
 800cd34:	4b42      	ldr	r3, [pc, #264]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cd36:	68db      	ldr	r3, [r3, #12]
 800cd38:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6a1b      	ldr	r3, [r3, #32]
 800cd40:	061b      	lsls	r3, r3, #24
 800cd42:	493f      	ldr	r1, [pc, #252]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cd44:	4313      	orrs	r3, r2
 800cd46:	60cb      	str	r3, [r1, #12]
 800cd48:	e018      	b.n	800cd7c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800cd4a:	4b3d      	ldr	r3, [pc, #244]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	4a3c      	ldr	r2, [pc, #240]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cd50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd56:	f7f5 ff79 	bl	8002c4c <HAL_GetTick>
 800cd5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cd5c:	e008      	b.n	800cd70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cd5e:	f7f5 ff75 	bl	8002c4c <HAL_GetTick>
 800cd62:	4602      	mov	r2, r0
 800cd64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd66:	1ad3      	subs	r3, r2, r3
 800cd68:	2b02      	cmp	r3, #2
 800cd6a:	d901      	bls.n	800cd70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800cd6c:	2303      	movs	r3, #3
 800cd6e:	e23d      	b.n	800d1ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cd70:	4b33      	ldr	r3, [pc, #204]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d1f0      	bne.n	800cd5e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f003 0308 	and.w	r3, r3, #8
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d036      	beq.n	800cdf6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	695b      	ldr	r3, [r3, #20]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d019      	beq.n	800cdc4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cd90:	4b2b      	ldr	r3, [pc, #172]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cd92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd94:	4a2a      	ldr	r2, [pc, #168]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cd96:	f043 0301 	orr.w	r3, r3, #1
 800cd9a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd9c:	f7f5 ff56 	bl	8002c4c <HAL_GetTick>
 800cda0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cda2:	e008      	b.n	800cdb6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cda4:	f7f5 ff52 	bl	8002c4c <HAL_GetTick>
 800cda8:	4602      	mov	r2, r0
 800cdaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdac:	1ad3      	subs	r3, r2, r3
 800cdae:	2b02      	cmp	r3, #2
 800cdb0:	d901      	bls.n	800cdb6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800cdb2:	2303      	movs	r3, #3
 800cdb4:	e21a      	b.n	800d1ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cdb6:	4b22      	ldr	r3, [pc, #136]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cdb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdba:	f003 0302 	and.w	r3, r3, #2
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d0f0      	beq.n	800cda4 <HAL_RCC_OscConfig+0x45c>
 800cdc2:	e018      	b.n	800cdf6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cdc4:	4b1e      	ldr	r3, [pc, #120]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cdc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdc8:	4a1d      	ldr	r2, [pc, #116]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cdca:	f023 0301 	bic.w	r3, r3, #1
 800cdce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cdd0:	f7f5 ff3c 	bl	8002c4c <HAL_GetTick>
 800cdd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cdd6:	e008      	b.n	800cdea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cdd8:	f7f5 ff38 	bl	8002c4c <HAL_GetTick>
 800cddc:	4602      	mov	r2, r0
 800cdde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde0:	1ad3      	subs	r3, r2, r3
 800cde2:	2b02      	cmp	r3, #2
 800cde4:	d901      	bls.n	800cdea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800cde6:	2303      	movs	r3, #3
 800cde8:	e200      	b.n	800d1ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cdea:	4b15      	ldr	r3, [pc, #84]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800cdec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdee:	f003 0302 	and.w	r3, r3, #2
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d1f0      	bne.n	800cdd8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f003 0320 	and.w	r3, r3, #32
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d039      	beq.n	800ce76 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	699b      	ldr	r3, [r3, #24]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d01c      	beq.n	800ce44 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ce0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4a0c      	ldr	r2, [pc, #48]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800ce10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ce14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ce16:	f7f5 ff19 	bl	8002c4c <HAL_GetTick>
 800ce1a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ce1c:	e008      	b.n	800ce30 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ce1e:	f7f5 ff15 	bl	8002c4c <HAL_GetTick>
 800ce22:	4602      	mov	r2, r0
 800ce24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce26:	1ad3      	subs	r3, r2, r3
 800ce28:	2b02      	cmp	r3, #2
 800ce2a:	d901      	bls.n	800ce30 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800ce2c:	2303      	movs	r3, #3
 800ce2e:	e1dd      	b.n	800d1ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ce30:	4b03      	ldr	r3, [pc, #12]	@ (800ce40 <HAL_RCC_OscConfig+0x4f8>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d0f0      	beq.n	800ce1e <HAL_RCC_OscConfig+0x4d6>
 800ce3c:	e01b      	b.n	800ce76 <HAL_RCC_OscConfig+0x52e>
 800ce3e:	bf00      	nop
 800ce40:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ce44:	4b9b      	ldr	r3, [pc, #620]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	4a9a      	ldr	r2, [pc, #616]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800ce4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ce50:	f7f5 fefc 	bl	8002c4c <HAL_GetTick>
 800ce54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ce56:	e008      	b.n	800ce6a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ce58:	f7f5 fef8 	bl	8002c4c <HAL_GetTick>
 800ce5c:	4602      	mov	r2, r0
 800ce5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce60:	1ad3      	subs	r3, r2, r3
 800ce62:	2b02      	cmp	r3, #2
 800ce64:	d901      	bls.n	800ce6a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800ce66:	2303      	movs	r3, #3
 800ce68:	e1c0      	b.n	800d1ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ce6a:	4b92      	ldr	r3, [pc, #584]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d1f0      	bne.n	800ce58 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f003 0304 	and.w	r3, r3, #4
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	f000 8081 	beq.w	800cf86 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ce84:	4b8c      	ldr	r3, [pc, #560]	@ (800d0b8 <HAL_RCC_OscConfig+0x770>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4a8b      	ldr	r2, [pc, #556]	@ (800d0b8 <HAL_RCC_OscConfig+0x770>)
 800ce8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ce8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ce90:	f7f5 fedc 	bl	8002c4c <HAL_GetTick>
 800ce94:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ce96:	e008      	b.n	800ceaa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce98:	f7f5 fed8 	bl	8002c4c <HAL_GetTick>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea0:	1ad3      	subs	r3, r2, r3
 800cea2:	2b64      	cmp	r3, #100	@ 0x64
 800cea4:	d901      	bls.n	800ceaa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800cea6:	2303      	movs	r3, #3
 800cea8:	e1a0      	b.n	800d1ec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ceaa:	4b83      	ldr	r3, [pc, #524]	@ (800d0b8 <HAL_RCC_OscConfig+0x770>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d0f0      	beq.n	800ce98 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	689b      	ldr	r3, [r3, #8]
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d106      	bne.n	800cecc <HAL_RCC_OscConfig+0x584>
 800cebe:	4b7d      	ldr	r3, [pc, #500]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800cec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cec2:	4a7c      	ldr	r2, [pc, #496]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800cec4:	f043 0301 	orr.w	r3, r3, #1
 800cec8:	6713      	str	r3, [r2, #112]	@ 0x70
 800ceca:	e02d      	b.n	800cf28 <HAL_RCC_OscConfig+0x5e0>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	689b      	ldr	r3, [r3, #8]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d10c      	bne.n	800ceee <HAL_RCC_OscConfig+0x5a6>
 800ced4:	4b77      	ldr	r3, [pc, #476]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800ced6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ced8:	4a76      	ldr	r2, [pc, #472]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800ceda:	f023 0301 	bic.w	r3, r3, #1
 800cede:	6713      	str	r3, [r2, #112]	@ 0x70
 800cee0:	4b74      	ldr	r3, [pc, #464]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800cee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cee4:	4a73      	ldr	r2, [pc, #460]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800cee6:	f023 0304 	bic.w	r3, r3, #4
 800ceea:	6713      	str	r3, [r2, #112]	@ 0x70
 800ceec:	e01c      	b.n	800cf28 <HAL_RCC_OscConfig+0x5e0>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	689b      	ldr	r3, [r3, #8]
 800cef2:	2b05      	cmp	r3, #5
 800cef4:	d10c      	bne.n	800cf10 <HAL_RCC_OscConfig+0x5c8>
 800cef6:	4b6f      	ldr	r3, [pc, #444]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800cef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cefa:	4a6e      	ldr	r2, [pc, #440]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800cefc:	f043 0304 	orr.w	r3, r3, #4
 800cf00:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf02:	4b6c      	ldr	r3, [pc, #432]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800cf04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf06:	4a6b      	ldr	r2, [pc, #428]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800cf08:	f043 0301 	orr.w	r3, r3, #1
 800cf0c:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf0e:	e00b      	b.n	800cf28 <HAL_RCC_OscConfig+0x5e0>
 800cf10:	4b68      	ldr	r3, [pc, #416]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800cf12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf14:	4a67      	ldr	r2, [pc, #412]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800cf16:	f023 0301 	bic.w	r3, r3, #1
 800cf1a:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf1c:	4b65      	ldr	r3, [pc, #404]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800cf1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf20:	4a64      	ldr	r2, [pc, #400]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800cf22:	f023 0304 	bic.w	r3, r3, #4
 800cf26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	689b      	ldr	r3, [r3, #8]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d015      	beq.n	800cf5c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf30:	f7f5 fe8c 	bl	8002c4c <HAL_GetTick>
 800cf34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cf36:	e00a      	b.n	800cf4e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf38:	f7f5 fe88 	bl	8002c4c <HAL_GetTick>
 800cf3c:	4602      	mov	r2, r0
 800cf3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf40:	1ad3      	subs	r3, r2, r3
 800cf42:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d901      	bls.n	800cf4e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800cf4a:	2303      	movs	r3, #3
 800cf4c:	e14e      	b.n	800d1ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cf4e:	4b59      	ldr	r3, [pc, #356]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800cf50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf52:	f003 0302 	and.w	r3, r3, #2
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d0ee      	beq.n	800cf38 <HAL_RCC_OscConfig+0x5f0>
 800cf5a:	e014      	b.n	800cf86 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf5c:	f7f5 fe76 	bl	8002c4c <HAL_GetTick>
 800cf60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cf62:	e00a      	b.n	800cf7a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf64:	f7f5 fe72 	bl	8002c4c <HAL_GetTick>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf6c:	1ad3      	subs	r3, r2, r3
 800cf6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d901      	bls.n	800cf7a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800cf76:	2303      	movs	r3, #3
 800cf78:	e138      	b.n	800d1ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cf7a:	4b4e      	ldr	r3, [pc, #312]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800cf7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf7e:	f003 0302 	and.w	r3, r3, #2
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d1ee      	bne.n	800cf64 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	f000 812d 	beq.w	800d1ea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800cf90:	4b48      	ldr	r3, [pc, #288]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800cf92:	691b      	ldr	r3, [r3, #16]
 800cf94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cf98:	2b18      	cmp	r3, #24
 800cf9a:	f000 80bd 	beq.w	800d118 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfa2:	2b02      	cmp	r3, #2
 800cfa4:	f040 809e 	bne.w	800d0e4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cfa8:	4b42      	ldr	r3, [pc, #264]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4a41      	ldr	r2, [pc, #260]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800cfae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cfb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfb4:	f7f5 fe4a 	bl	8002c4c <HAL_GetTick>
 800cfb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cfba:	e008      	b.n	800cfce <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cfbc:	f7f5 fe46 	bl	8002c4c <HAL_GetTick>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfc4:	1ad3      	subs	r3, r2, r3
 800cfc6:	2b02      	cmp	r3, #2
 800cfc8:	d901      	bls.n	800cfce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800cfca:	2303      	movs	r3, #3
 800cfcc:	e10e      	b.n	800d1ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cfce:	4b39      	ldr	r3, [pc, #228]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d1f0      	bne.n	800cfbc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cfda:	4b36      	ldr	r3, [pc, #216]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800cfdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cfde:	4b37      	ldr	r3, [pc, #220]	@ (800d0bc <HAL_RCC_OscConfig+0x774>)
 800cfe0:	4013      	ands	r3, r2
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800cfe6:	687a      	ldr	r2, [r7, #4]
 800cfe8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800cfea:	0112      	lsls	r2, r2, #4
 800cfec:	430a      	orrs	r2, r1
 800cfee:	4931      	ldr	r1, [pc, #196]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800cff0:	4313      	orrs	r3, r2
 800cff2:	628b      	str	r3, [r1, #40]	@ 0x28
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cff8:	3b01      	subs	r3, #1
 800cffa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d002:	3b01      	subs	r3, #1
 800d004:	025b      	lsls	r3, r3, #9
 800d006:	b29b      	uxth	r3, r3
 800d008:	431a      	orrs	r2, r3
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d00e:	3b01      	subs	r3, #1
 800d010:	041b      	lsls	r3, r3, #16
 800d012:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d016:	431a      	orrs	r2, r3
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d01c:	3b01      	subs	r3, #1
 800d01e:	061b      	lsls	r3, r3, #24
 800d020:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d024:	4923      	ldr	r1, [pc, #140]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800d026:	4313      	orrs	r3, r2
 800d028:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d02a:	4b22      	ldr	r3, [pc, #136]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800d02c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d02e:	4a21      	ldr	r2, [pc, #132]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800d030:	f023 0301 	bic.w	r3, r3, #1
 800d034:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d036:	4b1f      	ldr	r3, [pc, #124]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800d038:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d03a:	4b21      	ldr	r3, [pc, #132]	@ (800d0c0 <HAL_RCC_OscConfig+0x778>)
 800d03c:	4013      	ands	r3, r2
 800d03e:	687a      	ldr	r2, [r7, #4]
 800d040:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d042:	00d2      	lsls	r2, r2, #3
 800d044:	491b      	ldr	r1, [pc, #108]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800d046:	4313      	orrs	r3, r2
 800d048:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d04a:	4b1a      	ldr	r3, [pc, #104]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800d04c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d04e:	f023 020c 	bic.w	r2, r3, #12
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d056:	4917      	ldr	r1, [pc, #92]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800d058:	4313      	orrs	r3, r2
 800d05a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d05c:	4b15      	ldr	r3, [pc, #84]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800d05e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d060:	f023 0202 	bic.w	r2, r3, #2
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d068:	4912      	ldr	r1, [pc, #72]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800d06a:	4313      	orrs	r3, r2
 800d06c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d06e:	4b11      	ldr	r3, [pc, #68]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800d070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d072:	4a10      	ldr	r2, [pc, #64]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800d074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d078:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d07a:	4b0e      	ldr	r3, [pc, #56]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800d07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d07e:	4a0d      	ldr	r2, [pc, #52]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800d080:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d084:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d086:	4b0b      	ldr	r3, [pc, #44]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800d088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d08a:	4a0a      	ldr	r2, [pc, #40]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800d08c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d090:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d092:	4b08      	ldr	r3, [pc, #32]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800d094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d096:	4a07      	ldr	r2, [pc, #28]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800d098:	f043 0301 	orr.w	r3, r3, #1
 800d09c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d09e:	4b05      	ldr	r3, [pc, #20]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4a04      	ldr	r2, [pc, #16]	@ (800d0b4 <HAL_RCC_OscConfig+0x76c>)
 800d0a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d0a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0aa:	f7f5 fdcf 	bl	8002c4c <HAL_GetTick>
 800d0ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d0b0:	e011      	b.n	800d0d6 <HAL_RCC_OscConfig+0x78e>
 800d0b2:	bf00      	nop
 800d0b4:	58024400 	.word	0x58024400
 800d0b8:	58024800 	.word	0x58024800
 800d0bc:	fffffc0c 	.word	0xfffffc0c
 800d0c0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d0c4:	f7f5 fdc2 	bl	8002c4c <HAL_GetTick>
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0cc:	1ad3      	subs	r3, r2, r3
 800d0ce:	2b02      	cmp	r3, #2
 800d0d0:	d901      	bls.n	800d0d6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800d0d2:	2303      	movs	r3, #3
 800d0d4:	e08a      	b.n	800d1ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d0d6:	4b47      	ldr	r3, [pc, #284]	@ (800d1f4 <HAL_RCC_OscConfig+0x8ac>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d0f0      	beq.n	800d0c4 <HAL_RCC_OscConfig+0x77c>
 800d0e2:	e082      	b.n	800d1ea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d0e4:	4b43      	ldr	r3, [pc, #268]	@ (800d1f4 <HAL_RCC_OscConfig+0x8ac>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a42      	ldr	r2, [pc, #264]	@ (800d1f4 <HAL_RCC_OscConfig+0x8ac>)
 800d0ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d0ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0f0:	f7f5 fdac 	bl	8002c4c <HAL_GetTick>
 800d0f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d0f6:	e008      	b.n	800d10a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d0f8:	f7f5 fda8 	bl	8002c4c <HAL_GetTick>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d100:	1ad3      	subs	r3, r2, r3
 800d102:	2b02      	cmp	r3, #2
 800d104:	d901      	bls.n	800d10a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800d106:	2303      	movs	r3, #3
 800d108:	e070      	b.n	800d1ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d10a:	4b3a      	ldr	r3, [pc, #232]	@ (800d1f4 <HAL_RCC_OscConfig+0x8ac>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d112:	2b00      	cmp	r3, #0
 800d114:	d1f0      	bne.n	800d0f8 <HAL_RCC_OscConfig+0x7b0>
 800d116:	e068      	b.n	800d1ea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d118:	4b36      	ldr	r3, [pc, #216]	@ (800d1f4 <HAL_RCC_OscConfig+0x8ac>)
 800d11a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d11c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d11e:	4b35      	ldr	r3, [pc, #212]	@ (800d1f4 <HAL_RCC_OscConfig+0x8ac>)
 800d120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d122:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d031      	beq.n	800d190 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	f003 0203 	and.w	r2, r3, #3
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d136:	429a      	cmp	r2, r3
 800d138:	d12a      	bne.n	800d190 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	091b      	lsrs	r3, r3, #4
 800d13e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d146:	429a      	cmp	r2, r3
 800d148:	d122      	bne.n	800d190 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d154:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d156:	429a      	cmp	r2, r3
 800d158:	d11a      	bne.n	800d190 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	0a5b      	lsrs	r3, r3, #9
 800d15e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d166:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d168:	429a      	cmp	r2, r3
 800d16a:	d111      	bne.n	800d190 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	0c1b      	lsrs	r3, r3, #16
 800d170:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d178:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d108      	bne.n	800d190 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	0e1b      	lsrs	r3, r3, #24
 800d182:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d18a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d001      	beq.n	800d194 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800d190:	2301      	movs	r3, #1
 800d192:	e02b      	b.n	800d1ec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d194:	4b17      	ldr	r3, [pc, #92]	@ (800d1f4 <HAL_RCC_OscConfig+0x8ac>)
 800d196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d198:	08db      	lsrs	r3, r3, #3
 800d19a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d19e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d1a4:	693a      	ldr	r2, [r7, #16]
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d01f      	beq.n	800d1ea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d1aa:	4b12      	ldr	r3, [pc, #72]	@ (800d1f4 <HAL_RCC_OscConfig+0x8ac>)
 800d1ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1ae:	4a11      	ldr	r2, [pc, #68]	@ (800d1f4 <HAL_RCC_OscConfig+0x8ac>)
 800d1b0:	f023 0301 	bic.w	r3, r3, #1
 800d1b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d1b6:	f7f5 fd49 	bl	8002c4c <HAL_GetTick>
 800d1ba:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d1bc:	bf00      	nop
 800d1be:	f7f5 fd45 	bl	8002c4c <HAL_GetTick>
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d0f9      	beq.n	800d1be <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d1ca:	4b0a      	ldr	r3, [pc, #40]	@ (800d1f4 <HAL_RCC_OscConfig+0x8ac>)
 800d1cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d1ce:	4b0a      	ldr	r3, [pc, #40]	@ (800d1f8 <HAL_RCC_OscConfig+0x8b0>)
 800d1d0:	4013      	ands	r3, r2
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d1d6:	00d2      	lsls	r2, r2, #3
 800d1d8:	4906      	ldr	r1, [pc, #24]	@ (800d1f4 <HAL_RCC_OscConfig+0x8ac>)
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d1de:	4b05      	ldr	r3, [pc, #20]	@ (800d1f4 <HAL_RCC_OscConfig+0x8ac>)
 800d1e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1e2:	4a04      	ldr	r2, [pc, #16]	@ (800d1f4 <HAL_RCC_OscConfig+0x8ac>)
 800d1e4:	f043 0301 	orr.w	r3, r3, #1
 800d1e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d1ea:	2300      	movs	r3, #0
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3730      	adds	r7, #48	@ 0x30
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	58024400 	.word	0x58024400
 800d1f8:	ffff0007 	.word	0xffff0007

0800d1fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b086      	sub	sp, #24
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d101      	bne.n	800d210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d20c:	2301      	movs	r3, #1
 800d20e:	e19c      	b.n	800d54a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d210:	4b8a      	ldr	r3, [pc, #552]	@ (800d43c <HAL_RCC_ClockConfig+0x240>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f003 030f 	and.w	r3, r3, #15
 800d218:	683a      	ldr	r2, [r7, #0]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d910      	bls.n	800d240 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d21e:	4b87      	ldr	r3, [pc, #540]	@ (800d43c <HAL_RCC_ClockConfig+0x240>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f023 020f 	bic.w	r2, r3, #15
 800d226:	4985      	ldr	r1, [pc, #532]	@ (800d43c <HAL_RCC_ClockConfig+0x240>)
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	4313      	orrs	r3, r2
 800d22c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d22e:	4b83      	ldr	r3, [pc, #524]	@ (800d43c <HAL_RCC_ClockConfig+0x240>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f003 030f 	and.w	r3, r3, #15
 800d236:	683a      	ldr	r2, [r7, #0]
 800d238:	429a      	cmp	r2, r3
 800d23a:	d001      	beq.n	800d240 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d23c:	2301      	movs	r3, #1
 800d23e:	e184      	b.n	800d54a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f003 0304 	and.w	r3, r3, #4
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d010      	beq.n	800d26e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	691a      	ldr	r2, [r3, #16]
 800d250:	4b7b      	ldr	r3, [pc, #492]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d252:	699b      	ldr	r3, [r3, #24]
 800d254:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d258:	429a      	cmp	r2, r3
 800d25a:	d908      	bls.n	800d26e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d25c:	4b78      	ldr	r3, [pc, #480]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d25e:	699b      	ldr	r3, [r3, #24]
 800d260:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	691b      	ldr	r3, [r3, #16]
 800d268:	4975      	ldr	r1, [pc, #468]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d26a:	4313      	orrs	r3, r2
 800d26c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f003 0308 	and.w	r3, r3, #8
 800d276:	2b00      	cmp	r3, #0
 800d278:	d010      	beq.n	800d29c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	695a      	ldr	r2, [r3, #20]
 800d27e:	4b70      	ldr	r3, [pc, #448]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d280:	69db      	ldr	r3, [r3, #28]
 800d282:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d286:	429a      	cmp	r2, r3
 800d288:	d908      	bls.n	800d29c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d28a:	4b6d      	ldr	r3, [pc, #436]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d28c:	69db      	ldr	r3, [r3, #28]
 800d28e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	695b      	ldr	r3, [r3, #20]
 800d296:	496a      	ldr	r1, [pc, #424]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d298:	4313      	orrs	r3, r2
 800d29a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	f003 0310 	and.w	r3, r3, #16
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d010      	beq.n	800d2ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	699a      	ldr	r2, [r3, #24]
 800d2ac:	4b64      	ldr	r3, [pc, #400]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d2ae:	69db      	ldr	r3, [r3, #28]
 800d2b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d908      	bls.n	800d2ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d2b8:	4b61      	ldr	r3, [pc, #388]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d2ba:	69db      	ldr	r3, [r3, #28]
 800d2bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	699b      	ldr	r3, [r3, #24]
 800d2c4:	495e      	ldr	r1, [pc, #376]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f003 0320 	and.w	r3, r3, #32
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d010      	beq.n	800d2f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	69da      	ldr	r2, [r3, #28]
 800d2da:	4b59      	ldr	r3, [pc, #356]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d2dc:	6a1b      	ldr	r3, [r3, #32]
 800d2de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d908      	bls.n	800d2f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d2e6:	4b56      	ldr	r3, [pc, #344]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d2e8:	6a1b      	ldr	r3, [r3, #32]
 800d2ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	69db      	ldr	r3, [r3, #28]
 800d2f2:	4953      	ldr	r1, [pc, #332]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d2f4:	4313      	orrs	r3, r2
 800d2f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f003 0302 	and.w	r3, r3, #2
 800d300:	2b00      	cmp	r3, #0
 800d302:	d010      	beq.n	800d326 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	68da      	ldr	r2, [r3, #12]
 800d308:	4b4d      	ldr	r3, [pc, #308]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d30a:	699b      	ldr	r3, [r3, #24]
 800d30c:	f003 030f 	and.w	r3, r3, #15
 800d310:	429a      	cmp	r2, r3
 800d312:	d908      	bls.n	800d326 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d314:	4b4a      	ldr	r3, [pc, #296]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d316:	699b      	ldr	r3, [r3, #24]
 800d318:	f023 020f 	bic.w	r2, r3, #15
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	68db      	ldr	r3, [r3, #12]
 800d320:	4947      	ldr	r1, [pc, #284]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d322:	4313      	orrs	r3, r2
 800d324:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f003 0301 	and.w	r3, r3, #1
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d055      	beq.n	800d3de <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d332:	4b43      	ldr	r3, [pc, #268]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d334:	699b      	ldr	r3, [r3, #24]
 800d336:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	689b      	ldr	r3, [r3, #8]
 800d33e:	4940      	ldr	r1, [pc, #256]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d340:	4313      	orrs	r3, r2
 800d342:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	2b02      	cmp	r3, #2
 800d34a:	d107      	bne.n	800d35c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d34c:	4b3c      	ldr	r3, [pc, #240]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d354:	2b00      	cmp	r3, #0
 800d356:	d121      	bne.n	800d39c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d358:	2301      	movs	r3, #1
 800d35a:	e0f6      	b.n	800d54a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	685b      	ldr	r3, [r3, #4]
 800d360:	2b03      	cmp	r3, #3
 800d362:	d107      	bne.n	800d374 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d364:	4b36      	ldr	r3, [pc, #216]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d115      	bne.n	800d39c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d370:	2301      	movs	r3, #1
 800d372:	e0ea      	b.n	800d54a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	685b      	ldr	r3, [r3, #4]
 800d378:	2b01      	cmp	r3, #1
 800d37a:	d107      	bne.n	800d38c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d37c:	4b30      	ldr	r3, [pc, #192]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d384:	2b00      	cmp	r3, #0
 800d386:	d109      	bne.n	800d39c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d388:	2301      	movs	r3, #1
 800d38a:	e0de      	b.n	800d54a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d38c:	4b2c      	ldr	r3, [pc, #176]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f003 0304 	and.w	r3, r3, #4
 800d394:	2b00      	cmp	r3, #0
 800d396:	d101      	bne.n	800d39c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d398:	2301      	movs	r3, #1
 800d39a:	e0d6      	b.n	800d54a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d39c:	4b28      	ldr	r3, [pc, #160]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d39e:	691b      	ldr	r3, [r3, #16]
 800d3a0:	f023 0207 	bic.w	r2, r3, #7
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	4925      	ldr	r1, [pc, #148]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3ae:	f7f5 fc4d 	bl	8002c4c <HAL_GetTick>
 800d3b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d3b4:	e00a      	b.n	800d3cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d3b6:	f7f5 fc49 	bl	8002c4c <HAL_GetTick>
 800d3ba:	4602      	mov	r2, r0
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	1ad3      	subs	r3, r2, r3
 800d3c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d901      	bls.n	800d3cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d3c8:	2303      	movs	r3, #3
 800d3ca:	e0be      	b.n	800d54a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d3cc:	4b1c      	ldr	r3, [pc, #112]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d3ce:	691b      	ldr	r3, [r3, #16]
 800d3d0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	00db      	lsls	r3, r3, #3
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d1eb      	bne.n	800d3b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f003 0302 	and.w	r3, r3, #2
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d010      	beq.n	800d40c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	68da      	ldr	r2, [r3, #12]
 800d3ee:	4b14      	ldr	r3, [pc, #80]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d3f0:	699b      	ldr	r3, [r3, #24]
 800d3f2:	f003 030f 	and.w	r3, r3, #15
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d208      	bcs.n	800d40c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d3fa:	4b11      	ldr	r3, [pc, #68]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d3fc:	699b      	ldr	r3, [r3, #24]
 800d3fe:	f023 020f 	bic.w	r2, r3, #15
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	68db      	ldr	r3, [r3, #12]
 800d406:	490e      	ldr	r1, [pc, #56]	@ (800d440 <HAL_RCC_ClockConfig+0x244>)
 800d408:	4313      	orrs	r3, r2
 800d40a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d40c:	4b0b      	ldr	r3, [pc, #44]	@ (800d43c <HAL_RCC_ClockConfig+0x240>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f003 030f 	and.w	r3, r3, #15
 800d414:	683a      	ldr	r2, [r7, #0]
 800d416:	429a      	cmp	r2, r3
 800d418:	d214      	bcs.n	800d444 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d41a:	4b08      	ldr	r3, [pc, #32]	@ (800d43c <HAL_RCC_ClockConfig+0x240>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f023 020f 	bic.w	r2, r3, #15
 800d422:	4906      	ldr	r1, [pc, #24]	@ (800d43c <HAL_RCC_ClockConfig+0x240>)
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	4313      	orrs	r3, r2
 800d428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d42a:	4b04      	ldr	r3, [pc, #16]	@ (800d43c <HAL_RCC_ClockConfig+0x240>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f003 030f 	and.w	r3, r3, #15
 800d432:	683a      	ldr	r2, [r7, #0]
 800d434:	429a      	cmp	r2, r3
 800d436:	d005      	beq.n	800d444 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d438:	2301      	movs	r3, #1
 800d43a:	e086      	b.n	800d54a <HAL_RCC_ClockConfig+0x34e>
 800d43c:	52002000 	.word	0x52002000
 800d440:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f003 0304 	and.w	r3, r3, #4
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d010      	beq.n	800d472 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	691a      	ldr	r2, [r3, #16]
 800d454:	4b3f      	ldr	r3, [pc, #252]	@ (800d554 <HAL_RCC_ClockConfig+0x358>)
 800d456:	699b      	ldr	r3, [r3, #24]
 800d458:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d208      	bcs.n	800d472 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d460:	4b3c      	ldr	r3, [pc, #240]	@ (800d554 <HAL_RCC_ClockConfig+0x358>)
 800d462:	699b      	ldr	r3, [r3, #24]
 800d464:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	691b      	ldr	r3, [r3, #16]
 800d46c:	4939      	ldr	r1, [pc, #228]	@ (800d554 <HAL_RCC_ClockConfig+0x358>)
 800d46e:	4313      	orrs	r3, r2
 800d470:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f003 0308 	and.w	r3, r3, #8
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d010      	beq.n	800d4a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	695a      	ldr	r2, [r3, #20]
 800d482:	4b34      	ldr	r3, [pc, #208]	@ (800d554 <HAL_RCC_ClockConfig+0x358>)
 800d484:	69db      	ldr	r3, [r3, #28]
 800d486:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d208      	bcs.n	800d4a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d48e:	4b31      	ldr	r3, [pc, #196]	@ (800d554 <HAL_RCC_ClockConfig+0x358>)
 800d490:	69db      	ldr	r3, [r3, #28]
 800d492:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	695b      	ldr	r3, [r3, #20]
 800d49a:	492e      	ldr	r1, [pc, #184]	@ (800d554 <HAL_RCC_ClockConfig+0x358>)
 800d49c:	4313      	orrs	r3, r2
 800d49e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f003 0310 	and.w	r3, r3, #16
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d010      	beq.n	800d4ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	699a      	ldr	r2, [r3, #24]
 800d4b0:	4b28      	ldr	r3, [pc, #160]	@ (800d554 <HAL_RCC_ClockConfig+0x358>)
 800d4b2:	69db      	ldr	r3, [r3, #28]
 800d4b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d208      	bcs.n	800d4ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d4bc:	4b25      	ldr	r3, [pc, #148]	@ (800d554 <HAL_RCC_ClockConfig+0x358>)
 800d4be:	69db      	ldr	r3, [r3, #28]
 800d4c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	699b      	ldr	r3, [r3, #24]
 800d4c8:	4922      	ldr	r1, [pc, #136]	@ (800d554 <HAL_RCC_ClockConfig+0x358>)
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	f003 0320 	and.w	r3, r3, #32
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d010      	beq.n	800d4fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	69da      	ldr	r2, [r3, #28]
 800d4de:	4b1d      	ldr	r3, [pc, #116]	@ (800d554 <HAL_RCC_ClockConfig+0x358>)
 800d4e0:	6a1b      	ldr	r3, [r3, #32]
 800d4e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d208      	bcs.n	800d4fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d4ea:	4b1a      	ldr	r3, [pc, #104]	@ (800d554 <HAL_RCC_ClockConfig+0x358>)
 800d4ec:	6a1b      	ldr	r3, [r3, #32]
 800d4ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	69db      	ldr	r3, [r3, #28]
 800d4f6:	4917      	ldr	r1, [pc, #92]	@ (800d554 <HAL_RCC_ClockConfig+0x358>)
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d4fc:	f000 f834 	bl	800d568 <HAL_RCC_GetSysClockFreq>
 800d500:	4602      	mov	r2, r0
 800d502:	4b14      	ldr	r3, [pc, #80]	@ (800d554 <HAL_RCC_ClockConfig+0x358>)
 800d504:	699b      	ldr	r3, [r3, #24]
 800d506:	0a1b      	lsrs	r3, r3, #8
 800d508:	f003 030f 	and.w	r3, r3, #15
 800d50c:	4912      	ldr	r1, [pc, #72]	@ (800d558 <HAL_RCC_ClockConfig+0x35c>)
 800d50e:	5ccb      	ldrb	r3, [r1, r3]
 800d510:	f003 031f 	and.w	r3, r3, #31
 800d514:	fa22 f303 	lsr.w	r3, r2, r3
 800d518:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d51a:	4b0e      	ldr	r3, [pc, #56]	@ (800d554 <HAL_RCC_ClockConfig+0x358>)
 800d51c:	699b      	ldr	r3, [r3, #24]
 800d51e:	f003 030f 	and.w	r3, r3, #15
 800d522:	4a0d      	ldr	r2, [pc, #52]	@ (800d558 <HAL_RCC_ClockConfig+0x35c>)
 800d524:	5cd3      	ldrb	r3, [r2, r3]
 800d526:	f003 031f 	and.w	r3, r3, #31
 800d52a:	693a      	ldr	r2, [r7, #16]
 800d52c:	fa22 f303 	lsr.w	r3, r2, r3
 800d530:	4a0a      	ldr	r2, [pc, #40]	@ (800d55c <HAL_RCC_ClockConfig+0x360>)
 800d532:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d534:	4a0a      	ldr	r2, [pc, #40]	@ (800d560 <HAL_RCC_ClockConfig+0x364>)
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800d53a:	4b0a      	ldr	r3, [pc, #40]	@ (800d564 <HAL_RCC_ClockConfig+0x368>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	4618      	mov	r0, r3
 800d540:	f7f5 fb3a 	bl	8002bb8 <HAL_InitTick>
 800d544:	4603      	mov	r3, r0
 800d546:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d548:	7bfb      	ldrb	r3, [r7, #15]
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3718      	adds	r7, #24
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}
 800d552:	bf00      	nop
 800d554:	58024400 	.word	0x58024400
 800d558:	08017e20 	.word	0x08017e20
 800d55c:	2400001c 	.word	0x2400001c
 800d560:	24000018 	.word	0x24000018
 800d564:	24000020 	.word	0x24000020

0800d568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d568:	b480      	push	{r7}
 800d56a:	b089      	sub	sp, #36	@ 0x24
 800d56c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d56e:	4bb3      	ldr	r3, [pc, #716]	@ (800d83c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d570:	691b      	ldr	r3, [r3, #16]
 800d572:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d576:	2b18      	cmp	r3, #24
 800d578:	f200 8155 	bhi.w	800d826 <HAL_RCC_GetSysClockFreq+0x2be>
 800d57c:	a201      	add	r2, pc, #4	@ (adr r2, 800d584 <HAL_RCC_GetSysClockFreq+0x1c>)
 800d57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d582:	bf00      	nop
 800d584:	0800d5e9 	.word	0x0800d5e9
 800d588:	0800d827 	.word	0x0800d827
 800d58c:	0800d827 	.word	0x0800d827
 800d590:	0800d827 	.word	0x0800d827
 800d594:	0800d827 	.word	0x0800d827
 800d598:	0800d827 	.word	0x0800d827
 800d59c:	0800d827 	.word	0x0800d827
 800d5a0:	0800d827 	.word	0x0800d827
 800d5a4:	0800d60f 	.word	0x0800d60f
 800d5a8:	0800d827 	.word	0x0800d827
 800d5ac:	0800d827 	.word	0x0800d827
 800d5b0:	0800d827 	.word	0x0800d827
 800d5b4:	0800d827 	.word	0x0800d827
 800d5b8:	0800d827 	.word	0x0800d827
 800d5bc:	0800d827 	.word	0x0800d827
 800d5c0:	0800d827 	.word	0x0800d827
 800d5c4:	0800d615 	.word	0x0800d615
 800d5c8:	0800d827 	.word	0x0800d827
 800d5cc:	0800d827 	.word	0x0800d827
 800d5d0:	0800d827 	.word	0x0800d827
 800d5d4:	0800d827 	.word	0x0800d827
 800d5d8:	0800d827 	.word	0x0800d827
 800d5dc:	0800d827 	.word	0x0800d827
 800d5e0:	0800d827 	.word	0x0800d827
 800d5e4:	0800d61b 	.word	0x0800d61b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5e8:	4b94      	ldr	r3, [pc, #592]	@ (800d83c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f003 0320 	and.w	r3, r3, #32
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d009      	beq.n	800d608 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d5f4:	4b91      	ldr	r3, [pc, #580]	@ (800d83c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	08db      	lsrs	r3, r3, #3
 800d5fa:	f003 0303 	and.w	r3, r3, #3
 800d5fe:	4a90      	ldr	r2, [pc, #576]	@ (800d840 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d600:	fa22 f303 	lsr.w	r3, r2, r3
 800d604:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800d606:	e111      	b.n	800d82c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d608:	4b8d      	ldr	r3, [pc, #564]	@ (800d840 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d60a:	61bb      	str	r3, [r7, #24]
      break;
 800d60c:	e10e      	b.n	800d82c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800d60e:	4b8d      	ldr	r3, [pc, #564]	@ (800d844 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d610:	61bb      	str	r3, [r7, #24]
      break;
 800d612:	e10b      	b.n	800d82c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800d614:	4b8c      	ldr	r3, [pc, #560]	@ (800d848 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d616:	61bb      	str	r3, [r7, #24]
      break;
 800d618:	e108      	b.n	800d82c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d61a:	4b88      	ldr	r3, [pc, #544]	@ (800d83c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d61c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d61e:	f003 0303 	and.w	r3, r3, #3
 800d622:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d624:	4b85      	ldr	r3, [pc, #532]	@ (800d83c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d628:	091b      	lsrs	r3, r3, #4
 800d62a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d62e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d630:	4b82      	ldr	r3, [pc, #520]	@ (800d83c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d634:	f003 0301 	and.w	r3, r3, #1
 800d638:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d63a:	4b80      	ldr	r3, [pc, #512]	@ (800d83c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d63c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d63e:	08db      	lsrs	r3, r3, #3
 800d640:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d644:	68fa      	ldr	r2, [r7, #12]
 800d646:	fb02 f303 	mul.w	r3, r2, r3
 800d64a:	ee07 3a90 	vmov	s15, r3
 800d64e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d652:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	f000 80e1 	beq.w	800d820 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	2b02      	cmp	r3, #2
 800d662:	f000 8083 	beq.w	800d76c <HAL_RCC_GetSysClockFreq+0x204>
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	2b02      	cmp	r3, #2
 800d66a:	f200 80a1 	bhi.w	800d7b0 <HAL_RCC_GetSysClockFreq+0x248>
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d003      	beq.n	800d67c <HAL_RCC_GetSysClockFreq+0x114>
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	2b01      	cmp	r3, #1
 800d678:	d056      	beq.n	800d728 <HAL_RCC_GetSysClockFreq+0x1c0>
 800d67a:	e099      	b.n	800d7b0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d67c:	4b6f      	ldr	r3, [pc, #444]	@ (800d83c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	f003 0320 	and.w	r3, r3, #32
 800d684:	2b00      	cmp	r3, #0
 800d686:	d02d      	beq.n	800d6e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d688:	4b6c      	ldr	r3, [pc, #432]	@ (800d83c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	08db      	lsrs	r3, r3, #3
 800d68e:	f003 0303 	and.w	r3, r3, #3
 800d692:	4a6b      	ldr	r2, [pc, #428]	@ (800d840 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d694:	fa22 f303 	lsr.w	r3, r2, r3
 800d698:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	ee07 3a90 	vmov	s15, r3
 800d6a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	ee07 3a90 	vmov	s15, r3
 800d6aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6b2:	4b62      	ldr	r3, [pc, #392]	@ (800d83c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6ba:	ee07 3a90 	vmov	s15, r3
 800d6be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800d6c6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800d84c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d6ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d6d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800d6e2:	e087      	b.n	800d7f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	ee07 3a90 	vmov	s15, r3
 800d6ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6ee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800d850 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d6f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6f6:	4b51      	ldr	r3, [pc, #324]	@ (800d83c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6fe:	ee07 3a90 	vmov	s15, r3
 800d702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d706:	ed97 6a02 	vldr	s12, [r7, #8]
 800d70a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800d84c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d70e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d716:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d71a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d71e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d722:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d726:	e065      	b.n	800d7f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	ee07 3a90 	vmov	s15, r3
 800d72e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d732:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800d854 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d73a:	4b40      	ldr	r3, [pc, #256]	@ (800d83c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d73c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d73e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d742:	ee07 3a90 	vmov	s15, r3
 800d746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d74a:	ed97 6a02 	vldr	s12, [r7, #8]
 800d74e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d84c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d75a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d75e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d762:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d766:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d76a:	e043      	b.n	800d7f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	ee07 3a90 	vmov	s15, r3
 800d772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d776:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800d858 <HAL_RCC_GetSysClockFreq+0x2f0>
 800d77a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d77e:	4b2f      	ldr	r3, [pc, #188]	@ (800d83c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d786:	ee07 3a90 	vmov	s15, r3
 800d78a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d78e:	ed97 6a02 	vldr	s12, [r7, #8]
 800d792:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800d84c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d79a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d79e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d7a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d7ae:	e021      	b.n	800d7f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	ee07 3a90 	vmov	s15, r3
 800d7b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7ba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800d854 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d7be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7c2:	4b1e      	ldr	r3, [pc, #120]	@ (800d83c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d7c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7ca:	ee07 3a90 	vmov	s15, r3
 800d7ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800d7d6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800d84c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d7da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d7e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d7f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d7f4:	4b11      	ldr	r3, [pc, #68]	@ (800d83c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d7f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7f8:	0a5b      	lsrs	r3, r3, #9
 800d7fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7fe:	3301      	adds	r3, #1
 800d800:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	ee07 3a90 	vmov	s15, r3
 800d808:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d80c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d818:	ee17 3a90 	vmov	r3, s15
 800d81c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800d81e:	e005      	b.n	800d82c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800d820:	2300      	movs	r3, #0
 800d822:	61bb      	str	r3, [r7, #24]
      break;
 800d824:	e002      	b.n	800d82c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800d826:	4b07      	ldr	r3, [pc, #28]	@ (800d844 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d828:	61bb      	str	r3, [r7, #24]
      break;
 800d82a:	bf00      	nop
  }

  return sysclockfreq;
 800d82c:	69bb      	ldr	r3, [r7, #24]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3724      	adds	r7, #36	@ 0x24
 800d832:	46bd      	mov	sp, r7
 800d834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d838:	4770      	bx	lr
 800d83a:	bf00      	nop
 800d83c:	58024400 	.word	0x58024400
 800d840:	03d09000 	.word	0x03d09000
 800d844:	003d0900 	.word	0x003d0900
 800d848:	017d7840 	.word	0x017d7840
 800d84c:	46000000 	.word	0x46000000
 800d850:	4c742400 	.word	0x4c742400
 800d854:	4a742400 	.word	0x4a742400
 800d858:	4bbebc20 	.word	0x4bbebc20

0800d85c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b082      	sub	sp, #8
 800d860:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d862:	f7ff fe81 	bl	800d568 <HAL_RCC_GetSysClockFreq>
 800d866:	4602      	mov	r2, r0
 800d868:	4b10      	ldr	r3, [pc, #64]	@ (800d8ac <HAL_RCC_GetHCLKFreq+0x50>)
 800d86a:	699b      	ldr	r3, [r3, #24]
 800d86c:	0a1b      	lsrs	r3, r3, #8
 800d86e:	f003 030f 	and.w	r3, r3, #15
 800d872:	490f      	ldr	r1, [pc, #60]	@ (800d8b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800d874:	5ccb      	ldrb	r3, [r1, r3]
 800d876:	f003 031f 	and.w	r3, r3, #31
 800d87a:	fa22 f303 	lsr.w	r3, r2, r3
 800d87e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d880:	4b0a      	ldr	r3, [pc, #40]	@ (800d8ac <HAL_RCC_GetHCLKFreq+0x50>)
 800d882:	699b      	ldr	r3, [r3, #24]
 800d884:	f003 030f 	and.w	r3, r3, #15
 800d888:	4a09      	ldr	r2, [pc, #36]	@ (800d8b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800d88a:	5cd3      	ldrb	r3, [r2, r3]
 800d88c:	f003 031f 	and.w	r3, r3, #31
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	fa22 f303 	lsr.w	r3, r2, r3
 800d896:	4a07      	ldr	r2, [pc, #28]	@ (800d8b4 <HAL_RCC_GetHCLKFreq+0x58>)
 800d898:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d89a:	4a07      	ldr	r2, [pc, #28]	@ (800d8b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d8a0:	4b04      	ldr	r3, [pc, #16]	@ (800d8b4 <HAL_RCC_GetHCLKFreq+0x58>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3708      	adds	r7, #8
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}
 800d8ac:	58024400 	.word	0x58024400
 800d8b0:	08017e20 	.word	0x08017e20
 800d8b4:	2400001c 	.word	0x2400001c
 800d8b8:	24000018 	.word	0x24000018

0800d8bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800d8c0:	f7ff ffcc 	bl	800d85c <HAL_RCC_GetHCLKFreq>
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	4b06      	ldr	r3, [pc, #24]	@ (800d8e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d8c8:	69db      	ldr	r3, [r3, #28]
 800d8ca:	091b      	lsrs	r3, r3, #4
 800d8cc:	f003 0307 	and.w	r3, r3, #7
 800d8d0:	4904      	ldr	r1, [pc, #16]	@ (800d8e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d8d2:	5ccb      	ldrb	r3, [r1, r3]
 800d8d4:	f003 031f 	and.w	r3, r3, #31
 800d8d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	58024400 	.word	0x58024400
 800d8e4:	08017e20 	.word	0x08017e20

0800d8e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800d8ec:	f7ff ffb6 	bl	800d85c <HAL_RCC_GetHCLKFreq>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	4b06      	ldr	r3, [pc, #24]	@ (800d90c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d8f4:	69db      	ldr	r3, [r3, #28]
 800d8f6:	0a1b      	lsrs	r3, r3, #8
 800d8f8:	f003 0307 	and.w	r3, r3, #7
 800d8fc:	4904      	ldr	r1, [pc, #16]	@ (800d910 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d8fe:	5ccb      	ldrb	r3, [r1, r3]
 800d900:	f003 031f 	and.w	r3, r3, #31
 800d904:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800d908:	4618      	mov	r0, r3
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	58024400 	.word	0x58024400
 800d910:	08017e20 	.word	0x08017e20

0800d914 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d918:	b0ca      	sub	sp, #296	@ 0x128
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d920:	2300      	movs	r3, #0
 800d922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d926:	2300      	movs	r3, #0
 800d928:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d92c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d934:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800d938:	2500      	movs	r5, #0
 800d93a:	ea54 0305 	orrs.w	r3, r4, r5
 800d93e:	d049      	beq.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800d940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d944:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d946:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d94a:	d02f      	beq.n	800d9ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d94c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d950:	d828      	bhi.n	800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d952:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d956:	d01a      	beq.n	800d98e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d958:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d95c:	d822      	bhi.n	800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d003      	beq.n	800d96a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d962:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d966:	d007      	beq.n	800d978 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d968:	e01c      	b.n	800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d96a:	4bb8      	ldr	r3, [pc, #736]	@ (800dc4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d96c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d96e:	4ab7      	ldr	r2, [pc, #732]	@ (800dc4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d970:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d974:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d976:	e01a      	b.n	800d9ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d97c:	3308      	adds	r3, #8
 800d97e:	2102      	movs	r1, #2
 800d980:	4618      	mov	r0, r3
 800d982:	f001 fc8f 	bl	800f2a4 <RCCEx_PLL2_Config>
 800d986:	4603      	mov	r3, r0
 800d988:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d98c:	e00f      	b.n	800d9ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d98e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d992:	3328      	adds	r3, #40	@ 0x28
 800d994:	2102      	movs	r1, #2
 800d996:	4618      	mov	r0, r3
 800d998:	f001 fd36 	bl	800f408 <RCCEx_PLL3_Config>
 800d99c:	4603      	mov	r3, r0
 800d99e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d9a2:	e004      	b.n	800d9ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d9aa:	e000      	b.n	800d9ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800d9ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d10a      	bne.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d9b6:	4ba5      	ldr	r3, [pc, #660]	@ (800dc4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d9b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d9be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d9c4:	4aa1      	ldr	r2, [pc, #644]	@ (800dc4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d9c6:	430b      	orrs	r3, r1
 800d9c8:	6513      	str	r3, [r2, #80]	@ 0x50
 800d9ca:	e003      	b.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d9d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d9d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9dc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800d9e0:	f04f 0900 	mov.w	r9, #0
 800d9e4:	ea58 0309 	orrs.w	r3, r8, r9
 800d9e8:	d047      	beq.n	800da7a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800d9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9f0:	2b04      	cmp	r3, #4
 800d9f2:	d82a      	bhi.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d9f4:	a201      	add	r2, pc, #4	@ (adr r2, 800d9fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800d9f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9fa:	bf00      	nop
 800d9fc:	0800da11 	.word	0x0800da11
 800da00:	0800da1f 	.word	0x0800da1f
 800da04:	0800da35 	.word	0x0800da35
 800da08:	0800da53 	.word	0x0800da53
 800da0c:	0800da53 	.word	0x0800da53
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800da10:	4b8e      	ldr	r3, [pc, #568]	@ (800dc4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da14:	4a8d      	ldr	r2, [pc, #564]	@ (800dc4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800da1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800da1c:	e01a      	b.n	800da54 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800da1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da22:	3308      	adds	r3, #8
 800da24:	2100      	movs	r1, #0
 800da26:	4618      	mov	r0, r3
 800da28:	f001 fc3c 	bl	800f2a4 <RCCEx_PLL2_Config>
 800da2c:	4603      	mov	r3, r0
 800da2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800da32:	e00f      	b.n	800da54 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800da34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da38:	3328      	adds	r3, #40	@ 0x28
 800da3a:	2100      	movs	r1, #0
 800da3c:	4618      	mov	r0, r3
 800da3e:	f001 fce3 	bl	800f408 <RCCEx_PLL3_Config>
 800da42:	4603      	mov	r3, r0
 800da44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800da48:	e004      	b.n	800da54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da4a:	2301      	movs	r3, #1
 800da4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800da50:	e000      	b.n	800da54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800da52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d10a      	bne.n	800da72 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800da5c:	4b7b      	ldr	r3, [pc, #492]	@ (800dc4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da60:	f023 0107 	bic.w	r1, r3, #7
 800da64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da6a:	4a78      	ldr	r2, [pc, #480]	@ (800dc4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da6c:	430b      	orrs	r3, r1
 800da6e:	6513      	str	r3, [r2, #80]	@ 0x50
 800da70:	e003      	b.n	800da7a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800da7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da82:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800da86:	f04f 0b00 	mov.w	fp, #0
 800da8a:	ea5a 030b 	orrs.w	r3, sl, fp
 800da8e:	d04c      	beq.n	800db2a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800da90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800da96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800da9a:	d030      	beq.n	800dafe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800da9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800daa0:	d829      	bhi.n	800daf6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800daa2:	2bc0      	cmp	r3, #192	@ 0xc0
 800daa4:	d02d      	beq.n	800db02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800daa6:	2bc0      	cmp	r3, #192	@ 0xc0
 800daa8:	d825      	bhi.n	800daf6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800daaa:	2b80      	cmp	r3, #128	@ 0x80
 800daac:	d018      	beq.n	800dae0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800daae:	2b80      	cmp	r3, #128	@ 0x80
 800dab0:	d821      	bhi.n	800daf6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d002      	beq.n	800dabc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800dab6:	2b40      	cmp	r3, #64	@ 0x40
 800dab8:	d007      	beq.n	800daca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800daba:	e01c      	b.n	800daf6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dabc:	4b63      	ldr	r3, [pc, #396]	@ (800dc4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dabe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dac0:	4a62      	ldr	r2, [pc, #392]	@ (800dc4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dac2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dac6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800dac8:	e01c      	b.n	800db04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800daca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dace:	3308      	adds	r3, #8
 800dad0:	2100      	movs	r1, #0
 800dad2:	4618      	mov	r0, r3
 800dad4:	f001 fbe6 	bl	800f2a4 <RCCEx_PLL2_Config>
 800dad8:	4603      	mov	r3, r0
 800dada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800dade:	e011      	b.n	800db04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dae4:	3328      	adds	r3, #40	@ 0x28
 800dae6:	2100      	movs	r1, #0
 800dae8:	4618      	mov	r0, r3
 800daea:	f001 fc8d 	bl	800f408 <RCCEx_PLL3_Config>
 800daee:	4603      	mov	r3, r0
 800daf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800daf4:	e006      	b.n	800db04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800daf6:	2301      	movs	r3, #1
 800daf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dafc:	e002      	b.n	800db04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800dafe:	bf00      	nop
 800db00:	e000      	b.n	800db04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800db02:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d10a      	bne.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800db0c:	4b4f      	ldr	r3, [pc, #316]	@ (800dc4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db10:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800db14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800db1a:	4a4c      	ldr	r2, [pc, #304]	@ (800dc4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db1c:	430b      	orrs	r3, r1
 800db1e:	6513      	str	r3, [r2, #80]	@ 0x50
 800db20:	e003      	b.n	800db2a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800db2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db32:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800db36:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800db3a:	2300      	movs	r3, #0
 800db3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800db40:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800db44:	460b      	mov	r3, r1
 800db46:	4313      	orrs	r3, r2
 800db48:	d053      	beq.n	800dbf2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800db4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800db52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800db56:	d035      	beq.n	800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800db58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800db5c:	d82e      	bhi.n	800dbbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800db5e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800db62:	d031      	beq.n	800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800db64:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800db68:	d828      	bhi.n	800dbbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800db6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800db6e:	d01a      	beq.n	800dba6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800db70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800db74:	d822      	bhi.n	800dbbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800db76:	2b00      	cmp	r3, #0
 800db78:	d003      	beq.n	800db82 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800db7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800db7e:	d007      	beq.n	800db90 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800db80:	e01c      	b.n	800dbbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db82:	4b32      	ldr	r3, [pc, #200]	@ (800dc4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db86:	4a31      	ldr	r2, [pc, #196]	@ (800dc4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800db8e:	e01c      	b.n	800dbca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800db90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db94:	3308      	adds	r3, #8
 800db96:	2100      	movs	r1, #0
 800db98:	4618      	mov	r0, r3
 800db9a:	f001 fb83 	bl	800f2a4 <RCCEx_PLL2_Config>
 800db9e:	4603      	mov	r3, r0
 800dba0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800dba4:	e011      	b.n	800dbca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbaa:	3328      	adds	r3, #40	@ 0x28
 800dbac:	2100      	movs	r1, #0
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f001 fc2a 	bl	800f408 <RCCEx_PLL3_Config>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dbba:	e006      	b.n	800dbca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dbc2:	e002      	b.n	800dbca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800dbc4:	bf00      	nop
 800dbc6:	e000      	b.n	800dbca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800dbc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d10b      	bne.n	800dbea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800dbd2:	4b1e      	ldr	r3, [pc, #120]	@ (800dc4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dbd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbd6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800dbda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800dbe2:	4a1a      	ldr	r2, [pc, #104]	@ (800dc4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dbe4:	430b      	orrs	r3, r1
 800dbe6:	6593      	str	r3, [r2, #88]	@ 0x58
 800dbe8:	e003      	b.n	800dbf2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800dbf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800dbfe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800dc02:	2300      	movs	r3, #0
 800dc04:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800dc08:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800dc0c:	460b      	mov	r3, r1
 800dc0e:	4313      	orrs	r3, r2
 800dc10:	d056      	beq.n	800dcc0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800dc12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800dc1a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dc1e:	d038      	beq.n	800dc92 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800dc20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dc24:	d831      	bhi.n	800dc8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800dc26:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dc2a:	d034      	beq.n	800dc96 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800dc2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dc30:	d82b      	bhi.n	800dc8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800dc32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dc36:	d01d      	beq.n	800dc74 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800dc38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dc3c:	d825      	bhi.n	800dc8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d006      	beq.n	800dc50 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800dc42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dc46:	d00a      	beq.n	800dc5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800dc48:	e01f      	b.n	800dc8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800dc4a:	bf00      	nop
 800dc4c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc50:	4ba2      	ldr	r3, [pc, #648]	@ (800dedc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc54:	4aa1      	ldr	r2, [pc, #644]	@ (800dedc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dc5c:	e01c      	b.n	800dc98 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dc5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc62:	3308      	adds	r3, #8
 800dc64:	2100      	movs	r1, #0
 800dc66:	4618      	mov	r0, r3
 800dc68:	f001 fb1c 	bl	800f2a4 <RCCEx_PLL2_Config>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800dc72:	e011      	b.n	800dc98 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dc74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc78:	3328      	adds	r3, #40	@ 0x28
 800dc7a:	2100      	movs	r1, #0
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f001 fbc3 	bl	800f408 <RCCEx_PLL3_Config>
 800dc82:	4603      	mov	r3, r0
 800dc84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dc88:	e006      	b.n	800dc98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dc90:	e002      	b.n	800dc98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800dc92:	bf00      	nop
 800dc94:	e000      	b.n	800dc98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800dc96:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d10b      	bne.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800dca0:	4b8e      	ldr	r3, [pc, #568]	@ (800dedc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dca4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800dca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800dcb0:	4a8a      	ldr	r2, [pc, #552]	@ (800dedc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dcb2:	430b      	orrs	r3, r1
 800dcb4:	6593      	str	r3, [r2, #88]	@ 0x58
 800dcb6:	e003      	b.n	800dcc0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dcbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800dcc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800dccc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800dcd6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800dcda:	460b      	mov	r3, r1
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	d03a      	beq.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800dce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dce6:	2b30      	cmp	r3, #48	@ 0x30
 800dce8:	d01f      	beq.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800dcea:	2b30      	cmp	r3, #48	@ 0x30
 800dcec:	d819      	bhi.n	800dd22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800dcee:	2b20      	cmp	r3, #32
 800dcf0:	d00c      	beq.n	800dd0c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800dcf2:	2b20      	cmp	r3, #32
 800dcf4:	d815      	bhi.n	800dd22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d019      	beq.n	800dd2e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800dcfa:	2b10      	cmp	r3, #16
 800dcfc:	d111      	bne.n	800dd22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dcfe:	4b77      	ldr	r3, [pc, #476]	@ (800dedc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dd00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd02:	4a76      	ldr	r2, [pc, #472]	@ (800dedc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dd04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dd08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800dd0a:	e011      	b.n	800dd30 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dd0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd10:	3308      	adds	r3, #8
 800dd12:	2102      	movs	r1, #2
 800dd14:	4618      	mov	r0, r3
 800dd16:	f001 fac5 	bl	800f2a4 <RCCEx_PLL2_Config>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800dd20:	e006      	b.n	800dd30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800dd22:	2301      	movs	r3, #1
 800dd24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dd28:	e002      	b.n	800dd30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800dd2a:	bf00      	nop
 800dd2c:	e000      	b.n	800dd30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800dd2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d10a      	bne.n	800dd4e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800dd38:	4b68      	ldr	r3, [pc, #416]	@ (800dedc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dd3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd3c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800dd40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd46:	4a65      	ldr	r2, [pc, #404]	@ (800dedc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dd48:	430b      	orrs	r3, r1
 800dd4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800dd4c:	e003      	b.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800dd56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800dd62:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800dd66:	2300      	movs	r3, #0
 800dd68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800dd6c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800dd70:	460b      	mov	r3, r1
 800dd72:	4313      	orrs	r3, r2
 800dd74:	d051      	beq.n	800de1a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800dd76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dd7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dd80:	d035      	beq.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800dd82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dd86:	d82e      	bhi.n	800dde6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dd88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dd8c:	d031      	beq.n	800ddf2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800dd8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dd92:	d828      	bhi.n	800dde6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dd94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dd98:	d01a      	beq.n	800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800dd9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dd9e:	d822      	bhi.n	800dde6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d003      	beq.n	800ddac <HAL_RCCEx_PeriphCLKConfig+0x498>
 800dda4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dda8:	d007      	beq.n	800ddba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ddaa:	e01c      	b.n	800dde6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ddac:	4b4b      	ldr	r3, [pc, #300]	@ (800dedc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ddae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddb0:	4a4a      	ldr	r2, [pc, #296]	@ (800dedc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ddb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ddb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ddb8:	e01c      	b.n	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ddba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddbe:	3308      	adds	r3, #8
 800ddc0:	2100      	movs	r1, #0
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f001 fa6e 	bl	800f2a4 <RCCEx_PLL2_Config>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ddce:	e011      	b.n	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ddd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddd4:	3328      	adds	r3, #40	@ 0x28
 800ddd6:	2100      	movs	r1, #0
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f001 fb15 	bl	800f408 <RCCEx_PLL3_Config>
 800ddde:	4603      	mov	r3, r0
 800dde0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dde4:	e006      	b.n	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dde6:	2301      	movs	r3, #1
 800dde8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ddec:	e002      	b.n	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ddee:	bf00      	nop
 800ddf0:	e000      	b.n	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ddf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ddf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d10a      	bne.n	800de12 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ddfc:	4b37      	ldr	r3, [pc, #220]	@ (800dedc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ddfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de00:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800de04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de0a:	4a34      	ldr	r2, [pc, #208]	@ (800dedc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de0c:	430b      	orrs	r3, r1
 800de0e:	6513      	str	r3, [r2, #80]	@ 0x50
 800de10:	e003      	b.n	800de1a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800de1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de22:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800de26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800de2a:	2300      	movs	r3, #0
 800de2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800de30:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800de34:	460b      	mov	r3, r1
 800de36:	4313      	orrs	r3, r2
 800de38:	d056      	beq.n	800dee8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800de3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800de44:	d033      	beq.n	800deae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800de46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800de4a:	d82c      	bhi.n	800dea6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800de4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800de50:	d02f      	beq.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800de52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800de56:	d826      	bhi.n	800dea6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800de58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800de5c:	d02b      	beq.n	800deb6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800de5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800de62:	d820      	bhi.n	800dea6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800de64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800de68:	d012      	beq.n	800de90 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800de6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800de6e:	d81a      	bhi.n	800dea6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800de70:	2b00      	cmp	r3, #0
 800de72:	d022      	beq.n	800deba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800de74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de78:	d115      	bne.n	800dea6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800de7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de7e:	3308      	adds	r3, #8
 800de80:	2101      	movs	r1, #1
 800de82:	4618      	mov	r0, r3
 800de84:	f001 fa0e 	bl	800f2a4 <RCCEx_PLL2_Config>
 800de88:	4603      	mov	r3, r0
 800de8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800de8e:	e015      	b.n	800debc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800de90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de94:	3328      	adds	r3, #40	@ 0x28
 800de96:	2101      	movs	r1, #1
 800de98:	4618      	mov	r0, r3
 800de9a:	f001 fab5 	bl	800f408 <RCCEx_PLL3_Config>
 800de9e:	4603      	mov	r3, r0
 800dea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800dea4:	e00a      	b.n	800debc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dea6:	2301      	movs	r3, #1
 800dea8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800deac:	e006      	b.n	800debc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800deae:	bf00      	nop
 800deb0:	e004      	b.n	800debc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800deb2:	bf00      	nop
 800deb4:	e002      	b.n	800debc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800deb6:	bf00      	nop
 800deb8:	e000      	b.n	800debc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800deba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800debc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d10d      	bne.n	800dee0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800dec4:	4b05      	ldr	r3, [pc, #20]	@ (800dedc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dec8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800decc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ded0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ded2:	4a02      	ldr	r2, [pc, #8]	@ (800dedc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ded4:	430b      	orrs	r3, r1
 800ded6:	6513      	str	r3, [r2, #80]	@ 0x50
 800ded8:	e006      	b.n	800dee8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800deda:	bf00      	nop
 800dedc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dee0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dee4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800dee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800deec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800def4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800def8:	2300      	movs	r3, #0
 800defa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800defe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800df02:	460b      	mov	r3, r1
 800df04:	4313      	orrs	r3, r2
 800df06:	d055      	beq.n	800dfb4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800df08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800df10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800df14:	d033      	beq.n	800df7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800df16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800df1a:	d82c      	bhi.n	800df76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800df1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df20:	d02f      	beq.n	800df82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800df22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df26:	d826      	bhi.n	800df76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800df28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800df2c:	d02b      	beq.n	800df86 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800df2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800df32:	d820      	bhi.n	800df76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800df34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800df38:	d012      	beq.n	800df60 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800df3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800df3e:	d81a      	bhi.n	800df76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800df40:	2b00      	cmp	r3, #0
 800df42:	d022      	beq.n	800df8a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800df44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800df48:	d115      	bne.n	800df76 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800df4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df4e:	3308      	adds	r3, #8
 800df50:	2101      	movs	r1, #1
 800df52:	4618      	mov	r0, r3
 800df54:	f001 f9a6 	bl	800f2a4 <RCCEx_PLL2_Config>
 800df58:	4603      	mov	r3, r0
 800df5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800df5e:	e015      	b.n	800df8c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800df60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df64:	3328      	adds	r3, #40	@ 0x28
 800df66:	2101      	movs	r1, #1
 800df68:	4618      	mov	r0, r3
 800df6a:	f001 fa4d 	bl	800f408 <RCCEx_PLL3_Config>
 800df6e:	4603      	mov	r3, r0
 800df70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800df74:	e00a      	b.n	800df8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800df76:	2301      	movs	r3, #1
 800df78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800df7c:	e006      	b.n	800df8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800df7e:	bf00      	nop
 800df80:	e004      	b.n	800df8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800df82:	bf00      	nop
 800df84:	e002      	b.n	800df8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800df86:	bf00      	nop
 800df88:	e000      	b.n	800df8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800df8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df90:	2b00      	cmp	r3, #0
 800df92:	d10b      	bne.n	800dfac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800df94:	4ba3      	ldr	r3, [pc, #652]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df98:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800df9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfa0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800dfa4:	4a9f      	ldr	r2, [pc, #636]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfa6:	430b      	orrs	r3, r1
 800dfa8:	6593      	str	r3, [r2, #88]	@ 0x58
 800dfaa:	e003      	b.n	800dfb4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dfb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800dfb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfbc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800dfc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dfca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800dfce:	460b      	mov	r3, r1
 800dfd0:	4313      	orrs	r3, r2
 800dfd2:	d037      	beq.n	800e044 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800dfd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dfda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dfde:	d00e      	beq.n	800dffe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800dfe0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dfe4:	d816      	bhi.n	800e014 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d018      	beq.n	800e01c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800dfea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dfee:	d111      	bne.n	800e014 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dff0:	4b8c      	ldr	r3, [pc, #560]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dff4:	4a8b      	ldr	r2, [pc, #556]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dff6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dffa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800dffc:	e00f      	b.n	800e01e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e002:	3308      	adds	r3, #8
 800e004:	2101      	movs	r1, #1
 800e006:	4618      	mov	r0, r3
 800e008:	f001 f94c 	bl	800f2a4 <RCCEx_PLL2_Config>
 800e00c:	4603      	mov	r3, r0
 800e00e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e012:	e004      	b.n	800e01e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e014:	2301      	movs	r3, #1
 800e016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e01a:	e000      	b.n	800e01e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800e01c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e01e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e022:	2b00      	cmp	r3, #0
 800e024:	d10a      	bne.n	800e03c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e026:	4b7f      	ldr	r3, [pc, #508]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e02a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e034:	4a7b      	ldr	r2, [pc, #492]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e036:	430b      	orrs	r3, r1
 800e038:	6513      	str	r3, [r2, #80]	@ 0x50
 800e03a:	e003      	b.n	800e044 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e03c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e040:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800e050:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e054:	2300      	movs	r3, #0
 800e056:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e05a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800e05e:	460b      	mov	r3, r1
 800e060:	4313      	orrs	r3, r2
 800e062:	d039      	beq.n	800e0d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e06a:	2b03      	cmp	r3, #3
 800e06c:	d81c      	bhi.n	800e0a8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800e06e:	a201      	add	r2, pc, #4	@ (adr r2, 800e074 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800e070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e074:	0800e0b1 	.word	0x0800e0b1
 800e078:	0800e085 	.word	0x0800e085
 800e07c:	0800e093 	.word	0x0800e093
 800e080:	0800e0b1 	.word	0x0800e0b1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e084:	4b67      	ldr	r3, [pc, #412]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e088:	4a66      	ldr	r2, [pc, #408]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e08a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e08e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e090:	e00f      	b.n	800e0b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e096:	3308      	adds	r3, #8
 800e098:	2102      	movs	r1, #2
 800e09a:	4618      	mov	r0, r3
 800e09c:	f001 f902 	bl	800f2a4 <RCCEx_PLL2_Config>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e0a6:	e004      	b.n	800e0b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e0ae:	e000      	b.n	800e0b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800e0b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e0b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d10a      	bne.n	800e0d0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e0ba:	4b5a      	ldr	r3, [pc, #360]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e0be:	f023 0103 	bic.w	r1, r3, #3
 800e0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e0c8:	4a56      	ldr	r2, [pc, #344]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0ca:	430b      	orrs	r3, r1
 800e0cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e0ce:	e003      	b.n	800e0d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e0d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e0d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800e0e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e0ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	4313      	orrs	r3, r2
 800e0f6:	f000 809f 	beq.w	800e238 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e0fa:	4b4b      	ldr	r3, [pc, #300]	@ (800e228 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	4a4a      	ldr	r2, [pc, #296]	@ (800e228 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e104:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e106:	f7f4 fda1 	bl	8002c4c <HAL_GetTick>
 800e10a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e10e:	e00b      	b.n	800e128 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e110:	f7f4 fd9c 	bl	8002c4c <HAL_GetTick>
 800e114:	4602      	mov	r2, r0
 800e116:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e11a:	1ad3      	subs	r3, r2, r3
 800e11c:	2b64      	cmp	r3, #100	@ 0x64
 800e11e:	d903      	bls.n	800e128 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800e120:	2303      	movs	r3, #3
 800e122:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e126:	e005      	b.n	800e134 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e128:	4b3f      	ldr	r3, [pc, #252]	@ (800e228 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e130:	2b00      	cmp	r3, #0
 800e132:	d0ed      	beq.n	800e110 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800e134:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d179      	bne.n	800e230 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e13c:	4b39      	ldr	r3, [pc, #228]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e13e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e144:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e148:	4053      	eors	r3, r2
 800e14a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d015      	beq.n	800e17e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e152:	4b34      	ldr	r3, [pc, #208]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e156:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e15a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e15e:	4b31      	ldr	r3, [pc, #196]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e162:	4a30      	ldr	r2, [pc, #192]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e168:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e16a:	4b2e      	ldr	r3, [pc, #184]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e16c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e16e:	4a2d      	ldr	r2, [pc, #180]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e170:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e174:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e176:	4a2b      	ldr	r2, [pc, #172]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e178:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e17c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e17e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e182:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e18a:	d118      	bne.n	800e1be <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e18c:	f7f4 fd5e 	bl	8002c4c <HAL_GetTick>
 800e190:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e194:	e00d      	b.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e196:	f7f4 fd59 	bl	8002c4c <HAL_GetTick>
 800e19a:	4602      	mov	r2, r0
 800e19c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e1a0:	1ad2      	subs	r2, r2, r3
 800e1a2:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d903      	bls.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800e1aa:	2303      	movs	r3, #3
 800e1ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800e1b0:	e005      	b.n	800e1be <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e1b2:	4b1c      	ldr	r3, [pc, #112]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e1b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e1b6:	f003 0302 	and.w	r3, r3, #2
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d0eb      	beq.n	800e196 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800e1be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d129      	bne.n	800e21a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e1ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e1d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e1d6:	d10e      	bne.n	800e1f6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800e1d8:	4b12      	ldr	r3, [pc, #72]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e1da:	691b      	ldr	r3, [r3, #16]
 800e1dc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800e1e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e1e8:	091a      	lsrs	r2, r3, #4
 800e1ea:	4b10      	ldr	r3, [pc, #64]	@ (800e22c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800e1ec:	4013      	ands	r3, r2
 800e1ee:	4a0d      	ldr	r2, [pc, #52]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e1f0:	430b      	orrs	r3, r1
 800e1f2:	6113      	str	r3, [r2, #16]
 800e1f4:	e005      	b.n	800e202 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800e1f6:	4b0b      	ldr	r3, [pc, #44]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e1f8:	691b      	ldr	r3, [r3, #16]
 800e1fa:	4a0a      	ldr	r2, [pc, #40]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e1fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e200:	6113      	str	r3, [r2, #16]
 800e202:	4b08      	ldr	r3, [pc, #32]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e204:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e20a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e20e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e212:	4a04      	ldr	r2, [pc, #16]	@ (800e224 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e214:	430b      	orrs	r3, r1
 800e216:	6713      	str	r3, [r2, #112]	@ 0x70
 800e218:	e00e      	b.n	800e238 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e21a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e21e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e222:	e009      	b.n	800e238 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800e224:	58024400 	.word	0x58024400
 800e228:	58024800 	.word	0x58024800
 800e22c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e230:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e234:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e240:	f002 0301 	and.w	r3, r2, #1
 800e244:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e248:	2300      	movs	r3, #0
 800e24a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e24e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e252:	460b      	mov	r3, r1
 800e254:	4313      	orrs	r3, r2
 800e256:	f000 8089 	beq.w	800e36c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e25e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e260:	2b28      	cmp	r3, #40	@ 0x28
 800e262:	d86b      	bhi.n	800e33c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800e264:	a201      	add	r2, pc, #4	@ (adr r2, 800e26c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e26a:	bf00      	nop
 800e26c:	0800e345 	.word	0x0800e345
 800e270:	0800e33d 	.word	0x0800e33d
 800e274:	0800e33d 	.word	0x0800e33d
 800e278:	0800e33d 	.word	0x0800e33d
 800e27c:	0800e33d 	.word	0x0800e33d
 800e280:	0800e33d 	.word	0x0800e33d
 800e284:	0800e33d 	.word	0x0800e33d
 800e288:	0800e33d 	.word	0x0800e33d
 800e28c:	0800e311 	.word	0x0800e311
 800e290:	0800e33d 	.word	0x0800e33d
 800e294:	0800e33d 	.word	0x0800e33d
 800e298:	0800e33d 	.word	0x0800e33d
 800e29c:	0800e33d 	.word	0x0800e33d
 800e2a0:	0800e33d 	.word	0x0800e33d
 800e2a4:	0800e33d 	.word	0x0800e33d
 800e2a8:	0800e33d 	.word	0x0800e33d
 800e2ac:	0800e327 	.word	0x0800e327
 800e2b0:	0800e33d 	.word	0x0800e33d
 800e2b4:	0800e33d 	.word	0x0800e33d
 800e2b8:	0800e33d 	.word	0x0800e33d
 800e2bc:	0800e33d 	.word	0x0800e33d
 800e2c0:	0800e33d 	.word	0x0800e33d
 800e2c4:	0800e33d 	.word	0x0800e33d
 800e2c8:	0800e33d 	.word	0x0800e33d
 800e2cc:	0800e345 	.word	0x0800e345
 800e2d0:	0800e33d 	.word	0x0800e33d
 800e2d4:	0800e33d 	.word	0x0800e33d
 800e2d8:	0800e33d 	.word	0x0800e33d
 800e2dc:	0800e33d 	.word	0x0800e33d
 800e2e0:	0800e33d 	.word	0x0800e33d
 800e2e4:	0800e33d 	.word	0x0800e33d
 800e2e8:	0800e33d 	.word	0x0800e33d
 800e2ec:	0800e345 	.word	0x0800e345
 800e2f0:	0800e33d 	.word	0x0800e33d
 800e2f4:	0800e33d 	.word	0x0800e33d
 800e2f8:	0800e33d 	.word	0x0800e33d
 800e2fc:	0800e33d 	.word	0x0800e33d
 800e300:	0800e33d 	.word	0x0800e33d
 800e304:	0800e33d 	.word	0x0800e33d
 800e308:	0800e33d 	.word	0x0800e33d
 800e30c:	0800e345 	.word	0x0800e345
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e314:	3308      	adds	r3, #8
 800e316:	2101      	movs	r1, #1
 800e318:	4618      	mov	r0, r3
 800e31a:	f000 ffc3 	bl	800f2a4 <RCCEx_PLL2_Config>
 800e31e:	4603      	mov	r3, r0
 800e320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e324:	e00f      	b.n	800e346 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e32a:	3328      	adds	r3, #40	@ 0x28
 800e32c:	2101      	movs	r1, #1
 800e32e:	4618      	mov	r0, r3
 800e330:	f001 f86a 	bl	800f408 <RCCEx_PLL3_Config>
 800e334:	4603      	mov	r3, r0
 800e336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e33a:	e004      	b.n	800e346 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e33c:	2301      	movs	r3, #1
 800e33e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e342:	e000      	b.n	800e346 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800e344:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d10a      	bne.n	800e364 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e34e:	4bbf      	ldr	r3, [pc, #764]	@ (800e64c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e352:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800e356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e35a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e35c:	4abb      	ldr	r2, [pc, #748]	@ (800e64c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e35e:	430b      	orrs	r3, r1
 800e360:	6553      	str	r3, [r2, #84]	@ 0x54
 800e362:	e003      	b.n	800e36c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e364:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e368:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e374:	f002 0302 	and.w	r3, r2, #2
 800e378:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e37c:	2300      	movs	r3, #0
 800e37e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e382:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800e386:	460b      	mov	r3, r1
 800e388:	4313      	orrs	r3, r2
 800e38a:	d041      	beq.n	800e410 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e38c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e390:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e392:	2b05      	cmp	r3, #5
 800e394:	d824      	bhi.n	800e3e0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800e396:	a201      	add	r2, pc, #4	@ (adr r2, 800e39c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800e398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e39c:	0800e3e9 	.word	0x0800e3e9
 800e3a0:	0800e3b5 	.word	0x0800e3b5
 800e3a4:	0800e3cb 	.word	0x0800e3cb
 800e3a8:	0800e3e9 	.word	0x0800e3e9
 800e3ac:	0800e3e9 	.word	0x0800e3e9
 800e3b0:	0800e3e9 	.word	0x0800e3e9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e3b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3b8:	3308      	adds	r3, #8
 800e3ba:	2101      	movs	r1, #1
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f000 ff71 	bl	800f2a4 <RCCEx_PLL2_Config>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e3c8:	e00f      	b.n	800e3ea <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3ce:	3328      	adds	r3, #40	@ 0x28
 800e3d0:	2101      	movs	r1, #1
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f001 f818 	bl	800f408 <RCCEx_PLL3_Config>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e3de:	e004      	b.n	800e3ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e3e6:	e000      	b.n	800e3ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800e3e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e3ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d10a      	bne.n	800e408 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e3f2:	4b96      	ldr	r3, [pc, #600]	@ (800e64c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e3f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3f6:	f023 0107 	bic.w	r1, r3, #7
 800e3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e400:	4a92      	ldr	r2, [pc, #584]	@ (800e64c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e402:	430b      	orrs	r3, r1
 800e404:	6553      	str	r3, [r2, #84]	@ 0x54
 800e406:	e003      	b.n	800e410 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e40c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e418:	f002 0304 	and.w	r3, r2, #4
 800e41c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e420:	2300      	movs	r3, #0
 800e422:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e426:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800e42a:	460b      	mov	r3, r1
 800e42c:	4313      	orrs	r3, r2
 800e42e:	d044      	beq.n	800e4ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e434:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e438:	2b05      	cmp	r3, #5
 800e43a:	d825      	bhi.n	800e488 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800e43c:	a201      	add	r2, pc, #4	@ (adr r2, 800e444 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800e43e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e442:	bf00      	nop
 800e444:	0800e491 	.word	0x0800e491
 800e448:	0800e45d 	.word	0x0800e45d
 800e44c:	0800e473 	.word	0x0800e473
 800e450:	0800e491 	.word	0x0800e491
 800e454:	0800e491 	.word	0x0800e491
 800e458:	0800e491 	.word	0x0800e491
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e45c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e460:	3308      	adds	r3, #8
 800e462:	2101      	movs	r1, #1
 800e464:	4618      	mov	r0, r3
 800e466:	f000 ff1d 	bl	800f2a4 <RCCEx_PLL2_Config>
 800e46a:	4603      	mov	r3, r0
 800e46c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e470:	e00f      	b.n	800e492 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e476:	3328      	adds	r3, #40	@ 0x28
 800e478:	2101      	movs	r1, #1
 800e47a:	4618      	mov	r0, r3
 800e47c:	f000 ffc4 	bl	800f408 <RCCEx_PLL3_Config>
 800e480:	4603      	mov	r3, r0
 800e482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e486:	e004      	b.n	800e492 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e488:	2301      	movs	r3, #1
 800e48a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e48e:	e000      	b.n	800e492 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800e490:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e496:	2b00      	cmp	r3, #0
 800e498:	d10b      	bne.n	800e4b2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e49a:	4b6c      	ldr	r3, [pc, #432]	@ (800e64c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e49c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e49e:	f023 0107 	bic.w	r1, r3, #7
 800e4a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e4aa:	4a68      	ldr	r2, [pc, #416]	@ (800e64c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e4ac:	430b      	orrs	r3, r1
 800e4ae:	6593      	str	r3, [r2, #88]	@ 0x58
 800e4b0:	e003      	b.n	800e4ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e4ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c2:	f002 0320 	and.w	r3, r2, #32
 800e4c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e4d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	4313      	orrs	r3, r2
 800e4d8:	d055      	beq.n	800e586 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e4da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e4e6:	d033      	beq.n	800e550 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800e4e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e4ec:	d82c      	bhi.n	800e548 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e4ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4f2:	d02f      	beq.n	800e554 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800e4f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4f8:	d826      	bhi.n	800e548 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e4fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e4fe:	d02b      	beq.n	800e558 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800e500:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e504:	d820      	bhi.n	800e548 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e506:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e50a:	d012      	beq.n	800e532 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800e50c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e510:	d81a      	bhi.n	800e548 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e512:	2b00      	cmp	r3, #0
 800e514:	d022      	beq.n	800e55c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800e516:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e51a:	d115      	bne.n	800e548 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e51c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e520:	3308      	adds	r3, #8
 800e522:	2100      	movs	r1, #0
 800e524:	4618      	mov	r0, r3
 800e526:	f000 febd 	bl	800f2a4 <RCCEx_PLL2_Config>
 800e52a:	4603      	mov	r3, r0
 800e52c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e530:	e015      	b.n	800e55e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e536:	3328      	adds	r3, #40	@ 0x28
 800e538:	2102      	movs	r1, #2
 800e53a:	4618      	mov	r0, r3
 800e53c:	f000 ff64 	bl	800f408 <RCCEx_PLL3_Config>
 800e540:	4603      	mov	r3, r0
 800e542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e546:	e00a      	b.n	800e55e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e548:	2301      	movs	r3, #1
 800e54a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e54e:	e006      	b.n	800e55e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e550:	bf00      	nop
 800e552:	e004      	b.n	800e55e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e554:	bf00      	nop
 800e556:	e002      	b.n	800e55e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e558:	bf00      	nop
 800e55a:	e000      	b.n	800e55e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e55c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e55e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e562:	2b00      	cmp	r3, #0
 800e564:	d10b      	bne.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e566:	4b39      	ldr	r3, [pc, #228]	@ (800e64c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e56a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e56e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e576:	4a35      	ldr	r2, [pc, #212]	@ (800e64c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e578:	430b      	orrs	r3, r1
 800e57a:	6553      	str	r3, [r2, #84]	@ 0x54
 800e57c:	e003      	b.n	800e586 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e57e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e582:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800e592:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e596:	2300      	movs	r3, #0
 800e598:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e59c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800e5a0:	460b      	mov	r3, r1
 800e5a2:	4313      	orrs	r3, r2
 800e5a4:	d058      	beq.n	800e658 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e5a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e5ae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e5b2:	d033      	beq.n	800e61c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800e5b4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e5b8:	d82c      	bhi.n	800e614 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e5ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5be:	d02f      	beq.n	800e620 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800e5c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5c4:	d826      	bhi.n	800e614 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e5c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e5ca:	d02b      	beq.n	800e624 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800e5cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e5d0:	d820      	bhi.n	800e614 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e5d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e5d6:	d012      	beq.n	800e5fe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800e5d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e5dc:	d81a      	bhi.n	800e614 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d022      	beq.n	800e628 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800e5e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e5e6:	d115      	bne.n	800e614 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e5e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5ec:	3308      	adds	r3, #8
 800e5ee:	2100      	movs	r1, #0
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f000 fe57 	bl	800f2a4 <RCCEx_PLL2_Config>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e5fc:	e015      	b.n	800e62a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e5fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e602:	3328      	adds	r3, #40	@ 0x28
 800e604:	2102      	movs	r1, #2
 800e606:	4618      	mov	r0, r3
 800e608:	f000 fefe 	bl	800f408 <RCCEx_PLL3_Config>
 800e60c:	4603      	mov	r3, r0
 800e60e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e612:	e00a      	b.n	800e62a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e614:	2301      	movs	r3, #1
 800e616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e61a:	e006      	b.n	800e62a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e61c:	bf00      	nop
 800e61e:	e004      	b.n	800e62a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e620:	bf00      	nop
 800e622:	e002      	b.n	800e62a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e624:	bf00      	nop
 800e626:	e000      	b.n	800e62a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e62a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d10e      	bne.n	800e650 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e632:	4b06      	ldr	r3, [pc, #24]	@ (800e64c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e636:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800e63a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e63e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e642:	4a02      	ldr	r2, [pc, #8]	@ (800e64c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e644:	430b      	orrs	r3, r1
 800e646:	6593      	str	r3, [r2, #88]	@ 0x58
 800e648:	e006      	b.n	800e658 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800e64a:	bf00      	nop
 800e64c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e654:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e660:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800e664:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e668:	2300      	movs	r3, #0
 800e66a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e66e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800e672:	460b      	mov	r3, r1
 800e674:	4313      	orrs	r3, r2
 800e676:	d055      	beq.n	800e724 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e67c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e680:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e684:	d033      	beq.n	800e6ee <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800e686:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e68a:	d82c      	bhi.n	800e6e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e68c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e690:	d02f      	beq.n	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800e692:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e696:	d826      	bhi.n	800e6e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e698:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e69c:	d02b      	beq.n	800e6f6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800e69e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e6a2:	d820      	bhi.n	800e6e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e6a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e6a8:	d012      	beq.n	800e6d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800e6aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e6ae:	d81a      	bhi.n	800e6e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d022      	beq.n	800e6fa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800e6b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e6b8:	d115      	bne.n	800e6e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6be:	3308      	adds	r3, #8
 800e6c0:	2100      	movs	r1, #0
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f000 fdee 	bl	800f2a4 <RCCEx_PLL2_Config>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e6ce:	e015      	b.n	800e6fc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e6d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6d4:	3328      	adds	r3, #40	@ 0x28
 800e6d6:	2102      	movs	r1, #2
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f000 fe95 	bl	800f408 <RCCEx_PLL3_Config>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e6e4:	e00a      	b.n	800e6fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e6ec:	e006      	b.n	800e6fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e6ee:	bf00      	nop
 800e6f0:	e004      	b.n	800e6fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e6f2:	bf00      	nop
 800e6f4:	e002      	b.n	800e6fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e6f6:	bf00      	nop
 800e6f8:	e000      	b.n	800e6fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e6fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e700:	2b00      	cmp	r3, #0
 800e702:	d10b      	bne.n	800e71c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e704:	4ba1      	ldr	r3, [pc, #644]	@ (800e98c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e708:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800e70c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e710:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e714:	4a9d      	ldr	r2, [pc, #628]	@ (800e98c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e716:	430b      	orrs	r3, r1
 800e718:	6593      	str	r3, [r2, #88]	@ 0x58
 800e71a:	e003      	b.n	800e724 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e71c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e720:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e72c:	f002 0308 	and.w	r3, r2, #8
 800e730:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e734:	2300      	movs	r3, #0
 800e736:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e73a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800e73e:	460b      	mov	r3, r1
 800e740:	4313      	orrs	r3, r2
 800e742:	d01e      	beq.n	800e782 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800e744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e748:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e74c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e750:	d10c      	bne.n	800e76c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e756:	3328      	adds	r3, #40	@ 0x28
 800e758:	2102      	movs	r1, #2
 800e75a:	4618      	mov	r0, r3
 800e75c:	f000 fe54 	bl	800f408 <RCCEx_PLL3_Config>
 800e760:	4603      	mov	r3, r0
 800e762:	2b00      	cmp	r3, #0
 800e764:	d002      	beq.n	800e76c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800e766:	2301      	movs	r3, #1
 800e768:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e76c:	4b87      	ldr	r3, [pc, #540]	@ (800e98c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e76e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e770:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e778:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e77c:	4a83      	ldr	r2, [pc, #524]	@ (800e98c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e77e:	430b      	orrs	r3, r1
 800e780:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e78a:	f002 0310 	and.w	r3, r2, #16
 800e78e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e792:	2300      	movs	r3, #0
 800e794:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e798:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800e79c:	460b      	mov	r3, r1
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	d01e      	beq.n	800e7e0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e7a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e7aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e7ae:	d10c      	bne.n	800e7ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e7b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7b4:	3328      	adds	r3, #40	@ 0x28
 800e7b6:	2102      	movs	r1, #2
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f000 fe25 	bl	800f408 <RCCEx_PLL3_Config>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d002      	beq.n	800e7ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e7ca:	4b70      	ldr	r3, [pc, #448]	@ (800e98c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e7cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e7d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e7da:	4a6c      	ldr	r2, [pc, #432]	@ (800e98c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e7dc:	430b      	orrs	r3, r1
 800e7de:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e7e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800e7ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e7f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800e7fa:	460b      	mov	r3, r1
 800e7fc:	4313      	orrs	r3, r2
 800e7fe:	d03e      	beq.n	800e87e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800e800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e804:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e808:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e80c:	d022      	beq.n	800e854 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800e80e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e812:	d81b      	bhi.n	800e84c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800e814:	2b00      	cmp	r3, #0
 800e816:	d003      	beq.n	800e820 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800e818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e81c:	d00b      	beq.n	800e836 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800e81e:	e015      	b.n	800e84c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e824:	3308      	adds	r3, #8
 800e826:	2100      	movs	r1, #0
 800e828:	4618      	mov	r0, r3
 800e82a:	f000 fd3b 	bl	800f2a4 <RCCEx_PLL2_Config>
 800e82e:	4603      	mov	r3, r0
 800e830:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e834:	e00f      	b.n	800e856 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e83a:	3328      	adds	r3, #40	@ 0x28
 800e83c:	2102      	movs	r1, #2
 800e83e:	4618      	mov	r0, r3
 800e840:	f000 fde2 	bl	800f408 <RCCEx_PLL3_Config>
 800e844:	4603      	mov	r3, r0
 800e846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e84a:	e004      	b.n	800e856 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e84c:	2301      	movs	r3, #1
 800e84e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e852:	e000      	b.n	800e856 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800e854:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e856:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d10b      	bne.n	800e876 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e85e:	4b4b      	ldr	r3, [pc, #300]	@ (800e98c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e862:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800e866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e86a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e86e:	4a47      	ldr	r2, [pc, #284]	@ (800e98c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e870:	430b      	orrs	r3, r1
 800e872:	6593      	str	r3, [r2, #88]	@ 0x58
 800e874:	e003      	b.n	800e87e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e87a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e87e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e886:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800e88a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e88c:	2300      	movs	r3, #0
 800e88e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e890:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800e894:	460b      	mov	r3, r1
 800e896:	4313      	orrs	r3, r2
 800e898:	d03b      	beq.n	800e912 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800e89a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e89e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e8a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e8a6:	d01f      	beq.n	800e8e8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800e8a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e8ac:	d818      	bhi.n	800e8e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800e8ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e8b2:	d003      	beq.n	800e8bc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800e8b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e8b8:	d007      	beq.n	800e8ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800e8ba:	e011      	b.n	800e8e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e8bc:	4b33      	ldr	r3, [pc, #204]	@ (800e98c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e8be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8c0:	4a32      	ldr	r2, [pc, #200]	@ (800e98c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e8c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e8c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800e8c8:	e00f      	b.n	800e8ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e8ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8ce:	3328      	adds	r3, #40	@ 0x28
 800e8d0:	2101      	movs	r1, #1
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f000 fd98 	bl	800f408 <RCCEx_PLL3_Config>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800e8de:	e004      	b.n	800e8ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e8e6:	e000      	b.n	800e8ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800e8e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e8ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d10b      	bne.n	800e90a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e8f2:	4b26      	ldr	r3, [pc, #152]	@ (800e98c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e8f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e8fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e902:	4a22      	ldr	r2, [pc, #136]	@ (800e98c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e904:	430b      	orrs	r3, r1
 800e906:	6553      	str	r3, [r2, #84]	@ 0x54
 800e908:	e003      	b.n	800e912 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e90a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e90e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e91a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800e91e:	673b      	str	r3, [r7, #112]	@ 0x70
 800e920:	2300      	movs	r3, #0
 800e922:	677b      	str	r3, [r7, #116]	@ 0x74
 800e924:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800e928:	460b      	mov	r3, r1
 800e92a:	4313      	orrs	r3, r2
 800e92c:	d034      	beq.n	800e998 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800e92e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e932:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e934:	2b00      	cmp	r3, #0
 800e936:	d003      	beq.n	800e940 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800e938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e93c:	d007      	beq.n	800e94e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800e93e:	e011      	b.n	800e964 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e940:	4b12      	ldr	r3, [pc, #72]	@ (800e98c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e944:	4a11      	ldr	r2, [pc, #68]	@ (800e98c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e946:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e94a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e94c:	e00e      	b.n	800e96c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e94e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e952:	3308      	adds	r3, #8
 800e954:	2102      	movs	r1, #2
 800e956:	4618      	mov	r0, r3
 800e958:	f000 fca4 	bl	800f2a4 <RCCEx_PLL2_Config>
 800e95c:	4603      	mov	r3, r0
 800e95e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e962:	e003      	b.n	800e96c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800e964:	2301      	movs	r3, #1
 800e966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e96a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e96c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e970:	2b00      	cmp	r3, #0
 800e972:	d10d      	bne.n	800e990 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e974:	4b05      	ldr	r3, [pc, #20]	@ (800e98c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e978:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e97c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e982:	4a02      	ldr	r2, [pc, #8]	@ (800e98c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e984:	430b      	orrs	r3, r1
 800e986:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e988:	e006      	b.n	800e998 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800e98a:	bf00      	nop
 800e98c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e994:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800e9a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e9aa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800e9ae:	460b      	mov	r3, r1
 800e9b0:	4313      	orrs	r3, r2
 800e9b2:	d00c      	beq.n	800e9ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e9b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9b8:	3328      	adds	r3, #40	@ 0x28
 800e9ba:	2102      	movs	r1, #2
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f000 fd23 	bl	800f408 <RCCEx_PLL3_Config>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d002      	beq.n	800e9ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e9ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800e9da:	663b      	str	r3, [r7, #96]	@ 0x60
 800e9dc:	2300      	movs	r3, #0
 800e9de:	667b      	str	r3, [r7, #100]	@ 0x64
 800e9e0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800e9e4:	460b      	mov	r3, r1
 800e9e6:	4313      	orrs	r3, r2
 800e9e8:	d038      	beq.n	800ea5c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800e9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e9f6:	d018      	beq.n	800ea2a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800e9f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e9fc:	d811      	bhi.n	800ea22 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e9fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea02:	d014      	beq.n	800ea2e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ea04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea08:	d80b      	bhi.n	800ea22 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d011      	beq.n	800ea32 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ea0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea12:	d106      	bne.n	800ea22 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ea14:	4bc3      	ldr	r3, [pc, #780]	@ (800ed24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea18:	4ac2      	ldr	r2, [pc, #776]	@ (800ed24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ea1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ea20:	e008      	b.n	800ea34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ea22:	2301      	movs	r3, #1
 800ea24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ea28:	e004      	b.n	800ea34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ea2a:	bf00      	nop
 800ea2c:	e002      	b.n	800ea34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ea2e:	bf00      	nop
 800ea30:	e000      	b.n	800ea34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ea32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d10b      	bne.n	800ea54 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ea3c:	4bb9      	ldr	r3, [pc, #740]	@ (800ed24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea40:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ea44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea4c:	4ab5      	ldr	r2, [pc, #724]	@ (800ed24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea4e:	430b      	orrs	r3, r1
 800ea50:	6553      	str	r3, [r2, #84]	@ 0x54
 800ea52:	e003      	b.n	800ea5c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ea5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea64:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ea68:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ea6e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ea72:	460b      	mov	r3, r1
 800ea74:	4313      	orrs	r3, r2
 800ea76:	d009      	beq.n	800ea8c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ea78:	4baa      	ldr	r3, [pc, #680]	@ (800ed24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea7c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ea80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea86:	4aa7      	ldr	r2, [pc, #668]	@ (800ed24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea88:	430b      	orrs	r3, r1
 800ea8a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ea8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea94:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800ea98:	653b      	str	r3, [r7, #80]	@ 0x50
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	657b      	str	r3, [r7, #84]	@ 0x54
 800ea9e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800eaa2:	460b      	mov	r3, r1
 800eaa4:	4313      	orrs	r3, r2
 800eaa6:	d00a      	beq.n	800eabe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800eaa8:	4b9e      	ldr	r3, [pc, #632]	@ (800ed24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eaaa:	691b      	ldr	r3, [r3, #16]
 800eaac:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800eab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eab4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800eab8:	4a9a      	ldr	r2, [pc, #616]	@ (800ed24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eaba:	430b      	orrs	r3, r1
 800eabc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800eabe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800eaca:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eacc:	2300      	movs	r3, #0
 800eace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ead0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ead4:	460b      	mov	r3, r1
 800ead6:	4313      	orrs	r3, r2
 800ead8:	d009      	beq.n	800eaee <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800eada:	4b92      	ldr	r3, [pc, #584]	@ (800ed24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eadc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eade:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800eae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eae8:	4a8e      	ldr	r2, [pc, #568]	@ (800ed24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eaea:	430b      	orrs	r3, r1
 800eaec:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800eaee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800eafa:	643b      	str	r3, [r7, #64]	@ 0x40
 800eafc:	2300      	movs	r3, #0
 800eafe:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb00:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800eb04:	460b      	mov	r3, r1
 800eb06:	4313      	orrs	r3, r2
 800eb08:	d00e      	beq.n	800eb28 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800eb0a:	4b86      	ldr	r3, [pc, #536]	@ (800ed24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eb0c:	691b      	ldr	r3, [r3, #16]
 800eb0e:	4a85      	ldr	r2, [pc, #532]	@ (800ed24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eb10:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800eb14:	6113      	str	r3, [r2, #16]
 800eb16:	4b83      	ldr	r3, [pc, #524]	@ (800ed24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eb18:	6919      	ldr	r1, [r3, #16]
 800eb1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb1e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800eb22:	4a80      	ldr	r2, [pc, #512]	@ (800ed24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eb24:	430b      	orrs	r3, r1
 800eb26:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800eb28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb30:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800eb34:	63bb      	str	r3, [r7, #56]	@ 0x38
 800eb36:	2300      	movs	r3, #0
 800eb38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eb3a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800eb3e:	460b      	mov	r3, r1
 800eb40:	4313      	orrs	r3, r2
 800eb42:	d009      	beq.n	800eb58 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800eb44:	4b77      	ldr	r3, [pc, #476]	@ (800ed24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eb46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb48:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800eb4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb52:	4a74      	ldr	r2, [pc, #464]	@ (800ed24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eb54:	430b      	orrs	r3, r1
 800eb56:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800eb58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb60:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800eb64:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb66:	2300      	movs	r3, #0
 800eb68:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb6a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800eb6e:	460b      	mov	r3, r1
 800eb70:	4313      	orrs	r3, r2
 800eb72:	d00a      	beq.n	800eb8a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800eb74:	4b6b      	ldr	r3, [pc, #428]	@ (800ed24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eb76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb78:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800eb7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eb84:	4a67      	ldr	r2, [pc, #412]	@ (800ed24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eb86:	430b      	orrs	r3, r1
 800eb88:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800eb8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb92:	2100      	movs	r1, #0
 800eb94:	62b9      	str	r1, [r7, #40]	@ 0x28
 800eb96:	f003 0301 	and.w	r3, r3, #1
 800eb9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eb9c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800eba0:	460b      	mov	r3, r1
 800eba2:	4313      	orrs	r3, r2
 800eba4:	d011      	beq.n	800ebca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebaa:	3308      	adds	r3, #8
 800ebac:	2100      	movs	r1, #0
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f000 fb78 	bl	800f2a4 <RCCEx_PLL2_Config>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ebba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d003      	beq.n	800ebca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ebc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ebca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd2:	2100      	movs	r1, #0
 800ebd4:	6239      	str	r1, [r7, #32]
 800ebd6:	f003 0302 	and.w	r3, r3, #2
 800ebda:	627b      	str	r3, [r7, #36]	@ 0x24
 800ebdc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ebe0:	460b      	mov	r3, r1
 800ebe2:	4313      	orrs	r3, r2
 800ebe4:	d011      	beq.n	800ec0a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ebe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebea:	3308      	adds	r3, #8
 800ebec:	2101      	movs	r1, #1
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f000 fb58 	bl	800f2a4 <RCCEx_PLL2_Config>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ebfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d003      	beq.n	800ec0a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ec0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec12:	2100      	movs	r1, #0
 800ec14:	61b9      	str	r1, [r7, #24]
 800ec16:	f003 0304 	and.w	r3, r3, #4
 800ec1a:	61fb      	str	r3, [r7, #28]
 800ec1c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ec20:	460b      	mov	r3, r1
 800ec22:	4313      	orrs	r3, r2
 800ec24:	d011      	beq.n	800ec4a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ec26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec2a:	3308      	adds	r3, #8
 800ec2c:	2102      	movs	r1, #2
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f000 fb38 	bl	800f2a4 <RCCEx_PLL2_Config>
 800ec34:	4603      	mov	r3, r0
 800ec36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ec3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d003      	beq.n	800ec4a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ec4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec52:	2100      	movs	r1, #0
 800ec54:	6139      	str	r1, [r7, #16]
 800ec56:	f003 0308 	and.w	r3, r3, #8
 800ec5a:	617b      	str	r3, [r7, #20]
 800ec5c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ec60:	460b      	mov	r3, r1
 800ec62:	4313      	orrs	r3, r2
 800ec64:	d011      	beq.n	800ec8a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ec66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec6a:	3328      	adds	r3, #40	@ 0x28
 800ec6c:	2100      	movs	r1, #0
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f000 fbca 	bl	800f408 <RCCEx_PLL3_Config>
 800ec74:	4603      	mov	r3, r0
 800ec76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800ec7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d003      	beq.n	800ec8a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ec8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec92:	2100      	movs	r1, #0
 800ec94:	60b9      	str	r1, [r7, #8]
 800ec96:	f003 0310 	and.w	r3, r3, #16
 800ec9a:	60fb      	str	r3, [r7, #12]
 800ec9c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800eca0:	460b      	mov	r3, r1
 800eca2:	4313      	orrs	r3, r2
 800eca4:	d011      	beq.n	800ecca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecaa:	3328      	adds	r3, #40	@ 0x28
 800ecac:	2101      	movs	r1, #1
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f000 fbaa 	bl	800f408 <RCCEx_PLL3_Config>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ecba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d003      	beq.n	800ecca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ecc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ecc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ecca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd2:	2100      	movs	r1, #0
 800ecd4:	6039      	str	r1, [r7, #0]
 800ecd6:	f003 0320 	and.w	r3, r3, #32
 800ecda:	607b      	str	r3, [r7, #4]
 800ecdc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ece0:	460b      	mov	r3, r1
 800ece2:	4313      	orrs	r3, r2
 800ece4:	d011      	beq.n	800ed0a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ece6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecea:	3328      	adds	r3, #40	@ 0x28
 800ecec:	2102      	movs	r1, #2
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f000 fb8a 	bl	800f408 <RCCEx_PLL3_Config>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ecfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d003      	beq.n	800ed0a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800ed0a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d101      	bne.n	800ed16 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ed12:	2300      	movs	r3, #0
 800ed14:	e000      	b.n	800ed18 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ed16:	2301      	movs	r3, #1
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ed24:	58024400 	.word	0x58024400

0800ed28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ed2c:	f7fe fd96 	bl	800d85c <HAL_RCC_GetHCLKFreq>
 800ed30:	4602      	mov	r2, r0
 800ed32:	4b06      	ldr	r3, [pc, #24]	@ (800ed4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ed34:	6a1b      	ldr	r3, [r3, #32]
 800ed36:	091b      	lsrs	r3, r3, #4
 800ed38:	f003 0307 	and.w	r3, r3, #7
 800ed3c:	4904      	ldr	r1, [pc, #16]	@ (800ed50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ed3e:	5ccb      	ldrb	r3, [r1, r3]
 800ed40:	f003 031f 	and.w	r3, r3, #31
 800ed44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	bd80      	pop	{r7, pc}
 800ed4c:	58024400 	.word	0x58024400
 800ed50:	08017e20 	.word	0x08017e20

0800ed54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ed54:	b480      	push	{r7}
 800ed56:	b089      	sub	sp, #36	@ 0x24
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ed5c:	4ba1      	ldr	r3, [pc, #644]	@ (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed60:	f003 0303 	and.w	r3, r3, #3
 800ed64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ed66:	4b9f      	ldr	r3, [pc, #636]	@ (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed6a:	0b1b      	lsrs	r3, r3, #12
 800ed6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ed70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ed72:	4b9c      	ldr	r3, [pc, #624]	@ (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed76:	091b      	lsrs	r3, r3, #4
 800ed78:	f003 0301 	and.w	r3, r3, #1
 800ed7c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ed7e:	4b99      	ldr	r3, [pc, #612]	@ (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed82:	08db      	lsrs	r3, r3, #3
 800ed84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ed88:	693a      	ldr	r2, [r7, #16]
 800ed8a:	fb02 f303 	mul.w	r3, r2, r3
 800ed8e:	ee07 3a90 	vmov	s15, r3
 800ed92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	f000 8111 	beq.w	800efc4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800eda2:	69bb      	ldr	r3, [r7, #24]
 800eda4:	2b02      	cmp	r3, #2
 800eda6:	f000 8083 	beq.w	800eeb0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800edaa:	69bb      	ldr	r3, [r7, #24]
 800edac:	2b02      	cmp	r3, #2
 800edae:	f200 80a1 	bhi.w	800eef4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800edb2:	69bb      	ldr	r3, [r7, #24]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d003      	beq.n	800edc0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800edb8:	69bb      	ldr	r3, [r7, #24]
 800edba:	2b01      	cmp	r3, #1
 800edbc:	d056      	beq.n	800ee6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800edbe:	e099      	b.n	800eef4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800edc0:	4b88      	ldr	r3, [pc, #544]	@ (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	f003 0320 	and.w	r3, r3, #32
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d02d      	beq.n	800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800edcc:	4b85      	ldr	r3, [pc, #532]	@ (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	08db      	lsrs	r3, r3, #3
 800edd2:	f003 0303 	and.w	r3, r3, #3
 800edd6:	4a84      	ldr	r2, [pc, #528]	@ (800efe8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800edd8:	fa22 f303 	lsr.w	r3, r2, r3
 800eddc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	ee07 3a90 	vmov	s15, r3
 800ede4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	ee07 3a90 	vmov	s15, r3
 800edee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800edf6:	4b7b      	ldr	r3, [pc, #492]	@ (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800edf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edfe:	ee07 3a90 	vmov	s15, r3
 800ee02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee06:	ed97 6a03 	vldr	s12, [r7, #12]
 800ee0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800efec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ee0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ee1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ee26:	e087      	b.n	800ef38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	ee07 3a90 	vmov	s15, r3
 800ee2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800eff0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ee36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee3a:	4b6a      	ldr	r3, [pc, #424]	@ (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ee3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee42:	ee07 3a90 	vmov	s15, r3
 800ee46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ee4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800efec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ee52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ee5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ee6a:	e065      	b.n	800ef38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	ee07 3a90 	vmov	s15, r3
 800ee72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800eff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ee7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee7e:	4b59      	ldr	r3, [pc, #356]	@ (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ee80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee86:	ee07 3a90 	vmov	s15, r3
 800ee8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ee92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800efec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ee96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eeaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eeae:	e043      	b.n	800ef38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	ee07 3a90 	vmov	s15, r3
 800eeb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eeba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800eff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800eebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eec2:	4b48      	ldr	r3, [pc, #288]	@ (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eeca:	ee07 3a90 	vmov	s15, r3
 800eece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eed2:	ed97 6a03 	vldr	s12, [r7, #12]
 800eed6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800efec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800eeda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eee2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eeea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eeee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eef2:	e021      	b.n	800ef38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	ee07 3a90 	vmov	s15, r3
 800eefa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eefe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800eff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ef02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef06:	4b37      	ldr	r3, [pc, #220]	@ (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef0e:	ee07 3a90 	vmov	s15, r3
 800ef12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef16:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef1a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800efec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ef1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ef2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef36:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ef38:	4b2a      	ldr	r3, [pc, #168]	@ (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef3c:	0a5b      	lsrs	r3, r3, #9
 800ef3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ef42:	ee07 3a90 	vmov	s15, r3
 800ef46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ef4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ef52:	edd7 6a07 	vldr	s13, [r7, #28]
 800ef56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ef5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ef5e:	ee17 2a90 	vmov	r2, s15
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ef66:	4b1f      	ldr	r3, [pc, #124]	@ (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef6a:	0c1b      	lsrs	r3, r3, #16
 800ef6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ef70:	ee07 3a90 	vmov	s15, r3
 800ef74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ef7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ef80:	edd7 6a07 	vldr	s13, [r7, #28]
 800ef84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ef88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ef8c:	ee17 2a90 	vmov	r2, s15
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ef94:	4b13      	ldr	r3, [pc, #76]	@ (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef98:	0e1b      	lsrs	r3, r3, #24
 800ef9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ef9e:	ee07 3a90 	vmov	s15, r3
 800efa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efa6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800efaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800efae:	edd7 6a07 	vldr	s13, [r7, #28]
 800efb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800efb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800efba:	ee17 2a90 	vmov	r2, s15
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800efc2:	e008      	b.n	800efd6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2200      	movs	r2, #0
 800efc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2200      	movs	r2, #0
 800efce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2200      	movs	r2, #0
 800efd4:	609a      	str	r2, [r3, #8]
}
 800efd6:	bf00      	nop
 800efd8:	3724      	adds	r7, #36	@ 0x24
 800efda:	46bd      	mov	sp, r7
 800efdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe0:	4770      	bx	lr
 800efe2:	bf00      	nop
 800efe4:	58024400 	.word	0x58024400
 800efe8:	03d09000 	.word	0x03d09000
 800efec:	46000000 	.word	0x46000000
 800eff0:	4c742400 	.word	0x4c742400
 800eff4:	4a742400 	.word	0x4a742400
 800eff8:	4bbebc20 	.word	0x4bbebc20

0800effc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800effc:	b480      	push	{r7}
 800effe:	b089      	sub	sp, #36	@ 0x24
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f004:	4ba1      	ldr	r3, [pc, #644]	@ (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f008:	f003 0303 	and.w	r3, r3, #3
 800f00c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f00e:	4b9f      	ldr	r3, [pc, #636]	@ (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f012:	0d1b      	lsrs	r3, r3, #20
 800f014:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f018:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f01a:	4b9c      	ldr	r3, [pc, #624]	@ (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f01c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f01e:	0a1b      	lsrs	r3, r3, #8
 800f020:	f003 0301 	and.w	r3, r3, #1
 800f024:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f026:	4b99      	ldr	r3, [pc, #612]	@ (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f02a:	08db      	lsrs	r3, r3, #3
 800f02c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f030:	693a      	ldr	r2, [r7, #16]
 800f032:	fb02 f303 	mul.w	r3, r2, r3
 800f036:	ee07 3a90 	vmov	s15, r3
 800f03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f03e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	2b00      	cmp	r3, #0
 800f046:	f000 8111 	beq.w	800f26c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f04a:	69bb      	ldr	r3, [r7, #24]
 800f04c:	2b02      	cmp	r3, #2
 800f04e:	f000 8083 	beq.w	800f158 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f052:	69bb      	ldr	r3, [r7, #24]
 800f054:	2b02      	cmp	r3, #2
 800f056:	f200 80a1 	bhi.w	800f19c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f05a:	69bb      	ldr	r3, [r7, #24]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d003      	beq.n	800f068 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f060:	69bb      	ldr	r3, [r7, #24]
 800f062:	2b01      	cmp	r3, #1
 800f064:	d056      	beq.n	800f114 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f066:	e099      	b.n	800f19c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f068:	4b88      	ldr	r3, [pc, #544]	@ (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	f003 0320 	and.w	r3, r3, #32
 800f070:	2b00      	cmp	r3, #0
 800f072:	d02d      	beq.n	800f0d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f074:	4b85      	ldr	r3, [pc, #532]	@ (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	08db      	lsrs	r3, r3, #3
 800f07a:	f003 0303 	and.w	r3, r3, #3
 800f07e:	4a84      	ldr	r2, [pc, #528]	@ (800f290 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f080:	fa22 f303 	lsr.w	r3, r2, r3
 800f084:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	ee07 3a90 	vmov	s15, r3
 800f08c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	ee07 3a90 	vmov	s15, r3
 800f096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f09a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f09e:	4b7b      	ldr	r3, [pc, #492]	@ (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f0a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0a6:	ee07 3a90 	vmov	s15, r3
 800f0aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f0ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800f0b2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f294 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f0b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f0ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f0be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f0c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f0c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f0ce:	e087      	b.n	800f1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	ee07 3a90 	vmov	s15, r3
 800f0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0da:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f298 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f0de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f0e2:	4b6a      	ldr	r3, [pc, #424]	@ (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f0e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0ea:	ee07 3a90 	vmov	s15, r3
 800f0ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f0f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f0f6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f294 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f0fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f0fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f10a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f10e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f112:	e065      	b.n	800f1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	ee07 3a90 	vmov	s15, r3
 800f11a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f11e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f29c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f126:	4b59      	ldr	r3, [pc, #356]	@ (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f12a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f12e:	ee07 3a90 	vmov	s15, r3
 800f132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f136:	ed97 6a03 	vldr	s12, [r7, #12]
 800f13a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f294 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f13e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f14a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f14e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f152:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f156:	e043      	b.n	800f1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f158:	697b      	ldr	r3, [r7, #20]
 800f15a:	ee07 3a90 	vmov	s15, r3
 800f15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f162:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800f166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f16a:	4b48      	ldr	r3, [pc, #288]	@ (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f16c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f16e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f172:	ee07 3a90 	vmov	s15, r3
 800f176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f17a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f17e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f294 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f18a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f18e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f192:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f196:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f19a:	e021      	b.n	800f1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	ee07 3a90 	vmov	s15, r3
 800f1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1a6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f29c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f1aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f1ae:	4b37      	ldr	r3, [pc, #220]	@ (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f1b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1b6:	ee07 3a90 	vmov	s15, r3
 800f1ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1be:	ed97 6a03 	vldr	s12, [r7, #12]
 800f1c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f294 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f1c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f1ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f1d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f1de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800f1e0:	4b2a      	ldr	r3, [pc, #168]	@ (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f1e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1e4:	0a5b      	lsrs	r3, r3, #9
 800f1e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f1ea:	ee07 3a90 	vmov	s15, r3
 800f1ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f1f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f1fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800f1fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f206:	ee17 2a90 	vmov	r2, s15
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800f20e:	4b1f      	ldr	r3, [pc, #124]	@ (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f212:	0c1b      	lsrs	r3, r3, #16
 800f214:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f218:	ee07 3a90 	vmov	s15, r3
 800f21c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f220:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f224:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f228:	edd7 6a07 	vldr	s13, [r7, #28]
 800f22c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f234:	ee17 2a90 	vmov	r2, s15
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800f23c:	4b13      	ldr	r3, [pc, #76]	@ (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f23e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f240:	0e1b      	lsrs	r3, r3, #24
 800f242:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f246:	ee07 3a90 	vmov	s15, r3
 800f24a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f24e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f252:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f256:	edd7 6a07 	vldr	s13, [r7, #28]
 800f25a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f25e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f262:	ee17 2a90 	vmov	r2, s15
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f26a:	e008      	b.n	800f27e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2200      	movs	r2, #0
 800f270:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2200      	movs	r2, #0
 800f276:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2200      	movs	r2, #0
 800f27c:	609a      	str	r2, [r3, #8]
}
 800f27e:	bf00      	nop
 800f280:	3724      	adds	r7, #36	@ 0x24
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr
 800f28a:	bf00      	nop
 800f28c:	58024400 	.word	0x58024400
 800f290:	03d09000 	.word	0x03d09000
 800f294:	46000000 	.word	0x46000000
 800f298:	4c742400 	.word	0x4c742400
 800f29c:	4a742400 	.word	0x4a742400
 800f2a0:	4bbebc20 	.word	0x4bbebc20

0800f2a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b084      	sub	sp, #16
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f2b2:	4b53      	ldr	r3, [pc, #332]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f2b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2b6:	f003 0303 	and.w	r3, r3, #3
 800f2ba:	2b03      	cmp	r3, #3
 800f2bc:	d101      	bne.n	800f2c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	e099      	b.n	800f3f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f2c2:	4b4f      	ldr	r3, [pc, #316]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	4a4e      	ldr	r2, [pc, #312]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f2c8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f2cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f2ce:	f7f3 fcbd 	bl	8002c4c <HAL_GetTick>
 800f2d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f2d4:	e008      	b.n	800f2e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f2d6:	f7f3 fcb9 	bl	8002c4c <HAL_GetTick>
 800f2da:	4602      	mov	r2, r0
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	1ad3      	subs	r3, r2, r3
 800f2e0:	2b02      	cmp	r3, #2
 800f2e2:	d901      	bls.n	800f2e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f2e4:	2303      	movs	r3, #3
 800f2e6:	e086      	b.n	800f3f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f2e8:	4b45      	ldr	r3, [pc, #276]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d1f0      	bne.n	800f2d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f2f4:	4b42      	ldr	r3, [pc, #264]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f2f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2f8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	031b      	lsls	r3, r3, #12
 800f302:	493f      	ldr	r1, [pc, #252]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f304:	4313      	orrs	r3, r2
 800f306:	628b      	str	r3, [r1, #40]	@ 0x28
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	685b      	ldr	r3, [r3, #4]
 800f30c:	3b01      	subs	r3, #1
 800f30e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	689b      	ldr	r3, [r3, #8]
 800f316:	3b01      	subs	r3, #1
 800f318:	025b      	lsls	r3, r3, #9
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	431a      	orrs	r2, r3
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	68db      	ldr	r3, [r3, #12]
 800f322:	3b01      	subs	r3, #1
 800f324:	041b      	lsls	r3, r3, #16
 800f326:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f32a:	431a      	orrs	r2, r3
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	691b      	ldr	r3, [r3, #16]
 800f330:	3b01      	subs	r3, #1
 800f332:	061b      	lsls	r3, r3, #24
 800f334:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f338:	4931      	ldr	r1, [pc, #196]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f33a:	4313      	orrs	r3, r2
 800f33c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f33e:	4b30      	ldr	r3, [pc, #192]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f342:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	695b      	ldr	r3, [r3, #20]
 800f34a:	492d      	ldr	r1, [pc, #180]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f34c:	4313      	orrs	r3, r2
 800f34e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f350:	4b2b      	ldr	r3, [pc, #172]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f354:	f023 0220 	bic.w	r2, r3, #32
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	699b      	ldr	r3, [r3, #24]
 800f35c:	4928      	ldr	r1, [pc, #160]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f35e:	4313      	orrs	r3, r2
 800f360:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f362:	4b27      	ldr	r3, [pc, #156]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f366:	4a26      	ldr	r2, [pc, #152]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f368:	f023 0310 	bic.w	r3, r3, #16
 800f36c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f36e:	4b24      	ldr	r3, [pc, #144]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f370:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f372:	4b24      	ldr	r3, [pc, #144]	@ (800f404 <RCCEx_PLL2_Config+0x160>)
 800f374:	4013      	ands	r3, r2
 800f376:	687a      	ldr	r2, [r7, #4]
 800f378:	69d2      	ldr	r2, [r2, #28]
 800f37a:	00d2      	lsls	r2, r2, #3
 800f37c:	4920      	ldr	r1, [pc, #128]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f37e:	4313      	orrs	r3, r2
 800f380:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f382:	4b1f      	ldr	r3, [pc, #124]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f386:	4a1e      	ldr	r2, [pc, #120]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f388:	f043 0310 	orr.w	r3, r3, #16
 800f38c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d106      	bne.n	800f3a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f394:	4b1a      	ldr	r3, [pc, #104]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f398:	4a19      	ldr	r2, [pc, #100]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f39a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f39e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f3a0:	e00f      	b.n	800f3c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	d106      	bne.n	800f3b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f3a8:	4b15      	ldr	r3, [pc, #84]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f3aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3ac:	4a14      	ldr	r2, [pc, #80]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f3ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f3b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f3b4:	e005      	b.n	800f3c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f3b6:	4b12      	ldr	r3, [pc, #72]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f3b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3ba:	4a11      	ldr	r2, [pc, #68]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f3bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f3c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f3c2:	4b0f      	ldr	r3, [pc, #60]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	4a0e      	ldr	r2, [pc, #56]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f3c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f3cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f3ce:	f7f3 fc3d 	bl	8002c4c <HAL_GetTick>
 800f3d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f3d4:	e008      	b.n	800f3e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f3d6:	f7f3 fc39 	bl	8002c4c <HAL_GetTick>
 800f3da:	4602      	mov	r2, r0
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	1ad3      	subs	r3, r2, r3
 800f3e0:	2b02      	cmp	r3, #2
 800f3e2:	d901      	bls.n	800f3e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f3e4:	2303      	movs	r3, #3
 800f3e6:	e006      	b.n	800f3f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f3e8:	4b05      	ldr	r3, [pc, #20]	@ (800f400 <RCCEx_PLL2_Config+0x15c>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d0f0      	beq.n	800f3d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3710      	adds	r7, #16
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}
 800f3fe:	bf00      	nop
 800f400:	58024400 	.word	0x58024400
 800f404:	ffff0007 	.word	0xffff0007

0800f408 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b084      	sub	sp, #16
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f412:	2300      	movs	r3, #0
 800f414:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f416:	4b53      	ldr	r3, [pc, #332]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f41a:	f003 0303 	and.w	r3, r3, #3
 800f41e:	2b03      	cmp	r3, #3
 800f420:	d101      	bne.n	800f426 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f422:	2301      	movs	r3, #1
 800f424:	e099      	b.n	800f55a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f426:	4b4f      	ldr	r3, [pc, #316]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	4a4e      	ldr	r2, [pc, #312]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f42c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f432:	f7f3 fc0b 	bl	8002c4c <HAL_GetTick>
 800f436:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f438:	e008      	b.n	800f44c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f43a:	f7f3 fc07 	bl	8002c4c <HAL_GetTick>
 800f43e:	4602      	mov	r2, r0
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	1ad3      	subs	r3, r2, r3
 800f444:	2b02      	cmp	r3, #2
 800f446:	d901      	bls.n	800f44c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f448:	2303      	movs	r3, #3
 800f44a:	e086      	b.n	800f55a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f44c:	4b45      	ldr	r3, [pc, #276]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f454:	2b00      	cmp	r3, #0
 800f456:	d1f0      	bne.n	800f43a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f458:	4b42      	ldr	r3, [pc, #264]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f45a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f45c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	051b      	lsls	r3, r3, #20
 800f466:	493f      	ldr	r1, [pc, #252]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f468:	4313      	orrs	r3, r2
 800f46a:	628b      	str	r3, [r1, #40]	@ 0x28
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	3b01      	subs	r3, #1
 800f472:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	689b      	ldr	r3, [r3, #8]
 800f47a:	3b01      	subs	r3, #1
 800f47c:	025b      	lsls	r3, r3, #9
 800f47e:	b29b      	uxth	r3, r3
 800f480:	431a      	orrs	r2, r3
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	68db      	ldr	r3, [r3, #12]
 800f486:	3b01      	subs	r3, #1
 800f488:	041b      	lsls	r3, r3, #16
 800f48a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f48e:	431a      	orrs	r2, r3
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	691b      	ldr	r3, [r3, #16]
 800f494:	3b01      	subs	r3, #1
 800f496:	061b      	lsls	r3, r3, #24
 800f498:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f49c:	4931      	ldr	r1, [pc, #196]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f49e:	4313      	orrs	r3, r2
 800f4a0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f4a2:	4b30      	ldr	r3, [pc, #192]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f4a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	695b      	ldr	r3, [r3, #20]
 800f4ae:	492d      	ldr	r1, [pc, #180]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f4b0:	4313      	orrs	r3, r2
 800f4b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f4b4:	4b2b      	ldr	r3, [pc, #172]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f4b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4b8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	699b      	ldr	r3, [r3, #24]
 800f4c0:	4928      	ldr	r1, [pc, #160]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f4c2:	4313      	orrs	r3, r2
 800f4c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f4c6:	4b27      	ldr	r3, [pc, #156]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f4c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4ca:	4a26      	ldr	r2, [pc, #152]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f4cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f4d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f4d2:	4b24      	ldr	r3, [pc, #144]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f4d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f4d6:	4b24      	ldr	r3, [pc, #144]	@ (800f568 <RCCEx_PLL3_Config+0x160>)
 800f4d8:	4013      	ands	r3, r2
 800f4da:	687a      	ldr	r2, [r7, #4]
 800f4dc:	69d2      	ldr	r2, [r2, #28]
 800f4de:	00d2      	lsls	r2, r2, #3
 800f4e0:	4920      	ldr	r1, [pc, #128]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f4e2:	4313      	orrs	r3, r2
 800f4e4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f4e6:	4b1f      	ldr	r3, [pc, #124]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f4e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4ea:	4a1e      	ldr	r2, [pc, #120]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f4ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f4f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d106      	bne.n	800f506 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f4f8:	4b1a      	ldr	r3, [pc, #104]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f4fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4fc:	4a19      	ldr	r2, [pc, #100]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f4fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800f502:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f504:	e00f      	b.n	800f526 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	2b01      	cmp	r3, #1
 800f50a:	d106      	bne.n	800f51a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f50c:	4b15      	ldr	r3, [pc, #84]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f50e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f510:	4a14      	ldr	r2, [pc, #80]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f512:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f516:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f518:	e005      	b.n	800f526 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f51a:	4b12      	ldr	r3, [pc, #72]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f51c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f51e:	4a11      	ldr	r2, [pc, #68]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f520:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f524:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f526:	4b0f      	ldr	r3, [pc, #60]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	4a0e      	ldr	r2, [pc, #56]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f52c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f532:	f7f3 fb8b 	bl	8002c4c <HAL_GetTick>
 800f536:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f538:	e008      	b.n	800f54c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f53a:	f7f3 fb87 	bl	8002c4c <HAL_GetTick>
 800f53e:	4602      	mov	r2, r0
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	1ad3      	subs	r3, r2, r3
 800f544:	2b02      	cmp	r3, #2
 800f546:	d901      	bls.n	800f54c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f548:	2303      	movs	r3, #3
 800f54a:	e006      	b.n	800f55a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f54c:	4b05      	ldr	r3, [pc, #20]	@ (800f564 <RCCEx_PLL3_Config+0x15c>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f554:	2b00      	cmp	r3, #0
 800f556:	d0f0      	beq.n	800f53a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f558:	7bfb      	ldrb	r3, [r7, #15]
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	3710      	adds	r7, #16
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}
 800f562:	bf00      	nop
 800f564:	58024400 	.word	0x58024400
 800f568:	ffff0007 	.word	0xffff0007

0800f56c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b084      	sub	sp, #16
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d101      	bne.n	800f57e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f57a:	2301      	movs	r3, #1
 800f57c:	e10f      	b.n	800f79e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2200      	movs	r2, #0
 800f582:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	4a87      	ldr	r2, [pc, #540]	@ (800f7a8 <HAL_SPI_Init+0x23c>)
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d00f      	beq.n	800f5ae <HAL_SPI_Init+0x42>
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	4a86      	ldr	r2, [pc, #536]	@ (800f7ac <HAL_SPI_Init+0x240>)
 800f594:	4293      	cmp	r3, r2
 800f596:	d00a      	beq.n	800f5ae <HAL_SPI_Init+0x42>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	4a84      	ldr	r2, [pc, #528]	@ (800f7b0 <HAL_SPI_Init+0x244>)
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	d005      	beq.n	800f5ae <HAL_SPI_Init+0x42>
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	68db      	ldr	r3, [r3, #12]
 800f5a6:	2b0f      	cmp	r3, #15
 800f5a8:	d901      	bls.n	800f5ae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	e0f7      	b.n	800f79e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f000 f900 	bl	800f7b4 <SPI_GetPacketSize>
 800f5b4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	4a7b      	ldr	r2, [pc, #492]	@ (800f7a8 <HAL_SPI_Init+0x23c>)
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	d00c      	beq.n	800f5da <HAL_SPI_Init+0x6e>
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	4a79      	ldr	r2, [pc, #484]	@ (800f7ac <HAL_SPI_Init+0x240>)
 800f5c6:	4293      	cmp	r3, r2
 800f5c8:	d007      	beq.n	800f5da <HAL_SPI_Init+0x6e>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	4a78      	ldr	r2, [pc, #480]	@ (800f7b0 <HAL_SPI_Init+0x244>)
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d002      	beq.n	800f5da <HAL_SPI_Init+0x6e>
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	2b08      	cmp	r3, #8
 800f5d8:	d811      	bhi.n	800f5fe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f5de:	4a72      	ldr	r2, [pc, #456]	@ (800f7a8 <HAL_SPI_Init+0x23c>)
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	d009      	beq.n	800f5f8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	4a70      	ldr	r2, [pc, #448]	@ (800f7ac <HAL_SPI_Init+0x240>)
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	d004      	beq.n	800f5f8 <HAL_SPI_Init+0x8c>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	4a6f      	ldr	r2, [pc, #444]	@ (800f7b0 <HAL_SPI_Init+0x244>)
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	d104      	bne.n	800f602 <HAL_SPI_Init+0x96>
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2b10      	cmp	r3, #16
 800f5fc:	d901      	bls.n	800f602 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800f5fe:	2301      	movs	r3, #1
 800f600:	e0cd      	b.n	800f79e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f608:	b2db      	uxtb	r3, r3
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d106      	bne.n	800f61c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2200      	movs	r2, #0
 800f612:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f7f2 fe18 	bl	800224c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2202      	movs	r2, #2
 800f620:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	681a      	ldr	r2, [r3, #0]
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	f022 0201 	bic.w	r2, r2, #1
 800f632:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	689b      	ldr	r3, [r3, #8]
 800f63a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800f63e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	699b      	ldr	r3, [r3, #24]
 800f644:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f648:	d119      	bne.n	800f67e <HAL_SPI_Init+0x112>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	685b      	ldr	r3, [r3, #4]
 800f64e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f652:	d103      	bne.n	800f65c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d008      	beq.n	800f66e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f660:	2b00      	cmp	r3, #0
 800f662:	d10c      	bne.n	800f67e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f668:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f66c:	d107      	bne.n	800f67e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	681a      	ldr	r2, [r3, #0]
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f67c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	685b      	ldr	r3, [r3, #4]
 800f682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f686:	2b00      	cmp	r3, #0
 800f688:	d00f      	beq.n	800f6aa <HAL_SPI_Init+0x13e>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	68db      	ldr	r3, [r3, #12]
 800f68e:	2b06      	cmp	r3, #6
 800f690:	d90b      	bls.n	800f6aa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	430a      	orrs	r2, r1
 800f6a6:	601a      	str	r2, [r3, #0]
 800f6a8:	e007      	b.n	800f6ba <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	681a      	ldr	r2, [r3, #0]
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800f6b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	69da      	ldr	r2, [r3, #28]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6c2:	431a      	orrs	r2, r3
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	431a      	orrs	r2, r3
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6cc:	ea42 0103 	orr.w	r1, r2, r3
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	68da      	ldr	r2, [r3, #12]
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	430a      	orrs	r2, r1
 800f6da:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6e4:	431a      	orrs	r2, r3
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6ea:	431a      	orrs	r2, r3
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	699b      	ldr	r3, [r3, #24]
 800f6f0:	431a      	orrs	r2, r3
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	691b      	ldr	r3, [r3, #16]
 800f6f6:	431a      	orrs	r2, r3
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	695b      	ldr	r3, [r3, #20]
 800f6fc:	431a      	orrs	r2, r3
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6a1b      	ldr	r3, [r3, #32]
 800f702:	431a      	orrs	r2, r3
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	685b      	ldr	r3, [r3, #4]
 800f708:	431a      	orrs	r2, r3
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f70e:	431a      	orrs	r2, r3
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	689b      	ldr	r3, [r3, #8]
 800f714:	431a      	orrs	r2, r3
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f71a:	ea42 0103 	orr.w	r1, r2, r3
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	430a      	orrs	r2, r1
 800f728:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	685b      	ldr	r3, [r3, #4]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d113      	bne.n	800f75a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	689b      	ldr	r3, [r3, #8]
 800f738:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f744:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	689b      	ldr	r3, [r3, #8]
 800f74c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f758:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	f022 0201 	bic.w	r2, r2, #1
 800f768:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	685b      	ldr	r3, [r3, #4]
 800f76e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f772:	2b00      	cmp	r3, #0
 800f774:	d00a      	beq.n	800f78c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	68db      	ldr	r3, [r3, #12]
 800f77c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	430a      	orrs	r2, r1
 800f78a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	2200      	movs	r2, #0
 800f790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2201      	movs	r2, #1
 800f798:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800f79c:	2300      	movs	r3, #0
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3710      	adds	r7, #16
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}
 800f7a6:	bf00      	nop
 800f7a8:	40013000 	.word	0x40013000
 800f7ac:	40003800 	.word	0x40003800
 800f7b0:	40003c00 	.word	0x40003c00

0800f7b4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800f7b4:	b480      	push	{r7}
 800f7b6:	b085      	sub	sp, #20
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7c0:	095b      	lsrs	r3, r3, #5
 800f7c2:	3301      	adds	r3, #1
 800f7c4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	68db      	ldr	r3, [r3, #12]
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	3307      	adds	r3, #7
 800f7d2:	08db      	lsrs	r3, r3, #3
 800f7d4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	68fa      	ldr	r2, [r7, #12]
 800f7da:	fb02 f303 	mul.w	r3, r2, r3
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3714      	adds	r7, #20
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e8:	4770      	bx	lr

0800f7ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f7ea:	b580      	push	{r7, lr}
 800f7ec:	b082      	sub	sp, #8
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d101      	bne.n	800f7fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	e049      	b.n	800f890 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f802:	b2db      	uxtb	r3, r3
 800f804:	2b00      	cmp	r3, #0
 800f806:	d106      	bne.n	800f816 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2200      	movs	r2, #0
 800f80c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f7f2 fe0f 	bl	8002434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	2202      	movs	r2, #2
 800f81a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681a      	ldr	r2, [r3, #0]
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	3304      	adds	r3, #4
 800f826:	4619      	mov	r1, r3
 800f828:	4610      	mov	r0, r2
 800f82a:	f000 fd59 	bl	80102e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2201      	movs	r2, #1
 800f832:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2201      	movs	r2, #1
 800f83a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2201      	movs	r2, #1
 800f842:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2201      	movs	r2, #1
 800f84a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2201      	movs	r2, #1
 800f852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2201      	movs	r2, #1
 800f85a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2201      	movs	r2, #1
 800f862:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	2201      	movs	r2, #1
 800f86a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2201      	movs	r2, #1
 800f872:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2201      	movs	r2, #1
 800f87a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2201      	movs	r2, #1
 800f882:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2201      	movs	r2, #1
 800f88a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f88e:	2300      	movs	r3, #0
}
 800f890:	4618      	mov	r0, r3
 800f892:	3708      	adds	r7, #8
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}

0800f898 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f898:	b480      	push	{r7}
 800f89a:	b085      	sub	sp, #20
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f8a6:	b2db      	uxtb	r3, r3
 800f8a8:	2b01      	cmp	r3, #1
 800f8aa:	d001      	beq.n	800f8b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	e054      	b.n	800f95a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2202      	movs	r2, #2
 800f8b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	68da      	ldr	r2, [r3, #12]
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	f042 0201 	orr.w	r2, r2, #1
 800f8c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	4a26      	ldr	r2, [pc, #152]	@ (800f968 <HAL_TIM_Base_Start_IT+0xd0>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d022      	beq.n	800f918 <HAL_TIM_Base_Start_IT+0x80>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f8da:	d01d      	beq.n	800f918 <HAL_TIM_Base_Start_IT+0x80>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	4a22      	ldr	r2, [pc, #136]	@ (800f96c <HAL_TIM_Base_Start_IT+0xd4>)
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d018      	beq.n	800f918 <HAL_TIM_Base_Start_IT+0x80>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	4a21      	ldr	r2, [pc, #132]	@ (800f970 <HAL_TIM_Base_Start_IT+0xd8>)
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	d013      	beq.n	800f918 <HAL_TIM_Base_Start_IT+0x80>
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	4a1f      	ldr	r2, [pc, #124]	@ (800f974 <HAL_TIM_Base_Start_IT+0xdc>)
 800f8f6:	4293      	cmp	r3, r2
 800f8f8:	d00e      	beq.n	800f918 <HAL_TIM_Base_Start_IT+0x80>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	4a1e      	ldr	r2, [pc, #120]	@ (800f978 <HAL_TIM_Base_Start_IT+0xe0>)
 800f900:	4293      	cmp	r3, r2
 800f902:	d009      	beq.n	800f918 <HAL_TIM_Base_Start_IT+0x80>
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	4a1c      	ldr	r2, [pc, #112]	@ (800f97c <HAL_TIM_Base_Start_IT+0xe4>)
 800f90a:	4293      	cmp	r3, r2
 800f90c:	d004      	beq.n	800f918 <HAL_TIM_Base_Start_IT+0x80>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	4a1b      	ldr	r2, [pc, #108]	@ (800f980 <HAL_TIM_Base_Start_IT+0xe8>)
 800f914:	4293      	cmp	r3, r2
 800f916:	d115      	bne.n	800f944 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	689a      	ldr	r2, [r3, #8]
 800f91e:	4b19      	ldr	r3, [pc, #100]	@ (800f984 <HAL_TIM_Base_Start_IT+0xec>)
 800f920:	4013      	ands	r3, r2
 800f922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	2b06      	cmp	r3, #6
 800f928:	d015      	beq.n	800f956 <HAL_TIM_Base_Start_IT+0xbe>
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f930:	d011      	beq.n	800f956 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	681a      	ldr	r2, [r3, #0]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	f042 0201 	orr.w	r2, r2, #1
 800f940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f942:	e008      	b.n	800f956 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	681a      	ldr	r2, [r3, #0]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f042 0201 	orr.w	r2, r2, #1
 800f952:	601a      	str	r2, [r3, #0]
 800f954:	e000      	b.n	800f958 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f956:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f958:	2300      	movs	r3, #0
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3714      	adds	r7, #20
 800f95e:	46bd      	mov	sp, r7
 800f960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f964:	4770      	bx	lr
 800f966:	bf00      	nop
 800f968:	40010000 	.word	0x40010000
 800f96c:	40000400 	.word	0x40000400
 800f970:	40000800 	.word	0x40000800
 800f974:	40000c00 	.word	0x40000c00
 800f978:	40010400 	.word	0x40010400
 800f97c:	40001800 	.word	0x40001800
 800f980:	40014000 	.word	0x40014000
 800f984:	00010007 	.word	0x00010007

0800f988 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b082      	sub	sp, #8
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d101      	bne.n	800f99a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f996:	2301      	movs	r3, #1
 800f998:	e049      	b.n	800fa2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f9a0:	b2db      	uxtb	r3, r3
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d106      	bne.n	800f9b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f7f2 fcda 	bl	8002368 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2202      	movs	r2, #2
 800f9b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681a      	ldr	r2, [r3, #0]
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	3304      	adds	r3, #4
 800f9c4:	4619      	mov	r1, r3
 800f9c6:	4610      	mov	r0, r2
 800f9c8:	f000 fc8a 	bl	80102e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2201      	movs	r2, #1
 800f9d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2201      	movs	r2, #1
 800f9d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2201      	movs	r2, #1
 800f9e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2201      	movs	r2, #1
 800f9e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2201      	movs	r2, #1
 800f9f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2201      	movs	r2, #1
 800fa00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2201      	movs	r2, #1
 800fa08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2201      	movs	r2, #1
 800fa10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2201      	movs	r2, #1
 800fa18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2201      	movs	r2, #1
 800fa20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2201      	movs	r2, #1
 800fa28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fa2c:	2300      	movs	r3, #0
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3708      	adds	r7, #8
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
	...

0800fa38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b084      	sub	sp, #16
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d109      	bne.n	800fa5c <HAL_TIM_PWM_Start+0x24>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800fa4e:	b2db      	uxtb	r3, r3
 800fa50:	2b01      	cmp	r3, #1
 800fa52:	bf14      	ite	ne
 800fa54:	2301      	movne	r3, #1
 800fa56:	2300      	moveq	r3, #0
 800fa58:	b2db      	uxtb	r3, r3
 800fa5a:	e03c      	b.n	800fad6 <HAL_TIM_PWM_Start+0x9e>
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	2b04      	cmp	r3, #4
 800fa60:	d109      	bne.n	800fa76 <HAL_TIM_PWM_Start+0x3e>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800fa68:	b2db      	uxtb	r3, r3
 800fa6a:	2b01      	cmp	r3, #1
 800fa6c:	bf14      	ite	ne
 800fa6e:	2301      	movne	r3, #1
 800fa70:	2300      	moveq	r3, #0
 800fa72:	b2db      	uxtb	r3, r3
 800fa74:	e02f      	b.n	800fad6 <HAL_TIM_PWM_Start+0x9e>
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	2b08      	cmp	r3, #8
 800fa7a:	d109      	bne.n	800fa90 <HAL_TIM_PWM_Start+0x58>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fa82:	b2db      	uxtb	r3, r3
 800fa84:	2b01      	cmp	r3, #1
 800fa86:	bf14      	ite	ne
 800fa88:	2301      	movne	r3, #1
 800fa8a:	2300      	moveq	r3, #0
 800fa8c:	b2db      	uxtb	r3, r3
 800fa8e:	e022      	b.n	800fad6 <HAL_TIM_PWM_Start+0x9e>
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	2b0c      	cmp	r3, #12
 800fa94:	d109      	bne.n	800faaa <HAL_TIM_PWM_Start+0x72>
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fa9c:	b2db      	uxtb	r3, r3
 800fa9e:	2b01      	cmp	r3, #1
 800faa0:	bf14      	ite	ne
 800faa2:	2301      	movne	r3, #1
 800faa4:	2300      	moveq	r3, #0
 800faa6:	b2db      	uxtb	r3, r3
 800faa8:	e015      	b.n	800fad6 <HAL_TIM_PWM_Start+0x9e>
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	2b10      	cmp	r3, #16
 800faae:	d109      	bne.n	800fac4 <HAL_TIM_PWM_Start+0x8c>
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fab6:	b2db      	uxtb	r3, r3
 800fab8:	2b01      	cmp	r3, #1
 800faba:	bf14      	ite	ne
 800fabc:	2301      	movne	r3, #1
 800fabe:	2300      	moveq	r3, #0
 800fac0:	b2db      	uxtb	r3, r3
 800fac2:	e008      	b.n	800fad6 <HAL_TIM_PWM_Start+0x9e>
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800faca:	b2db      	uxtb	r3, r3
 800facc:	2b01      	cmp	r3, #1
 800face:	bf14      	ite	ne
 800fad0:	2301      	movne	r3, #1
 800fad2:	2300      	moveq	r3, #0
 800fad4:	b2db      	uxtb	r3, r3
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d001      	beq.n	800fade <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800fada:	2301      	movs	r3, #1
 800fadc:	e0a1      	b.n	800fc22 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fade:	683b      	ldr	r3, [r7, #0]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d104      	bne.n	800faee <HAL_TIM_PWM_Start+0xb6>
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2202      	movs	r2, #2
 800fae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800faec:	e023      	b.n	800fb36 <HAL_TIM_PWM_Start+0xfe>
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	2b04      	cmp	r3, #4
 800faf2:	d104      	bne.n	800fafe <HAL_TIM_PWM_Start+0xc6>
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2202      	movs	r2, #2
 800faf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fafc:	e01b      	b.n	800fb36 <HAL_TIM_PWM_Start+0xfe>
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	2b08      	cmp	r3, #8
 800fb02:	d104      	bne.n	800fb0e <HAL_TIM_PWM_Start+0xd6>
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2202      	movs	r2, #2
 800fb08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fb0c:	e013      	b.n	800fb36 <HAL_TIM_PWM_Start+0xfe>
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	2b0c      	cmp	r3, #12
 800fb12:	d104      	bne.n	800fb1e <HAL_TIM_PWM_Start+0xe6>
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	2202      	movs	r2, #2
 800fb18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fb1c:	e00b      	b.n	800fb36 <HAL_TIM_PWM_Start+0xfe>
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	2b10      	cmp	r3, #16
 800fb22:	d104      	bne.n	800fb2e <HAL_TIM_PWM_Start+0xf6>
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2202      	movs	r2, #2
 800fb28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fb2c:	e003      	b.n	800fb36 <HAL_TIM_PWM_Start+0xfe>
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2202      	movs	r2, #2
 800fb32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	2201      	movs	r2, #1
 800fb3c:	6839      	ldr	r1, [r7, #0]
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f000 ffe2 	bl	8010b08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	4a38      	ldr	r2, [pc, #224]	@ (800fc2c <HAL_TIM_PWM_Start+0x1f4>)
 800fb4a:	4293      	cmp	r3, r2
 800fb4c:	d013      	beq.n	800fb76 <HAL_TIM_PWM_Start+0x13e>
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	4a37      	ldr	r2, [pc, #220]	@ (800fc30 <HAL_TIM_PWM_Start+0x1f8>)
 800fb54:	4293      	cmp	r3, r2
 800fb56:	d00e      	beq.n	800fb76 <HAL_TIM_PWM_Start+0x13e>
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	4a35      	ldr	r2, [pc, #212]	@ (800fc34 <HAL_TIM_PWM_Start+0x1fc>)
 800fb5e:	4293      	cmp	r3, r2
 800fb60:	d009      	beq.n	800fb76 <HAL_TIM_PWM_Start+0x13e>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	4a34      	ldr	r2, [pc, #208]	@ (800fc38 <HAL_TIM_PWM_Start+0x200>)
 800fb68:	4293      	cmp	r3, r2
 800fb6a:	d004      	beq.n	800fb76 <HAL_TIM_PWM_Start+0x13e>
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	4a32      	ldr	r2, [pc, #200]	@ (800fc3c <HAL_TIM_PWM_Start+0x204>)
 800fb72:	4293      	cmp	r3, r2
 800fb74:	d101      	bne.n	800fb7a <HAL_TIM_PWM_Start+0x142>
 800fb76:	2301      	movs	r3, #1
 800fb78:	e000      	b.n	800fb7c <HAL_TIM_PWM_Start+0x144>
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d007      	beq.n	800fb90 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800fb8e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	4a25      	ldr	r2, [pc, #148]	@ (800fc2c <HAL_TIM_PWM_Start+0x1f4>)
 800fb96:	4293      	cmp	r3, r2
 800fb98:	d022      	beq.n	800fbe0 <HAL_TIM_PWM_Start+0x1a8>
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fba2:	d01d      	beq.n	800fbe0 <HAL_TIM_PWM_Start+0x1a8>
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	4a25      	ldr	r2, [pc, #148]	@ (800fc40 <HAL_TIM_PWM_Start+0x208>)
 800fbaa:	4293      	cmp	r3, r2
 800fbac:	d018      	beq.n	800fbe0 <HAL_TIM_PWM_Start+0x1a8>
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	4a24      	ldr	r2, [pc, #144]	@ (800fc44 <HAL_TIM_PWM_Start+0x20c>)
 800fbb4:	4293      	cmp	r3, r2
 800fbb6:	d013      	beq.n	800fbe0 <HAL_TIM_PWM_Start+0x1a8>
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	4a22      	ldr	r2, [pc, #136]	@ (800fc48 <HAL_TIM_PWM_Start+0x210>)
 800fbbe:	4293      	cmp	r3, r2
 800fbc0:	d00e      	beq.n	800fbe0 <HAL_TIM_PWM_Start+0x1a8>
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	4a1a      	ldr	r2, [pc, #104]	@ (800fc30 <HAL_TIM_PWM_Start+0x1f8>)
 800fbc8:	4293      	cmp	r3, r2
 800fbca:	d009      	beq.n	800fbe0 <HAL_TIM_PWM_Start+0x1a8>
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	4a1e      	ldr	r2, [pc, #120]	@ (800fc4c <HAL_TIM_PWM_Start+0x214>)
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d004      	beq.n	800fbe0 <HAL_TIM_PWM_Start+0x1a8>
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	4a16      	ldr	r2, [pc, #88]	@ (800fc34 <HAL_TIM_PWM_Start+0x1fc>)
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	d115      	bne.n	800fc0c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	689a      	ldr	r2, [r3, #8]
 800fbe6:	4b1a      	ldr	r3, [pc, #104]	@ (800fc50 <HAL_TIM_PWM_Start+0x218>)
 800fbe8:	4013      	ands	r3, r2
 800fbea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	2b06      	cmp	r3, #6
 800fbf0:	d015      	beq.n	800fc1e <HAL_TIM_PWM_Start+0x1e6>
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fbf8:	d011      	beq.n	800fc1e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	681a      	ldr	r2, [r3, #0]
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	f042 0201 	orr.w	r2, r2, #1
 800fc08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc0a:	e008      	b.n	800fc1e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	681a      	ldr	r2, [r3, #0]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	f042 0201 	orr.w	r2, r2, #1
 800fc1a:	601a      	str	r2, [r3, #0]
 800fc1c:	e000      	b.n	800fc20 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fc20:	2300      	movs	r3, #0
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	3710      	adds	r7, #16
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}
 800fc2a:	bf00      	nop
 800fc2c:	40010000 	.word	0x40010000
 800fc30:	40010400 	.word	0x40010400
 800fc34:	40014000 	.word	0x40014000
 800fc38:	40014400 	.word	0x40014400
 800fc3c:	40014800 	.word	0x40014800
 800fc40:	40000400 	.word	0x40000400
 800fc44:	40000800 	.word	0x40000800
 800fc48:	40000c00 	.word	0x40000c00
 800fc4c:	40001800 	.word	0x40001800
 800fc50:	00010007 	.word	0x00010007

0800fc54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b084      	sub	sp, #16
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	68db      	ldr	r3, [r3, #12]
 800fc62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	691b      	ldr	r3, [r3, #16]
 800fc6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	f003 0302 	and.w	r3, r3, #2
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d020      	beq.n	800fcb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	f003 0302 	and.w	r3, r3, #2
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d01b      	beq.n	800fcb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	f06f 0202 	mvn.w	r2, #2
 800fc88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2201      	movs	r2, #1
 800fc8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	699b      	ldr	r3, [r3, #24]
 800fc96:	f003 0303 	and.w	r3, r3, #3
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d003      	beq.n	800fca6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f000 fb00 	bl	80102a4 <HAL_TIM_IC_CaptureCallback>
 800fca4:	e005      	b.n	800fcb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f000 faf2 	bl	8010290 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f000 fb03 	bl	80102b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	f003 0304 	and.w	r3, r3, #4
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d020      	beq.n	800fd04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	f003 0304 	and.w	r3, r3, #4
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d01b      	beq.n	800fd04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	f06f 0204 	mvn.w	r2, #4
 800fcd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	2202      	movs	r2, #2
 800fcda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	699b      	ldr	r3, [r3, #24]
 800fce2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d003      	beq.n	800fcf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f000 fada 	bl	80102a4 <HAL_TIM_IC_CaptureCallback>
 800fcf0:	e005      	b.n	800fcfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f000 facc 	bl	8010290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f000 fadd 	bl	80102b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2200      	movs	r2, #0
 800fd02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	f003 0308 	and.w	r3, r3, #8
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d020      	beq.n	800fd50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	f003 0308 	and.w	r3, r3, #8
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d01b      	beq.n	800fd50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	f06f 0208 	mvn.w	r2, #8
 800fd20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2204      	movs	r2, #4
 800fd26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	69db      	ldr	r3, [r3, #28]
 800fd2e:	f003 0303 	and.w	r3, r3, #3
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d003      	beq.n	800fd3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f000 fab4 	bl	80102a4 <HAL_TIM_IC_CaptureCallback>
 800fd3c:	e005      	b.n	800fd4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f000 faa6 	bl	8010290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f000 fab7 	bl	80102b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	f003 0310 	and.w	r3, r3, #16
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d020      	beq.n	800fd9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	f003 0310 	and.w	r3, r3, #16
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d01b      	beq.n	800fd9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	f06f 0210 	mvn.w	r2, #16
 800fd6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	2208      	movs	r2, #8
 800fd72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	69db      	ldr	r3, [r3, #28]
 800fd7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d003      	beq.n	800fd8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f000 fa8e 	bl	80102a4 <HAL_TIM_IC_CaptureCallback>
 800fd88:	e005      	b.n	800fd96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f000 fa80 	bl	8010290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f000 fa91 	bl	80102b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	f003 0301 	and.w	r3, r3, #1
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d00c      	beq.n	800fdc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	f003 0301 	and.w	r3, r3, #1
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d007      	beq.n	800fdc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	f06f 0201 	mvn.w	r2, #1
 800fdb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f000 fa5e 	bl	801027c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d104      	bne.n	800fdd4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800fdca:	68bb      	ldr	r3, [r7, #8]
 800fdcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d00c      	beq.n	800fdee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d007      	beq.n	800fdee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800fde6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f000 ffc9 	bl	8010d80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d00c      	beq.n	800fe12 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d007      	beq.n	800fe12 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800fe0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f000 ffc1 	bl	8010d94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d00c      	beq.n	800fe36 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d007      	beq.n	800fe36 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800fe2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f000 fa4b 	bl	80102cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	f003 0320 	and.w	r3, r3, #32
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d00c      	beq.n	800fe5a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f003 0320 	and.w	r3, r3, #32
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d007      	beq.n	800fe5a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	f06f 0220 	mvn.w	r2, #32
 800fe52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f000 ff89 	bl	8010d6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fe5a:	bf00      	nop
 800fe5c:	3710      	adds	r7, #16
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
	...

0800fe64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b086      	sub	sp, #24
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	60f8      	str	r0, [r7, #12]
 800fe6c:	60b9      	str	r1, [r7, #8]
 800fe6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fe70:	2300      	movs	r3, #0
 800fe72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d101      	bne.n	800fe82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fe7e:	2302      	movs	r3, #2
 800fe80:	e0ff      	b.n	8010082 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2201      	movs	r2, #1
 800fe86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2b14      	cmp	r3, #20
 800fe8e:	f200 80f0 	bhi.w	8010072 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fe92:	a201      	add	r2, pc, #4	@ (adr r2, 800fe98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fe94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe98:	0800feed 	.word	0x0800feed
 800fe9c:	08010073 	.word	0x08010073
 800fea0:	08010073 	.word	0x08010073
 800fea4:	08010073 	.word	0x08010073
 800fea8:	0800ff2d 	.word	0x0800ff2d
 800feac:	08010073 	.word	0x08010073
 800feb0:	08010073 	.word	0x08010073
 800feb4:	08010073 	.word	0x08010073
 800feb8:	0800ff6f 	.word	0x0800ff6f
 800febc:	08010073 	.word	0x08010073
 800fec0:	08010073 	.word	0x08010073
 800fec4:	08010073 	.word	0x08010073
 800fec8:	0800ffaf 	.word	0x0800ffaf
 800fecc:	08010073 	.word	0x08010073
 800fed0:	08010073 	.word	0x08010073
 800fed4:	08010073 	.word	0x08010073
 800fed8:	0800fff1 	.word	0x0800fff1
 800fedc:	08010073 	.word	0x08010073
 800fee0:	08010073 	.word	0x08010073
 800fee4:	08010073 	.word	0x08010073
 800fee8:	08010031 	.word	0x08010031
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	68b9      	ldr	r1, [r7, #8]
 800fef2:	4618      	mov	r0, r3
 800fef4:	f000 fa94 	bl	8010420 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	699a      	ldr	r2, [r3, #24]
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	f042 0208 	orr.w	r2, r2, #8
 800ff06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	699a      	ldr	r2, [r3, #24]
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	f022 0204 	bic.w	r2, r2, #4
 800ff16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	6999      	ldr	r1, [r3, #24]
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	691a      	ldr	r2, [r3, #16]
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	430a      	orrs	r2, r1
 800ff28:	619a      	str	r2, [r3, #24]
      break;
 800ff2a:	e0a5      	b.n	8010078 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	68b9      	ldr	r1, [r7, #8]
 800ff32:	4618      	mov	r0, r3
 800ff34:	f000 fb04 	bl	8010540 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	699a      	ldr	r2, [r3, #24]
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ff46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	699a      	ldr	r2, [r3, #24]
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ff56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	6999      	ldr	r1, [r3, #24]
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	691b      	ldr	r3, [r3, #16]
 800ff62:	021a      	lsls	r2, r3, #8
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	430a      	orrs	r2, r1
 800ff6a:	619a      	str	r2, [r3, #24]
      break;
 800ff6c:	e084      	b.n	8010078 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	68b9      	ldr	r1, [r7, #8]
 800ff74:	4618      	mov	r0, r3
 800ff76:	f000 fb6d 	bl	8010654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	69da      	ldr	r2, [r3, #28]
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	f042 0208 	orr.w	r2, r2, #8
 800ff88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	69da      	ldr	r2, [r3, #28]
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	f022 0204 	bic.w	r2, r2, #4
 800ff98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	69d9      	ldr	r1, [r3, #28]
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	691a      	ldr	r2, [r3, #16]
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	430a      	orrs	r2, r1
 800ffaa:	61da      	str	r2, [r3, #28]
      break;
 800ffac:	e064      	b.n	8010078 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	68b9      	ldr	r1, [r7, #8]
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f000 fbd5 	bl	8010764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	69da      	ldr	r2, [r3, #28]
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ffc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	69da      	ldr	r2, [r3, #28]
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ffd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	69d9      	ldr	r1, [r3, #28]
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	691b      	ldr	r3, [r3, #16]
 800ffe4:	021a      	lsls	r2, r3, #8
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	430a      	orrs	r2, r1
 800ffec:	61da      	str	r2, [r3, #28]
      break;
 800ffee:	e043      	b.n	8010078 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	68b9      	ldr	r1, [r7, #8]
 800fff6:	4618      	mov	r0, r3
 800fff8:	f000 fc1e 	bl	8010838 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	f042 0208 	orr.w	r2, r2, #8
 801000a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	f022 0204 	bic.w	r2, r2, #4
 801001a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	691a      	ldr	r2, [r3, #16]
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	430a      	orrs	r2, r1
 801002c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801002e:	e023      	b.n	8010078 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	68b9      	ldr	r1, [r7, #8]
 8010036:	4618      	mov	r0, r3
 8010038:	f000 fc62 	bl	8010900 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801004a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801005a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	691b      	ldr	r3, [r3, #16]
 8010066:	021a      	lsls	r2, r3, #8
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	430a      	orrs	r2, r1
 801006e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8010070:	e002      	b.n	8010078 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010072:	2301      	movs	r3, #1
 8010074:	75fb      	strb	r3, [r7, #23]
      break;
 8010076:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	2200      	movs	r2, #0
 801007c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010080:	7dfb      	ldrb	r3, [r7, #23]
}
 8010082:	4618      	mov	r0, r3
 8010084:	3718      	adds	r7, #24
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}
 801008a:	bf00      	nop

0801008c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b084      	sub	sp, #16
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010096:	2300      	movs	r3, #0
 8010098:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80100a0:	2b01      	cmp	r3, #1
 80100a2:	d101      	bne.n	80100a8 <HAL_TIM_ConfigClockSource+0x1c>
 80100a4:	2302      	movs	r3, #2
 80100a6:	e0dc      	b.n	8010262 <HAL_TIM_ConfigClockSource+0x1d6>
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2201      	movs	r2, #1
 80100ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2202      	movs	r2, #2
 80100b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	689b      	ldr	r3, [r3, #8]
 80100be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80100c0:	68ba      	ldr	r2, [r7, #8]
 80100c2:	4b6a      	ldr	r3, [pc, #424]	@ (801026c <HAL_TIM_ConfigClockSource+0x1e0>)
 80100c4:	4013      	ands	r3, r2
 80100c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80100ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	68ba      	ldr	r2, [r7, #8]
 80100d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	4a64      	ldr	r2, [pc, #400]	@ (8010270 <HAL_TIM_ConfigClockSource+0x1e4>)
 80100de:	4293      	cmp	r3, r2
 80100e0:	f000 80a9 	beq.w	8010236 <HAL_TIM_ConfigClockSource+0x1aa>
 80100e4:	4a62      	ldr	r2, [pc, #392]	@ (8010270 <HAL_TIM_ConfigClockSource+0x1e4>)
 80100e6:	4293      	cmp	r3, r2
 80100e8:	f200 80ae 	bhi.w	8010248 <HAL_TIM_ConfigClockSource+0x1bc>
 80100ec:	4a61      	ldr	r2, [pc, #388]	@ (8010274 <HAL_TIM_ConfigClockSource+0x1e8>)
 80100ee:	4293      	cmp	r3, r2
 80100f0:	f000 80a1 	beq.w	8010236 <HAL_TIM_ConfigClockSource+0x1aa>
 80100f4:	4a5f      	ldr	r2, [pc, #380]	@ (8010274 <HAL_TIM_ConfigClockSource+0x1e8>)
 80100f6:	4293      	cmp	r3, r2
 80100f8:	f200 80a6 	bhi.w	8010248 <HAL_TIM_ConfigClockSource+0x1bc>
 80100fc:	4a5e      	ldr	r2, [pc, #376]	@ (8010278 <HAL_TIM_ConfigClockSource+0x1ec>)
 80100fe:	4293      	cmp	r3, r2
 8010100:	f000 8099 	beq.w	8010236 <HAL_TIM_ConfigClockSource+0x1aa>
 8010104:	4a5c      	ldr	r2, [pc, #368]	@ (8010278 <HAL_TIM_ConfigClockSource+0x1ec>)
 8010106:	4293      	cmp	r3, r2
 8010108:	f200 809e 	bhi.w	8010248 <HAL_TIM_ConfigClockSource+0x1bc>
 801010c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8010110:	f000 8091 	beq.w	8010236 <HAL_TIM_ConfigClockSource+0x1aa>
 8010114:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8010118:	f200 8096 	bhi.w	8010248 <HAL_TIM_ConfigClockSource+0x1bc>
 801011c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010120:	f000 8089 	beq.w	8010236 <HAL_TIM_ConfigClockSource+0x1aa>
 8010124:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010128:	f200 808e 	bhi.w	8010248 <HAL_TIM_ConfigClockSource+0x1bc>
 801012c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010130:	d03e      	beq.n	80101b0 <HAL_TIM_ConfigClockSource+0x124>
 8010132:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010136:	f200 8087 	bhi.w	8010248 <HAL_TIM_ConfigClockSource+0x1bc>
 801013a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801013e:	f000 8086 	beq.w	801024e <HAL_TIM_ConfigClockSource+0x1c2>
 8010142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010146:	d87f      	bhi.n	8010248 <HAL_TIM_ConfigClockSource+0x1bc>
 8010148:	2b70      	cmp	r3, #112	@ 0x70
 801014a:	d01a      	beq.n	8010182 <HAL_TIM_ConfigClockSource+0xf6>
 801014c:	2b70      	cmp	r3, #112	@ 0x70
 801014e:	d87b      	bhi.n	8010248 <HAL_TIM_ConfigClockSource+0x1bc>
 8010150:	2b60      	cmp	r3, #96	@ 0x60
 8010152:	d050      	beq.n	80101f6 <HAL_TIM_ConfigClockSource+0x16a>
 8010154:	2b60      	cmp	r3, #96	@ 0x60
 8010156:	d877      	bhi.n	8010248 <HAL_TIM_ConfigClockSource+0x1bc>
 8010158:	2b50      	cmp	r3, #80	@ 0x50
 801015a:	d03c      	beq.n	80101d6 <HAL_TIM_ConfigClockSource+0x14a>
 801015c:	2b50      	cmp	r3, #80	@ 0x50
 801015e:	d873      	bhi.n	8010248 <HAL_TIM_ConfigClockSource+0x1bc>
 8010160:	2b40      	cmp	r3, #64	@ 0x40
 8010162:	d058      	beq.n	8010216 <HAL_TIM_ConfigClockSource+0x18a>
 8010164:	2b40      	cmp	r3, #64	@ 0x40
 8010166:	d86f      	bhi.n	8010248 <HAL_TIM_ConfigClockSource+0x1bc>
 8010168:	2b30      	cmp	r3, #48	@ 0x30
 801016a:	d064      	beq.n	8010236 <HAL_TIM_ConfigClockSource+0x1aa>
 801016c:	2b30      	cmp	r3, #48	@ 0x30
 801016e:	d86b      	bhi.n	8010248 <HAL_TIM_ConfigClockSource+0x1bc>
 8010170:	2b20      	cmp	r3, #32
 8010172:	d060      	beq.n	8010236 <HAL_TIM_ConfigClockSource+0x1aa>
 8010174:	2b20      	cmp	r3, #32
 8010176:	d867      	bhi.n	8010248 <HAL_TIM_ConfigClockSource+0x1bc>
 8010178:	2b00      	cmp	r3, #0
 801017a:	d05c      	beq.n	8010236 <HAL_TIM_ConfigClockSource+0x1aa>
 801017c:	2b10      	cmp	r3, #16
 801017e:	d05a      	beq.n	8010236 <HAL_TIM_ConfigClockSource+0x1aa>
 8010180:	e062      	b.n	8010248 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010192:	f000 fc99 	bl	8010ac8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	689b      	ldr	r3, [r3, #8]
 801019c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80101a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	68ba      	ldr	r2, [r7, #8]
 80101ac:	609a      	str	r2, [r3, #8]
      break;
 80101ae:	e04f      	b.n	8010250 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80101b4:	683b      	ldr	r3, [r7, #0]
 80101b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80101c0:	f000 fc82 	bl	8010ac8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	689a      	ldr	r2, [r3, #8]
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80101d2:	609a      	str	r2, [r3, #8]
      break;
 80101d4:	e03c      	b.n	8010250 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80101e2:	461a      	mov	r2, r3
 80101e4:	f000 fbf2 	bl	80109cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	2150      	movs	r1, #80	@ 0x50
 80101ee:	4618      	mov	r0, r3
 80101f0:	f000 fc4c 	bl	8010a8c <TIM_ITRx_SetConfig>
      break;
 80101f4:	e02c      	b.n	8010250 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010202:	461a      	mov	r2, r3
 8010204:	f000 fc11 	bl	8010a2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	2160      	movs	r1, #96	@ 0x60
 801020e:	4618      	mov	r0, r3
 8010210:	f000 fc3c 	bl	8010a8c <TIM_ITRx_SetConfig>
      break;
 8010214:	e01c      	b.n	8010250 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010222:	461a      	mov	r2, r3
 8010224:	f000 fbd2 	bl	80109cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	2140      	movs	r1, #64	@ 0x40
 801022e:	4618      	mov	r0, r3
 8010230:	f000 fc2c 	bl	8010a8c <TIM_ITRx_SetConfig>
      break;
 8010234:	e00c      	b.n	8010250 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	4619      	mov	r1, r3
 8010240:	4610      	mov	r0, r2
 8010242:	f000 fc23 	bl	8010a8c <TIM_ITRx_SetConfig>
      break;
 8010246:	e003      	b.n	8010250 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8010248:	2301      	movs	r3, #1
 801024a:	73fb      	strb	r3, [r7, #15]
      break;
 801024c:	e000      	b.n	8010250 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801024e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2201      	movs	r2, #1
 8010254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2200      	movs	r2, #0
 801025c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010260:	7bfb      	ldrb	r3, [r7, #15]
}
 8010262:	4618      	mov	r0, r3
 8010264:	3710      	adds	r7, #16
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}
 801026a:	bf00      	nop
 801026c:	ffceff88 	.word	0xffceff88
 8010270:	00100040 	.word	0x00100040
 8010274:	00100030 	.word	0x00100030
 8010278:	00100020 	.word	0x00100020

0801027c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801027c:	b480      	push	{r7}
 801027e:	b083      	sub	sp, #12
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010284:	bf00      	nop
 8010286:	370c      	adds	r7, #12
 8010288:	46bd      	mov	sp, r7
 801028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028e:	4770      	bx	lr

08010290 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010290:	b480      	push	{r7}
 8010292:	b083      	sub	sp, #12
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010298:	bf00      	nop
 801029a:	370c      	adds	r7, #12
 801029c:	46bd      	mov	sp, r7
 801029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a2:	4770      	bx	lr

080102a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80102a4:	b480      	push	{r7}
 80102a6:	b083      	sub	sp, #12
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80102ac:	bf00      	nop
 80102ae:	370c      	adds	r7, #12
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr

080102b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80102b8:	b480      	push	{r7}
 80102ba:	b083      	sub	sp, #12
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80102c0:	bf00      	nop
 80102c2:	370c      	adds	r7, #12
 80102c4:	46bd      	mov	sp, r7
 80102c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ca:	4770      	bx	lr

080102cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b083      	sub	sp, #12
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80102d4:	bf00      	nop
 80102d6:	370c      	adds	r7, #12
 80102d8:	46bd      	mov	sp, r7
 80102da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102de:	4770      	bx	lr

080102e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80102e0:	b480      	push	{r7}
 80102e2:	b085      	sub	sp, #20
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
 80102e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	4a43      	ldr	r2, [pc, #268]	@ (8010400 <TIM_Base_SetConfig+0x120>)
 80102f4:	4293      	cmp	r3, r2
 80102f6:	d013      	beq.n	8010320 <TIM_Base_SetConfig+0x40>
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80102fe:	d00f      	beq.n	8010320 <TIM_Base_SetConfig+0x40>
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	4a40      	ldr	r2, [pc, #256]	@ (8010404 <TIM_Base_SetConfig+0x124>)
 8010304:	4293      	cmp	r3, r2
 8010306:	d00b      	beq.n	8010320 <TIM_Base_SetConfig+0x40>
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	4a3f      	ldr	r2, [pc, #252]	@ (8010408 <TIM_Base_SetConfig+0x128>)
 801030c:	4293      	cmp	r3, r2
 801030e:	d007      	beq.n	8010320 <TIM_Base_SetConfig+0x40>
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	4a3e      	ldr	r2, [pc, #248]	@ (801040c <TIM_Base_SetConfig+0x12c>)
 8010314:	4293      	cmp	r3, r2
 8010316:	d003      	beq.n	8010320 <TIM_Base_SetConfig+0x40>
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	4a3d      	ldr	r2, [pc, #244]	@ (8010410 <TIM_Base_SetConfig+0x130>)
 801031c:	4293      	cmp	r3, r2
 801031e:	d108      	bne.n	8010332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	685b      	ldr	r3, [r3, #4]
 801032c:	68fa      	ldr	r2, [r7, #12]
 801032e:	4313      	orrs	r3, r2
 8010330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	4a32      	ldr	r2, [pc, #200]	@ (8010400 <TIM_Base_SetConfig+0x120>)
 8010336:	4293      	cmp	r3, r2
 8010338:	d01f      	beq.n	801037a <TIM_Base_SetConfig+0x9a>
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010340:	d01b      	beq.n	801037a <TIM_Base_SetConfig+0x9a>
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	4a2f      	ldr	r2, [pc, #188]	@ (8010404 <TIM_Base_SetConfig+0x124>)
 8010346:	4293      	cmp	r3, r2
 8010348:	d017      	beq.n	801037a <TIM_Base_SetConfig+0x9a>
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	4a2e      	ldr	r2, [pc, #184]	@ (8010408 <TIM_Base_SetConfig+0x128>)
 801034e:	4293      	cmp	r3, r2
 8010350:	d013      	beq.n	801037a <TIM_Base_SetConfig+0x9a>
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	4a2d      	ldr	r2, [pc, #180]	@ (801040c <TIM_Base_SetConfig+0x12c>)
 8010356:	4293      	cmp	r3, r2
 8010358:	d00f      	beq.n	801037a <TIM_Base_SetConfig+0x9a>
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	4a2c      	ldr	r2, [pc, #176]	@ (8010410 <TIM_Base_SetConfig+0x130>)
 801035e:	4293      	cmp	r3, r2
 8010360:	d00b      	beq.n	801037a <TIM_Base_SetConfig+0x9a>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	4a2b      	ldr	r2, [pc, #172]	@ (8010414 <TIM_Base_SetConfig+0x134>)
 8010366:	4293      	cmp	r3, r2
 8010368:	d007      	beq.n	801037a <TIM_Base_SetConfig+0x9a>
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	4a2a      	ldr	r2, [pc, #168]	@ (8010418 <TIM_Base_SetConfig+0x138>)
 801036e:	4293      	cmp	r3, r2
 8010370:	d003      	beq.n	801037a <TIM_Base_SetConfig+0x9a>
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	4a29      	ldr	r2, [pc, #164]	@ (801041c <TIM_Base_SetConfig+0x13c>)
 8010376:	4293      	cmp	r3, r2
 8010378:	d108      	bne.n	801038c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	68db      	ldr	r3, [r3, #12]
 8010386:	68fa      	ldr	r2, [r7, #12]
 8010388:	4313      	orrs	r3, r2
 801038a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	695b      	ldr	r3, [r3, #20]
 8010396:	4313      	orrs	r3, r2
 8010398:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	689a      	ldr	r2, [r3, #8]
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	681a      	ldr	r2, [r3, #0]
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	4a14      	ldr	r2, [pc, #80]	@ (8010400 <TIM_Base_SetConfig+0x120>)
 80103ae:	4293      	cmp	r3, r2
 80103b0:	d00f      	beq.n	80103d2 <TIM_Base_SetConfig+0xf2>
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	4a16      	ldr	r2, [pc, #88]	@ (8010410 <TIM_Base_SetConfig+0x130>)
 80103b6:	4293      	cmp	r3, r2
 80103b8:	d00b      	beq.n	80103d2 <TIM_Base_SetConfig+0xf2>
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	4a15      	ldr	r2, [pc, #84]	@ (8010414 <TIM_Base_SetConfig+0x134>)
 80103be:	4293      	cmp	r3, r2
 80103c0:	d007      	beq.n	80103d2 <TIM_Base_SetConfig+0xf2>
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	4a14      	ldr	r2, [pc, #80]	@ (8010418 <TIM_Base_SetConfig+0x138>)
 80103c6:	4293      	cmp	r3, r2
 80103c8:	d003      	beq.n	80103d2 <TIM_Base_SetConfig+0xf2>
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	4a13      	ldr	r2, [pc, #76]	@ (801041c <TIM_Base_SetConfig+0x13c>)
 80103ce:	4293      	cmp	r3, r2
 80103d0:	d103      	bne.n	80103da <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	691a      	ldr	r2, [r3, #16]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	f043 0204 	orr.w	r2, r3, #4
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2201      	movs	r2, #1
 80103ea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	68fa      	ldr	r2, [r7, #12]
 80103f0:	601a      	str	r2, [r3, #0]
}
 80103f2:	bf00      	nop
 80103f4:	3714      	adds	r7, #20
 80103f6:	46bd      	mov	sp, r7
 80103f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fc:	4770      	bx	lr
 80103fe:	bf00      	nop
 8010400:	40010000 	.word	0x40010000
 8010404:	40000400 	.word	0x40000400
 8010408:	40000800 	.word	0x40000800
 801040c:	40000c00 	.word	0x40000c00
 8010410:	40010400 	.word	0x40010400
 8010414:	40014000 	.word	0x40014000
 8010418:	40014400 	.word	0x40014400
 801041c:	40014800 	.word	0x40014800

08010420 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010420:	b480      	push	{r7}
 8010422:	b087      	sub	sp, #28
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6a1b      	ldr	r3, [r3, #32]
 801042e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	6a1b      	ldr	r3, [r3, #32]
 8010434:	f023 0201 	bic.w	r2, r3, #1
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	685b      	ldr	r3, [r3, #4]
 8010440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	699b      	ldr	r3, [r3, #24]
 8010446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010448:	68fa      	ldr	r2, [r7, #12]
 801044a:	4b37      	ldr	r3, [pc, #220]	@ (8010528 <TIM_OC1_SetConfig+0x108>)
 801044c:	4013      	ands	r3, r2
 801044e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	f023 0303 	bic.w	r3, r3, #3
 8010456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	68fa      	ldr	r2, [r7, #12]
 801045e:	4313      	orrs	r3, r2
 8010460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	f023 0302 	bic.w	r3, r3, #2
 8010468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	689b      	ldr	r3, [r3, #8]
 801046e:	697a      	ldr	r2, [r7, #20]
 8010470:	4313      	orrs	r3, r2
 8010472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	4a2d      	ldr	r2, [pc, #180]	@ (801052c <TIM_OC1_SetConfig+0x10c>)
 8010478:	4293      	cmp	r3, r2
 801047a:	d00f      	beq.n	801049c <TIM_OC1_SetConfig+0x7c>
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	4a2c      	ldr	r2, [pc, #176]	@ (8010530 <TIM_OC1_SetConfig+0x110>)
 8010480:	4293      	cmp	r3, r2
 8010482:	d00b      	beq.n	801049c <TIM_OC1_SetConfig+0x7c>
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	4a2b      	ldr	r2, [pc, #172]	@ (8010534 <TIM_OC1_SetConfig+0x114>)
 8010488:	4293      	cmp	r3, r2
 801048a:	d007      	beq.n	801049c <TIM_OC1_SetConfig+0x7c>
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	4a2a      	ldr	r2, [pc, #168]	@ (8010538 <TIM_OC1_SetConfig+0x118>)
 8010490:	4293      	cmp	r3, r2
 8010492:	d003      	beq.n	801049c <TIM_OC1_SetConfig+0x7c>
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	4a29      	ldr	r2, [pc, #164]	@ (801053c <TIM_OC1_SetConfig+0x11c>)
 8010498:	4293      	cmp	r3, r2
 801049a:	d10c      	bne.n	80104b6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801049c:	697b      	ldr	r3, [r7, #20]
 801049e:	f023 0308 	bic.w	r3, r3, #8
 80104a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	68db      	ldr	r3, [r3, #12]
 80104a8:	697a      	ldr	r2, [r7, #20]
 80104aa:	4313      	orrs	r3, r2
 80104ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80104ae:	697b      	ldr	r3, [r7, #20]
 80104b0:	f023 0304 	bic.w	r3, r3, #4
 80104b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	4a1c      	ldr	r2, [pc, #112]	@ (801052c <TIM_OC1_SetConfig+0x10c>)
 80104ba:	4293      	cmp	r3, r2
 80104bc:	d00f      	beq.n	80104de <TIM_OC1_SetConfig+0xbe>
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	4a1b      	ldr	r2, [pc, #108]	@ (8010530 <TIM_OC1_SetConfig+0x110>)
 80104c2:	4293      	cmp	r3, r2
 80104c4:	d00b      	beq.n	80104de <TIM_OC1_SetConfig+0xbe>
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	4a1a      	ldr	r2, [pc, #104]	@ (8010534 <TIM_OC1_SetConfig+0x114>)
 80104ca:	4293      	cmp	r3, r2
 80104cc:	d007      	beq.n	80104de <TIM_OC1_SetConfig+0xbe>
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	4a19      	ldr	r2, [pc, #100]	@ (8010538 <TIM_OC1_SetConfig+0x118>)
 80104d2:	4293      	cmp	r3, r2
 80104d4:	d003      	beq.n	80104de <TIM_OC1_SetConfig+0xbe>
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	4a18      	ldr	r2, [pc, #96]	@ (801053c <TIM_OC1_SetConfig+0x11c>)
 80104da:	4293      	cmp	r3, r2
 80104dc:	d111      	bne.n	8010502 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80104de:	693b      	ldr	r3, [r7, #16]
 80104e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80104e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80104ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	695b      	ldr	r3, [r3, #20]
 80104f2:	693a      	ldr	r2, [r7, #16]
 80104f4:	4313      	orrs	r3, r2
 80104f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	699b      	ldr	r3, [r3, #24]
 80104fc:	693a      	ldr	r2, [r7, #16]
 80104fe:	4313      	orrs	r3, r2
 8010500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	693a      	ldr	r2, [r7, #16]
 8010506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	68fa      	ldr	r2, [r7, #12]
 801050c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	685a      	ldr	r2, [r3, #4]
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	697a      	ldr	r2, [r7, #20]
 801051a:	621a      	str	r2, [r3, #32]
}
 801051c:	bf00      	nop
 801051e:	371c      	adds	r7, #28
 8010520:	46bd      	mov	sp, r7
 8010522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010526:	4770      	bx	lr
 8010528:	fffeff8f 	.word	0xfffeff8f
 801052c:	40010000 	.word	0x40010000
 8010530:	40010400 	.word	0x40010400
 8010534:	40014000 	.word	0x40014000
 8010538:	40014400 	.word	0x40014400
 801053c:	40014800 	.word	0x40014800

08010540 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010540:	b480      	push	{r7}
 8010542:	b087      	sub	sp, #28
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
 8010548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6a1b      	ldr	r3, [r3, #32]
 801054e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6a1b      	ldr	r3, [r3, #32]
 8010554:	f023 0210 	bic.w	r2, r3, #16
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	685b      	ldr	r3, [r3, #4]
 8010560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	699b      	ldr	r3, [r3, #24]
 8010566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010568:	68fa      	ldr	r2, [r7, #12]
 801056a:	4b34      	ldr	r3, [pc, #208]	@ (801063c <TIM_OC2_SetConfig+0xfc>)
 801056c:	4013      	ands	r3, r2
 801056e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	021b      	lsls	r3, r3, #8
 801057e:	68fa      	ldr	r2, [r7, #12]
 8010580:	4313      	orrs	r3, r2
 8010582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	f023 0320 	bic.w	r3, r3, #32
 801058a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	689b      	ldr	r3, [r3, #8]
 8010590:	011b      	lsls	r3, r3, #4
 8010592:	697a      	ldr	r2, [r7, #20]
 8010594:	4313      	orrs	r3, r2
 8010596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	4a29      	ldr	r2, [pc, #164]	@ (8010640 <TIM_OC2_SetConfig+0x100>)
 801059c:	4293      	cmp	r3, r2
 801059e:	d003      	beq.n	80105a8 <TIM_OC2_SetConfig+0x68>
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	4a28      	ldr	r2, [pc, #160]	@ (8010644 <TIM_OC2_SetConfig+0x104>)
 80105a4:	4293      	cmp	r3, r2
 80105a6:	d10d      	bne.n	80105c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80105ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	68db      	ldr	r3, [r3, #12]
 80105b4:	011b      	lsls	r3, r3, #4
 80105b6:	697a      	ldr	r2, [r7, #20]
 80105b8:	4313      	orrs	r3, r2
 80105ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80105c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	4a1e      	ldr	r2, [pc, #120]	@ (8010640 <TIM_OC2_SetConfig+0x100>)
 80105c8:	4293      	cmp	r3, r2
 80105ca:	d00f      	beq.n	80105ec <TIM_OC2_SetConfig+0xac>
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	4a1d      	ldr	r2, [pc, #116]	@ (8010644 <TIM_OC2_SetConfig+0x104>)
 80105d0:	4293      	cmp	r3, r2
 80105d2:	d00b      	beq.n	80105ec <TIM_OC2_SetConfig+0xac>
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	4a1c      	ldr	r2, [pc, #112]	@ (8010648 <TIM_OC2_SetConfig+0x108>)
 80105d8:	4293      	cmp	r3, r2
 80105da:	d007      	beq.n	80105ec <TIM_OC2_SetConfig+0xac>
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	4a1b      	ldr	r2, [pc, #108]	@ (801064c <TIM_OC2_SetConfig+0x10c>)
 80105e0:	4293      	cmp	r3, r2
 80105e2:	d003      	beq.n	80105ec <TIM_OC2_SetConfig+0xac>
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	4a1a      	ldr	r2, [pc, #104]	@ (8010650 <TIM_OC2_SetConfig+0x110>)
 80105e8:	4293      	cmp	r3, r2
 80105ea:	d113      	bne.n	8010614 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80105ec:	693b      	ldr	r3, [r7, #16]
 80105ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80105f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80105fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	695b      	ldr	r3, [r3, #20]
 8010600:	009b      	lsls	r3, r3, #2
 8010602:	693a      	ldr	r2, [r7, #16]
 8010604:	4313      	orrs	r3, r2
 8010606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	699b      	ldr	r3, [r3, #24]
 801060c:	009b      	lsls	r3, r3, #2
 801060e:	693a      	ldr	r2, [r7, #16]
 8010610:	4313      	orrs	r3, r2
 8010612:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	693a      	ldr	r2, [r7, #16]
 8010618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	68fa      	ldr	r2, [r7, #12]
 801061e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	685a      	ldr	r2, [r3, #4]
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	697a      	ldr	r2, [r7, #20]
 801062c:	621a      	str	r2, [r3, #32]
}
 801062e:	bf00      	nop
 8010630:	371c      	adds	r7, #28
 8010632:	46bd      	mov	sp, r7
 8010634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010638:	4770      	bx	lr
 801063a:	bf00      	nop
 801063c:	feff8fff 	.word	0xfeff8fff
 8010640:	40010000 	.word	0x40010000
 8010644:	40010400 	.word	0x40010400
 8010648:	40014000 	.word	0x40014000
 801064c:	40014400 	.word	0x40014400
 8010650:	40014800 	.word	0x40014800

08010654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010654:	b480      	push	{r7}
 8010656:	b087      	sub	sp, #28
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6a1b      	ldr	r3, [r3, #32]
 8010662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	6a1b      	ldr	r3, [r3, #32]
 8010668:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	685b      	ldr	r3, [r3, #4]
 8010674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	69db      	ldr	r3, [r3, #28]
 801067a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801067c:	68fa      	ldr	r2, [r7, #12]
 801067e:	4b33      	ldr	r3, [pc, #204]	@ (801074c <TIM_OC3_SetConfig+0xf8>)
 8010680:	4013      	ands	r3, r2
 8010682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	f023 0303 	bic.w	r3, r3, #3
 801068a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	68fa      	ldr	r2, [r7, #12]
 8010692:	4313      	orrs	r3, r2
 8010694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801069c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	689b      	ldr	r3, [r3, #8]
 80106a2:	021b      	lsls	r3, r3, #8
 80106a4:	697a      	ldr	r2, [r7, #20]
 80106a6:	4313      	orrs	r3, r2
 80106a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	4a28      	ldr	r2, [pc, #160]	@ (8010750 <TIM_OC3_SetConfig+0xfc>)
 80106ae:	4293      	cmp	r3, r2
 80106b0:	d003      	beq.n	80106ba <TIM_OC3_SetConfig+0x66>
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	4a27      	ldr	r2, [pc, #156]	@ (8010754 <TIM_OC3_SetConfig+0x100>)
 80106b6:	4293      	cmp	r3, r2
 80106b8:	d10d      	bne.n	80106d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80106c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	68db      	ldr	r3, [r3, #12]
 80106c6:	021b      	lsls	r3, r3, #8
 80106c8:	697a      	ldr	r2, [r7, #20]
 80106ca:	4313      	orrs	r3, r2
 80106cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80106d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	4a1d      	ldr	r2, [pc, #116]	@ (8010750 <TIM_OC3_SetConfig+0xfc>)
 80106da:	4293      	cmp	r3, r2
 80106dc:	d00f      	beq.n	80106fe <TIM_OC3_SetConfig+0xaa>
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	4a1c      	ldr	r2, [pc, #112]	@ (8010754 <TIM_OC3_SetConfig+0x100>)
 80106e2:	4293      	cmp	r3, r2
 80106e4:	d00b      	beq.n	80106fe <TIM_OC3_SetConfig+0xaa>
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	4a1b      	ldr	r2, [pc, #108]	@ (8010758 <TIM_OC3_SetConfig+0x104>)
 80106ea:	4293      	cmp	r3, r2
 80106ec:	d007      	beq.n	80106fe <TIM_OC3_SetConfig+0xaa>
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	4a1a      	ldr	r2, [pc, #104]	@ (801075c <TIM_OC3_SetConfig+0x108>)
 80106f2:	4293      	cmp	r3, r2
 80106f4:	d003      	beq.n	80106fe <TIM_OC3_SetConfig+0xaa>
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	4a19      	ldr	r2, [pc, #100]	@ (8010760 <TIM_OC3_SetConfig+0x10c>)
 80106fa:	4293      	cmp	r3, r2
 80106fc:	d113      	bne.n	8010726 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010706:	693b      	ldr	r3, [r7, #16]
 8010708:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801070c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	695b      	ldr	r3, [r3, #20]
 8010712:	011b      	lsls	r3, r3, #4
 8010714:	693a      	ldr	r2, [r7, #16]
 8010716:	4313      	orrs	r3, r2
 8010718:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	699b      	ldr	r3, [r3, #24]
 801071e:	011b      	lsls	r3, r3, #4
 8010720:	693a      	ldr	r2, [r7, #16]
 8010722:	4313      	orrs	r3, r2
 8010724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	693a      	ldr	r2, [r7, #16]
 801072a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	68fa      	ldr	r2, [r7, #12]
 8010730:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	685a      	ldr	r2, [r3, #4]
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	697a      	ldr	r2, [r7, #20]
 801073e:	621a      	str	r2, [r3, #32]
}
 8010740:	bf00      	nop
 8010742:	371c      	adds	r7, #28
 8010744:	46bd      	mov	sp, r7
 8010746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074a:	4770      	bx	lr
 801074c:	fffeff8f 	.word	0xfffeff8f
 8010750:	40010000 	.word	0x40010000
 8010754:	40010400 	.word	0x40010400
 8010758:	40014000 	.word	0x40014000
 801075c:	40014400 	.word	0x40014400
 8010760:	40014800 	.word	0x40014800

08010764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010764:	b480      	push	{r7}
 8010766:	b087      	sub	sp, #28
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6a1b      	ldr	r3, [r3, #32]
 8010772:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6a1b      	ldr	r3, [r3, #32]
 8010778:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	685b      	ldr	r3, [r3, #4]
 8010784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	69db      	ldr	r3, [r3, #28]
 801078a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801078c:	68fa      	ldr	r2, [r7, #12]
 801078e:	4b24      	ldr	r3, [pc, #144]	@ (8010820 <TIM_OC4_SetConfig+0xbc>)
 8010790:	4013      	ands	r3, r2
 8010792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801079a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	021b      	lsls	r3, r3, #8
 80107a2:	68fa      	ldr	r2, [r7, #12]
 80107a4:	4313      	orrs	r3, r2
 80107a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80107a8:	693b      	ldr	r3, [r7, #16]
 80107aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80107ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	689b      	ldr	r3, [r3, #8]
 80107b4:	031b      	lsls	r3, r3, #12
 80107b6:	693a      	ldr	r2, [r7, #16]
 80107b8:	4313      	orrs	r3, r2
 80107ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	4a19      	ldr	r2, [pc, #100]	@ (8010824 <TIM_OC4_SetConfig+0xc0>)
 80107c0:	4293      	cmp	r3, r2
 80107c2:	d00f      	beq.n	80107e4 <TIM_OC4_SetConfig+0x80>
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	4a18      	ldr	r2, [pc, #96]	@ (8010828 <TIM_OC4_SetConfig+0xc4>)
 80107c8:	4293      	cmp	r3, r2
 80107ca:	d00b      	beq.n	80107e4 <TIM_OC4_SetConfig+0x80>
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	4a17      	ldr	r2, [pc, #92]	@ (801082c <TIM_OC4_SetConfig+0xc8>)
 80107d0:	4293      	cmp	r3, r2
 80107d2:	d007      	beq.n	80107e4 <TIM_OC4_SetConfig+0x80>
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	4a16      	ldr	r2, [pc, #88]	@ (8010830 <TIM_OC4_SetConfig+0xcc>)
 80107d8:	4293      	cmp	r3, r2
 80107da:	d003      	beq.n	80107e4 <TIM_OC4_SetConfig+0x80>
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	4a15      	ldr	r2, [pc, #84]	@ (8010834 <TIM_OC4_SetConfig+0xd0>)
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d109      	bne.n	80107f8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80107ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	695b      	ldr	r3, [r3, #20]
 80107f0:	019b      	lsls	r3, r3, #6
 80107f2:	697a      	ldr	r2, [r7, #20]
 80107f4:	4313      	orrs	r3, r2
 80107f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	697a      	ldr	r2, [r7, #20]
 80107fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	68fa      	ldr	r2, [r7, #12]
 8010802:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	685a      	ldr	r2, [r3, #4]
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	693a      	ldr	r2, [r7, #16]
 8010810:	621a      	str	r2, [r3, #32]
}
 8010812:	bf00      	nop
 8010814:	371c      	adds	r7, #28
 8010816:	46bd      	mov	sp, r7
 8010818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081c:	4770      	bx	lr
 801081e:	bf00      	nop
 8010820:	feff8fff 	.word	0xfeff8fff
 8010824:	40010000 	.word	0x40010000
 8010828:	40010400 	.word	0x40010400
 801082c:	40014000 	.word	0x40014000
 8010830:	40014400 	.word	0x40014400
 8010834:	40014800 	.word	0x40014800

08010838 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010838:	b480      	push	{r7}
 801083a:	b087      	sub	sp, #28
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6a1b      	ldr	r3, [r3, #32]
 8010846:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	6a1b      	ldr	r3, [r3, #32]
 801084c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	685b      	ldr	r3, [r3, #4]
 8010858:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801085e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010860:	68fa      	ldr	r2, [r7, #12]
 8010862:	4b21      	ldr	r3, [pc, #132]	@ (80108e8 <TIM_OC5_SetConfig+0xb0>)
 8010864:	4013      	ands	r3, r2
 8010866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	68fa      	ldr	r2, [r7, #12]
 801086e:	4313      	orrs	r3, r2
 8010870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8010878:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	689b      	ldr	r3, [r3, #8]
 801087e:	041b      	lsls	r3, r3, #16
 8010880:	693a      	ldr	r2, [r7, #16]
 8010882:	4313      	orrs	r3, r2
 8010884:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	4a18      	ldr	r2, [pc, #96]	@ (80108ec <TIM_OC5_SetConfig+0xb4>)
 801088a:	4293      	cmp	r3, r2
 801088c:	d00f      	beq.n	80108ae <TIM_OC5_SetConfig+0x76>
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	4a17      	ldr	r2, [pc, #92]	@ (80108f0 <TIM_OC5_SetConfig+0xb8>)
 8010892:	4293      	cmp	r3, r2
 8010894:	d00b      	beq.n	80108ae <TIM_OC5_SetConfig+0x76>
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	4a16      	ldr	r2, [pc, #88]	@ (80108f4 <TIM_OC5_SetConfig+0xbc>)
 801089a:	4293      	cmp	r3, r2
 801089c:	d007      	beq.n	80108ae <TIM_OC5_SetConfig+0x76>
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	4a15      	ldr	r2, [pc, #84]	@ (80108f8 <TIM_OC5_SetConfig+0xc0>)
 80108a2:	4293      	cmp	r3, r2
 80108a4:	d003      	beq.n	80108ae <TIM_OC5_SetConfig+0x76>
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	4a14      	ldr	r2, [pc, #80]	@ (80108fc <TIM_OC5_SetConfig+0xc4>)
 80108aa:	4293      	cmp	r3, r2
 80108ac:	d109      	bne.n	80108c2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80108b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	695b      	ldr	r3, [r3, #20]
 80108ba:	021b      	lsls	r3, r3, #8
 80108bc:	697a      	ldr	r2, [r7, #20]
 80108be:	4313      	orrs	r3, r2
 80108c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	697a      	ldr	r2, [r7, #20]
 80108c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	68fa      	ldr	r2, [r7, #12]
 80108cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80108ce:	683b      	ldr	r3, [r7, #0]
 80108d0:	685a      	ldr	r2, [r3, #4]
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	693a      	ldr	r2, [r7, #16]
 80108da:	621a      	str	r2, [r3, #32]
}
 80108dc:	bf00      	nop
 80108de:	371c      	adds	r7, #28
 80108e0:	46bd      	mov	sp, r7
 80108e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e6:	4770      	bx	lr
 80108e8:	fffeff8f 	.word	0xfffeff8f
 80108ec:	40010000 	.word	0x40010000
 80108f0:	40010400 	.word	0x40010400
 80108f4:	40014000 	.word	0x40014000
 80108f8:	40014400 	.word	0x40014400
 80108fc:	40014800 	.word	0x40014800

08010900 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010900:	b480      	push	{r7}
 8010902:	b087      	sub	sp, #28
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
 8010908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	6a1b      	ldr	r3, [r3, #32]
 801090e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	6a1b      	ldr	r3, [r3, #32]
 8010914:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	685b      	ldr	r3, [r3, #4]
 8010920:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010928:	68fa      	ldr	r2, [r7, #12]
 801092a:	4b22      	ldr	r3, [pc, #136]	@ (80109b4 <TIM_OC6_SetConfig+0xb4>)
 801092c:	4013      	ands	r3, r2
 801092e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	021b      	lsls	r3, r3, #8
 8010936:	68fa      	ldr	r2, [r7, #12]
 8010938:	4313      	orrs	r3, r2
 801093a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801093c:	693b      	ldr	r3, [r7, #16]
 801093e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010942:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	689b      	ldr	r3, [r3, #8]
 8010948:	051b      	lsls	r3, r3, #20
 801094a:	693a      	ldr	r2, [r7, #16]
 801094c:	4313      	orrs	r3, r2
 801094e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	4a19      	ldr	r2, [pc, #100]	@ (80109b8 <TIM_OC6_SetConfig+0xb8>)
 8010954:	4293      	cmp	r3, r2
 8010956:	d00f      	beq.n	8010978 <TIM_OC6_SetConfig+0x78>
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	4a18      	ldr	r2, [pc, #96]	@ (80109bc <TIM_OC6_SetConfig+0xbc>)
 801095c:	4293      	cmp	r3, r2
 801095e:	d00b      	beq.n	8010978 <TIM_OC6_SetConfig+0x78>
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	4a17      	ldr	r2, [pc, #92]	@ (80109c0 <TIM_OC6_SetConfig+0xc0>)
 8010964:	4293      	cmp	r3, r2
 8010966:	d007      	beq.n	8010978 <TIM_OC6_SetConfig+0x78>
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	4a16      	ldr	r2, [pc, #88]	@ (80109c4 <TIM_OC6_SetConfig+0xc4>)
 801096c:	4293      	cmp	r3, r2
 801096e:	d003      	beq.n	8010978 <TIM_OC6_SetConfig+0x78>
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	4a15      	ldr	r2, [pc, #84]	@ (80109c8 <TIM_OC6_SetConfig+0xc8>)
 8010974:	4293      	cmp	r3, r2
 8010976:	d109      	bne.n	801098c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010978:	697b      	ldr	r3, [r7, #20]
 801097a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801097e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	695b      	ldr	r3, [r3, #20]
 8010984:	029b      	lsls	r3, r3, #10
 8010986:	697a      	ldr	r2, [r7, #20]
 8010988:	4313      	orrs	r3, r2
 801098a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	697a      	ldr	r2, [r7, #20]
 8010990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	68fa      	ldr	r2, [r7, #12]
 8010996:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010998:	683b      	ldr	r3, [r7, #0]
 801099a:	685a      	ldr	r2, [r3, #4]
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	693a      	ldr	r2, [r7, #16]
 80109a4:	621a      	str	r2, [r3, #32]
}
 80109a6:	bf00      	nop
 80109a8:	371c      	adds	r7, #28
 80109aa:	46bd      	mov	sp, r7
 80109ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b0:	4770      	bx	lr
 80109b2:	bf00      	nop
 80109b4:	feff8fff 	.word	0xfeff8fff
 80109b8:	40010000 	.word	0x40010000
 80109bc:	40010400 	.word	0x40010400
 80109c0:	40014000 	.word	0x40014000
 80109c4:	40014400 	.word	0x40014400
 80109c8:	40014800 	.word	0x40014800

080109cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80109cc:	b480      	push	{r7}
 80109ce:	b087      	sub	sp, #28
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	60f8      	str	r0, [r7, #12]
 80109d4:	60b9      	str	r1, [r7, #8]
 80109d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	6a1b      	ldr	r3, [r3, #32]
 80109dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	6a1b      	ldr	r3, [r3, #32]
 80109e2:	f023 0201 	bic.w	r2, r3, #1
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	699b      	ldr	r3, [r3, #24]
 80109ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80109f0:	693b      	ldr	r3, [r7, #16]
 80109f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80109f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	011b      	lsls	r3, r3, #4
 80109fc:	693a      	ldr	r2, [r7, #16]
 80109fe:	4313      	orrs	r3, r2
 8010a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010a02:	697b      	ldr	r3, [r7, #20]
 8010a04:	f023 030a 	bic.w	r3, r3, #10
 8010a08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010a0a:	697a      	ldr	r2, [r7, #20]
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	4313      	orrs	r3, r2
 8010a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	693a      	ldr	r2, [r7, #16]
 8010a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	697a      	ldr	r2, [r7, #20]
 8010a1c:	621a      	str	r2, [r3, #32]
}
 8010a1e:	bf00      	nop
 8010a20:	371c      	adds	r7, #28
 8010a22:	46bd      	mov	sp, r7
 8010a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a28:	4770      	bx	lr

08010a2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010a2a:	b480      	push	{r7}
 8010a2c:	b087      	sub	sp, #28
 8010a2e:	af00      	add	r7, sp, #0
 8010a30:	60f8      	str	r0, [r7, #12]
 8010a32:	60b9      	str	r1, [r7, #8]
 8010a34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	6a1b      	ldr	r3, [r3, #32]
 8010a3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	6a1b      	ldr	r3, [r3, #32]
 8010a40:	f023 0210 	bic.w	r2, r3, #16
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	699b      	ldr	r3, [r3, #24]
 8010a4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010a4e:	693b      	ldr	r3, [r7, #16]
 8010a50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010a54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	031b      	lsls	r3, r3, #12
 8010a5a:	693a      	ldr	r2, [r7, #16]
 8010a5c:	4313      	orrs	r3, r2
 8010a5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010a66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	011b      	lsls	r3, r3, #4
 8010a6c:	697a      	ldr	r2, [r7, #20]
 8010a6e:	4313      	orrs	r3, r2
 8010a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	693a      	ldr	r2, [r7, #16]
 8010a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	697a      	ldr	r2, [r7, #20]
 8010a7c:	621a      	str	r2, [r3, #32]
}
 8010a7e:	bf00      	nop
 8010a80:	371c      	adds	r7, #28
 8010a82:	46bd      	mov	sp, r7
 8010a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a88:	4770      	bx	lr
	...

08010a8c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b085      	sub	sp, #20
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	689b      	ldr	r3, [r3, #8]
 8010a9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010a9c:	68fa      	ldr	r2, [r7, #12]
 8010a9e:	4b09      	ldr	r3, [pc, #36]	@ (8010ac4 <TIM_ITRx_SetConfig+0x38>)
 8010aa0:	4013      	ands	r3, r2
 8010aa2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010aa4:	683a      	ldr	r2, [r7, #0]
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	4313      	orrs	r3, r2
 8010aaa:	f043 0307 	orr.w	r3, r3, #7
 8010aae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	68fa      	ldr	r2, [r7, #12]
 8010ab4:	609a      	str	r2, [r3, #8]
}
 8010ab6:	bf00      	nop
 8010ab8:	3714      	adds	r7, #20
 8010aba:	46bd      	mov	sp, r7
 8010abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac0:	4770      	bx	lr
 8010ac2:	bf00      	nop
 8010ac4:	ffcfff8f 	.word	0xffcfff8f

08010ac8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010ac8:	b480      	push	{r7}
 8010aca:	b087      	sub	sp, #28
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	60f8      	str	r0, [r7, #12]
 8010ad0:	60b9      	str	r1, [r7, #8]
 8010ad2:	607a      	str	r2, [r7, #4]
 8010ad4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	689b      	ldr	r3, [r3, #8]
 8010ada:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010ae2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	021a      	lsls	r2, r3, #8
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	431a      	orrs	r2, r3
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	4313      	orrs	r3, r2
 8010af0:	697a      	ldr	r2, [r7, #20]
 8010af2:	4313      	orrs	r3, r2
 8010af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	697a      	ldr	r2, [r7, #20]
 8010afa:	609a      	str	r2, [r3, #8]
}
 8010afc:	bf00      	nop
 8010afe:	371c      	adds	r7, #28
 8010b00:	46bd      	mov	sp, r7
 8010b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b06:	4770      	bx	lr

08010b08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010b08:	b480      	push	{r7}
 8010b0a:	b087      	sub	sp, #28
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	60f8      	str	r0, [r7, #12]
 8010b10:	60b9      	str	r1, [r7, #8]
 8010b12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	f003 031f 	and.w	r3, r3, #31
 8010b1a:	2201      	movs	r2, #1
 8010b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8010b20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	6a1a      	ldr	r2, [r3, #32]
 8010b26:	697b      	ldr	r3, [r7, #20]
 8010b28:	43db      	mvns	r3, r3
 8010b2a:	401a      	ands	r2, r3
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	6a1a      	ldr	r2, [r3, #32]
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	f003 031f 	and.w	r3, r3, #31
 8010b3a:	6879      	ldr	r1, [r7, #4]
 8010b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8010b40:	431a      	orrs	r2, r3
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	621a      	str	r2, [r3, #32]
}
 8010b46:	bf00      	nop
 8010b48:	371c      	adds	r7, #28
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b50:	4770      	bx	lr
	...

08010b54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010b54:	b480      	push	{r7}
 8010b56:	b085      	sub	sp, #20
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010b64:	2b01      	cmp	r3, #1
 8010b66:	d101      	bne.n	8010b6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010b68:	2302      	movs	r3, #2
 8010b6a:	e06d      	b.n	8010c48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2201      	movs	r2, #1
 8010b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2202      	movs	r2, #2
 8010b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	685b      	ldr	r3, [r3, #4]
 8010b82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	689b      	ldr	r3, [r3, #8]
 8010b8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	4a30      	ldr	r2, [pc, #192]	@ (8010c54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010b92:	4293      	cmp	r3, r2
 8010b94:	d004      	beq.n	8010ba0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	4a2f      	ldr	r2, [pc, #188]	@ (8010c58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	d108      	bne.n	8010bb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8010ba6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010ba8:	683b      	ldr	r3, [r7, #0]
 8010baa:	685b      	ldr	r3, [r3, #4]
 8010bac:	68fa      	ldr	r2, [r7, #12]
 8010bae:	4313      	orrs	r3, r2
 8010bb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010bb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	68fa      	ldr	r2, [r7, #12]
 8010bc0:	4313      	orrs	r3, r2
 8010bc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	68fa      	ldr	r2, [r7, #12]
 8010bca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	4a20      	ldr	r2, [pc, #128]	@ (8010c54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010bd2:	4293      	cmp	r3, r2
 8010bd4:	d022      	beq.n	8010c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010bde:	d01d      	beq.n	8010c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	4a1d      	ldr	r2, [pc, #116]	@ (8010c5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010be6:	4293      	cmp	r3, r2
 8010be8:	d018      	beq.n	8010c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	4a1c      	ldr	r2, [pc, #112]	@ (8010c60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010bf0:	4293      	cmp	r3, r2
 8010bf2:	d013      	beq.n	8010c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8010c64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010bfa:	4293      	cmp	r3, r2
 8010bfc:	d00e      	beq.n	8010c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	4a15      	ldr	r2, [pc, #84]	@ (8010c58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010c04:	4293      	cmp	r3, r2
 8010c06:	d009      	beq.n	8010c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	4a16      	ldr	r2, [pc, #88]	@ (8010c68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	d004      	beq.n	8010c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	4a15      	ldr	r2, [pc, #84]	@ (8010c6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	d10c      	bne.n	8010c36 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010c22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	689b      	ldr	r3, [r3, #8]
 8010c28:	68ba      	ldr	r2, [r7, #8]
 8010c2a:	4313      	orrs	r3, r2
 8010c2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	68ba      	ldr	r2, [r7, #8]
 8010c34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	2201      	movs	r2, #1
 8010c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	2200      	movs	r2, #0
 8010c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010c46:	2300      	movs	r3, #0
}
 8010c48:	4618      	mov	r0, r3
 8010c4a:	3714      	adds	r7, #20
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c52:	4770      	bx	lr
 8010c54:	40010000 	.word	0x40010000
 8010c58:	40010400 	.word	0x40010400
 8010c5c:	40000400 	.word	0x40000400
 8010c60:	40000800 	.word	0x40000800
 8010c64:	40000c00 	.word	0x40000c00
 8010c68:	40001800 	.word	0x40001800
 8010c6c:	40014000 	.word	0x40014000

08010c70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010c70:	b480      	push	{r7}
 8010c72:	b085      	sub	sp, #20
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010c84:	2b01      	cmp	r3, #1
 8010c86:	d101      	bne.n	8010c8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010c88:	2302      	movs	r3, #2
 8010c8a:	e065      	b.n	8010d58 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	2201      	movs	r2, #1
 8010c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	68db      	ldr	r3, [r3, #12]
 8010c9e:	4313      	orrs	r3, r2
 8010ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	689b      	ldr	r3, [r3, #8]
 8010cac:	4313      	orrs	r3, r2
 8010cae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	685b      	ldr	r3, [r3, #4]
 8010cba:	4313      	orrs	r3, r2
 8010cbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	4313      	orrs	r3, r2
 8010cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010cd2:	683b      	ldr	r3, [r7, #0]
 8010cd4:	691b      	ldr	r3, [r3, #16]
 8010cd6:	4313      	orrs	r3, r2
 8010cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	695b      	ldr	r3, [r3, #20]
 8010ce4:	4313      	orrs	r3, r2
 8010ce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cf2:	4313      	orrs	r3, r2
 8010cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	699b      	ldr	r3, [r3, #24]
 8010d00:	041b      	lsls	r3, r3, #16
 8010d02:	4313      	orrs	r3, r2
 8010d04:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	4a16      	ldr	r2, [pc, #88]	@ (8010d64 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	d004      	beq.n	8010d1a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	4a14      	ldr	r2, [pc, #80]	@ (8010d68 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8010d16:	4293      	cmp	r3, r2
 8010d18:	d115      	bne.n	8010d46 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d24:	051b      	lsls	r3, r3, #20
 8010d26:	4313      	orrs	r3, r2
 8010d28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	69db      	ldr	r3, [r3, #28]
 8010d34:	4313      	orrs	r3, r2
 8010d36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	6a1b      	ldr	r3, [r3, #32]
 8010d42:	4313      	orrs	r3, r2
 8010d44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	68fa      	ldr	r2, [r7, #12]
 8010d4c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	2200      	movs	r2, #0
 8010d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010d56:	2300      	movs	r3, #0
}
 8010d58:	4618      	mov	r0, r3
 8010d5a:	3714      	adds	r7, #20
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d62:	4770      	bx	lr
 8010d64:	40010000 	.word	0x40010000
 8010d68:	40010400 	.word	0x40010400

08010d6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b083      	sub	sp, #12
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010d74:	bf00      	nop
 8010d76:	370c      	adds	r7, #12
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7e:	4770      	bx	lr

08010d80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010d80:	b480      	push	{r7}
 8010d82:	b083      	sub	sp, #12
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010d88:	bf00      	nop
 8010d8a:	370c      	adds	r7, #12
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d92:	4770      	bx	lr

08010d94 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010d94:	b480      	push	{r7}
 8010d96:	b083      	sub	sp, #12
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010d9c:	bf00      	nop
 8010d9e:	370c      	adds	r7, #12
 8010da0:	46bd      	mov	sp, r7
 8010da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da6:	4770      	bx	lr

08010da8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b082      	sub	sp, #8
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d101      	bne.n	8010dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010db6:	2301      	movs	r3, #1
 8010db8:	e042      	b.n	8010e40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d106      	bne.n	8010dd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f7f1 fc53 	bl	8002678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2224      	movs	r2, #36	@ 0x24
 8010dd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	681a      	ldr	r2, [r3, #0]
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	f022 0201 	bic.w	r2, r2, #1
 8010de8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d002      	beq.n	8010df8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f001 fa6a 	bl	80122cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010df8:	6878      	ldr	r0, [r7, #4]
 8010dfa:	f000 fcff 	bl	80117fc <UART_SetConfig>
 8010dfe:	4603      	mov	r3, r0
 8010e00:	2b01      	cmp	r3, #1
 8010e02:	d101      	bne.n	8010e08 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010e04:	2301      	movs	r3, #1
 8010e06:	e01b      	b.n	8010e40 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	685a      	ldr	r2, [r3, #4]
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010e16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	689a      	ldr	r2, [r3, #8]
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010e26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	681a      	ldr	r2, [r3, #0]
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	f042 0201 	orr.w	r2, r2, #1
 8010e36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	f001 fae9 	bl	8012410 <UART_CheckIdleState>
 8010e3e:	4603      	mov	r3, r0
}
 8010e40:	4618      	mov	r0, r3
 8010e42:	3708      	adds	r7, #8
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}

08010e48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b08a      	sub	sp, #40	@ 0x28
 8010e4c:	af02      	add	r7, sp, #8
 8010e4e:	60f8      	str	r0, [r7, #12]
 8010e50:	60b9      	str	r1, [r7, #8]
 8010e52:	603b      	str	r3, [r7, #0]
 8010e54:	4613      	mov	r3, r2
 8010e56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010e5e:	2b20      	cmp	r3, #32
 8010e60:	d17b      	bne.n	8010f5a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d002      	beq.n	8010e6e <HAL_UART_Transmit+0x26>
 8010e68:	88fb      	ldrh	r3, [r7, #6]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d101      	bne.n	8010e72 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010e6e:	2301      	movs	r3, #1
 8010e70:	e074      	b.n	8010f5c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	2200      	movs	r2, #0
 8010e76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	2221      	movs	r2, #33	@ 0x21
 8010e7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010e82:	f7f1 fee3 	bl	8002c4c <HAL_GetTick>
 8010e86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	88fa      	ldrh	r2, [r7, #6]
 8010e8c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	88fa      	ldrh	r2, [r7, #6]
 8010e94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	689b      	ldr	r3, [r3, #8]
 8010e9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010ea0:	d108      	bne.n	8010eb4 <HAL_UART_Transmit+0x6c>
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	691b      	ldr	r3, [r3, #16]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d104      	bne.n	8010eb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010eaa:	2300      	movs	r3, #0
 8010eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	61bb      	str	r3, [r7, #24]
 8010eb2:	e003      	b.n	8010ebc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010eb8:	2300      	movs	r3, #0
 8010eba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010ebc:	e030      	b.n	8010f20 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010ebe:	683b      	ldr	r3, [r7, #0]
 8010ec0:	9300      	str	r3, [sp, #0]
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	2180      	movs	r1, #128	@ 0x80
 8010ec8:	68f8      	ldr	r0, [r7, #12]
 8010eca:	f001 fb4b 	bl	8012564 <UART_WaitOnFlagUntilTimeout>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d005      	beq.n	8010ee0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	2220      	movs	r2, #32
 8010ed8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8010edc:	2303      	movs	r3, #3
 8010ede:	e03d      	b.n	8010f5c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010ee0:	69fb      	ldr	r3, [r7, #28]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d10b      	bne.n	8010efe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010ee6:	69bb      	ldr	r3, [r7, #24]
 8010ee8:	881b      	ldrh	r3, [r3, #0]
 8010eea:	461a      	mov	r2, r3
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010ef4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8010ef6:	69bb      	ldr	r3, [r7, #24]
 8010ef8:	3302      	adds	r3, #2
 8010efa:	61bb      	str	r3, [r7, #24]
 8010efc:	e007      	b.n	8010f0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010efe:	69fb      	ldr	r3, [r7, #28]
 8010f00:	781a      	ldrb	r2, [r3, #0]
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8010f08:	69fb      	ldr	r3, [r7, #28]
 8010f0a:	3301      	adds	r3, #1
 8010f0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010f14:	b29b      	uxth	r3, r3
 8010f16:	3b01      	subs	r3, #1
 8010f18:	b29a      	uxth	r2, r3
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010f26:	b29b      	uxth	r3, r3
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d1c8      	bne.n	8010ebe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	9300      	str	r3, [sp, #0]
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	2200      	movs	r2, #0
 8010f34:	2140      	movs	r1, #64	@ 0x40
 8010f36:	68f8      	ldr	r0, [r7, #12]
 8010f38:	f001 fb14 	bl	8012564 <UART_WaitOnFlagUntilTimeout>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d005      	beq.n	8010f4e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	2220      	movs	r2, #32
 8010f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8010f4a:	2303      	movs	r3, #3
 8010f4c:	e006      	b.n	8010f5c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	2220      	movs	r2, #32
 8010f52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8010f56:	2300      	movs	r3, #0
 8010f58:	e000      	b.n	8010f5c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8010f5a:	2302      	movs	r3, #2
  }
}
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	3720      	adds	r7, #32
 8010f60:	46bd      	mov	sp, r7
 8010f62:	bd80      	pop	{r7, pc}

08010f64 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b08a      	sub	sp, #40	@ 0x28
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	60f8      	str	r0, [r7, #12]
 8010f6c:	60b9      	str	r1, [r7, #8]
 8010f6e:	4613      	mov	r3, r2
 8010f70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010f78:	2b20      	cmp	r3, #32
 8010f7a:	d137      	bne.n	8010fec <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d002      	beq.n	8010f88 <HAL_UART_Receive_DMA+0x24>
 8010f82:	88fb      	ldrh	r3, [r7, #6]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d101      	bne.n	8010f8c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8010f88:	2301      	movs	r3, #1
 8010f8a:	e030      	b.n	8010fee <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	2200      	movs	r2, #0
 8010f90:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	4a18      	ldr	r2, [pc, #96]	@ (8010ff8 <HAL_UART_Receive_DMA+0x94>)
 8010f98:	4293      	cmp	r3, r2
 8010f9a:	d01f      	beq.n	8010fdc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	685b      	ldr	r3, [r3, #4]
 8010fa2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d018      	beq.n	8010fdc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	e853 3f00 	ldrex	r3, [r3]
 8010fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8010fb8:	693b      	ldr	r3, [r7, #16]
 8010fba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	461a      	mov	r2, r3
 8010fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fc8:	623b      	str	r3, [r7, #32]
 8010fca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fcc:	69f9      	ldr	r1, [r7, #28]
 8010fce:	6a3a      	ldr	r2, [r7, #32]
 8010fd0:	e841 2300 	strex	r3, r2, [r1]
 8010fd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8010fd6:	69bb      	ldr	r3, [r7, #24]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d1e6      	bne.n	8010faa <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010fdc:	88fb      	ldrh	r3, [r7, #6]
 8010fde:	461a      	mov	r2, r3
 8010fe0:	68b9      	ldr	r1, [r7, #8]
 8010fe2:	68f8      	ldr	r0, [r7, #12]
 8010fe4:	f001 fb2c 	bl	8012640 <UART_Start_Receive_DMA>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	e000      	b.n	8010fee <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010fec:	2302      	movs	r3, #2
  }
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	3728      	adds	r7, #40	@ 0x28
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}
 8010ff6:	bf00      	nop
 8010ff8:	58000c00 	.word	0x58000c00

08010ffc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b0ba      	sub	sp, #232	@ 0xe8
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	69db      	ldr	r3, [r3, #28]
 801100a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	689b      	ldr	r3, [r3, #8]
 801101e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011022:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8011026:	f640 030f 	movw	r3, #2063	@ 0x80f
 801102a:	4013      	ands	r3, r2
 801102c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8011030:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011034:	2b00      	cmp	r3, #0
 8011036:	d11b      	bne.n	8011070 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801103c:	f003 0320 	and.w	r3, r3, #32
 8011040:	2b00      	cmp	r3, #0
 8011042:	d015      	beq.n	8011070 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011048:	f003 0320 	and.w	r3, r3, #32
 801104c:	2b00      	cmp	r3, #0
 801104e:	d105      	bne.n	801105c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011058:	2b00      	cmp	r3, #0
 801105a:	d009      	beq.n	8011070 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011060:	2b00      	cmp	r3, #0
 8011062:	f000 8393 	beq.w	801178c <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	4798      	blx	r3
      }
      return;
 801106e:	e38d      	b.n	801178c <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8011070:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011074:	2b00      	cmp	r3, #0
 8011076:	f000 8123 	beq.w	80112c0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801107a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801107e:	4b8d      	ldr	r3, [pc, #564]	@ (80112b4 <HAL_UART_IRQHandler+0x2b8>)
 8011080:	4013      	ands	r3, r2
 8011082:	2b00      	cmp	r3, #0
 8011084:	d106      	bne.n	8011094 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8011086:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801108a:	4b8b      	ldr	r3, [pc, #556]	@ (80112b8 <HAL_UART_IRQHandler+0x2bc>)
 801108c:	4013      	ands	r3, r2
 801108e:	2b00      	cmp	r3, #0
 8011090:	f000 8116 	beq.w	80112c0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011098:	f003 0301 	and.w	r3, r3, #1
 801109c:	2b00      	cmp	r3, #0
 801109e:	d011      	beq.n	80110c4 <HAL_UART_IRQHandler+0xc8>
 80110a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80110a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d00b      	beq.n	80110c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	2201      	movs	r2, #1
 80110b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80110ba:	f043 0201 	orr.w	r2, r3, #1
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80110c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110c8:	f003 0302 	and.w	r3, r3, #2
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d011      	beq.n	80110f4 <HAL_UART_IRQHandler+0xf8>
 80110d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80110d4:	f003 0301 	and.w	r3, r3, #1
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d00b      	beq.n	80110f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	2202      	movs	r2, #2
 80110e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80110ea:	f043 0204 	orr.w	r2, r3, #4
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80110f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110f8:	f003 0304 	and.w	r3, r3, #4
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d011      	beq.n	8011124 <HAL_UART_IRQHandler+0x128>
 8011100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011104:	f003 0301 	and.w	r3, r3, #1
 8011108:	2b00      	cmp	r3, #0
 801110a:	d00b      	beq.n	8011124 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	2204      	movs	r2, #4
 8011112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801111a:	f043 0202 	orr.w	r2, r3, #2
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011128:	f003 0308 	and.w	r3, r3, #8
 801112c:	2b00      	cmp	r3, #0
 801112e:	d017      	beq.n	8011160 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011134:	f003 0320 	and.w	r3, r3, #32
 8011138:	2b00      	cmp	r3, #0
 801113a:	d105      	bne.n	8011148 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801113c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011140:	4b5c      	ldr	r3, [pc, #368]	@ (80112b4 <HAL_UART_IRQHandler+0x2b8>)
 8011142:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011144:	2b00      	cmp	r3, #0
 8011146:	d00b      	beq.n	8011160 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	2208      	movs	r2, #8
 801114e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011156:	f043 0208 	orr.w	r2, r3, #8
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011164:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011168:	2b00      	cmp	r3, #0
 801116a:	d012      	beq.n	8011192 <HAL_UART_IRQHandler+0x196>
 801116c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011170:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8011174:	2b00      	cmp	r3, #0
 8011176:	d00c      	beq.n	8011192 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011180:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011188:	f043 0220 	orr.w	r2, r3, #32
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011198:	2b00      	cmp	r3, #0
 801119a:	f000 82f9 	beq.w	8011790 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801119e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80111a2:	f003 0320 	and.w	r3, r3, #32
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d013      	beq.n	80111d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80111aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80111ae:	f003 0320 	and.w	r3, r3, #32
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d105      	bne.n	80111c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80111b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80111ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d007      	beq.n	80111d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d003      	beq.n	80111d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80111d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	689b      	ldr	r3, [r3, #8]
 80111e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111e6:	2b40      	cmp	r3, #64	@ 0x40
 80111e8:	d005      	beq.n	80111f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80111ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80111ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d054      	beq.n	80112a0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80111f6:	6878      	ldr	r0, [r7, #4]
 80111f8:	f001 fb0a 	bl	8012810 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	689b      	ldr	r3, [r3, #8]
 8011202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011206:	2b40      	cmp	r3, #64	@ 0x40
 8011208:	d146      	bne.n	8011298 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	3308      	adds	r3, #8
 8011210:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011214:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011218:	e853 3f00 	ldrex	r3, [r3]
 801121c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8011220:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011224:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011228:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	3308      	adds	r3, #8
 8011232:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8011236:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801123a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801123e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8011242:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8011246:	e841 2300 	strex	r3, r2, [r1]
 801124a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801124e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011252:	2b00      	cmp	r3, #0
 8011254:	d1d9      	bne.n	801120a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801125c:	2b00      	cmp	r3, #0
 801125e:	d017      	beq.n	8011290 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011266:	4a15      	ldr	r2, [pc, #84]	@ (80112bc <HAL_UART_IRQHandler+0x2c0>)
 8011268:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011270:	4618      	mov	r0, r3
 8011272:	f7f3 fa7f 	bl	8004774 <HAL_DMA_Abort_IT>
 8011276:	4603      	mov	r3, r0
 8011278:	2b00      	cmp	r3, #0
 801127a:	d019      	beq.n	80112b0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011284:	687a      	ldr	r2, [r7, #4]
 8011286:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801128a:	4610      	mov	r0, r2
 801128c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801128e:	e00f      	b.n	80112b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f000 fa9d 	bl	80117d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011296:	e00b      	b.n	80112b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011298:	6878      	ldr	r0, [r7, #4]
 801129a:	f000 fa99 	bl	80117d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801129e:	e007      	b.n	80112b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80112a0:	6878      	ldr	r0, [r7, #4]
 80112a2:	f000 fa95 	bl	80117d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	2200      	movs	r2, #0
 80112aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80112ae:	e26f      	b.n	8011790 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80112b0:	bf00      	nop
    return;
 80112b2:	e26d      	b.n	8011790 <HAL_UART_IRQHandler+0x794>
 80112b4:	10000001 	.word	0x10000001
 80112b8:	04000120 	.word	0x04000120
 80112bc:	08012ac3 	.word	0x08012ac3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80112c4:	2b01      	cmp	r3, #1
 80112c6:	f040 8203 	bne.w	80116d0 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80112ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80112ce:	f003 0310 	and.w	r3, r3, #16
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	f000 81fc 	beq.w	80116d0 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80112d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80112dc:	f003 0310 	and.w	r3, r3, #16
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	f000 81f5 	beq.w	80116d0 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	2210      	movs	r2, #16
 80112ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	689b      	ldr	r3, [r3, #8]
 80112f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80112f8:	2b40      	cmp	r3, #64	@ 0x40
 80112fa:	f040 816d 	bne.w	80115d8 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	4aa4      	ldr	r2, [pc, #656]	@ (8011598 <HAL_UART_IRQHandler+0x59c>)
 8011308:	4293      	cmp	r3, r2
 801130a:	d068      	beq.n	80113de <HAL_UART_IRQHandler+0x3e2>
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	4aa1      	ldr	r2, [pc, #644]	@ (801159c <HAL_UART_IRQHandler+0x5a0>)
 8011316:	4293      	cmp	r3, r2
 8011318:	d061      	beq.n	80113de <HAL_UART_IRQHandler+0x3e2>
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	4a9f      	ldr	r2, [pc, #636]	@ (80115a0 <HAL_UART_IRQHandler+0x5a4>)
 8011324:	4293      	cmp	r3, r2
 8011326:	d05a      	beq.n	80113de <HAL_UART_IRQHandler+0x3e2>
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	4a9c      	ldr	r2, [pc, #624]	@ (80115a4 <HAL_UART_IRQHandler+0x5a8>)
 8011332:	4293      	cmp	r3, r2
 8011334:	d053      	beq.n	80113de <HAL_UART_IRQHandler+0x3e2>
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	4a9a      	ldr	r2, [pc, #616]	@ (80115a8 <HAL_UART_IRQHandler+0x5ac>)
 8011340:	4293      	cmp	r3, r2
 8011342:	d04c      	beq.n	80113de <HAL_UART_IRQHandler+0x3e2>
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	4a97      	ldr	r2, [pc, #604]	@ (80115ac <HAL_UART_IRQHandler+0x5b0>)
 801134e:	4293      	cmp	r3, r2
 8011350:	d045      	beq.n	80113de <HAL_UART_IRQHandler+0x3e2>
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	4a95      	ldr	r2, [pc, #596]	@ (80115b0 <HAL_UART_IRQHandler+0x5b4>)
 801135c:	4293      	cmp	r3, r2
 801135e:	d03e      	beq.n	80113de <HAL_UART_IRQHandler+0x3e2>
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	4a92      	ldr	r2, [pc, #584]	@ (80115b4 <HAL_UART_IRQHandler+0x5b8>)
 801136a:	4293      	cmp	r3, r2
 801136c:	d037      	beq.n	80113de <HAL_UART_IRQHandler+0x3e2>
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	4a90      	ldr	r2, [pc, #576]	@ (80115b8 <HAL_UART_IRQHandler+0x5bc>)
 8011378:	4293      	cmp	r3, r2
 801137a:	d030      	beq.n	80113de <HAL_UART_IRQHandler+0x3e2>
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	4a8d      	ldr	r2, [pc, #564]	@ (80115bc <HAL_UART_IRQHandler+0x5c0>)
 8011386:	4293      	cmp	r3, r2
 8011388:	d029      	beq.n	80113de <HAL_UART_IRQHandler+0x3e2>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	4a8b      	ldr	r2, [pc, #556]	@ (80115c0 <HAL_UART_IRQHandler+0x5c4>)
 8011394:	4293      	cmp	r3, r2
 8011396:	d022      	beq.n	80113de <HAL_UART_IRQHandler+0x3e2>
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	4a88      	ldr	r2, [pc, #544]	@ (80115c4 <HAL_UART_IRQHandler+0x5c8>)
 80113a2:	4293      	cmp	r3, r2
 80113a4:	d01b      	beq.n	80113de <HAL_UART_IRQHandler+0x3e2>
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	4a86      	ldr	r2, [pc, #536]	@ (80115c8 <HAL_UART_IRQHandler+0x5cc>)
 80113b0:	4293      	cmp	r3, r2
 80113b2:	d014      	beq.n	80113de <HAL_UART_IRQHandler+0x3e2>
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	4a83      	ldr	r2, [pc, #524]	@ (80115cc <HAL_UART_IRQHandler+0x5d0>)
 80113be:	4293      	cmp	r3, r2
 80113c0:	d00d      	beq.n	80113de <HAL_UART_IRQHandler+0x3e2>
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	4a81      	ldr	r2, [pc, #516]	@ (80115d0 <HAL_UART_IRQHandler+0x5d4>)
 80113cc:	4293      	cmp	r3, r2
 80113ce:	d006      	beq.n	80113de <HAL_UART_IRQHandler+0x3e2>
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	4a7e      	ldr	r2, [pc, #504]	@ (80115d4 <HAL_UART_IRQHandler+0x5d8>)
 80113da:	4293      	cmp	r3, r2
 80113dc:	d106      	bne.n	80113ec <HAL_UART_IRQHandler+0x3f0>
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	685b      	ldr	r3, [r3, #4]
 80113e8:	b29b      	uxth	r3, r3
 80113ea:	e005      	b.n	80113f8 <HAL_UART_IRQHandler+0x3fc>
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	685b      	ldr	r3, [r3, #4]
 80113f6:	b29b      	uxth	r3, r3
 80113f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80113fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8011400:	2b00      	cmp	r3, #0
 8011402:	f000 80ad 	beq.w	8011560 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801140c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011410:	429a      	cmp	r2, r3
 8011412:	f080 80a5 	bcs.w	8011560 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801141c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011426:	69db      	ldr	r3, [r3, #28]
 8011428:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801142c:	f000 8087 	beq.w	801153e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011438:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801143c:	e853 3f00 	ldrex	r3, [r3]
 8011440:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8011444:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011448:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801144c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	461a      	mov	r2, r3
 8011456:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801145a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801145e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011462:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8011466:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801146a:	e841 2300 	strex	r3, r2, [r1]
 801146e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8011472:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011476:	2b00      	cmp	r3, #0
 8011478:	d1da      	bne.n	8011430 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	3308      	adds	r3, #8
 8011480:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011482:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011484:	e853 3f00 	ldrex	r3, [r3]
 8011488:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801148a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801148c:	f023 0301 	bic.w	r3, r3, #1
 8011490:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	3308      	adds	r3, #8
 801149a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801149e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80114a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80114a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80114aa:	e841 2300 	strex	r3, r2, [r1]
 80114ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80114b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d1e1      	bne.n	801147a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	3308      	adds	r3, #8
 80114bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80114c0:	e853 3f00 	ldrex	r3, [r3]
 80114c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80114c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80114c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80114cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	3308      	adds	r3, #8
 80114d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80114da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80114dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80114e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80114e2:	e841 2300 	strex	r3, r2, [r1]
 80114e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80114e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d1e3      	bne.n	80114b6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	2220      	movs	r2, #32
 80114f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	2200      	movs	r2, #0
 80114fa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011504:	e853 3f00 	ldrex	r3, [r3]
 8011508:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801150a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801150c:	f023 0310 	bic.w	r3, r3, #16
 8011510:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	461a      	mov	r2, r3
 801151a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801151e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011520:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011522:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011524:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011526:	e841 2300 	strex	r3, r2, [r1]
 801152a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801152c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801152e:	2b00      	cmp	r3, #0
 8011530:	d1e4      	bne.n	80114fc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011538:	4618      	mov	r0, r3
 801153a:	f7f2 fdfd 	bl	8004138 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	2202      	movs	r2, #2
 8011542:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011550:	b29b      	uxth	r3, r3
 8011552:	1ad3      	subs	r3, r2, r3
 8011554:	b29b      	uxth	r3, r3
 8011556:	4619      	mov	r1, r3
 8011558:	6878      	ldr	r0, [r7, #4]
 801155a:	f000 f943 	bl	80117e4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801155e:	e119      	b.n	8011794 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801156a:	429a      	cmp	r2, r3
 801156c:	f040 8112 	bne.w	8011794 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011576:	69db      	ldr	r3, [r3, #28]
 8011578:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801157c:	f040 810a 	bne.w	8011794 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	2202      	movs	r2, #2
 8011584:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801158c:	4619      	mov	r1, r3
 801158e:	6878      	ldr	r0, [r7, #4]
 8011590:	f000 f928 	bl	80117e4 <HAL_UARTEx_RxEventCallback>
      return;
 8011594:	e0fe      	b.n	8011794 <HAL_UART_IRQHandler+0x798>
 8011596:	bf00      	nop
 8011598:	40020010 	.word	0x40020010
 801159c:	40020028 	.word	0x40020028
 80115a0:	40020040 	.word	0x40020040
 80115a4:	40020058 	.word	0x40020058
 80115a8:	40020070 	.word	0x40020070
 80115ac:	40020088 	.word	0x40020088
 80115b0:	400200a0 	.word	0x400200a0
 80115b4:	400200b8 	.word	0x400200b8
 80115b8:	40020410 	.word	0x40020410
 80115bc:	40020428 	.word	0x40020428
 80115c0:	40020440 	.word	0x40020440
 80115c4:	40020458 	.word	0x40020458
 80115c8:	40020470 	.word	0x40020470
 80115cc:	40020488 	.word	0x40020488
 80115d0:	400204a0 	.word	0x400204a0
 80115d4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80115e4:	b29b      	uxth	r3, r3
 80115e6:	1ad3      	subs	r3, r2, r3
 80115e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80115f2:	b29b      	uxth	r3, r3
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	f000 80cf 	beq.w	8011798 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80115fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80115fe:	2b00      	cmp	r3, #0
 8011600:	f000 80ca 	beq.w	8011798 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801160a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801160c:	e853 3f00 	ldrex	r3, [r3]
 8011610:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011614:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011618:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	461a      	mov	r2, r3
 8011622:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011626:	647b      	str	r3, [r7, #68]	@ 0x44
 8011628:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801162a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801162c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801162e:	e841 2300 	strex	r3, r2, [r1]
 8011632:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011636:	2b00      	cmp	r3, #0
 8011638:	d1e4      	bne.n	8011604 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	3308      	adds	r3, #8
 8011640:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011644:	e853 3f00 	ldrex	r3, [r3]
 8011648:	623b      	str	r3, [r7, #32]
   return(result);
 801164a:	6a3a      	ldr	r2, [r7, #32]
 801164c:	4b55      	ldr	r3, [pc, #340]	@ (80117a4 <HAL_UART_IRQHandler+0x7a8>)
 801164e:	4013      	ands	r3, r2
 8011650:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	3308      	adds	r3, #8
 801165a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801165e:	633a      	str	r2, [r7, #48]	@ 0x30
 8011660:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011666:	e841 2300 	strex	r3, r2, [r1]
 801166a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801166c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801166e:	2b00      	cmp	r3, #0
 8011670:	d1e3      	bne.n	801163a <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	2220      	movs	r2, #32
 8011676:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2200      	movs	r2, #0
 801167e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2200      	movs	r2, #0
 8011684:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801168c:	693b      	ldr	r3, [r7, #16]
 801168e:	e853 3f00 	ldrex	r3, [r3]
 8011692:	60fb      	str	r3, [r7, #12]
   return(result);
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	f023 0310 	bic.w	r3, r3, #16
 801169a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	461a      	mov	r2, r3
 80116a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80116a8:	61fb      	str	r3, [r7, #28]
 80116aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116ac:	69b9      	ldr	r1, [r7, #24]
 80116ae:	69fa      	ldr	r2, [r7, #28]
 80116b0:	e841 2300 	strex	r3, r2, [r1]
 80116b4:	617b      	str	r3, [r7, #20]
   return(result);
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d1e4      	bne.n	8011686 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	2202      	movs	r2, #2
 80116c0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80116c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80116c6:	4619      	mov	r1, r3
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	f000 f88b 	bl	80117e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80116ce:	e063      	b.n	8011798 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80116d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80116d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d00e      	beq.n	80116fa <HAL_UART_IRQHandler+0x6fe>
 80116dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80116e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d008      	beq.n	80116fa <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80116f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f001 fa22 	bl	8012b3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80116f8:	e051      	b.n	801179e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80116fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80116fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011702:	2b00      	cmp	r3, #0
 8011704:	d014      	beq.n	8011730 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801170a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801170e:	2b00      	cmp	r3, #0
 8011710:	d105      	bne.n	801171e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011716:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801171a:	2b00      	cmp	r3, #0
 801171c:	d008      	beq.n	8011730 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011722:	2b00      	cmp	r3, #0
 8011724:	d03a      	beq.n	801179c <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	4798      	blx	r3
    }
    return;
 801172e:	e035      	b.n	801179c <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011738:	2b00      	cmp	r3, #0
 801173a:	d009      	beq.n	8011750 <HAL_UART_IRQHandler+0x754>
 801173c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011744:	2b00      	cmp	r3, #0
 8011746:	d003      	beq.n	8011750 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f001 f9cc 	bl	8012ae6 <UART_EndTransmit_IT>
    return;
 801174e:	e026      	b.n	801179e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011754:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011758:	2b00      	cmp	r3, #0
 801175a:	d009      	beq.n	8011770 <HAL_UART_IRQHandler+0x774>
 801175c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011760:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011764:	2b00      	cmp	r3, #0
 8011766:	d003      	beq.n	8011770 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011768:	6878      	ldr	r0, [r7, #4]
 801176a:	f001 f9fb 	bl	8012b64 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801176e:	e016      	b.n	801179e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011774:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011778:	2b00      	cmp	r3, #0
 801177a:	d010      	beq.n	801179e <HAL_UART_IRQHandler+0x7a2>
 801177c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011780:	2b00      	cmp	r3, #0
 8011782:	da0c      	bge.n	801179e <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011784:	6878      	ldr	r0, [r7, #4]
 8011786:	f001 f9e3 	bl	8012b50 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801178a:	e008      	b.n	801179e <HAL_UART_IRQHandler+0x7a2>
      return;
 801178c:	bf00      	nop
 801178e:	e006      	b.n	801179e <HAL_UART_IRQHandler+0x7a2>
    return;
 8011790:	bf00      	nop
 8011792:	e004      	b.n	801179e <HAL_UART_IRQHandler+0x7a2>
      return;
 8011794:	bf00      	nop
 8011796:	e002      	b.n	801179e <HAL_UART_IRQHandler+0x7a2>
      return;
 8011798:	bf00      	nop
 801179a:	e000      	b.n	801179e <HAL_UART_IRQHandler+0x7a2>
    return;
 801179c:	bf00      	nop
  }
}
 801179e:	37e8      	adds	r7, #232	@ 0xe8
 80117a0:	46bd      	mov	sp, r7
 80117a2:	bd80      	pop	{r7, pc}
 80117a4:	effffffe 	.word	0xeffffffe

080117a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80117a8:	b480      	push	{r7}
 80117aa:	b083      	sub	sp, #12
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80117b0:	bf00      	nop
 80117b2:	370c      	adds	r7, #12
 80117b4:	46bd      	mov	sp, r7
 80117b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ba:	4770      	bx	lr

080117bc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80117bc:	b480      	push	{r7}
 80117be:	b083      	sub	sp, #12
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80117c4:	bf00      	nop
 80117c6:	370c      	adds	r7, #12
 80117c8:	46bd      	mov	sp, r7
 80117ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ce:	4770      	bx	lr

080117d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80117d0:	b480      	push	{r7}
 80117d2:	b083      	sub	sp, #12
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80117d8:	bf00      	nop
 80117da:	370c      	adds	r7, #12
 80117dc:	46bd      	mov	sp, r7
 80117de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e2:	4770      	bx	lr

080117e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80117e4:	b480      	push	{r7}
 80117e6:	b083      	sub	sp, #12
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
 80117ec:	460b      	mov	r3, r1
 80117ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80117f0:	bf00      	nop
 80117f2:	370c      	adds	r7, #12
 80117f4:	46bd      	mov	sp, r7
 80117f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fa:	4770      	bx	lr

080117fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80117fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011800:	b092      	sub	sp, #72	@ 0x48
 8011802:	af00      	add	r7, sp, #0
 8011804:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011806:	2300      	movs	r3, #0
 8011808:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801180c:	697b      	ldr	r3, [r7, #20]
 801180e:	689a      	ldr	r2, [r3, #8]
 8011810:	697b      	ldr	r3, [r7, #20]
 8011812:	691b      	ldr	r3, [r3, #16]
 8011814:	431a      	orrs	r2, r3
 8011816:	697b      	ldr	r3, [r7, #20]
 8011818:	695b      	ldr	r3, [r3, #20]
 801181a:	431a      	orrs	r2, r3
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	69db      	ldr	r3, [r3, #28]
 8011820:	4313      	orrs	r3, r2
 8011822:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	681a      	ldr	r2, [r3, #0]
 801182a:	4bbe      	ldr	r3, [pc, #760]	@ (8011b24 <UART_SetConfig+0x328>)
 801182c:	4013      	ands	r3, r2
 801182e:	697a      	ldr	r2, [r7, #20]
 8011830:	6812      	ldr	r2, [r2, #0]
 8011832:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011834:	430b      	orrs	r3, r1
 8011836:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011838:	697b      	ldr	r3, [r7, #20]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	685b      	ldr	r3, [r3, #4]
 801183e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	68da      	ldr	r2, [r3, #12]
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	430a      	orrs	r2, r1
 801184c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801184e:	697b      	ldr	r3, [r7, #20]
 8011850:	699b      	ldr	r3, [r3, #24]
 8011852:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011854:	697b      	ldr	r3, [r7, #20]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	4ab3      	ldr	r2, [pc, #716]	@ (8011b28 <UART_SetConfig+0x32c>)
 801185a:	4293      	cmp	r3, r2
 801185c:	d004      	beq.n	8011868 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	6a1b      	ldr	r3, [r3, #32]
 8011862:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011864:	4313      	orrs	r3, r2
 8011866:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011868:	697b      	ldr	r3, [r7, #20]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	689a      	ldr	r2, [r3, #8]
 801186e:	4baf      	ldr	r3, [pc, #700]	@ (8011b2c <UART_SetConfig+0x330>)
 8011870:	4013      	ands	r3, r2
 8011872:	697a      	ldr	r2, [r7, #20]
 8011874:	6812      	ldr	r2, [r2, #0]
 8011876:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011878:	430b      	orrs	r3, r1
 801187a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011882:	f023 010f 	bic.w	r1, r3, #15
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801188a:	697b      	ldr	r3, [r7, #20]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	430a      	orrs	r2, r1
 8011890:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	4aa6      	ldr	r2, [pc, #664]	@ (8011b30 <UART_SetConfig+0x334>)
 8011898:	4293      	cmp	r3, r2
 801189a:	d177      	bne.n	801198c <UART_SetConfig+0x190>
 801189c:	4ba5      	ldr	r3, [pc, #660]	@ (8011b34 <UART_SetConfig+0x338>)
 801189e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80118a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80118a4:	2b28      	cmp	r3, #40	@ 0x28
 80118a6:	d86d      	bhi.n	8011984 <UART_SetConfig+0x188>
 80118a8:	a201      	add	r2, pc, #4	@ (adr r2, 80118b0 <UART_SetConfig+0xb4>)
 80118aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118ae:	bf00      	nop
 80118b0:	08011955 	.word	0x08011955
 80118b4:	08011985 	.word	0x08011985
 80118b8:	08011985 	.word	0x08011985
 80118bc:	08011985 	.word	0x08011985
 80118c0:	08011985 	.word	0x08011985
 80118c4:	08011985 	.word	0x08011985
 80118c8:	08011985 	.word	0x08011985
 80118cc:	08011985 	.word	0x08011985
 80118d0:	0801195d 	.word	0x0801195d
 80118d4:	08011985 	.word	0x08011985
 80118d8:	08011985 	.word	0x08011985
 80118dc:	08011985 	.word	0x08011985
 80118e0:	08011985 	.word	0x08011985
 80118e4:	08011985 	.word	0x08011985
 80118e8:	08011985 	.word	0x08011985
 80118ec:	08011985 	.word	0x08011985
 80118f0:	08011965 	.word	0x08011965
 80118f4:	08011985 	.word	0x08011985
 80118f8:	08011985 	.word	0x08011985
 80118fc:	08011985 	.word	0x08011985
 8011900:	08011985 	.word	0x08011985
 8011904:	08011985 	.word	0x08011985
 8011908:	08011985 	.word	0x08011985
 801190c:	08011985 	.word	0x08011985
 8011910:	0801196d 	.word	0x0801196d
 8011914:	08011985 	.word	0x08011985
 8011918:	08011985 	.word	0x08011985
 801191c:	08011985 	.word	0x08011985
 8011920:	08011985 	.word	0x08011985
 8011924:	08011985 	.word	0x08011985
 8011928:	08011985 	.word	0x08011985
 801192c:	08011985 	.word	0x08011985
 8011930:	08011975 	.word	0x08011975
 8011934:	08011985 	.word	0x08011985
 8011938:	08011985 	.word	0x08011985
 801193c:	08011985 	.word	0x08011985
 8011940:	08011985 	.word	0x08011985
 8011944:	08011985 	.word	0x08011985
 8011948:	08011985 	.word	0x08011985
 801194c:	08011985 	.word	0x08011985
 8011950:	0801197d 	.word	0x0801197d
 8011954:	2301      	movs	r3, #1
 8011956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801195a:	e222      	b.n	8011da2 <UART_SetConfig+0x5a6>
 801195c:	2304      	movs	r3, #4
 801195e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011962:	e21e      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011964:	2308      	movs	r3, #8
 8011966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801196a:	e21a      	b.n	8011da2 <UART_SetConfig+0x5a6>
 801196c:	2310      	movs	r3, #16
 801196e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011972:	e216      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011974:	2320      	movs	r3, #32
 8011976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801197a:	e212      	b.n	8011da2 <UART_SetConfig+0x5a6>
 801197c:	2340      	movs	r3, #64	@ 0x40
 801197e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011982:	e20e      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011984:	2380      	movs	r3, #128	@ 0x80
 8011986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801198a:	e20a      	b.n	8011da2 <UART_SetConfig+0x5a6>
 801198c:	697b      	ldr	r3, [r7, #20]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	4a69      	ldr	r2, [pc, #420]	@ (8011b38 <UART_SetConfig+0x33c>)
 8011992:	4293      	cmp	r3, r2
 8011994:	d130      	bne.n	80119f8 <UART_SetConfig+0x1fc>
 8011996:	4b67      	ldr	r3, [pc, #412]	@ (8011b34 <UART_SetConfig+0x338>)
 8011998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801199a:	f003 0307 	and.w	r3, r3, #7
 801199e:	2b05      	cmp	r3, #5
 80119a0:	d826      	bhi.n	80119f0 <UART_SetConfig+0x1f4>
 80119a2:	a201      	add	r2, pc, #4	@ (adr r2, 80119a8 <UART_SetConfig+0x1ac>)
 80119a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119a8:	080119c1 	.word	0x080119c1
 80119ac:	080119c9 	.word	0x080119c9
 80119b0:	080119d1 	.word	0x080119d1
 80119b4:	080119d9 	.word	0x080119d9
 80119b8:	080119e1 	.word	0x080119e1
 80119bc:	080119e9 	.word	0x080119e9
 80119c0:	2300      	movs	r3, #0
 80119c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119c6:	e1ec      	b.n	8011da2 <UART_SetConfig+0x5a6>
 80119c8:	2304      	movs	r3, #4
 80119ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119ce:	e1e8      	b.n	8011da2 <UART_SetConfig+0x5a6>
 80119d0:	2308      	movs	r3, #8
 80119d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119d6:	e1e4      	b.n	8011da2 <UART_SetConfig+0x5a6>
 80119d8:	2310      	movs	r3, #16
 80119da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119de:	e1e0      	b.n	8011da2 <UART_SetConfig+0x5a6>
 80119e0:	2320      	movs	r3, #32
 80119e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119e6:	e1dc      	b.n	8011da2 <UART_SetConfig+0x5a6>
 80119e8:	2340      	movs	r3, #64	@ 0x40
 80119ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119ee:	e1d8      	b.n	8011da2 <UART_SetConfig+0x5a6>
 80119f0:	2380      	movs	r3, #128	@ 0x80
 80119f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119f6:	e1d4      	b.n	8011da2 <UART_SetConfig+0x5a6>
 80119f8:	697b      	ldr	r3, [r7, #20]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	4a4f      	ldr	r2, [pc, #316]	@ (8011b3c <UART_SetConfig+0x340>)
 80119fe:	4293      	cmp	r3, r2
 8011a00:	d130      	bne.n	8011a64 <UART_SetConfig+0x268>
 8011a02:	4b4c      	ldr	r3, [pc, #304]	@ (8011b34 <UART_SetConfig+0x338>)
 8011a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011a06:	f003 0307 	and.w	r3, r3, #7
 8011a0a:	2b05      	cmp	r3, #5
 8011a0c:	d826      	bhi.n	8011a5c <UART_SetConfig+0x260>
 8011a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8011a14 <UART_SetConfig+0x218>)
 8011a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a14:	08011a2d 	.word	0x08011a2d
 8011a18:	08011a35 	.word	0x08011a35
 8011a1c:	08011a3d 	.word	0x08011a3d
 8011a20:	08011a45 	.word	0x08011a45
 8011a24:	08011a4d 	.word	0x08011a4d
 8011a28:	08011a55 	.word	0x08011a55
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a32:	e1b6      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011a34:	2304      	movs	r3, #4
 8011a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a3a:	e1b2      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011a3c:	2308      	movs	r3, #8
 8011a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a42:	e1ae      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011a44:	2310      	movs	r3, #16
 8011a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a4a:	e1aa      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011a4c:	2320      	movs	r3, #32
 8011a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a52:	e1a6      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011a54:	2340      	movs	r3, #64	@ 0x40
 8011a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a5a:	e1a2      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011a5c:	2380      	movs	r3, #128	@ 0x80
 8011a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a62:	e19e      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	4a35      	ldr	r2, [pc, #212]	@ (8011b40 <UART_SetConfig+0x344>)
 8011a6a:	4293      	cmp	r3, r2
 8011a6c:	d130      	bne.n	8011ad0 <UART_SetConfig+0x2d4>
 8011a6e:	4b31      	ldr	r3, [pc, #196]	@ (8011b34 <UART_SetConfig+0x338>)
 8011a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011a72:	f003 0307 	and.w	r3, r3, #7
 8011a76:	2b05      	cmp	r3, #5
 8011a78:	d826      	bhi.n	8011ac8 <UART_SetConfig+0x2cc>
 8011a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8011a80 <UART_SetConfig+0x284>)
 8011a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a80:	08011a99 	.word	0x08011a99
 8011a84:	08011aa1 	.word	0x08011aa1
 8011a88:	08011aa9 	.word	0x08011aa9
 8011a8c:	08011ab1 	.word	0x08011ab1
 8011a90:	08011ab9 	.word	0x08011ab9
 8011a94:	08011ac1 	.word	0x08011ac1
 8011a98:	2300      	movs	r3, #0
 8011a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a9e:	e180      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011aa0:	2304      	movs	r3, #4
 8011aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011aa6:	e17c      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011aa8:	2308      	movs	r3, #8
 8011aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011aae:	e178      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011ab0:	2310      	movs	r3, #16
 8011ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ab6:	e174      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011ab8:	2320      	movs	r3, #32
 8011aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011abe:	e170      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011ac0:	2340      	movs	r3, #64	@ 0x40
 8011ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ac6:	e16c      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011ac8:	2380      	movs	r3, #128	@ 0x80
 8011aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ace:	e168      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011ad0:	697b      	ldr	r3, [r7, #20]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8011b44 <UART_SetConfig+0x348>)
 8011ad6:	4293      	cmp	r3, r2
 8011ad8:	d142      	bne.n	8011b60 <UART_SetConfig+0x364>
 8011ada:	4b16      	ldr	r3, [pc, #88]	@ (8011b34 <UART_SetConfig+0x338>)
 8011adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011ade:	f003 0307 	and.w	r3, r3, #7
 8011ae2:	2b05      	cmp	r3, #5
 8011ae4:	d838      	bhi.n	8011b58 <UART_SetConfig+0x35c>
 8011ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8011aec <UART_SetConfig+0x2f0>)
 8011ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aec:	08011b05 	.word	0x08011b05
 8011af0:	08011b0d 	.word	0x08011b0d
 8011af4:	08011b15 	.word	0x08011b15
 8011af8:	08011b1d 	.word	0x08011b1d
 8011afc:	08011b49 	.word	0x08011b49
 8011b00:	08011b51 	.word	0x08011b51
 8011b04:	2300      	movs	r3, #0
 8011b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b0a:	e14a      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011b0c:	2304      	movs	r3, #4
 8011b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b12:	e146      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011b14:	2308      	movs	r3, #8
 8011b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b1a:	e142      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011b1c:	2310      	movs	r3, #16
 8011b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b22:	e13e      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011b24:	cfff69f3 	.word	0xcfff69f3
 8011b28:	58000c00 	.word	0x58000c00
 8011b2c:	11fff4ff 	.word	0x11fff4ff
 8011b30:	40011000 	.word	0x40011000
 8011b34:	58024400 	.word	0x58024400
 8011b38:	40004400 	.word	0x40004400
 8011b3c:	40004800 	.word	0x40004800
 8011b40:	40004c00 	.word	0x40004c00
 8011b44:	40005000 	.word	0x40005000
 8011b48:	2320      	movs	r3, #32
 8011b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b4e:	e128      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011b50:	2340      	movs	r3, #64	@ 0x40
 8011b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b56:	e124      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011b58:	2380      	movs	r3, #128	@ 0x80
 8011b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b5e:	e120      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	4acb      	ldr	r2, [pc, #812]	@ (8011e94 <UART_SetConfig+0x698>)
 8011b66:	4293      	cmp	r3, r2
 8011b68:	d176      	bne.n	8011c58 <UART_SetConfig+0x45c>
 8011b6a:	4bcb      	ldr	r3, [pc, #812]	@ (8011e98 <UART_SetConfig+0x69c>)
 8011b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011b72:	2b28      	cmp	r3, #40	@ 0x28
 8011b74:	d86c      	bhi.n	8011c50 <UART_SetConfig+0x454>
 8011b76:	a201      	add	r2, pc, #4	@ (adr r2, 8011b7c <UART_SetConfig+0x380>)
 8011b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b7c:	08011c21 	.word	0x08011c21
 8011b80:	08011c51 	.word	0x08011c51
 8011b84:	08011c51 	.word	0x08011c51
 8011b88:	08011c51 	.word	0x08011c51
 8011b8c:	08011c51 	.word	0x08011c51
 8011b90:	08011c51 	.word	0x08011c51
 8011b94:	08011c51 	.word	0x08011c51
 8011b98:	08011c51 	.word	0x08011c51
 8011b9c:	08011c29 	.word	0x08011c29
 8011ba0:	08011c51 	.word	0x08011c51
 8011ba4:	08011c51 	.word	0x08011c51
 8011ba8:	08011c51 	.word	0x08011c51
 8011bac:	08011c51 	.word	0x08011c51
 8011bb0:	08011c51 	.word	0x08011c51
 8011bb4:	08011c51 	.word	0x08011c51
 8011bb8:	08011c51 	.word	0x08011c51
 8011bbc:	08011c31 	.word	0x08011c31
 8011bc0:	08011c51 	.word	0x08011c51
 8011bc4:	08011c51 	.word	0x08011c51
 8011bc8:	08011c51 	.word	0x08011c51
 8011bcc:	08011c51 	.word	0x08011c51
 8011bd0:	08011c51 	.word	0x08011c51
 8011bd4:	08011c51 	.word	0x08011c51
 8011bd8:	08011c51 	.word	0x08011c51
 8011bdc:	08011c39 	.word	0x08011c39
 8011be0:	08011c51 	.word	0x08011c51
 8011be4:	08011c51 	.word	0x08011c51
 8011be8:	08011c51 	.word	0x08011c51
 8011bec:	08011c51 	.word	0x08011c51
 8011bf0:	08011c51 	.word	0x08011c51
 8011bf4:	08011c51 	.word	0x08011c51
 8011bf8:	08011c51 	.word	0x08011c51
 8011bfc:	08011c41 	.word	0x08011c41
 8011c00:	08011c51 	.word	0x08011c51
 8011c04:	08011c51 	.word	0x08011c51
 8011c08:	08011c51 	.word	0x08011c51
 8011c0c:	08011c51 	.word	0x08011c51
 8011c10:	08011c51 	.word	0x08011c51
 8011c14:	08011c51 	.word	0x08011c51
 8011c18:	08011c51 	.word	0x08011c51
 8011c1c:	08011c49 	.word	0x08011c49
 8011c20:	2301      	movs	r3, #1
 8011c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c26:	e0bc      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011c28:	2304      	movs	r3, #4
 8011c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c2e:	e0b8      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011c30:	2308      	movs	r3, #8
 8011c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c36:	e0b4      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011c38:	2310      	movs	r3, #16
 8011c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c3e:	e0b0      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011c40:	2320      	movs	r3, #32
 8011c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c46:	e0ac      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011c48:	2340      	movs	r3, #64	@ 0x40
 8011c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c4e:	e0a8      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011c50:	2380      	movs	r3, #128	@ 0x80
 8011c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c56:	e0a4      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011c58:	697b      	ldr	r3, [r7, #20]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	4a8f      	ldr	r2, [pc, #572]	@ (8011e9c <UART_SetConfig+0x6a0>)
 8011c5e:	4293      	cmp	r3, r2
 8011c60:	d130      	bne.n	8011cc4 <UART_SetConfig+0x4c8>
 8011c62:	4b8d      	ldr	r3, [pc, #564]	@ (8011e98 <UART_SetConfig+0x69c>)
 8011c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c66:	f003 0307 	and.w	r3, r3, #7
 8011c6a:	2b05      	cmp	r3, #5
 8011c6c:	d826      	bhi.n	8011cbc <UART_SetConfig+0x4c0>
 8011c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8011c74 <UART_SetConfig+0x478>)
 8011c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c74:	08011c8d 	.word	0x08011c8d
 8011c78:	08011c95 	.word	0x08011c95
 8011c7c:	08011c9d 	.word	0x08011c9d
 8011c80:	08011ca5 	.word	0x08011ca5
 8011c84:	08011cad 	.word	0x08011cad
 8011c88:	08011cb5 	.word	0x08011cb5
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c92:	e086      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011c94:	2304      	movs	r3, #4
 8011c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c9a:	e082      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011c9c:	2308      	movs	r3, #8
 8011c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ca2:	e07e      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011ca4:	2310      	movs	r3, #16
 8011ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011caa:	e07a      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011cac:	2320      	movs	r3, #32
 8011cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cb2:	e076      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011cb4:	2340      	movs	r3, #64	@ 0x40
 8011cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cba:	e072      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011cbc:	2380      	movs	r3, #128	@ 0x80
 8011cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cc2:	e06e      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011cc4:	697b      	ldr	r3, [r7, #20]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	4a75      	ldr	r2, [pc, #468]	@ (8011ea0 <UART_SetConfig+0x6a4>)
 8011cca:	4293      	cmp	r3, r2
 8011ccc:	d130      	bne.n	8011d30 <UART_SetConfig+0x534>
 8011cce:	4b72      	ldr	r3, [pc, #456]	@ (8011e98 <UART_SetConfig+0x69c>)
 8011cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011cd2:	f003 0307 	and.w	r3, r3, #7
 8011cd6:	2b05      	cmp	r3, #5
 8011cd8:	d826      	bhi.n	8011d28 <UART_SetConfig+0x52c>
 8011cda:	a201      	add	r2, pc, #4	@ (adr r2, 8011ce0 <UART_SetConfig+0x4e4>)
 8011cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ce0:	08011cf9 	.word	0x08011cf9
 8011ce4:	08011d01 	.word	0x08011d01
 8011ce8:	08011d09 	.word	0x08011d09
 8011cec:	08011d11 	.word	0x08011d11
 8011cf0:	08011d19 	.word	0x08011d19
 8011cf4:	08011d21 	.word	0x08011d21
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cfe:	e050      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011d00:	2304      	movs	r3, #4
 8011d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d06:	e04c      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011d08:	2308      	movs	r3, #8
 8011d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d0e:	e048      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011d10:	2310      	movs	r3, #16
 8011d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d16:	e044      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011d18:	2320      	movs	r3, #32
 8011d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d1e:	e040      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011d20:	2340      	movs	r3, #64	@ 0x40
 8011d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d26:	e03c      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011d28:	2380      	movs	r3, #128	@ 0x80
 8011d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d2e:	e038      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011d30:	697b      	ldr	r3, [r7, #20]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	4a5b      	ldr	r2, [pc, #364]	@ (8011ea4 <UART_SetConfig+0x6a8>)
 8011d36:	4293      	cmp	r3, r2
 8011d38:	d130      	bne.n	8011d9c <UART_SetConfig+0x5a0>
 8011d3a:	4b57      	ldr	r3, [pc, #348]	@ (8011e98 <UART_SetConfig+0x69c>)
 8011d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011d3e:	f003 0307 	and.w	r3, r3, #7
 8011d42:	2b05      	cmp	r3, #5
 8011d44:	d826      	bhi.n	8011d94 <UART_SetConfig+0x598>
 8011d46:	a201      	add	r2, pc, #4	@ (adr r2, 8011d4c <UART_SetConfig+0x550>)
 8011d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d4c:	08011d65 	.word	0x08011d65
 8011d50:	08011d6d 	.word	0x08011d6d
 8011d54:	08011d75 	.word	0x08011d75
 8011d58:	08011d7d 	.word	0x08011d7d
 8011d5c:	08011d85 	.word	0x08011d85
 8011d60:	08011d8d 	.word	0x08011d8d
 8011d64:	2302      	movs	r3, #2
 8011d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d6a:	e01a      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011d6c:	2304      	movs	r3, #4
 8011d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d72:	e016      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011d74:	2308      	movs	r3, #8
 8011d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d7a:	e012      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011d7c:	2310      	movs	r3, #16
 8011d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d82:	e00e      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011d84:	2320      	movs	r3, #32
 8011d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d8a:	e00a      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011d8c:	2340      	movs	r3, #64	@ 0x40
 8011d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d92:	e006      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011d94:	2380      	movs	r3, #128	@ 0x80
 8011d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d9a:	e002      	b.n	8011da2 <UART_SetConfig+0x5a6>
 8011d9c:	2380      	movs	r3, #128	@ 0x80
 8011d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011da2:	697b      	ldr	r3, [r7, #20]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	4a3f      	ldr	r2, [pc, #252]	@ (8011ea4 <UART_SetConfig+0x6a8>)
 8011da8:	4293      	cmp	r3, r2
 8011daa:	f040 80f8 	bne.w	8011f9e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011dae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011db2:	2b20      	cmp	r3, #32
 8011db4:	dc46      	bgt.n	8011e44 <UART_SetConfig+0x648>
 8011db6:	2b02      	cmp	r3, #2
 8011db8:	f2c0 8082 	blt.w	8011ec0 <UART_SetConfig+0x6c4>
 8011dbc:	3b02      	subs	r3, #2
 8011dbe:	2b1e      	cmp	r3, #30
 8011dc0:	d87e      	bhi.n	8011ec0 <UART_SetConfig+0x6c4>
 8011dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8011dc8 <UART_SetConfig+0x5cc>)
 8011dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dc8:	08011e4b 	.word	0x08011e4b
 8011dcc:	08011ec1 	.word	0x08011ec1
 8011dd0:	08011e53 	.word	0x08011e53
 8011dd4:	08011ec1 	.word	0x08011ec1
 8011dd8:	08011ec1 	.word	0x08011ec1
 8011ddc:	08011ec1 	.word	0x08011ec1
 8011de0:	08011e63 	.word	0x08011e63
 8011de4:	08011ec1 	.word	0x08011ec1
 8011de8:	08011ec1 	.word	0x08011ec1
 8011dec:	08011ec1 	.word	0x08011ec1
 8011df0:	08011ec1 	.word	0x08011ec1
 8011df4:	08011ec1 	.word	0x08011ec1
 8011df8:	08011ec1 	.word	0x08011ec1
 8011dfc:	08011ec1 	.word	0x08011ec1
 8011e00:	08011e73 	.word	0x08011e73
 8011e04:	08011ec1 	.word	0x08011ec1
 8011e08:	08011ec1 	.word	0x08011ec1
 8011e0c:	08011ec1 	.word	0x08011ec1
 8011e10:	08011ec1 	.word	0x08011ec1
 8011e14:	08011ec1 	.word	0x08011ec1
 8011e18:	08011ec1 	.word	0x08011ec1
 8011e1c:	08011ec1 	.word	0x08011ec1
 8011e20:	08011ec1 	.word	0x08011ec1
 8011e24:	08011ec1 	.word	0x08011ec1
 8011e28:	08011ec1 	.word	0x08011ec1
 8011e2c:	08011ec1 	.word	0x08011ec1
 8011e30:	08011ec1 	.word	0x08011ec1
 8011e34:	08011ec1 	.word	0x08011ec1
 8011e38:	08011ec1 	.word	0x08011ec1
 8011e3c:	08011ec1 	.word	0x08011ec1
 8011e40:	08011eb3 	.word	0x08011eb3
 8011e44:	2b40      	cmp	r3, #64	@ 0x40
 8011e46:	d037      	beq.n	8011eb8 <UART_SetConfig+0x6bc>
 8011e48:	e03a      	b.n	8011ec0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011e4a:	f7fc ff6d 	bl	800ed28 <HAL_RCCEx_GetD3PCLK1Freq>
 8011e4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011e50:	e03c      	b.n	8011ecc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011e52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011e56:	4618      	mov	r0, r3
 8011e58:	f7fc ff7c 	bl	800ed54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011e60:	e034      	b.n	8011ecc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011e62:	f107 0318 	add.w	r3, r7, #24
 8011e66:	4618      	mov	r0, r3
 8011e68:	f7fd f8c8 	bl	800effc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011e6c:	69fb      	ldr	r3, [r7, #28]
 8011e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011e70:	e02c      	b.n	8011ecc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011e72:	4b09      	ldr	r3, [pc, #36]	@ (8011e98 <UART_SetConfig+0x69c>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	f003 0320 	and.w	r3, r3, #32
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d016      	beq.n	8011eac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011e7e:	4b06      	ldr	r3, [pc, #24]	@ (8011e98 <UART_SetConfig+0x69c>)
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	08db      	lsrs	r3, r3, #3
 8011e84:	f003 0303 	and.w	r3, r3, #3
 8011e88:	4a07      	ldr	r2, [pc, #28]	@ (8011ea8 <UART_SetConfig+0x6ac>)
 8011e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8011e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011e90:	e01c      	b.n	8011ecc <UART_SetConfig+0x6d0>
 8011e92:	bf00      	nop
 8011e94:	40011400 	.word	0x40011400
 8011e98:	58024400 	.word	0x58024400
 8011e9c:	40007800 	.word	0x40007800
 8011ea0:	40007c00 	.word	0x40007c00
 8011ea4:	58000c00 	.word	0x58000c00
 8011ea8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8011eac:	4b9d      	ldr	r3, [pc, #628]	@ (8012124 <UART_SetConfig+0x928>)
 8011eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011eb0:	e00c      	b.n	8011ecc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011eb2:	4b9d      	ldr	r3, [pc, #628]	@ (8012128 <UART_SetConfig+0x92c>)
 8011eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011eb6:	e009      	b.n	8011ecc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011eb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011ebe:	e005      	b.n	8011ecc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011eca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	f000 81de 	beq.w	8012290 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011ed4:	697b      	ldr	r3, [r7, #20]
 8011ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ed8:	4a94      	ldr	r2, [pc, #592]	@ (801212c <UART_SetConfig+0x930>)
 8011eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ede:	461a      	mov	r2, r3
 8011ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ee2:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ee6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011ee8:	697b      	ldr	r3, [r7, #20]
 8011eea:	685a      	ldr	r2, [r3, #4]
 8011eec:	4613      	mov	r3, r2
 8011eee:	005b      	lsls	r3, r3, #1
 8011ef0:	4413      	add	r3, r2
 8011ef2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011ef4:	429a      	cmp	r2, r3
 8011ef6:	d305      	bcc.n	8011f04 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011ef8:	697b      	ldr	r3, [r7, #20]
 8011efa:	685b      	ldr	r3, [r3, #4]
 8011efc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011efe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d903      	bls.n	8011f0c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011f04:	2301      	movs	r3, #1
 8011f06:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011f0a:	e1c1      	b.n	8012290 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f0e:	2200      	movs	r2, #0
 8011f10:	60bb      	str	r3, [r7, #8]
 8011f12:	60fa      	str	r2, [r7, #12]
 8011f14:	697b      	ldr	r3, [r7, #20]
 8011f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f18:	4a84      	ldr	r2, [pc, #528]	@ (801212c <UART_SetConfig+0x930>)
 8011f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011f1e:	b29b      	uxth	r3, r3
 8011f20:	2200      	movs	r2, #0
 8011f22:	603b      	str	r3, [r7, #0]
 8011f24:	607a      	str	r2, [r7, #4]
 8011f26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011f2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011f2e:	f7ee fa2f 	bl	8000390 <__aeabi_uldivmod>
 8011f32:	4602      	mov	r2, r0
 8011f34:	460b      	mov	r3, r1
 8011f36:	4610      	mov	r0, r2
 8011f38:	4619      	mov	r1, r3
 8011f3a:	f04f 0200 	mov.w	r2, #0
 8011f3e:	f04f 0300 	mov.w	r3, #0
 8011f42:	020b      	lsls	r3, r1, #8
 8011f44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011f48:	0202      	lsls	r2, r0, #8
 8011f4a:	6979      	ldr	r1, [r7, #20]
 8011f4c:	6849      	ldr	r1, [r1, #4]
 8011f4e:	0849      	lsrs	r1, r1, #1
 8011f50:	2000      	movs	r0, #0
 8011f52:	460c      	mov	r4, r1
 8011f54:	4605      	mov	r5, r0
 8011f56:	eb12 0804 	adds.w	r8, r2, r4
 8011f5a:	eb43 0905 	adc.w	r9, r3, r5
 8011f5e:	697b      	ldr	r3, [r7, #20]
 8011f60:	685b      	ldr	r3, [r3, #4]
 8011f62:	2200      	movs	r2, #0
 8011f64:	469a      	mov	sl, r3
 8011f66:	4693      	mov	fp, r2
 8011f68:	4652      	mov	r2, sl
 8011f6a:	465b      	mov	r3, fp
 8011f6c:	4640      	mov	r0, r8
 8011f6e:	4649      	mov	r1, r9
 8011f70:	f7ee fa0e 	bl	8000390 <__aeabi_uldivmod>
 8011f74:	4602      	mov	r2, r0
 8011f76:	460b      	mov	r3, r1
 8011f78:	4613      	mov	r3, r2
 8011f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011f82:	d308      	bcc.n	8011f96 <UART_SetConfig+0x79a>
 8011f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011f8a:	d204      	bcs.n	8011f96 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011f8c:	697b      	ldr	r3, [r7, #20]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011f92:	60da      	str	r2, [r3, #12]
 8011f94:	e17c      	b.n	8012290 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8011f96:	2301      	movs	r3, #1
 8011f98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011f9c:	e178      	b.n	8012290 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011f9e:	697b      	ldr	r3, [r7, #20]
 8011fa0:	69db      	ldr	r3, [r3, #28]
 8011fa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011fa6:	f040 80c5 	bne.w	8012134 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8011faa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011fae:	2b20      	cmp	r3, #32
 8011fb0:	dc48      	bgt.n	8012044 <UART_SetConfig+0x848>
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	db7b      	blt.n	80120ae <UART_SetConfig+0x8b2>
 8011fb6:	2b20      	cmp	r3, #32
 8011fb8:	d879      	bhi.n	80120ae <UART_SetConfig+0x8b2>
 8011fba:	a201      	add	r2, pc, #4	@ (adr r2, 8011fc0 <UART_SetConfig+0x7c4>)
 8011fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fc0:	0801204b 	.word	0x0801204b
 8011fc4:	08012053 	.word	0x08012053
 8011fc8:	080120af 	.word	0x080120af
 8011fcc:	080120af 	.word	0x080120af
 8011fd0:	0801205b 	.word	0x0801205b
 8011fd4:	080120af 	.word	0x080120af
 8011fd8:	080120af 	.word	0x080120af
 8011fdc:	080120af 	.word	0x080120af
 8011fe0:	0801206b 	.word	0x0801206b
 8011fe4:	080120af 	.word	0x080120af
 8011fe8:	080120af 	.word	0x080120af
 8011fec:	080120af 	.word	0x080120af
 8011ff0:	080120af 	.word	0x080120af
 8011ff4:	080120af 	.word	0x080120af
 8011ff8:	080120af 	.word	0x080120af
 8011ffc:	080120af 	.word	0x080120af
 8012000:	0801207b 	.word	0x0801207b
 8012004:	080120af 	.word	0x080120af
 8012008:	080120af 	.word	0x080120af
 801200c:	080120af 	.word	0x080120af
 8012010:	080120af 	.word	0x080120af
 8012014:	080120af 	.word	0x080120af
 8012018:	080120af 	.word	0x080120af
 801201c:	080120af 	.word	0x080120af
 8012020:	080120af 	.word	0x080120af
 8012024:	080120af 	.word	0x080120af
 8012028:	080120af 	.word	0x080120af
 801202c:	080120af 	.word	0x080120af
 8012030:	080120af 	.word	0x080120af
 8012034:	080120af 	.word	0x080120af
 8012038:	080120af 	.word	0x080120af
 801203c:	080120af 	.word	0x080120af
 8012040:	080120a1 	.word	0x080120a1
 8012044:	2b40      	cmp	r3, #64	@ 0x40
 8012046:	d02e      	beq.n	80120a6 <UART_SetConfig+0x8aa>
 8012048:	e031      	b.n	80120ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801204a:	f7fb fc37 	bl	800d8bc <HAL_RCC_GetPCLK1Freq>
 801204e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012050:	e033      	b.n	80120ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012052:	f7fb fc49 	bl	800d8e8 <HAL_RCC_GetPCLK2Freq>
 8012056:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012058:	e02f      	b.n	80120ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801205a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801205e:	4618      	mov	r0, r3
 8012060:	f7fc fe78 	bl	800ed54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012068:	e027      	b.n	80120ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801206a:	f107 0318 	add.w	r3, r7, #24
 801206e:	4618      	mov	r0, r3
 8012070:	f7fc ffc4 	bl	800effc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012074:	69fb      	ldr	r3, [r7, #28]
 8012076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012078:	e01f      	b.n	80120ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801207a:	4b2d      	ldr	r3, [pc, #180]	@ (8012130 <UART_SetConfig+0x934>)
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	f003 0320 	and.w	r3, r3, #32
 8012082:	2b00      	cmp	r3, #0
 8012084:	d009      	beq.n	801209a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012086:	4b2a      	ldr	r3, [pc, #168]	@ (8012130 <UART_SetConfig+0x934>)
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	08db      	lsrs	r3, r3, #3
 801208c:	f003 0303 	and.w	r3, r3, #3
 8012090:	4a24      	ldr	r2, [pc, #144]	@ (8012124 <UART_SetConfig+0x928>)
 8012092:	fa22 f303 	lsr.w	r3, r2, r3
 8012096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012098:	e00f      	b.n	80120ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801209a:	4b22      	ldr	r3, [pc, #136]	@ (8012124 <UART_SetConfig+0x928>)
 801209c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801209e:	e00c      	b.n	80120ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80120a0:	4b21      	ldr	r3, [pc, #132]	@ (8012128 <UART_SetConfig+0x92c>)
 80120a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80120a4:	e009      	b.n	80120ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80120a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80120aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80120ac:	e005      	b.n	80120ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80120ae:	2300      	movs	r3, #0
 80120b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80120b2:	2301      	movs	r3, #1
 80120b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80120b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80120ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80120bc:	2b00      	cmp	r3, #0
 80120be:	f000 80e7 	beq.w	8012290 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80120c2:	697b      	ldr	r3, [r7, #20]
 80120c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120c6:	4a19      	ldr	r2, [pc, #100]	@ (801212c <UART_SetConfig+0x930>)
 80120c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80120cc:	461a      	mov	r2, r3
 80120ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80120d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80120d4:	005a      	lsls	r2, r3, #1
 80120d6:	697b      	ldr	r3, [r7, #20]
 80120d8:	685b      	ldr	r3, [r3, #4]
 80120da:	085b      	lsrs	r3, r3, #1
 80120dc:	441a      	add	r2, r3
 80120de:	697b      	ldr	r3, [r7, #20]
 80120e0:	685b      	ldr	r3, [r3, #4]
 80120e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80120e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80120e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120ea:	2b0f      	cmp	r3, #15
 80120ec:	d916      	bls.n	801211c <UART_SetConfig+0x920>
 80120ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80120f4:	d212      	bcs.n	801211c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80120f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120f8:	b29b      	uxth	r3, r3
 80120fa:	f023 030f 	bic.w	r3, r3, #15
 80120fe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012102:	085b      	lsrs	r3, r3, #1
 8012104:	b29b      	uxth	r3, r3
 8012106:	f003 0307 	and.w	r3, r3, #7
 801210a:	b29a      	uxth	r2, r3
 801210c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801210e:	4313      	orrs	r3, r2
 8012110:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8012112:	697b      	ldr	r3, [r7, #20]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8012118:	60da      	str	r2, [r3, #12]
 801211a:	e0b9      	b.n	8012290 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801211c:	2301      	movs	r3, #1
 801211e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012122:	e0b5      	b.n	8012290 <UART_SetConfig+0xa94>
 8012124:	03d09000 	.word	0x03d09000
 8012128:	003d0900 	.word	0x003d0900
 801212c:	08018098 	.word	0x08018098
 8012130:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8012134:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012138:	2b20      	cmp	r3, #32
 801213a:	dc49      	bgt.n	80121d0 <UART_SetConfig+0x9d4>
 801213c:	2b00      	cmp	r3, #0
 801213e:	db7c      	blt.n	801223a <UART_SetConfig+0xa3e>
 8012140:	2b20      	cmp	r3, #32
 8012142:	d87a      	bhi.n	801223a <UART_SetConfig+0xa3e>
 8012144:	a201      	add	r2, pc, #4	@ (adr r2, 801214c <UART_SetConfig+0x950>)
 8012146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801214a:	bf00      	nop
 801214c:	080121d7 	.word	0x080121d7
 8012150:	080121df 	.word	0x080121df
 8012154:	0801223b 	.word	0x0801223b
 8012158:	0801223b 	.word	0x0801223b
 801215c:	080121e7 	.word	0x080121e7
 8012160:	0801223b 	.word	0x0801223b
 8012164:	0801223b 	.word	0x0801223b
 8012168:	0801223b 	.word	0x0801223b
 801216c:	080121f7 	.word	0x080121f7
 8012170:	0801223b 	.word	0x0801223b
 8012174:	0801223b 	.word	0x0801223b
 8012178:	0801223b 	.word	0x0801223b
 801217c:	0801223b 	.word	0x0801223b
 8012180:	0801223b 	.word	0x0801223b
 8012184:	0801223b 	.word	0x0801223b
 8012188:	0801223b 	.word	0x0801223b
 801218c:	08012207 	.word	0x08012207
 8012190:	0801223b 	.word	0x0801223b
 8012194:	0801223b 	.word	0x0801223b
 8012198:	0801223b 	.word	0x0801223b
 801219c:	0801223b 	.word	0x0801223b
 80121a0:	0801223b 	.word	0x0801223b
 80121a4:	0801223b 	.word	0x0801223b
 80121a8:	0801223b 	.word	0x0801223b
 80121ac:	0801223b 	.word	0x0801223b
 80121b0:	0801223b 	.word	0x0801223b
 80121b4:	0801223b 	.word	0x0801223b
 80121b8:	0801223b 	.word	0x0801223b
 80121bc:	0801223b 	.word	0x0801223b
 80121c0:	0801223b 	.word	0x0801223b
 80121c4:	0801223b 	.word	0x0801223b
 80121c8:	0801223b 	.word	0x0801223b
 80121cc:	0801222d 	.word	0x0801222d
 80121d0:	2b40      	cmp	r3, #64	@ 0x40
 80121d2:	d02e      	beq.n	8012232 <UART_SetConfig+0xa36>
 80121d4:	e031      	b.n	801223a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80121d6:	f7fb fb71 	bl	800d8bc <HAL_RCC_GetPCLK1Freq>
 80121da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80121dc:	e033      	b.n	8012246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80121de:	f7fb fb83 	bl	800d8e8 <HAL_RCC_GetPCLK2Freq>
 80121e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80121e4:	e02f      	b.n	8012246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80121e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80121ea:	4618      	mov	r0, r3
 80121ec:	f7fc fdb2 	bl	800ed54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80121f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80121f4:	e027      	b.n	8012246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80121f6:	f107 0318 	add.w	r3, r7, #24
 80121fa:	4618      	mov	r0, r3
 80121fc:	f7fc fefe 	bl	800effc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012200:	69fb      	ldr	r3, [r7, #28]
 8012202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012204:	e01f      	b.n	8012246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012206:	4b2d      	ldr	r3, [pc, #180]	@ (80122bc <UART_SetConfig+0xac0>)
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	f003 0320 	and.w	r3, r3, #32
 801220e:	2b00      	cmp	r3, #0
 8012210:	d009      	beq.n	8012226 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012212:	4b2a      	ldr	r3, [pc, #168]	@ (80122bc <UART_SetConfig+0xac0>)
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	08db      	lsrs	r3, r3, #3
 8012218:	f003 0303 	and.w	r3, r3, #3
 801221c:	4a28      	ldr	r2, [pc, #160]	@ (80122c0 <UART_SetConfig+0xac4>)
 801221e:	fa22 f303 	lsr.w	r3, r2, r3
 8012222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012224:	e00f      	b.n	8012246 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8012226:	4b26      	ldr	r3, [pc, #152]	@ (80122c0 <UART_SetConfig+0xac4>)
 8012228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801222a:	e00c      	b.n	8012246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801222c:	4b25      	ldr	r3, [pc, #148]	@ (80122c4 <UART_SetConfig+0xac8>)
 801222e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012230:	e009      	b.n	8012246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012238:	e005      	b.n	8012246 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801223a:	2300      	movs	r3, #0
 801223c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801223e:	2301      	movs	r3, #1
 8012240:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012244:	bf00      	nop
    }

    if (pclk != 0U)
 8012246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012248:	2b00      	cmp	r3, #0
 801224a:	d021      	beq.n	8012290 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801224c:	697b      	ldr	r3, [r7, #20]
 801224e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012250:	4a1d      	ldr	r2, [pc, #116]	@ (80122c8 <UART_SetConfig+0xacc>)
 8012252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012256:	461a      	mov	r2, r3
 8012258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801225a:	fbb3 f2f2 	udiv	r2, r3, r2
 801225e:	697b      	ldr	r3, [r7, #20]
 8012260:	685b      	ldr	r3, [r3, #4]
 8012262:	085b      	lsrs	r3, r3, #1
 8012264:	441a      	add	r2, r3
 8012266:	697b      	ldr	r3, [r7, #20]
 8012268:	685b      	ldr	r3, [r3, #4]
 801226a:	fbb2 f3f3 	udiv	r3, r2, r3
 801226e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012272:	2b0f      	cmp	r3, #15
 8012274:	d909      	bls.n	801228a <UART_SetConfig+0xa8e>
 8012276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801227c:	d205      	bcs.n	801228a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801227e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012280:	b29a      	uxth	r2, r3
 8012282:	697b      	ldr	r3, [r7, #20]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	60da      	str	r2, [r3, #12]
 8012288:	e002      	b.n	8012290 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801228a:	2301      	movs	r3, #1
 801228c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012290:	697b      	ldr	r3, [r7, #20]
 8012292:	2201      	movs	r2, #1
 8012294:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8012298:	697b      	ldr	r3, [r7, #20]
 801229a:	2201      	movs	r2, #1
 801229c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80122a0:	697b      	ldr	r3, [r7, #20]
 80122a2:	2200      	movs	r2, #0
 80122a4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	2200      	movs	r2, #0
 80122aa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80122ac:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	3748      	adds	r7, #72	@ 0x48
 80122b4:	46bd      	mov	sp, r7
 80122b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80122ba:	bf00      	nop
 80122bc:	58024400 	.word	0x58024400
 80122c0:	03d09000 	.word	0x03d09000
 80122c4:	003d0900 	.word	0x003d0900
 80122c8:	08018098 	.word	0x08018098

080122cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80122cc:	b480      	push	{r7}
 80122ce:	b083      	sub	sp, #12
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80122d8:	f003 0308 	and.w	r3, r3, #8
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d00a      	beq.n	80122f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	685b      	ldr	r3, [r3, #4]
 80122e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	430a      	orrs	r2, r1
 80122f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80122fa:	f003 0301 	and.w	r3, r3, #1
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d00a      	beq.n	8012318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	685b      	ldr	r3, [r3, #4]
 8012308:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	430a      	orrs	r2, r1
 8012316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801231c:	f003 0302 	and.w	r3, r3, #2
 8012320:	2b00      	cmp	r3, #0
 8012322:	d00a      	beq.n	801233a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	685b      	ldr	r3, [r3, #4]
 801232a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	430a      	orrs	r2, r1
 8012338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801233e:	f003 0304 	and.w	r3, r3, #4
 8012342:	2b00      	cmp	r3, #0
 8012344:	d00a      	beq.n	801235c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	685b      	ldr	r3, [r3, #4]
 801234c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	430a      	orrs	r2, r1
 801235a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012360:	f003 0310 	and.w	r3, r3, #16
 8012364:	2b00      	cmp	r3, #0
 8012366:	d00a      	beq.n	801237e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	689b      	ldr	r3, [r3, #8]
 801236e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	430a      	orrs	r2, r1
 801237c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012382:	f003 0320 	and.w	r3, r3, #32
 8012386:	2b00      	cmp	r3, #0
 8012388:	d00a      	beq.n	80123a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	689b      	ldr	r3, [r3, #8]
 8012390:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	430a      	orrs	r2, r1
 801239e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d01a      	beq.n	80123e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	685b      	ldr	r3, [r3, #4]
 80123b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	430a      	orrs	r2, r1
 80123c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80123c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80123ca:	d10a      	bne.n	80123e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	685b      	ldr	r3, [r3, #4]
 80123d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	430a      	orrs	r2, r1
 80123e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d00a      	beq.n	8012404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	685b      	ldr	r3, [r3, #4]
 80123f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	430a      	orrs	r2, r1
 8012402:	605a      	str	r2, [r3, #4]
  }
}
 8012404:	bf00      	nop
 8012406:	370c      	adds	r7, #12
 8012408:	46bd      	mov	sp, r7
 801240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240e:	4770      	bx	lr

08012410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b098      	sub	sp, #96	@ 0x60
 8012414:	af02      	add	r7, sp, #8
 8012416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	2200      	movs	r2, #0
 801241c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012420:	f7f0 fc14 	bl	8002c4c <HAL_GetTick>
 8012424:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	f003 0308 	and.w	r3, r3, #8
 8012430:	2b08      	cmp	r3, #8
 8012432:	d12f      	bne.n	8012494 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012434:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012438:	9300      	str	r3, [sp, #0]
 801243a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801243c:	2200      	movs	r2, #0
 801243e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	f000 f88e 	bl	8012564 <UART_WaitOnFlagUntilTimeout>
 8012448:	4603      	mov	r3, r0
 801244a:	2b00      	cmp	r3, #0
 801244c:	d022      	beq.n	8012494 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012456:	e853 3f00 	ldrex	r3, [r3]
 801245a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801245c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801245e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012462:	653b      	str	r3, [r7, #80]	@ 0x50
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	461a      	mov	r2, r3
 801246a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801246c:	647b      	str	r3, [r7, #68]	@ 0x44
 801246e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012470:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012472:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012474:	e841 2300 	strex	r3, r2, [r1]
 8012478:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801247a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801247c:	2b00      	cmp	r3, #0
 801247e:	d1e6      	bne.n	801244e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	2220      	movs	r2, #32
 8012484:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2200      	movs	r2, #0
 801248c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012490:	2303      	movs	r3, #3
 8012492:	e063      	b.n	801255c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	f003 0304 	and.w	r3, r3, #4
 801249e:	2b04      	cmp	r3, #4
 80124a0:	d149      	bne.n	8012536 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80124a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80124a6:	9300      	str	r3, [sp, #0]
 80124a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80124aa:	2200      	movs	r2, #0
 80124ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80124b0:	6878      	ldr	r0, [r7, #4]
 80124b2:	f000 f857 	bl	8012564 <UART_WaitOnFlagUntilTimeout>
 80124b6:	4603      	mov	r3, r0
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d03c      	beq.n	8012536 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124c4:	e853 3f00 	ldrex	r3, [r3]
 80124c8:	623b      	str	r3, [r7, #32]
   return(result);
 80124ca:	6a3b      	ldr	r3, [r7, #32]
 80124cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80124d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	461a      	mov	r2, r3
 80124d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124da:	633b      	str	r3, [r7, #48]	@ 0x30
 80124dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80124e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80124e2:	e841 2300 	strex	r3, r2, [r1]
 80124e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80124e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d1e6      	bne.n	80124bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	3308      	adds	r3, #8
 80124f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124f6:	693b      	ldr	r3, [r7, #16]
 80124f8:	e853 3f00 	ldrex	r3, [r3]
 80124fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	f023 0301 	bic.w	r3, r3, #1
 8012504:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	3308      	adds	r3, #8
 801250c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801250e:	61fa      	str	r2, [r7, #28]
 8012510:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012512:	69b9      	ldr	r1, [r7, #24]
 8012514:	69fa      	ldr	r2, [r7, #28]
 8012516:	e841 2300 	strex	r3, r2, [r1]
 801251a:	617b      	str	r3, [r7, #20]
   return(result);
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d1e5      	bne.n	80124ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	2220      	movs	r2, #32
 8012526:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	2200      	movs	r2, #0
 801252e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012532:	2303      	movs	r3, #3
 8012534:	e012      	b.n	801255c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	2220      	movs	r2, #32
 801253a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	2220      	movs	r2, #32
 8012542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2200      	movs	r2, #0
 801254a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	2200      	movs	r2, #0
 8012550:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	2200      	movs	r2, #0
 8012556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801255a:	2300      	movs	r3, #0
}
 801255c:	4618      	mov	r0, r3
 801255e:	3758      	adds	r7, #88	@ 0x58
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}

08012564 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b084      	sub	sp, #16
 8012568:	af00      	add	r7, sp, #0
 801256a:	60f8      	str	r0, [r7, #12]
 801256c:	60b9      	str	r1, [r7, #8]
 801256e:	603b      	str	r3, [r7, #0]
 8012570:	4613      	mov	r3, r2
 8012572:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012574:	e04f      	b.n	8012616 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012576:	69bb      	ldr	r3, [r7, #24]
 8012578:	f1b3 3fff 	cmp.w	r3, #4294967295
 801257c:	d04b      	beq.n	8012616 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801257e:	f7f0 fb65 	bl	8002c4c <HAL_GetTick>
 8012582:	4602      	mov	r2, r0
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	1ad3      	subs	r3, r2, r3
 8012588:	69ba      	ldr	r2, [r7, #24]
 801258a:	429a      	cmp	r2, r3
 801258c:	d302      	bcc.n	8012594 <UART_WaitOnFlagUntilTimeout+0x30>
 801258e:	69bb      	ldr	r3, [r7, #24]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d101      	bne.n	8012598 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012594:	2303      	movs	r3, #3
 8012596:	e04e      	b.n	8012636 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	f003 0304 	and.w	r3, r3, #4
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d037      	beq.n	8012616 <UART_WaitOnFlagUntilTimeout+0xb2>
 80125a6:	68bb      	ldr	r3, [r7, #8]
 80125a8:	2b80      	cmp	r3, #128	@ 0x80
 80125aa:	d034      	beq.n	8012616 <UART_WaitOnFlagUntilTimeout+0xb2>
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	2b40      	cmp	r3, #64	@ 0x40
 80125b0:	d031      	beq.n	8012616 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	69db      	ldr	r3, [r3, #28]
 80125b8:	f003 0308 	and.w	r3, r3, #8
 80125bc:	2b08      	cmp	r3, #8
 80125be:	d110      	bne.n	80125e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	2208      	movs	r2, #8
 80125c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80125c8:	68f8      	ldr	r0, [r7, #12]
 80125ca:	f000 f921 	bl	8012810 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	2208      	movs	r2, #8
 80125d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	2200      	movs	r2, #0
 80125da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80125de:	2301      	movs	r3, #1
 80125e0:	e029      	b.n	8012636 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	69db      	ldr	r3, [r3, #28]
 80125e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80125ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80125f0:	d111      	bne.n	8012616 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80125fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80125fc:	68f8      	ldr	r0, [r7, #12]
 80125fe:	f000 f907 	bl	8012810 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	2220      	movs	r2, #32
 8012606:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	2200      	movs	r2, #0
 801260e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8012612:	2303      	movs	r3, #3
 8012614:	e00f      	b.n	8012636 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	69da      	ldr	r2, [r3, #28]
 801261c:	68bb      	ldr	r3, [r7, #8]
 801261e:	4013      	ands	r3, r2
 8012620:	68ba      	ldr	r2, [r7, #8]
 8012622:	429a      	cmp	r2, r3
 8012624:	bf0c      	ite	eq
 8012626:	2301      	moveq	r3, #1
 8012628:	2300      	movne	r3, #0
 801262a:	b2db      	uxtb	r3, r3
 801262c:	461a      	mov	r2, r3
 801262e:	79fb      	ldrb	r3, [r7, #7]
 8012630:	429a      	cmp	r2, r3
 8012632:	d0a0      	beq.n	8012576 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012634:	2300      	movs	r3, #0
}
 8012636:	4618      	mov	r0, r3
 8012638:	3710      	adds	r7, #16
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}
	...

08012640 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b096      	sub	sp, #88	@ 0x58
 8012644:	af00      	add	r7, sp, #0
 8012646:	60f8      	str	r0, [r7, #12]
 8012648:	60b9      	str	r1, [r7, #8]
 801264a:	4613      	mov	r3, r2
 801264c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	68ba      	ldr	r2, [r7, #8]
 8012652:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	88fa      	ldrh	r2, [r7, #6]
 8012658:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	2200      	movs	r2, #0
 8012660:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	2222      	movs	r2, #34	@ 0x22
 8012668:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012672:	2b00      	cmp	r3, #0
 8012674:	d02d      	beq.n	80126d2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801267c:	4a40      	ldr	r2, [pc, #256]	@ (8012780 <UART_Start_Receive_DMA+0x140>)
 801267e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012686:	4a3f      	ldr	r2, [pc, #252]	@ (8012784 <UART_Start_Receive_DMA+0x144>)
 8012688:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012690:	4a3d      	ldr	r2, [pc, #244]	@ (8012788 <UART_Start_Receive_DMA+0x148>)
 8012692:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801269a:	2200      	movs	r2, #0
 801269c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	3324      	adds	r3, #36	@ 0x24
 80126aa:	4619      	mov	r1, r3
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80126b0:	461a      	mov	r2, r3
 80126b2:	88fb      	ldrh	r3, [r7, #6]
 80126b4:	f7f1 fad6 	bl	8003c64 <HAL_DMA_Start_IT>
 80126b8:	4603      	mov	r3, r0
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d009      	beq.n	80126d2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	2210      	movs	r2, #16
 80126c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	2220      	movs	r2, #32
 80126ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80126ce:	2301      	movs	r3, #1
 80126d0:	e051      	b.n	8012776 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	691b      	ldr	r3, [r3, #16]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d018      	beq.n	801270c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126e2:	e853 3f00 	ldrex	r3, [r3]
 80126e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80126e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80126ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	461a      	mov	r2, r3
 80126f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80126f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80126fa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80126fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012700:	e841 2300 	strex	r3, r2, [r1]
 8012704:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8012706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012708:	2b00      	cmp	r3, #0
 801270a:	d1e6      	bne.n	80126da <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	3308      	adds	r3, #8
 8012712:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012716:	e853 3f00 	ldrex	r3, [r3]
 801271a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801271e:	f043 0301 	orr.w	r3, r3, #1
 8012722:	653b      	str	r3, [r7, #80]	@ 0x50
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	3308      	adds	r3, #8
 801272a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801272c:	637a      	str	r2, [r7, #52]	@ 0x34
 801272e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012730:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012732:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012734:	e841 2300 	strex	r3, r2, [r1]
 8012738:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801273a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801273c:	2b00      	cmp	r3, #0
 801273e:	d1e5      	bne.n	801270c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	3308      	adds	r3, #8
 8012746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012748:	697b      	ldr	r3, [r7, #20]
 801274a:	e853 3f00 	ldrex	r3, [r3]
 801274e:	613b      	str	r3, [r7, #16]
   return(result);
 8012750:	693b      	ldr	r3, [r7, #16]
 8012752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	3308      	adds	r3, #8
 801275e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012760:	623a      	str	r2, [r7, #32]
 8012762:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012764:	69f9      	ldr	r1, [r7, #28]
 8012766:	6a3a      	ldr	r2, [r7, #32]
 8012768:	e841 2300 	strex	r3, r2, [r1]
 801276c:	61bb      	str	r3, [r7, #24]
   return(result);
 801276e:	69bb      	ldr	r3, [r7, #24]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d1e5      	bne.n	8012740 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8012774:	2300      	movs	r3, #0
}
 8012776:	4618      	mov	r0, r3
 8012778:	3758      	adds	r7, #88	@ 0x58
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}
 801277e:	bf00      	nop
 8012780:	080128dd 	.word	0x080128dd
 8012784:	08012a05 	.word	0x08012a05
 8012788:	08012a43 	.word	0x08012a43

0801278c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801278c:	b480      	push	{r7}
 801278e:	b08f      	sub	sp, #60	@ 0x3c
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801279a:	6a3b      	ldr	r3, [r7, #32]
 801279c:	e853 3f00 	ldrex	r3, [r3]
 80127a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80127a2:	69fb      	ldr	r3, [r7, #28]
 80127a4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80127a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	461a      	mov	r2, r3
 80127b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80127b4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80127b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80127ba:	e841 2300 	strex	r3, r2, [r1]
 80127be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80127c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d1e6      	bne.n	8012794 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	3308      	adds	r3, #8
 80127cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	e853 3f00 	ldrex	r3, [r3]
 80127d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80127d6:	68bb      	ldr	r3, [r7, #8]
 80127d8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80127dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	3308      	adds	r3, #8
 80127e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80127e6:	61ba      	str	r2, [r7, #24]
 80127e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127ea:	6979      	ldr	r1, [r7, #20]
 80127ec:	69ba      	ldr	r2, [r7, #24]
 80127ee:	e841 2300 	strex	r3, r2, [r1]
 80127f2:	613b      	str	r3, [r7, #16]
   return(result);
 80127f4:	693b      	ldr	r3, [r7, #16]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d1e5      	bne.n	80127c6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	2220      	movs	r2, #32
 80127fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8012802:	bf00      	nop
 8012804:	373c      	adds	r7, #60	@ 0x3c
 8012806:	46bd      	mov	sp, r7
 8012808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280c:	4770      	bx	lr
	...

08012810 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012810:	b480      	push	{r7}
 8012812:	b095      	sub	sp, #84	@ 0x54
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801281e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012820:	e853 3f00 	ldrex	r3, [r3]
 8012824:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012828:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801282c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	461a      	mov	r2, r3
 8012834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012836:	643b      	str	r3, [r7, #64]	@ 0x40
 8012838:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801283a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801283c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801283e:	e841 2300 	strex	r3, r2, [r1]
 8012842:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012846:	2b00      	cmp	r3, #0
 8012848:	d1e6      	bne.n	8012818 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	3308      	adds	r3, #8
 8012850:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012852:	6a3b      	ldr	r3, [r7, #32]
 8012854:	e853 3f00 	ldrex	r3, [r3]
 8012858:	61fb      	str	r3, [r7, #28]
   return(result);
 801285a:	69fa      	ldr	r2, [r7, #28]
 801285c:	4b1e      	ldr	r3, [pc, #120]	@ (80128d8 <UART_EndRxTransfer+0xc8>)
 801285e:	4013      	ands	r3, r2
 8012860:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	3308      	adds	r3, #8
 8012868:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801286a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801286c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801286e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012872:	e841 2300 	strex	r3, r2, [r1]
 8012876:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801287a:	2b00      	cmp	r3, #0
 801287c:	d1e5      	bne.n	801284a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012882:	2b01      	cmp	r3, #1
 8012884:	d118      	bne.n	80128b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	e853 3f00 	ldrex	r3, [r3]
 8012892:	60bb      	str	r3, [r7, #8]
   return(result);
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	f023 0310 	bic.w	r3, r3, #16
 801289a:	647b      	str	r3, [r7, #68]	@ 0x44
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	461a      	mov	r2, r3
 80128a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80128a4:	61bb      	str	r3, [r7, #24]
 80128a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128a8:	6979      	ldr	r1, [r7, #20]
 80128aa:	69ba      	ldr	r2, [r7, #24]
 80128ac:	e841 2300 	strex	r3, r2, [r1]
 80128b0:	613b      	str	r3, [r7, #16]
   return(result);
 80128b2:	693b      	ldr	r3, [r7, #16]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d1e6      	bne.n	8012886 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	2220      	movs	r2, #32
 80128bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	2200      	movs	r2, #0
 80128c4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	2200      	movs	r2, #0
 80128ca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80128cc:	bf00      	nop
 80128ce:	3754      	adds	r7, #84	@ 0x54
 80128d0:	46bd      	mov	sp, r7
 80128d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d6:	4770      	bx	lr
 80128d8:	effffffe 	.word	0xeffffffe

080128dc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b09c      	sub	sp, #112	@ 0x70
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80128e8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	69db      	ldr	r3, [r3, #28]
 80128ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80128f2:	d071      	beq.n	80129d8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80128f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80128f6:	2200      	movs	r2, #0
 80128f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80128fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012904:	e853 3f00 	ldrex	r3, [r3]
 8012908:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801290a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801290c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012910:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012912:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	461a      	mov	r2, r3
 8012918:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801291a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801291c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801291e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012920:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012922:	e841 2300 	strex	r3, r2, [r1]
 8012926:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801292a:	2b00      	cmp	r3, #0
 801292c:	d1e6      	bne.n	80128fc <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801292e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	3308      	adds	r3, #8
 8012934:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012938:	e853 3f00 	ldrex	r3, [r3]
 801293c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801293e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012940:	f023 0301 	bic.w	r3, r3, #1
 8012944:	667b      	str	r3, [r7, #100]	@ 0x64
 8012946:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	3308      	adds	r3, #8
 801294c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801294e:	647a      	str	r2, [r7, #68]	@ 0x44
 8012950:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012952:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012954:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012956:	e841 2300 	strex	r3, r2, [r1]
 801295a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801295c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801295e:	2b00      	cmp	r3, #0
 8012960:	d1e5      	bne.n	801292e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012962:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	3308      	adds	r3, #8
 8012968:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801296c:	e853 3f00 	ldrex	r3, [r3]
 8012970:	623b      	str	r3, [r7, #32]
   return(result);
 8012972:	6a3b      	ldr	r3, [r7, #32]
 8012974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012978:	663b      	str	r3, [r7, #96]	@ 0x60
 801297a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	3308      	adds	r3, #8
 8012980:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012982:	633a      	str	r2, [r7, #48]	@ 0x30
 8012984:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012986:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012988:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801298a:	e841 2300 	strex	r3, r2, [r1]
 801298e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012992:	2b00      	cmp	r3, #0
 8012994:	d1e5      	bne.n	8012962 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012996:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012998:	2220      	movs	r2, #32
 801299a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801299e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80129a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80129a2:	2b01      	cmp	r3, #1
 80129a4:	d118      	bne.n	80129d8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80129a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129ac:	693b      	ldr	r3, [r7, #16]
 80129ae:	e853 3f00 	ldrex	r3, [r3]
 80129b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	f023 0310 	bic.w	r3, r3, #16
 80129ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80129bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	461a      	mov	r2, r3
 80129c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80129c4:	61fb      	str	r3, [r7, #28]
 80129c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129c8:	69b9      	ldr	r1, [r7, #24]
 80129ca:	69fa      	ldr	r2, [r7, #28]
 80129cc:	e841 2300 	strex	r3, r2, [r1]
 80129d0:	617b      	str	r3, [r7, #20]
   return(result);
 80129d2:	697b      	ldr	r3, [r7, #20]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d1e6      	bne.n	80129a6 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80129d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80129da:	2200      	movs	r2, #0
 80129dc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80129de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80129e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80129e2:	2b01      	cmp	r3, #1
 80129e4:	d107      	bne.n	80129f6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80129e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80129e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80129ec:	4619      	mov	r1, r3
 80129ee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80129f0:	f7fe fef8 	bl	80117e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80129f4:	e002      	b.n	80129fc <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80129f6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80129f8:	f7ee ff08 	bl	800180c <HAL_UART_RxCpltCallback>
}
 80129fc:	bf00      	nop
 80129fe:	3770      	adds	r7, #112	@ 0x70
 8012a00:	46bd      	mov	sp, r7
 8012a02:	bd80      	pop	{r7, pc}

08012a04 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b084      	sub	sp, #16
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a10:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	2201      	movs	r2, #1
 8012a16:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a1c:	2b01      	cmp	r3, #1
 8012a1e:	d109      	bne.n	8012a34 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012a26:	085b      	lsrs	r3, r3, #1
 8012a28:	b29b      	uxth	r3, r3
 8012a2a:	4619      	mov	r1, r3
 8012a2c:	68f8      	ldr	r0, [r7, #12]
 8012a2e:	f7fe fed9 	bl	80117e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012a32:	e002      	b.n	8012a3a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8012a34:	68f8      	ldr	r0, [r7, #12]
 8012a36:	f7fe fec1 	bl	80117bc <HAL_UART_RxHalfCpltCallback>
}
 8012a3a:	bf00      	nop
 8012a3c:	3710      	adds	r7, #16
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	bd80      	pop	{r7, pc}

08012a42 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012a42:	b580      	push	{r7, lr}
 8012a44:	b086      	sub	sp, #24
 8012a46:	af00      	add	r7, sp, #0
 8012a48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a4e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012a56:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012a5e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8012a60:	697b      	ldr	r3, [r7, #20]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	689b      	ldr	r3, [r3, #8]
 8012a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012a6a:	2b80      	cmp	r3, #128	@ 0x80
 8012a6c:	d109      	bne.n	8012a82 <UART_DMAError+0x40>
 8012a6e:	693b      	ldr	r3, [r7, #16]
 8012a70:	2b21      	cmp	r3, #33	@ 0x21
 8012a72:	d106      	bne.n	8012a82 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8012a74:	697b      	ldr	r3, [r7, #20]
 8012a76:	2200      	movs	r2, #0
 8012a78:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8012a7c:	6978      	ldr	r0, [r7, #20]
 8012a7e:	f7ff fe85 	bl	801278c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8012a82:	697b      	ldr	r3, [r7, #20]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	689b      	ldr	r3, [r3, #8]
 8012a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012a8c:	2b40      	cmp	r3, #64	@ 0x40
 8012a8e:	d109      	bne.n	8012aa4 <UART_DMAError+0x62>
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	2b22      	cmp	r3, #34	@ 0x22
 8012a94:	d106      	bne.n	8012aa4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	2200      	movs	r2, #0
 8012a9a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8012a9e:	6978      	ldr	r0, [r7, #20]
 8012aa0:	f7ff feb6 	bl	8012810 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012aaa:	f043 0210 	orr.w	r2, r3, #16
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012ab4:	6978      	ldr	r0, [r7, #20]
 8012ab6:	f7fe fe8b 	bl	80117d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012aba:	bf00      	nop
 8012abc:	3718      	adds	r7, #24
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bd80      	pop	{r7, pc}

08012ac2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012ac2:	b580      	push	{r7, lr}
 8012ac4:	b084      	sub	sp, #16
 8012ac6:	af00      	add	r7, sp, #0
 8012ac8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ace:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012ad8:	68f8      	ldr	r0, [r7, #12]
 8012ada:	f7fe fe79 	bl	80117d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012ade:	bf00      	nop
 8012ae0:	3710      	adds	r7, #16
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	bd80      	pop	{r7, pc}

08012ae6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012ae6:	b580      	push	{r7, lr}
 8012ae8:	b088      	sub	sp, #32
 8012aea:	af00      	add	r7, sp, #0
 8012aec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	e853 3f00 	ldrex	r3, [r3]
 8012afa:	60bb      	str	r3, [r7, #8]
   return(result);
 8012afc:	68bb      	ldr	r3, [r7, #8]
 8012afe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012b02:	61fb      	str	r3, [r7, #28]
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	461a      	mov	r2, r3
 8012b0a:	69fb      	ldr	r3, [r7, #28]
 8012b0c:	61bb      	str	r3, [r7, #24]
 8012b0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b10:	6979      	ldr	r1, [r7, #20]
 8012b12:	69ba      	ldr	r2, [r7, #24]
 8012b14:	e841 2300 	strex	r3, r2, [r1]
 8012b18:	613b      	str	r3, [r7, #16]
   return(result);
 8012b1a:	693b      	ldr	r3, [r7, #16]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d1e6      	bne.n	8012aee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2220      	movs	r2, #32
 8012b24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012b2e:	6878      	ldr	r0, [r7, #4]
 8012b30:	f7fe fe3a 	bl	80117a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012b34:	bf00      	nop
 8012b36:	3720      	adds	r7, #32
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bd80      	pop	{r7, pc}

08012b3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012b3c:	b480      	push	{r7}
 8012b3e:	b083      	sub	sp, #12
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012b44:	bf00      	nop
 8012b46:	370c      	adds	r7, #12
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b4e:	4770      	bx	lr

08012b50 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012b50:	b480      	push	{r7}
 8012b52:	b083      	sub	sp, #12
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012b58:	bf00      	nop
 8012b5a:	370c      	adds	r7, #12
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b62:	4770      	bx	lr

08012b64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012b64:	b480      	push	{r7}
 8012b66:	b083      	sub	sp, #12
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012b6c:	bf00      	nop
 8012b6e:	370c      	adds	r7, #12
 8012b70:	46bd      	mov	sp, r7
 8012b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b76:	4770      	bx	lr

08012b78 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b084      	sub	sp, #16
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012b86:	2b01      	cmp	r3, #1
 8012b88:	d101      	bne.n	8012b8e <HAL_UARTEx_EnableFifoMode+0x16>
 8012b8a:	2302      	movs	r3, #2
 8012b8c:	e02b      	b.n	8012be6 <HAL_UARTEx_EnableFifoMode+0x6e>
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2201      	movs	r2, #1
 8012b92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	2224      	movs	r2, #36	@ 0x24
 8012b9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	681a      	ldr	r2, [r3, #0]
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	f022 0201 	bic.w	r2, r2, #1
 8012bb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012bbc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8012bc4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	68fa      	ldr	r2, [r7, #12]
 8012bcc:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	f000 f88a 	bl	8012ce8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2220      	movs	r2, #32
 8012bd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2200      	movs	r2, #0
 8012be0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012be4:	2300      	movs	r3, #0
}
 8012be6:	4618      	mov	r0, r3
 8012be8:	3710      	adds	r7, #16
 8012bea:	46bd      	mov	sp, r7
 8012bec:	bd80      	pop	{r7, pc}

08012bee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012bee:	b580      	push	{r7, lr}
 8012bf0:	b084      	sub	sp, #16
 8012bf2:	af00      	add	r7, sp, #0
 8012bf4:	6078      	str	r0, [r7, #4]
 8012bf6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012bfe:	2b01      	cmp	r3, #1
 8012c00:	d101      	bne.n	8012c06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012c02:	2302      	movs	r3, #2
 8012c04:	e02d      	b.n	8012c62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	2201      	movs	r2, #1
 8012c0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	2224      	movs	r2, #36	@ 0x24
 8012c12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	681a      	ldr	r2, [r3, #0]
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	f022 0201 	bic.w	r2, r2, #1
 8012c2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	689b      	ldr	r3, [r3, #8]
 8012c34:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	683a      	ldr	r2, [r7, #0]
 8012c3e:	430a      	orrs	r2, r1
 8012c40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012c42:	6878      	ldr	r0, [r7, #4]
 8012c44:	f000 f850 	bl	8012ce8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	68fa      	ldr	r2, [r7, #12]
 8012c4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	2220      	movs	r2, #32
 8012c54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012c60:	2300      	movs	r3, #0
}
 8012c62:	4618      	mov	r0, r3
 8012c64:	3710      	adds	r7, #16
 8012c66:	46bd      	mov	sp, r7
 8012c68:	bd80      	pop	{r7, pc}

08012c6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012c6a:	b580      	push	{r7, lr}
 8012c6c:	b084      	sub	sp, #16
 8012c6e:	af00      	add	r7, sp, #0
 8012c70:	6078      	str	r0, [r7, #4]
 8012c72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012c7a:	2b01      	cmp	r3, #1
 8012c7c:	d101      	bne.n	8012c82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012c7e:	2302      	movs	r3, #2
 8012c80:	e02d      	b.n	8012cde <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	2201      	movs	r2, #1
 8012c86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	2224      	movs	r2, #36	@ 0x24
 8012c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	681a      	ldr	r2, [r3, #0]
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	f022 0201 	bic.w	r2, r2, #1
 8012ca8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	689b      	ldr	r3, [r3, #8]
 8012cb0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	683a      	ldr	r2, [r7, #0]
 8012cba:	430a      	orrs	r2, r1
 8012cbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012cbe:	6878      	ldr	r0, [r7, #4]
 8012cc0:	f000 f812 	bl	8012ce8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	68fa      	ldr	r2, [r7, #12]
 8012cca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	2220      	movs	r2, #32
 8012cd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012cdc:	2300      	movs	r3, #0
}
 8012cde:	4618      	mov	r0, r3
 8012ce0:	3710      	adds	r7, #16
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}
	...

08012ce8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012ce8:	b480      	push	{r7}
 8012cea:	b085      	sub	sp, #20
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d108      	bne.n	8012d0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2201      	movs	r2, #1
 8012cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2201      	movs	r2, #1
 8012d04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012d08:	e031      	b.n	8012d6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012d0a:	2310      	movs	r3, #16
 8012d0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012d0e:	2310      	movs	r3, #16
 8012d10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	689b      	ldr	r3, [r3, #8]
 8012d18:	0e5b      	lsrs	r3, r3, #25
 8012d1a:	b2db      	uxtb	r3, r3
 8012d1c:	f003 0307 	and.w	r3, r3, #7
 8012d20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	689b      	ldr	r3, [r3, #8]
 8012d28:	0f5b      	lsrs	r3, r3, #29
 8012d2a:	b2db      	uxtb	r3, r3
 8012d2c:	f003 0307 	and.w	r3, r3, #7
 8012d30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012d32:	7bbb      	ldrb	r3, [r7, #14]
 8012d34:	7b3a      	ldrb	r2, [r7, #12]
 8012d36:	4911      	ldr	r1, [pc, #68]	@ (8012d7c <UARTEx_SetNbDataToProcess+0x94>)
 8012d38:	5c8a      	ldrb	r2, [r1, r2]
 8012d3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012d3e:	7b3a      	ldrb	r2, [r7, #12]
 8012d40:	490f      	ldr	r1, [pc, #60]	@ (8012d80 <UARTEx_SetNbDataToProcess+0x98>)
 8012d42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012d44:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d48:	b29a      	uxth	r2, r3
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012d50:	7bfb      	ldrb	r3, [r7, #15]
 8012d52:	7b7a      	ldrb	r2, [r7, #13]
 8012d54:	4909      	ldr	r1, [pc, #36]	@ (8012d7c <UARTEx_SetNbDataToProcess+0x94>)
 8012d56:	5c8a      	ldrb	r2, [r1, r2]
 8012d58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012d5c:	7b7a      	ldrb	r2, [r7, #13]
 8012d5e:	4908      	ldr	r1, [pc, #32]	@ (8012d80 <UARTEx_SetNbDataToProcess+0x98>)
 8012d60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012d62:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d66:	b29a      	uxth	r2, r3
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8012d6e:	bf00      	nop
 8012d70:	3714      	adds	r7, #20
 8012d72:	46bd      	mov	sp, r7
 8012d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d78:	4770      	bx	lr
 8012d7a:	bf00      	nop
 8012d7c:	080180b0 	.word	0x080180b0
 8012d80:	080180b8 	.word	0x080180b8

08012d84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012d84:	b084      	sub	sp, #16
 8012d86:	b580      	push	{r7, lr}
 8012d88:	b084      	sub	sp, #16
 8012d8a:	af00      	add	r7, sp, #0
 8012d8c:	6078      	str	r0, [r7, #4]
 8012d8e:	f107 001c 	add.w	r0, r7, #28
 8012d92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012d96:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8012d9a:	2b01      	cmp	r3, #1
 8012d9c:	d121      	bne.n	8012de2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012da2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	68da      	ldr	r2, [r3, #12]
 8012dae:	4b2c      	ldr	r3, [pc, #176]	@ (8012e60 <USB_CoreInit+0xdc>)
 8012db0:	4013      	ands	r3, r2
 8012db2:	687a      	ldr	r2, [r7, #4]
 8012db4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	68db      	ldr	r3, [r3, #12]
 8012dba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012dc2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012dc6:	2b01      	cmp	r3, #1
 8012dc8:	d105      	bne.n	8012dd6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	68db      	ldr	r3, [r3, #12]
 8012dce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012dd6:	6878      	ldr	r0, [r7, #4]
 8012dd8:	f001 fafa 	bl	80143d0 <USB_CoreReset>
 8012ddc:	4603      	mov	r3, r0
 8012dde:	73fb      	strb	r3, [r7, #15]
 8012de0:	e01b      	b.n	8012e1a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	68db      	ldr	r3, [r3, #12]
 8012de6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012dee:	6878      	ldr	r0, [r7, #4]
 8012df0:	f001 faee 	bl	80143d0 <USB_CoreReset>
 8012df4:	4603      	mov	r3, r0
 8012df6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012df8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d106      	bne.n	8012e0e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012e04:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8012e0c:	e005      	b.n	8012e1a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012e12:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012e1a:	7fbb      	ldrb	r3, [r7, #30]
 8012e1c:	2b01      	cmp	r3, #1
 8012e1e:	d116      	bne.n	8012e4e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012e24:	b29a      	uxth	r2, r3
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8012e64 <USB_CoreInit+0xe0>)
 8012e30:	4313      	orrs	r3, r2
 8012e32:	687a      	ldr	r2, [r7, #4]
 8012e34:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	689b      	ldr	r3, [r3, #8]
 8012e3a:	f043 0206 	orr.w	r2, r3, #6
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	689b      	ldr	r3, [r3, #8]
 8012e46:	f043 0220 	orr.w	r2, r3, #32
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e50:	4618      	mov	r0, r3
 8012e52:	3710      	adds	r7, #16
 8012e54:	46bd      	mov	sp, r7
 8012e56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012e5a:	b004      	add	sp, #16
 8012e5c:	4770      	bx	lr
 8012e5e:	bf00      	nop
 8012e60:	ffbdffbf 	.word	0xffbdffbf
 8012e64:	03ee0000 	.word	0x03ee0000

08012e68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012e68:	b480      	push	{r7}
 8012e6a:	b087      	sub	sp, #28
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	60f8      	str	r0, [r7, #12]
 8012e70:	60b9      	str	r1, [r7, #8]
 8012e72:	4613      	mov	r3, r2
 8012e74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012e76:	79fb      	ldrb	r3, [r7, #7]
 8012e78:	2b02      	cmp	r3, #2
 8012e7a:	d165      	bne.n	8012f48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012e7c:	68bb      	ldr	r3, [r7, #8]
 8012e7e:	4a41      	ldr	r2, [pc, #260]	@ (8012f84 <USB_SetTurnaroundTime+0x11c>)
 8012e80:	4293      	cmp	r3, r2
 8012e82:	d906      	bls.n	8012e92 <USB_SetTurnaroundTime+0x2a>
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	4a40      	ldr	r2, [pc, #256]	@ (8012f88 <USB_SetTurnaroundTime+0x120>)
 8012e88:	4293      	cmp	r3, r2
 8012e8a:	d202      	bcs.n	8012e92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012e8c:	230f      	movs	r3, #15
 8012e8e:	617b      	str	r3, [r7, #20]
 8012e90:	e062      	b.n	8012f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012e92:	68bb      	ldr	r3, [r7, #8]
 8012e94:	4a3c      	ldr	r2, [pc, #240]	@ (8012f88 <USB_SetTurnaroundTime+0x120>)
 8012e96:	4293      	cmp	r3, r2
 8012e98:	d306      	bcc.n	8012ea8 <USB_SetTurnaroundTime+0x40>
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	4a3b      	ldr	r2, [pc, #236]	@ (8012f8c <USB_SetTurnaroundTime+0x124>)
 8012e9e:	4293      	cmp	r3, r2
 8012ea0:	d202      	bcs.n	8012ea8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012ea2:	230e      	movs	r3, #14
 8012ea4:	617b      	str	r3, [r7, #20]
 8012ea6:	e057      	b.n	8012f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012ea8:	68bb      	ldr	r3, [r7, #8]
 8012eaa:	4a38      	ldr	r2, [pc, #224]	@ (8012f8c <USB_SetTurnaroundTime+0x124>)
 8012eac:	4293      	cmp	r3, r2
 8012eae:	d306      	bcc.n	8012ebe <USB_SetTurnaroundTime+0x56>
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	4a37      	ldr	r2, [pc, #220]	@ (8012f90 <USB_SetTurnaroundTime+0x128>)
 8012eb4:	4293      	cmp	r3, r2
 8012eb6:	d202      	bcs.n	8012ebe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012eb8:	230d      	movs	r3, #13
 8012eba:	617b      	str	r3, [r7, #20]
 8012ebc:	e04c      	b.n	8012f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012ebe:	68bb      	ldr	r3, [r7, #8]
 8012ec0:	4a33      	ldr	r2, [pc, #204]	@ (8012f90 <USB_SetTurnaroundTime+0x128>)
 8012ec2:	4293      	cmp	r3, r2
 8012ec4:	d306      	bcc.n	8012ed4 <USB_SetTurnaroundTime+0x6c>
 8012ec6:	68bb      	ldr	r3, [r7, #8]
 8012ec8:	4a32      	ldr	r2, [pc, #200]	@ (8012f94 <USB_SetTurnaroundTime+0x12c>)
 8012eca:	4293      	cmp	r3, r2
 8012ecc:	d802      	bhi.n	8012ed4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012ece:	230c      	movs	r3, #12
 8012ed0:	617b      	str	r3, [r7, #20]
 8012ed2:	e041      	b.n	8012f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	4a2f      	ldr	r2, [pc, #188]	@ (8012f94 <USB_SetTurnaroundTime+0x12c>)
 8012ed8:	4293      	cmp	r3, r2
 8012eda:	d906      	bls.n	8012eea <USB_SetTurnaroundTime+0x82>
 8012edc:	68bb      	ldr	r3, [r7, #8]
 8012ede:	4a2e      	ldr	r2, [pc, #184]	@ (8012f98 <USB_SetTurnaroundTime+0x130>)
 8012ee0:	4293      	cmp	r3, r2
 8012ee2:	d802      	bhi.n	8012eea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012ee4:	230b      	movs	r3, #11
 8012ee6:	617b      	str	r3, [r7, #20]
 8012ee8:	e036      	b.n	8012f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012eea:	68bb      	ldr	r3, [r7, #8]
 8012eec:	4a2a      	ldr	r2, [pc, #168]	@ (8012f98 <USB_SetTurnaroundTime+0x130>)
 8012eee:	4293      	cmp	r3, r2
 8012ef0:	d906      	bls.n	8012f00 <USB_SetTurnaroundTime+0x98>
 8012ef2:	68bb      	ldr	r3, [r7, #8]
 8012ef4:	4a29      	ldr	r2, [pc, #164]	@ (8012f9c <USB_SetTurnaroundTime+0x134>)
 8012ef6:	4293      	cmp	r3, r2
 8012ef8:	d802      	bhi.n	8012f00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012efa:	230a      	movs	r3, #10
 8012efc:	617b      	str	r3, [r7, #20]
 8012efe:	e02b      	b.n	8012f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	4a26      	ldr	r2, [pc, #152]	@ (8012f9c <USB_SetTurnaroundTime+0x134>)
 8012f04:	4293      	cmp	r3, r2
 8012f06:	d906      	bls.n	8012f16 <USB_SetTurnaroundTime+0xae>
 8012f08:	68bb      	ldr	r3, [r7, #8]
 8012f0a:	4a25      	ldr	r2, [pc, #148]	@ (8012fa0 <USB_SetTurnaroundTime+0x138>)
 8012f0c:	4293      	cmp	r3, r2
 8012f0e:	d202      	bcs.n	8012f16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012f10:	2309      	movs	r3, #9
 8012f12:	617b      	str	r3, [r7, #20]
 8012f14:	e020      	b.n	8012f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012f16:	68bb      	ldr	r3, [r7, #8]
 8012f18:	4a21      	ldr	r2, [pc, #132]	@ (8012fa0 <USB_SetTurnaroundTime+0x138>)
 8012f1a:	4293      	cmp	r3, r2
 8012f1c:	d306      	bcc.n	8012f2c <USB_SetTurnaroundTime+0xc4>
 8012f1e:	68bb      	ldr	r3, [r7, #8]
 8012f20:	4a20      	ldr	r2, [pc, #128]	@ (8012fa4 <USB_SetTurnaroundTime+0x13c>)
 8012f22:	4293      	cmp	r3, r2
 8012f24:	d802      	bhi.n	8012f2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012f26:	2308      	movs	r3, #8
 8012f28:	617b      	str	r3, [r7, #20]
 8012f2a:	e015      	b.n	8012f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8012fa4 <USB_SetTurnaroundTime+0x13c>)
 8012f30:	4293      	cmp	r3, r2
 8012f32:	d906      	bls.n	8012f42 <USB_SetTurnaroundTime+0xda>
 8012f34:	68bb      	ldr	r3, [r7, #8]
 8012f36:	4a1c      	ldr	r2, [pc, #112]	@ (8012fa8 <USB_SetTurnaroundTime+0x140>)
 8012f38:	4293      	cmp	r3, r2
 8012f3a:	d202      	bcs.n	8012f42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012f3c:	2307      	movs	r3, #7
 8012f3e:	617b      	str	r3, [r7, #20]
 8012f40:	e00a      	b.n	8012f58 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012f42:	2306      	movs	r3, #6
 8012f44:	617b      	str	r3, [r7, #20]
 8012f46:	e007      	b.n	8012f58 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012f48:	79fb      	ldrb	r3, [r7, #7]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d102      	bne.n	8012f54 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012f4e:	2309      	movs	r3, #9
 8012f50:	617b      	str	r3, [r7, #20]
 8012f52:	e001      	b.n	8012f58 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012f54:	2309      	movs	r3, #9
 8012f56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	68db      	ldr	r3, [r3, #12]
 8012f5c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	68da      	ldr	r2, [r3, #12]
 8012f68:	697b      	ldr	r3, [r7, #20]
 8012f6a:	029b      	lsls	r3, r3, #10
 8012f6c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8012f70:	431a      	orrs	r2, r3
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012f76:	2300      	movs	r3, #0
}
 8012f78:	4618      	mov	r0, r3
 8012f7a:	371c      	adds	r7, #28
 8012f7c:	46bd      	mov	sp, r7
 8012f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f82:	4770      	bx	lr
 8012f84:	00d8acbf 	.word	0x00d8acbf
 8012f88:	00e4e1c0 	.word	0x00e4e1c0
 8012f8c:	00f42400 	.word	0x00f42400
 8012f90:	01067380 	.word	0x01067380
 8012f94:	011a499f 	.word	0x011a499f
 8012f98:	01312cff 	.word	0x01312cff
 8012f9c:	014ca43f 	.word	0x014ca43f
 8012fa0:	016e3600 	.word	0x016e3600
 8012fa4:	01a6ab1f 	.word	0x01a6ab1f
 8012fa8:	01e84800 	.word	0x01e84800

08012fac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012fac:	b480      	push	{r7}
 8012fae:	b083      	sub	sp, #12
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	689b      	ldr	r3, [r3, #8]
 8012fb8:	f043 0201 	orr.w	r2, r3, #1
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012fc0:	2300      	movs	r3, #0
}
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	370c      	adds	r7, #12
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fcc:	4770      	bx	lr

08012fce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012fce:	b480      	push	{r7}
 8012fd0:	b083      	sub	sp, #12
 8012fd2:	af00      	add	r7, sp, #0
 8012fd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	689b      	ldr	r3, [r3, #8]
 8012fda:	f023 0201 	bic.w	r2, r3, #1
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012fe2:	2300      	movs	r3, #0
}
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	370c      	adds	r7, #12
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fee:	4770      	bx	lr

08012ff0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b084      	sub	sp, #16
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]
 8012ff8:	460b      	mov	r3, r1
 8012ffa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	68db      	ldr	r3, [r3, #12]
 8013004:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801300c:	78fb      	ldrb	r3, [r7, #3]
 801300e:	2b01      	cmp	r3, #1
 8013010:	d115      	bne.n	801303e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	68db      	ldr	r3, [r3, #12]
 8013016:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801301e:	200a      	movs	r0, #10
 8013020:	f7ef fe20 	bl	8002c64 <HAL_Delay>
      ms += 10U;
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	330a      	adds	r3, #10
 8013028:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801302a:	6878      	ldr	r0, [r7, #4]
 801302c:	f001 f93f 	bl	80142ae <USB_GetMode>
 8013030:	4603      	mov	r3, r0
 8013032:	2b01      	cmp	r3, #1
 8013034:	d01e      	beq.n	8013074 <USB_SetCurrentMode+0x84>
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	2bc7      	cmp	r3, #199	@ 0xc7
 801303a:	d9f0      	bls.n	801301e <USB_SetCurrentMode+0x2e>
 801303c:	e01a      	b.n	8013074 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801303e:	78fb      	ldrb	r3, [r7, #3]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d115      	bne.n	8013070 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	68db      	ldr	r3, [r3, #12]
 8013048:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8013050:	200a      	movs	r0, #10
 8013052:	f7ef fe07 	bl	8002c64 <HAL_Delay>
      ms += 10U;
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	330a      	adds	r3, #10
 801305a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801305c:	6878      	ldr	r0, [r7, #4]
 801305e:	f001 f926 	bl	80142ae <USB_GetMode>
 8013062:	4603      	mov	r3, r0
 8013064:	2b00      	cmp	r3, #0
 8013066:	d005      	beq.n	8013074 <USB_SetCurrentMode+0x84>
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	2bc7      	cmp	r3, #199	@ 0xc7
 801306c:	d9f0      	bls.n	8013050 <USB_SetCurrentMode+0x60>
 801306e:	e001      	b.n	8013074 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013070:	2301      	movs	r3, #1
 8013072:	e005      	b.n	8013080 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	2bc8      	cmp	r3, #200	@ 0xc8
 8013078:	d101      	bne.n	801307e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801307a:	2301      	movs	r3, #1
 801307c:	e000      	b.n	8013080 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801307e:	2300      	movs	r3, #0
}
 8013080:	4618      	mov	r0, r3
 8013082:	3710      	adds	r7, #16
 8013084:	46bd      	mov	sp, r7
 8013086:	bd80      	pop	{r7, pc}

08013088 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013088:	b084      	sub	sp, #16
 801308a:	b580      	push	{r7, lr}
 801308c:	b086      	sub	sp, #24
 801308e:	af00      	add	r7, sp, #0
 8013090:	6078      	str	r0, [r7, #4]
 8013092:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8013096:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801309a:	2300      	movs	r3, #0
 801309c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80130a2:	2300      	movs	r3, #0
 80130a4:	613b      	str	r3, [r7, #16]
 80130a6:	e009      	b.n	80130bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80130a8:	687a      	ldr	r2, [r7, #4]
 80130aa:	693b      	ldr	r3, [r7, #16]
 80130ac:	3340      	adds	r3, #64	@ 0x40
 80130ae:	009b      	lsls	r3, r3, #2
 80130b0:	4413      	add	r3, r2
 80130b2:	2200      	movs	r2, #0
 80130b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80130b6:	693b      	ldr	r3, [r7, #16]
 80130b8:	3301      	adds	r3, #1
 80130ba:	613b      	str	r3, [r7, #16]
 80130bc:	693b      	ldr	r3, [r7, #16]
 80130be:	2b0e      	cmp	r3, #14
 80130c0:	d9f2      	bls.n	80130a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80130c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d11c      	bne.n	8013104 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80130d0:	685b      	ldr	r3, [r3, #4]
 80130d2:	68fa      	ldr	r2, [r7, #12]
 80130d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80130d8:	f043 0302 	orr.w	r3, r3, #2
 80130dc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130e2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	601a      	str	r2, [r3, #0]
 8013102:	e005      	b.n	8013110 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013108:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013116:	461a      	mov	r2, r3
 8013118:	2300      	movs	r3, #0
 801311a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801311c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8013120:	2b01      	cmp	r3, #1
 8013122:	d10d      	bne.n	8013140 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013124:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013128:	2b00      	cmp	r3, #0
 801312a:	d104      	bne.n	8013136 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801312c:	2100      	movs	r1, #0
 801312e:	6878      	ldr	r0, [r7, #4]
 8013130:	f000 f968 	bl	8013404 <USB_SetDevSpeed>
 8013134:	e008      	b.n	8013148 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013136:	2101      	movs	r1, #1
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f000 f963 	bl	8013404 <USB_SetDevSpeed>
 801313e:	e003      	b.n	8013148 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013140:	2103      	movs	r1, #3
 8013142:	6878      	ldr	r0, [r7, #4]
 8013144:	f000 f95e 	bl	8013404 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013148:	2110      	movs	r1, #16
 801314a:	6878      	ldr	r0, [r7, #4]
 801314c:	f000 f8fa 	bl	8013344 <USB_FlushTxFifo>
 8013150:	4603      	mov	r3, r0
 8013152:	2b00      	cmp	r3, #0
 8013154:	d001      	beq.n	801315a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8013156:	2301      	movs	r3, #1
 8013158:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801315a:	6878      	ldr	r0, [r7, #4]
 801315c:	f000 f924 	bl	80133a8 <USB_FlushRxFifo>
 8013160:	4603      	mov	r3, r0
 8013162:	2b00      	cmp	r3, #0
 8013164:	d001      	beq.n	801316a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8013166:	2301      	movs	r3, #1
 8013168:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013170:	461a      	mov	r2, r3
 8013172:	2300      	movs	r3, #0
 8013174:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801317c:	461a      	mov	r2, r3
 801317e:	2300      	movs	r3, #0
 8013180:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013188:	461a      	mov	r2, r3
 801318a:	2300      	movs	r3, #0
 801318c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801318e:	2300      	movs	r3, #0
 8013190:	613b      	str	r3, [r7, #16]
 8013192:	e043      	b.n	801321c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013194:	693b      	ldr	r3, [r7, #16]
 8013196:	015a      	lsls	r2, r3, #5
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	4413      	add	r3, r2
 801319c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80131a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80131aa:	d118      	bne.n	80131de <USB_DevInit+0x156>
    {
      if (i == 0U)
 80131ac:	693b      	ldr	r3, [r7, #16]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d10a      	bne.n	80131c8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80131b2:	693b      	ldr	r3, [r7, #16]
 80131b4:	015a      	lsls	r2, r3, #5
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	4413      	add	r3, r2
 80131ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80131be:	461a      	mov	r2, r3
 80131c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80131c4:	6013      	str	r3, [r2, #0]
 80131c6:	e013      	b.n	80131f0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80131c8:	693b      	ldr	r3, [r7, #16]
 80131ca:	015a      	lsls	r2, r3, #5
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	4413      	add	r3, r2
 80131d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80131d4:	461a      	mov	r2, r3
 80131d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80131da:	6013      	str	r3, [r2, #0]
 80131dc:	e008      	b.n	80131f0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80131de:	693b      	ldr	r3, [r7, #16]
 80131e0:	015a      	lsls	r2, r3, #5
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	4413      	add	r3, r2
 80131e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80131ea:	461a      	mov	r2, r3
 80131ec:	2300      	movs	r3, #0
 80131ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80131f0:	693b      	ldr	r3, [r7, #16]
 80131f2:	015a      	lsls	r2, r3, #5
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	4413      	add	r3, r2
 80131f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80131fc:	461a      	mov	r2, r3
 80131fe:	2300      	movs	r3, #0
 8013200:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013202:	693b      	ldr	r3, [r7, #16]
 8013204:	015a      	lsls	r2, r3, #5
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	4413      	add	r3, r2
 801320a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801320e:	461a      	mov	r2, r3
 8013210:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8013214:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013216:	693b      	ldr	r3, [r7, #16]
 8013218:	3301      	adds	r3, #1
 801321a:	613b      	str	r3, [r7, #16]
 801321c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013220:	461a      	mov	r2, r3
 8013222:	693b      	ldr	r3, [r7, #16]
 8013224:	4293      	cmp	r3, r2
 8013226:	d3b5      	bcc.n	8013194 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013228:	2300      	movs	r3, #0
 801322a:	613b      	str	r3, [r7, #16]
 801322c:	e043      	b.n	80132b6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801322e:	693b      	ldr	r3, [r7, #16]
 8013230:	015a      	lsls	r2, r3, #5
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	4413      	add	r3, r2
 8013236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013240:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013244:	d118      	bne.n	8013278 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8013246:	693b      	ldr	r3, [r7, #16]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d10a      	bne.n	8013262 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801324c:	693b      	ldr	r3, [r7, #16]
 801324e:	015a      	lsls	r2, r3, #5
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	4413      	add	r3, r2
 8013254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013258:	461a      	mov	r2, r3
 801325a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801325e:	6013      	str	r3, [r2, #0]
 8013260:	e013      	b.n	801328a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013262:	693b      	ldr	r3, [r7, #16]
 8013264:	015a      	lsls	r2, r3, #5
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	4413      	add	r3, r2
 801326a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801326e:	461a      	mov	r2, r3
 8013270:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8013274:	6013      	str	r3, [r2, #0]
 8013276:	e008      	b.n	801328a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013278:	693b      	ldr	r3, [r7, #16]
 801327a:	015a      	lsls	r2, r3, #5
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	4413      	add	r3, r2
 8013280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013284:	461a      	mov	r2, r3
 8013286:	2300      	movs	r3, #0
 8013288:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801328a:	693b      	ldr	r3, [r7, #16]
 801328c:	015a      	lsls	r2, r3, #5
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	4413      	add	r3, r2
 8013292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013296:	461a      	mov	r2, r3
 8013298:	2300      	movs	r3, #0
 801329a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801329c:	693b      	ldr	r3, [r7, #16]
 801329e:	015a      	lsls	r2, r3, #5
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	4413      	add	r3, r2
 80132a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80132a8:	461a      	mov	r2, r3
 80132aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80132ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80132b0:	693b      	ldr	r3, [r7, #16]
 80132b2:	3301      	adds	r3, #1
 80132b4:	613b      	str	r3, [r7, #16]
 80132b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80132ba:	461a      	mov	r2, r3
 80132bc:	693b      	ldr	r3, [r7, #16]
 80132be:	4293      	cmp	r3, r2
 80132c0:	d3b5      	bcc.n	801322e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80132c8:	691b      	ldr	r3, [r3, #16]
 80132ca:	68fa      	ldr	r2, [r7, #12]
 80132cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80132d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80132d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	2200      	movs	r2, #0
 80132da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80132e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80132e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d105      	bne.n	80132f8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	699b      	ldr	r3, [r3, #24]
 80132f0:	f043 0210 	orr.w	r2, r3, #16
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	699a      	ldr	r2, [r3, #24]
 80132fc:	4b0f      	ldr	r3, [pc, #60]	@ (801333c <USB_DevInit+0x2b4>)
 80132fe:	4313      	orrs	r3, r2
 8013300:	687a      	ldr	r2, [r7, #4]
 8013302:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013304:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8013308:	2b00      	cmp	r3, #0
 801330a:	d005      	beq.n	8013318 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	699b      	ldr	r3, [r3, #24]
 8013310:	f043 0208 	orr.w	r2, r3, #8
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013318:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801331c:	2b01      	cmp	r3, #1
 801331e:	d105      	bne.n	801332c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	699a      	ldr	r2, [r3, #24]
 8013324:	4b06      	ldr	r3, [pc, #24]	@ (8013340 <USB_DevInit+0x2b8>)
 8013326:	4313      	orrs	r3, r2
 8013328:	687a      	ldr	r2, [r7, #4]
 801332a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801332c:	7dfb      	ldrb	r3, [r7, #23]
}
 801332e:	4618      	mov	r0, r3
 8013330:	3718      	adds	r7, #24
 8013332:	46bd      	mov	sp, r7
 8013334:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013338:	b004      	add	sp, #16
 801333a:	4770      	bx	lr
 801333c:	803c3800 	.word	0x803c3800
 8013340:	40000004 	.word	0x40000004

08013344 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013344:	b480      	push	{r7}
 8013346:	b085      	sub	sp, #20
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801334e:	2300      	movs	r3, #0
 8013350:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	3301      	adds	r3, #1
 8013356:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801335e:	d901      	bls.n	8013364 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013360:	2303      	movs	r3, #3
 8013362:	e01b      	b.n	801339c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	691b      	ldr	r3, [r3, #16]
 8013368:	2b00      	cmp	r3, #0
 801336a:	daf2      	bge.n	8013352 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801336c:	2300      	movs	r3, #0
 801336e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013370:	683b      	ldr	r3, [r7, #0]
 8013372:	019b      	lsls	r3, r3, #6
 8013374:	f043 0220 	orr.w	r2, r3, #32
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	3301      	adds	r3, #1
 8013380:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013388:	d901      	bls.n	801338e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801338a:	2303      	movs	r3, #3
 801338c:	e006      	b.n	801339c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	691b      	ldr	r3, [r3, #16]
 8013392:	f003 0320 	and.w	r3, r3, #32
 8013396:	2b20      	cmp	r3, #32
 8013398:	d0f0      	beq.n	801337c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801339a:	2300      	movs	r3, #0
}
 801339c:	4618      	mov	r0, r3
 801339e:	3714      	adds	r7, #20
 80133a0:	46bd      	mov	sp, r7
 80133a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a6:	4770      	bx	lr

080133a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80133a8:	b480      	push	{r7}
 80133aa:	b085      	sub	sp, #20
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80133b0:	2300      	movs	r3, #0
 80133b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	3301      	adds	r3, #1
 80133b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80133c0:	d901      	bls.n	80133c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80133c2:	2303      	movs	r3, #3
 80133c4:	e018      	b.n	80133f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	691b      	ldr	r3, [r3, #16]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	daf2      	bge.n	80133b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80133ce:	2300      	movs	r3, #0
 80133d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	2210      	movs	r2, #16
 80133d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	3301      	adds	r3, #1
 80133dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80133e4:	d901      	bls.n	80133ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80133e6:	2303      	movs	r3, #3
 80133e8:	e006      	b.n	80133f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	691b      	ldr	r3, [r3, #16]
 80133ee:	f003 0310 	and.w	r3, r3, #16
 80133f2:	2b10      	cmp	r3, #16
 80133f4:	d0f0      	beq.n	80133d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80133f6:	2300      	movs	r3, #0
}
 80133f8:	4618      	mov	r0, r3
 80133fa:	3714      	adds	r7, #20
 80133fc:	46bd      	mov	sp, r7
 80133fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013402:	4770      	bx	lr

08013404 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013404:	b480      	push	{r7}
 8013406:	b085      	sub	sp, #20
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
 801340c:	460b      	mov	r3, r1
 801340e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801341a:	681a      	ldr	r2, [r3, #0]
 801341c:	78fb      	ldrb	r3, [r7, #3]
 801341e:	68f9      	ldr	r1, [r7, #12]
 8013420:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013424:	4313      	orrs	r3, r2
 8013426:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013428:	2300      	movs	r3, #0
}
 801342a:	4618      	mov	r0, r3
 801342c:	3714      	adds	r7, #20
 801342e:	46bd      	mov	sp, r7
 8013430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013434:	4770      	bx	lr

08013436 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8013436:	b480      	push	{r7}
 8013438:	b087      	sub	sp, #28
 801343a:	af00      	add	r7, sp, #0
 801343c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013442:	693b      	ldr	r3, [r7, #16]
 8013444:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013448:	689b      	ldr	r3, [r3, #8]
 801344a:	f003 0306 	and.w	r3, r3, #6
 801344e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d102      	bne.n	801345c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013456:	2300      	movs	r3, #0
 8013458:	75fb      	strb	r3, [r7, #23]
 801345a:	e00a      	b.n	8013472 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	2b02      	cmp	r3, #2
 8013460:	d002      	beq.n	8013468 <USB_GetDevSpeed+0x32>
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	2b06      	cmp	r3, #6
 8013466:	d102      	bne.n	801346e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013468:	2302      	movs	r3, #2
 801346a:	75fb      	strb	r3, [r7, #23]
 801346c:	e001      	b.n	8013472 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801346e:	230f      	movs	r3, #15
 8013470:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013472:	7dfb      	ldrb	r3, [r7, #23]
}
 8013474:	4618      	mov	r0, r3
 8013476:	371c      	adds	r7, #28
 8013478:	46bd      	mov	sp, r7
 801347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347e:	4770      	bx	lr

08013480 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8013480:	b480      	push	{r7}
 8013482:	b085      	sub	sp, #20
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
 8013488:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801348e:	683b      	ldr	r3, [r7, #0]
 8013490:	781b      	ldrb	r3, [r3, #0]
 8013492:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013494:	683b      	ldr	r3, [r7, #0]
 8013496:	785b      	ldrb	r3, [r3, #1]
 8013498:	2b01      	cmp	r3, #1
 801349a:	d139      	bne.n	8013510 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80134a2:	69da      	ldr	r2, [r3, #28]
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	781b      	ldrb	r3, [r3, #0]
 80134a8:	f003 030f 	and.w	r3, r3, #15
 80134ac:	2101      	movs	r1, #1
 80134ae:	fa01 f303 	lsl.w	r3, r1, r3
 80134b2:	b29b      	uxth	r3, r3
 80134b4:	68f9      	ldr	r1, [r7, #12]
 80134b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80134ba:	4313      	orrs	r3, r2
 80134bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80134be:	68bb      	ldr	r3, [r7, #8]
 80134c0:	015a      	lsls	r2, r3, #5
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	4413      	add	r3, r2
 80134c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d153      	bne.n	801357c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80134d4:	68bb      	ldr	r3, [r7, #8]
 80134d6:	015a      	lsls	r2, r3, #5
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	4413      	add	r3, r2
 80134dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80134e0:	681a      	ldr	r2, [r3, #0]
 80134e2:	683b      	ldr	r3, [r7, #0]
 80134e4:	689b      	ldr	r3, [r3, #8]
 80134e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80134ea:	683b      	ldr	r3, [r7, #0]
 80134ec:	791b      	ldrb	r3, [r3, #4]
 80134ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80134f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	059b      	lsls	r3, r3, #22
 80134f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80134f8:	431a      	orrs	r2, r3
 80134fa:	68bb      	ldr	r3, [r7, #8]
 80134fc:	0159      	lsls	r1, r3, #5
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	440b      	add	r3, r1
 8013502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013506:	4619      	mov	r1, r3
 8013508:	4b20      	ldr	r3, [pc, #128]	@ (801358c <USB_ActivateEndpoint+0x10c>)
 801350a:	4313      	orrs	r3, r2
 801350c:	600b      	str	r3, [r1, #0]
 801350e:	e035      	b.n	801357c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013516:	69da      	ldr	r2, [r3, #28]
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	781b      	ldrb	r3, [r3, #0]
 801351c:	f003 030f 	and.w	r3, r3, #15
 8013520:	2101      	movs	r1, #1
 8013522:	fa01 f303 	lsl.w	r3, r1, r3
 8013526:	041b      	lsls	r3, r3, #16
 8013528:	68f9      	ldr	r1, [r7, #12]
 801352a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801352e:	4313      	orrs	r3, r2
 8013530:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013532:	68bb      	ldr	r3, [r7, #8]
 8013534:	015a      	lsls	r2, r3, #5
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	4413      	add	r3, r2
 801353a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013544:	2b00      	cmp	r3, #0
 8013546:	d119      	bne.n	801357c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013548:	68bb      	ldr	r3, [r7, #8]
 801354a:	015a      	lsls	r2, r3, #5
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	4413      	add	r3, r2
 8013550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013554:	681a      	ldr	r2, [r3, #0]
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	689b      	ldr	r3, [r3, #8]
 801355a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	791b      	ldrb	r3, [r3, #4]
 8013562:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013564:	430b      	orrs	r3, r1
 8013566:	431a      	orrs	r2, r3
 8013568:	68bb      	ldr	r3, [r7, #8]
 801356a:	0159      	lsls	r1, r3, #5
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	440b      	add	r3, r1
 8013570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013574:	4619      	mov	r1, r3
 8013576:	4b05      	ldr	r3, [pc, #20]	@ (801358c <USB_ActivateEndpoint+0x10c>)
 8013578:	4313      	orrs	r3, r2
 801357a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801357c:	2300      	movs	r3, #0
}
 801357e:	4618      	mov	r0, r3
 8013580:	3714      	adds	r7, #20
 8013582:	46bd      	mov	sp, r7
 8013584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013588:	4770      	bx	lr
 801358a:	bf00      	nop
 801358c:	10008000 	.word	0x10008000

08013590 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8013590:	b480      	push	{r7}
 8013592:	b085      	sub	sp, #20
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
 8013598:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801359e:	683b      	ldr	r3, [r7, #0]
 80135a0:	781b      	ldrb	r3, [r3, #0]
 80135a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80135a4:	683b      	ldr	r3, [r7, #0]
 80135a6:	785b      	ldrb	r3, [r3, #1]
 80135a8:	2b01      	cmp	r3, #1
 80135aa:	d161      	bne.n	8013670 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80135ac:	68bb      	ldr	r3, [r7, #8]
 80135ae:	015a      	lsls	r2, r3, #5
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	4413      	add	r3, r2
 80135b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80135be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80135c2:	d11f      	bne.n	8013604 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80135c4:	68bb      	ldr	r3, [r7, #8]
 80135c6:	015a      	lsls	r2, r3, #5
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	4413      	add	r3, r2
 80135cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	68ba      	ldr	r2, [r7, #8]
 80135d4:	0151      	lsls	r1, r2, #5
 80135d6:	68fa      	ldr	r2, [r7, #12]
 80135d8:	440a      	add	r2, r1
 80135da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80135de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80135e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80135e4:	68bb      	ldr	r3, [r7, #8]
 80135e6:	015a      	lsls	r2, r3, #5
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	4413      	add	r3, r2
 80135ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	68ba      	ldr	r2, [r7, #8]
 80135f4:	0151      	lsls	r1, r2, #5
 80135f6:	68fa      	ldr	r2, [r7, #12]
 80135f8:	440a      	add	r2, r1
 80135fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80135fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013602:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801360a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801360c:	683b      	ldr	r3, [r7, #0]
 801360e:	781b      	ldrb	r3, [r3, #0]
 8013610:	f003 030f 	and.w	r3, r3, #15
 8013614:	2101      	movs	r1, #1
 8013616:	fa01 f303 	lsl.w	r3, r1, r3
 801361a:	b29b      	uxth	r3, r3
 801361c:	43db      	mvns	r3, r3
 801361e:	68f9      	ldr	r1, [r7, #12]
 8013620:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013624:	4013      	ands	r3, r2
 8013626:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801362e:	69da      	ldr	r2, [r3, #28]
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	781b      	ldrb	r3, [r3, #0]
 8013634:	f003 030f 	and.w	r3, r3, #15
 8013638:	2101      	movs	r1, #1
 801363a:	fa01 f303 	lsl.w	r3, r1, r3
 801363e:	b29b      	uxth	r3, r3
 8013640:	43db      	mvns	r3, r3
 8013642:	68f9      	ldr	r1, [r7, #12]
 8013644:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013648:	4013      	ands	r3, r2
 801364a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801364c:	68bb      	ldr	r3, [r7, #8]
 801364e:	015a      	lsls	r2, r3, #5
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	4413      	add	r3, r2
 8013654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013658:	681a      	ldr	r2, [r3, #0]
 801365a:	68bb      	ldr	r3, [r7, #8]
 801365c:	0159      	lsls	r1, r3, #5
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	440b      	add	r3, r1
 8013662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013666:	4619      	mov	r1, r3
 8013668:	4b35      	ldr	r3, [pc, #212]	@ (8013740 <USB_DeactivateEndpoint+0x1b0>)
 801366a:	4013      	ands	r3, r2
 801366c:	600b      	str	r3, [r1, #0]
 801366e:	e060      	b.n	8013732 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013670:	68bb      	ldr	r3, [r7, #8]
 8013672:	015a      	lsls	r2, r3, #5
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	4413      	add	r3, r2
 8013678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013682:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013686:	d11f      	bne.n	80136c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013688:	68bb      	ldr	r3, [r7, #8]
 801368a:	015a      	lsls	r2, r3, #5
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	4413      	add	r3, r2
 8013690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	68ba      	ldr	r2, [r7, #8]
 8013698:	0151      	lsls	r1, r2, #5
 801369a:	68fa      	ldr	r2, [r7, #12]
 801369c:	440a      	add	r2, r1
 801369e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80136a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80136a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80136a8:	68bb      	ldr	r3, [r7, #8]
 80136aa:	015a      	lsls	r2, r3, #5
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	4413      	add	r3, r2
 80136b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	68ba      	ldr	r2, [r7, #8]
 80136b8:	0151      	lsls	r1, r2, #5
 80136ba:	68fa      	ldr	r2, [r7, #12]
 80136bc:	440a      	add	r2, r1
 80136be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80136c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80136c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80136ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80136d0:	683b      	ldr	r3, [r7, #0]
 80136d2:	781b      	ldrb	r3, [r3, #0]
 80136d4:	f003 030f 	and.w	r3, r3, #15
 80136d8:	2101      	movs	r1, #1
 80136da:	fa01 f303 	lsl.w	r3, r1, r3
 80136de:	041b      	lsls	r3, r3, #16
 80136e0:	43db      	mvns	r3, r3
 80136e2:	68f9      	ldr	r1, [r7, #12]
 80136e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80136e8:	4013      	ands	r3, r2
 80136ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80136f2:	69da      	ldr	r2, [r3, #28]
 80136f4:	683b      	ldr	r3, [r7, #0]
 80136f6:	781b      	ldrb	r3, [r3, #0]
 80136f8:	f003 030f 	and.w	r3, r3, #15
 80136fc:	2101      	movs	r1, #1
 80136fe:	fa01 f303 	lsl.w	r3, r1, r3
 8013702:	041b      	lsls	r3, r3, #16
 8013704:	43db      	mvns	r3, r3
 8013706:	68f9      	ldr	r1, [r7, #12]
 8013708:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801370c:	4013      	ands	r3, r2
 801370e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013710:	68bb      	ldr	r3, [r7, #8]
 8013712:	015a      	lsls	r2, r3, #5
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	4413      	add	r3, r2
 8013718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801371c:	681a      	ldr	r2, [r3, #0]
 801371e:	68bb      	ldr	r3, [r7, #8]
 8013720:	0159      	lsls	r1, r3, #5
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	440b      	add	r3, r1
 8013726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801372a:	4619      	mov	r1, r3
 801372c:	4b05      	ldr	r3, [pc, #20]	@ (8013744 <USB_DeactivateEndpoint+0x1b4>)
 801372e:	4013      	ands	r3, r2
 8013730:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013732:	2300      	movs	r3, #0
}
 8013734:	4618      	mov	r0, r3
 8013736:	3714      	adds	r7, #20
 8013738:	46bd      	mov	sp, r7
 801373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801373e:	4770      	bx	lr
 8013740:	ec337800 	.word	0xec337800
 8013744:	eff37800 	.word	0xeff37800

08013748 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013748:	b580      	push	{r7, lr}
 801374a:	b08a      	sub	sp, #40	@ 0x28
 801374c:	af02      	add	r7, sp, #8
 801374e:	60f8      	str	r0, [r7, #12]
 8013750:	60b9      	str	r1, [r7, #8]
 8013752:	4613      	mov	r3, r2
 8013754:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801375a:	68bb      	ldr	r3, [r7, #8]
 801375c:	781b      	ldrb	r3, [r3, #0]
 801375e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013760:	68bb      	ldr	r3, [r7, #8]
 8013762:	785b      	ldrb	r3, [r3, #1]
 8013764:	2b01      	cmp	r3, #1
 8013766:	f040 8185 	bne.w	8013a74 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801376a:	68bb      	ldr	r3, [r7, #8]
 801376c:	691b      	ldr	r3, [r3, #16]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d132      	bne.n	80137d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013772:	69bb      	ldr	r3, [r7, #24]
 8013774:	015a      	lsls	r2, r3, #5
 8013776:	69fb      	ldr	r3, [r7, #28]
 8013778:	4413      	add	r3, r2
 801377a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801377e:	691a      	ldr	r2, [r3, #16]
 8013780:	69bb      	ldr	r3, [r7, #24]
 8013782:	0159      	lsls	r1, r3, #5
 8013784:	69fb      	ldr	r3, [r7, #28]
 8013786:	440b      	add	r3, r1
 8013788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801378c:	4619      	mov	r1, r3
 801378e:	4ba7      	ldr	r3, [pc, #668]	@ (8013a2c <USB_EPStartXfer+0x2e4>)
 8013790:	4013      	ands	r3, r2
 8013792:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013794:	69bb      	ldr	r3, [r7, #24]
 8013796:	015a      	lsls	r2, r3, #5
 8013798:	69fb      	ldr	r3, [r7, #28]
 801379a:	4413      	add	r3, r2
 801379c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80137a0:	691b      	ldr	r3, [r3, #16]
 80137a2:	69ba      	ldr	r2, [r7, #24]
 80137a4:	0151      	lsls	r1, r2, #5
 80137a6:	69fa      	ldr	r2, [r7, #28]
 80137a8:	440a      	add	r2, r1
 80137aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80137ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80137b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80137b4:	69bb      	ldr	r3, [r7, #24]
 80137b6:	015a      	lsls	r2, r3, #5
 80137b8:	69fb      	ldr	r3, [r7, #28]
 80137ba:	4413      	add	r3, r2
 80137bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80137c0:	691a      	ldr	r2, [r3, #16]
 80137c2:	69bb      	ldr	r3, [r7, #24]
 80137c4:	0159      	lsls	r1, r3, #5
 80137c6:	69fb      	ldr	r3, [r7, #28]
 80137c8:	440b      	add	r3, r1
 80137ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80137ce:	4619      	mov	r1, r3
 80137d0:	4b97      	ldr	r3, [pc, #604]	@ (8013a30 <USB_EPStartXfer+0x2e8>)
 80137d2:	4013      	ands	r3, r2
 80137d4:	610b      	str	r3, [r1, #16]
 80137d6:	e097      	b.n	8013908 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80137d8:	69bb      	ldr	r3, [r7, #24]
 80137da:	015a      	lsls	r2, r3, #5
 80137dc:	69fb      	ldr	r3, [r7, #28]
 80137de:	4413      	add	r3, r2
 80137e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80137e4:	691a      	ldr	r2, [r3, #16]
 80137e6:	69bb      	ldr	r3, [r7, #24]
 80137e8:	0159      	lsls	r1, r3, #5
 80137ea:	69fb      	ldr	r3, [r7, #28]
 80137ec:	440b      	add	r3, r1
 80137ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80137f2:	4619      	mov	r1, r3
 80137f4:	4b8e      	ldr	r3, [pc, #568]	@ (8013a30 <USB_EPStartXfer+0x2e8>)
 80137f6:	4013      	ands	r3, r2
 80137f8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80137fa:	69bb      	ldr	r3, [r7, #24]
 80137fc:	015a      	lsls	r2, r3, #5
 80137fe:	69fb      	ldr	r3, [r7, #28]
 8013800:	4413      	add	r3, r2
 8013802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013806:	691a      	ldr	r2, [r3, #16]
 8013808:	69bb      	ldr	r3, [r7, #24]
 801380a:	0159      	lsls	r1, r3, #5
 801380c:	69fb      	ldr	r3, [r7, #28]
 801380e:	440b      	add	r3, r1
 8013810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013814:	4619      	mov	r1, r3
 8013816:	4b85      	ldr	r3, [pc, #532]	@ (8013a2c <USB_EPStartXfer+0x2e4>)
 8013818:	4013      	ands	r3, r2
 801381a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 801381c:	69bb      	ldr	r3, [r7, #24]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d11a      	bne.n	8013858 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8013822:	68bb      	ldr	r3, [r7, #8]
 8013824:	691a      	ldr	r2, [r3, #16]
 8013826:	68bb      	ldr	r3, [r7, #8]
 8013828:	689b      	ldr	r3, [r3, #8]
 801382a:	429a      	cmp	r2, r3
 801382c:	d903      	bls.n	8013836 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801382e:	68bb      	ldr	r3, [r7, #8]
 8013830:	689a      	ldr	r2, [r3, #8]
 8013832:	68bb      	ldr	r3, [r7, #8]
 8013834:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013836:	69bb      	ldr	r3, [r7, #24]
 8013838:	015a      	lsls	r2, r3, #5
 801383a:	69fb      	ldr	r3, [r7, #28]
 801383c:	4413      	add	r3, r2
 801383e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013842:	691b      	ldr	r3, [r3, #16]
 8013844:	69ba      	ldr	r2, [r7, #24]
 8013846:	0151      	lsls	r1, r2, #5
 8013848:	69fa      	ldr	r2, [r7, #28]
 801384a:	440a      	add	r2, r1
 801384c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013850:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013854:	6113      	str	r3, [r2, #16]
 8013856:	e044      	b.n	80138e2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013858:	68bb      	ldr	r3, [r7, #8]
 801385a:	691a      	ldr	r2, [r3, #16]
 801385c:	68bb      	ldr	r3, [r7, #8]
 801385e:	689b      	ldr	r3, [r3, #8]
 8013860:	4413      	add	r3, r2
 8013862:	1e5a      	subs	r2, r3, #1
 8013864:	68bb      	ldr	r3, [r7, #8]
 8013866:	689b      	ldr	r3, [r3, #8]
 8013868:	fbb2 f3f3 	udiv	r3, r2, r3
 801386c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 801386e:	69bb      	ldr	r3, [r7, #24]
 8013870:	015a      	lsls	r2, r3, #5
 8013872:	69fb      	ldr	r3, [r7, #28]
 8013874:	4413      	add	r3, r2
 8013876:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801387a:	691a      	ldr	r2, [r3, #16]
 801387c:	8afb      	ldrh	r3, [r7, #22]
 801387e:	04d9      	lsls	r1, r3, #19
 8013880:	4b6c      	ldr	r3, [pc, #432]	@ (8013a34 <USB_EPStartXfer+0x2ec>)
 8013882:	400b      	ands	r3, r1
 8013884:	69b9      	ldr	r1, [r7, #24]
 8013886:	0148      	lsls	r0, r1, #5
 8013888:	69f9      	ldr	r1, [r7, #28]
 801388a:	4401      	add	r1, r0
 801388c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8013890:	4313      	orrs	r3, r2
 8013892:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8013894:	68bb      	ldr	r3, [r7, #8]
 8013896:	791b      	ldrb	r3, [r3, #4]
 8013898:	2b01      	cmp	r3, #1
 801389a:	d122      	bne.n	80138e2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801389c:	69bb      	ldr	r3, [r7, #24]
 801389e:	015a      	lsls	r2, r3, #5
 80138a0:	69fb      	ldr	r3, [r7, #28]
 80138a2:	4413      	add	r3, r2
 80138a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80138a8:	691b      	ldr	r3, [r3, #16]
 80138aa:	69ba      	ldr	r2, [r7, #24]
 80138ac:	0151      	lsls	r1, r2, #5
 80138ae:	69fa      	ldr	r2, [r7, #28]
 80138b0:	440a      	add	r2, r1
 80138b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80138b6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80138ba:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80138bc:	69bb      	ldr	r3, [r7, #24]
 80138be:	015a      	lsls	r2, r3, #5
 80138c0:	69fb      	ldr	r3, [r7, #28]
 80138c2:	4413      	add	r3, r2
 80138c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80138c8:	691a      	ldr	r2, [r3, #16]
 80138ca:	8afb      	ldrh	r3, [r7, #22]
 80138cc:	075b      	lsls	r3, r3, #29
 80138ce:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80138d2:	69b9      	ldr	r1, [r7, #24]
 80138d4:	0148      	lsls	r0, r1, #5
 80138d6:	69f9      	ldr	r1, [r7, #28]
 80138d8:	4401      	add	r1, r0
 80138da:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80138de:	4313      	orrs	r3, r2
 80138e0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80138e2:	69bb      	ldr	r3, [r7, #24]
 80138e4:	015a      	lsls	r2, r3, #5
 80138e6:	69fb      	ldr	r3, [r7, #28]
 80138e8:	4413      	add	r3, r2
 80138ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80138ee:	691a      	ldr	r2, [r3, #16]
 80138f0:	68bb      	ldr	r3, [r7, #8]
 80138f2:	691b      	ldr	r3, [r3, #16]
 80138f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80138f8:	69b9      	ldr	r1, [r7, #24]
 80138fa:	0148      	lsls	r0, r1, #5
 80138fc:	69f9      	ldr	r1, [r7, #28]
 80138fe:	4401      	add	r1, r0
 8013900:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8013904:	4313      	orrs	r3, r2
 8013906:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8013908:	79fb      	ldrb	r3, [r7, #7]
 801390a:	2b01      	cmp	r3, #1
 801390c:	d14b      	bne.n	80139a6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801390e:	68bb      	ldr	r3, [r7, #8]
 8013910:	69db      	ldr	r3, [r3, #28]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d009      	beq.n	801392a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013916:	69bb      	ldr	r3, [r7, #24]
 8013918:	015a      	lsls	r2, r3, #5
 801391a:	69fb      	ldr	r3, [r7, #28]
 801391c:	4413      	add	r3, r2
 801391e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013922:	461a      	mov	r2, r3
 8013924:	68bb      	ldr	r3, [r7, #8]
 8013926:	69db      	ldr	r3, [r3, #28]
 8013928:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801392a:	68bb      	ldr	r3, [r7, #8]
 801392c:	791b      	ldrb	r3, [r3, #4]
 801392e:	2b01      	cmp	r3, #1
 8013930:	d128      	bne.n	8013984 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013932:	69fb      	ldr	r3, [r7, #28]
 8013934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013938:	689b      	ldr	r3, [r3, #8]
 801393a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801393e:	2b00      	cmp	r3, #0
 8013940:	d110      	bne.n	8013964 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013942:	69bb      	ldr	r3, [r7, #24]
 8013944:	015a      	lsls	r2, r3, #5
 8013946:	69fb      	ldr	r3, [r7, #28]
 8013948:	4413      	add	r3, r2
 801394a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	69ba      	ldr	r2, [r7, #24]
 8013952:	0151      	lsls	r1, r2, #5
 8013954:	69fa      	ldr	r2, [r7, #28]
 8013956:	440a      	add	r2, r1
 8013958:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801395c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013960:	6013      	str	r3, [r2, #0]
 8013962:	e00f      	b.n	8013984 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013964:	69bb      	ldr	r3, [r7, #24]
 8013966:	015a      	lsls	r2, r3, #5
 8013968:	69fb      	ldr	r3, [r7, #28]
 801396a:	4413      	add	r3, r2
 801396c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	69ba      	ldr	r2, [r7, #24]
 8013974:	0151      	lsls	r1, r2, #5
 8013976:	69fa      	ldr	r2, [r7, #28]
 8013978:	440a      	add	r2, r1
 801397a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801397e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013982:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013984:	69bb      	ldr	r3, [r7, #24]
 8013986:	015a      	lsls	r2, r3, #5
 8013988:	69fb      	ldr	r3, [r7, #28]
 801398a:	4413      	add	r3, r2
 801398c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	69ba      	ldr	r2, [r7, #24]
 8013994:	0151      	lsls	r1, r2, #5
 8013996:	69fa      	ldr	r2, [r7, #28]
 8013998:	440a      	add	r2, r1
 801399a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801399e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80139a2:	6013      	str	r3, [r2, #0]
 80139a4:	e169      	b.n	8013c7a <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80139a6:	69bb      	ldr	r3, [r7, #24]
 80139a8:	015a      	lsls	r2, r3, #5
 80139aa:	69fb      	ldr	r3, [r7, #28]
 80139ac:	4413      	add	r3, r2
 80139ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	69ba      	ldr	r2, [r7, #24]
 80139b6:	0151      	lsls	r1, r2, #5
 80139b8:	69fa      	ldr	r2, [r7, #28]
 80139ba:	440a      	add	r2, r1
 80139bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80139c0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80139c4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80139c6:	68bb      	ldr	r3, [r7, #8]
 80139c8:	791b      	ldrb	r3, [r3, #4]
 80139ca:	2b01      	cmp	r3, #1
 80139cc:	d015      	beq.n	80139fa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	691b      	ldr	r3, [r3, #16]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	f000 8151 	beq.w	8013c7a <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80139d8:	69fb      	ldr	r3, [r7, #28]
 80139da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80139de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80139e0:	68bb      	ldr	r3, [r7, #8]
 80139e2:	781b      	ldrb	r3, [r3, #0]
 80139e4:	f003 030f 	and.w	r3, r3, #15
 80139e8:	2101      	movs	r1, #1
 80139ea:	fa01 f303 	lsl.w	r3, r1, r3
 80139ee:	69f9      	ldr	r1, [r7, #28]
 80139f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80139f4:	4313      	orrs	r3, r2
 80139f6:	634b      	str	r3, [r1, #52]	@ 0x34
 80139f8:	e13f      	b.n	8013c7a <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80139fa:	69fb      	ldr	r3, [r7, #28]
 80139fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013a00:	689b      	ldr	r3, [r3, #8]
 8013a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d116      	bne.n	8013a38 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013a0a:	69bb      	ldr	r3, [r7, #24]
 8013a0c:	015a      	lsls	r2, r3, #5
 8013a0e:	69fb      	ldr	r3, [r7, #28]
 8013a10:	4413      	add	r3, r2
 8013a12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	69ba      	ldr	r2, [r7, #24]
 8013a1a:	0151      	lsls	r1, r2, #5
 8013a1c:	69fa      	ldr	r2, [r7, #28]
 8013a1e:	440a      	add	r2, r1
 8013a20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013a24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013a28:	6013      	str	r3, [r2, #0]
 8013a2a:	e015      	b.n	8013a58 <USB_EPStartXfer+0x310>
 8013a2c:	e007ffff 	.word	0xe007ffff
 8013a30:	fff80000 	.word	0xfff80000
 8013a34:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013a38:	69bb      	ldr	r3, [r7, #24]
 8013a3a:	015a      	lsls	r2, r3, #5
 8013a3c:	69fb      	ldr	r3, [r7, #28]
 8013a3e:	4413      	add	r3, r2
 8013a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	69ba      	ldr	r2, [r7, #24]
 8013a48:	0151      	lsls	r1, r2, #5
 8013a4a:	69fa      	ldr	r2, [r7, #28]
 8013a4c:	440a      	add	r2, r1
 8013a4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013a52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013a56:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013a58:	68bb      	ldr	r3, [r7, #8]
 8013a5a:	68d9      	ldr	r1, [r3, #12]
 8013a5c:	68bb      	ldr	r3, [r7, #8]
 8013a5e:	781a      	ldrb	r2, [r3, #0]
 8013a60:	68bb      	ldr	r3, [r7, #8]
 8013a62:	691b      	ldr	r3, [r3, #16]
 8013a64:	b298      	uxth	r0, r3
 8013a66:	79fb      	ldrb	r3, [r7, #7]
 8013a68:	9300      	str	r3, [sp, #0]
 8013a6a:	4603      	mov	r3, r0
 8013a6c:	68f8      	ldr	r0, [r7, #12]
 8013a6e:	f000 f9b9 	bl	8013de4 <USB_WritePacket>
 8013a72:	e102      	b.n	8013c7a <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013a74:	69bb      	ldr	r3, [r7, #24]
 8013a76:	015a      	lsls	r2, r3, #5
 8013a78:	69fb      	ldr	r3, [r7, #28]
 8013a7a:	4413      	add	r3, r2
 8013a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a80:	691a      	ldr	r2, [r3, #16]
 8013a82:	69bb      	ldr	r3, [r7, #24]
 8013a84:	0159      	lsls	r1, r3, #5
 8013a86:	69fb      	ldr	r3, [r7, #28]
 8013a88:	440b      	add	r3, r1
 8013a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a8e:	4619      	mov	r1, r3
 8013a90:	4b7c      	ldr	r3, [pc, #496]	@ (8013c84 <USB_EPStartXfer+0x53c>)
 8013a92:	4013      	ands	r3, r2
 8013a94:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013a96:	69bb      	ldr	r3, [r7, #24]
 8013a98:	015a      	lsls	r2, r3, #5
 8013a9a:	69fb      	ldr	r3, [r7, #28]
 8013a9c:	4413      	add	r3, r2
 8013a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013aa2:	691a      	ldr	r2, [r3, #16]
 8013aa4:	69bb      	ldr	r3, [r7, #24]
 8013aa6:	0159      	lsls	r1, r3, #5
 8013aa8:	69fb      	ldr	r3, [r7, #28]
 8013aaa:	440b      	add	r3, r1
 8013aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013ab0:	4619      	mov	r1, r3
 8013ab2:	4b75      	ldr	r3, [pc, #468]	@ (8013c88 <USB_EPStartXfer+0x540>)
 8013ab4:	4013      	ands	r3, r2
 8013ab6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013ab8:	69bb      	ldr	r3, [r7, #24]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d12f      	bne.n	8013b1e <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8013abe:	68bb      	ldr	r3, [r7, #8]
 8013ac0:	691b      	ldr	r3, [r3, #16]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d003      	beq.n	8013ace <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8013ac6:	68bb      	ldr	r3, [r7, #8]
 8013ac8:	689a      	ldr	r2, [r3, #8]
 8013aca:	68bb      	ldr	r3, [r7, #8]
 8013acc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013ace:	68bb      	ldr	r3, [r7, #8]
 8013ad0:	689a      	ldr	r2, [r3, #8]
 8013ad2:	68bb      	ldr	r3, [r7, #8]
 8013ad4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013ad6:	69bb      	ldr	r3, [r7, #24]
 8013ad8:	015a      	lsls	r2, r3, #5
 8013ada:	69fb      	ldr	r3, [r7, #28]
 8013adc:	4413      	add	r3, r2
 8013ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013ae2:	691a      	ldr	r2, [r3, #16]
 8013ae4:	68bb      	ldr	r3, [r7, #8]
 8013ae6:	6a1b      	ldr	r3, [r3, #32]
 8013ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013aec:	69b9      	ldr	r1, [r7, #24]
 8013aee:	0148      	lsls	r0, r1, #5
 8013af0:	69f9      	ldr	r1, [r7, #28]
 8013af2:	4401      	add	r1, r0
 8013af4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013af8:	4313      	orrs	r3, r2
 8013afa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013afc:	69bb      	ldr	r3, [r7, #24]
 8013afe:	015a      	lsls	r2, r3, #5
 8013b00:	69fb      	ldr	r3, [r7, #28]
 8013b02:	4413      	add	r3, r2
 8013b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b08:	691b      	ldr	r3, [r3, #16]
 8013b0a:	69ba      	ldr	r2, [r7, #24]
 8013b0c:	0151      	lsls	r1, r2, #5
 8013b0e:	69fa      	ldr	r2, [r7, #28]
 8013b10:	440a      	add	r2, r1
 8013b12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013b16:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013b1a:	6113      	str	r3, [r2, #16]
 8013b1c:	e05f      	b.n	8013bde <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013b1e:	68bb      	ldr	r3, [r7, #8]
 8013b20:	691b      	ldr	r3, [r3, #16]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d123      	bne.n	8013b6e <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013b26:	69bb      	ldr	r3, [r7, #24]
 8013b28:	015a      	lsls	r2, r3, #5
 8013b2a:	69fb      	ldr	r3, [r7, #28]
 8013b2c:	4413      	add	r3, r2
 8013b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b32:	691a      	ldr	r2, [r3, #16]
 8013b34:	68bb      	ldr	r3, [r7, #8]
 8013b36:	689b      	ldr	r3, [r3, #8]
 8013b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013b3c:	69b9      	ldr	r1, [r7, #24]
 8013b3e:	0148      	lsls	r0, r1, #5
 8013b40:	69f9      	ldr	r1, [r7, #28]
 8013b42:	4401      	add	r1, r0
 8013b44:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013b48:	4313      	orrs	r3, r2
 8013b4a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013b4c:	69bb      	ldr	r3, [r7, #24]
 8013b4e:	015a      	lsls	r2, r3, #5
 8013b50:	69fb      	ldr	r3, [r7, #28]
 8013b52:	4413      	add	r3, r2
 8013b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b58:	691b      	ldr	r3, [r3, #16]
 8013b5a:	69ba      	ldr	r2, [r7, #24]
 8013b5c:	0151      	lsls	r1, r2, #5
 8013b5e:	69fa      	ldr	r2, [r7, #28]
 8013b60:	440a      	add	r2, r1
 8013b62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013b66:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013b6a:	6113      	str	r3, [r2, #16]
 8013b6c:	e037      	b.n	8013bde <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013b6e:	68bb      	ldr	r3, [r7, #8]
 8013b70:	691a      	ldr	r2, [r3, #16]
 8013b72:	68bb      	ldr	r3, [r7, #8]
 8013b74:	689b      	ldr	r3, [r3, #8]
 8013b76:	4413      	add	r3, r2
 8013b78:	1e5a      	subs	r2, r3, #1
 8013b7a:	68bb      	ldr	r3, [r7, #8]
 8013b7c:	689b      	ldr	r3, [r3, #8]
 8013b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013b82:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013b84:	68bb      	ldr	r3, [r7, #8]
 8013b86:	689b      	ldr	r3, [r3, #8]
 8013b88:	8afa      	ldrh	r2, [r7, #22]
 8013b8a:	fb03 f202 	mul.w	r2, r3, r2
 8013b8e:	68bb      	ldr	r3, [r7, #8]
 8013b90:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013b92:	69bb      	ldr	r3, [r7, #24]
 8013b94:	015a      	lsls	r2, r3, #5
 8013b96:	69fb      	ldr	r3, [r7, #28]
 8013b98:	4413      	add	r3, r2
 8013b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b9e:	691a      	ldr	r2, [r3, #16]
 8013ba0:	8afb      	ldrh	r3, [r7, #22]
 8013ba2:	04d9      	lsls	r1, r3, #19
 8013ba4:	4b39      	ldr	r3, [pc, #228]	@ (8013c8c <USB_EPStartXfer+0x544>)
 8013ba6:	400b      	ands	r3, r1
 8013ba8:	69b9      	ldr	r1, [r7, #24]
 8013baa:	0148      	lsls	r0, r1, #5
 8013bac:	69f9      	ldr	r1, [r7, #28]
 8013bae:	4401      	add	r1, r0
 8013bb0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013bb4:	4313      	orrs	r3, r2
 8013bb6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013bb8:	69bb      	ldr	r3, [r7, #24]
 8013bba:	015a      	lsls	r2, r3, #5
 8013bbc:	69fb      	ldr	r3, [r7, #28]
 8013bbe:	4413      	add	r3, r2
 8013bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013bc4:	691a      	ldr	r2, [r3, #16]
 8013bc6:	68bb      	ldr	r3, [r7, #8]
 8013bc8:	6a1b      	ldr	r3, [r3, #32]
 8013bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013bce:	69b9      	ldr	r1, [r7, #24]
 8013bd0:	0148      	lsls	r0, r1, #5
 8013bd2:	69f9      	ldr	r1, [r7, #28]
 8013bd4:	4401      	add	r1, r0
 8013bd6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013bda:	4313      	orrs	r3, r2
 8013bdc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013bde:	79fb      	ldrb	r3, [r7, #7]
 8013be0:	2b01      	cmp	r3, #1
 8013be2:	d10d      	bne.n	8013c00 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013be4:	68bb      	ldr	r3, [r7, #8]
 8013be6:	68db      	ldr	r3, [r3, #12]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d009      	beq.n	8013c00 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013bec:	68bb      	ldr	r3, [r7, #8]
 8013bee:	68d9      	ldr	r1, [r3, #12]
 8013bf0:	69bb      	ldr	r3, [r7, #24]
 8013bf2:	015a      	lsls	r2, r3, #5
 8013bf4:	69fb      	ldr	r3, [r7, #28]
 8013bf6:	4413      	add	r3, r2
 8013bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013bfc:	460a      	mov	r2, r1
 8013bfe:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013c00:	68bb      	ldr	r3, [r7, #8]
 8013c02:	791b      	ldrb	r3, [r3, #4]
 8013c04:	2b01      	cmp	r3, #1
 8013c06:	d128      	bne.n	8013c5a <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013c08:	69fb      	ldr	r3, [r7, #28]
 8013c0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013c0e:	689b      	ldr	r3, [r3, #8]
 8013c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d110      	bne.n	8013c3a <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013c18:	69bb      	ldr	r3, [r7, #24]
 8013c1a:	015a      	lsls	r2, r3, #5
 8013c1c:	69fb      	ldr	r3, [r7, #28]
 8013c1e:	4413      	add	r3, r2
 8013c20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	69ba      	ldr	r2, [r7, #24]
 8013c28:	0151      	lsls	r1, r2, #5
 8013c2a:	69fa      	ldr	r2, [r7, #28]
 8013c2c:	440a      	add	r2, r1
 8013c2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013c32:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013c36:	6013      	str	r3, [r2, #0]
 8013c38:	e00f      	b.n	8013c5a <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013c3a:	69bb      	ldr	r3, [r7, #24]
 8013c3c:	015a      	lsls	r2, r3, #5
 8013c3e:	69fb      	ldr	r3, [r7, #28]
 8013c40:	4413      	add	r3, r2
 8013c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	69ba      	ldr	r2, [r7, #24]
 8013c4a:	0151      	lsls	r1, r2, #5
 8013c4c:	69fa      	ldr	r2, [r7, #28]
 8013c4e:	440a      	add	r2, r1
 8013c50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013c58:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013c5a:	69bb      	ldr	r3, [r7, #24]
 8013c5c:	015a      	lsls	r2, r3, #5
 8013c5e:	69fb      	ldr	r3, [r7, #28]
 8013c60:	4413      	add	r3, r2
 8013c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	69ba      	ldr	r2, [r7, #24]
 8013c6a:	0151      	lsls	r1, r2, #5
 8013c6c:	69fa      	ldr	r2, [r7, #28]
 8013c6e:	440a      	add	r2, r1
 8013c70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013c74:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8013c78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013c7a:	2300      	movs	r3, #0
}
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	3720      	adds	r7, #32
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd80      	pop	{r7, pc}
 8013c84:	fff80000 	.word	0xfff80000
 8013c88:	e007ffff 	.word	0xe007ffff
 8013c8c:	1ff80000 	.word	0x1ff80000

08013c90 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013c90:	b480      	push	{r7}
 8013c92:	b087      	sub	sp, #28
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
 8013c98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013ca6:	683b      	ldr	r3, [r7, #0]
 8013ca8:	785b      	ldrb	r3, [r3, #1]
 8013caa:	2b01      	cmp	r3, #1
 8013cac:	d14a      	bne.n	8013d44 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013cae:	683b      	ldr	r3, [r7, #0]
 8013cb0:	781b      	ldrb	r3, [r3, #0]
 8013cb2:	015a      	lsls	r2, r3, #5
 8013cb4:	693b      	ldr	r3, [r7, #16]
 8013cb6:	4413      	add	r3, r2
 8013cb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013cc6:	f040 8086 	bne.w	8013dd6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013cca:	683b      	ldr	r3, [r7, #0]
 8013ccc:	781b      	ldrb	r3, [r3, #0]
 8013cce:	015a      	lsls	r2, r3, #5
 8013cd0:	693b      	ldr	r3, [r7, #16]
 8013cd2:	4413      	add	r3, r2
 8013cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	683a      	ldr	r2, [r7, #0]
 8013cdc:	7812      	ldrb	r2, [r2, #0]
 8013cde:	0151      	lsls	r1, r2, #5
 8013ce0:	693a      	ldr	r2, [r7, #16]
 8013ce2:	440a      	add	r2, r1
 8013ce4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013ce8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013cec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	781b      	ldrb	r3, [r3, #0]
 8013cf2:	015a      	lsls	r2, r3, #5
 8013cf4:	693b      	ldr	r3, [r7, #16]
 8013cf6:	4413      	add	r3, r2
 8013cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	683a      	ldr	r2, [r7, #0]
 8013d00:	7812      	ldrb	r2, [r2, #0]
 8013d02:	0151      	lsls	r1, r2, #5
 8013d04:	693a      	ldr	r2, [r7, #16]
 8013d06:	440a      	add	r2, r1
 8013d08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013d0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013d10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	3301      	adds	r3, #1
 8013d16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8013d1e:	4293      	cmp	r3, r2
 8013d20:	d902      	bls.n	8013d28 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013d22:	2301      	movs	r3, #1
 8013d24:	75fb      	strb	r3, [r7, #23]
          break;
 8013d26:	e056      	b.n	8013dd6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013d28:	683b      	ldr	r3, [r7, #0]
 8013d2a:	781b      	ldrb	r3, [r3, #0]
 8013d2c:	015a      	lsls	r2, r3, #5
 8013d2e:	693b      	ldr	r3, [r7, #16]
 8013d30:	4413      	add	r3, r2
 8013d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013d40:	d0e7      	beq.n	8013d12 <USB_EPStopXfer+0x82>
 8013d42:	e048      	b.n	8013dd6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013d44:	683b      	ldr	r3, [r7, #0]
 8013d46:	781b      	ldrb	r3, [r3, #0]
 8013d48:	015a      	lsls	r2, r3, #5
 8013d4a:	693b      	ldr	r3, [r7, #16]
 8013d4c:	4413      	add	r3, r2
 8013d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013d58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013d5c:	d13b      	bne.n	8013dd6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	781b      	ldrb	r3, [r3, #0]
 8013d62:	015a      	lsls	r2, r3, #5
 8013d64:	693b      	ldr	r3, [r7, #16]
 8013d66:	4413      	add	r3, r2
 8013d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	683a      	ldr	r2, [r7, #0]
 8013d70:	7812      	ldrb	r2, [r2, #0]
 8013d72:	0151      	lsls	r1, r2, #5
 8013d74:	693a      	ldr	r2, [r7, #16]
 8013d76:	440a      	add	r2, r1
 8013d78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013d7c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013d80:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	781b      	ldrb	r3, [r3, #0]
 8013d86:	015a      	lsls	r2, r3, #5
 8013d88:	693b      	ldr	r3, [r7, #16]
 8013d8a:	4413      	add	r3, r2
 8013d8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	683a      	ldr	r2, [r7, #0]
 8013d94:	7812      	ldrb	r2, [r2, #0]
 8013d96:	0151      	lsls	r1, r2, #5
 8013d98:	693a      	ldr	r2, [r7, #16]
 8013d9a:	440a      	add	r2, r1
 8013d9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013da0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013da4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	3301      	adds	r3, #1
 8013daa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	f242 7210 	movw	r2, #10000	@ 0x2710
 8013db2:	4293      	cmp	r3, r2
 8013db4:	d902      	bls.n	8013dbc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013db6:	2301      	movs	r3, #1
 8013db8:	75fb      	strb	r3, [r7, #23]
          break;
 8013dba:	e00c      	b.n	8013dd6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013dbc:	683b      	ldr	r3, [r7, #0]
 8013dbe:	781b      	ldrb	r3, [r3, #0]
 8013dc0:	015a      	lsls	r2, r3, #5
 8013dc2:	693b      	ldr	r3, [r7, #16]
 8013dc4:	4413      	add	r3, r2
 8013dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013dd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013dd4:	d0e7      	beq.n	8013da6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013dd8:	4618      	mov	r0, r3
 8013dda:	371c      	adds	r7, #28
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de2:	4770      	bx	lr

08013de4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013de4:	b480      	push	{r7}
 8013de6:	b089      	sub	sp, #36	@ 0x24
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	60f8      	str	r0, [r7, #12]
 8013dec:	60b9      	str	r1, [r7, #8]
 8013dee:	4611      	mov	r1, r2
 8013df0:	461a      	mov	r2, r3
 8013df2:	460b      	mov	r3, r1
 8013df4:	71fb      	strb	r3, [r7, #7]
 8013df6:	4613      	mov	r3, r2
 8013df8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013dfe:	68bb      	ldr	r3, [r7, #8]
 8013e00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013e02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d123      	bne.n	8013e52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013e0a:	88bb      	ldrh	r3, [r7, #4]
 8013e0c:	3303      	adds	r3, #3
 8013e0e:	089b      	lsrs	r3, r3, #2
 8013e10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013e12:	2300      	movs	r3, #0
 8013e14:	61bb      	str	r3, [r7, #24]
 8013e16:	e018      	b.n	8013e4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013e18:	79fb      	ldrb	r3, [r7, #7]
 8013e1a:	031a      	lsls	r2, r3, #12
 8013e1c:	697b      	ldr	r3, [r7, #20]
 8013e1e:	4413      	add	r3, r2
 8013e20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013e24:	461a      	mov	r2, r3
 8013e26:	69fb      	ldr	r3, [r7, #28]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013e2c:	69fb      	ldr	r3, [r7, #28]
 8013e2e:	3301      	adds	r3, #1
 8013e30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013e32:	69fb      	ldr	r3, [r7, #28]
 8013e34:	3301      	adds	r3, #1
 8013e36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013e38:	69fb      	ldr	r3, [r7, #28]
 8013e3a:	3301      	adds	r3, #1
 8013e3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013e3e:	69fb      	ldr	r3, [r7, #28]
 8013e40:	3301      	adds	r3, #1
 8013e42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013e44:	69bb      	ldr	r3, [r7, #24]
 8013e46:	3301      	adds	r3, #1
 8013e48:	61bb      	str	r3, [r7, #24]
 8013e4a:	69ba      	ldr	r2, [r7, #24]
 8013e4c:	693b      	ldr	r3, [r7, #16]
 8013e4e:	429a      	cmp	r2, r3
 8013e50:	d3e2      	bcc.n	8013e18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013e52:	2300      	movs	r3, #0
}
 8013e54:	4618      	mov	r0, r3
 8013e56:	3724      	adds	r7, #36	@ 0x24
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5e:	4770      	bx	lr

08013e60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013e60:	b480      	push	{r7}
 8013e62:	b08b      	sub	sp, #44	@ 0x2c
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	60f8      	str	r0, [r7, #12]
 8013e68:	60b9      	str	r1, [r7, #8]
 8013e6a:	4613      	mov	r3, r2
 8013e6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013e72:	68bb      	ldr	r3, [r7, #8]
 8013e74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013e76:	88fb      	ldrh	r3, [r7, #6]
 8013e78:	089b      	lsrs	r3, r3, #2
 8013e7a:	b29b      	uxth	r3, r3
 8013e7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013e7e:	88fb      	ldrh	r3, [r7, #6]
 8013e80:	f003 0303 	and.w	r3, r3, #3
 8013e84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013e86:	2300      	movs	r3, #0
 8013e88:	623b      	str	r3, [r7, #32]
 8013e8a:	e014      	b.n	8013eb6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013e8c:	69bb      	ldr	r3, [r7, #24]
 8013e8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013e92:	681a      	ldr	r2, [r3, #0]
 8013e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e96:	601a      	str	r2, [r3, #0]
    pDest++;
 8013e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e9a:	3301      	adds	r3, #1
 8013e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8013e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ea0:	3301      	adds	r3, #1
 8013ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8013ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ea6:	3301      	adds	r3, #1
 8013ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8013eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eac:	3301      	adds	r3, #1
 8013eae:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8013eb0:	6a3b      	ldr	r3, [r7, #32]
 8013eb2:	3301      	adds	r3, #1
 8013eb4:	623b      	str	r3, [r7, #32]
 8013eb6:	6a3a      	ldr	r2, [r7, #32]
 8013eb8:	697b      	ldr	r3, [r7, #20]
 8013eba:	429a      	cmp	r2, r3
 8013ebc:	d3e6      	bcc.n	8013e8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013ebe:	8bfb      	ldrh	r3, [r7, #30]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d01e      	beq.n	8013f02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013ec8:	69bb      	ldr	r3, [r7, #24]
 8013eca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013ece:	461a      	mov	r2, r3
 8013ed0:	f107 0310 	add.w	r3, r7, #16
 8013ed4:	6812      	ldr	r2, [r2, #0]
 8013ed6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013ed8:	693a      	ldr	r2, [r7, #16]
 8013eda:	6a3b      	ldr	r3, [r7, #32]
 8013edc:	b2db      	uxtb	r3, r3
 8013ede:	00db      	lsls	r3, r3, #3
 8013ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8013ee4:	b2da      	uxtb	r2, r3
 8013ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ee8:	701a      	strb	r2, [r3, #0]
      i++;
 8013eea:	6a3b      	ldr	r3, [r7, #32]
 8013eec:	3301      	adds	r3, #1
 8013eee:	623b      	str	r3, [r7, #32]
      pDest++;
 8013ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ef2:	3301      	adds	r3, #1
 8013ef4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8013ef6:	8bfb      	ldrh	r3, [r7, #30]
 8013ef8:	3b01      	subs	r3, #1
 8013efa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013efc:	8bfb      	ldrh	r3, [r7, #30]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d1ea      	bne.n	8013ed8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8013f04:	4618      	mov	r0, r3
 8013f06:	372c      	adds	r7, #44	@ 0x2c
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0e:	4770      	bx	lr

08013f10 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8013f10:	b480      	push	{r7}
 8013f12:	b085      	sub	sp, #20
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	6078      	str	r0, [r7, #4]
 8013f18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013f1e:	683b      	ldr	r3, [r7, #0]
 8013f20:	781b      	ldrb	r3, [r3, #0]
 8013f22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013f24:	683b      	ldr	r3, [r7, #0]
 8013f26:	785b      	ldrb	r3, [r3, #1]
 8013f28:	2b01      	cmp	r3, #1
 8013f2a:	d12c      	bne.n	8013f86 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013f2c:	68bb      	ldr	r3, [r7, #8]
 8013f2e:	015a      	lsls	r2, r3, #5
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	4413      	add	r3, r2
 8013f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	db12      	blt.n	8013f64 <USB_EPSetStall+0x54>
 8013f3e:	68bb      	ldr	r3, [r7, #8]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d00f      	beq.n	8013f64 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013f44:	68bb      	ldr	r3, [r7, #8]
 8013f46:	015a      	lsls	r2, r3, #5
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	4413      	add	r3, r2
 8013f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	68ba      	ldr	r2, [r7, #8]
 8013f54:	0151      	lsls	r1, r2, #5
 8013f56:	68fa      	ldr	r2, [r7, #12]
 8013f58:	440a      	add	r2, r1
 8013f5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013f5e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8013f62:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	015a      	lsls	r2, r3, #5
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	4413      	add	r3, r2
 8013f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	68ba      	ldr	r2, [r7, #8]
 8013f74:	0151      	lsls	r1, r2, #5
 8013f76:	68fa      	ldr	r2, [r7, #12]
 8013f78:	440a      	add	r2, r1
 8013f7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013f7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8013f82:	6013      	str	r3, [r2, #0]
 8013f84:	e02b      	b.n	8013fde <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013f86:	68bb      	ldr	r3, [r7, #8]
 8013f88:	015a      	lsls	r2, r3, #5
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	4413      	add	r3, r2
 8013f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	db12      	blt.n	8013fbe <USB_EPSetStall+0xae>
 8013f98:	68bb      	ldr	r3, [r7, #8]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d00f      	beq.n	8013fbe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013f9e:	68bb      	ldr	r3, [r7, #8]
 8013fa0:	015a      	lsls	r2, r3, #5
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	4413      	add	r3, r2
 8013fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	68ba      	ldr	r2, [r7, #8]
 8013fae:	0151      	lsls	r1, r2, #5
 8013fb0:	68fa      	ldr	r2, [r7, #12]
 8013fb2:	440a      	add	r2, r1
 8013fb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013fb8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8013fbc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	015a      	lsls	r2, r3, #5
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	4413      	add	r3, r2
 8013fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	68ba      	ldr	r2, [r7, #8]
 8013fce:	0151      	lsls	r1, r2, #5
 8013fd0:	68fa      	ldr	r2, [r7, #12]
 8013fd2:	440a      	add	r2, r1
 8013fd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013fd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8013fdc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013fde:	2300      	movs	r3, #0
}
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3714      	adds	r7, #20
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fea:	4770      	bx	lr

08013fec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8013fec:	b480      	push	{r7}
 8013fee:	b085      	sub	sp, #20
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
 8013ff4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	781b      	ldrb	r3, [r3, #0]
 8013ffe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014000:	683b      	ldr	r3, [r7, #0]
 8014002:	785b      	ldrb	r3, [r3, #1]
 8014004:	2b01      	cmp	r3, #1
 8014006:	d128      	bne.n	801405a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014008:	68bb      	ldr	r3, [r7, #8]
 801400a:	015a      	lsls	r2, r3, #5
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	4413      	add	r3, r2
 8014010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	68ba      	ldr	r2, [r7, #8]
 8014018:	0151      	lsls	r1, r2, #5
 801401a:	68fa      	ldr	r2, [r7, #12]
 801401c:	440a      	add	r2, r1
 801401e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014022:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8014026:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014028:	683b      	ldr	r3, [r7, #0]
 801402a:	791b      	ldrb	r3, [r3, #4]
 801402c:	2b03      	cmp	r3, #3
 801402e:	d003      	beq.n	8014038 <USB_EPClearStall+0x4c>
 8014030:	683b      	ldr	r3, [r7, #0]
 8014032:	791b      	ldrb	r3, [r3, #4]
 8014034:	2b02      	cmp	r3, #2
 8014036:	d138      	bne.n	80140aa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014038:	68bb      	ldr	r3, [r7, #8]
 801403a:	015a      	lsls	r2, r3, #5
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	4413      	add	r3, r2
 8014040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	68ba      	ldr	r2, [r7, #8]
 8014048:	0151      	lsls	r1, r2, #5
 801404a:	68fa      	ldr	r2, [r7, #12]
 801404c:	440a      	add	r2, r1
 801404e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014056:	6013      	str	r3, [r2, #0]
 8014058:	e027      	b.n	80140aa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	015a      	lsls	r2, r3, #5
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	4413      	add	r3, r2
 8014062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	68ba      	ldr	r2, [r7, #8]
 801406a:	0151      	lsls	r1, r2, #5
 801406c:	68fa      	ldr	r2, [r7, #12]
 801406e:	440a      	add	r2, r1
 8014070:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014074:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8014078:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801407a:	683b      	ldr	r3, [r7, #0]
 801407c:	791b      	ldrb	r3, [r3, #4]
 801407e:	2b03      	cmp	r3, #3
 8014080:	d003      	beq.n	801408a <USB_EPClearStall+0x9e>
 8014082:	683b      	ldr	r3, [r7, #0]
 8014084:	791b      	ldrb	r3, [r3, #4]
 8014086:	2b02      	cmp	r3, #2
 8014088:	d10f      	bne.n	80140aa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801408a:	68bb      	ldr	r3, [r7, #8]
 801408c:	015a      	lsls	r2, r3, #5
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	4413      	add	r3, r2
 8014092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	68ba      	ldr	r2, [r7, #8]
 801409a:	0151      	lsls	r1, r2, #5
 801409c:	68fa      	ldr	r2, [r7, #12]
 801409e:	440a      	add	r2, r1
 80140a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80140a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80140a8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80140aa:	2300      	movs	r3, #0
}
 80140ac:	4618      	mov	r0, r3
 80140ae:	3714      	adds	r7, #20
 80140b0:	46bd      	mov	sp, r7
 80140b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b6:	4770      	bx	lr

080140b8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80140b8:	b480      	push	{r7}
 80140ba:	b085      	sub	sp, #20
 80140bc:	af00      	add	r7, sp, #0
 80140be:	6078      	str	r0, [r7, #4]
 80140c0:	460b      	mov	r3, r1
 80140c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	68fa      	ldr	r2, [r7, #12]
 80140d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80140d6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80140da:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80140e2:	681a      	ldr	r2, [r3, #0]
 80140e4:	78fb      	ldrb	r3, [r7, #3]
 80140e6:	011b      	lsls	r3, r3, #4
 80140e8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80140ec:	68f9      	ldr	r1, [r7, #12]
 80140ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80140f2:	4313      	orrs	r3, r2
 80140f4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80140f6:	2300      	movs	r3, #0
}
 80140f8:	4618      	mov	r0, r3
 80140fa:	3714      	adds	r7, #20
 80140fc:	46bd      	mov	sp, r7
 80140fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014102:	4770      	bx	lr

08014104 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8014104:	b480      	push	{r7}
 8014106:	b085      	sub	sp, #20
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	68fa      	ldr	r2, [r7, #12]
 801411a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801411e:	f023 0303 	bic.w	r3, r3, #3
 8014122:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801412a:	685b      	ldr	r3, [r3, #4]
 801412c:	68fa      	ldr	r2, [r7, #12]
 801412e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014132:	f023 0302 	bic.w	r3, r3, #2
 8014136:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014138:	2300      	movs	r3, #0
}
 801413a:	4618      	mov	r0, r3
 801413c:	3714      	adds	r7, #20
 801413e:	46bd      	mov	sp, r7
 8014140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014144:	4770      	bx	lr

08014146 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8014146:	b480      	push	{r7}
 8014148:	b085      	sub	sp, #20
 801414a:	af00      	add	r7, sp, #0
 801414c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	68fa      	ldr	r2, [r7, #12]
 801415c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8014160:	f023 0303 	bic.w	r3, r3, #3
 8014164:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801416c:	685b      	ldr	r3, [r3, #4]
 801416e:	68fa      	ldr	r2, [r7, #12]
 8014170:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014174:	f043 0302 	orr.w	r3, r3, #2
 8014178:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801417a:	2300      	movs	r3, #0
}
 801417c:	4618      	mov	r0, r3
 801417e:	3714      	adds	r7, #20
 8014180:	46bd      	mov	sp, r7
 8014182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014186:	4770      	bx	lr

08014188 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8014188:	b480      	push	{r7}
 801418a:	b085      	sub	sp, #20
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	695b      	ldr	r3, [r3, #20]
 8014194:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	699b      	ldr	r3, [r3, #24]
 801419a:	68fa      	ldr	r2, [r7, #12]
 801419c:	4013      	ands	r3, r2
 801419e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80141a0:	68fb      	ldr	r3, [r7, #12]
}
 80141a2:	4618      	mov	r0, r3
 80141a4:	3714      	adds	r7, #20
 80141a6:	46bd      	mov	sp, r7
 80141a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ac:	4770      	bx	lr

080141ae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80141ae:	b480      	push	{r7}
 80141b0:	b085      	sub	sp, #20
 80141b2:	af00      	add	r7, sp, #0
 80141b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80141c0:	699b      	ldr	r3, [r3, #24]
 80141c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80141ca:	69db      	ldr	r3, [r3, #28]
 80141cc:	68ba      	ldr	r2, [r7, #8]
 80141ce:	4013      	ands	r3, r2
 80141d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80141d2:	68bb      	ldr	r3, [r7, #8]
 80141d4:	0c1b      	lsrs	r3, r3, #16
}
 80141d6:	4618      	mov	r0, r3
 80141d8:	3714      	adds	r7, #20
 80141da:	46bd      	mov	sp, r7
 80141dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e0:	4770      	bx	lr

080141e2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80141e2:	b480      	push	{r7}
 80141e4:	b085      	sub	sp, #20
 80141e6:	af00      	add	r7, sp, #0
 80141e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80141f4:	699b      	ldr	r3, [r3, #24]
 80141f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80141fe:	69db      	ldr	r3, [r3, #28]
 8014200:	68ba      	ldr	r2, [r7, #8]
 8014202:	4013      	ands	r3, r2
 8014204:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014206:	68bb      	ldr	r3, [r7, #8]
 8014208:	b29b      	uxth	r3, r3
}
 801420a:	4618      	mov	r0, r3
 801420c:	3714      	adds	r7, #20
 801420e:	46bd      	mov	sp, r7
 8014210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014214:	4770      	bx	lr

08014216 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014216:	b480      	push	{r7}
 8014218:	b085      	sub	sp, #20
 801421a:	af00      	add	r7, sp, #0
 801421c:	6078      	str	r0, [r7, #4]
 801421e:	460b      	mov	r3, r1
 8014220:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014226:	78fb      	ldrb	r3, [r7, #3]
 8014228:	015a      	lsls	r2, r3, #5
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	4413      	add	r3, r2
 801422e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014232:	689b      	ldr	r3, [r3, #8]
 8014234:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801423c:	695b      	ldr	r3, [r3, #20]
 801423e:	68ba      	ldr	r2, [r7, #8]
 8014240:	4013      	ands	r3, r2
 8014242:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014244:	68bb      	ldr	r3, [r7, #8]
}
 8014246:	4618      	mov	r0, r3
 8014248:	3714      	adds	r7, #20
 801424a:	46bd      	mov	sp, r7
 801424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014250:	4770      	bx	lr

08014252 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014252:	b480      	push	{r7}
 8014254:	b087      	sub	sp, #28
 8014256:	af00      	add	r7, sp, #0
 8014258:	6078      	str	r0, [r7, #4]
 801425a:	460b      	mov	r3, r1
 801425c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014262:	697b      	ldr	r3, [r7, #20]
 8014264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014268:	691b      	ldr	r3, [r3, #16]
 801426a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801426c:	697b      	ldr	r3, [r7, #20]
 801426e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014274:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014276:	78fb      	ldrb	r3, [r7, #3]
 8014278:	f003 030f 	and.w	r3, r3, #15
 801427c:	68fa      	ldr	r2, [r7, #12]
 801427e:	fa22 f303 	lsr.w	r3, r2, r3
 8014282:	01db      	lsls	r3, r3, #7
 8014284:	b2db      	uxtb	r3, r3
 8014286:	693a      	ldr	r2, [r7, #16]
 8014288:	4313      	orrs	r3, r2
 801428a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801428c:	78fb      	ldrb	r3, [r7, #3]
 801428e:	015a      	lsls	r2, r3, #5
 8014290:	697b      	ldr	r3, [r7, #20]
 8014292:	4413      	add	r3, r2
 8014294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014298:	689b      	ldr	r3, [r3, #8]
 801429a:	693a      	ldr	r2, [r7, #16]
 801429c:	4013      	ands	r3, r2
 801429e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80142a0:	68bb      	ldr	r3, [r7, #8]
}
 80142a2:	4618      	mov	r0, r3
 80142a4:	371c      	adds	r7, #28
 80142a6:	46bd      	mov	sp, r7
 80142a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ac:	4770      	bx	lr

080142ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80142ae:	b480      	push	{r7}
 80142b0:	b083      	sub	sp, #12
 80142b2:	af00      	add	r7, sp, #0
 80142b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	695b      	ldr	r3, [r3, #20]
 80142ba:	f003 0301 	and.w	r3, r3, #1
}
 80142be:	4618      	mov	r0, r3
 80142c0:	370c      	adds	r7, #12
 80142c2:	46bd      	mov	sp, r7
 80142c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c8:	4770      	bx	lr
	...

080142cc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80142cc:	b480      	push	{r7}
 80142ce:	b085      	sub	sp, #20
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80142de:	681a      	ldr	r2, [r3, #0]
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80142e6:	4619      	mov	r1, r3
 80142e8:	4b09      	ldr	r3, [pc, #36]	@ (8014310 <USB_ActivateSetup+0x44>)
 80142ea:	4013      	ands	r3, r2
 80142ec:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80142f4:	685b      	ldr	r3, [r3, #4]
 80142f6:	68fa      	ldr	r2, [r7, #12]
 80142f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80142fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014300:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014302:	2300      	movs	r3, #0
}
 8014304:	4618      	mov	r0, r3
 8014306:	3714      	adds	r7, #20
 8014308:	46bd      	mov	sp, r7
 801430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430e:	4770      	bx	lr
 8014310:	fffff800 	.word	0xfffff800

08014314 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8014314:	b480      	push	{r7}
 8014316:	b087      	sub	sp, #28
 8014318:	af00      	add	r7, sp, #0
 801431a:	60f8      	str	r0, [r7, #12]
 801431c:	460b      	mov	r3, r1
 801431e:	607a      	str	r2, [r7, #4]
 8014320:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	333c      	adds	r3, #60	@ 0x3c
 801432a:	3304      	adds	r3, #4
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014330:	693b      	ldr	r3, [r7, #16]
 8014332:	4a26      	ldr	r2, [pc, #152]	@ (80143cc <USB_EP0_OutStart+0xb8>)
 8014334:	4293      	cmp	r3, r2
 8014336:	d90a      	bls.n	801434e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014338:	697b      	ldr	r3, [r7, #20]
 801433a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014344:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014348:	d101      	bne.n	801434e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801434a:	2300      	movs	r3, #0
 801434c:	e037      	b.n	80143be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801434e:	697b      	ldr	r3, [r7, #20]
 8014350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014354:	461a      	mov	r2, r3
 8014356:	2300      	movs	r3, #0
 8014358:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801435a:	697b      	ldr	r3, [r7, #20]
 801435c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014360:	691b      	ldr	r3, [r3, #16]
 8014362:	697a      	ldr	r2, [r7, #20]
 8014364:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014368:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801436c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801436e:	697b      	ldr	r3, [r7, #20]
 8014370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014374:	691b      	ldr	r3, [r3, #16]
 8014376:	697a      	ldr	r2, [r7, #20]
 8014378:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801437c:	f043 0318 	orr.w	r3, r3, #24
 8014380:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014382:	697b      	ldr	r3, [r7, #20]
 8014384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014388:	691b      	ldr	r3, [r3, #16]
 801438a:	697a      	ldr	r2, [r7, #20]
 801438c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014390:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8014394:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014396:	7afb      	ldrb	r3, [r7, #11]
 8014398:	2b01      	cmp	r3, #1
 801439a:	d10f      	bne.n	80143bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801439c:	697b      	ldr	r3, [r7, #20]
 801439e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80143a2:	461a      	mov	r2, r3
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80143a8:	697b      	ldr	r3, [r7, #20]
 80143aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	697a      	ldr	r2, [r7, #20]
 80143b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80143b6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80143ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80143bc:	2300      	movs	r3, #0
}
 80143be:	4618      	mov	r0, r3
 80143c0:	371c      	adds	r7, #28
 80143c2:	46bd      	mov	sp, r7
 80143c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c8:	4770      	bx	lr
 80143ca:	bf00      	nop
 80143cc:	4f54300a 	.word	0x4f54300a

080143d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80143d0:	b480      	push	{r7}
 80143d2:	b085      	sub	sp, #20
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80143d8:	2300      	movs	r3, #0
 80143da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	3301      	adds	r3, #1
 80143e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80143e8:	d901      	bls.n	80143ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80143ea:	2303      	movs	r3, #3
 80143ec:	e01b      	b.n	8014426 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	691b      	ldr	r3, [r3, #16]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	daf2      	bge.n	80143dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80143f6:	2300      	movs	r3, #0
 80143f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	691b      	ldr	r3, [r3, #16]
 80143fe:	f043 0201 	orr.w	r2, r3, #1
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	3301      	adds	r3, #1
 801440a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014412:	d901      	bls.n	8014418 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014414:	2303      	movs	r3, #3
 8014416:	e006      	b.n	8014426 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	691b      	ldr	r3, [r3, #16]
 801441c:	f003 0301 	and.w	r3, r3, #1
 8014420:	2b01      	cmp	r3, #1
 8014422:	d0f0      	beq.n	8014406 <USB_CoreReset+0x36>

  return HAL_OK;
 8014424:	2300      	movs	r3, #0
}
 8014426:	4618      	mov	r0, r3
 8014428:	3714      	adds	r7, #20
 801442a:	46bd      	mov	sp, r7
 801442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014430:	4770      	bx	lr

08014432 <XBEE_Init>:
#include "XBEE.h"

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t XBEE_Init(XBEE_HandleTypeDef *hxbee) {
 8014432:	b580      	push	{r7, lr}
 8014434:	b082      	sub	sp, #8
 8014436:	af00      	add	r7, sp, #0
 8014438:	6078      	str	r0, [r7, #4]
	// Set up the variables
	hxbee->pkt_DMAHead   = 0;
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	2200      	movs	r2, #0
 801443e:	741a      	strb	r2, [r3, #16]
	hxbee->pktRx_state   = 0;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	2200      	movs	r2, #0
 8014444:	745a      	strb	r2, [r3, #17]
	hxbee->pktTx_state   = 0;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	2200      	movs	r2, #0
 801444a:	76da      	strb	r2, [r3, #27]
	hxbee->pktRx_idxPush = 0;
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	2200      	movs	r2, #0
 8014450:	765a      	strb	r2, [r3, #25]
	hxbee->pktRx_idxPop  = 0;
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	2200      	movs	r2, #0
 8014456:	769a      	strb	r2, [r3, #26]
	hxbee->pktTx_idxPush = 0;
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	2200      	movs	r2, #0
 801445c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	hxbee->pktTx_idxPop  = 0;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	2200      	movs	r2, #0
 8014464:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	// Allocate mem
	hxbee->pkt_bufDMA  = malloc(PKT_RAWSIZE);
 8014468:	2044      	movs	r0, #68	@ 0x44
 801446a:	f002 ff1f 	bl	80172ac <malloc>
 801446e:	4603      	mov	r3, r0
 8014470:	461a      	mov	r2, r3
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	609a      	str	r2, [r3, #8]
	hxbee->pkt_bufPart = malloc(PKT_RAWSIZE);
 8014476:	2044      	movs	r0, #68	@ 0x44
 8014478:	f002 ff18 	bl	80172ac <malloc>
 801447c:	4603      	mov	r3, r0
 801447e:	461a      	mov	r2, r3
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	60da      	str	r2, [r3, #12]
	hxbee->pktRx_mem   = malloc(hxbee->pktRx_max*PKT_RAWSIZE);
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	7e1b      	ldrb	r3, [r3, #24]
 8014488:	461a      	mov	r2, r3
 801448a:	4613      	mov	r3, r2
 801448c:	011b      	lsls	r3, r3, #4
 801448e:	4413      	add	r3, r2
 8014490:	009b      	lsls	r3, r3, #2
 8014492:	4618      	mov	r0, r3
 8014494:	f002 ff0a 	bl	80172ac <malloc>
 8014498:	4603      	mov	r3, r0
 801449a:	461a      	mov	r2, r3
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	615a      	str	r2, [r3, #20]
	hxbee->pktTx_mem   = malloc(hxbee->pktTx_max*PKT_RAWSIZE);
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80144a6:	461a      	mov	r2, r3
 80144a8:	4613      	mov	r3, r2
 80144aa:	011b      	lsls	r3, r3, #4
 80144ac:	4413      	add	r3, r2
 80144ae:	009b      	lsls	r3, r3, #2
 80144b0:	4618      	mov	r0, r3
 80144b2:	f002 fefb 	bl	80172ac <malloc>
 80144b6:	4603      	mov	r3, r0
 80144b8:	461a      	mov	r2, r3
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	61da      	str	r2, [r3, #28]

	// Begin the cyclic UART capture
	// Make sure the DMA is circular
	return HAL_UART_Receive_DMA(hxbee->uart_handle, hxbee->pkt_bufDMA, PKT_RAWSIZE);
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	6818      	ldr	r0, [r3, #0]
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	689b      	ldr	r3, [r3, #8]
 80144c6:	2244      	movs	r2, #68	@ 0x44
 80144c8:	4619      	mov	r1, r3
 80144ca:	f7fc fd4b 	bl	8010f64 <HAL_UART_Receive_DMA>
 80144ce:	4603      	mov	r3, r0
}
 80144d0:	4618      	mov	r0, r3
 80144d2:	3708      	adds	r7, #8
 80144d4:	46bd      	mov	sp, r7
 80144d6:	bd80      	pop	{r7, pc}

080144d8 <XBEE_RXPacket>:

// Gets a packet if there's one buffered
// 0 - Success
// 1 - Nothing to Get
uint8_t XBEE_RXPacket(XBEE_HandleTypeDef *hxbee, uint8_t **pRxBuffer, uint16_t *pkt_num) {
 80144d8:	b480      	push	{r7}
 80144da:	b087      	sub	sp, #28
 80144dc:	af00      	add	r7, sp, #0
 80144de:	60f8      	str	r0, [r7, #12]
 80144e0:	60b9      	str	r1, [r7, #8]
 80144e2:	607a      	str	r2, [r7, #4]
	// Check if there's an available packet
	if (hxbee->pktRx_idxPop == hxbee->pktRx_idxPush) return 1;
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	7e9a      	ldrb	r2, [r3, #26]
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	7e5b      	ldrb	r3, [r3, #25]
 80144ec:	429a      	cmp	r2, r3
 80144ee:	d101      	bne.n	80144f4 <XBEE_RXPacket+0x1c>
 80144f0:	2301      	movs	r3, #1
 80144f2:	e05b      	b.n	80145ac <XBEE_RXPacket+0xd4>

	// There's a packet up for grabs, get a pointer to the raw pkt incl. Header
	uint8_t *pRxInternal = hxbee->pktRx_mem + hxbee->pktRx_idxPop*PKT_RAWSIZE;
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	695a      	ldr	r2, [r3, #20]
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	7e9b      	ldrb	r3, [r3, #26]
 80144fc:	4619      	mov	r1, r3
 80144fe:	460b      	mov	r3, r1
 8014500:	011b      	lsls	r3, r3, #4
 8014502:	440b      	add	r3, r1
 8014504:	009b      	lsls	r3, r3, #2
 8014506:	4413      	add	r3, r2
 8014508:	613b      	str	r3, [r7, #16]

	hxbee->pktRx_idxPop += 1;
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	7e9b      	ldrb	r3, [r3, #26]
 801450e:	3301      	adds	r3, #1
 8014510:	b2da      	uxtb	r2, r3
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	769a      	strb	r2, [r3, #26]
	hxbee->pktRx_idxPop %= hxbee->pktRx_max;
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	7e9b      	ldrb	r3, [r3, #26]
 801451a:	68fa      	ldr	r2, [r7, #12]
 801451c:	7e12      	ldrb	r2, [r2, #24]
 801451e:	fbb3 f1f2 	udiv	r1, r3, r2
 8014522:	fb01 f202 	mul.w	r2, r1, r2
 8014526:	1a9b      	subs	r3, r3, r2
 8014528:	b2da      	uxtb	r2, r3
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	769a      	strb	r2, [r3, #26]

	// Compute the checksum
	uint8_t checksum = 0x00;
 801452e:	2300      	movs	r3, #0
 8014530:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 8014532:	2300      	movs	r3, #0
 8014534:	75bb      	strb	r3, [r7, #22]
 8014536:	e00e      	b.n	8014556 <XBEE_RXPacket+0x7e>
		if (i == 3) continue;
 8014538:	7dbb      	ldrb	r3, [r7, #22]
 801453a:	2b03      	cmp	r3, #3
 801453c:	d007      	beq.n	801454e <XBEE_RXPacket+0x76>
		checksum ^= pRxInternal[i];
 801453e:	7dbb      	ldrb	r3, [r7, #22]
 8014540:	693a      	ldr	r2, [r7, #16]
 8014542:	4413      	add	r3, r2
 8014544:	781a      	ldrb	r2, [r3, #0]
 8014546:	7dfb      	ldrb	r3, [r7, #23]
 8014548:	4053      	eors	r3, r2
 801454a:	75fb      	strb	r3, [r7, #23]
 801454c:	e000      	b.n	8014550 <XBEE_RXPacket+0x78>
		if (i == 3) continue;
 801454e:	bf00      	nop
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 8014550:	7dbb      	ldrb	r3, [r7, #22]
 8014552:	3301      	adds	r3, #1
 8014554:	75bb      	strb	r3, [r7, #22]
 8014556:	7dbb      	ldrb	r3, [r7, #22]
 8014558:	2b43      	cmp	r3, #67	@ 0x43
 801455a:	d9ed      	bls.n	8014538 <XBEE_RXPacket+0x60>
	}

	// Packet corrupted, mismatch checksum
	if (pRxInternal[3] != checksum) return 1;
 801455c:	693b      	ldr	r3, [r7, #16]
 801455e:	3303      	adds	r3, #3
 8014560:	781b      	ldrb	r3, [r3, #0]
 8014562:	7dfa      	ldrb	r2, [r7, #23]
 8014564:	429a      	cmp	r2, r3
 8014566:	d001      	beq.n	801456c <XBEE_RXPacket+0x94>
 8014568:	2301      	movs	r3, #1
 801456a:	e01f      	b.n	80145ac <XBEE_RXPacket+0xd4>

	// Get the 16 bit packet number field
	*pkt_num = 0;
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	2200      	movs	r2, #0
 8014570:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[1];
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	881b      	ldrh	r3, [r3, #0]
 8014576:	693a      	ldr	r2, [r7, #16]
 8014578:	3201      	adds	r2, #1
 801457a:	7812      	ldrb	r2, [r2, #0]
 801457c:	4413      	add	r3, r2
 801457e:	b29a      	uxth	r2, r3
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	801a      	strh	r2, [r3, #0]
	*pkt_num *= 256;
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	881b      	ldrh	r3, [r3, #0]
 8014588:	021b      	lsls	r3, r3, #8
 801458a:	b29a      	uxth	r2, r3
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[2];
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	881b      	ldrh	r3, [r3, #0]
 8014594:	693a      	ldr	r2, [r7, #16]
 8014596:	3202      	adds	r2, #2
 8014598:	7812      	ldrb	r2, [r2, #0]
 801459a:	4413      	add	r3, r2
 801459c:	b29a      	uxth	r2, r3
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	801a      	strh	r2, [r3, #0]

	*pRxBuffer = pRxInternal + 4;
 80145a2:	693b      	ldr	r3, [r7, #16]
 80145a4:	1d1a      	adds	r2, r3, #4
 80145a6:	68bb      	ldr	r3, [r7, #8]
 80145a8:	601a      	str	r2, [r3, #0]

	return 0;
 80145aa:	2300      	movs	r3, #0
}
 80145ac:	4618      	mov	r0, r3
 80145ae:	371c      	adds	r7, #28
 80145b0:	46bd      	mov	sp, r7
 80145b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b6:	4770      	bx	lr

080145b8 <XBEE_TXPacket>:

uint8_t XBEE_TXPacket(XBEE_HandleTypeDef *hxbee, uint8_t *pTxBuffer, uint16_t pkt_num) {
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b086      	sub	sp, #24
 80145bc:	af00      	add	r7, sp, #0
 80145be:	60f8      	str	r0, [r7, #12]
 80145c0:	60b9      	str	r1, [r7, #8]
 80145c2:	4613      	mov	r3, r2
 80145c4:	80fb      	strh	r3, [r7, #6]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktTx_idxPush + 1;
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80145cc:	3301      	adds	r3, #1
 80145ce:	75bb      	strb	r3, [r7, #22]
	pkt_idx %= hxbee->pktTx_max;
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80145d6:	7dbb      	ldrb	r3, [r7, #22]
 80145d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80145dc:	fb01 f202 	mul.w	r2, r1, r2
 80145e0:	1a9b      	subs	r3, r3, r2
 80145e2:	75bb      	strb	r3, [r7, #22]

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktTx_idxPop) return 1;
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80145ea:	7dba      	ldrb	r2, [r7, #22]
 80145ec:	429a      	cmp	r2, r3
 80145ee:	d101      	bne.n	80145f4 <XBEE_TXPacket+0x3c>
 80145f0:	2301      	movs	r3, #1
 80145f2:	e047      	b.n	8014684 <XBEE_TXPacket+0xcc>

	// Get a reference to this memory location
	uint8_t *newPkt = hxbee->pktTx_mem + hxbee->pktTx_idxPush*PKT_RAWSIZE;
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	69da      	ldr	r2, [r3, #28]
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80145fe:	4619      	mov	r1, r3
 8014600:	460b      	mov	r3, r1
 8014602:	011b      	lsls	r3, r3, #4
 8014604:	440b      	add	r3, r1
 8014606:	009b      	lsls	r3, r3, #2
 8014608:	4413      	add	r3, r2
 801460a:	613b      	str	r3, [r7, #16]

	// Construct the packet
	newPkt[0] = PKT_DELIMETER;
 801460c:	693b      	ldr	r3, [r7, #16]
 801460e:	22aa      	movs	r2, #170	@ 0xaa
 8014610:	701a      	strb	r2, [r3, #0]
	newPkt[1] = pkt_num >> 8;
 8014612:	88fb      	ldrh	r3, [r7, #6]
 8014614:	0a1b      	lsrs	r3, r3, #8
 8014616:	b29a      	uxth	r2, r3
 8014618:	693b      	ldr	r3, [r7, #16]
 801461a:	3301      	adds	r3, #1
 801461c:	b2d2      	uxtb	r2, r2
 801461e:	701a      	strb	r2, [r3, #0]
	newPkt[2] = pkt_num & 0x00FF;
 8014620:	693b      	ldr	r3, [r7, #16]
 8014622:	3302      	adds	r3, #2
 8014624:	88fa      	ldrh	r2, [r7, #6]
 8014626:	b2d2      	uxtb	r2, r2
 8014628:	701a      	strb	r2, [r3, #0]

	memcpy(newPkt + 4, pTxBuffer, PKT_DATASIZE);
 801462a:	693b      	ldr	r3, [r7, #16]
 801462c:	3304      	adds	r3, #4
 801462e:	2240      	movs	r2, #64	@ 0x40
 8014630:	68b9      	ldr	r1, [r7, #8]
 8014632:	4618      	mov	r0, r3
 8014634:	f002 ff56 	bl	80174e4 <memcpy>

	// Compute the checksum
	newPkt[3] = 0x00;
 8014638:	693b      	ldr	r3, [r7, #16]
 801463a:	3303      	adds	r3, #3
 801463c:	2200      	movs	r2, #0
 801463e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 8014640:	2300      	movs	r3, #0
 8014642:	75fb      	strb	r3, [r7, #23]
 8014644:	e013      	b.n	801466e <XBEE_TXPacket+0xb6>
		if (i == 3) continue;
 8014646:	7dfb      	ldrb	r3, [r7, #23]
 8014648:	2b03      	cmp	r3, #3
 801464a:	d00c      	beq.n	8014666 <XBEE_TXPacket+0xae>
		newPkt[3] ^= newPkt[i];
 801464c:	693b      	ldr	r3, [r7, #16]
 801464e:	3303      	adds	r3, #3
 8014650:	7819      	ldrb	r1, [r3, #0]
 8014652:	7dfb      	ldrb	r3, [r7, #23]
 8014654:	693a      	ldr	r2, [r7, #16]
 8014656:	4413      	add	r3, r2
 8014658:	781a      	ldrb	r2, [r3, #0]
 801465a:	693b      	ldr	r3, [r7, #16]
 801465c:	3303      	adds	r3, #3
 801465e:	404a      	eors	r2, r1
 8014660:	b2d2      	uxtb	r2, r2
 8014662:	701a      	strb	r2, [r3, #0]
 8014664:	e000      	b.n	8014668 <XBEE_TXPacket+0xb0>
		if (i == 3) continue;
 8014666:	bf00      	nop
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 8014668:	7dfb      	ldrb	r3, [r7, #23]
 801466a:	3301      	adds	r3, #1
 801466c:	75fb      	strb	r3, [r7, #23]
 801466e:	7dfb      	ldrb	r3, [r7, #23]
 8014670:	2b43      	cmp	r3, #67	@ 0x43
 8014672:	d9e8      	bls.n	8014646 <XBEE_TXPacket+0x8e>
	}

	// Try and immediately send the packet
	// TODO: Set the bust state, interrupts
	return HAL_UART_Transmit(hxbee->uart_handle, newPkt, PKT_RAWSIZE, 30);	// Transmit the buffer
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	6818      	ldr	r0, [r3, #0]
 8014678:	231e      	movs	r3, #30
 801467a:	2244      	movs	r2, #68	@ 0x44
 801467c:	6939      	ldr	r1, [r7, #16]
 801467e:	f7fc fbe3 	bl	8010e48 <HAL_UART_Transmit>
 8014682:	4603      	mov	r3, r0
}
 8014684:	4618      	mov	r0, r3
 8014686:	3718      	adds	r7, #24
 8014688:	46bd      	mov	sp, r7
 801468a:	bd80      	pop	{r7, pc}

0801468c <XBEE_RX_DMACallback>:
// Process incoming packets on DMA callback
// 0 - Success
// 1 - Buffer full
// 2 - Packet malformed
// 3 - Checksum mismatch
uint8_t XBEE_RX_DMACallback(XBEE_HandleTypeDef *hxbee) {
 801468c:	b580      	push	{r7, lr}
 801468e:	b096      	sub	sp, #88	@ 0x58
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktRx_idxPush + 1;
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	7e5b      	ldrb	r3, [r3, #25]
 8014698:	3301      	adds	r3, #1
 801469a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	pkt_idx %= hxbee->pktRx_max;
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	7e1a      	ldrb	r2, [r3, #24]
 80146a2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80146a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80146aa:	fb01 f202 	mul.w	r2, r1, r2
 80146ae:	1a9b      	subs	r3, r3, r2
 80146b0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktRx_idxPop) return 1;
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	7e9b      	ldrb	r3, [r3, #26]
 80146b8:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80146bc:	429a      	cmp	r2, r3
 80146be:	d101      	bne.n	80146c4 <XBEE_RX_DMACallback+0x38>
 80146c0:	2301      	movs	r3, #1
 80146c2:	e097      	b.n	80147f4 <XBEE_RX_DMACallback+0x168>

	// Create a temporary buffer for the complete packet
	uint8_t pkt_cplt[PKT_RAWSIZE];

	// Store the last readHead, we need this for packet reconstruction if bytes got lost
	uint8_t old_head = hxbee->pkt_DMAHead;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	7c1b      	ldrb	r3, [r3, #16]
 80146c8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	// Find the delimeter
	uint8_t found_delim = 0;
 80146cc:	2300      	movs	r3, #0
 80146ce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 80146d2:	2300      	movs	r3, #0
 80146d4:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80146d8:	e027      	b.n	801472a <XBEE_RX_DMACallback+0x9e>
		uint8_t packet_ptr = (circular_ptr + hxbee->pkt_DMAHead) % PKT_RAWSIZE;
 80146da:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80146de:	687a      	ldr	r2, [r7, #4]
 80146e0:	7c12      	ldrb	r2, [r2, #16]
 80146e2:	441a      	add	r2, r3
 80146e4:	4b45      	ldr	r3, [pc, #276]	@ (80147fc <XBEE_RX_DMACallback+0x170>)
 80146e6:	fb83 1302 	smull	r1, r3, r3, r2
 80146ea:	1159      	asrs	r1, r3, #5
 80146ec:	17d3      	asrs	r3, r2, #31
 80146ee:	1ac9      	subs	r1, r1, r3
 80146f0:	460b      	mov	r3, r1
 80146f2:	011b      	lsls	r3, r3, #4
 80146f4:	440b      	add	r3, r1
 80146f6:	009b      	lsls	r3, r3, #2
 80146f8:	1ad1      	subs	r1, r2, r3
 80146fa:	460b      	mov	r3, r1
 80146fc:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		if (hxbee->pkt_bufDMA[packet_ptr] == PKT_DELIMETER) {
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	689a      	ldr	r2, [r3, #8]
 8014704:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8014708:	4413      	add	r3, r2
 801470a:	781b      	ldrb	r3, [r3, #0]
 801470c:	2baa      	cmp	r3, #170	@ 0xaa
 801470e:	d107      	bne.n	8014720 <XBEE_RX_DMACallback+0x94>
			found_delim = 1;					// Update flag
 8014710:	2301      	movs	r3, #1
 8014712:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			hxbee->pkt_DMAHead = packet_ptr;	// Move the readHead
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801471c:	741a      	strb	r2, [r3, #16]
			break;
 801471e:	e008      	b.n	8014732 <XBEE_RX_DMACallback+0xa6>
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 8014720:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8014724:	3301      	adds	r3, #1
 8014726:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 801472a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 801472e:	2b43      	cmp	r3, #67	@ 0x43
 8014730:	d9d3      	bls.n	80146da <XBEE_RX_DMACallback+0x4e>
		}
	}

	// Couldn't find the delimeter, this packet is FUBAR, discard the whole thing
	if (!found_delim) return 2;
 8014732:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014736:	2b00      	cmp	r3, #0
 8014738:	d101      	bne.n	801473e <XBEE_RX_DMACallback+0xb2>
 801473a:	2302      	movs	r3, #2
 801473c:	e05a      	b.n	80147f4 <XBEE_RX_DMACallback+0x168>

	// Copy the partial packet contents into the completed packet buffer
	memcpy(pkt_cplt, hxbee->pkt_bufPart, PKT_RAWSIZE);
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	68da      	ldr	r2, [r3, #12]
 8014742:	f107 030c 	add.w	r3, r7, #12
 8014746:	4611      	mov	r1, r2
 8014748:	2244      	movs	r2, #68	@ 0x44
 801474a:	4618      	mov	r0, r3
 801474c:	f002 feca 	bl	80174e4 <memcpy>

	// Copy the new packet contents into the partial packet buffer
	memcpy(hxbee->pkt_bufPart, hxbee->pkt_bufDMA + hxbee->pkt_DMAHead, PKT_RAWSIZE - hxbee->pkt_DMAHead);
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	68d8      	ldr	r0, [r3, #12]
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	689b      	ldr	r3, [r3, #8]
 8014758:	687a      	ldr	r2, [r7, #4]
 801475a:	7c12      	ldrb	r2, [r2, #16]
 801475c:	1899      	adds	r1, r3, r2
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	7c1b      	ldrb	r3, [r3, #16]
 8014762:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8014766:	461a      	mov	r2, r3
 8014768:	f002 febc 	bl	80174e4 <memcpy>

	// finish the old packet
	// Account for dropped byte underflow
	// TODO: We can actually correct this instead of just giving up
	if (old_head < hxbee->pkt_DMAHead) {
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	7c1b      	ldrb	r3, [r3, #16]
 8014770:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8014774:	429a      	cmp	r2, r3
 8014776:	d201      	bcs.n	801477c <XBEE_RX_DMACallback+0xf0>
		return 2;
 8014778:	2302      	movs	r3, #2
 801477a:	e03b      	b.n	80147f4 <XBEE_RX_DMACallback+0x168>
	}

	uint16_t head_slip = old_head - hxbee->pkt_DMAHead;	// How many bytes were dropped
 801477c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014780:	b29b      	uxth	r3, r3
 8014782:	687a      	ldr	r2, [r7, #4]
 8014784:	7c12      	ldrb	r2, [r2, #16]
 8014786:	1a9b      	subs	r3, r3, r2
 8014788:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
	memset(pkt_cplt + (PKT_RAWSIZE - old_head), 0x00, head_slip); 									 // Zero dropped bytes
 801478c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014790:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8014794:	461a      	mov	r2, r3
 8014796:	f107 030c 	add.w	r3, r7, #12
 801479a:	4413      	add	r3, r2
 801479c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80147a0:	2100      	movs	r1, #0
 80147a2:	4618      	mov	r0, r3
 80147a4:	f002 fe5a 	bl	801745c <memset>
	memcpy(pkt_cplt + (PKT_RAWSIZE - old_head) + head_slip, hxbee->pkt_bufDMA, hxbee->pkt_DMAHead); // Fill in missing bytes
 80147a8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80147ac:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80147b0:	1ad3      	subs	r3, r2, r3
 80147b2:	3344      	adds	r3, #68	@ 0x44
 80147b4:	f107 020c 	add.w	r2, r7, #12
 80147b8:	18d0      	adds	r0, r2, r3
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	6899      	ldr	r1, [r3, #8]
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	7c1b      	ldrb	r3, [r3, #16]
 80147c2:	461a      	mov	r2, r3
 80147c4:	f002 fe8e 	bl	80174e4 <memcpy>
	// In the event of a single dropped byte, this is accurate, if more than one gets dropped this may become inaccurate

	// TODO: CHECKSUM

	// If everything went well, increment the index and move the data into the RX buffer
	hxbee->pktRx_idxPush = pkt_idx;
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80147ce:	765a      	strb	r2, [r3, #25]
	memcpy(hxbee->pktRx_mem + hxbee->pktRx_idxPush*PKT_RAWSIZE, pkt_cplt, PKT_RAWSIZE);
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	695a      	ldr	r2, [r3, #20]
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	7e5b      	ldrb	r3, [r3, #25]
 80147d8:	4619      	mov	r1, r3
 80147da:	460b      	mov	r3, r1
 80147dc:	011b      	lsls	r3, r3, #4
 80147de:	440b      	add	r3, r1
 80147e0:	009b      	lsls	r3, r3, #2
 80147e2:	4413      	add	r3, r2
 80147e4:	4618      	mov	r0, r3
 80147e6:	f107 030c 	add.w	r3, r7, #12
 80147ea:	2244      	movs	r2, #68	@ 0x44
 80147ec:	4619      	mov	r1, r3
 80147ee:	f002 fe79 	bl	80174e4 <memcpy>

	return 0;
 80147f2:	2300      	movs	r3, #0
}
 80147f4:	4618      	mov	r0, r3
 80147f6:	3758      	adds	r7, #88	@ 0x58
 80147f8:	46bd      	mov	sp, r7
 80147fa:	bd80      	pop	{r7, pc}
 80147fc:	78787879 	.word	0x78787879

08014800 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014800:	b580      	push	{r7, lr}
 8014802:	b084      	sub	sp, #16
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
 8014808:	460b      	mov	r3, r1
 801480a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801480c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8014810:	f002 fd08 	bl	8017224 <USBD_static_malloc>
 8014814:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d109      	bne.n	8014830 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	32b0      	adds	r2, #176	@ 0xb0
 8014826:	2100      	movs	r1, #0
 8014828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801482c:	2302      	movs	r3, #2
 801482e:	e0d4      	b.n	80149da <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014830:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8014834:	2100      	movs	r1, #0
 8014836:	68f8      	ldr	r0, [r7, #12]
 8014838:	f002 fe10 	bl	801745c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	32b0      	adds	r2, #176	@ 0xb0
 8014846:	68f9      	ldr	r1, [r7, #12]
 8014848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	32b0      	adds	r2, #176	@ 0xb0
 8014856:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	7c1b      	ldrb	r3, [r3, #16]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d138      	bne.n	80148da <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014868:	4b5e      	ldr	r3, [pc, #376]	@ (80149e4 <USBD_CDC_Init+0x1e4>)
 801486a:	7819      	ldrb	r1, [r3, #0]
 801486c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014870:	2202      	movs	r2, #2
 8014872:	6878      	ldr	r0, [r7, #4]
 8014874:	f002 fbb3 	bl	8016fde <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014878:	4b5a      	ldr	r3, [pc, #360]	@ (80149e4 <USBD_CDC_Init+0x1e4>)
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	f003 020f 	and.w	r2, r3, #15
 8014880:	6879      	ldr	r1, [r7, #4]
 8014882:	4613      	mov	r3, r2
 8014884:	009b      	lsls	r3, r3, #2
 8014886:	4413      	add	r3, r2
 8014888:	009b      	lsls	r3, r3, #2
 801488a:	440b      	add	r3, r1
 801488c:	3324      	adds	r3, #36	@ 0x24
 801488e:	2201      	movs	r2, #1
 8014890:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014892:	4b55      	ldr	r3, [pc, #340]	@ (80149e8 <USBD_CDC_Init+0x1e8>)
 8014894:	7819      	ldrb	r1, [r3, #0]
 8014896:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801489a:	2202      	movs	r2, #2
 801489c:	6878      	ldr	r0, [r7, #4]
 801489e:	f002 fb9e 	bl	8016fde <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80148a2:	4b51      	ldr	r3, [pc, #324]	@ (80149e8 <USBD_CDC_Init+0x1e8>)
 80148a4:	781b      	ldrb	r3, [r3, #0]
 80148a6:	f003 020f 	and.w	r2, r3, #15
 80148aa:	6879      	ldr	r1, [r7, #4]
 80148ac:	4613      	mov	r3, r2
 80148ae:	009b      	lsls	r3, r3, #2
 80148b0:	4413      	add	r3, r2
 80148b2:	009b      	lsls	r3, r3, #2
 80148b4:	440b      	add	r3, r1
 80148b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80148ba:	2201      	movs	r2, #1
 80148bc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80148be:	4b4b      	ldr	r3, [pc, #300]	@ (80149ec <USBD_CDC_Init+0x1ec>)
 80148c0:	781b      	ldrb	r3, [r3, #0]
 80148c2:	f003 020f 	and.w	r2, r3, #15
 80148c6:	6879      	ldr	r1, [r7, #4]
 80148c8:	4613      	mov	r3, r2
 80148ca:	009b      	lsls	r3, r3, #2
 80148cc:	4413      	add	r3, r2
 80148ce:	009b      	lsls	r3, r3, #2
 80148d0:	440b      	add	r3, r1
 80148d2:	3326      	adds	r3, #38	@ 0x26
 80148d4:	2210      	movs	r2, #16
 80148d6:	801a      	strh	r2, [r3, #0]
 80148d8:	e035      	b.n	8014946 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80148da:	4b42      	ldr	r3, [pc, #264]	@ (80149e4 <USBD_CDC_Init+0x1e4>)
 80148dc:	7819      	ldrb	r1, [r3, #0]
 80148de:	2340      	movs	r3, #64	@ 0x40
 80148e0:	2202      	movs	r2, #2
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f002 fb7b 	bl	8016fde <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80148e8:	4b3e      	ldr	r3, [pc, #248]	@ (80149e4 <USBD_CDC_Init+0x1e4>)
 80148ea:	781b      	ldrb	r3, [r3, #0]
 80148ec:	f003 020f 	and.w	r2, r3, #15
 80148f0:	6879      	ldr	r1, [r7, #4]
 80148f2:	4613      	mov	r3, r2
 80148f4:	009b      	lsls	r3, r3, #2
 80148f6:	4413      	add	r3, r2
 80148f8:	009b      	lsls	r3, r3, #2
 80148fa:	440b      	add	r3, r1
 80148fc:	3324      	adds	r3, #36	@ 0x24
 80148fe:	2201      	movs	r2, #1
 8014900:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014902:	4b39      	ldr	r3, [pc, #228]	@ (80149e8 <USBD_CDC_Init+0x1e8>)
 8014904:	7819      	ldrb	r1, [r3, #0]
 8014906:	2340      	movs	r3, #64	@ 0x40
 8014908:	2202      	movs	r2, #2
 801490a:	6878      	ldr	r0, [r7, #4]
 801490c:	f002 fb67 	bl	8016fde <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014910:	4b35      	ldr	r3, [pc, #212]	@ (80149e8 <USBD_CDC_Init+0x1e8>)
 8014912:	781b      	ldrb	r3, [r3, #0]
 8014914:	f003 020f 	and.w	r2, r3, #15
 8014918:	6879      	ldr	r1, [r7, #4]
 801491a:	4613      	mov	r3, r2
 801491c:	009b      	lsls	r3, r3, #2
 801491e:	4413      	add	r3, r2
 8014920:	009b      	lsls	r3, r3, #2
 8014922:	440b      	add	r3, r1
 8014924:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014928:	2201      	movs	r2, #1
 801492a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801492c:	4b2f      	ldr	r3, [pc, #188]	@ (80149ec <USBD_CDC_Init+0x1ec>)
 801492e:	781b      	ldrb	r3, [r3, #0]
 8014930:	f003 020f 	and.w	r2, r3, #15
 8014934:	6879      	ldr	r1, [r7, #4]
 8014936:	4613      	mov	r3, r2
 8014938:	009b      	lsls	r3, r3, #2
 801493a:	4413      	add	r3, r2
 801493c:	009b      	lsls	r3, r3, #2
 801493e:	440b      	add	r3, r1
 8014940:	3326      	adds	r3, #38	@ 0x26
 8014942:	2210      	movs	r2, #16
 8014944:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014946:	4b29      	ldr	r3, [pc, #164]	@ (80149ec <USBD_CDC_Init+0x1ec>)
 8014948:	7819      	ldrb	r1, [r3, #0]
 801494a:	2308      	movs	r3, #8
 801494c:	2203      	movs	r2, #3
 801494e:	6878      	ldr	r0, [r7, #4]
 8014950:	f002 fb45 	bl	8016fde <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014954:	4b25      	ldr	r3, [pc, #148]	@ (80149ec <USBD_CDC_Init+0x1ec>)
 8014956:	781b      	ldrb	r3, [r3, #0]
 8014958:	f003 020f 	and.w	r2, r3, #15
 801495c:	6879      	ldr	r1, [r7, #4]
 801495e:	4613      	mov	r3, r2
 8014960:	009b      	lsls	r3, r3, #2
 8014962:	4413      	add	r3, r2
 8014964:	009b      	lsls	r3, r3, #2
 8014966:	440b      	add	r3, r1
 8014968:	3324      	adds	r3, #36	@ 0x24
 801496a:	2201      	movs	r2, #1
 801496c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	2200      	movs	r2, #0
 8014972:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801497c:	687a      	ldr	r2, [r7, #4]
 801497e:	33b0      	adds	r3, #176	@ 0xb0
 8014980:	009b      	lsls	r3, r3, #2
 8014982:	4413      	add	r3, r2
 8014984:	685b      	ldr	r3, [r3, #4]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	2200      	movs	r2, #0
 801498e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	2200      	movs	r2, #0
 8014996:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d101      	bne.n	80149a8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80149a4:	2302      	movs	r3, #2
 80149a6:	e018      	b.n	80149da <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	7c1b      	ldrb	r3, [r3, #16]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d10a      	bne.n	80149c6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80149b0:	4b0d      	ldr	r3, [pc, #52]	@ (80149e8 <USBD_CDC_Init+0x1e8>)
 80149b2:	7819      	ldrb	r1, [r3, #0]
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80149ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80149be:	6878      	ldr	r0, [r7, #4]
 80149c0:	f002 fbfc 	bl	80171bc <USBD_LL_PrepareReceive>
 80149c4:	e008      	b.n	80149d8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80149c6:	4b08      	ldr	r3, [pc, #32]	@ (80149e8 <USBD_CDC_Init+0x1e8>)
 80149c8:	7819      	ldrb	r1, [r3, #0]
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80149d0:	2340      	movs	r3, #64	@ 0x40
 80149d2:	6878      	ldr	r0, [r7, #4]
 80149d4:	f002 fbf2 	bl	80171bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80149d8:	2300      	movs	r3, #0
}
 80149da:	4618      	mov	r0, r3
 80149dc:	3710      	adds	r7, #16
 80149de:	46bd      	mov	sp, r7
 80149e0:	bd80      	pop	{r7, pc}
 80149e2:	bf00      	nop
 80149e4:	240000af 	.word	0x240000af
 80149e8:	240000b0 	.word	0x240000b0
 80149ec:	240000b1 	.word	0x240000b1

080149f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b082      	sub	sp, #8
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
 80149f8:	460b      	mov	r3, r1
 80149fa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80149fc:	4b3a      	ldr	r3, [pc, #232]	@ (8014ae8 <USBD_CDC_DeInit+0xf8>)
 80149fe:	781b      	ldrb	r3, [r3, #0]
 8014a00:	4619      	mov	r1, r3
 8014a02:	6878      	ldr	r0, [r7, #4]
 8014a04:	f002 fb11 	bl	801702a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014a08:	4b37      	ldr	r3, [pc, #220]	@ (8014ae8 <USBD_CDC_DeInit+0xf8>)
 8014a0a:	781b      	ldrb	r3, [r3, #0]
 8014a0c:	f003 020f 	and.w	r2, r3, #15
 8014a10:	6879      	ldr	r1, [r7, #4]
 8014a12:	4613      	mov	r3, r2
 8014a14:	009b      	lsls	r3, r3, #2
 8014a16:	4413      	add	r3, r2
 8014a18:	009b      	lsls	r3, r3, #2
 8014a1a:	440b      	add	r3, r1
 8014a1c:	3324      	adds	r3, #36	@ 0x24
 8014a1e:	2200      	movs	r2, #0
 8014a20:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014a22:	4b32      	ldr	r3, [pc, #200]	@ (8014aec <USBD_CDC_DeInit+0xfc>)
 8014a24:	781b      	ldrb	r3, [r3, #0]
 8014a26:	4619      	mov	r1, r3
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f002 fafe 	bl	801702a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8014aec <USBD_CDC_DeInit+0xfc>)
 8014a30:	781b      	ldrb	r3, [r3, #0]
 8014a32:	f003 020f 	and.w	r2, r3, #15
 8014a36:	6879      	ldr	r1, [r7, #4]
 8014a38:	4613      	mov	r3, r2
 8014a3a:	009b      	lsls	r3, r3, #2
 8014a3c:	4413      	add	r3, r2
 8014a3e:	009b      	lsls	r3, r3, #2
 8014a40:	440b      	add	r3, r1
 8014a42:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014a46:	2200      	movs	r2, #0
 8014a48:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014a4a:	4b29      	ldr	r3, [pc, #164]	@ (8014af0 <USBD_CDC_DeInit+0x100>)
 8014a4c:	781b      	ldrb	r3, [r3, #0]
 8014a4e:	4619      	mov	r1, r3
 8014a50:	6878      	ldr	r0, [r7, #4]
 8014a52:	f002 faea 	bl	801702a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014a56:	4b26      	ldr	r3, [pc, #152]	@ (8014af0 <USBD_CDC_DeInit+0x100>)
 8014a58:	781b      	ldrb	r3, [r3, #0]
 8014a5a:	f003 020f 	and.w	r2, r3, #15
 8014a5e:	6879      	ldr	r1, [r7, #4]
 8014a60:	4613      	mov	r3, r2
 8014a62:	009b      	lsls	r3, r3, #2
 8014a64:	4413      	add	r3, r2
 8014a66:	009b      	lsls	r3, r3, #2
 8014a68:	440b      	add	r3, r1
 8014a6a:	3324      	adds	r3, #36	@ 0x24
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014a70:	4b1f      	ldr	r3, [pc, #124]	@ (8014af0 <USBD_CDC_DeInit+0x100>)
 8014a72:	781b      	ldrb	r3, [r3, #0]
 8014a74:	f003 020f 	and.w	r2, r3, #15
 8014a78:	6879      	ldr	r1, [r7, #4]
 8014a7a:	4613      	mov	r3, r2
 8014a7c:	009b      	lsls	r3, r3, #2
 8014a7e:	4413      	add	r3, r2
 8014a80:	009b      	lsls	r3, r3, #2
 8014a82:	440b      	add	r3, r1
 8014a84:	3326      	adds	r3, #38	@ 0x26
 8014a86:	2200      	movs	r2, #0
 8014a88:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	32b0      	adds	r2, #176	@ 0xb0
 8014a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d01f      	beq.n	8014adc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014aa2:	687a      	ldr	r2, [r7, #4]
 8014aa4:	33b0      	adds	r3, #176	@ 0xb0
 8014aa6:	009b      	lsls	r3, r3, #2
 8014aa8:	4413      	add	r3, r2
 8014aaa:	685b      	ldr	r3, [r3, #4]
 8014aac:	685b      	ldr	r3, [r3, #4]
 8014aae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	32b0      	adds	r2, #176	@ 0xb0
 8014aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014abe:	4618      	mov	r0, r3
 8014ac0:	f002 fbbe 	bl	8017240 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	32b0      	adds	r2, #176	@ 0xb0
 8014ace:	2100      	movs	r1, #0
 8014ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	2200      	movs	r2, #0
 8014ad8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014adc:	2300      	movs	r3, #0
}
 8014ade:	4618      	mov	r0, r3
 8014ae0:	3708      	adds	r7, #8
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	bd80      	pop	{r7, pc}
 8014ae6:	bf00      	nop
 8014ae8:	240000af 	.word	0x240000af
 8014aec:	240000b0 	.word	0x240000b0
 8014af0:	240000b1 	.word	0x240000b1

08014af4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b086      	sub	sp, #24
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
 8014afc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	32b0      	adds	r2, #176	@ 0xb0
 8014b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b0c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014b0e:	2300      	movs	r3, #0
 8014b10:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014b12:	2300      	movs	r3, #0
 8014b14:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014b16:	2300      	movs	r3, #0
 8014b18:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014b1a:	693b      	ldr	r3, [r7, #16]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d101      	bne.n	8014b24 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014b20:	2303      	movs	r3, #3
 8014b22:	e0bf      	b.n	8014ca4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014b24:	683b      	ldr	r3, [r7, #0]
 8014b26:	781b      	ldrb	r3, [r3, #0]
 8014b28:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d050      	beq.n	8014bd2 <USBD_CDC_Setup+0xde>
 8014b30:	2b20      	cmp	r3, #32
 8014b32:	f040 80af 	bne.w	8014c94 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014b36:	683b      	ldr	r3, [r7, #0]
 8014b38:	88db      	ldrh	r3, [r3, #6]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d03a      	beq.n	8014bb4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014b3e:	683b      	ldr	r3, [r7, #0]
 8014b40:	781b      	ldrb	r3, [r3, #0]
 8014b42:	b25b      	sxtb	r3, r3
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	da1b      	bge.n	8014b80 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014b4e:	687a      	ldr	r2, [r7, #4]
 8014b50:	33b0      	adds	r3, #176	@ 0xb0
 8014b52:	009b      	lsls	r3, r3, #2
 8014b54:	4413      	add	r3, r2
 8014b56:	685b      	ldr	r3, [r3, #4]
 8014b58:	689b      	ldr	r3, [r3, #8]
 8014b5a:	683a      	ldr	r2, [r7, #0]
 8014b5c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014b5e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014b60:	683a      	ldr	r2, [r7, #0]
 8014b62:	88d2      	ldrh	r2, [r2, #6]
 8014b64:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014b66:	683b      	ldr	r3, [r7, #0]
 8014b68:	88db      	ldrh	r3, [r3, #6]
 8014b6a:	2b07      	cmp	r3, #7
 8014b6c:	bf28      	it	cs
 8014b6e:	2307      	movcs	r3, #7
 8014b70:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014b72:	693b      	ldr	r3, [r7, #16]
 8014b74:	89fa      	ldrh	r2, [r7, #14]
 8014b76:	4619      	mov	r1, r3
 8014b78:	6878      	ldr	r0, [r7, #4]
 8014b7a:	f001 fdbd 	bl	80166f8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014b7e:	e090      	b.n	8014ca2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014b80:	683b      	ldr	r3, [r7, #0]
 8014b82:	785a      	ldrb	r2, [r3, #1]
 8014b84:	693b      	ldr	r3, [r7, #16]
 8014b86:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014b8a:	683b      	ldr	r3, [r7, #0]
 8014b8c:	88db      	ldrh	r3, [r3, #6]
 8014b8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8014b90:	d803      	bhi.n	8014b9a <USBD_CDC_Setup+0xa6>
 8014b92:	683b      	ldr	r3, [r7, #0]
 8014b94:	88db      	ldrh	r3, [r3, #6]
 8014b96:	b2da      	uxtb	r2, r3
 8014b98:	e000      	b.n	8014b9c <USBD_CDC_Setup+0xa8>
 8014b9a:	2240      	movs	r2, #64	@ 0x40
 8014b9c:	693b      	ldr	r3, [r7, #16]
 8014b9e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014ba2:	6939      	ldr	r1, [r7, #16]
 8014ba4:	693b      	ldr	r3, [r7, #16]
 8014ba6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8014baa:	461a      	mov	r2, r3
 8014bac:	6878      	ldr	r0, [r7, #4]
 8014bae:	f001 fdcf 	bl	8016750 <USBD_CtlPrepareRx>
      break;
 8014bb2:	e076      	b.n	8014ca2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014bba:	687a      	ldr	r2, [r7, #4]
 8014bbc:	33b0      	adds	r3, #176	@ 0xb0
 8014bbe:	009b      	lsls	r3, r3, #2
 8014bc0:	4413      	add	r3, r2
 8014bc2:	685b      	ldr	r3, [r3, #4]
 8014bc4:	689b      	ldr	r3, [r3, #8]
 8014bc6:	683a      	ldr	r2, [r7, #0]
 8014bc8:	7850      	ldrb	r0, [r2, #1]
 8014bca:	2200      	movs	r2, #0
 8014bcc:	6839      	ldr	r1, [r7, #0]
 8014bce:	4798      	blx	r3
      break;
 8014bd0:	e067      	b.n	8014ca2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014bd2:	683b      	ldr	r3, [r7, #0]
 8014bd4:	785b      	ldrb	r3, [r3, #1]
 8014bd6:	2b0b      	cmp	r3, #11
 8014bd8:	d851      	bhi.n	8014c7e <USBD_CDC_Setup+0x18a>
 8014bda:	a201      	add	r2, pc, #4	@ (adr r2, 8014be0 <USBD_CDC_Setup+0xec>)
 8014bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014be0:	08014c11 	.word	0x08014c11
 8014be4:	08014c8d 	.word	0x08014c8d
 8014be8:	08014c7f 	.word	0x08014c7f
 8014bec:	08014c7f 	.word	0x08014c7f
 8014bf0:	08014c7f 	.word	0x08014c7f
 8014bf4:	08014c7f 	.word	0x08014c7f
 8014bf8:	08014c7f 	.word	0x08014c7f
 8014bfc:	08014c7f 	.word	0x08014c7f
 8014c00:	08014c7f 	.word	0x08014c7f
 8014c04:	08014c7f 	.word	0x08014c7f
 8014c08:	08014c3b 	.word	0x08014c3b
 8014c0c:	08014c65 	.word	0x08014c65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014c16:	b2db      	uxtb	r3, r3
 8014c18:	2b03      	cmp	r3, #3
 8014c1a:	d107      	bne.n	8014c2c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014c1c:	f107 030a 	add.w	r3, r7, #10
 8014c20:	2202      	movs	r2, #2
 8014c22:	4619      	mov	r1, r3
 8014c24:	6878      	ldr	r0, [r7, #4]
 8014c26:	f001 fd67 	bl	80166f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014c2a:	e032      	b.n	8014c92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014c2c:	6839      	ldr	r1, [r7, #0]
 8014c2e:	6878      	ldr	r0, [r7, #4]
 8014c30:	f001 fce5 	bl	80165fe <USBD_CtlError>
            ret = USBD_FAIL;
 8014c34:	2303      	movs	r3, #3
 8014c36:	75fb      	strb	r3, [r7, #23]
          break;
 8014c38:	e02b      	b.n	8014c92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014c40:	b2db      	uxtb	r3, r3
 8014c42:	2b03      	cmp	r3, #3
 8014c44:	d107      	bne.n	8014c56 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014c46:	f107 030d 	add.w	r3, r7, #13
 8014c4a:	2201      	movs	r2, #1
 8014c4c:	4619      	mov	r1, r3
 8014c4e:	6878      	ldr	r0, [r7, #4]
 8014c50:	f001 fd52 	bl	80166f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014c54:	e01d      	b.n	8014c92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014c56:	6839      	ldr	r1, [r7, #0]
 8014c58:	6878      	ldr	r0, [r7, #4]
 8014c5a:	f001 fcd0 	bl	80165fe <USBD_CtlError>
            ret = USBD_FAIL;
 8014c5e:	2303      	movs	r3, #3
 8014c60:	75fb      	strb	r3, [r7, #23]
          break;
 8014c62:	e016      	b.n	8014c92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014c6a:	b2db      	uxtb	r3, r3
 8014c6c:	2b03      	cmp	r3, #3
 8014c6e:	d00f      	beq.n	8014c90 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014c70:	6839      	ldr	r1, [r7, #0]
 8014c72:	6878      	ldr	r0, [r7, #4]
 8014c74:	f001 fcc3 	bl	80165fe <USBD_CtlError>
            ret = USBD_FAIL;
 8014c78:	2303      	movs	r3, #3
 8014c7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014c7c:	e008      	b.n	8014c90 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014c7e:	6839      	ldr	r1, [r7, #0]
 8014c80:	6878      	ldr	r0, [r7, #4]
 8014c82:	f001 fcbc 	bl	80165fe <USBD_CtlError>
          ret = USBD_FAIL;
 8014c86:	2303      	movs	r3, #3
 8014c88:	75fb      	strb	r3, [r7, #23]
          break;
 8014c8a:	e002      	b.n	8014c92 <USBD_CDC_Setup+0x19e>
          break;
 8014c8c:	bf00      	nop
 8014c8e:	e008      	b.n	8014ca2 <USBD_CDC_Setup+0x1ae>
          break;
 8014c90:	bf00      	nop
      }
      break;
 8014c92:	e006      	b.n	8014ca2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014c94:	6839      	ldr	r1, [r7, #0]
 8014c96:	6878      	ldr	r0, [r7, #4]
 8014c98:	f001 fcb1 	bl	80165fe <USBD_CtlError>
      ret = USBD_FAIL;
 8014c9c:	2303      	movs	r3, #3
 8014c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8014ca0:	bf00      	nop
  }

  return (uint8_t)ret;
 8014ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	3718      	adds	r7, #24
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}

08014cac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b084      	sub	sp, #16
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
 8014cb4:	460b      	mov	r3, r1
 8014cb6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014cbe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	32b0      	adds	r2, #176	@ 0xb0
 8014cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d101      	bne.n	8014cd6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014cd2:	2303      	movs	r3, #3
 8014cd4:	e065      	b.n	8014da2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	32b0      	adds	r2, #176	@ 0xb0
 8014ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ce4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014ce6:	78fb      	ldrb	r3, [r7, #3]
 8014ce8:	f003 020f 	and.w	r2, r3, #15
 8014cec:	6879      	ldr	r1, [r7, #4]
 8014cee:	4613      	mov	r3, r2
 8014cf0:	009b      	lsls	r3, r3, #2
 8014cf2:	4413      	add	r3, r2
 8014cf4:	009b      	lsls	r3, r3, #2
 8014cf6:	440b      	add	r3, r1
 8014cf8:	3318      	adds	r3, #24
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d02f      	beq.n	8014d60 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014d00:	78fb      	ldrb	r3, [r7, #3]
 8014d02:	f003 020f 	and.w	r2, r3, #15
 8014d06:	6879      	ldr	r1, [r7, #4]
 8014d08:	4613      	mov	r3, r2
 8014d0a:	009b      	lsls	r3, r3, #2
 8014d0c:	4413      	add	r3, r2
 8014d0e:	009b      	lsls	r3, r3, #2
 8014d10:	440b      	add	r3, r1
 8014d12:	3318      	adds	r3, #24
 8014d14:	681a      	ldr	r2, [r3, #0]
 8014d16:	78fb      	ldrb	r3, [r7, #3]
 8014d18:	f003 010f 	and.w	r1, r3, #15
 8014d1c:	68f8      	ldr	r0, [r7, #12]
 8014d1e:	460b      	mov	r3, r1
 8014d20:	00db      	lsls	r3, r3, #3
 8014d22:	440b      	add	r3, r1
 8014d24:	009b      	lsls	r3, r3, #2
 8014d26:	4403      	add	r3, r0
 8014d28:	331c      	adds	r3, #28
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8014d30:	fb01 f303 	mul.w	r3, r1, r3
 8014d34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d112      	bne.n	8014d60 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014d3a:	78fb      	ldrb	r3, [r7, #3]
 8014d3c:	f003 020f 	and.w	r2, r3, #15
 8014d40:	6879      	ldr	r1, [r7, #4]
 8014d42:	4613      	mov	r3, r2
 8014d44:	009b      	lsls	r3, r3, #2
 8014d46:	4413      	add	r3, r2
 8014d48:	009b      	lsls	r3, r3, #2
 8014d4a:	440b      	add	r3, r1
 8014d4c:	3318      	adds	r3, #24
 8014d4e:	2200      	movs	r2, #0
 8014d50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014d52:	78f9      	ldrb	r1, [r7, #3]
 8014d54:	2300      	movs	r3, #0
 8014d56:	2200      	movs	r2, #0
 8014d58:	6878      	ldr	r0, [r7, #4]
 8014d5a:	f002 fa0e 	bl	801717a <USBD_LL_Transmit>
 8014d5e:	e01f      	b.n	8014da0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014d60:	68bb      	ldr	r3, [r7, #8]
 8014d62:	2200      	movs	r2, #0
 8014d64:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014d6e:	687a      	ldr	r2, [r7, #4]
 8014d70:	33b0      	adds	r3, #176	@ 0xb0
 8014d72:	009b      	lsls	r3, r3, #2
 8014d74:	4413      	add	r3, r2
 8014d76:	685b      	ldr	r3, [r3, #4]
 8014d78:	691b      	ldr	r3, [r3, #16]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d010      	beq.n	8014da0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014d84:	687a      	ldr	r2, [r7, #4]
 8014d86:	33b0      	adds	r3, #176	@ 0xb0
 8014d88:	009b      	lsls	r3, r3, #2
 8014d8a:	4413      	add	r3, r2
 8014d8c:	685b      	ldr	r3, [r3, #4]
 8014d8e:	691b      	ldr	r3, [r3, #16]
 8014d90:	68ba      	ldr	r2, [r7, #8]
 8014d92:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8014d96:	68ba      	ldr	r2, [r7, #8]
 8014d98:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8014d9c:	78fa      	ldrb	r2, [r7, #3]
 8014d9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014da0:	2300      	movs	r3, #0
}
 8014da2:	4618      	mov	r0, r3
 8014da4:	3710      	adds	r7, #16
 8014da6:	46bd      	mov	sp, r7
 8014da8:	bd80      	pop	{r7, pc}

08014daa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014daa:	b580      	push	{r7, lr}
 8014dac:	b084      	sub	sp, #16
 8014dae:	af00      	add	r7, sp, #0
 8014db0:	6078      	str	r0, [r7, #4]
 8014db2:	460b      	mov	r3, r1
 8014db4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	32b0      	adds	r2, #176	@ 0xb0
 8014dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dc4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	32b0      	adds	r2, #176	@ 0xb0
 8014dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d101      	bne.n	8014ddc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014dd8:	2303      	movs	r3, #3
 8014dda:	e01a      	b.n	8014e12 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014ddc:	78fb      	ldrb	r3, [r7, #3]
 8014dde:	4619      	mov	r1, r3
 8014de0:	6878      	ldr	r0, [r7, #4]
 8014de2:	f002 fa0c 	bl	80171fe <USBD_LL_GetRxDataSize>
 8014de6:	4602      	mov	r2, r0
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014df4:	687a      	ldr	r2, [r7, #4]
 8014df6:	33b0      	adds	r3, #176	@ 0xb0
 8014df8:	009b      	lsls	r3, r3, #2
 8014dfa:	4413      	add	r3, r2
 8014dfc:	685b      	ldr	r3, [r3, #4]
 8014dfe:	68db      	ldr	r3, [r3, #12]
 8014e00:	68fa      	ldr	r2, [r7, #12]
 8014e02:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8014e06:	68fa      	ldr	r2, [r7, #12]
 8014e08:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8014e0c:	4611      	mov	r1, r2
 8014e0e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014e10:	2300      	movs	r3, #0
}
 8014e12:	4618      	mov	r0, r3
 8014e14:	3710      	adds	r7, #16
 8014e16:	46bd      	mov	sp, r7
 8014e18:	bd80      	pop	{r7, pc}

08014e1a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014e1a:	b580      	push	{r7, lr}
 8014e1c:	b084      	sub	sp, #16
 8014e1e:	af00      	add	r7, sp, #0
 8014e20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	32b0      	adds	r2, #176	@ 0xb0
 8014e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d101      	bne.n	8014e3c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014e38:	2303      	movs	r3, #3
 8014e3a:	e024      	b.n	8014e86 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014e42:	687a      	ldr	r2, [r7, #4]
 8014e44:	33b0      	adds	r3, #176	@ 0xb0
 8014e46:	009b      	lsls	r3, r3, #2
 8014e48:	4413      	add	r3, r2
 8014e4a:	685b      	ldr	r3, [r3, #4]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d019      	beq.n	8014e84 <USBD_CDC_EP0_RxReady+0x6a>
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8014e56:	2bff      	cmp	r3, #255	@ 0xff
 8014e58:	d014      	beq.n	8014e84 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014e60:	687a      	ldr	r2, [r7, #4]
 8014e62:	33b0      	adds	r3, #176	@ 0xb0
 8014e64:	009b      	lsls	r3, r3, #2
 8014e66:	4413      	add	r3, r2
 8014e68:	685b      	ldr	r3, [r3, #4]
 8014e6a:	689b      	ldr	r3, [r3, #8]
 8014e6c:	68fa      	ldr	r2, [r7, #12]
 8014e6e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8014e72:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014e74:	68fa      	ldr	r2, [r7, #12]
 8014e76:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014e7a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	22ff      	movs	r2, #255	@ 0xff
 8014e80:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8014e84:	2300      	movs	r3, #0
}
 8014e86:	4618      	mov	r0, r3
 8014e88:	3710      	adds	r7, #16
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	bd80      	pop	{r7, pc}
	...

08014e90 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b086      	sub	sp, #24
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014e98:	2182      	movs	r1, #130	@ 0x82
 8014e9a:	4818      	ldr	r0, [pc, #96]	@ (8014efc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014e9c:	f000 fd4f 	bl	801593e <USBD_GetEpDesc>
 8014ea0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014ea2:	2101      	movs	r1, #1
 8014ea4:	4815      	ldr	r0, [pc, #84]	@ (8014efc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014ea6:	f000 fd4a 	bl	801593e <USBD_GetEpDesc>
 8014eaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014eac:	2181      	movs	r1, #129	@ 0x81
 8014eae:	4813      	ldr	r0, [pc, #76]	@ (8014efc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014eb0:	f000 fd45 	bl	801593e <USBD_GetEpDesc>
 8014eb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014eb6:	697b      	ldr	r3, [r7, #20]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d002      	beq.n	8014ec2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014ebc:	697b      	ldr	r3, [r7, #20]
 8014ebe:	2210      	movs	r2, #16
 8014ec0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014ec2:	693b      	ldr	r3, [r7, #16]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d006      	beq.n	8014ed6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014ec8:	693b      	ldr	r3, [r7, #16]
 8014eca:	2200      	movs	r2, #0
 8014ecc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014ed0:	711a      	strb	r2, [r3, #4]
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d006      	beq.n	8014eea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	2200      	movs	r2, #0
 8014ee0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014ee4:	711a      	strb	r2, [r3, #4]
 8014ee6:	2200      	movs	r2, #0
 8014ee8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	2243      	movs	r2, #67	@ 0x43
 8014eee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014ef0:	4b02      	ldr	r3, [pc, #8]	@ (8014efc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	3718      	adds	r7, #24
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	bd80      	pop	{r7, pc}
 8014efa:	bf00      	nop
 8014efc:	2400006c 	.word	0x2400006c

08014f00 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014f00:	b580      	push	{r7, lr}
 8014f02:	b086      	sub	sp, #24
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014f08:	2182      	movs	r1, #130	@ 0x82
 8014f0a:	4818      	ldr	r0, [pc, #96]	@ (8014f6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014f0c:	f000 fd17 	bl	801593e <USBD_GetEpDesc>
 8014f10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014f12:	2101      	movs	r1, #1
 8014f14:	4815      	ldr	r0, [pc, #84]	@ (8014f6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014f16:	f000 fd12 	bl	801593e <USBD_GetEpDesc>
 8014f1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014f1c:	2181      	movs	r1, #129	@ 0x81
 8014f1e:	4813      	ldr	r0, [pc, #76]	@ (8014f6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014f20:	f000 fd0d 	bl	801593e <USBD_GetEpDesc>
 8014f24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014f26:	697b      	ldr	r3, [r7, #20]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d002      	beq.n	8014f32 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014f2c:	697b      	ldr	r3, [r7, #20]
 8014f2e:	2210      	movs	r2, #16
 8014f30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014f32:	693b      	ldr	r3, [r7, #16]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d006      	beq.n	8014f46 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014f38:	693b      	ldr	r3, [r7, #16]
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	711a      	strb	r2, [r3, #4]
 8014f3e:	2200      	movs	r2, #0
 8014f40:	f042 0202 	orr.w	r2, r2, #2
 8014f44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d006      	beq.n	8014f5a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	2200      	movs	r2, #0
 8014f50:	711a      	strb	r2, [r3, #4]
 8014f52:	2200      	movs	r2, #0
 8014f54:	f042 0202 	orr.w	r2, r2, #2
 8014f58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	2243      	movs	r2, #67	@ 0x43
 8014f5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014f60:	4b02      	ldr	r3, [pc, #8]	@ (8014f6c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014f62:	4618      	mov	r0, r3
 8014f64:	3718      	adds	r7, #24
 8014f66:	46bd      	mov	sp, r7
 8014f68:	bd80      	pop	{r7, pc}
 8014f6a:	bf00      	nop
 8014f6c:	2400006c 	.word	0x2400006c

08014f70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b086      	sub	sp, #24
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014f78:	2182      	movs	r1, #130	@ 0x82
 8014f7a:	4818      	ldr	r0, [pc, #96]	@ (8014fdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014f7c:	f000 fcdf 	bl	801593e <USBD_GetEpDesc>
 8014f80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014f82:	2101      	movs	r1, #1
 8014f84:	4815      	ldr	r0, [pc, #84]	@ (8014fdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014f86:	f000 fcda 	bl	801593e <USBD_GetEpDesc>
 8014f8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014f8c:	2181      	movs	r1, #129	@ 0x81
 8014f8e:	4813      	ldr	r0, [pc, #76]	@ (8014fdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014f90:	f000 fcd5 	bl	801593e <USBD_GetEpDesc>
 8014f94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014f96:	697b      	ldr	r3, [r7, #20]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d002      	beq.n	8014fa2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014f9c:	697b      	ldr	r3, [r7, #20]
 8014f9e:	2210      	movs	r2, #16
 8014fa0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014fa2:	693b      	ldr	r3, [r7, #16]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d006      	beq.n	8014fb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014fa8:	693b      	ldr	r3, [r7, #16]
 8014faa:	2200      	movs	r2, #0
 8014fac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014fb0:	711a      	strb	r2, [r3, #4]
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d006      	beq.n	8014fca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014fc4:	711a      	strb	r2, [r3, #4]
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	2243      	movs	r2, #67	@ 0x43
 8014fce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014fd0:	4b02      	ldr	r3, [pc, #8]	@ (8014fdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	3718      	adds	r7, #24
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	bd80      	pop	{r7, pc}
 8014fda:	bf00      	nop
 8014fdc:	2400006c 	.word	0x2400006c

08014fe0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014fe0:	b480      	push	{r7}
 8014fe2:	b083      	sub	sp, #12
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	220a      	movs	r2, #10
 8014fec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014fee:	4b03      	ldr	r3, [pc, #12]	@ (8014ffc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	370c      	adds	r7, #12
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffa:	4770      	bx	lr
 8014ffc:	24000028 	.word	0x24000028

08015000 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015000:	b480      	push	{r7}
 8015002:	b083      	sub	sp, #12
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]
 8015008:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801500a:	683b      	ldr	r3, [r7, #0]
 801500c:	2b00      	cmp	r3, #0
 801500e:	d101      	bne.n	8015014 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015010:	2303      	movs	r3, #3
 8015012:	e009      	b.n	8015028 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801501a:	687a      	ldr	r2, [r7, #4]
 801501c:	33b0      	adds	r3, #176	@ 0xb0
 801501e:	009b      	lsls	r3, r3, #2
 8015020:	4413      	add	r3, r2
 8015022:	683a      	ldr	r2, [r7, #0]
 8015024:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015026:	2300      	movs	r3, #0
}
 8015028:	4618      	mov	r0, r3
 801502a:	370c      	adds	r7, #12
 801502c:	46bd      	mov	sp, r7
 801502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015032:	4770      	bx	lr

08015034 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015034:	b480      	push	{r7}
 8015036:	b087      	sub	sp, #28
 8015038:	af00      	add	r7, sp, #0
 801503a:	60f8      	str	r0, [r7, #12]
 801503c:	60b9      	str	r1, [r7, #8]
 801503e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	32b0      	adds	r2, #176	@ 0xb0
 801504a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801504e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015050:	697b      	ldr	r3, [r7, #20]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d101      	bne.n	801505a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015056:	2303      	movs	r3, #3
 8015058:	e008      	b.n	801506c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801505a:	697b      	ldr	r3, [r7, #20]
 801505c:	68ba      	ldr	r2, [r7, #8]
 801505e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8015062:	697b      	ldr	r3, [r7, #20]
 8015064:	687a      	ldr	r2, [r7, #4]
 8015066:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801506a:	2300      	movs	r3, #0
}
 801506c:	4618      	mov	r0, r3
 801506e:	371c      	adds	r7, #28
 8015070:	46bd      	mov	sp, r7
 8015072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015076:	4770      	bx	lr

08015078 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015078:	b480      	push	{r7}
 801507a:	b085      	sub	sp, #20
 801507c:	af00      	add	r7, sp, #0
 801507e:	6078      	str	r0, [r7, #4]
 8015080:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	32b0      	adds	r2, #176	@ 0xb0
 801508c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015090:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d101      	bne.n	801509c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015098:	2303      	movs	r3, #3
 801509a:	e004      	b.n	80150a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	683a      	ldr	r2, [r7, #0]
 80150a0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80150a4:	2300      	movs	r3, #0
}
 80150a6:	4618      	mov	r0, r3
 80150a8:	3714      	adds	r7, #20
 80150aa:	46bd      	mov	sp, r7
 80150ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b0:	4770      	bx	lr
	...

080150b4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b084      	sub	sp, #16
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	32b0      	adds	r2, #176	@ 0xb0
 80150c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150ca:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80150cc:	2301      	movs	r3, #1
 80150ce:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80150d0:	68bb      	ldr	r3, [r7, #8]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d101      	bne.n	80150da <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80150d6:	2303      	movs	r3, #3
 80150d8:	e025      	b.n	8015126 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80150da:	68bb      	ldr	r3, [r7, #8]
 80150dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d11f      	bne.n	8015124 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80150e4:	68bb      	ldr	r3, [r7, #8]
 80150e6:	2201      	movs	r2, #1
 80150e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80150ec:	4b10      	ldr	r3, [pc, #64]	@ (8015130 <USBD_CDC_TransmitPacket+0x7c>)
 80150ee:	781b      	ldrb	r3, [r3, #0]
 80150f0:	f003 020f 	and.w	r2, r3, #15
 80150f4:	68bb      	ldr	r3, [r7, #8]
 80150f6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80150fa:	6878      	ldr	r0, [r7, #4]
 80150fc:	4613      	mov	r3, r2
 80150fe:	009b      	lsls	r3, r3, #2
 8015100:	4413      	add	r3, r2
 8015102:	009b      	lsls	r3, r3, #2
 8015104:	4403      	add	r3, r0
 8015106:	3318      	adds	r3, #24
 8015108:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801510a:	4b09      	ldr	r3, [pc, #36]	@ (8015130 <USBD_CDC_TransmitPacket+0x7c>)
 801510c:	7819      	ldrb	r1, [r3, #0]
 801510e:	68bb      	ldr	r3, [r7, #8]
 8015110:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8015114:	68bb      	ldr	r3, [r7, #8]
 8015116:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801511a:	6878      	ldr	r0, [r7, #4]
 801511c:	f002 f82d 	bl	801717a <USBD_LL_Transmit>

    ret = USBD_OK;
 8015120:	2300      	movs	r3, #0
 8015122:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015124:	7bfb      	ldrb	r3, [r7, #15]
}
 8015126:	4618      	mov	r0, r3
 8015128:	3710      	adds	r7, #16
 801512a:	46bd      	mov	sp, r7
 801512c:	bd80      	pop	{r7, pc}
 801512e:	bf00      	nop
 8015130:	240000af 	.word	0x240000af

08015134 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b084      	sub	sp, #16
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	32b0      	adds	r2, #176	@ 0xb0
 8015146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801514a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	32b0      	adds	r2, #176	@ 0xb0
 8015156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d101      	bne.n	8015162 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801515e:	2303      	movs	r3, #3
 8015160:	e018      	b.n	8015194 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	7c1b      	ldrb	r3, [r3, #16]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d10a      	bne.n	8015180 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801516a:	4b0c      	ldr	r3, [pc, #48]	@ (801519c <USBD_CDC_ReceivePacket+0x68>)
 801516c:	7819      	ldrb	r1, [r3, #0]
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015174:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015178:	6878      	ldr	r0, [r7, #4]
 801517a:	f002 f81f 	bl	80171bc <USBD_LL_PrepareReceive>
 801517e:	e008      	b.n	8015192 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015180:	4b06      	ldr	r3, [pc, #24]	@ (801519c <USBD_CDC_ReceivePacket+0x68>)
 8015182:	7819      	ldrb	r1, [r3, #0]
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801518a:	2340      	movs	r3, #64	@ 0x40
 801518c:	6878      	ldr	r0, [r7, #4]
 801518e:	f002 f815 	bl	80171bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015192:	2300      	movs	r3, #0
}
 8015194:	4618      	mov	r0, r3
 8015196:	3710      	adds	r7, #16
 8015198:	46bd      	mov	sp, r7
 801519a:	bd80      	pop	{r7, pc}
 801519c:	240000b0 	.word	0x240000b0

080151a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b086      	sub	sp, #24
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	60f8      	str	r0, [r7, #12]
 80151a8:	60b9      	str	r1, [r7, #8]
 80151aa:	4613      	mov	r3, r2
 80151ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d101      	bne.n	80151b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80151b4:	2303      	movs	r3, #3
 80151b6:	e01f      	b.n	80151f8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	2200      	movs	r2, #0
 80151bc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	2200      	movs	r2, #0
 80151c4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	2200      	movs	r2, #0
 80151cc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80151d0:	68bb      	ldr	r3, [r7, #8]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d003      	beq.n	80151de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	68ba      	ldr	r2, [r7, #8]
 80151da:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	2201      	movs	r2, #1
 80151e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	79fa      	ldrb	r2, [r7, #7]
 80151ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80151ec:	68f8      	ldr	r0, [r7, #12]
 80151ee:	f001 fe8b 	bl	8016f08 <USBD_LL_Init>
 80151f2:	4603      	mov	r3, r0
 80151f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80151f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80151f8:	4618      	mov	r0, r3
 80151fa:	3718      	adds	r7, #24
 80151fc:	46bd      	mov	sp, r7
 80151fe:	bd80      	pop	{r7, pc}

08015200 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015200:	b580      	push	{r7, lr}
 8015202:	b084      	sub	sp, #16
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
 8015208:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801520a:	2300      	movs	r3, #0
 801520c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801520e:	683b      	ldr	r3, [r7, #0]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d101      	bne.n	8015218 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015214:	2303      	movs	r3, #3
 8015216:	e025      	b.n	8015264 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	683a      	ldr	r2, [r7, #0]
 801521c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	32ae      	adds	r2, #174	@ 0xae
 801522a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801522e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015230:	2b00      	cmp	r3, #0
 8015232:	d00f      	beq.n	8015254 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	32ae      	adds	r2, #174	@ 0xae
 801523e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015244:	f107 020e 	add.w	r2, r7, #14
 8015248:	4610      	mov	r0, r2
 801524a:	4798      	blx	r3
 801524c:	4602      	mov	r2, r0
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801525a:	1c5a      	adds	r2, r3, #1
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8015262:	2300      	movs	r3, #0
}
 8015264:	4618      	mov	r0, r3
 8015266:	3710      	adds	r7, #16
 8015268:	46bd      	mov	sp, r7
 801526a:	bd80      	pop	{r7, pc}

0801526c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b082      	sub	sp, #8
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015274:	6878      	ldr	r0, [r7, #4]
 8015276:	f001 fe97 	bl	8016fa8 <USBD_LL_Start>
 801527a:	4603      	mov	r3, r0
}
 801527c:	4618      	mov	r0, r3
 801527e:	3708      	adds	r7, #8
 8015280:	46bd      	mov	sp, r7
 8015282:	bd80      	pop	{r7, pc}

08015284 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015284:	b480      	push	{r7}
 8015286:	b083      	sub	sp, #12
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801528c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801528e:	4618      	mov	r0, r3
 8015290:	370c      	adds	r7, #12
 8015292:	46bd      	mov	sp, r7
 8015294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015298:	4770      	bx	lr

0801529a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801529a:	b580      	push	{r7, lr}
 801529c:	b084      	sub	sp, #16
 801529e:	af00      	add	r7, sp, #0
 80152a0:	6078      	str	r0, [r7, #4]
 80152a2:	460b      	mov	r3, r1
 80152a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80152a6:	2300      	movs	r3, #0
 80152a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d009      	beq.n	80152c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	78fa      	ldrb	r2, [r7, #3]
 80152be:	4611      	mov	r1, r2
 80152c0:	6878      	ldr	r0, [r7, #4]
 80152c2:	4798      	blx	r3
 80152c4:	4603      	mov	r3, r0
 80152c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80152c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80152ca:	4618      	mov	r0, r3
 80152cc:	3710      	adds	r7, #16
 80152ce:	46bd      	mov	sp, r7
 80152d0:	bd80      	pop	{r7, pc}

080152d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80152d2:	b580      	push	{r7, lr}
 80152d4:	b084      	sub	sp, #16
 80152d6:	af00      	add	r7, sp, #0
 80152d8:	6078      	str	r0, [r7, #4]
 80152da:	460b      	mov	r3, r1
 80152dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80152de:	2300      	movs	r3, #0
 80152e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80152e8:	685b      	ldr	r3, [r3, #4]
 80152ea:	78fa      	ldrb	r2, [r7, #3]
 80152ec:	4611      	mov	r1, r2
 80152ee:	6878      	ldr	r0, [r7, #4]
 80152f0:	4798      	blx	r3
 80152f2:	4603      	mov	r3, r0
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d001      	beq.n	80152fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80152f8:	2303      	movs	r3, #3
 80152fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80152fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80152fe:	4618      	mov	r0, r3
 8015300:	3710      	adds	r7, #16
 8015302:	46bd      	mov	sp, r7
 8015304:	bd80      	pop	{r7, pc}

08015306 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015306:	b580      	push	{r7, lr}
 8015308:	b084      	sub	sp, #16
 801530a:	af00      	add	r7, sp, #0
 801530c:	6078      	str	r0, [r7, #4]
 801530e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8015316:	6839      	ldr	r1, [r7, #0]
 8015318:	4618      	mov	r0, r3
 801531a:	f001 f936 	bl	801658a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	2201      	movs	r2, #1
 8015322:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 801532c:	461a      	mov	r2, r3
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801533a:	f003 031f 	and.w	r3, r3, #31
 801533e:	2b02      	cmp	r3, #2
 8015340:	d01a      	beq.n	8015378 <USBD_LL_SetupStage+0x72>
 8015342:	2b02      	cmp	r3, #2
 8015344:	d822      	bhi.n	801538c <USBD_LL_SetupStage+0x86>
 8015346:	2b00      	cmp	r3, #0
 8015348:	d002      	beq.n	8015350 <USBD_LL_SetupStage+0x4a>
 801534a:	2b01      	cmp	r3, #1
 801534c:	d00a      	beq.n	8015364 <USBD_LL_SetupStage+0x5e>
 801534e:	e01d      	b.n	801538c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8015356:	4619      	mov	r1, r3
 8015358:	6878      	ldr	r0, [r7, #4]
 801535a:	f000 fb63 	bl	8015a24 <USBD_StdDevReq>
 801535e:	4603      	mov	r3, r0
 8015360:	73fb      	strb	r3, [r7, #15]
      break;
 8015362:	e020      	b.n	80153a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801536a:	4619      	mov	r1, r3
 801536c:	6878      	ldr	r0, [r7, #4]
 801536e:	f000 fbcb 	bl	8015b08 <USBD_StdItfReq>
 8015372:	4603      	mov	r3, r0
 8015374:	73fb      	strb	r3, [r7, #15]
      break;
 8015376:	e016      	b.n	80153a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801537e:	4619      	mov	r1, r3
 8015380:	6878      	ldr	r0, [r7, #4]
 8015382:	f000 fc2d 	bl	8015be0 <USBD_StdEPReq>
 8015386:	4603      	mov	r3, r0
 8015388:	73fb      	strb	r3, [r7, #15]
      break;
 801538a:	e00c      	b.n	80153a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8015392:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8015396:	b2db      	uxtb	r3, r3
 8015398:	4619      	mov	r1, r3
 801539a:	6878      	ldr	r0, [r7, #4]
 801539c:	f001 fe64 	bl	8017068 <USBD_LL_StallEP>
 80153a0:	4603      	mov	r3, r0
 80153a2:	73fb      	strb	r3, [r7, #15]
      break;
 80153a4:	bf00      	nop
  }

  return ret;
 80153a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80153a8:	4618      	mov	r0, r3
 80153aa:	3710      	adds	r7, #16
 80153ac:	46bd      	mov	sp, r7
 80153ae:	bd80      	pop	{r7, pc}

080153b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b086      	sub	sp, #24
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	60f8      	str	r0, [r7, #12]
 80153b8:	460b      	mov	r3, r1
 80153ba:	607a      	str	r2, [r7, #4]
 80153bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80153be:	2300      	movs	r3, #0
 80153c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80153c2:	7afb      	ldrb	r3, [r7, #11]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d16e      	bne.n	80154a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80153ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80153d6:	2b03      	cmp	r3, #3
 80153d8:	f040 8098 	bne.w	801550c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80153dc:	693b      	ldr	r3, [r7, #16]
 80153de:	689a      	ldr	r2, [r3, #8]
 80153e0:	693b      	ldr	r3, [r7, #16]
 80153e2:	68db      	ldr	r3, [r3, #12]
 80153e4:	429a      	cmp	r2, r3
 80153e6:	d913      	bls.n	8015410 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80153e8:	693b      	ldr	r3, [r7, #16]
 80153ea:	689a      	ldr	r2, [r3, #8]
 80153ec:	693b      	ldr	r3, [r7, #16]
 80153ee:	68db      	ldr	r3, [r3, #12]
 80153f0:	1ad2      	subs	r2, r2, r3
 80153f2:	693b      	ldr	r3, [r7, #16]
 80153f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80153f6:	693b      	ldr	r3, [r7, #16]
 80153f8:	68da      	ldr	r2, [r3, #12]
 80153fa:	693b      	ldr	r3, [r7, #16]
 80153fc:	689b      	ldr	r3, [r3, #8]
 80153fe:	4293      	cmp	r3, r2
 8015400:	bf28      	it	cs
 8015402:	4613      	movcs	r3, r2
 8015404:	461a      	mov	r2, r3
 8015406:	6879      	ldr	r1, [r7, #4]
 8015408:	68f8      	ldr	r0, [r7, #12]
 801540a:	f001 f9be 	bl	801678a <USBD_CtlContinueRx>
 801540e:	e07d      	b.n	801550c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8015416:	f003 031f 	and.w	r3, r3, #31
 801541a:	2b02      	cmp	r3, #2
 801541c:	d014      	beq.n	8015448 <USBD_LL_DataOutStage+0x98>
 801541e:	2b02      	cmp	r3, #2
 8015420:	d81d      	bhi.n	801545e <USBD_LL_DataOutStage+0xae>
 8015422:	2b00      	cmp	r3, #0
 8015424:	d002      	beq.n	801542c <USBD_LL_DataOutStage+0x7c>
 8015426:	2b01      	cmp	r3, #1
 8015428:	d003      	beq.n	8015432 <USBD_LL_DataOutStage+0x82>
 801542a:	e018      	b.n	801545e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801542c:	2300      	movs	r3, #0
 801542e:	75bb      	strb	r3, [r7, #22]
            break;
 8015430:	e018      	b.n	8015464 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8015438:	b2db      	uxtb	r3, r3
 801543a:	4619      	mov	r1, r3
 801543c:	68f8      	ldr	r0, [r7, #12]
 801543e:	f000 fa64 	bl	801590a <USBD_CoreFindIF>
 8015442:	4603      	mov	r3, r0
 8015444:	75bb      	strb	r3, [r7, #22]
            break;
 8015446:	e00d      	b.n	8015464 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801544e:	b2db      	uxtb	r3, r3
 8015450:	4619      	mov	r1, r3
 8015452:	68f8      	ldr	r0, [r7, #12]
 8015454:	f000 fa66 	bl	8015924 <USBD_CoreFindEP>
 8015458:	4603      	mov	r3, r0
 801545a:	75bb      	strb	r3, [r7, #22]
            break;
 801545c:	e002      	b.n	8015464 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801545e:	2300      	movs	r3, #0
 8015460:	75bb      	strb	r3, [r7, #22]
            break;
 8015462:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015464:	7dbb      	ldrb	r3, [r7, #22]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d119      	bne.n	801549e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015470:	b2db      	uxtb	r3, r3
 8015472:	2b03      	cmp	r3, #3
 8015474:	d113      	bne.n	801549e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015476:	7dba      	ldrb	r2, [r7, #22]
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	32ae      	adds	r2, #174	@ 0xae
 801547c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015480:	691b      	ldr	r3, [r3, #16]
 8015482:	2b00      	cmp	r3, #0
 8015484:	d00b      	beq.n	801549e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015486:	7dba      	ldrb	r2, [r7, #22]
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801548e:	7dba      	ldrb	r2, [r7, #22]
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	32ae      	adds	r2, #174	@ 0xae
 8015494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015498:	691b      	ldr	r3, [r3, #16]
 801549a:	68f8      	ldr	r0, [r7, #12]
 801549c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801549e:	68f8      	ldr	r0, [r7, #12]
 80154a0:	f001 f984 	bl	80167ac <USBD_CtlSendStatus>
 80154a4:	e032      	b.n	801550c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80154a6:	7afb      	ldrb	r3, [r7, #11]
 80154a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80154ac:	b2db      	uxtb	r3, r3
 80154ae:	4619      	mov	r1, r3
 80154b0:	68f8      	ldr	r0, [r7, #12]
 80154b2:	f000 fa37 	bl	8015924 <USBD_CoreFindEP>
 80154b6:	4603      	mov	r3, r0
 80154b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80154ba:	7dbb      	ldrb	r3, [r7, #22]
 80154bc:	2bff      	cmp	r3, #255	@ 0xff
 80154be:	d025      	beq.n	801550c <USBD_LL_DataOutStage+0x15c>
 80154c0:	7dbb      	ldrb	r3, [r7, #22]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d122      	bne.n	801550c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80154cc:	b2db      	uxtb	r3, r3
 80154ce:	2b03      	cmp	r3, #3
 80154d0:	d117      	bne.n	8015502 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80154d2:	7dba      	ldrb	r2, [r7, #22]
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	32ae      	adds	r2, #174	@ 0xae
 80154d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154dc:	699b      	ldr	r3, [r3, #24]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d00f      	beq.n	8015502 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80154e2:	7dba      	ldrb	r2, [r7, #22]
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80154ea:	7dba      	ldrb	r2, [r7, #22]
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	32ae      	adds	r2, #174	@ 0xae
 80154f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154f4:	699b      	ldr	r3, [r3, #24]
 80154f6:	7afa      	ldrb	r2, [r7, #11]
 80154f8:	4611      	mov	r1, r2
 80154fa:	68f8      	ldr	r0, [r7, #12]
 80154fc:	4798      	blx	r3
 80154fe:	4603      	mov	r3, r0
 8015500:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015502:	7dfb      	ldrb	r3, [r7, #23]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d001      	beq.n	801550c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015508:	7dfb      	ldrb	r3, [r7, #23]
 801550a:	e000      	b.n	801550e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801550c:	2300      	movs	r3, #0
}
 801550e:	4618      	mov	r0, r3
 8015510:	3718      	adds	r7, #24
 8015512:	46bd      	mov	sp, r7
 8015514:	bd80      	pop	{r7, pc}

08015516 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015516:	b580      	push	{r7, lr}
 8015518:	b086      	sub	sp, #24
 801551a:	af00      	add	r7, sp, #0
 801551c:	60f8      	str	r0, [r7, #12]
 801551e:	460b      	mov	r3, r1
 8015520:	607a      	str	r2, [r7, #4]
 8015522:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015524:	7afb      	ldrb	r3, [r7, #11]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d16f      	bne.n	801560a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	3314      	adds	r3, #20
 801552e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8015536:	2b02      	cmp	r3, #2
 8015538:	d15a      	bne.n	80155f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801553a:	693b      	ldr	r3, [r7, #16]
 801553c:	689a      	ldr	r2, [r3, #8]
 801553e:	693b      	ldr	r3, [r7, #16]
 8015540:	68db      	ldr	r3, [r3, #12]
 8015542:	429a      	cmp	r2, r3
 8015544:	d914      	bls.n	8015570 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015546:	693b      	ldr	r3, [r7, #16]
 8015548:	689a      	ldr	r2, [r3, #8]
 801554a:	693b      	ldr	r3, [r7, #16]
 801554c:	68db      	ldr	r3, [r3, #12]
 801554e:	1ad2      	subs	r2, r2, r3
 8015550:	693b      	ldr	r3, [r7, #16]
 8015552:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015554:	693b      	ldr	r3, [r7, #16]
 8015556:	689b      	ldr	r3, [r3, #8]
 8015558:	461a      	mov	r2, r3
 801555a:	6879      	ldr	r1, [r7, #4]
 801555c:	68f8      	ldr	r0, [r7, #12]
 801555e:	f001 f8e6 	bl	801672e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015562:	2300      	movs	r3, #0
 8015564:	2200      	movs	r2, #0
 8015566:	2100      	movs	r1, #0
 8015568:	68f8      	ldr	r0, [r7, #12]
 801556a:	f001 fe27 	bl	80171bc <USBD_LL_PrepareReceive>
 801556e:	e03f      	b.n	80155f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015570:	693b      	ldr	r3, [r7, #16]
 8015572:	68da      	ldr	r2, [r3, #12]
 8015574:	693b      	ldr	r3, [r7, #16]
 8015576:	689b      	ldr	r3, [r3, #8]
 8015578:	429a      	cmp	r2, r3
 801557a:	d11c      	bne.n	80155b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801557c:	693b      	ldr	r3, [r7, #16]
 801557e:	685a      	ldr	r2, [r3, #4]
 8015580:	693b      	ldr	r3, [r7, #16]
 8015582:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015584:	429a      	cmp	r2, r3
 8015586:	d316      	bcc.n	80155b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015588:	693b      	ldr	r3, [r7, #16]
 801558a:	685a      	ldr	r2, [r3, #4]
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015592:	429a      	cmp	r2, r3
 8015594:	d20f      	bcs.n	80155b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015596:	2200      	movs	r2, #0
 8015598:	2100      	movs	r1, #0
 801559a:	68f8      	ldr	r0, [r7, #12]
 801559c:	f001 f8c7 	bl	801672e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	2200      	movs	r2, #0
 80155a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80155a8:	2300      	movs	r3, #0
 80155aa:	2200      	movs	r2, #0
 80155ac:	2100      	movs	r1, #0
 80155ae:	68f8      	ldr	r0, [r7, #12]
 80155b0:	f001 fe04 	bl	80171bc <USBD_LL_PrepareReceive>
 80155b4:	e01c      	b.n	80155f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80155bc:	b2db      	uxtb	r3, r3
 80155be:	2b03      	cmp	r3, #3
 80155c0:	d10f      	bne.n	80155e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80155c8:	68db      	ldr	r3, [r3, #12]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d009      	beq.n	80155e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	2200      	movs	r2, #0
 80155d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80155dc:	68db      	ldr	r3, [r3, #12]
 80155de:	68f8      	ldr	r0, [r7, #12]
 80155e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80155e2:	2180      	movs	r1, #128	@ 0x80
 80155e4:	68f8      	ldr	r0, [r7, #12]
 80155e6:	f001 fd3f 	bl	8017068 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80155ea:	68f8      	ldr	r0, [r7, #12]
 80155ec:	f001 f8f1 	bl	80167d2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d03a      	beq.n	8015670 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80155fa:	68f8      	ldr	r0, [r7, #12]
 80155fc:	f7ff fe42 	bl	8015284 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	2200      	movs	r2, #0
 8015604:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8015608:	e032      	b.n	8015670 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801560a:	7afb      	ldrb	r3, [r7, #11]
 801560c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8015610:	b2db      	uxtb	r3, r3
 8015612:	4619      	mov	r1, r3
 8015614:	68f8      	ldr	r0, [r7, #12]
 8015616:	f000 f985 	bl	8015924 <USBD_CoreFindEP>
 801561a:	4603      	mov	r3, r0
 801561c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801561e:	7dfb      	ldrb	r3, [r7, #23]
 8015620:	2bff      	cmp	r3, #255	@ 0xff
 8015622:	d025      	beq.n	8015670 <USBD_LL_DataInStage+0x15a>
 8015624:	7dfb      	ldrb	r3, [r7, #23]
 8015626:	2b00      	cmp	r3, #0
 8015628:	d122      	bne.n	8015670 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015630:	b2db      	uxtb	r3, r3
 8015632:	2b03      	cmp	r3, #3
 8015634:	d11c      	bne.n	8015670 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015636:	7dfa      	ldrb	r2, [r7, #23]
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	32ae      	adds	r2, #174	@ 0xae
 801563c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015640:	695b      	ldr	r3, [r3, #20]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d014      	beq.n	8015670 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015646:	7dfa      	ldrb	r2, [r7, #23]
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801564e:	7dfa      	ldrb	r2, [r7, #23]
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	32ae      	adds	r2, #174	@ 0xae
 8015654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015658:	695b      	ldr	r3, [r3, #20]
 801565a:	7afa      	ldrb	r2, [r7, #11]
 801565c:	4611      	mov	r1, r2
 801565e:	68f8      	ldr	r0, [r7, #12]
 8015660:	4798      	blx	r3
 8015662:	4603      	mov	r3, r0
 8015664:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015666:	7dbb      	ldrb	r3, [r7, #22]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d001      	beq.n	8015670 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801566c:	7dbb      	ldrb	r3, [r7, #22]
 801566e:	e000      	b.n	8015672 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015670:	2300      	movs	r3, #0
}
 8015672:	4618      	mov	r0, r3
 8015674:	3718      	adds	r7, #24
 8015676:	46bd      	mov	sp, r7
 8015678:	bd80      	pop	{r7, pc}

0801567a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801567a:	b580      	push	{r7, lr}
 801567c:	b084      	sub	sp, #16
 801567e:	af00      	add	r7, sp, #0
 8015680:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015682:	2300      	movs	r3, #0
 8015684:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	2201      	movs	r2, #1
 801568a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	2200      	movs	r2, #0
 8015692:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	2200      	movs	r2, #0
 801569a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	2200      	movs	r2, #0
 80156a0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	2200      	movs	r2, #0
 80156a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d014      	beq.n	80156e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80156bc:	685b      	ldr	r3, [r3, #4]
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d00e      	beq.n	80156e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80156c8:	685b      	ldr	r3, [r3, #4]
 80156ca:	687a      	ldr	r2, [r7, #4]
 80156cc:	6852      	ldr	r2, [r2, #4]
 80156ce:	b2d2      	uxtb	r2, r2
 80156d0:	4611      	mov	r1, r2
 80156d2:	6878      	ldr	r0, [r7, #4]
 80156d4:	4798      	blx	r3
 80156d6:	4603      	mov	r3, r0
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d001      	beq.n	80156e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80156dc:	2303      	movs	r3, #3
 80156de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80156e0:	2340      	movs	r3, #64	@ 0x40
 80156e2:	2200      	movs	r2, #0
 80156e4:	2100      	movs	r1, #0
 80156e6:	6878      	ldr	r0, [r7, #4]
 80156e8:	f001 fc79 	bl	8016fde <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	2201      	movs	r2, #1
 80156f0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	2240      	movs	r2, #64	@ 0x40
 80156f8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80156fc:	2340      	movs	r3, #64	@ 0x40
 80156fe:	2200      	movs	r2, #0
 8015700:	2180      	movs	r1, #128	@ 0x80
 8015702:	6878      	ldr	r0, [r7, #4]
 8015704:	f001 fc6b 	bl	8016fde <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	2201      	movs	r2, #1
 801570c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	2240      	movs	r2, #64	@ 0x40
 8015712:	621a      	str	r2, [r3, #32]

  return ret;
 8015714:	7bfb      	ldrb	r3, [r7, #15]
}
 8015716:	4618      	mov	r0, r3
 8015718:	3710      	adds	r7, #16
 801571a:	46bd      	mov	sp, r7
 801571c:	bd80      	pop	{r7, pc}

0801571e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801571e:	b480      	push	{r7}
 8015720:	b083      	sub	sp, #12
 8015722:	af00      	add	r7, sp, #0
 8015724:	6078      	str	r0, [r7, #4]
 8015726:	460b      	mov	r3, r1
 8015728:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	78fa      	ldrb	r2, [r7, #3]
 801572e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015730:	2300      	movs	r3, #0
}
 8015732:	4618      	mov	r0, r3
 8015734:	370c      	adds	r7, #12
 8015736:	46bd      	mov	sp, r7
 8015738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801573c:	4770      	bx	lr

0801573e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801573e:	b480      	push	{r7}
 8015740:	b083      	sub	sp, #12
 8015742:	af00      	add	r7, sp, #0
 8015744:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801574c:	b2db      	uxtb	r3, r3
 801574e:	2b04      	cmp	r3, #4
 8015750:	d006      	beq.n	8015760 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015758:	b2da      	uxtb	r2, r3
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	2204      	movs	r2, #4
 8015764:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8015768:	2300      	movs	r3, #0
}
 801576a:	4618      	mov	r0, r3
 801576c:	370c      	adds	r7, #12
 801576e:	46bd      	mov	sp, r7
 8015770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015774:	4770      	bx	lr

08015776 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015776:	b480      	push	{r7}
 8015778:	b083      	sub	sp, #12
 801577a:	af00      	add	r7, sp, #0
 801577c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015784:	b2db      	uxtb	r3, r3
 8015786:	2b04      	cmp	r3, #4
 8015788:	d106      	bne.n	8015798 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8015790:	b2da      	uxtb	r2, r3
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8015798:	2300      	movs	r3, #0
}
 801579a:	4618      	mov	r0, r3
 801579c:	370c      	adds	r7, #12
 801579e:	46bd      	mov	sp, r7
 80157a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a4:	4770      	bx	lr

080157a6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80157a6:	b580      	push	{r7, lr}
 80157a8:	b082      	sub	sp, #8
 80157aa:	af00      	add	r7, sp, #0
 80157ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80157b4:	b2db      	uxtb	r3, r3
 80157b6:	2b03      	cmp	r3, #3
 80157b8:	d110      	bne.n	80157dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d00b      	beq.n	80157dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80157ca:	69db      	ldr	r3, [r3, #28]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d005      	beq.n	80157dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80157d6:	69db      	ldr	r3, [r3, #28]
 80157d8:	6878      	ldr	r0, [r7, #4]
 80157da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80157dc:	2300      	movs	r3, #0
}
 80157de:	4618      	mov	r0, r3
 80157e0:	3708      	adds	r7, #8
 80157e2:	46bd      	mov	sp, r7
 80157e4:	bd80      	pop	{r7, pc}

080157e6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80157e6:	b580      	push	{r7, lr}
 80157e8:	b082      	sub	sp, #8
 80157ea:	af00      	add	r7, sp, #0
 80157ec:	6078      	str	r0, [r7, #4]
 80157ee:	460b      	mov	r3, r1
 80157f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	32ae      	adds	r2, #174	@ 0xae
 80157fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d101      	bne.n	8015808 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015804:	2303      	movs	r3, #3
 8015806:	e01c      	b.n	8015842 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801580e:	b2db      	uxtb	r3, r3
 8015810:	2b03      	cmp	r3, #3
 8015812:	d115      	bne.n	8015840 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	32ae      	adds	r2, #174	@ 0xae
 801581e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015822:	6a1b      	ldr	r3, [r3, #32]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d00b      	beq.n	8015840 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	32ae      	adds	r2, #174	@ 0xae
 8015832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015836:	6a1b      	ldr	r3, [r3, #32]
 8015838:	78fa      	ldrb	r2, [r7, #3]
 801583a:	4611      	mov	r1, r2
 801583c:	6878      	ldr	r0, [r7, #4]
 801583e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015840:	2300      	movs	r3, #0
}
 8015842:	4618      	mov	r0, r3
 8015844:	3708      	adds	r7, #8
 8015846:	46bd      	mov	sp, r7
 8015848:	bd80      	pop	{r7, pc}

0801584a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801584a:	b580      	push	{r7, lr}
 801584c:	b082      	sub	sp, #8
 801584e:	af00      	add	r7, sp, #0
 8015850:	6078      	str	r0, [r7, #4]
 8015852:	460b      	mov	r3, r1
 8015854:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	32ae      	adds	r2, #174	@ 0xae
 8015860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015864:	2b00      	cmp	r3, #0
 8015866:	d101      	bne.n	801586c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015868:	2303      	movs	r3, #3
 801586a:	e01c      	b.n	80158a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015872:	b2db      	uxtb	r3, r3
 8015874:	2b03      	cmp	r3, #3
 8015876:	d115      	bne.n	80158a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	32ae      	adds	r2, #174	@ 0xae
 8015882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015888:	2b00      	cmp	r3, #0
 801588a:	d00b      	beq.n	80158a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	32ae      	adds	r2, #174	@ 0xae
 8015896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801589a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801589c:	78fa      	ldrb	r2, [r7, #3]
 801589e:	4611      	mov	r1, r2
 80158a0:	6878      	ldr	r0, [r7, #4]
 80158a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80158a4:	2300      	movs	r3, #0
}
 80158a6:	4618      	mov	r0, r3
 80158a8:	3708      	adds	r7, #8
 80158aa:	46bd      	mov	sp, r7
 80158ac:	bd80      	pop	{r7, pc}

080158ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80158ae:	b480      	push	{r7}
 80158b0:	b083      	sub	sp, #12
 80158b2:	af00      	add	r7, sp, #0
 80158b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80158b6:	2300      	movs	r3, #0
}
 80158b8:	4618      	mov	r0, r3
 80158ba:	370c      	adds	r7, #12
 80158bc:	46bd      	mov	sp, r7
 80158be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c2:	4770      	bx	lr

080158c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b084      	sub	sp, #16
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80158cc:	2300      	movs	r3, #0
 80158ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	2201      	movs	r2, #1
 80158d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d00e      	beq.n	8015900 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80158e8:	685b      	ldr	r3, [r3, #4]
 80158ea:	687a      	ldr	r2, [r7, #4]
 80158ec:	6852      	ldr	r2, [r2, #4]
 80158ee:	b2d2      	uxtb	r2, r2
 80158f0:	4611      	mov	r1, r2
 80158f2:	6878      	ldr	r0, [r7, #4]
 80158f4:	4798      	blx	r3
 80158f6:	4603      	mov	r3, r0
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d001      	beq.n	8015900 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80158fc:	2303      	movs	r3, #3
 80158fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015900:	7bfb      	ldrb	r3, [r7, #15]
}
 8015902:	4618      	mov	r0, r3
 8015904:	3710      	adds	r7, #16
 8015906:	46bd      	mov	sp, r7
 8015908:	bd80      	pop	{r7, pc}

0801590a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801590a:	b480      	push	{r7}
 801590c:	b083      	sub	sp, #12
 801590e:	af00      	add	r7, sp, #0
 8015910:	6078      	str	r0, [r7, #4]
 8015912:	460b      	mov	r3, r1
 8015914:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015916:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015918:	4618      	mov	r0, r3
 801591a:	370c      	adds	r7, #12
 801591c:	46bd      	mov	sp, r7
 801591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015922:	4770      	bx	lr

08015924 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015924:	b480      	push	{r7}
 8015926:	b083      	sub	sp, #12
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
 801592c:	460b      	mov	r3, r1
 801592e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015930:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015932:	4618      	mov	r0, r3
 8015934:	370c      	adds	r7, #12
 8015936:	46bd      	mov	sp, r7
 8015938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593c:	4770      	bx	lr

0801593e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801593e:	b580      	push	{r7, lr}
 8015940:	b086      	sub	sp, #24
 8015942:	af00      	add	r7, sp, #0
 8015944:	6078      	str	r0, [r7, #4]
 8015946:	460b      	mov	r3, r1
 8015948:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015952:	2300      	movs	r3, #0
 8015954:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	885b      	ldrh	r3, [r3, #2]
 801595a:	b29b      	uxth	r3, r3
 801595c:	68fa      	ldr	r2, [r7, #12]
 801595e:	7812      	ldrb	r2, [r2, #0]
 8015960:	4293      	cmp	r3, r2
 8015962:	d91f      	bls.n	80159a4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	781b      	ldrb	r3, [r3, #0]
 8015968:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801596a:	e013      	b.n	8015994 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801596c:	f107 030a 	add.w	r3, r7, #10
 8015970:	4619      	mov	r1, r3
 8015972:	6978      	ldr	r0, [r7, #20]
 8015974:	f000 f81b 	bl	80159ae <USBD_GetNextDesc>
 8015978:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801597a:	697b      	ldr	r3, [r7, #20]
 801597c:	785b      	ldrb	r3, [r3, #1]
 801597e:	2b05      	cmp	r3, #5
 8015980:	d108      	bne.n	8015994 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015982:	697b      	ldr	r3, [r7, #20]
 8015984:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015986:	693b      	ldr	r3, [r7, #16]
 8015988:	789b      	ldrb	r3, [r3, #2]
 801598a:	78fa      	ldrb	r2, [r7, #3]
 801598c:	429a      	cmp	r2, r3
 801598e:	d008      	beq.n	80159a2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015990:	2300      	movs	r3, #0
 8015992:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	885b      	ldrh	r3, [r3, #2]
 8015998:	b29a      	uxth	r2, r3
 801599a:	897b      	ldrh	r3, [r7, #10]
 801599c:	429a      	cmp	r2, r3
 801599e:	d8e5      	bhi.n	801596c <USBD_GetEpDesc+0x2e>
 80159a0:	e000      	b.n	80159a4 <USBD_GetEpDesc+0x66>
          break;
 80159a2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80159a4:	693b      	ldr	r3, [r7, #16]
}
 80159a6:	4618      	mov	r0, r3
 80159a8:	3718      	adds	r7, #24
 80159aa:	46bd      	mov	sp, r7
 80159ac:	bd80      	pop	{r7, pc}

080159ae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80159ae:	b480      	push	{r7}
 80159b0:	b085      	sub	sp, #20
 80159b2:	af00      	add	r7, sp, #0
 80159b4:	6078      	str	r0, [r7, #4]
 80159b6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80159bc:	683b      	ldr	r3, [r7, #0]
 80159be:	881b      	ldrh	r3, [r3, #0]
 80159c0:	68fa      	ldr	r2, [r7, #12]
 80159c2:	7812      	ldrb	r2, [r2, #0]
 80159c4:	4413      	add	r3, r2
 80159c6:	b29a      	uxth	r2, r3
 80159c8:	683b      	ldr	r3, [r7, #0]
 80159ca:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	781b      	ldrb	r3, [r3, #0]
 80159d0:	461a      	mov	r2, r3
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	4413      	add	r3, r2
 80159d6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80159d8:	68fb      	ldr	r3, [r7, #12]
}
 80159da:	4618      	mov	r0, r3
 80159dc:	3714      	adds	r7, #20
 80159de:	46bd      	mov	sp, r7
 80159e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e4:	4770      	bx	lr

080159e6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80159e6:	b480      	push	{r7}
 80159e8:	b087      	sub	sp, #28
 80159ea:	af00      	add	r7, sp, #0
 80159ec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80159f2:	697b      	ldr	r3, [r7, #20]
 80159f4:	781b      	ldrb	r3, [r3, #0]
 80159f6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80159f8:	697b      	ldr	r3, [r7, #20]
 80159fa:	3301      	adds	r3, #1
 80159fc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80159fe:	697b      	ldr	r3, [r7, #20]
 8015a00:	781b      	ldrb	r3, [r3, #0]
 8015a02:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015a04:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8015a08:	021b      	lsls	r3, r3, #8
 8015a0a:	b21a      	sxth	r2, r3
 8015a0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015a10:	4313      	orrs	r3, r2
 8015a12:	b21b      	sxth	r3, r3
 8015a14:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015a16:	89fb      	ldrh	r3, [r7, #14]
}
 8015a18:	4618      	mov	r0, r3
 8015a1a:	371c      	adds	r7, #28
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a22:	4770      	bx	lr

08015a24 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b084      	sub	sp, #16
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	6078      	str	r0, [r7, #4]
 8015a2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015a2e:	2300      	movs	r3, #0
 8015a30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a32:	683b      	ldr	r3, [r7, #0]
 8015a34:	781b      	ldrb	r3, [r3, #0]
 8015a36:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015a3a:	2b40      	cmp	r3, #64	@ 0x40
 8015a3c:	d005      	beq.n	8015a4a <USBD_StdDevReq+0x26>
 8015a3e:	2b40      	cmp	r3, #64	@ 0x40
 8015a40:	d857      	bhi.n	8015af2 <USBD_StdDevReq+0xce>
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d00f      	beq.n	8015a66 <USBD_StdDevReq+0x42>
 8015a46:	2b20      	cmp	r3, #32
 8015a48:	d153      	bne.n	8015af2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	32ae      	adds	r2, #174	@ 0xae
 8015a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a58:	689b      	ldr	r3, [r3, #8]
 8015a5a:	6839      	ldr	r1, [r7, #0]
 8015a5c:	6878      	ldr	r0, [r7, #4]
 8015a5e:	4798      	blx	r3
 8015a60:	4603      	mov	r3, r0
 8015a62:	73fb      	strb	r3, [r7, #15]
      break;
 8015a64:	e04a      	b.n	8015afc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015a66:	683b      	ldr	r3, [r7, #0]
 8015a68:	785b      	ldrb	r3, [r3, #1]
 8015a6a:	2b09      	cmp	r3, #9
 8015a6c:	d83b      	bhi.n	8015ae6 <USBD_StdDevReq+0xc2>
 8015a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8015a74 <USBD_StdDevReq+0x50>)
 8015a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a74:	08015ac9 	.word	0x08015ac9
 8015a78:	08015add 	.word	0x08015add
 8015a7c:	08015ae7 	.word	0x08015ae7
 8015a80:	08015ad3 	.word	0x08015ad3
 8015a84:	08015ae7 	.word	0x08015ae7
 8015a88:	08015aa7 	.word	0x08015aa7
 8015a8c:	08015a9d 	.word	0x08015a9d
 8015a90:	08015ae7 	.word	0x08015ae7
 8015a94:	08015abf 	.word	0x08015abf
 8015a98:	08015ab1 	.word	0x08015ab1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015a9c:	6839      	ldr	r1, [r7, #0]
 8015a9e:	6878      	ldr	r0, [r7, #4]
 8015aa0:	f000 fa3c 	bl	8015f1c <USBD_GetDescriptor>
          break;
 8015aa4:	e024      	b.n	8015af0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015aa6:	6839      	ldr	r1, [r7, #0]
 8015aa8:	6878      	ldr	r0, [r7, #4]
 8015aaa:	f000 fbcb 	bl	8016244 <USBD_SetAddress>
          break;
 8015aae:	e01f      	b.n	8015af0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015ab0:	6839      	ldr	r1, [r7, #0]
 8015ab2:	6878      	ldr	r0, [r7, #4]
 8015ab4:	f000 fc0a 	bl	80162cc <USBD_SetConfig>
 8015ab8:	4603      	mov	r3, r0
 8015aba:	73fb      	strb	r3, [r7, #15]
          break;
 8015abc:	e018      	b.n	8015af0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015abe:	6839      	ldr	r1, [r7, #0]
 8015ac0:	6878      	ldr	r0, [r7, #4]
 8015ac2:	f000 fcad 	bl	8016420 <USBD_GetConfig>
          break;
 8015ac6:	e013      	b.n	8015af0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015ac8:	6839      	ldr	r1, [r7, #0]
 8015aca:	6878      	ldr	r0, [r7, #4]
 8015acc:	f000 fcde 	bl	801648c <USBD_GetStatus>
          break;
 8015ad0:	e00e      	b.n	8015af0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015ad2:	6839      	ldr	r1, [r7, #0]
 8015ad4:	6878      	ldr	r0, [r7, #4]
 8015ad6:	f000 fd0d 	bl	80164f4 <USBD_SetFeature>
          break;
 8015ada:	e009      	b.n	8015af0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015adc:	6839      	ldr	r1, [r7, #0]
 8015ade:	6878      	ldr	r0, [r7, #4]
 8015ae0:	f000 fd31 	bl	8016546 <USBD_ClrFeature>
          break;
 8015ae4:	e004      	b.n	8015af0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015ae6:	6839      	ldr	r1, [r7, #0]
 8015ae8:	6878      	ldr	r0, [r7, #4]
 8015aea:	f000 fd88 	bl	80165fe <USBD_CtlError>
          break;
 8015aee:	bf00      	nop
      }
      break;
 8015af0:	e004      	b.n	8015afc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015af2:	6839      	ldr	r1, [r7, #0]
 8015af4:	6878      	ldr	r0, [r7, #4]
 8015af6:	f000 fd82 	bl	80165fe <USBD_CtlError>
      break;
 8015afa:	bf00      	nop
  }

  return ret;
 8015afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015afe:	4618      	mov	r0, r3
 8015b00:	3710      	adds	r7, #16
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd80      	pop	{r7, pc}
 8015b06:	bf00      	nop

08015b08 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b084      	sub	sp, #16
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	6078      	str	r0, [r7, #4]
 8015b10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015b12:	2300      	movs	r3, #0
 8015b14:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015b16:	683b      	ldr	r3, [r7, #0]
 8015b18:	781b      	ldrb	r3, [r3, #0]
 8015b1a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015b1e:	2b40      	cmp	r3, #64	@ 0x40
 8015b20:	d005      	beq.n	8015b2e <USBD_StdItfReq+0x26>
 8015b22:	2b40      	cmp	r3, #64	@ 0x40
 8015b24:	d852      	bhi.n	8015bcc <USBD_StdItfReq+0xc4>
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d001      	beq.n	8015b2e <USBD_StdItfReq+0x26>
 8015b2a:	2b20      	cmp	r3, #32
 8015b2c:	d14e      	bne.n	8015bcc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015b34:	b2db      	uxtb	r3, r3
 8015b36:	3b01      	subs	r3, #1
 8015b38:	2b02      	cmp	r3, #2
 8015b3a:	d840      	bhi.n	8015bbe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015b3c:	683b      	ldr	r3, [r7, #0]
 8015b3e:	889b      	ldrh	r3, [r3, #4]
 8015b40:	b2db      	uxtb	r3, r3
 8015b42:	2b01      	cmp	r3, #1
 8015b44:	d836      	bhi.n	8015bb4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015b46:	683b      	ldr	r3, [r7, #0]
 8015b48:	889b      	ldrh	r3, [r3, #4]
 8015b4a:	b2db      	uxtb	r3, r3
 8015b4c:	4619      	mov	r1, r3
 8015b4e:	6878      	ldr	r0, [r7, #4]
 8015b50:	f7ff fedb 	bl	801590a <USBD_CoreFindIF>
 8015b54:	4603      	mov	r3, r0
 8015b56:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015b58:	7bbb      	ldrb	r3, [r7, #14]
 8015b5a:	2bff      	cmp	r3, #255	@ 0xff
 8015b5c:	d01d      	beq.n	8015b9a <USBD_StdItfReq+0x92>
 8015b5e:	7bbb      	ldrb	r3, [r7, #14]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d11a      	bne.n	8015b9a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015b64:	7bba      	ldrb	r2, [r7, #14]
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	32ae      	adds	r2, #174	@ 0xae
 8015b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b6e:	689b      	ldr	r3, [r3, #8]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d00f      	beq.n	8015b94 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015b74:	7bba      	ldrb	r2, [r7, #14]
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015b7c:	7bba      	ldrb	r2, [r7, #14]
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	32ae      	adds	r2, #174	@ 0xae
 8015b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b86:	689b      	ldr	r3, [r3, #8]
 8015b88:	6839      	ldr	r1, [r7, #0]
 8015b8a:	6878      	ldr	r0, [r7, #4]
 8015b8c:	4798      	blx	r3
 8015b8e:	4603      	mov	r3, r0
 8015b90:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015b92:	e004      	b.n	8015b9e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015b94:	2303      	movs	r3, #3
 8015b96:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015b98:	e001      	b.n	8015b9e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015b9a:	2303      	movs	r3, #3
 8015b9c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015b9e:	683b      	ldr	r3, [r7, #0]
 8015ba0:	88db      	ldrh	r3, [r3, #6]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d110      	bne.n	8015bc8 <USBD_StdItfReq+0xc0>
 8015ba6:	7bfb      	ldrb	r3, [r7, #15]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d10d      	bne.n	8015bc8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015bac:	6878      	ldr	r0, [r7, #4]
 8015bae:	f000 fdfd 	bl	80167ac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015bb2:	e009      	b.n	8015bc8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015bb4:	6839      	ldr	r1, [r7, #0]
 8015bb6:	6878      	ldr	r0, [r7, #4]
 8015bb8:	f000 fd21 	bl	80165fe <USBD_CtlError>
          break;
 8015bbc:	e004      	b.n	8015bc8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015bbe:	6839      	ldr	r1, [r7, #0]
 8015bc0:	6878      	ldr	r0, [r7, #4]
 8015bc2:	f000 fd1c 	bl	80165fe <USBD_CtlError>
          break;
 8015bc6:	e000      	b.n	8015bca <USBD_StdItfReq+0xc2>
          break;
 8015bc8:	bf00      	nop
      }
      break;
 8015bca:	e004      	b.n	8015bd6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015bcc:	6839      	ldr	r1, [r7, #0]
 8015bce:	6878      	ldr	r0, [r7, #4]
 8015bd0:	f000 fd15 	bl	80165fe <USBD_CtlError>
      break;
 8015bd4:	bf00      	nop
  }

  return ret;
 8015bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015bd8:	4618      	mov	r0, r3
 8015bda:	3710      	adds	r7, #16
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd80      	pop	{r7, pc}

08015be0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b084      	sub	sp, #16
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	6078      	str	r0, [r7, #4]
 8015be8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015bea:	2300      	movs	r3, #0
 8015bec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015bee:	683b      	ldr	r3, [r7, #0]
 8015bf0:	889b      	ldrh	r3, [r3, #4]
 8015bf2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015bf4:	683b      	ldr	r3, [r7, #0]
 8015bf6:	781b      	ldrb	r3, [r3, #0]
 8015bf8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015bfc:	2b40      	cmp	r3, #64	@ 0x40
 8015bfe:	d007      	beq.n	8015c10 <USBD_StdEPReq+0x30>
 8015c00:	2b40      	cmp	r3, #64	@ 0x40
 8015c02:	f200 817f 	bhi.w	8015f04 <USBD_StdEPReq+0x324>
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d02a      	beq.n	8015c60 <USBD_StdEPReq+0x80>
 8015c0a:	2b20      	cmp	r3, #32
 8015c0c:	f040 817a 	bne.w	8015f04 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015c10:	7bbb      	ldrb	r3, [r7, #14]
 8015c12:	4619      	mov	r1, r3
 8015c14:	6878      	ldr	r0, [r7, #4]
 8015c16:	f7ff fe85 	bl	8015924 <USBD_CoreFindEP>
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015c1e:	7b7b      	ldrb	r3, [r7, #13]
 8015c20:	2bff      	cmp	r3, #255	@ 0xff
 8015c22:	f000 8174 	beq.w	8015f0e <USBD_StdEPReq+0x32e>
 8015c26:	7b7b      	ldrb	r3, [r7, #13]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	f040 8170 	bne.w	8015f0e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015c2e:	7b7a      	ldrb	r2, [r7, #13]
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015c36:	7b7a      	ldrb	r2, [r7, #13]
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	32ae      	adds	r2, #174	@ 0xae
 8015c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c40:	689b      	ldr	r3, [r3, #8]
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	f000 8163 	beq.w	8015f0e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015c48:	7b7a      	ldrb	r2, [r7, #13]
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	32ae      	adds	r2, #174	@ 0xae
 8015c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c52:	689b      	ldr	r3, [r3, #8]
 8015c54:	6839      	ldr	r1, [r7, #0]
 8015c56:	6878      	ldr	r0, [r7, #4]
 8015c58:	4798      	blx	r3
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015c5e:	e156      	b.n	8015f0e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015c60:	683b      	ldr	r3, [r7, #0]
 8015c62:	785b      	ldrb	r3, [r3, #1]
 8015c64:	2b03      	cmp	r3, #3
 8015c66:	d008      	beq.n	8015c7a <USBD_StdEPReq+0x9a>
 8015c68:	2b03      	cmp	r3, #3
 8015c6a:	f300 8145 	bgt.w	8015ef8 <USBD_StdEPReq+0x318>
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	f000 809b 	beq.w	8015daa <USBD_StdEPReq+0x1ca>
 8015c74:	2b01      	cmp	r3, #1
 8015c76:	d03c      	beq.n	8015cf2 <USBD_StdEPReq+0x112>
 8015c78:	e13e      	b.n	8015ef8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015c80:	b2db      	uxtb	r3, r3
 8015c82:	2b02      	cmp	r3, #2
 8015c84:	d002      	beq.n	8015c8c <USBD_StdEPReq+0xac>
 8015c86:	2b03      	cmp	r3, #3
 8015c88:	d016      	beq.n	8015cb8 <USBD_StdEPReq+0xd8>
 8015c8a:	e02c      	b.n	8015ce6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015c8c:	7bbb      	ldrb	r3, [r7, #14]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d00d      	beq.n	8015cae <USBD_StdEPReq+0xce>
 8015c92:	7bbb      	ldrb	r3, [r7, #14]
 8015c94:	2b80      	cmp	r3, #128	@ 0x80
 8015c96:	d00a      	beq.n	8015cae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015c98:	7bbb      	ldrb	r3, [r7, #14]
 8015c9a:	4619      	mov	r1, r3
 8015c9c:	6878      	ldr	r0, [r7, #4]
 8015c9e:	f001 f9e3 	bl	8017068 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015ca2:	2180      	movs	r1, #128	@ 0x80
 8015ca4:	6878      	ldr	r0, [r7, #4]
 8015ca6:	f001 f9df 	bl	8017068 <USBD_LL_StallEP>
 8015caa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015cac:	e020      	b.n	8015cf0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015cae:	6839      	ldr	r1, [r7, #0]
 8015cb0:	6878      	ldr	r0, [r7, #4]
 8015cb2:	f000 fca4 	bl	80165fe <USBD_CtlError>
              break;
 8015cb6:	e01b      	b.n	8015cf0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015cb8:	683b      	ldr	r3, [r7, #0]
 8015cba:	885b      	ldrh	r3, [r3, #2]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d10e      	bne.n	8015cde <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015cc0:	7bbb      	ldrb	r3, [r7, #14]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d00b      	beq.n	8015cde <USBD_StdEPReq+0xfe>
 8015cc6:	7bbb      	ldrb	r3, [r7, #14]
 8015cc8:	2b80      	cmp	r3, #128	@ 0x80
 8015cca:	d008      	beq.n	8015cde <USBD_StdEPReq+0xfe>
 8015ccc:	683b      	ldr	r3, [r7, #0]
 8015cce:	88db      	ldrh	r3, [r3, #6]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d104      	bne.n	8015cde <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015cd4:	7bbb      	ldrb	r3, [r7, #14]
 8015cd6:	4619      	mov	r1, r3
 8015cd8:	6878      	ldr	r0, [r7, #4]
 8015cda:	f001 f9c5 	bl	8017068 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015cde:	6878      	ldr	r0, [r7, #4]
 8015ce0:	f000 fd64 	bl	80167ac <USBD_CtlSendStatus>

              break;
 8015ce4:	e004      	b.n	8015cf0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015ce6:	6839      	ldr	r1, [r7, #0]
 8015ce8:	6878      	ldr	r0, [r7, #4]
 8015cea:	f000 fc88 	bl	80165fe <USBD_CtlError>
              break;
 8015cee:	bf00      	nop
          }
          break;
 8015cf0:	e107      	b.n	8015f02 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015cf8:	b2db      	uxtb	r3, r3
 8015cfa:	2b02      	cmp	r3, #2
 8015cfc:	d002      	beq.n	8015d04 <USBD_StdEPReq+0x124>
 8015cfe:	2b03      	cmp	r3, #3
 8015d00:	d016      	beq.n	8015d30 <USBD_StdEPReq+0x150>
 8015d02:	e04b      	b.n	8015d9c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015d04:	7bbb      	ldrb	r3, [r7, #14]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d00d      	beq.n	8015d26 <USBD_StdEPReq+0x146>
 8015d0a:	7bbb      	ldrb	r3, [r7, #14]
 8015d0c:	2b80      	cmp	r3, #128	@ 0x80
 8015d0e:	d00a      	beq.n	8015d26 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015d10:	7bbb      	ldrb	r3, [r7, #14]
 8015d12:	4619      	mov	r1, r3
 8015d14:	6878      	ldr	r0, [r7, #4]
 8015d16:	f001 f9a7 	bl	8017068 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015d1a:	2180      	movs	r1, #128	@ 0x80
 8015d1c:	6878      	ldr	r0, [r7, #4]
 8015d1e:	f001 f9a3 	bl	8017068 <USBD_LL_StallEP>
 8015d22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015d24:	e040      	b.n	8015da8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015d26:	6839      	ldr	r1, [r7, #0]
 8015d28:	6878      	ldr	r0, [r7, #4]
 8015d2a:	f000 fc68 	bl	80165fe <USBD_CtlError>
              break;
 8015d2e:	e03b      	b.n	8015da8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015d30:	683b      	ldr	r3, [r7, #0]
 8015d32:	885b      	ldrh	r3, [r3, #2]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d136      	bne.n	8015da6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015d38:	7bbb      	ldrb	r3, [r7, #14]
 8015d3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d004      	beq.n	8015d4c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015d42:	7bbb      	ldrb	r3, [r7, #14]
 8015d44:	4619      	mov	r1, r3
 8015d46:	6878      	ldr	r0, [r7, #4]
 8015d48:	f001 f9ad 	bl	80170a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015d4c:	6878      	ldr	r0, [r7, #4]
 8015d4e:	f000 fd2d 	bl	80167ac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015d52:	7bbb      	ldrb	r3, [r7, #14]
 8015d54:	4619      	mov	r1, r3
 8015d56:	6878      	ldr	r0, [r7, #4]
 8015d58:	f7ff fde4 	bl	8015924 <USBD_CoreFindEP>
 8015d5c:	4603      	mov	r3, r0
 8015d5e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015d60:	7b7b      	ldrb	r3, [r7, #13]
 8015d62:	2bff      	cmp	r3, #255	@ 0xff
 8015d64:	d01f      	beq.n	8015da6 <USBD_StdEPReq+0x1c6>
 8015d66:	7b7b      	ldrb	r3, [r7, #13]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d11c      	bne.n	8015da6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015d6c:	7b7a      	ldrb	r2, [r7, #13]
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015d74:	7b7a      	ldrb	r2, [r7, #13]
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	32ae      	adds	r2, #174	@ 0xae
 8015d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d7e:	689b      	ldr	r3, [r3, #8]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d010      	beq.n	8015da6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015d84:	7b7a      	ldrb	r2, [r7, #13]
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	32ae      	adds	r2, #174	@ 0xae
 8015d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d8e:	689b      	ldr	r3, [r3, #8]
 8015d90:	6839      	ldr	r1, [r7, #0]
 8015d92:	6878      	ldr	r0, [r7, #4]
 8015d94:	4798      	blx	r3
 8015d96:	4603      	mov	r3, r0
 8015d98:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015d9a:	e004      	b.n	8015da6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015d9c:	6839      	ldr	r1, [r7, #0]
 8015d9e:	6878      	ldr	r0, [r7, #4]
 8015da0:	f000 fc2d 	bl	80165fe <USBD_CtlError>
              break;
 8015da4:	e000      	b.n	8015da8 <USBD_StdEPReq+0x1c8>
              break;
 8015da6:	bf00      	nop
          }
          break;
 8015da8:	e0ab      	b.n	8015f02 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015db0:	b2db      	uxtb	r3, r3
 8015db2:	2b02      	cmp	r3, #2
 8015db4:	d002      	beq.n	8015dbc <USBD_StdEPReq+0x1dc>
 8015db6:	2b03      	cmp	r3, #3
 8015db8:	d032      	beq.n	8015e20 <USBD_StdEPReq+0x240>
 8015dba:	e097      	b.n	8015eec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015dbc:	7bbb      	ldrb	r3, [r7, #14]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d007      	beq.n	8015dd2 <USBD_StdEPReq+0x1f2>
 8015dc2:	7bbb      	ldrb	r3, [r7, #14]
 8015dc4:	2b80      	cmp	r3, #128	@ 0x80
 8015dc6:	d004      	beq.n	8015dd2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015dc8:	6839      	ldr	r1, [r7, #0]
 8015dca:	6878      	ldr	r0, [r7, #4]
 8015dcc:	f000 fc17 	bl	80165fe <USBD_CtlError>
                break;
 8015dd0:	e091      	b.n	8015ef6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015dd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	da0b      	bge.n	8015df2 <USBD_StdEPReq+0x212>
 8015dda:	7bbb      	ldrb	r3, [r7, #14]
 8015ddc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015de0:	4613      	mov	r3, r2
 8015de2:	009b      	lsls	r3, r3, #2
 8015de4:	4413      	add	r3, r2
 8015de6:	009b      	lsls	r3, r3, #2
 8015de8:	3310      	adds	r3, #16
 8015dea:	687a      	ldr	r2, [r7, #4]
 8015dec:	4413      	add	r3, r2
 8015dee:	3304      	adds	r3, #4
 8015df0:	e00b      	b.n	8015e0a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015df2:	7bbb      	ldrb	r3, [r7, #14]
 8015df4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015df8:	4613      	mov	r3, r2
 8015dfa:	009b      	lsls	r3, r3, #2
 8015dfc:	4413      	add	r3, r2
 8015dfe:	009b      	lsls	r3, r3, #2
 8015e00:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8015e04:	687a      	ldr	r2, [r7, #4]
 8015e06:	4413      	add	r3, r2
 8015e08:	3304      	adds	r3, #4
 8015e0a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015e0c:	68bb      	ldr	r3, [r7, #8]
 8015e0e:	2200      	movs	r2, #0
 8015e10:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015e12:	68bb      	ldr	r3, [r7, #8]
 8015e14:	2202      	movs	r2, #2
 8015e16:	4619      	mov	r1, r3
 8015e18:	6878      	ldr	r0, [r7, #4]
 8015e1a:	f000 fc6d 	bl	80166f8 <USBD_CtlSendData>
              break;
 8015e1e:	e06a      	b.n	8015ef6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015e20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	da11      	bge.n	8015e4c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015e28:	7bbb      	ldrb	r3, [r7, #14]
 8015e2a:	f003 020f 	and.w	r2, r3, #15
 8015e2e:	6879      	ldr	r1, [r7, #4]
 8015e30:	4613      	mov	r3, r2
 8015e32:	009b      	lsls	r3, r3, #2
 8015e34:	4413      	add	r3, r2
 8015e36:	009b      	lsls	r3, r3, #2
 8015e38:	440b      	add	r3, r1
 8015e3a:	3324      	adds	r3, #36	@ 0x24
 8015e3c:	881b      	ldrh	r3, [r3, #0]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d117      	bne.n	8015e72 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015e42:	6839      	ldr	r1, [r7, #0]
 8015e44:	6878      	ldr	r0, [r7, #4]
 8015e46:	f000 fbda 	bl	80165fe <USBD_CtlError>
                  break;
 8015e4a:	e054      	b.n	8015ef6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015e4c:	7bbb      	ldrb	r3, [r7, #14]
 8015e4e:	f003 020f 	and.w	r2, r3, #15
 8015e52:	6879      	ldr	r1, [r7, #4]
 8015e54:	4613      	mov	r3, r2
 8015e56:	009b      	lsls	r3, r3, #2
 8015e58:	4413      	add	r3, r2
 8015e5a:	009b      	lsls	r3, r3, #2
 8015e5c:	440b      	add	r3, r1
 8015e5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015e62:	881b      	ldrh	r3, [r3, #0]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d104      	bne.n	8015e72 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015e68:	6839      	ldr	r1, [r7, #0]
 8015e6a:	6878      	ldr	r0, [r7, #4]
 8015e6c:	f000 fbc7 	bl	80165fe <USBD_CtlError>
                  break;
 8015e70:	e041      	b.n	8015ef6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015e72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	da0b      	bge.n	8015e92 <USBD_StdEPReq+0x2b2>
 8015e7a:	7bbb      	ldrb	r3, [r7, #14]
 8015e7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015e80:	4613      	mov	r3, r2
 8015e82:	009b      	lsls	r3, r3, #2
 8015e84:	4413      	add	r3, r2
 8015e86:	009b      	lsls	r3, r3, #2
 8015e88:	3310      	adds	r3, #16
 8015e8a:	687a      	ldr	r2, [r7, #4]
 8015e8c:	4413      	add	r3, r2
 8015e8e:	3304      	adds	r3, #4
 8015e90:	e00b      	b.n	8015eaa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015e92:	7bbb      	ldrb	r3, [r7, #14]
 8015e94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015e98:	4613      	mov	r3, r2
 8015e9a:	009b      	lsls	r3, r3, #2
 8015e9c:	4413      	add	r3, r2
 8015e9e:	009b      	lsls	r3, r3, #2
 8015ea0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8015ea4:	687a      	ldr	r2, [r7, #4]
 8015ea6:	4413      	add	r3, r2
 8015ea8:	3304      	adds	r3, #4
 8015eaa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015eac:	7bbb      	ldrb	r3, [r7, #14]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d002      	beq.n	8015eb8 <USBD_StdEPReq+0x2d8>
 8015eb2:	7bbb      	ldrb	r3, [r7, #14]
 8015eb4:	2b80      	cmp	r3, #128	@ 0x80
 8015eb6:	d103      	bne.n	8015ec0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015eb8:	68bb      	ldr	r3, [r7, #8]
 8015eba:	2200      	movs	r2, #0
 8015ebc:	601a      	str	r2, [r3, #0]
 8015ebe:	e00e      	b.n	8015ede <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015ec0:	7bbb      	ldrb	r3, [r7, #14]
 8015ec2:	4619      	mov	r1, r3
 8015ec4:	6878      	ldr	r0, [r7, #4]
 8015ec6:	f001 f90d 	bl	80170e4 <USBD_LL_IsStallEP>
 8015eca:	4603      	mov	r3, r0
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d003      	beq.n	8015ed8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015ed0:	68bb      	ldr	r3, [r7, #8]
 8015ed2:	2201      	movs	r2, #1
 8015ed4:	601a      	str	r2, [r3, #0]
 8015ed6:	e002      	b.n	8015ede <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015ed8:	68bb      	ldr	r3, [r7, #8]
 8015eda:	2200      	movs	r2, #0
 8015edc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015ede:	68bb      	ldr	r3, [r7, #8]
 8015ee0:	2202      	movs	r2, #2
 8015ee2:	4619      	mov	r1, r3
 8015ee4:	6878      	ldr	r0, [r7, #4]
 8015ee6:	f000 fc07 	bl	80166f8 <USBD_CtlSendData>
              break;
 8015eea:	e004      	b.n	8015ef6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015eec:	6839      	ldr	r1, [r7, #0]
 8015eee:	6878      	ldr	r0, [r7, #4]
 8015ef0:	f000 fb85 	bl	80165fe <USBD_CtlError>
              break;
 8015ef4:	bf00      	nop
          }
          break;
 8015ef6:	e004      	b.n	8015f02 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015ef8:	6839      	ldr	r1, [r7, #0]
 8015efa:	6878      	ldr	r0, [r7, #4]
 8015efc:	f000 fb7f 	bl	80165fe <USBD_CtlError>
          break;
 8015f00:	bf00      	nop
      }
      break;
 8015f02:	e005      	b.n	8015f10 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015f04:	6839      	ldr	r1, [r7, #0]
 8015f06:	6878      	ldr	r0, [r7, #4]
 8015f08:	f000 fb79 	bl	80165fe <USBD_CtlError>
      break;
 8015f0c:	e000      	b.n	8015f10 <USBD_StdEPReq+0x330>
      break;
 8015f0e:	bf00      	nop
  }

  return ret;
 8015f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f12:	4618      	mov	r0, r3
 8015f14:	3710      	adds	r7, #16
 8015f16:	46bd      	mov	sp, r7
 8015f18:	bd80      	pop	{r7, pc}
	...

08015f1c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b084      	sub	sp, #16
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
 8015f24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015f26:	2300      	movs	r3, #0
 8015f28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015f2e:	2300      	movs	r3, #0
 8015f30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015f32:	683b      	ldr	r3, [r7, #0]
 8015f34:	885b      	ldrh	r3, [r3, #2]
 8015f36:	0a1b      	lsrs	r3, r3, #8
 8015f38:	b29b      	uxth	r3, r3
 8015f3a:	3b01      	subs	r3, #1
 8015f3c:	2b0e      	cmp	r3, #14
 8015f3e:	f200 8152 	bhi.w	80161e6 <USBD_GetDescriptor+0x2ca>
 8015f42:	a201      	add	r2, pc, #4	@ (adr r2, 8015f48 <USBD_GetDescriptor+0x2c>)
 8015f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f48:	08015fb9 	.word	0x08015fb9
 8015f4c:	08015fd1 	.word	0x08015fd1
 8015f50:	08016011 	.word	0x08016011
 8015f54:	080161e7 	.word	0x080161e7
 8015f58:	080161e7 	.word	0x080161e7
 8015f5c:	08016187 	.word	0x08016187
 8015f60:	080161b3 	.word	0x080161b3
 8015f64:	080161e7 	.word	0x080161e7
 8015f68:	080161e7 	.word	0x080161e7
 8015f6c:	080161e7 	.word	0x080161e7
 8015f70:	080161e7 	.word	0x080161e7
 8015f74:	080161e7 	.word	0x080161e7
 8015f78:	080161e7 	.word	0x080161e7
 8015f7c:	080161e7 	.word	0x080161e7
 8015f80:	08015f85 	.word	0x08015f85
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015f8a:	69db      	ldr	r3, [r3, #28]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d00b      	beq.n	8015fa8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015f96:	69db      	ldr	r3, [r3, #28]
 8015f98:	687a      	ldr	r2, [r7, #4]
 8015f9a:	7c12      	ldrb	r2, [r2, #16]
 8015f9c:	f107 0108 	add.w	r1, r7, #8
 8015fa0:	4610      	mov	r0, r2
 8015fa2:	4798      	blx	r3
 8015fa4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015fa6:	e126      	b.n	80161f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015fa8:	6839      	ldr	r1, [r7, #0]
 8015faa:	6878      	ldr	r0, [r7, #4]
 8015fac:	f000 fb27 	bl	80165fe <USBD_CtlError>
        err++;
 8015fb0:	7afb      	ldrb	r3, [r7, #11]
 8015fb2:	3301      	adds	r3, #1
 8015fb4:	72fb      	strb	r3, [r7, #11]
      break;
 8015fb6:	e11e      	b.n	80161f6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	687a      	ldr	r2, [r7, #4]
 8015fc2:	7c12      	ldrb	r2, [r2, #16]
 8015fc4:	f107 0108 	add.w	r1, r7, #8
 8015fc8:	4610      	mov	r0, r2
 8015fca:	4798      	blx	r3
 8015fcc:	60f8      	str	r0, [r7, #12]
      break;
 8015fce:	e112      	b.n	80161f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	7c1b      	ldrb	r3, [r3, #16]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d10d      	bne.n	8015ff4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015fe0:	f107 0208 	add.w	r2, r7, #8
 8015fe4:	4610      	mov	r0, r2
 8015fe6:	4798      	blx	r3
 8015fe8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	3301      	adds	r3, #1
 8015fee:	2202      	movs	r2, #2
 8015ff0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015ff2:	e100      	b.n	80161f6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ffc:	f107 0208 	add.w	r2, r7, #8
 8016000:	4610      	mov	r0, r2
 8016002:	4798      	blx	r3
 8016004:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	3301      	adds	r3, #1
 801600a:	2202      	movs	r2, #2
 801600c:	701a      	strb	r2, [r3, #0]
      break;
 801600e:	e0f2      	b.n	80161f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016010:	683b      	ldr	r3, [r7, #0]
 8016012:	885b      	ldrh	r3, [r3, #2]
 8016014:	b2db      	uxtb	r3, r3
 8016016:	2b05      	cmp	r3, #5
 8016018:	f200 80ac 	bhi.w	8016174 <USBD_GetDescriptor+0x258>
 801601c:	a201      	add	r2, pc, #4	@ (adr r2, 8016024 <USBD_GetDescriptor+0x108>)
 801601e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016022:	bf00      	nop
 8016024:	0801603d 	.word	0x0801603d
 8016028:	08016071 	.word	0x08016071
 801602c:	080160a5 	.word	0x080160a5
 8016030:	080160d9 	.word	0x080160d9
 8016034:	0801610d 	.word	0x0801610d
 8016038:	08016141 	.word	0x08016141
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016042:	685b      	ldr	r3, [r3, #4]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d00b      	beq.n	8016060 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801604e:	685b      	ldr	r3, [r3, #4]
 8016050:	687a      	ldr	r2, [r7, #4]
 8016052:	7c12      	ldrb	r2, [r2, #16]
 8016054:	f107 0108 	add.w	r1, r7, #8
 8016058:	4610      	mov	r0, r2
 801605a:	4798      	blx	r3
 801605c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801605e:	e091      	b.n	8016184 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016060:	6839      	ldr	r1, [r7, #0]
 8016062:	6878      	ldr	r0, [r7, #4]
 8016064:	f000 facb 	bl	80165fe <USBD_CtlError>
            err++;
 8016068:	7afb      	ldrb	r3, [r7, #11]
 801606a:	3301      	adds	r3, #1
 801606c:	72fb      	strb	r3, [r7, #11]
          break;
 801606e:	e089      	b.n	8016184 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016076:	689b      	ldr	r3, [r3, #8]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d00b      	beq.n	8016094 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016082:	689b      	ldr	r3, [r3, #8]
 8016084:	687a      	ldr	r2, [r7, #4]
 8016086:	7c12      	ldrb	r2, [r2, #16]
 8016088:	f107 0108 	add.w	r1, r7, #8
 801608c:	4610      	mov	r0, r2
 801608e:	4798      	blx	r3
 8016090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016092:	e077      	b.n	8016184 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016094:	6839      	ldr	r1, [r7, #0]
 8016096:	6878      	ldr	r0, [r7, #4]
 8016098:	f000 fab1 	bl	80165fe <USBD_CtlError>
            err++;
 801609c:	7afb      	ldrb	r3, [r7, #11]
 801609e:	3301      	adds	r3, #1
 80160a0:	72fb      	strb	r3, [r7, #11]
          break;
 80160a2:	e06f      	b.n	8016184 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80160aa:	68db      	ldr	r3, [r3, #12]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d00b      	beq.n	80160c8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80160b6:	68db      	ldr	r3, [r3, #12]
 80160b8:	687a      	ldr	r2, [r7, #4]
 80160ba:	7c12      	ldrb	r2, [r2, #16]
 80160bc:	f107 0108 	add.w	r1, r7, #8
 80160c0:	4610      	mov	r0, r2
 80160c2:	4798      	blx	r3
 80160c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80160c6:	e05d      	b.n	8016184 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80160c8:	6839      	ldr	r1, [r7, #0]
 80160ca:	6878      	ldr	r0, [r7, #4]
 80160cc:	f000 fa97 	bl	80165fe <USBD_CtlError>
            err++;
 80160d0:	7afb      	ldrb	r3, [r7, #11]
 80160d2:	3301      	adds	r3, #1
 80160d4:	72fb      	strb	r3, [r7, #11]
          break;
 80160d6:	e055      	b.n	8016184 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80160de:	691b      	ldr	r3, [r3, #16]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d00b      	beq.n	80160fc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80160ea:	691b      	ldr	r3, [r3, #16]
 80160ec:	687a      	ldr	r2, [r7, #4]
 80160ee:	7c12      	ldrb	r2, [r2, #16]
 80160f0:	f107 0108 	add.w	r1, r7, #8
 80160f4:	4610      	mov	r0, r2
 80160f6:	4798      	blx	r3
 80160f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80160fa:	e043      	b.n	8016184 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80160fc:	6839      	ldr	r1, [r7, #0]
 80160fe:	6878      	ldr	r0, [r7, #4]
 8016100:	f000 fa7d 	bl	80165fe <USBD_CtlError>
            err++;
 8016104:	7afb      	ldrb	r3, [r7, #11]
 8016106:	3301      	adds	r3, #1
 8016108:	72fb      	strb	r3, [r7, #11]
          break;
 801610a:	e03b      	b.n	8016184 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016112:	695b      	ldr	r3, [r3, #20]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d00b      	beq.n	8016130 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801611e:	695b      	ldr	r3, [r3, #20]
 8016120:	687a      	ldr	r2, [r7, #4]
 8016122:	7c12      	ldrb	r2, [r2, #16]
 8016124:	f107 0108 	add.w	r1, r7, #8
 8016128:	4610      	mov	r0, r2
 801612a:	4798      	blx	r3
 801612c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801612e:	e029      	b.n	8016184 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016130:	6839      	ldr	r1, [r7, #0]
 8016132:	6878      	ldr	r0, [r7, #4]
 8016134:	f000 fa63 	bl	80165fe <USBD_CtlError>
            err++;
 8016138:	7afb      	ldrb	r3, [r7, #11]
 801613a:	3301      	adds	r3, #1
 801613c:	72fb      	strb	r3, [r7, #11]
          break;
 801613e:	e021      	b.n	8016184 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016146:	699b      	ldr	r3, [r3, #24]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d00b      	beq.n	8016164 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016152:	699b      	ldr	r3, [r3, #24]
 8016154:	687a      	ldr	r2, [r7, #4]
 8016156:	7c12      	ldrb	r2, [r2, #16]
 8016158:	f107 0108 	add.w	r1, r7, #8
 801615c:	4610      	mov	r0, r2
 801615e:	4798      	blx	r3
 8016160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016162:	e00f      	b.n	8016184 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016164:	6839      	ldr	r1, [r7, #0]
 8016166:	6878      	ldr	r0, [r7, #4]
 8016168:	f000 fa49 	bl	80165fe <USBD_CtlError>
            err++;
 801616c:	7afb      	ldrb	r3, [r7, #11]
 801616e:	3301      	adds	r3, #1
 8016170:	72fb      	strb	r3, [r7, #11]
          break;
 8016172:	e007      	b.n	8016184 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016174:	6839      	ldr	r1, [r7, #0]
 8016176:	6878      	ldr	r0, [r7, #4]
 8016178:	f000 fa41 	bl	80165fe <USBD_CtlError>
          err++;
 801617c:	7afb      	ldrb	r3, [r7, #11]
 801617e:	3301      	adds	r3, #1
 8016180:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016182:	bf00      	nop
      }
      break;
 8016184:	e037      	b.n	80161f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	7c1b      	ldrb	r3, [r3, #16]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d109      	bne.n	80161a2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016196:	f107 0208 	add.w	r2, r7, #8
 801619a:	4610      	mov	r0, r2
 801619c:	4798      	blx	r3
 801619e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80161a0:	e029      	b.n	80161f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80161a2:	6839      	ldr	r1, [r7, #0]
 80161a4:	6878      	ldr	r0, [r7, #4]
 80161a6:	f000 fa2a 	bl	80165fe <USBD_CtlError>
        err++;
 80161aa:	7afb      	ldrb	r3, [r7, #11]
 80161ac:	3301      	adds	r3, #1
 80161ae:	72fb      	strb	r3, [r7, #11]
      break;
 80161b0:	e021      	b.n	80161f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	7c1b      	ldrb	r3, [r3, #16]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d10d      	bne.n	80161d6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80161c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80161c2:	f107 0208 	add.w	r2, r7, #8
 80161c6:	4610      	mov	r0, r2
 80161c8:	4798      	blx	r3
 80161ca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	3301      	adds	r3, #1
 80161d0:	2207      	movs	r2, #7
 80161d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80161d4:	e00f      	b.n	80161f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80161d6:	6839      	ldr	r1, [r7, #0]
 80161d8:	6878      	ldr	r0, [r7, #4]
 80161da:	f000 fa10 	bl	80165fe <USBD_CtlError>
        err++;
 80161de:	7afb      	ldrb	r3, [r7, #11]
 80161e0:	3301      	adds	r3, #1
 80161e2:	72fb      	strb	r3, [r7, #11]
      break;
 80161e4:	e007      	b.n	80161f6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80161e6:	6839      	ldr	r1, [r7, #0]
 80161e8:	6878      	ldr	r0, [r7, #4]
 80161ea:	f000 fa08 	bl	80165fe <USBD_CtlError>
      err++;
 80161ee:	7afb      	ldrb	r3, [r7, #11]
 80161f0:	3301      	adds	r3, #1
 80161f2:	72fb      	strb	r3, [r7, #11]
      break;
 80161f4:	bf00      	nop
  }

  if (err != 0U)
 80161f6:	7afb      	ldrb	r3, [r7, #11]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d11e      	bne.n	801623a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80161fc:	683b      	ldr	r3, [r7, #0]
 80161fe:	88db      	ldrh	r3, [r3, #6]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d016      	beq.n	8016232 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8016204:	893b      	ldrh	r3, [r7, #8]
 8016206:	2b00      	cmp	r3, #0
 8016208:	d00e      	beq.n	8016228 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801620a:	683b      	ldr	r3, [r7, #0]
 801620c:	88da      	ldrh	r2, [r3, #6]
 801620e:	893b      	ldrh	r3, [r7, #8]
 8016210:	4293      	cmp	r3, r2
 8016212:	bf28      	it	cs
 8016214:	4613      	movcs	r3, r2
 8016216:	b29b      	uxth	r3, r3
 8016218:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801621a:	893b      	ldrh	r3, [r7, #8]
 801621c:	461a      	mov	r2, r3
 801621e:	68f9      	ldr	r1, [r7, #12]
 8016220:	6878      	ldr	r0, [r7, #4]
 8016222:	f000 fa69 	bl	80166f8 <USBD_CtlSendData>
 8016226:	e009      	b.n	801623c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016228:	6839      	ldr	r1, [r7, #0]
 801622a:	6878      	ldr	r0, [r7, #4]
 801622c:	f000 f9e7 	bl	80165fe <USBD_CtlError>
 8016230:	e004      	b.n	801623c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016232:	6878      	ldr	r0, [r7, #4]
 8016234:	f000 faba 	bl	80167ac <USBD_CtlSendStatus>
 8016238:	e000      	b.n	801623c <USBD_GetDescriptor+0x320>
    return;
 801623a:	bf00      	nop
  }
}
 801623c:	3710      	adds	r7, #16
 801623e:	46bd      	mov	sp, r7
 8016240:	bd80      	pop	{r7, pc}
 8016242:	bf00      	nop

08016244 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016244:	b580      	push	{r7, lr}
 8016246:	b084      	sub	sp, #16
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
 801624c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801624e:	683b      	ldr	r3, [r7, #0]
 8016250:	889b      	ldrh	r3, [r3, #4]
 8016252:	2b00      	cmp	r3, #0
 8016254:	d131      	bne.n	80162ba <USBD_SetAddress+0x76>
 8016256:	683b      	ldr	r3, [r7, #0]
 8016258:	88db      	ldrh	r3, [r3, #6]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d12d      	bne.n	80162ba <USBD_SetAddress+0x76>
 801625e:	683b      	ldr	r3, [r7, #0]
 8016260:	885b      	ldrh	r3, [r3, #2]
 8016262:	2b7f      	cmp	r3, #127	@ 0x7f
 8016264:	d829      	bhi.n	80162ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016266:	683b      	ldr	r3, [r7, #0]
 8016268:	885b      	ldrh	r3, [r3, #2]
 801626a:	b2db      	uxtb	r3, r3
 801626c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016270:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016278:	b2db      	uxtb	r3, r3
 801627a:	2b03      	cmp	r3, #3
 801627c:	d104      	bne.n	8016288 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801627e:	6839      	ldr	r1, [r7, #0]
 8016280:	6878      	ldr	r0, [r7, #4]
 8016282:	f000 f9bc 	bl	80165fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016286:	e01d      	b.n	80162c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	7bfa      	ldrb	r2, [r7, #15]
 801628c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016290:	7bfb      	ldrb	r3, [r7, #15]
 8016292:	4619      	mov	r1, r3
 8016294:	6878      	ldr	r0, [r7, #4]
 8016296:	f000 ff51 	bl	801713c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801629a:	6878      	ldr	r0, [r7, #4]
 801629c:	f000 fa86 	bl	80167ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80162a0:	7bfb      	ldrb	r3, [r7, #15]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d004      	beq.n	80162b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	2202      	movs	r2, #2
 80162aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80162ae:	e009      	b.n	80162c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	2201      	movs	r2, #1
 80162b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80162b8:	e004      	b.n	80162c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80162ba:	6839      	ldr	r1, [r7, #0]
 80162bc:	6878      	ldr	r0, [r7, #4]
 80162be:	f000 f99e 	bl	80165fe <USBD_CtlError>
  }
}
 80162c2:	bf00      	nop
 80162c4:	bf00      	nop
 80162c6:	3710      	adds	r7, #16
 80162c8:	46bd      	mov	sp, r7
 80162ca:	bd80      	pop	{r7, pc}

080162cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b084      	sub	sp, #16
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
 80162d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80162d6:	2300      	movs	r3, #0
 80162d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80162da:	683b      	ldr	r3, [r7, #0]
 80162dc:	885b      	ldrh	r3, [r3, #2]
 80162de:	b2da      	uxtb	r2, r3
 80162e0:	4b4e      	ldr	r3, [pc, #312]	@ (801641c <USBD_SetConfig+0x150>)
 80162e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80162e4:	4b4d      	ldr	r3, [pc, #308]	@ (801641c <USBD_SetConfig+0x150>)
 80162e6:	781b      	ldrb	r3, [r3, #0]
 80162e8:	2b01      	cmp	r3, #1
 80162ea:	d905      	bls.n	80162f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80162ec:	6839      	ldr	r1, [r7, #0]
 80162ee:	6878      	ldr	r0, [r7, #4]
 80162f0:	f000 f985 	bl	80165fe <USBD_CtlError>
    return USBD_FAIL;
 80162f4:	2303      	movs	r3, #3
 80162f6:	e08c      	b.n	8016412 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80162fe:	b2db      	uxtb	r3, r3
 8016300:	2b02      	cmp	r3, #2
 8016302:	d002      	beq.n	801630a <USBD_SetConfig+0x3e>
 8016304:	2b03      	cmp	r3, #3
 8016306:	d029      	beq.n	801635c <USBD_SetConfig+0x90>
 8016308:	e075      	b.n	80163f6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801630a:	4b44      	ldr	r3, [pc, #272]	@ (801641c <USBD_SetConfig+0x150>)
 801630c:	781b      	ldrb	r3, [r3, #0]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d020      	beq.n	8016354 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016312:	4b42      	ldr	r3, [pc, #264]	@ (801641c <USBD_SetConfig+0x150>)
 8016314:	781b      	ldrb	r3, [r3, #0]
 8016316:	461a      	mov	r2, r3
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801631c:	4b3f      	ldr	r3, [pc, #252]	@ (801641c <USBD_SetConfig+0x150>)
 801631e:	781b      	ldrb	r3, [r3, #0]
 8016320:	4619      	mov	r1, r3
 8016322:	6878      	ldr	r0, [r7, #4]
 8016324:	f7fe ffb9 	bl	801529a <USBD_SetClassConfig>
 8016328:	4603      	mov	r3, r0
 801632a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801632c:	7bfb      	ldrb	r3, [r7, #15]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d008      	beq.n	8016344 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016332:	6839      	ldr	r1, [r7, #0]
 8016334:	6878      	ldr	r0, [r7, #4]
 8016336:	f000 f962 	bl	80165fe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	2202      	movs	r2, #2
 801633e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016342:	e065      	b.n	8016410 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016344:	6878      	ldr	r0, [r7, #4]
 8016346:	f000 fa31 	bl	80167ac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	2203      	movs	r2, #3
 801634e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8016352:	e05d      	b.n	8016410 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016354:	6878      	ldr	r0, [r7, #4]
 8016356:	f000 fa29 	bl	80167ac <USBD_CtlSendStatus>
      break;
 801635a:	e059      	b.n	8016410 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801635c:	4b2f      	ldr	r3, [pc, #188]	@ (801641c <USBD_SetConfig+0x150>)
 801635e:	781b      	ldrb	r3, [r3, #0]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d112      	bne.n	801638a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	2202      	movs	r2, #2
 8016368:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 801636c:	4b2b      	ldr	r3, [pc, #172]	@ (801641c <USBD_SetConfig+0x150>)
 801636e:	781b      	ldrb	r3, [r3, #0]
 8016370:	461a      	mov	r2, r3
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016376:	4b29      	ldr	r3, [pc, #164]	@ (801641c <USBD_SetConfig+0x150>)
 8016378:	781b      	ldrb	r3, [r3, #0]
 801637a:	4619      	mov	r1, r3
 801637c:	6878      	ldr	r0, [r7, #4]
 801637e:	f7fe ffa8 	bl	80152d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016382:	6878      	ldr	r0, [r7, #4]
 8016384:	f000 fa12 	bl	80167ac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016388:	e042      	b.n	8016410 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801638a:	4b24      	ldr	r3, [pc, #144]	@ (801641c <USBD_SetConfig+0x150>)
 801638c:	781b      	ldrb	r3, [r3, #0]
 801638e:	461a      	mov	r2, r3
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	685b      	ldr	r3, [r3, #4]
 8016394:	429a      	cmp	r2, r3
 8016396:	d02a      	beq.n	80163ee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	685b      	ldr	r3, [r3, #4]
 801639c:	b2db      	uxtb	r3, r3
 801639e:	4619      	mov	r1, r3
 80163a0:	6878      	ldr	r0, [r7, #4]
 80163a2:	f7fe ff96 	bl	80152d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80163a6:	4b1d      	ldr	r3, [pc, #116]	@ (801641c <USBD_SetConfig+0x150>)
 80163a8:	781b      	ldrb	r3, [r3, #0]
 80163aa:	461a      	mov	r2, r3
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80163b0:	4b1a      	ldr	r3, [pc, #104]	@ (801641c <USBD_SetConfig+0x150>)
 80163b2:	781b      	ldrb	r3, [r3, #0]
 80163b4:	4619      	mov	r1, r3
 80163b6:	6878      	ldr	r0, [r7, #4]
 80163b8:	f7fe ff6f 	bl	801529a <USBD_SetClassConfig>
 80163bc:	4603      	mov	r3, r0
 80163be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80163c0:	7bfb      	ldrb	r3, [r7, #15]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d00f      	beq.n	80163e6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80163c6:	6839      	ldr	r1, [r7, #0]
 80163c8:	6878      	ldr	r0, [r7, #4]
 80163ca:	f000 f918 	bl	80165fe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	685b      	ldr	r3, [r3, #4]
 80163d2:	b2db      	uxtb	r3, r3
 80163d4:	4619      	mov	r1, r3
 80163d6:	6878      	ldr	r0, [r7, #4]
 80163d8:	f7fe ff7b 	bl	80152d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	2202      	movs	r2, #2
 80163e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80163e4:	e014      	b.n	8016410 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80163e6:	6878      	ldr	r0, [r7, #4]
 80163e8:	f000 f9e0 	bl	80167ac <USBD_CtlSendStatus>
      break;
 80163ec:	e010      	b.n	8016410 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80163ee:	6878      	ldr	r0, [r7, #4]
 80163f0:	f000 f9dc 	bl	80167ac <USBD_CtlSendStatus>
      break;
 80163f4:	e00c      	b.n	8016410 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80163f6:	6839      	ldr	r1, [r7, #0]
 80163f8:	6878      	ldr	r0, [r7, #4]
 80163fa:	f000 f900 	bl	80165fe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80163fe:	4b07      	ldr	r3, [pc, #28]	@ (801641c <USBD_SetConfig+0x150>)
 8016400:	781b      	ldrb	r3, [r3, #0]
 8016402:	4619      	mov	r1, r3
 8016404:	6878      	ldr	r0, [r7, #4]
 8016406:	f7fe ff64 	bl	80152d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801640a:	2303      	movs	r3, #3
 801640c:	73fb      	strb	r3, [r7, #15]
      break;
 801640e:	bf00      	nop
  }

  return ret;
 8016410:	7bfb      	ldrb	r3, [r7, #15]
}
 8016412:	4618      	mov	r0, r3
 8016414:	3710      	adds	r7, #16
 8016416:	46bd      	mov	sp, r7
 8016418:	bd80      	pop	{r7, pc}
 801641a:	bf00      	nop
 801641c:	24025bac 	.word	0x24025bac

08016420 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016420:	b580      	push	{r7, lr}
 8016422:	b082      	sub	sp, #8
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]
 8016428:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801642a:	683b      	ldr	r3, [r7, #0]
 801642c:	88db      	ldrh	r3, [r3, #6]
 801642e:	2b01      	cmp	r3, #1
 8016430:	d004      	beq.n	801643c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016432:	6839      	ldr	r1, [r7, #0]
 8016434:	6878      	ldr	r0, [r7, #4]
 8016436:	f000 f8e2 	bl	80165fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801643a:	e023      	b.n	8016484 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016442:	b2db      	uxtb	r3, r3
 8016444:	2b02      	cmp	r3, #2
 8016446:	dc02      	bgt.n	801644e <USBD_GetConfig+0x2e>
 8016448:	2b00      	cmp	r3, #0
 801644a:	dc03      	bgt.n	8016454 <USBD_GetConfig+0x34>
 801644c:	e015      	b.n	801647a <USBD_GetConfig+0x5a>
 801644e:	2b03      	cmp	r3, #3
 8016450:	d00b      	beq.n	801646a <USBD_GetConfig+0x4a>
 8016452:	e012      	b.n	801647a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	2200      	movs	r2, #0
 8016458:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	3308      	adds	r3, #8
 801645e:	2201      	movs	r2, #1
 8016460:	4619      	mov	r1, r3
 8016462:	6878      	ldr	r0, [r7, #4]
 8016464:	f000 f948 	bl	80166f8 <USBD_CtlSendData>
        break;
 8016468:	e00c      	b.n	8016484 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	3304      	adds	r3, #4
 801646e:	2201      	movs	r2, #1
 8016470:	4619      	mov	r1, r3
 8016472:	6878      	ldr	r0, [r7, #4]
 8016474:	f000 f940 	bl	80166f8 <USBD_CtlSendData>
        break;
 8016478:	e004      	b.n	8016484 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801647a:	6839      	ldr	r1, [r7, #0]
 801647c:	6878      	ldr	r0, [r7, #4]
 801647e:	f000 f8be 	bl	80165fe <USBD_CtlError>
        break;
 8016482:	bf00      	nop
}
 8016484:	bf00      	nop
 8016486:	3708      	adds	r7, #8
 8016488:	46bd      	mov	sp, r7
 801648a:	bd80      	pop	{r7, pc}

0801648c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801648c:	b580      	push	{r7, lr}
 801648e:	b082      	sub	sp, #8
 8016490:	af00      	add	r7, sp, #0
 8016492:	6078      	str	r0, [r7, #4]
 8016494:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801649c:	b2db      	uxtb	r3, r3
 801649e:	3b01      	subs	r3, #1
 80164a0:	2b02      	cmp	r3, #2
 80164a2:	d81e      	bhi.n	80164e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80164a4:	683b      	ldr	r3, [r7, #0]
 80164a6:	88db      	ldrh	r3, [r3, #6]
 80164a8:	2b02      	cmp	r3, #2
 80164aa:	d004      	beq.n	80164b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80164ac:	6839      	ldr	r1, [r7, #0]
 80164ae:	6878      	ldr	r0, [r7, #4]
 80164b0:	f000 f8a5 	bl	80165fe <USBD_CtlError>
        break;
 80164b4:	e01a      	b.n	80164ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	2201      	movs	r2, #1
 80164ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d005      	beq.n	80164d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	68db      	ldr	r3, [r3, #12]
 80164ca:	f043 0202 	orr.w	r2, r3, #2
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	330c      	adds	r3, #12
 80164d6:	2202      	movs	r2, #2
 80164d8:	4619      	mov	r1, r3
 80164da:	6878      	ldr	r0, [r7, #4]
 80164dc:	f000 f90c 	bl	80166f8 <USBD_CtlSendData>
      break;
 80164e0:	e004      	b.n	80164ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80164e2:	6839      	ldr	r1, [r7, #0]
 80164e4:	6878      	ldr	r0, [r7, #4]
 80164e6:	f000 f88a 	bl	80165fe <USBD_CtlError>
      break;
 80164ea:	bf00      	nop
  }
}
 80164ec:	bf00      	nop
 80164ee:	3708      	adds	r7, #8
 80164f0:	46bd      	mov	sp, r7
 80164f2:	bd80      	pop	{r7, pc}

080164f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b082      	sub	sp, #8
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
 80164fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80164fe:	683b      	ldr	r3, [r7, #0]
 8016500:	885b      	ldrh	r3, [r3, #2]
 8016502:	2b01      	cmp	r3, #1
 8016504:	d107      	bne.n	8016516 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	2201      	movs	r2, #1
 801650a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801650e:	6878      	ldr	r0, [r7, #4]
 8016510:	f000 f94c 	bl	80167ac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016514:	e013      	b.n	801653e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8016516:	683b      	ldr	r3, [r7, #0]
 8016518:	885b      	ldrh	r3, [r3, #2]
 801651a:	2b02      	cmp	r3, #2
 801651c:	d10b      	bne.n	8016536 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801651e:	683b      	ldr	r3, [r7, #0]
 8016520:	889b      	ldrh	r3, [r3, #4]
 8016522:	0a1b      	lsrs	r3, r3, #8
 8016524:	b29b      	uxth	r3, r3
 8016526:	b2da      	uxtb	r2, r3
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801652e:	6878      	ldr	r0, [r7, #4]
 8016530:	f000 f93c 	bl	80167ac <USBD_CtlSendStatus>
}
 8016534:	e003      	b.n	801653e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8016536:	6839      	ldr	r1, [r7, #0]
 8016538:	6878      	ldr	r0, [r7, #4]
 801653a:	f000 f860 	bl	80165fe <USBD_CtlError>
}
 801653e:	bf00      	nop
 8016540:	3708      	adds	r7, #8
 8016542:	46bd      	mov	sp, r7
 8016544:	bd80      	pop	{r7, pc}

08016546 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016546:	b580      	push	{r7, lr}
 8016548:	b082      	sub	sp, #8
 801654a:	af00      	add	r7, sp, #0
 801654c:	6078      	str	r0, [r7, #4]
 801654e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016556:	b2db      	uxtb	r3, r3
 8016558:	3b01      	subs	r3, #1
 801655a:	2b02      	cmp	r3, #2
 801655c:	d80b      	bhi.n	8016576 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801655e:	683b      	ldr	r3, [r7, #0]
 8016560:	885b      	ldrh	r3, [r3, #2]
 8016562:	2b01      	cmp	r3, #1
 8016564:	d10c      	bne.n	8016580 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	2200      	movs	r2, #0
 801656a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801656e:	6878      	ldr	r0, [r7, #4]
 8016570:	f000 f91c 	bl	80167ac <USBD_CtlSendStatus>
      }
      break;
 8016574:	e004      	b.n	8016580 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016576:	6839      	ldr	r1, [r7, #0]
 8016578:	6878      	ldr	r0, [r7, #4]
 801657a:	f000 f840 	bl	80165fe <USBD_CtlError>
      break;
 801657e:	e000      	b.n	8016582 <USBD_ClrFeature+0x3c>
      break;
 8016580:	bf00      	nop
  }
}
 8016582:	bf00      	nop
 8016584:	3708      	adds	r7, #8
 8016586:	46bd      	mov	sp, r7
 8016588:	bd80      	pop	{r7, pc}

0801658a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801658a:	b580      	push	{r7, lr}
 801658c:	b084      	sub	sp, #16
 801658e:	af00      	add	r7, sp, #0
 8016590:	6078      	str	r0, [r7, #4]
 8016592:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016594:	683b      	ldr	r3, [r7, #0]
 8016596:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	781a      	ldrb	r2, [r3, #0]
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	3301      	adds	r3, #1
 80165a4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	781a      	ldrb	r2, [r3, #0]
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	3301      	adds	r3, #1
 80165b2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80165b4:	68f8      	ldr	r0, [r7, #12]
 80165b6:	f7ff fa16 	bl	80159e6 <SWAPBYTE>
 80165ba:	4603      	mov	r3, r0
 80165bc:	461a      	mov	r2, r3
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	3301      	adds	r3, #1
 80165c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	3301      	adds	r3, #1
 80165cc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80165ce:	68f8      	ldr	r0, [r7, #12]
 80165d0:	f7ff fa09 	bl	80159e6 <SWAPBYTE>
 80165d4:	4603      	mov	r3, r0
 80165d6:	461a      	mov	r2, r3
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	3301      	adds	r3, #1
 80165e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	3301      	adds	r3, #1
 80165e6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80165e8:	68f8      	ldr	r0, [r7, #12]
 80165ea:	f7ff f9fc 	bl	80159e6 <SWAPBYTE>
 80165ee:	4603      	mov	r3, r0
 80165f0:	461a      	mov	r2, r3
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	80da      	strh	r2, [r3, #6]
}
 80165f6:	bf00      	nop
 80165f8:	3710      	adds	r7, #16
 80165fa:	46bd      	mov	sp, r7
 80165fc:	bd80      	pop	{r7, pc}

080165fe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80165fe:	b580      	push	{r7, lr}
 8016600:	b082      	sub	sp, #8
 8016602:	af00      	add	r7, sp, #0
 8016604:	6078      	str	r0, [r7, #4]
 8016606:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016608:	2180      	movs	r1, #128	@ 0x80
 801660a:	6878      	ldr	r0, [r7, #4]
 801660c:	f000 fd2c 	bl	8017068 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016610:	2100      	movs	r1, #0
 8016612:	6878      	ldr	r0, [r7, #4]
 8016614:	f000 fd28 	bl	8017068 <USBD_LL_StallEP>
}
 8016618:	bf00      	nop
 801661a:	3708      	adds	r7, #8
 801661c:	46bd      	mov	sp, r7
 801661e:	bd80      	pop	{r7, pc}

08016620 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016620:	b580      	push	{r7, lr}
 8016622:	b086      	sub	sp, #24
 8016624:	af00      	add	r7, sp, #0
 8016626:	60f8      	str	r0, [r7, #12]
 8016628:	60b9      	str	r1, [r7, #8]
 801662a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801662c:	2300      	movs	r3, #0
 801662e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d042      	beq.n	80166bc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801663a:	6938      	ldr	r0, [r7, #16]
 801663c:	f000 f842 	bl	80166c4 <USBD_GetLen>
 8016640:	4603      	mov	r3, r0
 8016642:	3301      	adds	r3, #1
 8016644:	005b      	lsls	r3, r3, #1
 8016646:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801664a:	d808      	bhi.n	801665e <USBD_GetString+0x3e>
 801664c:	6938      	ldr	r0, [r7, #16]
 801664e:	f000 f839 	bl	80166c4 <USBD_GetLen>
 8016652:	4603      	mov	r3, r0
 8016654:	3301      	adds	r3, #1
 8016656:	b29b      	uxth	r3, r3
 8016658:	005b      	lsls	r3, r3, #1
 801665a:	b29a      	uxth	r2, r3
 801665c:	e001      	b.n	8016662 <USBD_GetString+0x42>
 801665e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016666:	7dfb      	ldrb	r3, [r7, #23]
 8016668:	68ba      	ldr	r2, [r7, #8]
 801666a:	4413      	add	r3, r2
 801666c:	687a      	ldr	r2, [r7, #4]
 801666e:	7812      	ldrb	r2, [r2, #0]
 8016670:	701a      	strb	r2, [r3, #0]
  idx++;
 8016672:	7dfb      	ldrb	r3, [r7, #23]
 8016674:	3301      	adds	r3, #1
 8016676:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016678:	7dfb      	ldrb	r3, [r7, #23]
 801667a:	68ba      	ldr	r2, [r7, #8]
 801667c:	4413      	add	r3, r2
 801667e:	2203      	movs	r2, #3
 8016680:	701a      	strb	r2, [r3, #0]
  idx++;
 8016682:	7dfb      	ldrb	r3, [r7, #23]
 8016684:	3301      	adds	r3, #1
 8016686:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016688:	e013      	b.n	80166b2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801668a:	7dfb      	ldrb	r3, [r7, #23]
 801668c:	68ba      	ldr	r2, [r7, #8]
 801668e:	4413      	add	r3, r2
 8016690:	693a      	ldr	r2, [r7, #16]
 8016692:	7812      	ldrb	r2, [r2, #0]
 8016694:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016696:	693b      	ldr	r3, [r7, #16]
 8016698:	3301      	adds	r3, #1
 801669a:	613b      	str	r3, [r7, #16]
    idx++;
 801669c:	7dfb      	ldrb	r3, [r7, #23]
 801669e:	3301      	adds	r3, #1
 80166a0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80166a2:	7dfb      	ldrb	r3, [r7, #23]
 80166a4:	68ba      	ldr	r2, [r7, #8]
 80166a6:	4413      	add	r3, r2
 80166a8:	2200      	movs	r2, #0
 80166aa:	701a      	strb	r2, [r3, #0]
    idx++;
 80166ac:	7dfb      	ldrb	r3, [r7, #23]
 80166ae:	3301      	adds	r3, #1
 80166b0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80166b2:	693b      	ldr	r3, [r7, #16]
 80166b4:	781b      	ldrb	r3, [r3, #0]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d1e7      	bne.n	801668a <USBD_GetString+0x6a>
 80166ba:	e000      	b.n	80166be <USBD_GetString+0x9e>
    return;
 80166bc:	bf00      	nop
  }
}
 80166be:	3718      	adds	r7, #24
 80166c0:	46bd      	mov	sp, r7
 80166c2:	bd80      	pop	{r7, pc}

080166c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80166c4:	b480      	push	{r7}
 80166c6:	b085      	sub	sp, #20
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80166cc:	2300      	movs	r3, #0
 80166ce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80166d4:	e005      	b.n	80166e2 <USBD_GetLen+0x1e>
  {
    len++;
 80166d6:	7bfb      	ldrb	r3, [r7, #15]
 80166d8:	3301      	adds	r3, #1
 80166da:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80166dc:	68bb      	ldr	r3, [r7, #8]
 80166de:	3301      	adds	r3, #1
 80166e0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80166e2:	68bb      	ldr	r3, [r7, #8]
 80166e4:	781b      	ldrb	r3, [r3, #0]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d1f5      	bne.n	80166d6 <USBD_GetLen+0x12>
  }

  return len;
 80166ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80166ec:	4618      	mov	r0, r3
 80166ee:	3714      	adds	r7, #20
 80166f0:	46bd      	mov	sp, r7
 80166f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166f6:	4770      	bx	lr

080166f8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b084      	sub	sp, #16
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	60f8      	str	r0, [r7, #12]
 8016700:	60b9      	str	r1, [r7, #8]
 8016702:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	2202      	movs	r2, #2
 8016708:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	687a      	ldr	r2, [r7, #4]
 8016710:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	687a      	ldr	r2, [r7, #4]
 8016716:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	68ba      	ldr	r2, [r7, #8]
 801671c:	2100      	movs	r1, #0
 801671e:	68f8      	ldr	r0, [r7, #12]
 8016720:	f000 fd2b 	bl	801717a <USBD_LL_Transmit>

  return USBD_OK;
 8016724:	2300      	movs	r3, #0
}
 8016726:	4618      	mov	r0, r3
 8016728:	3710      	adds	r7, #16
 801672a:	46bd      	mov	sp, r7
 801672c:	bd80      	pop	{r7, pc}

0801672e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801672e:	b580      	push	{r7, lr}
 8016730:	b084      	sub	sp, #16
 8016732:	af00      	add	r7, sp, #0
 8016734:	60f8      	str	r0, [r7, #12]
 8016736:	60b9      	str	r1, [r7, #8]
 8016738:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	68ba      	ldr	r2, [r7, #8]
 801673e:	2100      	movs	r1, #0
 8016740:	68f8      	ldr	r0, [r7, #12]
 8016742:	f000 fd1a 	bl	801717a <USBD_LL_Transmit>

  return USBD_OK;
 8016746:	2300      	movs	r3, #0
}
 8016748:	4618      	mov	r0, r3
 801674a:	3710      	adds	r7, #16
 801674c:	46bd      	mov	sp, r7
 801674e:	bd80      	pop	{r7, pc}

08016750 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b084      	sub	sp, #16
 8016754:	af00      	add	r7, sp, #0
 8016756:	60f8      	str	r0, [r7, #12]
 8016758:	60b9      	str	r1, [r7, #8]
 801675a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	2203      	movs	r2, #3
 8016760:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	687a      	ldr	r2, [r7, #4]
 8016768:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	687a      	ldr	r2, [r7, #4]
 8016770:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	68ba      	ldr	r2, [r7, #8]
 8016778:	2100      	movs	r1, #0
 801677a:	68f8      	ldr	r0, [r7, #12]
 801677c:	f000 fd1e 	bl	80171bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016780:	2300      	movs	r3, #0
}
 8016782:	4618      	mov	r0, r3
 8016784:	3710      	adds	r7, #16
 8016786:	46bd      	mov	sp, r7
 8016788:	bd80      	pop	{r7, pc}

0801678a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801678a:	b580      	push	{r7, lr}
 801678c:	b084      	sub	sp, #16
 801678e:	af00      	add	r7, sp, #0
 8016790:	60f8      	str	r0, [r7, #12]
 8016792:	60b9      	str	r1, [r7, #8]
 8016794:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	68ba      	ldr	r2, [r7, #8]
 801679a:	2100      	movs	r1, #0
 801679c:	68f8      	ldr	r0, [r7, #12]
 801679e:	f000 fd0d 	bl	80171bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80167a2:	2300      	movs	r3, #0
}
 80167a4:	4618      	mov	r0, r3
 80167a6:	3710      	adds	r7, #16
 80167a8:	46bd      	mov	sp, r7
 80167aa:	bd80      	pop	{r7, pc}

080167ac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b082      	sub	sp, #8
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	2204      	movs	r2, #4
 80167b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80167bc:	2300      	movs	r3, #0
 80167be:	2200      	movs	r2, #0
 80167c0:	2100      	movs	r1, #0
 80167c2:	6878      	ldr	r0, [r7, #4]
 80167c4:	f000 fcd9 	bl	801717a <USBD_LL_Transmit>

  return USBD_OK;
 80167c8:	2300      	movs	r3, #0
}
 80167ca:	4618      	mov	r0, r3
 80167cc:	3708      	adds	r7, #8
 80167ce:	46bd      	mov	sp, r7
 80167d0:	bd80      	pop	{r7, pc}

080167d2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80167d2:	b580      	push	{r7, lr}
 80167d4:	b082      	sub	sp, #8
 80167d6:	af00      	add	r7, sp, #0
 80167d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	2205      	movs	r2, #5
 80167de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80167e2:	2300      	movs	r3, #0
 80167e4:	2200      	movs	r2, #0
 80167e6:	2100      	movs	r1, #0
 80167e8:	6878      	ldr	r0, [r7, #4]
 80167ea:	f000 fce7 	bl	80171bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80167ee:	2300      	movs	r3, #0
}
 80167f0:	4618      	mov	r0, r3
 80167f2:	3708      	adds	r7, #8
 80167f4:	46bd      	mov	sp, r7
 80167f6:	bd80      	pop	{r7, pc}

080167f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80167fc:	2200      	movs	r2, #0
 80167fe:	4918      	ldr	r1, [pc, #96]	@ (8016860 <MX_USB_DEVICE_Init+0x68>)
 8016800:	4818      	ldr	r0, [pc, #96]	@ (8016864 <MX_USB_DEVICE_Init+0x6c>)
 8016802:	f7fe fccd 	bl	80151a0 <USBD_Init>
 8016806:	4603      	mov	r3, r0
 8016808:	2b00      	cmp	r3, #0
 801680a:	d001      	beq.n	8016810 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801680c:	f7eb faa0 	bl	8001d50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016810:	4915      	ldr	r1, [pc, #84]	@ (8016868 <MX_USB_DEVICE_Init+0x70>)
 8016812:	4814      	ldr	r0, [pc, #80]	@ (8016864 <MX_USB_DEVICE_Init+0x6c>)
 8016814:	f7fe fcf4 	bl	8015200 <USBD_RegisterClass>
 8016818:	4603      	mov	r3, r0
 801681a:	2b00      	cmp	r3, #0
 801681c:	d001      	beq.n	8016822 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801681e:	f7eb fa97 	bl	8001d50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016822:	4912      	ldr	r1, [pc, #72]	@ (801686c <MX_USB_DEVICE_Init+0x74>)
 8016824:	480f      	ldr	r0, [pc, #60]	@ (8016864 <MX_USB_DEVICE_Init+0x6c>)
 8016826:	f7fe fbeb 	bl	8015000 <USBD_CDC_RegisterInterface>
 801682a:	4603      	mov	r3, r0
 801682c:	2b00      	cmp	r3, #0
 801682e:	d001      	beq.n	8016834 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016830:	f7eb fa8e 	bl	8001d50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016834:	480b      	ldr	r0, [pc, #44]	@ (8016864 <MX_USB_DEVICE_Init+0x6c>)
 8016836:	f7fe fd19 	bl	801526c <USBD_Start>
 801683a:	4603      	mov	r3, r0
 801683c:	2b00      	cmp	r3, #0
 801683e:	d001      	beq.n	8016844 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016840:	f7eb fa86 	bl	8001d50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016844:	f7f6 f870 	bl	800c928 <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 8016848:	4b06      	ldr	r3, [pc, #24]	@ (8016864 <MX_USB_DEVICE_Init+0x6c>)
 801684a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801684e:	4a05      	ldr	r2, [pc, #20]	@ (8016864 <MX_USB_DEVICE_Init+0x6c>)
 8016850:	33b0      	adds	r3, #176	@ 0xb0
 8016852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016856:	4a06      	ldr	r2, [pc, #24]	@ (8016870 <MX_USB_DEVICE_Init+0x78>)
 8016858:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801685a:	bf00      	nop
 801685c:	bd80      	pop	{r7, pc}
 801685e:	bf00      	nop
 8016860:	240000c8 	.word	0x240000c8
 8016864:	24025bb0 	.word	0x24025bb0
 8016868:	24000034 	.word	0x24000034
 801686c:	240000b4 	.word	0x240000b4
 8016870:	24025e8c 	.word	0x24025e8c

08016874 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016874:	b580      	push	{r7, lr}
 8016876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016878:	2200      	movs	r2, #0
 801687a:	4905      	ldr	r1, [pc, #20]	@ (8016890 <CDC_Init_FS+0x1c>)
 801687c:	4805      	ldr	r0, [pc, #20]	@ (8016894 <CDC_Init_FS+0x20>)
 801687e:	f7fe fbd9 	bl	8015034 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016882:	4905      	ldr	r1, [pc, #20]	@ (8016898 <CDC_Init_FS+0x24>)
 8016884:	4803      	ldr	r0, [pc, #12]	@ (8016894 <CDC_Init_FS+0x20>)
 8016886:	f7fe fbf7 	bl	8015078 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801688a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801688c:	4618      	mov	r0, r3
 801688e:	bd80      	pop	{r7, pc}
 8016890:	24026690 	.word	0x24026690
 8016894:	24025bb0 	.word	0x24025bb0
 8016898:	24025e90 	.word	0x24025e90

0801689c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801689c:	b480      	push	{r7}
 801689e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80168a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80168a2:	4618      	mov	r0, r3
 80168a4:	46bd      	mov	sp, r7
 80168a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168aa:	4770      	bx	lr

080168ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80168ac:	b480      	push	{r7}
 80168ae:	b083      	sub	sp, #12
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	4603      	mov	r3, r0
 80168b4:	6039      	str	r1, [r7, #0]
 80168b6:	71fb      	strb	r3, [r7, #7]
 80168b8:	4613      	mov	r3, r2
 80168ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80168bc:	79fb      	ldrb	r3, [r7, #7]
 80168be:	2b23      	cmp	r3, #35	@ 0x23
 80168c0:	d84a      	bhi.n	8016958 <CDC_Control_FS+0xac>
 80168c2:	a201      	add	r2, pc, #4	@ (adr r2, 80168c8 <CDC_Control_FS+0x1c>)
 80168c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168c8:	08016959 	.word	0x08016959
 80168cc:	08016959 	.word	0x08016959
 80168d0:	08016959 	.word	0x08016959
 80168d4:	08016959 	.word	0x08016959
 80168d8:	08016959 	.word	0x08016959
 80168dc:	08016959 	.word	0x08016959
 80168e0:	08016959 	.word	0x08016959
 80168e4:	08016959 	.word	0x08016959
 80168e8:	08016959 	.word	0x08016959
 80168ec:	08016959 	.word	0x08016959
 80168f0:	08016959 	.word	0x08016959
 80168f4:	08016959 	.word	0x08016959
 80168f8:	08016959 	.word	0x08016959
 80168fc:	08016959 	.word	0x08016959
 8016900:	08016959 	.word	0x08016959
 8016904:	08016959 	.word	0x08016959
 8016908:	08016959 	.word	0x08016959
 801690c:	08016959 	.word	0x08016959
 8016910:	08016959 	.word	0x08016959
 8016914:	08016959 	.word	0x08016959
 8016918:	08016959 	.word	0x08016959
 801691c:	08016959 	.word	0x08016959
 8016920:	08016959 	.word	0x08016959
 8016924:	08016959 	.word	0x08016959
 8016928:	08016959 	.word	0x08016959
 801692c:	08016959 	.word	0x08016959
 8016930:	08016959 	.word	0x08016959
 8016934:	08016959 	.word	0x08016959
 8016938:	08016959 	.word	0x08016959
 801693c:	08016959 	.word	0x08016959
 8016940:	08016959 	.word	0x08016959
 8016944:	08016959 	.word	0x08016959
 8016948:	08016959 	.word	0x08016959
 801694c:	08016959 	.word	0x08016959
 8016950:	08016959 	.word	0x08016959
 8016954:	08016959 	.word	0x08016959
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016958:	bf00      	nop
  }

  return (USBD_OK);
 801695a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801695c:	4618      	mov	r0, r3
 801695e:	370c      	adds	r7, #12
 8016960:	46bd      	mov	sp, r7
 8016962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016966:	4770      	bx	lr

08016968 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016968:	b580      	push	{r7, lr}
 801696a:	b082      	sub	sp, #8
 801696c:	af00      	add	r7, sp, #0
 801696e:	6078      	str	r0, [r7, #4]
 8016970:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016972:	6879      	ldr	r1, [r7, #4]
 8016974:	480a      	ldr	r0, [pc, #40]	@ (80169a0 <CDC_Receive_FS+0x38>)
 8016976:	f7fe fb7f 	bl	8015078 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801697a:	4809      	ldr	r0, [pc, #36]	@ (80169a0 <CDC_Receive_FS+0x38>)
 801697c:	f7fe fbda 	bl	8015134 <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 8016980:	4b08      	ldr	r3, [pc, #32]	@ (80169a4 <CDC_Receive_FS+0x3c>)
 8016982:	2201      	movs	r2, #1
 8016984:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, Buf, *Len, 100);
 8016986:	683b      	ldr	r3, [r7, #0]
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	b29a      	uxth	r2, r3
 801698c:	2364      	movs	r3, #100	@ 0x64
 801698e:	6879      	ldr	r1, [r7, #4]
 8016990:	4805      	ldr	r0, [pc, #20]	@ (80169a8 <CDC_Receive_FS+0x40>)
 8016992:	f7fa fa59 	bl	8010e48 <HAL_UART_Transmit>

	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 8016996:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016998:	4618      	mov	r0, r3
 801699a:	3708      	adds	r7, #8
 801699c:	46bd      	mov	sp, r7
 801699e:	bd80      	pop	{r7, pc}
 80169a0:	24025bb0 	.word	0x24025bb0
 80169a4:	2400079c 	.word	0x2400079c
 80169a8:	24000624 	.word	0x24000624

080169ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b084      	sub	sp, #16
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	6078      	str	r0, [r7, #4]
 80169b4:	460b      	mov	r3, r1
 80169b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80169b8:	2300      	movs	r3, #0
 80169ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80169bc:	4b0d      	ldr	r3, [pc, #52]	@ (80169f4 <CDC_Transmit_FS+0x48>)
 80169be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80169c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80169c4:	68bb      	ldr	r3, [r7, #8]
 80169c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d001      	beq.n	80169d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80169ce:	2301      	movs	r3, #1
 80169d0:	e00b      	b.n	80169ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80169d2:	887b      	ldrh	r3, [r7, #2]
 80169d4:	461a      	mov	r2, r3
 80169d6:	6879      	ldr	r1, [r7, #4]
 80169d8:	4806      	ldr	r0, [pc, #24]	@ (80169f4 <CDC_Transmit_FS+0x48>)
 80169da:	f7fe fb2b 	bl	8015034 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80169de:	4805      	ldr	r0, [pc, #20]	@ (80169f4 <CDC_Transmit_FS+0x48>)
 80169e0:	f7fe fb68 	bl	80150b4 <USBD_CDC_TransmitPacket>
 80169e4:	4603      	mov	r3, r0
 80169e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80169e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80169ea:	4618      	mov	r0, r3
 80169ec:	3710      	adds	r7, #16
 80169ee:	46bd      	mov	sp, r7
 80169f0:	bd80      	pop	{r7, pc}
 80169f2:	bf00      	nop
 80169f4:	24025bb0 	.word	0x24025bb0

080169f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80169f8:	b480      	push	{r7}
 80169fa:	b087      	sub	sp, #28
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	60f8      	str	r0, [r7, #12]
 8016a00:	60b9      	str	r1, [r7, #8]
 8016a02:	4613      	mov	r3, r2
 8016a04:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016a06:	2300      	movs	r3, #0
 8016a08:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8016a0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016a0e:	4618      	mov	r0, r3
 8016a10:	371c      	adds	r7, #28
 8016a12:	46bd      	mov	sp, r7
 8016a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a18:	4770      	bx	lr
	...

08016a1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a1c:	b480      	push	{r7}
 8016a1e:	b083      	sub	sp, #12
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	4603      	mov	r3, r0
 8016a24:	6039      	str	r1, [r7, #0]
 8016a26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016a28:	683b      	ldr	r3, [r7, #0]
 8016a2a:	2212      	movs	r2, #18
 8016a2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016a2e:	4b03      	ldr	r3, [pc, #12]	@ (8016a3c <USBD_FS_DeviceDescriptor+0x20>)
}
 8016a30:	4618      	mov	r0, r3
 8016a32:	370c      	adds	r7, #12
 8016a34:	46bd      	mov	sp, r7
 8016a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a3a:	4770      	bx	lr
 8016a3c:	240000e8 	.word	0x240000e8

08016a40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a40:	b480      	push	{r7}
 8016a42:	b083      	sub	sp, #12
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	4603      	mov	r3, r0
 8016a48:	6039      	str	r1, [r7, #0]
 8016a4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016a4c:	683b      	ldr	r3, [r7, #0]
 8016a4e:	2204      	movs	r2, #4
 8016a50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016a52:	4b03      	ldr	r3, [pc, #12]	@ (8016a60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016a54:	4618      	mov	r0, r3
 8016a56:	370c      	adds	r7, #12
 8016a58:	46bd      	mov	sp, r7
 8016a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a5e:	4770      	bx	lr
 8016a60:	240000fc 	.word	0x240000fc

08016a64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b082      	sub	sp, #8
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	4603      	mov	r3, r0
 8016a6c:	6039      	str	r1, [r7, #0]
 8016a6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016a70:	79fb      	ldrb	r3, [r7, #7]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d105      	bne.n	8016a82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016a76:	683a      	ldr	r2, [r7, #0]
 8016a78:	4907      	ldr	r1, [pc, #28]	@ (8016a98 <USBD_FS_ProductStrDescriptor+0x34>)
 8016a7a:	4808      	ldr	r0, [pc, #32]	@ (8016a9c <USBD_FS_ProductStrDescriptor+0x38>)
 8016a7c:	f7ff fdd0 	bl	8016620 <USBD_GetString>
 8016a80:	e004      	b.n	8016a8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016a82:	683a      	ldr	r2, [r7, #0]
 8016a84:	4904      	ldr	r1, [pc, #16]	@ (8016a98 <USBD_FS_ProductStrDescriptor+0x34>)
 8016a86:	4805      	ldr	r0, [pc, #20]	@ (8016a9c <USBD_FS_ProductStrDescriptor+0x38>)
 8016a88:	f7ff fdca 	bl	8016620 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016a8c:	4b02      	ldr	r3, [pc, #8]	@ (8016a98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016a8e:	4618      	mov	r0, r3
 8016a90:	3708      	adds	r7, #8
 8016a92:	46bd      	mov	sp, r7
 8016a94:	bd80      	pop	{r7, pc}
 8016a96:	bf00      	nop
 8016a98:	24026e90 	.word	0x24026e90
 8016a9c:	08017dd8 	.word	0x08017dd8

08016aa0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b082      	sub	sp, #8
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	4603      	mov	r3, r0
 8016aa8:	6039      	str	r1, [r7, #0]
 8016aaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016aac:	683a      	ldr	r2, [r7, #0]
 8016aae:	4904      	ldr	r1, [pc, #16]	@ (8016ac0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016ab0:	4804      	ldr	r0, [pc, #16]	@ (8016ac4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016ab2:	f7ff fdb5 	bl	8016620 <USBD_GetString>
  return USBD_StrDesc;
 8016ab6:	4b02      	ldr	r3, [pc, #8]	@ (8016ac0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016ab8:	4618      	mov	r0, r3
 8016aba:	3708      	adds	r7, #8
 8016abc:	46bd      	mov	sp, r7
 8016abe:	bd80      	pop	{r7, pc}
 8016ac0:	24026e90 	.word	0x24026e90
 8016ac4:	08017df0 	.word	0x08017df0

08016ac8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ac8:	b580      	push	{r7, lr}
 8016aca:	b082      	sub	sp, #8
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	4603      	mov	r3, r0
 8016ad0:	6039      	str	r1, [r7, #0]
 8016ad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016ad4:	683b      	ldr	r3, [r7, #0]
 8016ad6:	221a      	movs	r2, #26
 8016ad8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016ada:	f000 f843 	bl	8016b64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016ade:	4b02      	ldr	r3, [pc, #8]	@ (8016ae8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	3708      	adds	r7, #8
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	bd80      	pop	{r7, pc}
 8016ae8:	24000100 	.word	0x24000100

08016aec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016aec:	b580      	push	{r7, lr}
 8016aee:	b082      	sub	sp, #8
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	4603      	mov	r3, r0
 8016af4:	6039      	str	r1, [r7, #0]
 8016af6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016af8:	79fb      	ldrb	r3, [r7, #7]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d105      	bne.n	8016b0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016afe:	683a      	ldr	r2, [r7, #0]
 8016b00:	4907      	ldr	r1, [pc, #28]	@ (8016b20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016b02:	4808      	ldr	r0, [pc, #32]	@ (8016b24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016b04:	f7ff fd8c 	bl	8016620 <USBD_GetString>
 8016b08:	e004      	b.n	8016b14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016b0a:	683a      	ldr	r2, [r7, #0]
 8016b0c:	4904      	ldr	r1, [pc, #16]	@ (8016b20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016b0e:	4805      	ldr	r0, [pc, #20]	@ (8016b24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016b10:	f7ff fd86 	bl	8016620 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016b14:	4b02      	ldr	r3, [pc, #8]	@ (8016b20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016b16:	4618      	mov	r0, r3
 8016b18:	3708      	adds	r7, #8
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	bd80      	pop	{r7, pc}
 8016b1e:	bf00      	nop
 8016b20:	24026e90 	.word	0x24026e90
 8016b24:	08017e04 	.word	0x08017e04

08016b28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b082      	sub	sp, #8
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	4603      	mov	r3, r0
 8016b30:	6039      	str	r1, [r7, #0]
 8016b32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016b34:	79fb      	ldrb	r3, [r7, #7]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d105      	bne.n	8016b46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016b3a:	683a      	ldr	r2, [r7, #0]
 8016b3c:	4907      	ldr	r1, [pc, #28]	@ (8016b5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016b3e:	4808      	ldr	r0, [pc, #32]	@ (8016b60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016b40:	f7ff fd6e 	bl	8016620 <USBD_GetString>
 8016b44:	e004      	b.n	8016b50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016b46:	683a      	ldr	r2, [r7, #0]
 8016b48:	4904      	ldr	r1, [pc, #16]	@ (8016b5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016b4a:	4805      	ldr	r0, [pc, #20]	@ (8016b60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016b4c:	f7ff fd68 	bl	8016620 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016b50:	4b02      	ldr	r3, [pc, #8]	@ (8016b5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016b52:	4618      	mov	r0, r3
 8016b54:	3708      	adds	r7, #8
 8016b56:	46bd      	mov	sp, r7
 8016b58:	bd80      	pop	{r7, pc}
 8016b5a:	bf00      	nop
 8016b5c:	24026e90 	.word	0x24026e90
 8016b60:	08017e10 	.word	0x08017e10

08016b64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016b64:	b580      	push	{r7, lr}
 8016b66:	b084      	sub	sp, #16
 8016b68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8016ba8 <Get_SerialNum+0x44>)
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016b70:	4b0e      	ldr	r3, [pc, #56]	@ (8016bac <Get_SerialNum+0x48>)
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016b76:	4b0e      	ldr	r3, [pc, #56]	@ (8016bb0 <Get_SerialNum+0x4c>)
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016b7c:	68fa      	ldr	r2, [r7, #12]
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	4413      	add	r3, r2
 8016b82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d009      	beq.n	8016b9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016b8a:	2208      	movs	r2, #8
 8016b8c:	4909      	ldr	r1, [pc, #36]	@ (8016bb4 <Get_SerialNum+0x50>)
 8016b8e:	68f8      	ldr	r0, [r7, #12]
 8016b90:	f000 f814 	bl	8016bbc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016b94:	2204      	movs	r2, #4
 8016b96:	4908      	ldr	r1, [pc, #32]	@ (8016bb8 <Get_SerialNum+0x54>)
 8016b98:	68b8      	ldr	r0, [r7, #8]
 8016b9a:	f000 f80f 	bl	8016bbc <IntToUnicode>
  }
}
 8016b9e:	bf00      	nop
 8016ba0:	3710      	adds	r7, #16
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	bd80      	pop	{r7, pc}
 8016ba6:	bf00      	nop
 8016ba8:	1ff1e800 	.word	0x1ff1e800
 8016bac:	1ff1e804 	.word	0x1ff1e804
 8016bb0:	1ff1e808 	.word	0x1ff1e808
 8016bb4:	24000102 	.word	0x24000102
 8016bb8:	24000112 	.word	0x24000112

08016bbc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016bbc:	b480      	push	{r7}
 8016bbe:	b087      	sub	sp, #28
 8016bc0:	af00      	add	r7, sp, #0
 8016bc2:	60f8      	str	r0, [r7, #12]
 8016bc4:	60b9      	str	r1, [r7, #8]
 8016bc6:	4613      	mov	r3, r2
 8016bc8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016bca:	2300      	movs	r3, #0
 8016bcc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016bce:	2300      	movs	r3, #0
 8016bd0:	75fb      	strb	r3, [r7, #23]
 8016bd2:	e027      	b.n	8016c24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	0f1b      	lsrs	r3, r3, #28
 8016bd8:	2b09      	cmp	r3, #9
 8016bda:	d80b      	bhi.n	8016bf4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	0f1b      	lsrs	r3, r3, #28
 8016be0:	b2da      	uxtb	r2, r3
 8016be2:	7dfb      	ldrb	r3, [r7, #23]
 8016be4:	005b      	lsls	r3, r3, #1
 8016be6:	4619      	mov	r1, r3
 8016be8:	68bb      	ldr	r3, [r7, #8]
 8016bea:	440b      	add	r3, r1
 8016bec:	3230      	adds	r2, #48	@ 0x30
 8016bee:	b2d2      	uxtb	r2, r2
 8016bf0:	701a      	strb	r2, [r3, #0]
 8016bf2:	e00a      	b.n	8016c0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	0f1b      	lsrs	r3, r3, #28
 8016bf8:	b2da      	uxtb	r2, r3
 8016bfa:	7dfb      	ldrb	r3, [r7, #23]
 8016bfc:	005b      	lsls	r3, r3, #1
 8016bfe:	4619      	mov	r1, r3
 8016c00:	68bb      	ldr	r3, [r7, #8]
 8016c02:	440b      	add	r3, r1
 8016c04:	3237      	adds	r2, #55	@ 0x37
 8016c06:	b2d2      	uxtb	r2, r2
 8016c08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	011b      	lsls	r3, r3, #4
 8016c0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016c10:	7dfb      	ldrb	r3, [r7, #23]
 8016c12:	005b      	lsls	r3, r3, #1
 8016c14:	3301      	adds	r3, #1
 8016c16:	68ba      	ldr	r2, [r7, #8]
 8016c18:	4413      	add	r3, r2
 8016c1a:	2200      	movs	r2, #0
 8016c1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016c1e:	7dfb      	ldrb	r3, [r7, #23]
 8016c20:	3301      	adds	r3, #1
 8016c22:	75fb      	strb	r3, [r7, #23]
 8016c24:	7dfa      	ldrb	r2, [r7, #23]
 8016c26:	79fb      	ldrb	r3, [r7, #7]
 8016c28:	429a      	cmp	r2, r3
 8016c2a:	d3d3      	bcc.n	8016bd4 <IntToUnicode+0x18>
  }
}
 8016c2c:	bf00      	nop
 8016c2e:	bf00      	nop
 8016c30:	371c      	adds	r7, #28
 8016c32:	46bd      	mov	sp, r7
 8016c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c38:	4770      	bx	lr
	...

08016c3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016c3c:	b580      	push	{r7, lr}
 8016c3e:	b0ba      	sub	sp, #232	@ 0xe8
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016c44:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8016c48:	2200      	movs	r2, #0
 8016c4a:	601a      	str	r2, [r3, #0]
 8016c4c:	605a      	str	r2, [r3, #4]
 8016c4e:	609a      	str	r2, [r3, #8]
 8016c50:	60da      	str	r2, [r3, #12]
 8016c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016c54:	f107 0310 	add.w	r3, r7, #16
 8016c58:	22c0      	movs	r2, #192	@ 0xc0
 8016c5a:	2100      	movs	r1, #0
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	f000 fbfd 	bl	801745c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	4a2c      	ldr	r2, [pc, #176]	@ (8016d18 <HAL_PCD_MspInit+0xdc>)
 8016c68:	4293      	cmp	r3, r2
 8016c6a:	d151      	bne.n	8016d10 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016c6c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8016c70:	f04f 0300 	mov.w	r3, #0
 8016c74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8016c78:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8016c7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016c80:	f107 0310 	add.w	r3, r7, #16
 8016c84:	4618      	mov	r0, r3
 8016c86:	f7f6 fe45 	bl	800d914 <HAL_RCCEx_PeriphCLKConfig>
 8016c8a:	4603      	mov	r3, r0
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d001      	beq.n	8016c94 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8016c90:	f7eb f85e 	bl	8001d50 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8016c94:	f7f5 fe48 	bl	800c928 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016c98:	4b20      	ldr	r3, [pc, #128]	@ (8016d1c <HAL_PCD_MspInit+0xe0>)
 8016c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8016c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8016d1c <HAL_PCD_MspInit+0xe0>)
 8016ca0:	f043 0301 	orr.w	r3, r3, #1
 8016ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8016ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8016d1c <HAL_PCD_MspInit+0xe0>)
 8016caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8016cae:	f003 0301 	and.w	r3, r3, #1
 8016cb2:	60fb      	str	r3, [r7, #12]
 8016cb4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016cb6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8016cba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016cbe:	2302      	movs	r3, #2
 8016cc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016cc4:	2300      	movs	r3, #0
 8016cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016cca:	2300      	movs	r3, #0
 8016ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8016cd0:	230a      	movs	r3, #10
 8016cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016cd6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8016cda:	4619      	mov	r1, r3
 8016cdc:	4810      	ldr	r0, [pc, #64]	@ (8016d20 <HAL_PCD_MspInit+0xe4>)
 8016cde:	f7ef ff5f 	bl	8006ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8016d1c <HAL_PCD_MspInit+0xe0>)
 8016ce4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016ce8:	4a0c      	ldr	r2, [pc, #48]	@ (8016d1c <HAL_PCD_MspInit+0xe0>)
 8016cea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8016cee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8016cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8016d1c <HAL_PCD_MspInit+0xe0>)
 8016cf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016cfc:	60bb      	str	r3, [r7, #8]
 8016cfe:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8016d00:	2200      	movs	r2, #0
 8016d02:	2100      	movs	r1, #0
 8016d04:	2065      	movs	r0, #101	@ 0x65
 8016d06:	f7ec f8b8 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016d0a:	2065      	movs	r0, #101	@ 0x65
 8016d0c:	f7ec f8cf 	bl	8002eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016d10:	bf00      	nop
 8016d12:	37e8      	adds	r7, #232	@ 0xe8
 8016d14:	46bd      	mov	sp, r7
 8016d16:	bd80      	pop	{r7, pc}
 8016d18:	40080000 	.word	0x40080000
 8016d1c:	58024400 	.word	0x58024400
 8016d20:	58020000 	.word	0x58020000

08016d24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d24:	b580      	push	{r7, lr}
 8016d26:	b082      	sub	sp, #8
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8016d38:	4619      	mov	r1, r3
 8016d3a:	4610      	mov	r0, r2
 8016d3c:	f7fe fae3 	bl	8015306 <USBD_LL_SetupStage>
}
 8016d40:	bf00      	nop
 8016d42:	3708      	adds	r7, #8
 8016d44:	46bd      	mov	sp, r7
 8016d46:	bd80      	pop	{r7, pc}

08016d48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d48:	b580      	push	{r7, lr}
 8016d4a:	b082      	sub	sp, #8
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	6078      	str	r0, [r7, #4]
 8016d50:	460b      	mov	r3, r1
 8016d52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8016d5a:	78fa      	ldrb	r2, [r7, #3]
 8016d5c:	6879      	ldr	r1, [r7, #4]
 8016d5e:	4613      	mov	r3, r2
 8016d60:	00db      	lsls	r3, r3, #3
 8016d62:	4413      	add	r3, r2
 8016d64:	009b      	lsls	r3, r3, #2
 8016d66:	440b      	add	r3, r1
 8016d68:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8016d6c:	681a      	ldr	r2, [r3, #0]
 8016d6e:	78fb      	ldrb	r3, [r7, #3]
 8016d70:	4619      	mov	r1, r3
 8016d72:	f7fe fb1d 	bl	80153b0 <USBD_LL_DataOutStage>
}
 8016d76:	bf00      	nop
 8016d78:	3708      	adds	r7, #8
 8016d7a:	46bd      	mov	sp, r7
 8016d7c:	bd80      	pop	{r7, pc}

08016d7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d7e:	b580      	push	{r7, lr}
 8016d80:	b082      	sub	sp, #8
 8016d82:	af00      	add	r7, sp, #0
 8016d84:	6078      	str	r0, [r7, #4]
 8016d86:	460b      	mov	r3, r1
 8016d88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8016d90:	78fa      	ldrb	r2, [r7, #3]
 8016d92:	6879      	ldr	r1, [r7, #4]
 8016d94:	4613      	mov	r3, r2
 8016d96:	00db      	lsls	r3, r3, #3
 8016d98:	4413      	add	r3, r2
 8016d9a:	009b      	lsls	r3, r3, #2
 8016d9c:	440b      	add	r3, r1
 8016d9e:	3320      	adds	r3, #32
 8016da0:	681a      	ldr	r2, [r3, #0]
 8016da2:	78fb      	ldrb	r3, [r7, #3]
 8016da4:	4619      	mov	r1, r3
 8016da6:	f7fe fbb6 	bl	8015516 <USBD_LL_DataInStage>
}
 8016daa:	bf00      	nop
 8016dac:	3708      	adds	r7, #8
 8016dae:	46bd      	mov	sp, r7
 8016db0:	bd80      	pop	{r7, pc}

08016db2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016db2:	b580      	push	{r7, lr}
 8016db4:	b082      	sub	sp, #8
 8016db6:	af00      	add	r7, sp, #0
 8016db8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	f7fe fcf0 	bl	80157a6 <USBD_LL_SOF>
}
 8016dc6:	bf00      	nop
 8016dc8:	3708      	adds	r7, #8
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	bd80      	pop	{r7, pc}

08016dce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016dce:	b580      	push	{r7, lr}
 8016dd0:	b084      	sub	sp, #16
 8016dd2:	af00      	add	r7, sp, #0
 8016dd4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016dd6:	2301      	movs	r3, #1
 8016dd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	79db      	ldrb	r3, [r3, #7]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d102      	bne.n	8016de8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016de2:	2300      	movs	r3, #0
 8016de4:	73fb      	strb	r3, [r7, #15]
 8016de6:	e008      	b.n	8016dfa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	79db      	ldrb	r3, [r3, #7]
 8016dec:	2b02      	cmp	r3, #2
 8016dee:	d102      	bne.n	8016df6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016df0:	2301      	movs	r3, #1
 8016df2:	73fb      	strb	r3, [r7, #15]
 8016df4:	e001      	b.n	8016dfa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016df6:	f7ea ffab 	bl	8001d50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016e00:	7bfa      	ldrb	r2, [r7, #15]
 8016e02:	4611      	mov	r1, r2
 8016e04:	4618      	mov	r0, r3
 8016e06:	f7fe fc8a 	bl	801571e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016e10:	4618      	mov	r0, r3
 8016e12:	f7fe fc32 	bl	801567a <USBD_LL_Reset>
}
 8016e16:	bf00      	nop
 8016e18:	3710      	adds	r7, #16
 8016e1a:	46bd      	mov	sp, r7
 8016e1c:	bd80      	pop	{r7, pc}
	...

08016e20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e20:	b580      	push	{r7, lr}
 8016e22:	b082      	sub	sp, #8
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016e2e:	4618      	mov	r0, r3
 8016e30:	f7fe fc85 	bl	801573e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	687a      	ldr	r2, [r7, #4]
 8016e40:	6812      	ldr	r2, [r2, #0]
 8016e42:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8016e46:	f043 0301 	orr.w	r3, r3, #1
 8016e4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	7adb      	ldrb	r3, [r3, #11]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d005      	beq.n	8016e60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016e54:	4b04      	ldr	r3, [pc, #16]	@ (8016e68 <HAL_PCD_SuspendCallback+0x48>)
 8016e56:	691b      	ldr	r3, [r3, #16]
 8016e58:	4a03      	ldr	r2, [pc, #12]	@ (8016e68 <HAL_PCD_SuspendCallback+0x48>)
 8016e5a:	f043 0306 	orr.w	r3, r3, #6
 8016e5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016e60:	bf00      	nop
 8016e62:	3708      	adds	r7, #8
 8016e64:	46bd      	mov	sp, r7
 8016e66:	bd80      	pop	{r7, pc}
 8016e68:	e000ed00 	.word	0xe000ed00

08016e6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b082      	sub	sp, #8
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016e7a:	4618      	mov	r0, r3
 8016e7c:	f7fe fc7b 	bl	8015776 <USBD_LL_Resume>
}
 8016e80:	bf00      	nop
 8016e82:	3708      	adds	r7, #8
 8016e84:	46bd      	mov	sp, r7
 8016e86:	bd80      	pop	{r7, pc}

08016e88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e88:	b580      	push	{r7, lr}
 8016e8a:	b082      	sub	sp, #8
 8016e8c:	af00      	add	r7, sp, #0
 8016e8e:	6078      	str	r0, [r7, #4]
 8016e90:	460b      	mov	r3, r1
 8016e92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016e9a:	78fa      	ldrb	r2, [r7, #3]
 8016e9c:	4611      	mov	r1, r2
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	f7fe fcd3 	bl	801584a <USBD_LL_IsoOUTIncomplete>
}
 8016ea4:	bf00      	nop
 8016ea6:	3708      	adds	r7, #8
 8016ea8:	46bd      	mov	sp, r7
 8016eaa:	bd80      	pop	{r7, pc}

08016eac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016eac:	b580      	push	{r7, lr}
 8016eae:	b082      	sub	sp, #8
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	6078      	str	r0, [r7, #4]
 8016eb4:	460b      	mov	r3, r1
 8016eb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016ebe:	78fa      	ldrb	r2, [r7, #3]
 8016ec0:	4611      	mov	r1, r2
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f7fe fc8f 	bl	80157e6 <USBD_LL_IsoINIncomplete>
}
 8016ec8:	bf00      	nop
 8016eca:	3708      	adds	r7, #8
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	bd80      	pop	{r7, pc}

08016ed0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ed0:	b580      	push	{r7, lr}
 8016ed2:	b082      	sub	sp, #8
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016ede:	4618      	mov	r0, r3
 8016ee0:	f7fe fce5 	bl	80158ae <USBD_LL_DevConnected>
}
 8016ee4:	bf00      	nop
 8016ee6:	3708      	adds	r7, #8
 8016ee8:	46bd      	mov	sp, r7
 8016eea:	bd80      	pop	{r7, pc}

08016eec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	b082      	sub	sp, #8
 8016ef0:	af00      	add	r7, sp, #0
 8016ef2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016efa:	4618      	mov	r0, r3
 8016efc:	f7fe fce2 	bl	80158c4 <USBD_LL_DevDisconnected>
}
 8016f00:	bf00      	nop
 8016f02:	3708      	adds	r7, #8
 8016f04:	46bd      	mov	sp, r7
 8016f06:	bd80      	pop	{r7, pc}

08016f08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016f08:	b580      	push	{r7, lr}
 8016f0a:	b082      	sub	sp, #8
 8016f0c:	af00      	add	r7, sp, #0
 8016f0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	781b      	ldrb	r3, [r3, #0]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d13e      	bne.n	8016f96 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016f18:	4a21      	ldr	r2, [pc, #132]	@ (8016fa0 <USBD_LL_Init+0x98>)
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	4a1f      	ldr	r2, [pc, #124]	@ (8016fa0 <USBD_LL_Init+0x98>)
 8016f24:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016f28:	4b1d      	ldr	r3, [pc, #116]	@ (8016fa0 <USBD_LL_Init+0x98>)
 8016f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8016fa4 <USBD_LL_Init+0x9c>)
 8016f2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8016f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8016fa0 <USBD_LL_Init+0x98>)
 8016f30:	2209      	movs	r2, #9
 8016f32:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016f34:	4b1a      	ldr	r3, [pc, #104]	@ (8016fa0 <USBD_LL_Init+0x98>)
 8016f36:	2202      	movs	r2, #2
 8016f38:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016f3a:	4b19      	ldr	r3, [pc, #100]	@ (8016fa0 <USBD_LL_Init+0x98>)
 8016f3c:	2200      	movs	r2, #0
 8016f3e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016f40:	4b17      	ldr	r3, [pc, #92]	@ (8016fa0 <USBD_LL_Init+0x98>)
 8016f42:	2202      	movs	r2, #2
 8016f44:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016f46:	4b16      	ldr	r3, [pc, #88]	@ (8016fa0 <USBD_LL_Init+0x98>)
 8016f48:	2200      	movs	r2, #0
 8016f4a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016f4c:	4b14      	ldr	r3, [pc, #80]	@ (8016fa0 <USBD_LL_Init+0x98>)
 8016f4e:	2200      	movs	r2, #0
 8016f50:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016f52:	4b13      	ldr	r3, [pc, #76]	@ (8016fa0 <USBD_LL_Init+0x98>)
 8016f54:	2200      	movs	r2, #0
 8016f56:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8016f58:	4b11      	ldr	r3, [pc, #68]	@ (8016fa0 <USBD_LL_Init+0x98>)
 8016f5a:	2200      	movs	r2, #0
 8016f5c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016f5e:	4b10      	ldr	r3, [pc, #64]	@ (8016fa0 <USBD_LL_Init+0x98>)
 8016f60:	2200      	movs	r2, #0
 8016f62:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016f64:	4b0e      	ldr	r3, [pc, #56]	@ (8016fa0 <USBD_LL_Init+0x98>)
 8016f66:	2200      	movs	r2, #0
 8016f68:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016f6a:	480d      	ldr	r0, [pc, #52]	@ (8016fa0 <USBD_LL_Init+0x98>)
 8016f6c:	f7f4 fa02 	bl	800b374 <HAL_PCD_Init>
 8016f70:	4603      	mov	r3, r0
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d001      	beq.n	8016f7a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016f76:	f7ea feeb 	bl	8001d50 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016f7a:	2180      	movs	r1, #128	@ 0x80
 8016f7c:	4808      	ldr	r0, [pc, #32]	@ (8016fa0 <USBD_LL_Init+0x98>)
 8016f7e:	f7f5 fc58 	bl	800c832 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016f82:	2240      	movs	r2, #64	@ 0x40
 8016f84:	2100      	movs	r1, #0
 8016f86:	4806      	ldr	r0, [pc, #24]	@ (8016fa0 <USBD_LL_Init+0x98>)
 8016f88:	f7f5 fc0c 	bl	800c7a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016f8c:	2280      	movs	r2, #128	@ 0x80
 8016f8e:	2101      	movs	r1, #1
 8016f90:	4803      	ldr	r0, [pc, #12]	@ (8016fa0 <USBD_LL_Init+0x98>)
 8016f92:	f7f5 fc07 	bl	800c7a4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8016f96:	2300      	movs	r3, #0
}
 8016f98:	4618      	mov	r0, r3
 8016f9a:	3708      	adds	r7, #8
 8016f9c:	46bd      	mov	sp, r7
 8016f9e:	bd80      	pop	{r7, pc}
 8016fa0:	24027090 	.word	0x24027090
 8016fa4:	40080000 	.word	0x40080000

08016fa8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b084      	sub	sp, #16
 8016fac:	af00      	add	r7, sp, #0
 8016fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016fb0:	2300      	movs	r3, #0
 8016fb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	f7f4 fae4 	bl	800b58c <HAL_PCD_Start>
 8016fc4:	4603      	mov	r3, r0
 8016fc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016fc8:	7bfb      	ldrb	r3, [r7, #15]
 8016fca:	4618      	mov	r0, r3
 8016fcc:	f000 f942 	bl	8017254 <USBD_Get_USB_Status>
 8016fd0:	4603      	mov	r3, r0
 8016fd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016fd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	3710      	adds	r7, #16
 8016fda:	46bd      	mov	sp, r7
 8016fdc:	bd80      	pop	{r7, pc}

08016fde <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016fde:	b580      	push	{r7, lr}
 8016fe0:	b084      	sub	sp, #16
 8016fe2:	af00      	add	r7, sp, #0
 8016fe4:	6078      	str	r0, [r7, #4]
 8016fe6:	4608      	mov	r0, r1
 8016fe8:	4611      	mov	r1, r2
 8016fea:	461a      	mov	r2, r3
 8016fec:	4603      	mov	r3, r0
 8016fee:	70fb      	strb	r3, [r7, #3]
 8016ff0:	460b      	mov	r3, r1
 8016ff2:	70bb      	strb	r3, [r7, #2]
 8016ff4:	4613      	mov	r3, r2
 8016ff6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ff8:	2300      	movs	r3, #0
 8016ffa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017006:	78bb      	ldrb	r3, [r7, #2]
 8017008:	883a      	ldrh	r2, [r7, #0]
 801700a:	78f9      	ldrb	r1, [r7, #3]
 801700c:	f7f4 ffe5 	bl	800bfda <HAL_PCD_EP_Open>
 8017010:	4603      	mov	r3, r0
 8017012:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017014:	7bfb      	ldrb	r3, [r7, #15]
 8017016:	4618      	mov	r0, r3
 8017018:	f000 f91c 	bl	8017254 <USBD_Get_USB_Status>
 801701c:	4603      	mov	r3, r0
 801701e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017020:	7bbb      	ldrb	r3, [r7, #14]
}
 8017022:	4618      	mov	r0, r3
 8017024:	3710      	adds	r7, #16
 8017026:	46bd      	mov	sp, r7
 8017028:	bd80      	pop	{r7, pc}

0801702a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801702a:	b580      	push	{r7, lr}
 801702c:	b084      	sub	sp, #16
 801702e:	af00      	add	r7, sp, #0
 8017030:	6078      	str	r0, [r7, #4]
 8017032:	460b      	mov	r3, r1
 8017034:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017036:	2300      	movs	r3, #0
 8017038:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801703a:	2300      	movs	r3, #0
 801703c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017044:	78fa      	ldrb	r2, [r7, #3]
 8017046:	4611      	mov	r1, r2
 8017048:	4618      	mov	r0, r3
 801704a:	f7f5 f830 	bl	800c0ae <HAL_PCD_EP_Close>
 801704e:	4603      	mov	r3, r0
 8017050:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017052:	7bfb      	ldrb	r3, [r7, #15]
 8017054:	4618      	mov	r0, r3
 8017056:	f000 f8fd 	bl	8017254 <USBD_Get_USB_Status>
 801705a:	4603      	mov	r3, r0
 801705c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801705e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017060:	4618      	mov	r0, r3
 8017062:	3710      	adds	r7, #16
 8017064:	46bd      	mov	sp, r7
 8017066:	bd80      	pop	{r7, pc}

08017068 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017068:	b580      	push	{r7, lr}
 801706a:	b084      	sub	sp, #16
 801706c:	af00      	add	r7, sp, #0
 801706e:	6078      	str	r0, [r7, #4]
 8017070:	460b      	mov	r3, r1
 8017072:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017074:	2300      	movs	r3, #0
 8017076:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017078:	2300      	movs	r3, #0
 801707a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017082:	78fa      	ldrb	r2, [r7, #3]
 8017084:	4611      	mov	r1, r2
 8017086:	4618      	mov	r0, r3
 8017088:	f7f5 f8e8 	bl	800c25c <HAL_PCD_EP_SetStall>
 801708c:	4603      	mov	r3, r0
 801708e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017090:	7bfb      	ldrb	r3, [r7, #15]
 8017092:	4618      	mov	r0, r3
 8017094:	f000 f8de 	bl	8017254 <USBD_Get_USB_Status>
 8017098:	4603      	mov	r3, r0
 801709a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801709c:	7bbb      	ldrb	r3, [r7, #14]
}
 801709e:	4618      	mov	r0, r3
 80170a0:	3710      	adds	r7, #16
 80170a2:	46bd      	mov	sp, r7
 80170a4:	bd80      	pop	{r7, pc}

080170a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80170a6:	b580      	push	{r7, lr}
 80170a8:	b084      	sub	sp, #16
 80170aa:	af00      	add	r7, sp, #0
 80170ac:	6078      	str	r0, [r7, #4]
 80170ae:	460b      	mov	r3, r1
 80170b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80170b2:	2300      	movs	r3, #0
 80170b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80170b6:	2300      	movs	r3, #0
 80170b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80170c0:	78fa      	ldrb	r2, [r7, #3]
 80170c2:	4611      	mov	r1, r2
 80170c4:	4618      	mov	r0, r3
 80170c6:	f7f5 f92c 	bl	800c322 <HAL_PCD_EP_ClrStall>
 80170ca:	4603      	mov	r3, r0
 80170cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80170ce:	7bfb      	ldrb	r3, [r7, #15]
 80170d0:	4618      	mov	r0, r3
 80170d2:	f000 f8bf 	bl	8017254 <USBD_Get_USB_Status>
 80170d6:	4603      	mov	r3, r0
 80170d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80170da:	7bbb      	ldrb	r3, [r7, #14]
}
 80170dc:	4618      	mov	r0, r3
 80170de:	3710      	adds	r7, #16
 80170e0:	46bd      	mov	sp, r7
 80170e2:	bd80      	pop	{r7, pc}

080170e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80170e4:	b480      	push	{r7}
 80170e6:	b085      	sub	sp, #20
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	6078      	str	r0, [r7, #4]
 80170ec:	460b      	mov	r3, r1
 80170ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80170f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80170f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	da0b      	bge.n	8017118 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017100:	78fb      	ldrb	r3, [r7, #3]
 8017102:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017106:	68f9      	ldr	r1, [r7, #12]
 8017108:	4613      	mov	r3, r2
 801710a:	00db      	lsls	r3, r3, #3
 801710c:	4413      	add	r3, r2
 801710e:	009b      	lsls	r3, r3, #2
 8017110:	440b      	add	r3, r1
 8017112:	3316      	adds	r3, #22
 8017114:	781b      	ldrb	r3, [r3, #0]
 8017116:	e00b      	b.n	8017130 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017118:	78fb      	ldrb	r3, [r7, #3]
 801711a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801711e:	68f9      	ldr	r1, [r7, #12]
 8017120:	4613      	mov	r3, r2
 8017122:	00db      	lsls	r3, r3, #3
 8017124:	4413      	add	r3, r2
 8017126:	009b      	lsls	r3, r3, #2
 8017128:	440b      	add	r3, r1
 801712a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801712e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017130:	4618      	mov	r0, r3
 8017132:	3714      	adds	r7, #20
 8017134:	46bd      	mov	sp, r7
 8017136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801713a:	4770      	bx	lr

0801713c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801713c:	b580      	push	{r7, lr}
 801713e:	b084      	sub	sp, #16
 8017140:	af00      	add	r7, sp, #0
 8017142:	6078      	str	r0, [r7, #4]
 8017144:	460b      	mov	r3, r1
 8017146:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017148:	2300      	movs	r3, #0
 801714a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801714c:	2300      	movs	r3, #0
 801714e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017156:	78fa      	ldrb	r2, [r7, #3]
 8017158:	4611      	mov	r1, r2
 801715a:	4618      	mov	r0, r3
 801715c:	f7f4 ff19 	bl	800bf92 <HAL_PCD_SetAddress>
 8017160:	4603      	mov	r3, r0
 8017162:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017164:	7bfb      	ldrb	r3, [r7, #15]
 8017166:	4618      	mov	r0, r3
 8017168:	f000 f874 	bl	8017254 <USBD_Get_USB_Status>
 801716c:	4603      	mov	r3, r0
 801716e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017170:	7bbb      	ldrb	r3, [r7, #14]
}
 8017172:	4618      	mov	r0, r3
 8017174:	3710      	adds	r7, #16
 8017176:	46bd      	mov	sp, r7
 8017178:	bd80      	pop	{r7, pc}

0801717a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801717a:	b580      	push	{r7, lr}
 801717c:	b086      	sub	sp, #24
 801717e:	af00      	add	r7, sp, #0
 8017180:	60f8      	str	r0, [r7, #12]
 8017182:	607a      	str	r2, [r7, #4]
 8017184:	603b      	str	r3, [r7, #0]
 8017186:	460b      	mov	r3, r1
 8017188:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801718a:	2300      	movs	r3, #0
 801718c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801718e:	2300      	movs	r3, #0
 8017190:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017198:	7af9      	ldrb	r1, [r7, #11]
 801719a:	683b      	ldr	r3, [r7, #0]
 801719c:	687a      	ldr	r2, [r7, #4]
 801719e:	f7f5 f823 	bl	800c1e8 <HAL_PCD_EP_Transmit>
 80171a2:	4603      	mov	r3, r0
 80171a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80171a6:	7dfb      	ldrb	r3, [r7, #23]
 80171a8:	4618      	mov	r0, r3
 80171aa:	f000 f853 	bl	8017254 <USBD_Get_USB_Status>
 80171ae:	4603      	mov	r3, r0
 80171b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80171b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80171b4:	4618      	mov	r0, r3
 80171b6:	3718      	adds	r7, #24
 80171b8:	46bd      	mov	sp, r7
 80171ba:	bd80      	pop	{r7, pc}

080171bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80171bc:	b580      	push	{r7, lr}
 80171be:	b086      	sub	sp, #24
 80171c0:	af00      	add	r7, sp, #0
 80171c2:	60f8      	str	r0, [r7, #12]
 80171c4:	607a      	str	r2, [r7, #4]
 80171c6:	603b      	str	r3, [r7, #0]
 80171c8:	460b      	mov	r3, r1
 80171ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80171cc:	2300      	movs	r3, #0
 80171ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80171d0:	2300      	movs	r3, #0
 80171d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80171da:	7af9      	ldrb	r1, [r7, #11]
 80171dc:	683b      	ldr	r3, [r7, #0]
 80171de:	687a      	ldr	r2, [r7, #4]
 80171e0:	f7f4 ffaf 	bl	800c142 <HAL_PCD_EP_Receive>
 80171e4:	4603      	mov	r3, r0
 80171e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80171e8:	7dfb      	ldrb	r3, [r7, #23]
 80171ea:	4618      	mov	r0, r3
 80171ec:	f000 f832 	bl	8017254 <USBD_Get_USB_Status>
 80171f0:	4603      	mov	r3, r0
 80171f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80171f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80171f6:	4618      	mov	r0, r3
 80171f8:	3718      	adds	r7, #24
 80171fa:	46bd      	mov	sp, r7
 80171fc:	bd80      	pop	{r7, pc}

080171fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80171fe:	b580      	push	{r7, lr}
 8017200:	b082      	sub	sp, #8
 8017202:	af00      	add	r7, sp, #0
 8017204:	6078      	str	r0, [r7, #4]
 8017206:	460b      	mov	r3, r1
 8017208:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017210:	78fa      	ldrb	r2, [r7, #3]
 8017212:	4611      	mov	r1, r2
 8017214:	4618      	mov	r0, r3
 8017216:	f7f4 ffcf 	bl	800c1b8 <HAL_PCD_EP_GetRxCount>
 801721a:	4603      	mov	r3, r0
}
 801721c:	4618      	mov	r0, r3
 801721e:	3708      	adds	r7, #8
 8017220:	46bd      	mov	sp, r7
 8017222:	bd80      	pop	{r7, pc}

08017224 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017224:	b480      	push	{r7}
 8017226:	b083      	sub	sp, #12
 8017228:	af00      	add	r7, sp, #0
 801722a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801722c:	4b03      	ldr	r3, [pc, #12]	@ (801723c <USBD_static_malloc+0x18>)
}
 801722e:	4618      	mov	r0, r3
 8017230:	370c      	adds	r7, #12
 8017232:	46bd      	mov	sp, r7
 8017234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017238:	4770      	bx	lr
 801723a:	bf00      	nop
 801723c:	24027574 	.word	0x24027574

08017240 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017240:	b480      	push	{r7}
 8017242:	b083      	sub	sp, #12
 8017244:	af00      	add	r7, sp, #0
 8017246:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8017248:	bf00      	nop
 801724a:	370c      	adds	r7, #12
 801724c:	46bd      	mov	sp, r7
 801724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017252:	4770      	bx	lr

08017254 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017254:	b480      	push	{r7}
 8017256:	b085      	sub	sp, #20
 8017258:	af00      	add	r7, sp, #0
 801725a:	4603      	mov	r3, r0
 801725c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801725e:	2300      	movs	r3, #0
 8017260:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017262:	79fb      	ldrb	r3, [r7, #7]
 8017264:	2b03      	cmp	r3, #3
 8017266:	d817      	bhi.n	8017298 <USBD_Get_USB_Status+0x44>
 8017268:	a201      	add	r2, pc, #4	@ (adr r2, 8017270 <USBD_Get_USB_Status+0x1c>)
 801726a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801726e:	bf00      	nop
 8017270:	08017281 	.word	0x08017281
 8017274:	08017287 	.word	0x08017287
 8017278:	0801728d 	.word	0x0801728d
 801727c:	08017293 	.word	0x08017293
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017280:	2300      	movs	r3, #0
 8017282:	73fb      	strb	r3, [r7, #15]
    break;
 8017284:	e00b      	b.n	801729e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017286:	2303      	movs	r3, #3
 8017288:	73fb      	strb	r3, [r7, #15]
    break;
 801728a:	e008      	b.n	801729e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801728c:	2301      	movs	r3, #1
 801728e:	73fb      	strb	r3, [r7, #15]
    break;
 8017290:	e005      	b.n	801729e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017292:	2303      	movs	r3, #3
 8017294:	73fb      	strb	r3, [r7, #15]
    break;
 8017296:	e002      	b.n	801729e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017298:	2303      	movs	r3, #3
 801729a:	73fb      	strb	r3, [r7, #15]
    break;
 801729c:	bf00      	nop
  }
  return usb_status;
 801729e:	7bfb      	ldrb	r3, [r7, #15]
}
 80172a0:	4618      	mov	r0, r3
 80172a2:	3714      	adds	r7, #20
 80172a4:	46bd      	mov	sp, r7
 80172a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172aa:	4770      	bx	lr

080172ac <malloc>:
 80172ac:	4b02      	ldr	r3, [pc, #8]	@ (80172b8 <malloc+0xc>)
 80172ae:	4601      	mov	r1, r0
 80172b0:	6818      	ldr	r0, [r3, #0]
 80172b2:	f000 b825 	b.w	8017300 <_malloc_r>
 80172b6:	bf00      	nop
 80172b8:	2400011c 	.word	0x2400011c

080172bc <sbrk_aligned>:
 80172bc:	b570      	push	{r4, r5, r6, lr}
 80172be:	4e0f      	ldr	r6, [pc, #60]	@ (80172fc <sbrk_aligned+0x40>)
 80172c0:	460c      	mov	r4, r1
 80172c2:	6831      	ldr	r1, [r6, #0]
 80172c4:	4605      	mov	r5, r0
 80172c6:	b911      	cbnz	r1, 80172ce <sbrk_aligned+0x12>
 80172c8:	f000 f8d0 	bl	801746c <_sbrk_r>
 80172cc:	6030      	str	r0, [r6, #0]
 80172ce:	4621      	mov	r1, r4
 80172d0:	4628      	mov	r0, r5
 80172d2:	f000 f8cb 	bl	801746c <_sbrk_r>
 80172d6:	1c43      	adds	r3, r0, #1
 80172d8:	d103      	bne.n	80172e2 <sbrk_aligned+0x26>
 80172da:	f04f 34ff 	mov.w	r4, #4294967295
 80172de:	4620      	mov	r0, r4
 80172e0:	bd70      	pop	{r4, r5, r6, pc}
 80172e2:	1cc4      	adds	r4, r0, #3
 80172e4:	f024 0403 	bic.w	r4, r4, #3
 80172e8:	42a0      	cmp	r0, r4
 80172ea:	d0f8      	beq.n	80172de <sbrk_aligned+0x22>
 80172ec:	1a21      	subs	r1, r4, r0
 80172ee:	4628      	mov	r0, r5
 80172f0:	f000 f8bc 	bl	801746c <_sbrk_r>
 80172f4:	3001      	adds	r0, #1
 80172f6:	d1f2      	bne.n	80172de <sbrk_aligned+0x22>
 80172f8:	e7ef      	b.n	80172da <sbrk_aligned+0x1e>
 80172fa:	bf00      	nop
 80172fc:	24027794 	.word	0x24027794

08017300 <_malloc_r>:
 8017300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017304:	1ccd      	adds	r5, r1, #3
 8017306:	f025 0503 	bic.w	r5, r5, #3
 801730a:	3508      	adds	r5, #8
 801730c:	2d0c      	cmp	r5, #12
 801730e:	bf38      	it	cc
 8017310:	250c      	movcc	r5, #12
 8017312:	2d00      	cmp	r5, #0
 8017314:	4606      	mov	r6, r0
 8017316:	db01      	blt.n	801731c <_malloc_r+0x1c>
 8017318:	42a9      	cmp	r1, r5
 801731a:	d904      	bls.n	8017326 <_malloc_r+0x26>
 801731c:	230c      	movs	r3, #12
 801731e:	6033      	str	r3, [r6, #0]
 8017320:	2000      	movs	r0, #0
 8017322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017326:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80173fc <_malloc_r+0xfc>
 801732a:	f000 f869 	bl	8017400 <__malloc_lock>
 801732e:	f8d8 3000 	ldr.w	r3, [r8]
 8017332:	461c      	mov	r4, r3
 8017334:	bb44      	cbnz	r4, 8017388 <_malloc_r+0x88>
 8017336:	4629      	mov	r1, r5
 8017338:	4630      	mov	r0, r6
 801733a:	f7ff ffbf 	bl	80172bc <sbrk_aligned>
 801733e:	1c43      	adds	r3, r0, #1
 8017340:	4604      	mov	r4, r0
 8017342:	d158      	bne.n	80173f6 <_malloc_r+0xf6>
 8017344:	f8d8 4000 	ldr.w	r4, [r8]
 8017348:	4627      	mov	r7, r4
 801734a:	2f00      	cmp	r7, #0
 801734c:	d143      	bne.n	80173d6 <_malloc_r+0xd6>
 801734e:	2c00      	cmp	r4, #0
 8017350:	d04b      	beq.n	80173ea <_malloc_r+0xea>
 8017352:	6823      	ldr	r3, [r4, #0]
 8017354:	4639      	mov	r1, r7
 8017356:	4630      	mov	r0, r6
 8017358:	eb04 0903 	add.w	r9, r4, r3
 801735c:	f000 f886 	bl	801746c <_sbrk_r>
 8017360:	4581      	cmp	r9, r0
 8017362:	d142      	bne.n	80173ea <_malloc_r+0xea>
 8017364:	6821      	ldr	r1, [r4, #0]
 8017366:	1a6d      	subs	r5, r5, r1
 8017368:	4629      	mov	r1, r5
 801736a:	4630      	mov	r0, r6
 801736c:	f7ff ffa6 	bl	80172bc <sbrk_aligned>
 8017370:	3001      	adds	r0, #1
 8017372:	d03a      	beq.n	80173ea <_malloc_r+0xea>
 8017374:	6823      	ldr	r3, [r4, #0]
 8017376:	442b      	add	r3, r5
 8017378:	6023      	str	r3, [r4, #0]
 801737a:	f8d8 3000 	ldr.w	r3, [r8]
 801737e:	685a      	ldr	r2, [r3, #4]
 8017380:	bb62      	cbnz	r2, 80173dc <_malloc_r+0xdc>
 8017382:	f8c8 7000 	str.w	r7, [r8]
 8017386:	e00f      	b.n	80173a8 <_malloc_r+0xa8>
 8017388:	6822      	ldr	r2, [r4, #0]
 801738a:	1b52      	subs	r2, r2, r5
 801738c:	d420      	bmi.n	80173d0 <_malloc_r+0xd0>
 801738e:	2a0b      	cmp	r2, #11
 8017390:	d917      	bls.n	80173c2 <_malloc_r+0xc2>
 8017392:	1961      	adds	r1, r4, r5
 8017394:	42a3      	cmp	r3, r4
 8017396:	6025      	str	r5, [r4, #0]
 8017398:	bf18      	it	ne
 801739a:	6059      	strne	r1, [r3, #4]
 801739c:	6863      	ldr	r3, [r4, #4]
 801739e:	bf08      	it	eq
 80173a0:	f8c8 1000 	streq.w	r1, [r8]
 80173a4:	5162      	str	r2, [r4, r5]
 80173a6:	604b      	str	r3, [r1, #4]
 80173a8:	4630      	mov	r0, r6
 80173aa:	f000 f82f 	bl	801740c <__malloc_unlock>
 80173ae:	f104 000b 	add.w	r0, r4, #11
 80173b2:	1d23      	adds	r3, r4, #4
 80173b4:	f020 0007 	bic.w	r0, r0, #7
 80173b8:	1ac2      	subs	r2, r0, r3
 80173ba:	bf1c      	itt	ne
 80173bc:	1a1b      	subne	r3, r3, r0
 80173be:	50a3      	strne	r3, [r4, r2]
 80173c0:	e7af      	b.n	8017322 <_malloc_r+0x22>
 80173c2:	6862      	ldr	r2, [r4, #4]
 80173c4:	42a3      	cmp	r3, r4
 80173c6:	bf0c      	ite	eq
 80173c8:	f8c8 2000 	streq.w	r2, [r8]
 80173cc:	605a      	strne	r2, [r3, #4]
 80173ce:	e7eb      	b.n	80173a8 <_malloc_r+0xa8>
 80173d0:	4623      	mov	r3, r4
 80173d2:	6864      	ldr	r4, [r4, #4]
 80173d4:	e7ae      	b.n	8017334 <_malloc_r+0x34>
 80173d6:	463c      	mov	r4, r7
 80173d8:	687f      	ldr	r7, [r7, #4]
 80173da:	e7b6      	b.n	801734a <_malloc_r+0x4a>
 80173dc:	461a      	mov	r2, r3
 80173de:	685b      	ldr	r3, [r3, #4]
 80173e0:	42a3      	cmp	r3, r4
 80173e2:	d1fb      	bne.n	80173dc <_malloc_r+0xdc>
 80173e4:	2300      	movs	r3, #0
 80173e6:	6053      	str	r3, [r2, #4]
 80173e8:	e7de      	b.n	80173a8 <_malloc_r+0xa8>
 80173ea:	230c      	movs	r3, #12
 80173ec:	6033      	str	r3, [r6, #0]
 80173ee:	4630      	mov	r0, r6
 80173f0:	f000 f80c 	bl	801740c <__malloc_unlock>
 80173f4:	e794      	b.n	8017320 <_malloc_r+0x20>
 80173f6:	6005      	str	r5, [r0, #0]
 80173f8:	e7d6      	b.n	80173a8 <_malloc_r+0xa8>
 80173fa:	bf00      	nop
 80173fc:	24027798 	.word	0x24027798

08017400 <__malloc_lock>:
 8017400:	4801      	ldr	r0, [pc, #4]	@ (8017408 <__malloc_lock+0x8>)
 8017402:	f000 b86d 	b.w	80174e0 <__retarget_lock_acquire_recursive>
 8017406:	bf00      	nop
 8017408:	240278d8 	.word	0x240278d8

0801740c <__malloc_unlock>:
 801740c:	4801      	ldr	r0, [pc, #4]	@ (8017414 <__malloc_unlock+0x8>)
 801740e:	f000 b868 	b.w	80174e2 <__retarget_lock_release_recursive>
 8017412:	bf00      	nop
 8017414:	240278d8 	.word	0x240278d8

08017418 <siprintf>:
 8017418:	b40e      	push	{r1, r2, r3}
 801741a:	b510      	push	{r4, lr}
 801741c:	b09d      	sub	sp, #116	@ 0x74
 801741e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8017420:	9002      	str	r0, [sp, #8]
 8017422:	9006      	str	r0, [sp, #24]
 8017424:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017428:	480a      	ldr	r0, [pc, #40]	@ (8017454 <siprintf+0x3c>)
 801742a:	9107      	str	r1, [sp, #28]
 801742c:	9104      	str	r1, [sp, #16]
 801742e:	490a      	ldr	r1, [pc, #40]	@ (8017458 <siprintf+0x40>)
 8017430:	f853 2b04 	ldr.w	r2, [r3], #4
 8017434:	9105      	str	r1, [sp, #20]
 8017436:	2400      	movs	r4, #0
 8017438:	a902      	add	r1, sp, #8
 801743a:	6800      	ldr	r0, [r0, #0]
 801743c:	9301      	str	r3, [sp, #4]
 801743e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8017440:	f000 f904 	bl	801764c <_svfiprintf_r>
 8017444:	9b02      	ldr	r3, [sp, #8]
 8017446:	701c      	strb	r4, [r3, #0]
 8017448:	b01d      	add	sp, #116	@ 0x74
 801744a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801744e:	b003      	add	sp, #12
 8017450:	4770      	bx	lr
 8017452:	bf00      	nop
 8017454:	2400011c 	.word	0x2400011c
 8017458:	ffff0208 	.word	0xffff0208

0801745c <memset>:
 801745c:	4402      	add	r2, r0
 801745e:	4603      	mov	r3, r0
 8017460:	4293      	cmp	r3, r2
 8017462:	d100      	bne.n	8017466 <memset+0xa>
 8017464:	4770      	bx	lr
 8017466:	f803 1b01 	strb.w	r1, [r3], #1
 801746a:	e7f9      	b.n	8017460 <memset+0x4>

0801746c <_sbrk_r>:
 801746c:	b538      	push	{r3, r4, r5, lr}
 801746e:	4d06      	ldr	r5, [pc, #24]	@ (8017488 <_sbrk_r+0x1c>)
 8017470:	2300      	movs	r3, #0
 8017472:	4604      	mov	r4, r0
 8017474:	4608      	mov	r0, r1
 8017476:	602b      	str	r3, [r5, #0]
 8017478:	f7eb fa48 	bl	800290c <_sbrk>
 801747c:	1c43      	adds	r3, r0, #1
 801747e:	d102      	bne.n	8017486 <_sbrk_r+0x1a>
 8017480:	682b      	ldr	r3, [r5, #0]
 8017482:	b103      	cbz	r3, 8017486 <_sbrk_r+0x1a>
 8017484:	6023      	str	r3, [r4, #0]
 8017486:	bd38      	pop	{r3, r4, r5, pc}
 8017488:	240278d4 	.word	0x240278d4

0801748c <__errno>:
 801748c:	4b01      	ldr	r3, [pc, #4]	@ (8017494 <__errno+0x8>)
 801748e:	6818      	ldr	r0, [r3, #0]
 8017490:	4770      	bx	lr
 8017492:	bf00      	nop
 8017494:	2400011c 	.word	0x2400011c

08017498 <__libc_init_array>:
 8017498:	b570      	push	{r4, r5, r6, lr}
 801749a:	4d0d      	ldr	r5, [pc, #52]	@ (80174d0 <__libc_init_array+0x38>)
 801749c:	4c0d      	ldr	r4, [pc, #52]	@ (80174d4 <__libc_init_array+0x3c>)
 801749e:	1b64      	subs	r4, r4, r5
 80174a0:	10a4      	asrs	r4, r4, #2
 80174a2:	2600      	movs	r6, #0
 80174a4:	42a6      	cmp	r6, r4
 80174a6:	d109      	bne.n	80174bc <__libc_init_array+0x24>
 80174a8:	4d0b      	ldr	r5, [pc, #44]	@ (80174d8 <__libc_init_array+0x40>)
 80174aa:	4c0c      	ldr	r4, [pc, #48]	@ (80174dc <__libc_init_array+0x44>)
 80174ac:	f000 fba6 	bl	8017bfc <_init>
 80174b0:	1b64      	subs	r4, r4, r5
 80174b2:	10a4      	asrs	r4, r4, #2
 80174b4:	2600      	movs	r6, #0
 80174b6:	42a6      	cmp	r6, r4
 80174b8:	d105      	bne.n	80174c6 <__libc_init_array+0x2e>
 80174ba:	bd70      	pop	{r4, r5, r6, pc}
 80174bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80174c0:	4798      	blx	r3
 80174c2:	3601      	adds	r6, #1
 80174c4:	e7ee      	b.n	80174a4 <__libc_init_array+0xc>
 80174c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80174ca:	4798      	blx	r3
 80174cc:	3601      	adds	r6, #1
 80174ce:	e7f2      	b.n	80174b6 <__libc_init_array+0x1e>
 80174d0:	080180fc 	.word	0x080180fc
 80174d4:	080180fc 	.word	0x080180fc
 80174d8:	080180fc 	.word	0x080180fc
 80174dc:	08018100 	.word	0x08018100

080174e0 <__retarget_lock_acquire_recursive>:
 80174e0:	4770      	bx	lr

080174e2 <__retarget_lock_release_recursive>:
 80174e2:	4770      	bx	lr

080174e4 <memcpy>:
 80174e4:	440a      	add	r2, r1
 80174e6:	4291      	cmp	r1, r2
 80174e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80174ec:	d100      	bne.n	80174f0 <memcpy+0xc>
 80174ee:	4770      	bx	lr
 80174f0:	b510      	push	{r4, lr}
 80174f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80174f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80174fa:	4291      	cmp	r1, r2
 80174fc:	d1f9      	bne.n	80174f2 <memcpy+0xe>
 80174fe:	bd10      	pop	{r4, pc}

08017500 <_free_r>:
 8017500:	b538      	push	{r3, r4, r5, lr}
 8017502:	4605      	mov	r5, r0
 8017504:	2900      	cmp	r1, #0
 8017506:	d041      	beq.n	801758c <_free_r+0x8c>
 8017508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801750c:	1f0c      	subs	r4, r1, #4
 801750e:	2b00      	cmp	r3, #0
 8017510:	bfb8      	it	lt
 8017512:	18e4      	addlt	r4, r4, r3
 8017514:	f7ff ff74 	bl	8017400 <__malloc_lock>
 8017518:	4a1d      	ldr	r2, [pc, #116]	@ (8017590 <_free_r+0x90>)
 801751a:	6813      	ldr	r3, [r2, #0]
 801751c:	b933      	cbnz	r3, 801752c <_free_r+0x2c>
 801751e:	6063      	str	r3, [r4, #4]
 8017520:	6014      	str	r4, [r2, #0]
 8017522:	4628      	mov	r0, r5
 8017524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017528:	f7ff bf70 	b.w	801740c <__malloc_unlock>
 801752c:	42a3      	cmp	r3, r4
 801752e:	d908      	bls.n	8017542 <_free_r+0x42>
 8017530:	6820      	ldr	r0, [r4, #0]
 8017532:	1821      	adds	r1, r4, r0
 8017534:	428b      	cmp	r3, r1
 8017536:	bf01      	itttt	eq
 8017538:	6819      	ldreq	r1, [r3, #0]
 801753a:	685b      	ldreq	r3, [r3, #4]
 801753c:	1809      	addeq	r1, r1, r0
 801753e:	6021      	streq	r1, [r4, #0]
 8017540:	e7ed      	b.n	801751e <_free_r+0x1e>
 8017542:	461a      	mov	r2, r3
 8017544:	685b      	ldr	r3, [r3, #4]
 8017546:	b10b      	cbz	r3, 801754c <_free_r+0x4c>
 8017548:	42a3      	cmp	r3, r4
 801754a:	d9fa      	bls.n	8017542 <_free_r+0x42>
 801754c:	6811      	ldr	r1, [r2, #0]
 801754e:	1850      	adds	r0, r2, r1
 8017550:	42a0      	cmp	r0, r4
 8017552:	d10b      	bne.n	801756c <_free_r+0x6c>
 8017554:	6820      	ldr	r0, [r4, #0]
 8017556:	4401      	add	r1, r0
 8017558:	1850      	adds	r0, r2, r1
 801755a:	4283      	cmp	r3, r0
 801755c:	6011      	str	r1, [r2, #0]
 801755e:	d1e0      	bne.n	8017522 <_free_r+0x22>
 8017560:	6818      	ldr	r0, [r3, #0]
 8017562:	685b      	ldr	r3, [r3, #4]
 8017564:	6053      	str	r3, [r2, #4]
 8017566:	4408      	add	r0, r1
 8017568:	6010      	str	r0, [r2, #0]
 801756a:	e7da      	b.n	8017522 <_free_r+0x22>
 801756c:	d902      	bls.n	8017574 <_free_r+0x74>
 801756e:	230c      	movs	r3, #12
 8017570:	602b      	str	r3, [r5, #0]
 8017572:	e7d6      	b.n	8017522 <_free_r+0x22>
 8017574:	6820      	ldr	r0, [r4, #0]
 8017576:	1821      	adds	r1, r4, r0
 8017578:	428b      	cmp	r3, r1
 801757a:	bf04      	itt	eq
 801757c:	6819      	ldreq	r1, [r3, #0]
 801757e:	685b      	ldreq	r3, [r3, #4]
 8017580:	6063      	str	r3, [r4, #4]
 8017582:	bf04      	itt	eq
 8017584:	1809      	addeq	r1, r1, r0
 8017586:	6021      	streq	r1, [r4, #0]
 8017588:	6054      	str	r4, [r2, #4]
 801758a:	e7ca      	b.n	8017522 <_free_r+0x22>
 801758c:	bd38      	pop	{r3, r4, r5, pc}
 801758e:	bf00      	nop
 8017590:	24027798 	.word	0x24027798

08017594 <__ssputs_r>:
 8017594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017598:	688e      	ldr	r6, [r1, #8]
 801759a:	461f      	mov	r7, r3
 801759c:	42be      	cmp	r6, r7
 801759e:	680b      	ldr	r3, [r1, #0]
 80175a0:	4682      	mov	sl, r0
 80175a2:	460c      	mov	r4, r1
 80175a4:	4690      	mov	r8, r2
 80175a6:	d82d      	bhi.n	8017604 <__ssputs_r+0x70>
 80175a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80175ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80175b0:	d026      	beq.n	8017600 <__ssputs_r+0x6c>
 80175b2:	6965      	ldr	r5, [r4, #20]
 80175b4:	6909      	ldr	r1, [r1, #16]
 80175b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80175ba:	eba3 0901 	sub.w	r9, r3, r1
 80175be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80175c2:	1c7b      	adds	r3, r7, #1
 80175c4:	444b      	add	r3, r9
 80175c6:	106d      	asrs	r5, r5, #1
 80175c8:	429d      	cmp	r5, r3
 80175ca:	bf38      	it	cc
 80175cc:	461d      	movcc	r5, r3
 80175ce:	0553      	lsls	r3, r2, #21
 80175d0:	d527      	bpl.n	8017622 <__ssputs_r+0x8e>
 80175d2:	4629      	mov	r1, r5
 80175d4:	f7ff fe94 	bl	8017300 <_malloc_r>
 80175d8:	4606      	mov	r6, r0
 80175da:	b360      	cbz	r0, 8017636 <__ssputs_r+0xa2>
 80175dc:	6921      	ldr	r1, [r4, #16]
 80175de:	464a      	mov	r2, r9
 80175e0:	f7ff ff80 	bl	80174e4 <memcpy>
 80175e4:	89a3      	ldrh	r3, [r4, #12]
 80175e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80175ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80175ee:	81a3      	strh	r3, [r4, #12]
 80175f0:	6126      	str	r6, [r4, #16]
 80175f2:	6165      	str	r5, [r4, #20]
 80175f4:	444e      	add	r6, r9
 80175f6:	eba5 0509 	sub.w	r5, r5, r9
 80175fa:	6026      	str	r6, [r4, #0]
 80175fc:	60a5      	str	r5, [r4, #8]
 80175fe:	463e      	mov	r6, r7
 8017600:	42be      	cmp	r6, r7
 8017602:	d900      	bls.n	8017606 <__ssputs_r+0x72>
 8017604:	463e      	mov	r6, r7
 8017606:	6820      	ldr	r0, [r4, #0]
 8017608:	4632      	mov	r2, r6
 801760a:	4641      	mov	r1, r8
 801760c:	f000 faa6 	bl	8017b5c <memmove>
 8017610:	68a3      	ldr	r3, [r4, #8]
 8017612:	1b9b      	subs	r3, r3, r6
 8017614:	60a3      	str	r3, [r4, #8]
 8017616:	6823      	ldr	r3, [r4, #0]
 8017618:	4433      	add	r3, r6
 801761a:	6023      	str	r3, [r4, #0]
 801761c:	2000      	movs	r0, #0
 801761e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017622:	462a      	mov	r2, r5
 8017624:	f000 fab4 	bl	8017b90 <_realloc_r>
 8017628:	4606      	mov	r6, r0
 801762a:	2800      	cmp	r0, #0
 801762c:	d1e0      	bne.n	80175f0 <__ssputs_r+0x5c>
 801762e:	6921      	ldr	r1, [r4, #16]
 8017630:	4650      	mov	r0, sl
 8017632:	f7ff ff65 	bl	8017500 <_free_r>
 8017636:	230c      	movs	r3, #12
 8017638:	f8ca 3000 	str.w	r3, [sl]
 801763c:	89a3      	ldrh	r3, [r4, #12]
 801763e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017642:	81a3      	strh	r3, [r4, #12]
 8017644:	f04f 30ff 	mov.w	r0, #4294967295
 8017648:	e7e9      	b.n	801761e <__ssputs_r+0x8a>
	...

0801764c <_svfiprintf_r>:
 801764c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017650:	4698      	mov	r8, r3
 8017652:	898b      	ldrh	r3, [r1, #12]
 8017654:	061b      	lsls	r3, r3, #24
 8017656:	b09d      	sub	sp, #116	@ 0x74
 8017658:	4607      	mov	r7, r0
 801765a:	460d      	mov	r5, r1
 801765c:	4614      	mov	r4, r2
 801765e:	d510      	bpl.n	8017682 <_svfiprintf_r+0x36>
 8017660:	690b      	ldr	r3, [r1, #16]
 8017662:	b973      	cbnz	r3, 8017682 <_svfiprintf_r+0x36>
 8017664:	2140      	movs	r1, #64	@ 0x40
 8017666:	f7ff fe4b 	bl	8017300 <_malloc_r>
 801766a:	6028      	str	r0, [r5, #0]
 801766c:	6128      	str	r0, [r5, #16]
 801766e:	b930      	cbnz	r0, 801767e <_svfiprintf_r+0x32>
 8017670:	230c      	movs	r3, #12
 8017672:	603b      	str	r3, [r7, #0]
 8017674:	f04f 30ff 	mov.w	r0, #4294967295
 8017678:	b01d      	add	sp, #116	@ 0x74
 801767a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801767e:	2340      	movs	r3, #64	@ 0x40
 8017680:	616b      	str	r3, [r5, #20]
 8017682:	2300      	movs	r3, #0
 8017684:	9309      	str	r3, [sp, #36]	@ 0x24
 8017686:	2320      	movs	r3, #32
 8017688:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801768c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017690:	2330      	movs	r3, #48	@ 0x30
 8017692:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017830 <_svfiprintf_r+0x1e4>
 8017696:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801769a:	f04f 0901 	mov.w	r9, #1
 801769e:	4623      	mov	r3, r4
 80176a0:	469a      	mov	sl, r3
 80176a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80176a6:	b10a      	cbz	r2, 80176ac <_svfiprintf_r+0x60>
 80176a8:	2a25      	cmp	r2, #37	@ 0x25
 80176aa:	d1f9      	bne.n	80176a0 <_svfiprintf_r+0x54>
 80176ac:	ebba 0b04 	subs.w	fp, sl, r4
 80176b0:	d00b      	beq.n	80176ca <_svfiprintf_r+0x7e>
 80176b2:	465b      	mov	r3, fp
 80176b4:	4622      	mov	r2, r4
 80176b6:	4629      	mov	r1, r5
 80176b8:	4638      	mov	r0, r7
 80176ba:	f7ff ff6b 	bl	8017594 <__ssputs_r>
 80176be:	3001      	adds	r0, #1
 80176c0:	f000 80a7 	beq.w	8017812 <_svfiprintf_r+0x1c6>
 80176c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80176c6:	445a      	add	r2, fp
 80176c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80176ca:	f89a 3000 	ldrb.w	r3, [sl]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	f000 809f 	beq.w	8017812 <_svfiprintf_r+0x1c6>
 80176d4:	2300      	movs	r3, #0
 80176d6:	f04f 32ff 	mov.w	r2, #4294967295
 80176da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80176de:	f10a 0a01 	add.w	sl, sl, #1
 80176e2:	9304      	str	r3, [sp, #16]
 80176e4:	9307      	str	r3, [sp, #28]
 80176e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80176ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80176ec:	4654      	mov	r4, sl
 80176ee:	2205      	movs	r2, #5
 80176f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176f4:	484e      	ldr	r0, [pc, #312]	@ (8017830 <_svfiprintf_r+0x1e4>)
 80176f6:	f7e8 fdfb 	bl	80002f0 <memchr>
 80176fa:	9a04      	ldr	r2, [sp, #16]
 80176fc:	b9d8      	cbnz	r0, 8017736 <_svfiprintf_r+0xea>
 80176fe:	06d0      	lsls	r0, r2, #27
 8017700:	bf44      	itt	mi
 8017702:	2320      	movmi	r3, #32
 8017704:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017708:	0711      	lsls	r1, r2, #28
 801770a:	bf44      	itt	mi
 801770c:	232b      	movmi	r3, #43	@ 0x2b
 801770e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017712:	f89a 3000 	ldrb.w	r3, [sl]
 8017716:	2b2a      	cmp	r3, #42	@ 0x2a
 8017718:	d015      	beq.n	8017746 <_svfiprintf_r+0xfa>
 801771a:	9a07      	ldr	r2, [sp, #28]
 801771c:	4654      	mov	r4, sl
 801771e:	2000      	movs	r0, #0
 8017720:	f04f 0c0a 	mov.w	ip, #10
 8017724:	4621      	mov	r1, r4
 8017726:	f811 3b01 	ldrb.w	r3, [r1], #1
 801772a:	3b30      	subs	r3, #48	@ 0x30
 801772c:	2b09      	cmp	r3, #9
 801772e:	d94b      	bls.n	80177c8 <_svfiprintf_r+0x17c>
 8017730:	b1b0      	cbz	r0, 8017760 <_svfiprintf_r+0x114>
 8017732:	9207      	str	r2, [sp, #28]
 8017734:	e014      	b.n	8017760 <_svfiprintf_r+0x114>
 8017736:	eba0 0308 	sub.w	r3, r0, r8
 801773a:	fa09 f303 	lsl.w	r3, r9, r3
 801773e:	4313      	orrs	r3, r2
 8017740:	9304      	str	r3, [sp, #16]
 8017742:	46a2      	mov	sl, r4
 8017744:	e7d2      	b.n	80176ec <_svfiprintf_r+0xa0>
 8017746:	9b03      	ldr	r3, [sp, #12]
 8017748:	1d19      	adds	r1, r3, #4
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	9103      	str	r1, [sp, #12]
 801774e:	2b00      	cmp	r3, #0
 8017750:	bfbb      	ittet	lt
 8017752:	425b      	neglt	r3, r3
 8017754:	f042 0202 	orrlt.w	r2, r2, #2
 8017758:	9307      	strge	r3, [sp, #28]
 801775a:	9307      	strlt	r3, [sp, #28]
 801775c:	bfb8      	it	lt
 801775e:	9204      	strlt	r2, [sp, #16]
 8017760:	7823      	ldrb	r3, [r4, #0]
 8017762:	2b2e      	cmp	r3, #46	@ 0x2e
 8017764:	d10a      	bne.n	801777c <_svfiprintf_r+0x130>
 8017766:	7863      	ldrb	r3, [r4, #1]
 8017768:	2b2a      	cmp	r3, #42	@ 0x2a
 801776a:	d132      	bne.n	80177d2 <_svfiprintf_r+0x186>
 801776c:	9b03      	ldr	r3, [sp, #12]
 801776e:	1d1a      	adds	r2, r3, #4
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	9203      	str	r2, [sp, #12]
 8017774:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017778:	3402      	adds	r4, #2
 801777a:	9305      	str	r3, [sp, #20]
 801777c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017840 <_svfiprintf_r+0x1f4>
 8017780:	7821      	ldrb	r1, [r4, #0]
 8017782:	2203      	movs	r2, #3
 8017784:	4650      	mov	r0, sl
 8017786:	f7e8 fdb3 	bl	80002f0 <memchr>
 801778a:	b138      	cbz	r0, 801779c <_svfiprintf_r+0x150>
 801778c:	9b04      	ldr	r3, [sp, #16]
 801778e:	eba0 000a 	sub.w	r0, r0, sl
 8017792:	2240      	movs	r2, #64	@ 0x40
 8017794:	4082      	lsls	r2, r0
 8017796:	4313      	orrs	r3, r2
 8017798:	3401      	adds	r4, #1
 801779a:	9304      	str	r3, [sp, #16]
 801779c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177a0:	4824      	ldr	r0, [pc, #144]	@ (8017834 <_svfiprintf_r+0x1e8>)
 80177a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80177a6:	2206      	movs	r2, #6
 80177a8:	f7e8 fda2 	bl	80002f0 <memchr>
 80177ac:	2800      	cmp	r0, #0
 80177ae:	d036      	beq.n	801781e <_svfiprintf_r+0x1d2>
 80177b0:	4b21      	ldr	r3, [pc, #132]	@ (8017838 <_svfiprintf_r+0x1ec>)
 80177b2:	bb1b      	cbnz	r3, 80177fc <_svfiprintf_r+0x1b0>
 80177b4:	9b03      	ldr	r3, [sp, #12]
 80177b6:	3307      	adds	r3, #7
 80177b8:	f023 0307 	bic.w	r3, r3, #7
 80177bc:	3308      	adds	r3, #8
 80177be:	9303      	str	r3, [sp, #12]
 80177c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80177c2:	4433      	add	r3, r6
 80177c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80177c6:	e76a      	b.n	801769e <_svfiprintf_r+0x52>
 80177c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80177cc:	460c      	mov	r4, r1
 80177ce:	2001      	movs	r0, #1
 80177d0:	e7a8      	b.n	8017724 <_svfiprintf_r+0xd8>
 80177d2:	2300      	movs	r3, #0
 80177d4:	3401      	adds	r4, #1
 80177d6:	9305      	str	r3, [sp, #20]
 80177d8:	4619      	mov	r1, r3
 80177da:	f04f 0c0a 	mov.w	ip, #10
 80177de:	4620      	mov	r0, r4
 80177e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80177e4:	3a30      	subs	r2, #48	@ 0x30
 80177e6:	2a09      	cmp	r2, #9
 80177e8:	d903      	bls.n	80177f2 <_svfiprintf_r+0x1a6>
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d0c6      	beq.n	801777c <_svfiprintf_r+0x130>
 80177ee:	9105      	str	r1, [sp, #20]
 80177f0:	e7c4      	b.n	801777c <_svfiprintf_r+0x130>
 80177f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80177f6:	4604      	mov	r4, r0
 80177f8:	2301      	movs	r3, #1
 80177fa:	e7f0      	b.n	80177de <_svfiprintf_r+0x192>
 80177fc:	ab03      	add	r3, sp, #12
 80177fe:	9300      	str	r3, [sp, #0]
 8017800:	462a      	mov	r2, r5
 8017802:	4b0e      	ldr	r3, [pc, #56]	@ (801783c <_svfiprintf_r+0x1f0>)
 8017804:	a904      	add	r1, sp, #16
 8017806:	4638      	mov	r0, r7
 8017808:	f3af 8000 	nop.w
 801780c:	1c42      	adds	r2, r0, #1
 801780e:	4606      	mov	r6, r0
 8017810:	d1d6      	bne.n	80177c0 <_svfiprintf_r+0x174>
 8017812:	89ab      	ldrh	r3, [r5, #12]
 8017814:	065b      	lsls	r3, r3, #25
 8017816:	f53f af2d 	bmi.w	8017674 <_svfiprintf_r+0x28>
 801781a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801781c:	e72c      	b.n	8017678 <_svfiprintf_r+0x2c>
 801781e:	ab03      	add	r3, sp, #12
 8017820:	9300      	str	r3, [sp, #0]
 8017822:	462a      	mov	r2, r5
 8017824:	4b05      	ldr	r3, [pc, #20]	@ (801783c <_svfiprintf_r+0x1f0>)
 8017826:	a904      	add	r1, sp, #16
 8017828:	4638      	mov	r0, r7
 801782a:	f000 f879 	bl	8017920 <_printf_i>
 801782e:	e7ed      	b.n	801780c <_svfiprintf_r+0x1c0>
 8017830:	080180c0 	.word	0x080180c0
 8017834:	080180ca 	.word	0x080180ca
 8017838:	00000000 	.word	0x00000000
 801783c:	08017595 	.word	0x08017595
 8017840:	080180c6 	.word	0x080180c6

08017844 <_printf_common>:
 8017844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017848:	4616      	mov	r6, r2
 801784a:	4698      	mov	r8, r3
 801784c:	688a      	ldr	r2, [r1, #8]
 801784e:	690b      	ldr	r3, [r1, #16]
 8017850:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017854:	4293      	cmp	r3, r2
 8017856:	bfb8      	it	lt
 8017858:	4613      	movlt	r3, r2
 801785a:	6033      	str	r3, [r6, #0]
 801785c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017860:	4607      	mov	r7, r0
 8017862:	460c      	mov	r4, r1
 8017864:	b10a      	cbz	r2, 801786a <_printf_common+0x26>
 8017866:	3301      	adds	r3, #1
 8017868:	6033      	str	r3, [r6, #0]
 801786a:	6823      	ldr	r3, [r4, #0]
 801786c:	0699      	lsls	r1, r3, #26
 801786e:	bf42      	ittt	mi
 8017870:	6833      	ldrmi	r3, [r6, #0]
 8017872:	3302      	addmi	r3, #2
 8017874:	6033      	strmi	r3, [r6, #0]
 8017876:	6825      	ldr	r5, [r4, #0]
 8017878:	f015 0506 	ands.w	r5, r5, #6
 801787c:	d106      	bne.n	801788c <_printf_common+0x48>
 801787e:	f104 0a19 	add.w	sl, r4, #25
 8017882:	68e3      	ldr	r3, [r4, #12]
 8017884:	6832      	ldr	r2, [r6, #0]
 8017886:	1a9b      	subs	r3, r3, r2
 8017888:	42ab      	cmp	r3, r5
 801788a:	dc26      	bgt.n	80178da <_printf_common+0x96>
 801788c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017890:	6822      	ldr	r2, [r4, #0]
 8017892:	3b00      	subs	r3, #0
 8017894:	bf18      	it	ne
 8017896:	2301      	movne	r3, #1
 8017898:	0692      	lsls	r2, r2, #26
 801789a:	d42b      	bmi.n	80178f4 <_printf_common+0xb0>
 801789c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80178a0:	4641      	mov	r1, r8
 80178a2:	4638      	mov	r0, r7
 80178a4:	47c8      	blx	r9
 80178a6:	3001      	adds	r0, #1
 80178a8:	d01e      	beq.n	80178e8 <_printf_common+0xa4>
 80178aa:	6823      	ldr	r3, [r4, #0]
 80178ac:	6922      	ldr	r2, [r4, #16]
 80178ae:	f003 0306 	and.w	r3, r3, #6
 80178b2:	2b04      	cmp	r3, #4
 80178b4:	bf02      	ittt	eq
 80178b6:	68e5      	ldreq	r5, [r4, #12]
 80178b8:	6833      	ldreq	r3, [r6, #0]
 80178ba:	1aed      	subeq	r5, r5, r3
 80178bc:	68a3      	ldr	r3, [r4, #8]
 80178be:	bf0c      	ite	eq
 80178c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80178c4:	2500      	movne	r5, #0
 80178c6:	4293      	cmp	r3, r2
 80178c8:	bfc4      	itt	gt
 80178ca:	1a9b      	subgt	r3, r3, r2
 80178cc:	18ed      	addgt	r5, r5, r3
 80178ce:	2600      	movs	r6, #0
 80178d0:	341a      	adds	r4, #26
 80178d2:	42b5      	cmp	r5, r6
 80178d4:	d11a      	bne.n	801790c <_printf_common+0xc8>
 80178d6:	2000      	movs	r0, #0
 80178d8:	e008      	b.n	80178ec <_printf_common+0xa8>
 80178da:	2301      	movs	r3, #1
 80178dc:	4652      	mov	r2, sl
 80178de:	4641      	mov	r1, r8
 80178e0:	4638      	mov	r0, r7
 80178e2:	47c8      	blx	r9
 80178e4:	3001      	adds	r0, #1
 80178e6:	d103      	bne.n	80178f0 <_printf_common+0xac>
 80178e8:	f04f 30ff 	mov.w	r0, #4294967295
 80178ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178f0:	3501      	adds	r5, #1
 80178f2:	e7c6      	b.n	8017882 <_printf_common+0x3e>
 80178f4:	18e1      	adds	r1, r4, r3
 80178f6:	1c5a      	adds	r2, r3, #1
 80178f8:	2030      	movs	r0, #48	@ 0x30
 80178fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80178fe:	4422      	add	r2, r4
 8017900:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017904:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017908:	3302      	adds	r3, #2
 801790a:	e7c7      	b.n	801789c <_printf_common+0x58>
 801790c:	2301      	movs	r3, #1
 801790e:	4622      	mov	r2, r4
 8017910:	4641      	mov	r1, r8
 8017912:	4638      	mov	r0, r7
 8017914:	47c8      	blx	r9
 8017916:	3001      	adds	r0, #1
 8017918:	d0e6      	beq.n	80178e8 <_printf_common+0xa4>
 801791a:	3601      	adds	r6, #1
 801791c:	e7d9      	b.n	80178d2 <_printf_common+0x8e>
	...

08017920 <_printf_i>:
 8017920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017924:	7e0f      	ldrb	r7, [r1, #24]
 8017926:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017928:	2f78      	cmp	r7, #120	@ 0x78
 801792a:	4691      	mov	r9, r2
 801792c:	4680      	mov	r8, r0
 801792e:	460c      	mov	r4, r1
 8017930:	469a      	mov	sl, r3
 8017932:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017936:	d807      	bhi.n	8017948 <_printf_i+0x28>
 8017938:	2f62      	cmp	r7, #98	@ 0x62
 801793a:	d80a      	bhi.n	8017952 <_printf_i+0x32>
 801793c:	2f00      	cmp	r7, #0
 801793e:	f000 80d1 	beq.w	8017ae4 <_printf_i+0x1c4>
 8017942:	2f58      	cmp	r7, #88	@ 0x58
 8017944:	f000 80b8 	beq.w	8017ab8 <_printf_i+0x198>
 8017948:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801794c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017950:	e03a      	b.n	80179c8 <_printf_i+0xa8>
 8017952:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017956:	2b15      	cmp	r3, #21
 8017958:	d8f6      	bhi.n	8017948 <_printf_i+0x28>
 801795a:	a101      	add	r1, pc, #4	@ (adr r1, 8017960 <_printf_i+0x40>)
 801795c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017960:	080179b9 	.word	0x080179b9
 8017964:	080179cd 	.word	0x080179cd
 8017968:	08017949 	.word	0x08017949
 801796c:	08017949 	.word	0x08017949
 8017970:	08017949 	.word	0x08017949
 8017974:	08017949 	.word	0x08017949
 8017978:	080179cd 	.word	0x080179cd
 801797c:	08017949 	.word	0x08017949
 8017980:	08017949 	.word	0x08017949
 8017984:	08017949 	.word	0x08017949
 8017988:	08017949 	.word	0x08017949
 801798c:	08017acb 	.word	0x08017acb
 8017990:	080179f7 	.word	0x080179f7
 8017994:	08017a85 	.word	0x08017a85
 8017998:	08017949 	.word	0x08017949
 801799c:	08017949 	.word	0x08017949
 80179a0:	08017aed 	.word	0x08017aed
 80179a4:	08017949 	.word	0x08017949
 80179a8:	080179f7 	.word	0x080179f7
 80179ac:	08017949 	.word	0x08017949
 80179b0:	08017949 	.word	0x08017949
 80179b4:	08017a8d 	.word	0x08017a8d
 80179b8:	6833      	ldr	r3, [r6, #0]
 80179ba:	1d1a      	adds	r2, r3, #4
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	6032      	str	r2, [r6, #0]
 80179c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80179c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80179c8:	2301      	movs	r3, #1
 80179ca:	e09c      	b.n	8017b06 <_printf_i+0x1e6>
 80179cc:	6833      	ldr	r3, [r6, #0]
 80179ce:	6820      	ldr	r0, [r4, #0]
 80179d0:	1d19      	adds	r1, r3, #4
 80179d2:	6031      	str	r1, [r6, #0]
 80179d4:	0606      	lsls	r6, r0, #24
 80179d6:	d501      	bpl.n	80179dc <_printf_i+0xbc>
 80179d8:	681d      	ldr	r5, [r3, #0]
 80179da:	e003      	b.n	80179e4 <_printf_i+0xc4>
 80179dc:	0645      	lsls	r5, r0, #25
 80179de:	d5fb      	bpl.n	80179d8 <_printf_i+0xb8>
 80179e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80179e4:	2d00      	cmp	r5, #0
 80179e6:	da03      	bge.n	80179f0 <_printf_i+0xd0>
 80179e8:	232d      	movs	r3, #45	@ 0x2d
 80179ea:	426d      	negs	r5, r5
 80179ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80179f0:	4858      	ldr	r0, [pc, #352]	@ (8017b54 <_printf_i+0x234>)
 80179f2:	230a      	movs	r3, #10
 80179f4:	e011      	b.n	8017a1a <_printf_i+0xfa>
 80179f6:	6821      	ldr	r1, [r4, #0]
 80179f8:	6833      	ldr	r3, [r6, #0]
 80179fa:	0608      	lsls	r0, r1, #24
 80179fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8017a00:	d402      	bmi.n	8017a08 <_printf_i+0xe8>
 8017a02:	0649      	lsls	r1, r1, #25
 8017a04:	bf48      	it	mi
 8017a06:	b2ad      	uxthmi	r5, r5
 8017a08:	2f6f      	cmp	r7, #111	@ 0x6f
 8017a0a:	4852      	ldr	r0, [pc, #328]	@ (8017b54 <_printf_i+0x234>)
 8017a0c:	6033      	str	r3, [r6, #0]
 8017a0e:	bf14      	ite	ne
 8017a10:	230a      	movne	r3, #10
 8017a12:	2308      	moveq	r3, #8
 8017a14:	2100      	movs	r1, #0
 8017a16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017a1a:	6866      	ldr	r6, [r4, #4]
 8017a1c:	60a6      	str	r6, [r4, #8]
 8017a1e:	2e00      	cmp	r6, #0
 8017a20:	db05      	blt.n	8017a2e <_printf_i+0x10e>
 8017a22:	6821      	ldr	r1, [r4, #0]
 8017a24:	432e      	orrs	r6, r5
 8017a26:	f021 0104 	bic.w	r1, r1, #4
 8017a2a:	6021      	str	r1, [r4, #0]
 8017a2c:	d04b      	beq.n	8017ac6 <_printf_i+0x1a6>
 8017a2e:	4616      	mov	r6, r2
 8017a30:	fbb5 f1f3 	udiv	r1, r5, r3
 8017a34:	fb03 5711 	mls	r7, r3, r1, r5
 8017a38:	5dc7      	ldrb	r7, [r0, r7]
 8017a3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017a3e:	462f      	mov	r7, r5
 8017a40:	42bb      	cmp	r3, r7
 8017a42:	460d      	mov	r5, r1
 8017a44:	d9f4      	bls.n	8017a30 <_printf_i+0x110>
 8017a46:	2b08      	cmp	r3, #8
 8017a48:	d10b      	bne.n	8017a62 <_printf_i+0x142>
 8017a4a:	6823      	ldr	r3, [r4, #0]
 8017a4c:	07df      	lsls	r7, r3, #31
 8017a4e:	d508      	bpl.n	8017a62 <_printf_i+0x142>
 8017a50:	6923      	ldr	r3, [r4, #16]
 8017a52:	6861      	ldr	r1, [r4, #4]
 8017a54:	4299      	cmp	r1, r3
 8017a56:	bfde      	ittt	le
 8017a58:	2330      	movle	r3, #48	@ 0x30
 8017a5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017a5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017a62:	1b92      	subs	r2, r2, r6
 8017a64:	6122      	str	r2, [r4, #16]
 8017a66:	f8cd a000 	str.w	sl, [sp]
 8017a6a:	464b      	mov	r3, r9
 8017a6c:	aa03      	add	r2, sp, #12
 8017a6e:	4621      	mov	r1, r4
 8017a70:	4640      	mov	r0, r8
 8017a72:	f7ff fee7 	bl	8017844 <_printf_common>
 8017a76:	3001      	adds	r0, #1
 8017a78:	d14a      	bne.n	8017b10 <_printf_i+0x1f0>
 8017a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8017a7e:	b004      	add	sp, #16
 8017a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a84:	6823      	ldr	r3, [r4, #0]
 8017a86:	f043 0320 	orr.w	r3, r3, #32
 8017a8a:	6023      	str	r3, [r4, #0]
 8017a8c:	4832      	ldr	r0, [pc, #200]	@ (8017b58 <_printf_i+0x238>)
 8017a8e:	2778      	movs	r7, #120	@ 0x78
 8017a90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017a94:	6823      	ldr	r3, [r4, #0]
 8017a96:	6831      	ldr	r1, [r6, #0]
 8017a98:	061f      	lsls	r7, r3, #24
 8017a9a:	f851 5b04 	ldr.w	r5, [r1], #4
 8017a9e:	d402      	bmi.n	8017aa6 <_printf_i+0x186>
 8017aa0:	065f      	lsls	r7, r3, #25
 8017aa2:	bf48      	it	mi
 8017aa4:	b2ad      	uxthmi	r5, r5
 8017aa6:	6031      	str	r1, [r6, #0]
 8017aa8:	07d9      	lsls	r1, r3, #31
 8017aaa:	bf44      	itt	mi
 8017aac:	f043 0320 	orrmi.w	r3, r3, #32
 8017ab0:	6023      	strmi	r3, [r4, #0]
 8017ab2:	b11d      	cbz	r5, 8017abc <_printf_i+0x19c>
 8017ab4:	2310      	movs	r3, #16
 8017ab6:	e7ad      	b.n	8017a14 <_printf_i+0xf4>
 8017ab8:	4826      	ldr	r0, [pc, #152]	@ (8017b54 <_printf_i+0x234>)
 8017aba:	e7e9      	b.n	8017a90 <_printf_i+0x170>
 8017abc:	6823      	ldr	r3, [r4, #0]
 8017abe:	f023 0320 	bic.w	r3, r3, #32
 8017ac2:	6023      	str	r3, [r4, #0]
 8017ac4:	e7f6      	b.n	8017ab4 <_printf_i+0x194>
 8017ac6:	4616      	mov	r6, r2
 8017ac8:	e7bd      	b.n	8017a46 <_printf_i+0x126>
 8017aca:	6833      	ldr	r3, [r6, #0]
 8017acc:	6825      	ldr	r5, [r4, #0]
 8017ace:	6961      	ldr	r1, [r4, #20]
 8017ad0:	1d18      	adds	r0, r3, #4
 8017ad2:	6030      	str	r0, [r6, #0]
 8017ad4:	062e      	lsls	r6, r5, #24
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	d501      	bpl.n	8017ade <_printf_i+0x1be>
 8017ada:	6019      	str	r1, [r3, #0]
 8017adc:	e002      	b.n	8017ae4 <_printf_i+0x1c4>
 8017ade:	0668      	lsls	r0, r5, #25
 8017ae0:	d5fb      	bpl.n	8017ada <_printf_i+0x1ba>
 8017ae2:	8019      	strh	r1, [r3, #0]
 8017ae4:	2300      	movs	r3, #0
 8017ae6:	6123      	str	r3, [r4, #16]
 8017ae8:	4616      	mov	r6, r2
 8017aea:	e7bc      	b.n	8017a66 <_printf_i+0x146>
 8017aec:	6833      	ldr	r3, [r6, #0]
 8017aee:	1d1a      	adds	r2, r3, #4
 8017af0:	6032      	str	r2, [r6, #0]
 8017af2:	681e      	ldr	r6, [r3, #0]
 8017af4:	6862      	ldr	r2, [r4, #4]
 8017af6:	2100      	movs	r1, #0
 8017af8:	4630      	mov	r0, r6
 8017afa:	f7e8 fbf9 	bl	80002f0 <memchr>
 8017afe:	b108      	cbz	r0, 8017b04 <_printf_i+0x1e4>
 8017b00:	1b80      	subs	r0, r0, r6
 8017b02:	6060      	str	r0, [r4, #4]
 8017b04:	6863      	ldr	r3, [r4, #4]
 8017b06:	6123      	str	r3, [r4, #16]
 8017b08:	2300      	movs	r3, #0
 8017b0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017b0e:	e7aa      	b.n	8017a66 <_printf_i+0x146>
 8017b10:	6923      	ldr	r3, [r4, #16]
 8017b12:	4632      	mov	r2, r6
 8017b14:	4649      	mov	r1, r9
 8017b16:	4640      	mov	r0, r8
 8017b18:	47d0      	blx	sl
 8017b1a:	3001      	adds	r0, #1
 8017b1c:	d0ad      	beq.n	8017a7a <_printf_i+0x15a>
 8017b1e:	6823      	ldr	r3, [r4, #0]
 8017b20:	079b      	lsls	r3, r3, #30
 8017b22:	d413      	bmi.n	8017b4c <_printf_i+0x22c>
 8017b24:	68e0      	ldr	r0, [r4, #12]
 8017b26:	9b03      	ldr	r3, [sp, #12]
 8017b28:	4298      	cmp	r0, r3
 8017b2a:	bfb8      	it	lt
 8017b2c:	4618      	movlt	r0, r3
 8017b2e:	e7a6      	b.n	8017a7e <_printf_i+0x15e>
 8017b30:	2301      	movs	r3, #1
 8017b32:	4632      	mov	r2, r6
 8017b34:	4649      	mov	r1, r9
 8017b36:	4640      	mov	r0, r8
 8017b38:	47d0      	blx	sl
 8017b3a:	3001      	adds	r0, #1
 8017b3c:	d09d      	beq.n	8017a7a <_printf_i+0x15a>
 8017b3e:	3501      	adds	r5, #1
 8017b40:	68e3      	ldr	r3, [r4, #12]
 8017b42:	9903      	ldr	r1, [sp, #12]
 8017b44:	1a5b      	subs	r3, r3, r1
 8017b46:	42ab      	cmp	r3, r5
 8017b48:	dcf2      	bgt.n	8017b30 <_printf_i+0x210>
 8017b4a:	e7eb      	b.n	8017b24 <_printf_i+0x204>
 8017b4c:	2500      	movs	r5, #0
 8017b4e:	f104 0619 	add.w	r6, r4, #25
 8017b52:	e7f5      	b.n	8017b40 <_printf_i+0x220>
 8017b54:	080180d1 	.word	0x080180d1
 8017b58:	080180e2 	.word	0x080180e2

08017b5c <memmove>:
 8017b5c:	4288      	cmp	r0, r1
 8017b5e:	b510      	push	{r4, lr}
 8017b60:	eb01 0402 	add.w	r4, r1, r2
 8017b64:	d902      	bls.n	8017b6c <memmove+0x10>
 8017b66:	4284      	cmp	r4, r0
 8017b68:	4623      	mov	r3, r4
 8017b6a:	d807      	bhi.n	8017b7c <memmove+0x20>
 8017b6c:	1e43      	subs	r3, r0, #1
 8017b6e:	42a1      	cmp	r1, r4
 8017b70:	d008      	beq.n	8017b84 <memmove+0x28>
 8017b72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017b76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017b7a:	e7f8      	b.n	8017b6e <memmove+0x12>
 8017b7c:	4402      	add	r2, r0
 8017b7e:	4601      	mov	r1, r0
 8017b80:	428a      	cmp	r2, r1
 8017b82:	d100      	bne.n	8017b86 <memmove+0x2a>
 8017b84:	bd10      	pop	{r4, pc}
 8017b86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017b8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017b8e:	e7f7      	b.n	8017b80 <memmove+0x24>

08017b90 <_realloc_r>:
 8017b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b94:	4607      	mov	r7, r0
 8017b96:	4614      	mov	r4, r2
 8017b98:	460d      	mov	r5, r1
 8017b9a:	b921      	cbnz	r1, 8017ba6 <_realloc_r+0x16>
 8017b9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017ba0:	4611      	mov	r1, r2
 8017ba2:	f7ff bbad 	b.w	8017300 <_malloc_r>
 8017ba6:	b92a      	cbnz	r2, 8017bb4 <_realloc_r+0x24>
 8017ba8:	f7ff fcaa 	bl	8017500 <_free_r>
 8017bac:	4625      	mov	r5, r4
 8017bae:	4628      	mov	r0, r5
 8017bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bb4:	f000 f81a 	bl	8017bec <_malloc_usable_size_r>
 8017bb8:	4284      	cmp	r4, r0
 8017bba:	4606      	mov	r6, r0
 8017bbc:	d802      	bhi.n	8017bc4 <_realloc_r+0x34>
 8017bbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017bc2:	d8f4      	bhi.n	8017bae <_realloc_r+0x1e>
 8017bc4:	4621      	mov	r1, r4
 8017bc6:	4638      	mov	r0, r7
 8017bc8:	f7ff fb9a 	bl	8017300 <_malloc_r>
 8017bcc:	4680      	mov	r8, r0
 8017bce:	b908      	cbnz	r0, 8017bd4 <_realloc_r+0x44>
 8017bd0:	4645      	mov	r5, r8
 8017bd2:	e7ec      	b.n	8017bae <_realloc_r+0x1e>
 8017bd4:	42b4      	cmp	r4, r6
 8017bd6:	4622      	mov	r2, r4
 8017bd8:	4629      	mov	r1, r5
 8017bda:	bf28      	it	cs
 8017bdc:	4632      	movcs	r2, r6
 8017bde:	f7ff fc81 	bl	80174e4 <memcpy>
 8017be2:	4629      	mov	r1, r5
 8017be4:	4638      	mov	r0, r7
 8017be6:	f7ff fc8b 	bl	8017500 <_free_r>
 8017bea:	e7f1      	b.n	8017bd0 <_realloc_r+0x40>

08017bec <_malloc_usable_size_r>:
 8017bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017bf0:	1f18      	subs	r0, r3, #4
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	bfbc      	itt	lt
 8017bf6:	580b      	ldrlt	r3, [r1, r0]
 8017bf8:	18c0      	addlt	r0, r0, r3
 8017bfa:	4770      	bx	lr

08017bfc <_init>:
 8017bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bfe:	bf00      	nop
 8017c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c02:	bc08      	pop	{r3}
 8017c04:	469e      	mov	lr, r3
 8017c06:	4770      	bx	lr

08017c08 <_fini>:
 8017c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c0a:	bf00      	nop
 8017c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c0e:	bc08      	pop	{r3}
 8017c10:	469e      	mov	lr, r3
 8017c12:	4770      	bx	lr
