
RC-Car-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015cec  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08015f8c  08015f8c  00016f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080163fc  080163fc  000173fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016404  08016404  00017404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08016408  08016408  00017408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000015c  24000000  0801640c  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000b88c  2400015c  08016568  0001815c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2400b9e8  08016568  000189e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001815c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002cdc3  00000000  00000000  0001818a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000052d4  00000000  00000000  00044f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002118  00000000  00000000  0004a228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000019d9  00000000  00000000  0004c340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cd5e  00000000  00000000  0004dd19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002fb5a  00000000  00000000  0008aa77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00170d68  00000000  00000000  000ba5d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022b339  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009398  00000000  00000000  0022b37c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  00234714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400015c 	.word	0x2400015c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015f74 	.word	0x08015f74

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000160 	.word	0x24000160
 80002dc:	08015f74 	.word	0x08015f74

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006c2:	f000 ffc5 	bl	8001650 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f001 fe6b 	bl	80023a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f8e9 	bl	80008a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f000 fce7 	bl	80010a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80006d2:	f000 fca5 	bl	8001020 <MX_DMA_Init>
  MX_MDMA_Init();
 80006d6:	f000 fcc3 	bl	8001060 <MX_MDMA_Init>
  MX_USART1_UART_Init();
 80006da:	f000 fc53 	bl	8000f84 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80006de:	f014 fa4f 	bl	8014b80 <MX_USB_DEVICE_Init>
  MX_DCMI_Init();
 80006e2:	f000 f957 	bl	8000994 <MX_DCMI_Init>
  MX_I2C2_Init();
 80006e6:	f000 f98d 	bl	8000a04 <MX_I2C2_Init>
  MX_TIM14_Init();
 80006ea:	f000 fbff 	bl	8000eec <MX_TIM14_Init>
  MX_TIM2_Init();
 80006ee:	f000 fac1 	bl	8000c74 <MX_TIM2_Init>
  MX_TIM4_Init();
 80006f2:	f000 fb95 	bl	8000e20 <MX_TIM4_Init>
  MX_TIM1_Init();
 80006f6:	f000 fa2f 	bl	8000b58 <MX_TIM1_Init>
  MX_TIM3_Init();
 80006fa:	f000 fb2b 	bl	8000d54 <MX_TIM3_Init>
  MX_JPEG_Init();
 80006fe:	f000 f9c1 	bl	8000a84 <MX_JPEG_Init>
  MX_SPI2_Init();
 8000702:	f000 f9d3 	bl	8000aac <MX_SPI2_Init>

	// ------------------------------------------------------------ SETUP USB MESSAGING -- //
	//uint8_t usb_msg[100] = {0};	// Reserve 100 bytes for USB Debug messages

	// ------------------------------------------------------------ SETUP CAMERA INTERFACE -- //
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// XCLK - Start the camera's core clock
 8000706:	2100      	movs	r1, #0
 8000708:	4856      	ldr	r0, [pc, #344]	@ (8000864 <main+0x1a8>)
 800070a:	f00e fd57 	bl	800f1bc <HAL_TIM_PWM_Start>
	// X 		  COM15 [6] = 1 (Data range [00-FF])
	// X 		  COM15 [5] = 0 (RGB 565)
	// X 		  COM15 [4] = 1 (RGB 565)
	uint8_t cam_regCache;

	cam_regCache = 0b00001000;
 800070e:	2308      	movs	r3, #8
 8000710:	737b      	strb	r3, [r7, #13]
	while (CAM_SetRegister(0x0C, cam_regCache, 0)) {}
 8000712:	bf00      	nop
 8000714:	7b7b      	ldrb	r3, [r7, #13]
 8000716:	2200      	movs	r2, #0
 8000718:	4619      	mov	r1, r3
 800071a:	200c      	movs	r0, #12
 800071c:	f000 fe66 	bl	80013ec <CAM_SetRegister>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1f6      	bne.n	8000714 <main+0x58>

	cam_regCache = 0b00010000;
 8000726:	2310      	movs	r3, #16
 8000728:	737b      	strb	r3, [r7, #13]
	while (CAM_SetRegister(0x12, cam_regCache, 0)) {}
 800072a:	bf00      	nop
 800072c:	7b7b      	ldrb	r3, [r7, #13]
 800072e:	2200      	movs	r2, #0
 8000730:	4619      	mov	r1, r3
 8000732:	2012      	movs	r0, #18
 8000734:	f000 fe5a 	bl	80013ec <CAM_SetRegister>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1f6      	bne.n	800072c <main+0x70>

	cam_regCache = 0b10000110;
 800073e:	2386      	movs	r3, #134	@ 0x86
 8000740:	737b      	strb	r3, [r7, #13]
	while (CAM_SetRegister(0x32, cam_regCache, 0)) {}
 8000742:	bf00      	nop
 8000744:	7b7b      	ldrb	r3, [r7, #13]
 8000746:	2200      	movs	r2, #0
 8000748:	4619      	mov	r1, r3
 800074a:	2032      	movs	r0, #50	@ 0x32
 800074c:	f000 fe4e 	bl	80013ec <CAM_SetRegister>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d1f6      	bne.n	8000744 <main+0x88>
	//while (CAM_SetRegister(0x40, cam_regCache, 0)) {}

	// ------------------------------------------------------------ SETUP JPEG ENCODING -- //
	// Set the CONFIG
	JPEG_ConfTypeDef* jpeg_config;
	jpeg_config->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
	//jpeg_config->ColorSpace = JPEG_YCBCR_COLORSPACE;
	//jpeg_config->ChromaSubsampling = JPEG_422_SUBSAMPLING;
	jpeg_config->ImageWidth = JPEG_MCU_WIDTH*8;
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	2230      	movs	r2, #48	@ 0x30
 8000760:	60da      	str	r2, [r3, #12]
	jpeg_config->ImageHeight = JPEG_MCU_HEIGHT*8;
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	2248      	movs	r2, #72	@ 0x48
 8000766:	609a      	str	r2, [r3, #8]
	jpeg_config->ImageQuality = JPEG_QUALITY;
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	2214      	movs	r2, #20
 800076c:	611a      	str	r2, [r3, #16]
	HAL_JPEG_ConfigEncoding(&hjpeg, jpeg_config);
 800076e:	68b9      	ldr	r1, [r7, #8]
 8000770:	483d      	ldr	r0, [pc, #244]	@ (8000868 <main+0x1ac>)
 8000772:	f007 fd5d 	bl	8008230 <HAL_JPEG_ConfigEncoding>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// Take a snapshot
		camera_state = 1;	// Flag Camera as DMA Queued
 8000776:	4b3d      	ldr	r3, [pc, #244]	@ (800086c <main+0x1b0>)
 8000778:	2201      	movs	r2, #1
 800077a:	701a      	strb	r2, [r3, #0]
		HAL_StatusTypeDef ovStat = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, camera_mem, CAM_GRAYSIZE / 4);
 800077c:	4a3c      	ldr	r2, [pc, #240]	@ (8000870 <main+0x1b4>)
 800077e:	f241 23ab 	movw	r3, #4779	@ 0x12ab
 8000782:	2102      	movs	r1, #2
 8000784:	483b      	ldr	r0, [pc, #236]	@ (8000874 <main+0x1b8>)
 8000786:	f002 f8cf 	bl	8002928 <HAL_DCMI_Start_DMA>
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
		if (ovStat) {
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d011      	beq.n	80007b8 <main+0xfc>
			//while (1) {
			sprintf(usb_msg, "DCMI/DMA ERROR - Code 0x%X\r\n", ovStat);
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	461a      	mov	r2, r3
 8000798:	4937      	ldr	r1, [pc, #220]	@ (8000878 <main+0x1bc>)
 800079a:	4838      	ldr	r0, [pc, #224]	@ (800087c <main+0x1c0>)
 800079c:	f014 ff4a 	bl	8015634 <siprintf>
			CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80007a0:	4836      	ldr	r0, [pc, #216]	@ (800087c <main+0x1c0>)
 80007a2:	f7ff fd9d 	bl	80002e0 <strlen>
 80007a6:	4603      	mov	r3, r0
 80007a8:	4619      	mov	r1, r3
 80007aa:	4834      	ldr	r0, [pc, #208]	@ (800087c <main+0x1c0>)
 80007ac:	f014 fac2 	bl	8014d34 <CDC_Transmit_FS>
			HAL_Delay(1000);
 80007b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007b4:	f001 fe86 	bl	80024c4 <HAL_Delay>
			//}
		}

		// Wait until the camera is idle again
		while (camera_state) { }
 80007b8:	bf00      	nop
 80007ba:	4b2c      	ldr	r3, [pc, #176]	@ (800086c <main+0x1b0>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1fa      	bne.n	80007ba <main+0xfe>

		// Start the JPEG Encode
		jpeg_ready = 0;
 80007c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000880 <main+0x1c4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
		jpeg_block = 0;
 80007ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000884 <main+0x1c8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
		jpeg_size = 0;
 80007d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000888 <main+0x1cc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]

		GenerateJPEGMCUBlock();
 80007d6:	f000 feaf 	bl	8001538 <GenerateJPEGMCUBlock>
		HAL_JPEG_Encode_DMA(&hjpeg, jpeg_mcu, 64, jpeg_out, JPEG_OUTBUF_SIZE);
 80007da:	2340      	movs	r3, #64	@ 0x40
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	4b2b      	ldr	r3, [pc, #172]	@ (800088c <main+0x1d0>)
 80007e0:	2240      	movs	r2, #64	@ 0x40
 80007e2:	492b      	ldr	r1, [pc, #172]	@ (8000890 <main+0x1d4>)
 80007e4:	4820      	ldr	r0, [pc, #128]	@ (8000868 <main+0x1ac>)
 80007e6:	f007 ff5b 	bl	80086a0 <HAL_JPEG_Encode_DMA>

		// Wait until the JPEG is done frying
		while (!jpeg_ready) { }
 80007ea:	bf00      	nop
 80007ec:	4b24      	ldr	r3, [pc, #144]	@ (8000880 <main+0x1c4>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d0fa      	beq.n	80007ec <main+0x130>

//		sprintf(usb_msg, "Begin Transmission\r\n");
//		CDC_Transmit_FS(usb_msg, strlen(usb_msg));

		// Transmit the camera data
		for (uint16_t i = 0; i < ((jpeg_size - JPEG_HEADERSIZE) / UART_TXSIZE) + 1; i++) {
 80007f6:	2300      	movs	r3, #0
 80007f8:	81fb      	strh	r3, [r7, #14]
 80007fa:	e029      	b.n	8000850 <main+0x194>
			uart_txRaw_buffer[0] = 0b10101010;
 80007fc:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <main+0x1d8>)
 80007fe:	22aa      	movs	r2, #170	@ 0xaa
 8000800:	701a      	strb	r2, [r3, #0]
			uart_txRaw_buffer[1] = i >> 8;	// Store MSB of idx in header
 8000802:	89fb      	ldrh	r3, [r7, #14]
 8000804:	0a1b      	lsrs	r3, r3, #8
 8000806:	b29b      	uxth	r3, r3
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b22      	ldr	r3, [pc, #136]	@ (8000894 <main+0x1d8>)
 800080c:	705a      	strb	r2, [r3, #1]
			uart_txRaw_buffer[2] = i & 0x00FF;	// Store LSB of idx in header
 800080e:	89fb      	ldrh	r3, [r7, #14]
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b20      	ldr	r3, [pc, #128]	@ (8000894 <main+0x1d8>)
 8000814:	709a      	strb	r2, [r3, #2]
			uint8_t checksum = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	71bb      	strb	r3, [r7, #6]
//			for (uint8_t z = 0; z < UART_TXSIZE; z++) {
//				checksum += jpeg_out[i*UART_TXSIZE + JPEG_HEADERSIZE];
//			}
			uart_txRaw_buffer[3] = 0x00;
 800081a:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <main+0x1d8>)
 800081c:	2200      	movs	r2, #0
 800081e:	70da      	strb	r2, [r3, #3]
			memcpy(uart_tx_buffer, jpeg_out + i*UART_TXSIZE + JPEG_HEADERSIZE, UART_TXSIZE);	// Copy jpeg vram into the TX buffer data segment
 8000820:	4b1d      	ldr	r3, [pc, #116]	@ (8000898 <main+0x1dc>)
 8000822:	6818      	ldr	r0, [r3, #0]
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	019b      	lsls	r3, r3, #6
 8000828:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 800082c:	4a17      	ldr	r2, [pc, #92]	@ (800088c <main+0x1d0>)
 800082e:	4413      	add	r3, r2
 8000830:	2240      	movs	r2, #64	@ 0x40
 8000832:	4619      	mov	r1, r3
 8000834:	f014 ff54 	bl	80156e0 <memcpy>
			HAL_UART_Transmit(&huart1, uart_txRaw_buffer, UART_TXSIZE + 4, 30);	// Transmit the buffer
 8000838:	231e      	movs	r3, #30
 800083a:	2244      	movs	r2, #68	@ 0x44
 800083c:	4915      	ldr	r1, [pc, #84]	@ (8000894 <main+0x1d8>)
 800083e:	4817      	ldr	r0, [pc, #92]	@ (800089c <main+0x1e0>)
 8000840:	f00f fd2e 	bl	80102a0 <HAL_UART_Transmit>
			// Debug
//			if (i % 10 == 0) {
//				sprintf(usb_msg, "0x%X\r\n", i);
//				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
//			}
			HAL_Delay(6);
 8000844:	2006      	movs	r0, #6
 8000846:	f001 fe3d 	bl	80024c4 <HAL_Delay>
		for (uint16_t i = 0; i < ((jpeg_size - JPEG_HEADERSIZE) / UART_TXSIZE) + 1; i++) {
 800084a:	89fb      	ldrh	r3, [r7, #14]
 800084c:	3301      	adds	r3, #1
 800084e:	81fb      	strh	r3, [r7, #14]
 8000850:	89fa      	ldrh	r2, [r7, #14]
 8000852:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <main+0x1cc>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 800085a:	099b      	lsrs	r3, r3, #6
 800085c:	3301      	adds	r3, #1
 800085e:	429a      	cmp	r2, r3
 8000860:	d3cc      	bcc.n	80007fc <main+0x140>
	{
 8000862:	e788      	b.n	8000776 <main+0xba>
 8000864:	2400057c 	.word	0x2400057c
 8000868:	24000294 	.word	0x24000294
 800086c:	24005172 	.word	0x24005172
 8000870:	240006c4 	.word	0x240006c4
 8000874:	24000178 	.word	0x24000178
 8000878:	08015f8c 	.word	0x08015f8c
 800087c:	2400065c 	.word	0x2400065c
 8000880:	24000000 	.word	0x24000000
 8000884:	240051b4 	.word	0x240051b4
 8000888:	24009c68 	.word	0x24009c68
 800088c:	240051b8 	.word	0x240051b8
 8000890:	24005174 	.word	0x24005174
 8000894:	24009c6c 	.word	0x24009c6c
 8000898:	24000004 	.word	0x24000004
 800089c:	240005c8 	.word	0x240005c8

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b09c      	sub	sp, #112	@ 0x70
 80008a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008aa:	224c      	movs	r2, #76	@ 0x4c
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f014 fee2 	bl	8015678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2220      	movs	r2, #32
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f014 fedc 	bl	8015678 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008c0:	2002      	movs	r0, #2
 80008c2:	f00b fc31 	bl	800c128 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	4b30      	ldr	r3, [pc, #192]	@ (800098c <SystemClock_Config+0xec>)
 80008cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ce:	4a2f      	ldr	r2, [pc, #188]	@ (800098c <SystemClock_Config+0xec>)
 80008d0:	f023 0301 	bic.w	r3, r3, #1
 80008d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008d6:	4b2d      	ldr	r3, [pc, #180]	@ (800098c <SystemClock_Config+0xec>)
 80008d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000990 <SystemClock_Config+0xf0>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a2a      	ldr	r2, [pc, #168]	@ (8000990 <SystemClock_Config+0xf0>)
 80008e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b28      	ldr	r3, [pc, #160]	@ (8000990 <SystemClock_Config+0xf0>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008f8:	bf00      	nop
 80008fa:	4b25      	ldr	r3, [pc, #148]	@ (8000990 <SystemClock_Config+0xf0>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000902:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000906:	d1f8      	bne.n	80008fa <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000908:	2301      	movs	r3, #1
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800090c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000912:	2302      	movs	r3, #2
 8000914:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000916:	2302      	movs	r3, #2
 8000918:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800091a:	2302      	movs	r3, #2
 800091c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800091e:	2318      	movs	r3, #24
 8000920:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000922:	2302      	movs	r3, #2
 8000924:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000926:	2306      	movs	r3, #6
 8000928:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800092a:	2302      	movs	r3, #2
 800092c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800092e:	230c      	movs	r3, #12
 8000930:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000932:	2300      	movs	r3, #0
 8000934:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800093e:	4618      	mov	r0, r3
 8000940:	f00b fc3c 	bl	800c1bc <HAL_RCC_OscConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800094a:	f000 fead 	bl	80016a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094e:	233f      	movs	r3, #63	@ 0x3f
 8000950:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000952:	2303      	movs	r3, #3
 8000954:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800095e:	2340      	movs	r3, #64	@ 0x40
 8000960:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000962:	2340      	movs	r3, #64	@ 0x40
 8000964:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000966:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800096a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800096c:	2340      	movs	r3, #64	@ 0x40
 800096e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2102      	movs	r1, #2
 8000974:	4618      	mov	r0, r3
 8000976:	f00c f87b 	bl	800ca70 <HAL_RCC_ClockConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000980:	f000 fe92 	bl	80016a8 <Error_Handler>
  }
}
 8000984:	bf00      	nop
 8000986:	3770      	adds	r7, #112	@ 0x70
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	58000400 	.word	0x58000400
 8000990:	58024800 	.word	0x58024800

08000994 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000998:	4b18      	ldr	r3, [pc, #96]	@ (80009fc <MX_DCMI_Init+0x68>)
 800099a:	4a19      	ldr	r2, [pc, #100]	@ (8000a00 <MX_DCMI_Init+0x6c>)
 800099c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800099e:	4b17      	ldr	r3, [pc, #92]	@ (80009fc <MX_DCMI_Init+0x68>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80009a4:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <MX_DCMI_Init+0x68>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80009aa:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <MX_DCMI_Init+0x68>)
 80009ac:	2280      	movs	r2, #128	@ 0x80
 80009ae:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80009b0:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <MX_DCMI_Init+0x68>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80009b6:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <MX_DCMI_Init+0x68>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <MX_DCMI_Init+0x68>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <MX_DCMI_Init+0x68>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALTERNATE_4;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <MX_DCMI_Init+0x68>)
 80009ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80009ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_EVEN;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <MX_DCMI_Init+0x68>)
 80009d2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALTERNATE_2;
 80009d8:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <MX_DCMI_Init+0x68>)
 80009da:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80009de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <MX_DCMI_Init+0x68>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	@ (80009fc <MX_DCMI_Init+0x68>)
 80009e8:	f001 ff24 	bl	8002834 <HAL_DCMI_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_DCMI_Init+0x62>
  {
    Error_Handler();
 80009f2:	f000 fe59 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	24000178 	.word	0x24000178
 8000a00:	48020000 	.word	0x48020000

08000a04 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a7c <MX_I2C2_Init+0x78>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a10:	4a1b      	ldr	r2, [pc, #108]	@ (8000a80 <MX_I2C2_Init+0x7c>)
 8000a12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a14:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a20:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a26:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a32:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a3e:	480e      	ldr	r0, [pc, #56]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a40:	f005 fea8 	bl	8006794 <HAL_I2C_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a4a:	f000 fe2d 	bl	80016a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4809      	ldr	r0, [pc, #36]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a52:	f007 fad3 	bl	8007ffc <HAL_I2CEx_ConfigAnalogFilter>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a5c:	f000 fe24 	bl	80016a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a60:	2100      	movs	r1, #0
 8000a62:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a64:	f007 fb15 	bl	8008092 <HAL_I2CEx_ConfigDigitalFilter>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a6e:	f000 fe1b 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	24000240 	.word	0x24000240
 8000a7c:	40005800 	.word	0x40005800
 8000a80:	00c0eaff 	.word	0x00c0eaff

08000a84 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <MX_JPEG_Init+0x20>)
 8000a8a:	4a07      	ldr	r2, [pc, #28]	@ (8000aa8 <MX_JPEG_Init+0x24>)
 8000a8c:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <MX_JPEG_Init+0x20>)
 8000a90:	f007 fb4c 	bl	800812c <HAL_JPEG_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000a9a:	f000 fe05 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	24000294 	.word	0x24000294
 8000aa8:	52003000 	.word	0x52003000

08000aac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ab0:	4b27      	ldr	r3, [pc, #156]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000ab2:	4a28      	ldr	r2, [pc, #160]	@ (8000b54 <MX_SPI2_Init+0xa8>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ab6:	4b26      	ldr	r3, [pc, #152]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000ab8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000abc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000abe:	4b24      	ldr	r3, [pc, #144]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ac4:	4b22      	ldr	r3, [pc, #136]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aca:	4b21      	ldr	r3, [pc, #132]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000ad8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000adc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aea:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af0:	4b17      	ldr	r3, [pc, #92]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000af6:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000afc:	4b14      	ldr	r3, [pc, #80]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000afe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b02:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b28:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_SPI2_Init+0xa4>)
 8000b3c:	f00e f950 	bl	800ede0 <HAL_SPI_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000b46:	f000 fdaf 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	240003c4 	.word	0x240003c4
 8000b54:	40003800 	.word	0x40003800

08000b58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b096      	sub	sp, #88	@ 0x58
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b6a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]
 8000b7a:	615a      	str	r2, [r3, #20]
 8000b7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	222c      	movs	r2, #44	@ 0x2c
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f014 fd77 	bl	8015678 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b8a:	4b38      	ldr	r3, [pc, #224]	@ (8000c6c <MX_TIM1_Init+0x114>)
 8000b8c:	4a38      	ldr	r2, [pc, #224]	@ (8000c70 <MX_TIM1_Init+0x118>)
 8000b8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b90:	4b36      	ldr	r3, [pc, #216]	@ (8000c6c <MX_TIM1_Init+0x114>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b96:	4b35      	ldr	r3, [pc, #212]	@ (8000c6c <MX_TIM1_Init+0x114>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000b9c:	4b33      	ldr	r3, [pc, #204]	@ (8000c6c <MX_TIM1_Init+0x114>)
 8000b9e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000ba2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba4:	4b31      	ldr	r3, [pc, #196]	@ (8000c6c <MX_TIM1_Init+0x114>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000baa:	4b30      	ldr	r3, [pc, #192]	@ (8000c6c <MX_TIM1_Init+0x114>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb0:	4b2e      	ldr	r3, [pc, #184]	@ (8000c6c <MX_TIM1_Init+0x114>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bb6:	482d      	ldr	r0, [pc, #180]	@ (8000c6c <MX_TIM1_Init+0x114>)
 8000bb8:	f00e faa8 	bl	800f10c <HAL_TIM_PWM_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000bc2:	f000 fd71 	bl	80016a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bd2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4824      	ldr	r0, [pc, #144]	@ (8000c6c <MX_TIM1_Init+0x114>)
 8000bda:	f00f f9e7 	bl	800ffac <HAL_TIMEx_MasterConfigSynchronization>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000be4:	f000 fd60 	bl	80016a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be8:	2360      	movs	r3, #96	@ 0x60
 8000bea:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c00:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c04:	220c      	movs	r2, #12
 8000c06:	4619      	mov	r1, r3
 8000c08:	4818      	ldr	r0, [pc, #96]	@ (8000c6c <MX_TIM1_Init+0x114>)
 8000c0a:	f00e fced 	bl	800f5e8 <HAL_TIM_PWM_ConfigChannel>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000c14:	f000 fd48 	bl	80016a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4807      	ldr	r0, [pc, #28]	@ (8000c6c <MX_TIM1_Init+0x114>)
 8000c4e:	f00f fa3b 	bl	80100c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000c58:	f000 fd26 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c5c:	4803      	ldr	r0, [pc, #12]	@ (8000c6c <MX_TIM1_Init+0x114>)
 8000c5e:	f001 f8bd 	bl	8001ddc <HAL_TIM_MspPostInit>

}
 8000c62:	bf00      	nop
 8000c64:	3758      	adds	r7, #88	@ 0x58
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2400044c 	.word	0x2400044c
 8000c70:	40010000 	.word	0x40010000

08000c74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	@ 0x28
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c86:	463b      	mov	r3, r7
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
 8000c94:	615a      	str	r2, [r3, #20]
 8000c96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c98:	4b2d      	ldr	r3, [pc, #180]	@ (8000d50 <MX_TIM2_Init+0xdc>)
 8000c9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ca0:	4b2b      	ldr	r3, [pc, #172]	@ (8000d50 <MX_TIM2_Init+0xdc>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8000d50 <MX_TIM2_Init+0xdc>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000cac:	4b28      	ldr	r3, [pc, #160]	@ (8000d50 <MX_TIM2_Init+0xdc>)
 8000cae:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000cb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb4:	4b26      	ldr	r3, [pc, #152]	@ (8000d50 <MX_TIM2_Init+0xdc>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cba:	4b25      	ldr	r3, [pc, #148]	@ (8000d50 <MX_TIM2_Init+0xdc>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cc0:	4823      	ldr	r0, [pc, #140]	@ (8000d50 <MX_TIM2_Init+0xdc>)
 8000cc2:	f00e fa23 	bl	800f10c <HAL_TIM_PWM_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000ccc:	f000 fcec 	bl	80016a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	481c      	ldr	r0, [pc, #112]	@ (8000d50 <MX_TIM2_Init+0xdc>)
 8000ce0:	f00f f964 	bl	800ffac <HAL_TIMEx_MasterConfigSynchronization>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000cea:	f000 fcdd 	bl	80016a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cee:	2360      	movs	r3, #96	@ 0x60
 8000cf0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2200      	movs	r2, #0
 8000d02:	4619      	mov	r1, r3
 8000d04:	4812      	ldr	r0, [pc, #72]	@ (8000d50 <MX_TIM2_Init+0xdc>)
 8000d06:	f00e fc6f 	bl	800f5e8 <HAL_TIM_PWM_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000d10:	f000 fcca 	bl	80016a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d14:	463b      	mov	r3, r7
 8000d16:	2204      	movs	r2, #4
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480d      	ldr	r0, [pc, #52]	@ (8000d50 <MX_TIM2_Init+0xdc>)
 8000d1c:	f00e fc64 	bl	800f5e8 <HAL_TIM_PWM_ConfigChannel>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000d26:	f000 fcbf 	bl	80016a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	2208      	movs	r2, #8
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4807      	ldr	r0, [pc, #28]	@ (8000d50 <MX_TIM2_Init+0xdc>)
 8000d32:	f00e fc59 	bl	800f5e8 <HAL_TIM_PWM_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000d3c:	f000 fcb4 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d40:	4803      	ldr	r0, [pc, #12]	@ (8000d50 <MX_TIM2_Init+0xdc>)
 8000d42:	f001 f84b 	bl	8001ddc <HAL_TIM_MspPostInit>

}
 8000d46:	bf00      	nop
 8000d48:	3728      	adds	r7, #40	@ 0x28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	24000498 	.word	0x24000498

08000d54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	@ 0x28
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d66:	463b      	mov	r3, r7
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
 8000d74:	615a      	str	r2, [r3, #20]
 8000d76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d78:	4b27      	ldr	r3, [pc, #156]	@ (8000e18 <MX_TIM3_Init+0xc4>)
 8000d7a:	4a28      	ldr	r2, [pc, #160]	@ (8000e1c <MX_TIM3_Init+0xc8>)
 8000d7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d7e:	4b26      	ldr	r3, [pc, #152]	@ (8000e18 <MX_TIM3_Init+0xc4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d84:	4b24      	ldr	r3, [pc, #144]	@ (8000e18 <MX_TIM3_Init+0xc4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000d8a:	4b23      	ldr	r3, [pc, #140]	@ (8000e18 <MX_TIM3_Init+0xc4>)
 8000d8c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d92:	4b21      	ldr	r3, [pc, #132]	@ (8000e18 <MX_TIM3_Init+0xc4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d98:	4b1f      	ldr	r3, [pc, #124]	@ (8000e18 <MX_TIM3_Init+0xc4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d9e:	481e      	ldr	r0, [pc, #120]	@ (8000e18 <MX_TIM3_Init+0xc4>)
 8000da0:	f00e f9b4 	bl	800f10c <HAL_TIM_PWM_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000daa:	f000 fc7d 	bl	80016a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4816      	ldr	r0, [pc, #88]	@ (8000e18 <MX_TIM3_Init+0xc4>)
 8000dbe:	f00f f8f5 	bl	800ffac <HAL_TIMEx_MasterConfigSynchronization>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000dc8:	f000 fc6e 	bl	80016a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dcc:	2360      	movs	r3, #96	@ 0x60
 8000dce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ddc:	463b      	mov	r3, r7
 8000dde:	2208      	movs	r2, #8
 8000de0:	4619      	mov	r1, r3
 8000de2:	480d      	ldr	r0, [pc, #52]	@ (8000e18 <MX_TIM3_Init+0xc4>)
 8000de4:	f00e fc00 	bl	800f5e8 <HAL_TIM_PWM_ConfigChannel>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000dee:	f000 fc5b 	bl	80016a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	220c      	movs	r2, #12
 8000df6:	4619      	mov	r1, r3
 8000df8:	4807      	ldr	r0, [pc, #28]	@ (8000e18 <MX_TIM3_Init+0xc4>)
 8000dfa:	f00e fbf5 	bl	800f5e8 <HAL_TIM_PWM_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000e04:	f000 fc50 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e08:	4803      	ldr	r0, [pc, #12]	@ (8000e18 <MX_TIM3_Init+0xc4>)
 8000e0a:	f000 ffe7 	bl	8001ddc <HAL_TIM_MspPostInit>

}
 8000e0e:	bf00      	nop
 8000e10:	3728      	adds	r7, #40	@ 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	240004e4 	.word	0x240004e4
 8000e1c:	40000400 	.word	0x40000400

08000e20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	@ 0x28
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e32:	463b      	mov	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
 8000e40:	615a      	str	r2, [r3, #20]
 8000e42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e44:	4b27      	ldr	r3, [pc, #156]	@ (8000ee4 <MX_TIM4_Init+0xc4>)
 8000e46:	4a28      	ldr	r2, [pc, #160]	@ (8000ee8 <MX_TIM4_Init+0xc8>)
 8000e48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ee4 <MX_TIM4_Init+0xc4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e50:	4b24      	ldr	r3, [pc, #144]	@ (8000ee4 <MX_TIM4_Init+0xc4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000e56:	4b23      	ldr	r3, [pc, #140]	@ (8000ee4 <MX_TIM4_Init+0xc4>)
 8000e58:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ee4 <MX_TIM4_Init+0xc4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee4 <MX_TIM4_Init+0xc4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e6a:	481e      	ldr	r0, [pc, #120]	@ (8000ee4 <MX_TIM4_Init+0xc4>)
 8000e6c:	f00e f94e 	bl	800f10c <HAL_TIM_PWM_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000e76:	f000 fc17 	bl	80016a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	4816      	ldr	r0, [pc, #88]	@ (8000ee4 <MX_TIM4_Init+0xc4>)
 8000e8a:	f00f f88f 	bl	800ffac <HAL_TIMEx_MasterConfigSynchronization>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000e94:	f000 fc08 	bl	80016a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e98:	2360      	movs	r3, #96	@ 0x60
 8000e9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	2208      	movs	r2, #8
 8000eac:	4619      	mov	r1, r3
 8000eae:	480d      	ldr	r0, [pc, #52]	@ (8000ee4 <MX_TIM4_Init+0xc4>)
 8000eb0:	f00e fb9a 	bl	800f5e8 <HAL_TIM_PWM_ConfigChannel>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000eba:	f000 fbf5 	bl	80016a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	220c      	movs	r2, #12
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4807      	ldr	r0, [pc, #28]	@ (8000ee4 <MX_TIM4_Init+0xc4>)
 8000ec6:	f00e fb8f 	bl	800f5e8 <HAL_TIM_PWM_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000ed0:	f000 fbea 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ed4:	4803      	ldr	r0, [pc, #12]	@ (8000ee4 <MX_TIM4_Init+0xc4>)
 8000ed6:	f000 ff81 	bl	8001ddc <HAL_TIM_MspPostInit>

}
 8000eda:	bf00      	nop
 8000edc:	3728      	adds	r7, #40	@ 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	24000530 	.word	0x24000530
 8000ee8:	40000800 	.word	0x40000800

08000eec <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
 8000f00:	615a      	str	r2, [r3, #20]
 8000f02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f04:	4b1d      	ldr	r3, [pc, #116]	@ (8000f7c <MX_TIM14_Init+0x90>)
 8000f06:	4a1e      	ldr	r2, [pc, #120]	@ (8000f80 <MX_TIM14_Init+0x94>)
 8000f08:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f7c <MX_TIM14_Init+0x90>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f10:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <MX_TIM14_Init+0x90>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5;
 8000f16:	4b19      	ldr	r3, [pc, #100]	@ (8000f7c <MX_TIM14_Init+0x90>)
 8000f18:	2205      	movs	r2, #5
 8000f1a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1c:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <MX_TIM14_Init+0x90>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f22:	4b16      	ldr	r3, [pc, #88]	@ (8000f7c <MX_TIM14_Init+0x90>)
 8000f24:	2280      	movs	r2, #128	@ 0x80
 8000f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f28:	4814      	ldr	r0, [pc, #80]	@ (8000f7c <MX_TIM14_Init+0x90>)
 8000f2a:	f00e f898 	bl	800f05e <HAL_TIM_Base_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8000f34:	f000 fbb8 	bl	80016a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000f38:	4810      	ldr	r0, [pc, #64]	@ (8000f7c <MX_TIM14_Init+0x90>)
 8000f3a:	f00e f8e7 	bl	800f10c <HAL_TIM_PWM_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8000f44:	f000 fbb0 	bl	80016a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f48:	2360      	movs	r3, #96	@ 0x60
 8000f4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000f54:	2304      	movs	r3, #4
 8000f56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4807      	ldr	r0, [pc, #28]	@ (8000f7c <MX_TIM14_Init+0x90>)
 8000f60:	f00e fb42 	bl	800f5e8 <HAL_TIM_PWM_ConfigChannel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 8000f6a:	f000 fb9d 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000f6e:	4803      	ldr	r0, [pc, #12]	@ (8000f7c <MX_TIM14_Init+0x90>)
 8000f70:	f000 ff34 	bl	8001ddc <HAL_TIM_MspPostInit>

}
 8000f74:	bf00      	nop
 8000f76:	3720      	adds	r7, #32
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2400057c 	.word	0x2400057c
 8000f80:	40002000 	.word	0x40002000

08000f84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f88:	4b22      	ldr	r3, [pc, #136]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000f8a:	4a23      	ldr	r2, [pc, #140]	@ (8001018 <MX_USART1_UART_Init+0x94>)
 8000f8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 111111;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000f90:	4a22      	ldr	r2, [pc, #136]	@ (800101c <MX_USART1_UART_Init+0x98>)
 8000f92:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f94:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000fa8:	220c      	movs	r2, #12
 8000faa:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fac:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fb8:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fbe:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc4:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fca:	4812      	ldr	r0, [pc, #72]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000fcc:	f00f f918 	bl	8010200 <HAL_UART_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000fd6:	f000 fb67 	bl	80016a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	480d      	ldr	r0, [pc, #52]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000fde:	f010 f9b0 	bl	8011342 <HAL_UARTEx_SetTxFifoThreshold>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8000fe8:	f000 fb5e 	bl	80016a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fec:	2100      	movs	r1, #0
 8000fee:	4809      	ldr	r0, [pc, #36]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000ff0:	f010 f9e5 	bl	80113be <HAL_UARTEx_SetRxFifoThreshold>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000ffa:	f000 fb55 	bl	80016a8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000ffe:	4805      	ldr	r0, [pc, #20]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8001000:	f010 f964 	bl	80112cc <HAL_UARTEx_EnableFifoMode>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800100a:	f000 fb4d 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	240005c8 	.word	0x240005c8
 8001018:	40011000 	.word	0x40011000
 800101c:	0001b207 	.word	0x0001b207

08001020 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001026:	4b0d      	ldr	r3, [pc, #52]	@ (800105c <MX_DMA_Init+0x3c>)
 8001028:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800102c:	4a0b      	ldr	r2, [pc, #44]	@ (800105c <MX_DMA_Init+0x3c>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <MX_DMA_Init+0x3c>)
 8001038:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	200b      	movs	r0, #11
 800104a:	f001 fb46 	bl	80026da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800104e:	200b      	movs	r0, #11
 8001050:	f001 fb5d 	bl	800270e <HAL_NVIC_EnableIRQ>

}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	58024400 	.word	0x58024400

08001060 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001066:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <MX_MDMA_Init+0x3c>)
 8001068:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800106c:	4a0b      	ldr	r2, [pc, #44]	@ (800109c <MX_MDMA_Init+0x3c>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001076:	4b09      	ldr	r3, [pc, #36]	@ (800109c <MX_MDMA_Init+0x3c>)
 8001078:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2100      	movs	r1, #0
 8001088:	207a      	movs	r0, #122	@ 0x7a
 800108a:	f001 fb26 	bl	80026da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 800108e:	207a      	movs	r0, #122	@ 0x7a
 8001090:	f001 fb3d 	bl	800270e <HAL_NVIC_EnableIRQ>

}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	58024400 	.word	0x58024400

080010a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	@ 0x30
 80010a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010b6:	4b52      	ldr	r3, [pc, #328]	@ (8001200 <MX_GPIO_Init+0x160>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010bc:	4a50      	ldr	r2, [pc, #320]	@ (8001200 <MX_GPIO_Init+0x160>)
 80010be:	f043 0310 	orr.w	r3, r3, #16
 80010c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001200 <MX_GPIO_Init+0x160>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010cc:	f003 0310 	and.w	r3, r3, #16
 80010d0:	61bb      	str	r3, [r7, #24]
 80010d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001200 <MX_GPIO_Init+0x160>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010da:	4a49      	ldr	r2, [pc, #292]	@ (8001200 <MX_GPIO_Init+0x160>)
 80010dc:	f043 0304 	orr.w	r3, r3, #4
 80010e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e4:	4b46      	ldr	r3, [pc, #280]	@ (8001200 <MX_GPIO_Init+0x160>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f2:	4b43      	ldr	r3, [pc, #268]	@ (8001200 <MX_GPIO_Init+0x160>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f8:	4a41      	ldr	r2, [pc, #260]	@ (8001200 <MX_GPIO_Init+0x160>)
 80010fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001102:	4b3f      	ldr	r3, [pc, #252]	@ (8001200 <MX_GPIO_Init+0x160>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	4b3b      	ldr	r3, [pc, #236]	@ (8001200 <MX_GPIO_Init+0x160>)
 8001112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001116:	4a3a      	ldr	r2, [pc, #232]	@ (8001200 <MX_GPIO_Init+0x160>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001120:	4b37      	ldr	r3, [pc, #220]	@ (8001200 <MX_GPIO_Init+0x160>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	4b34      	ldr	r3, [pc, #208]	@ (8001200 <MX_GPIO_Init+0x160>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001134:	4a32      	ldr	r2, [pc, #200]	@ (8001200 <MX_GPIO_Init+0x160>)
 8001136:	f043 0302 	orr.w	r3, r3, #2
 800113a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800113e:	4b30      	ldr	r3, [pc, #192]	@ (8001200 <MX_GPIO_Init+0x160>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114c:	4b2c      	ldr	r3, [pc, #176]	@ (8001200 <MX_GPIO_Init+0x160>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001152:	4a2b      	ldr	r2, [pc, #172]	@ (8001200 <MX_GPIO_Init+0x160>)
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800115c:	4b28      	ldr	r3, [pc, #160]	@ (8001200 <MX_GPIO_Init+0x160>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001170:	4824      	ldr	r0, [pc, #144]	@ (8001204 <MX_GPIO_Init+0x164>)
 8001172:	f005 faf5 	bl	8006760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001176:	2201      	movs	r2, #1
 8001178:	2108      	movs	r1, #8
 800117a:	4823      	ldr	r0, [pc, #140]	@ (8001208 <MX_GPIO_Init+0x168>)
 800117c:	f005 faf0 	bl	8006760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2101      	movs	r1, #1
 8001184:	4821      	ldr	r0, [pc, #132]	@ (800120c <MX_GPIO_Init+0x16c>)
 8001186:	f005 faeb 	bl	8006760 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800118a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800118e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	4619      	mov	r1, r3
 80011a2:	4818      	ldr	r0, [pc, #96]	@ (8001204 <MX_GPIO_Init+0x164>)
 80011a4:	f005 f92c 	bl	8006400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011a8:	2301      	movs	r3, #1
 80011aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ac:	2300      	movs	r3, #0
 80011ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	4812      	ldr	r0, [pc, #72]	@ (8001204 <MX_GPIO_Init+0x164>)
 80011bc:	f005 f920 	bl	8006400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011c0:	2308      	movs	r3, #8
 80011c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 031c 	add.w	r3, r7, #28
 80011d4:	4619      	mov	r1, r3
 80011d6:	480c      	ldr	r0, [pc, #48]	@ (8001208 <MX_GPIO_Init+0x168>)
 80011d8:	f005 f912 	bl	8006400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011dc:	2301      	movs	r3, #1
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	4806      	ldr	r0, [pc, #24]	@ (800120c <MX_GPIO_Init+0x16c>)
 80011f4:	f005 f904 	bl	8006400 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011f8:	bf00      	nop
 80011fa:	3730      	adds	r7, #48	@ 0x30
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	58024400 	.word	0x58024400
 8001204:	58020800 	.word	0x58020800
 8001208:	58020000 	.word	0x58020000
 800120c:	58020c00 	.word	0x58020c00

08001210 <HAL_DCMI_VsyncEventCallback>:

/* USER CODE BEGIN 4 */

// ------------------------------------------------------------ OVERRIDE CALLBACKS -- //
// Frame captured event, called when the DMA buffer is full of new frame data
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	if (!camera_state) return;	// Do nothing if the camera is IDLE
 8001218:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <HAL_DCMI_VsyncEventCallback+0x44>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d014      	beq.n	800124c <HAL_DCMI_VsyncEventCallback+0x3c>

	if (camera_state == 1) {	// Transition flag to CAPTURING
 8001222:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <HAL_DCMI_VsyncEventCallback+0x44>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b01      	cmp	r3, #1
 800122a:	d103      	bne.n	8001234 <HAL_DCMI_VsyncEventCallback+0x24>
		camera_state = 2;
 800122c:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <HAL_DCMI_VsyncEventCallback+0x44>)
 800122e:	2202      	movs	r2, #2
 8001230:	701a      	strb	r2, [r3, #0]
		return;
 8001232:	e00c      	b.n	800124e <HAL_DCMI_VsyncEventCallback+0x3e>
	}

	if (camera_state == 2) {	// Transition flag to IDLE
 8001234:	4b07      	ldr	r3, [pc, #28]	@ (8001254 <HAL_DCMI_VsyncEventCallback+0x44>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d107      	bne.n	800124e <HAL_DCMI_VsyncEventCallback+0x3e>
		HAL_DCMI_Stop(hdcmi);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f001 fc34 	bl	8002aac <HAL_DCMI_Stop>
		camera_state = 0;
 8001244:	4b03      	ldr	r3, [pc, #12]	@ (8001254 <HAL_DCMI_VsyncEventCallback+0x44>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
		return;
 800124a:	e000      	b.n	800124e <HAL_DCMI_VsyncEventCallback+0x3e>
	if (!camera_state) return;	// Do nothing if the camera is IDLE
 800124c:	bf00      	nop
	}
}
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	24005172 	.word	0x24005172

08001258 <HAL_JPEG_GetDataCallback>:

// JPEG hardware is requesting the next MCU block
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
	//		sprintf(usb_msg, "JPEG: Block: %d\r\n", jpeg_block);
	//		CDC_Transmit_FS(usb_msg, strlen(usb_msg));
	//	}

	// Restock the input buffer with new MCU
	if (GenerateJPEGMCUBlock()) {
 8001262:	f000 f969 	bl	8001538 <GenerateJPEGMCUBlock>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d006      	beq.n	800127a <HAL_JPEG_GetDataCallback+0x22>
		// ERROR while generating MCU, probable memory leak - recover JPEG peripheral by restarting
		// Reset JPEG variables
		jpeg_ready = 1;
 800126c:	4b07      	ldr	r3, [pc, #28]	@ (800128c <HAL_JPEG_GetDataCallback+0x34>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
		jpeg_block = 0;
 8001272:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <HAL_JPEG_GetDataCallback+0x38>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
	}
	else {
		// Configure the buffer to be the same as before, it's contents have changed
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
	}
}
 8001278:	e004      	b.n	8001284 <HAL_JPEG_GetDataCallback+0x2c>
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
 800127a:	2240      	movs	r2, #64	@ 0x40
 800127c:	4905      	ldr	r1, [pc, #20]	@ (8001294 <HAL_JPEG_GetDataCallback+0x3c>)
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f007 fad6 	bl	8008830 <HAL_JPEG_ConfigInputBuffer>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	24000000 	.word	0x24000000
 8001290:	240051b4 	.word	0x240051b4
 8001294:	24005174 	.word	0x24005174

08001298 <HAL_JPEG_DataReadyCallback>:

// JPEG hardware is requesting a larger output buffer.
// This is done to manage JPEG output size, give it a buffer only as large as required
void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
	// Setup new output buffer location (part of contiguous super-buffer)
	jpeg_size += JPEG_OUTBUF_SIZE;
 80012a4:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <HAL_JPEG_DataReadyCallback+0x30>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3340      	adds	r3, #64	@ 0x40
 80012aa:	4a07      	ldr	r2, [pc, #28]	@ (80012c8 <HAL_JPEG_DataReadyCallback+0x30>)
 80012ac:	6013      	str	r3, [r2, #0]
	HAL_JPEG_ConfigOutputBuffer(hjpeg, jpeg_out + jpeg_size, JPEG_OUTBUF_SIZE);
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_JPEG_DataReadyCallback+0x30>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a06      	ldr	r2, [pc, #24]	@ (80012cc <HAL_JPEG_DataReadyCallback+0x34>)
 80012b4:	4413      	add	r3, r2
 80012b6:	2240      	movs	r2, #64	@ 0x40
 80012b8:	4619      	mov	r1, r3
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f007 faca 	bl	8008854 <HAL_JPEG_ConfigOutputBuffer>
	// Debug MSG
	//	sprintf(usb_msg, "JPEG: DataReady - output: %d\r\n", jpeg_size);
	//	CDC_Transmit_FS(usb_msg, strlen(usb_msg));
}
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	24009c68 	.word	0x24009c68
 80012cc:	240051b8 	.word	0x240051b8

080012d0 <HAL_JPEG_EncodeCpltCallback>:

// JPEG hardware has completed the current image
void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg) {
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	// Reset JPEG variables
	jpeg_ready = 1;
 80012d8:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <HAL_JPEG_EncodeCpltCallback+0x20>)
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
	jpeg_block = 0;
 80012de:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <HAL_JPEG_EncodeCpltCallback+0x24>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
	// Debug MSG
	//	sprintf(usb_msg, "JPEG: Finished encode\r\n");
	//	CDC_Transmit_FS(usb_msg, strlen(usb_msg));
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	24000000 	.word	0x24000000
 80012f4:	240051b4 	.word	0x240051b4

080012f8 <CAM_GetRegister>:
// Transmit wrapper, this is for continuity across Controller project which debugs by printing to OLEDs
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
	CDC_Transmit_FS(str_ptr, str_len);
}

HAL_StatusTypeDef CAM_GetRegister(uint8_t addr, uint8_t* pData, uint8_t haltOnError) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b09e      	sub	sp, #120	@ 0x78
 80012fc:	af02      	add	r7, sp, #8
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	4613      	mov	r3, r2
 8001306:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ov_result;
	uint8_t usb_msg[100] = {0};
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	2264      	movs	r2, #100	@ 0x64
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f014 f9b1 	bl	8015678 <memset>

	ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_READ, &addr, 1, 100);
 8001316:	1dfa      	adds	r2, r7, #7
 8001318:	2364      	movs	r3, #100	@ 0x64
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2301      	movs	r3, #1
 800131e:	2143      	movs	r1, #67	@ 0x43
 8001320:	482f      	ldr	r0, [pc, #188]	@ (80013e0 <CAM_GetRegister+0xe8>)
 8001322:	f005 fad3 	bl	80068cc <HAL_I2C_Master_Transmit>
 8001326:	4603      	mov	r3, r0
 8001328:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (ov_result) {
 800132c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001330:	2b00      	cmp	r3, #0
 8001332:	d020      	beq.n	8001376 <CAM_GetRegister+0x7e>
		if (haltOnError) {
 8001334:	79bb      	ldrb	r3, [r7, #6]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d01a      	beq.n	8001370 <CAM_GetRegister+0x78>
			sprintf(usb_msg, "TX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	461a      	mov	r2, r3
 800133e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001342:	f107 0008 	add.w	r0, r7, #8
 8001346:	4927      	ldr	r1, [pc, #156]	@ (80013e4 <CAM_GetRegister+0xec>)
 8001348:	f014 f974 	bl	8015634 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 800134c:	f107 0308 	add.w	r3, r7, #8
 8001350:	4618      	mov	r0, r3
 8001352:	f7fe ffc5 	bl	80002e0 <strlen>
 8001356:	4602      	mov	r2, r0
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	4611      	mov	r1, r2
 800135e:	4618      	mov	r0, r3
 8001360:	f013 fce8 	bl	8014d34 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8001364:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001368:	f001 f8ac 	bl	80024c4 <HAL_Delay>
			while (1) {
 800136c:	bf00      	nop
 800136e:	e7ed      	b.n	800134c <CAM_GetRegister+0x54>
			}
		}
		return ov_result;
 8001370:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001374:	e030      	b.n	80013d8 <CAM_GetRegister+0xe0>
	}


	ov_result = HAL_I2C_Master_Receive(&hi2c2, OV7670_ADDR_READ, pData, 1, 100);
 8001376:	2364      	movs	r3, #100	@ 0x64
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	2143      	movs	r1, #67	@ 0x43
 8001380:	4817      	ldr	r0, [pc, #92]	@ (80013e0 <CAM_GetRegister+0xe8>)
 8001382:	f005 fbbb 	bl	8006afc <HAL_I2C_Master_Receive>
 8001386:	4603      	mov	r3, r0
 8001388:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (ov_result) {
 800138c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001390:	2b00      	cmp	r3, #0
 8001392:	d020      	beq.n	80013d6 <CAM_GetRegister+0xde>
		if (haltOnError) {
 8001394:	79bb      	ldrb	r3, [r7, #6]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d01a      	beq.n	80013d0 <CAM_GetRegister+0xd8>
			sprintf(usb_msg, "RX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	461a      	mov	r2, r3
 800139e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80013a2:	f107 0008 	add.w	r0, r7, #8
 80013a6:	4910      	ldr	r1, [pc, #64]	@ (80013e8 <CAM_GetRegister+0xf0>)
 80013a8:	f014 f944 	bl	8015634 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7fe ff95 	bl	80002e0 <strlen>
 80013b6:	4602      	mov	r2, r0
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f013 fcb8 	bl	8014d34 <CDC_Transmit_FS>
				HAL_Delay(1000);
 80013c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013c8:	f001 f87c 	bl	80024c4 <HAL_Delay>
			while (1) {
 80013cc:	bf00      	nop
 80013ce:	e7ed      	b.n	80013ac <CAM_GetRegister+0xb4>
			}
		}
		return ov_result;
 80013d0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80013d4:	e000      	b.n	80013d8 <CAM_GetRegister+0xe0>
	}


	return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3770      	adds	r7, #112	@ 0x70
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	24000240 	.word	0x24000240
 80013e4:	08015fac 	.word	0x08015fac
 80013e8:	08015fe8 	.word	0x08015fe8

080013ec <CAM_SetRegister>:

HAL_StatusTypeDef CAM_SetRegister(uint8_t addr, uint8_t data, uint8_t haltOnError) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0a0      	sub	sp, #128	@ 0x80
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
 80013f6:	460b      	mov	r3, r1
 80013f8:	71bb      	strb	r3, [r7, #6]
 80013fa:	4613      	mov	r3, r2
 80013fc:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef ov_result;
	uint8_t usb_msg[100] = {0};
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	2264      	movs	r2, #100	@ 0x64
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f014 f936 	bl	8015678 <memset>

	uint8_t reg_set[2] = {addr, data};
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	733b      	strb	r3, [r7, #12]
 8001410:	79bb      	ldrb	r3, [r7, #6]
 8001412:	737b      	strb	r3, [r7, #13]

	ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_WRITE, reg_set, 2, 100);
 8001414:	f107 020c 	add.w	r2, r7, #12
 8001418:	2364      	movs	r3, #100	@ 0x64
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2302      	movs	r3, #2
 800141e:	2142      	movs	r1, #66	@ 0x42
 8001420:	4841      	ldr	r0, [pc, #260]	@ (8001528 <CAM_SetRegister+0x13c>)
 8001422:	f005 fa53 	bl	80068cc <HAL_I2C_Master_Transmit>
 8001426:	4603      	mov	r3, r0
 8001428:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (ov_result) {
 800142c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001430:	2b00      	cmp	r3, #0
 8001432:	d01f      	beq.n	8001474 <CAM_SetRegister+0x88>
		if (haltOnError) {
 8001434:	797b      	ldrb	r3, [r7, #5]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d019      	beq.n	800146e <CAM_SetRegister+0x82>
			sprintf(usb_msg, "TX ERROR: Cannot write camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 800143a:	79fa      	ldrb	r2, [r7, #7]
 800143c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001440:	f107 0010 	add.w	r0, r7, #16
 8001444:	4939      	ldr	r1, [pc, #228]	@ (800152c <CAM_SetRegister+0x140>)
 8001446:	f014 f8f5 	bl	8015634 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 800144a:	f107 0310 	add.w	r3, r7, #16
 800144e:	4618      	mov	r0, r3
 8001450:	f7fe ff46 	bl	80002e0 <strlen>
 8001454:	4602      	mov	r2, r0
 8001456:	f107 0310 	add.w	r3, r7, #16
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f013 fc69 	bl	8014d34 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8001462:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001466:	f001 f82d 	bl	80024c4 <HAL_Delay>
			while (1) {
 800146a:	bf00      	nop
 800146c:	e7ed      	b.n	800144a <CAM_SetRegister+0x5e>
			}
		}
		return ov_result;
 800146e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001472:	e054      	b.n	800151e <CAM_SetRegister+0x132>
	}

	// Confirm write
	uint8_t reg_get = 0x00;
 8001474:	2300      	movs	r3, #0
 8001476:	72fb      	strb	r3, [r7, #11]
	ov_result = CAM_GetRegister(addr, &reg_get, 1);
 8001478:	f107 010b 	add.w	r1, r7, #11
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	2201      	movs	r2, #1
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff39 	bl	80012f8 <CAM_GetRegister>
 8001486:	4603      	mov	r3, r0
 8001488:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (ov_result) {
 800148c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001490:	2b00      	cmp	r3, #0
 8001492:	d01f      	beq.n	80014d4 <CAM_SetRegister+0xe8>
		if (haltOnError) {
 8001494:	797b      	ldrb	r3, [r7, #5]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d019      	beq.n	80014ce <CAM_SetRegister+0xe2>
			sprintf(usb_msg, "CF ERROR: Cannot confirm camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 800149a:	79fa      	ldrb	r2, [r7, #7]
 800149c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80014a0:	f107 0010 	add.w	r0, r7, #16
 80014a4:	4922      	ldr	r1, [pc, #136]	@ (8001530 <CAM_SetRegister+0x144>)
 80014a6:	f014 f8c5 	bl	8015634 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7fe ff16 	bl	80002e0 <strlen>
 80014b4:	4602      	mov	r2, r0
 80014b6:	f107 0310 	add.w	r3, r7, #16
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f013 fc39 	bl	8014d34 <CDC_Transmit_FS>
				HAL_Delay(1000);
 80014c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014c6:	f000 fffd 	bl	80024c4 <HAL_Delay>
			while (1) {
 80014ca:	bf00      	nop
 80014cc:	e7ed      	b.n	80014aa <CAM_SetRegister+0xbe>
			}
		}
		else {
			return ov_result;
 80014ce:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80014d2:	e024      	b.n	800151e <CAM_SetRegister+0x132>
		}
	}

	if (reg_get != data) {
 80014d4:	7afb      	ldrb	r3, [r7, #11]
 80014d6:	79ba      	ldrb	r2, [r7, #6]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d01f      	beq.n	800151c <CAM_SetRegister+0x130>
		// Error, bad write
		if (haltOnError) {
 80014dc:	797b      	ldrb	r3, [r7, #5]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01a      	beq.n	8001518 <CAM_SetRegister+0x12c>
			sprintf(usb_msg, "CF ERROR: Bad write to register 0x%X - EXPECTED 0x%X, GOT 0x%X\r\n", addr, data, reg_get);
 80014e2:	79fa      	ldrb	r2, [r7, #7]
 80014e4:	79bb      	ldrb	r3, [r7, #6]
 80014e6:	7af9      	ldrb	r1, [r7, #11]
 80014e8:	f107 0010 	add.w	r0, r7, #16
 80014ec:	9100      	str	r1, [sp, #0]
 80014ee:	4911      	ldr	r1, [pc, #68]	@ (8001534 <CAM_SetRegister+0x148>)
 80014f0:	f014 f8a0 	bl	8015634 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7fe fef1 	bl	80002e0 <strlen>
 80014fe:	4602      	mov	r2, r0
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	4611      	mov	r1, r2
 8001506:	4618      	mov	r0, r3
 8001508:	f013 fc14 	bl	8014d34 <CDC_Transmit_FS>
				HAL_Delay(1000);
 800150c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001510:	f000 ffd8 	bl	80024c4 <HAL_Delay>
			while (1) {
 8001514:	bf00      	nop
 8001516:	e7ed      	b.n	80014f4 <CAM_SetRegister+0x108>
			}
		}
		return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <CAM_SetRegister+0x132>
	}

	return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3778      	adds	r7, #120	@ 0x78
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	24000240 	.word	0x24000240
 800152c:	08016024 	.word	0x08016024
 8001530:	08016060 	.word	0x08016060
 8001534:	0801609c 	.word	0x0801609c

08001538 <GenerateJPEGMCUBlock>:

// GENERATE JPEG MCU BLOCK
uint8_t GenerateJPEGMCUBlock() {
 8001538:	b480      	push	{r7}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
	if (jpeg_block >= JPEG_MCU_WIDTH*JPEG_MCU_HEIGHT) { return 1; }
 800153e:	4b40      	ldr	r3, [pc, #256]	@ (8001640 <GenerateJPEGMCUBlock+0x108>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b35      	cmp	r3, #53	@ 0x35
 8001544:	d901      	bls.n	800154a <GenerateJPEGMCUBlock+0x12>
 8001546:	2301      	movs	r3, #1
 8001548:	e06a      	b.n	8001620 <GenerateJPEGMCUBlock+0xe8>
	int xStart = (jpeg_block % JPEG_MCU_WIDTH) * 8;
 800154a:	4b3d      	ldr	r3, [pc, #244]	@ (8001640 <GenerateJPEGMCUBlock+0x108>)
 800154c:	6819      	ldr	r1, [r3, #0]
 800154e:	4b3d      	ldr	r3, [pc, #244]	@ (8001644 <GenerateJPEGMCUBlock+0x10c>)
 8001550:	fba3 2301 	umull	r2, r3, r3, r1
 8001554:	089a      	lsrs	r2, r3, #2
 8001556:	4613      	mov	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	1aca      	subs	r2, r1, r3
 8001560:	00d3      	lsls	r3, r2, #3
 8001562:	60bb      	str	r3, [r7, #8]
	int yStart = (jpeg_block / JPEG_MCU_WIDTH) * 8;
 8001564:	4b36      	ldr	r3, [pc, #216]	@ (8001640 <GenerateJPEGMCUBlock+0x108>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a36      	ldr	r2, [pc, #216]	@ (8001644 <GenerateJPEGMCUBlock+0x10c>)
 800156a:	fba2 2303 	umull	r2, r3, r2, r3
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	607b      	str	r3, [r7, #4]
	int i = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
	for (int y = yStart; y < yStart + 8; y++) {
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	e045      	b.n	800160a <GenerateJPEGMCUBlock+0xd2>
		for (int x = xStart; x < xStart + 8; x++) {
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	e03a      	b.n	80015fa <GenerateJPEGMCUBlock+0xc2>
			// Pad to 8x8
			if ((x*3.33) >= CAM_WIDTH) {
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	ee07 3a90 	vmov	s15, r3
 800158a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800158e:	ed9f 6b28 	vldr	d6, [pc, #160]	@ 8001630 <GenerateJPEGMCUBlock+0xf8>
 8001592:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001596:	ed9f 6b28 	vldr	d6, [pc, #160]	@ 8001638 <GenerateJPEGMCUBlock+0x100>
 800159a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a2:	db05      	blt.n	80015b0 <GenerateJPEGMCUBlock+0x78>
				jpeg_mcu[i] = 0x00;
 80015a4:	4a28      	ldr	r2, [pc, #160]	@ (8001648 <GenerateJPEGMCUBlock+0x110>)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	4413      	add	r3, r2
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
 80015ae:	e01e      	b.n	80015ee <GenerateJPEGMCUBlock+0xb6>
			} else {
				jpeg_mcu[i] = camera_mem[(uint16_t)(x*3.33) + (uint16_t)(y*2) * CAM_WIDTH];
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	ee07 3a90 	vmov	s15, r3
 80015b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80015ba:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8001630 <GenerateJPEGMCUBlock+0xf8>
 80015be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80015c6:	ee17 3a90 	vmov	r3, s15
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	461a      	mov	r2, r3
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	4619      	mov	r1, r3
 80015d8:	239e      	movs	r3, #158	@ 0x9e
 80015da:	fb01 f303 	mul.w	r3, r1, r3
 80015de:	4413      	add	r3, r2
 80015e0:	4a1a      	ldr	r2, [pc, #104]	@ (800164c <GenerateJPEGMCUBlock+0x114>)
 80015e2:	5cd1      	ldrb	r1, [r2, r3]
 80015e4:	4a18      	ldr	r2, [pc, #96]	@ (8001648 <GenerateJPEGMCUBlock+0x110>)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	4413      	add	r3, r2
 80015ea:	460a      	mov	r2, r1
 80015ec:	701a      	strb	r2, [r3, #0]
			}
			i++;
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	3301      	adds	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
		for (int x = xStart; x < xStart + 8; x++) {
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3301      	adds	r3, #1
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	3307      	adds	r3, #7
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	429a      	cmp	r2, r3
 8001602:	ddbf      	ble.n	8001584 <GenerateJPEGMCUBlock+0x4c>
	for (int y = yStart; y < yStart + 8; y++) {
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	3301      	adds	r3, #1
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3307      	adds	r3, #7
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	429a      	cmp	r2, r3
 8001612:	ddb4      	ble.n	800157e <GenerateJPEGMCUBlock+0x46>
		}
	}
	jpeg_block++;
 8001614:	4b0a      	ldr	r3, [pc, #40]	@ (8001640 <GenerateJPEGMCUBlock+0x108>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	4a09      	ldr	r2, [pc, #36]	@ (8001640 <GenerateJPEGMCUBlock+0x108>)
 800161c:	6013      	str	r3, [r2, #0]
	return 0;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	371c      	adds	r7, #28
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	f3af 8000 	nop.w
 8001630:	0a3d70a4 	.word	0x0a3d70a4
 8001634:	400aa3d7 	.word	0x400aa3d7
 8001638:	00000000 	.word	0x00000000
 800163c:	4063c000 	.word	0x4063c000
 8001640:	240051b4 	.word	0x240051b4
 8001644:	aaaaaaab 	.word	0xaaaaaaab
 8001648:	24005174 	.word	0x24005174
 800164c:	240006c4 	.word	0x240006c4

08001650 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001656:	463b      	mov	r3, r7
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001662:	f001 f86f 	bl	8002744 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001666:	2301      	movs	r3, #1
 8001668:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800166a:	2300      	movs	r3, #0
 800166c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001672:	231f      	movs	r3, #31
 8001674:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001676:	2387      	movs	r3, #135	@ 0x87
 8001678:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800167a:	2300      	movs	r3, #0
 800167c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800167e:	2300      	movs	r3, #0
 8001680:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001682:	2301      	movs	r3, #1
 8001684:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001686:	2301      	movs	r3, #1
 8001688:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001692:	463b      	mov	r3, r7
 8001694:	4618      	mov	r0, r3
 8001696:	f001 f88d 	bl	80027b4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800169a:	2004      	movs	r0, #4
 800169c:	f001 f86a 	bl	8002774 <HAL_MPU_Enable>

}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ac:	b672      	cpsid	i
}
 80016ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <Error_Handler+0x8>

080016b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <HAL_MspInit+0x30>)
 80016bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016c0:	4a08      	ldr	r2, [pc, #32]	@ (80016e4 <HAL_MspInit+0x30>)
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016ca:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <HAL_MspInit+0x30>)
 80016cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	58024400 	.word	0x58024400

080016e8 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08e      	sub	sp, #56	@ 0x38
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a79      	ldr	r2, [pc, #484]	@ (80018ec <HAL_DCMI_MspInit+0x204>)
 8001706:	4293      	cmp	r3, r2
 8001708:	f040 80ec 	bne.w	80018e4 <HAL_DCMI_MspInit+0x1fc>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800170c:	4b78      	ldr	r3, [pc, #480]	@ (80018f0 <HAL_DCMI_MspInit+0x208>)
 800170e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001712:	4a77      	ldr	r2, [pc, #476]	@ (80018f0 <HAL_DCMI_MspInit+0x208>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800171c:	4b74      	ldr	r3, [pc, #464]	@ (80018f0 <HAL_DCMI_MspInit+0x208>)
 800171e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	623b      	str	r3, [r7, #32]
 8001728:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800172a:	4b71      	ldr	r3, [pc, #452]	@ (80018f0 <HAL_DCMI_MspInit+0x208>)
 800172c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001730:	4a6f      	ldr	r2, [pc, #444]	@ (80018f0 <HAL_DCMI_MspInit+0x208>)
 8001732:	f043 0310 	orr.w	r3, r3, #16
 8001736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800173a:	4b6d      	ldr	r3, [pc, #436]	@ (80018f0 <HAL_DCMI_MspInit+0x208>)
 800173c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001740:	f003 0310 	and.w	r3, r3, #16
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	4b69      	ldr	r3, [pc, #420]	@ (80018f0 <HAL_DCMI_MspInit+0x208>)
 800174a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800174e:	4a68      	ldr	r2, [pc, #416]	@ (80018f0 <HAL_DCMI_MspInit+0x208>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001758:	4b65      	ldr	r3, [pc, #404]	@ (80018f0 <HAL_DCMI_MspInit+0x208>)
 800175a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	61bb      	str	r3, [r7, #24]
 8001764:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001766:	4b62      	ldr	r3, [pc, #392]	@ (80018f0 <HAL_DCMI_MspInit+0x208>)
 8001768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800176c:	4a60      	ldr	r2, [pc, #384]	@ (80018f0 <HAL_DCMI_MspInit+0x208>)
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001776:	4b5e      	ldr	r3, [pc, #376]	@ (80018f0 <HAL_DCMI_MspInit+0x208>)
 8001778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001784:	4b5a      	ldr	r3, [pc, #360]	@ (80018f0 <HAL_DCMI_MspInit+0x208>)
 8001786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800178a:	4a59      	ldr	r2, [pc, #356]	@ (80018f0 <HAL_DCMI_MspInit+0x208>)
 800178c:	f043 0308 	orr.w	r3, r3, #8
 8001790:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001794:	4b56      	ldr	r3, [pc, #344]	@ (80018f0 <HAL_DCMI_MspInit+0x208>)
 8001796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a2:	4b53      	ldr	r3, [pc, #332]	@ (80018f0 <HAL_DCMI_MspInit+0x208>)
 80017a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a8:	4a51      	ldr	r2, [pc, #324]	@ (80018f0 <HAL_DCMI_MspInit+0x208>)
 80017aa:	f043 0302 	orr.w	r3, r3, #2
 80017ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017b2:	4b4f      	ldr	r3, [pc, #316]	@ (80018f0 <HAL_DCMI_MspInit+0x208>)
 80017b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 80017c0:	2373      	movs	r3, #115	@ 0x73
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80017d0:	230d      	movs	r3, #13
 80017d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d8:	4619      	mov	r1, r3
 80017da:	4846      	ldr	r0, [pc, #280]	@ (80018f4 <HAL_DCMI_MspInit+0x20c>)
 80017dc:	f004 fe10 	bl	8006400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80017e0:	2350      	movs	r3, #80	@ 0x50
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80017f0:	230d      	movs	r3, #13
 80017f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f8:	4619      	mov	r1, r3
 80017fa:	483f      	ldr	r0, [pc, #252]	@ (80018f8 <HAL_DCMI_MspInit+0x210>)
 80017fc:	f004 fe00 	bl	8006400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001800:	23c0      	movs	r3, #192	@ 0xc0
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001810:	230d      	movs	r3, #13
 8001812:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001814:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001818:	4619      	mov	r1, r3
 800181a:	4838      	ldr	r0, [pc, #224]	@ (80018fc <HAL_DCMI_MspInit+0x214>)
 800181c:	f004 fdf0 	bl	8006400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001820:	2308      	movs	r3, #8
 8001822:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001830:	230d      	movs	r3, #13
 8001832:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001838:	4619      	mov	r1, r3
 800183a:	4831      	ldr	r0, [pc, #196]	@ (8001900 <HAL_DCMI_MspInit+0x218>)
 800183c:	f004 fde0 	bl	8006400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001840:	2380      	movs	r3, #128	@ 0x80
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001850:	230d      	movs	r3, #13
 8001852:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001858:	4619      	mov	r1, r3
 800185a:	482a      	ldr	r0, [pc, #168]	@ (8001904 <HAL_DCMI_MspInit+0x21c>)
 800185c:	f004 fdd0 	bl	8006400 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8001860:	4b29      	ldr	r3, [pc, #164]	@ (8001908 <HAL_DCMI_MspInit+0x220>)
 8001862:	4a2a      	ldr	r2, [pc, #168]	@ (800190c <HAL_DCMI_MspInit+0x224>)
 8001864:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8001866:	4b28      	ldr	r3, [pc, #160]	@ (8001908 <HAL_DCMI_MspInit+0x220>)
 8001868:	224b      	movs	r2, #75	@ 0x4b
 800186a:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800186c:	4b26      	ldr	r3, [pc, #152]	@ (8001908 <HAL_DCMI_MspInit+0x220>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001872:	4b25      	ldr	r3, [pc, #148]	@ (8001908 <HAL_DCMI_MspInit+0x220>)
 8001874:	2200      	movs	r2, #0
 8001876:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001878:	4b23      	ldr	r3, [pc, #140]	@ (8001908 <HAL_DCMI_MspInit+0x220>)
 800187a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800187e:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001880:	4b21      	ldr	r3, [pc, #132]	@ (8001908 <HAL_DCMI_MspInit+0x220>)
 8001882:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001886:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001888:	4b1f      	ldr	r3, [pc, #124]	@ (8001908 <HAL_DCMI_MspInit+0x220>)
 800188a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800188e:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8001890:	4b1d      	ldr	r3, [pc, #116]	@ (8001908 <HAL_DCMI_MspInit+0x220>)
 8001892:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001896:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001898:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <HAL_DCMI_MspInit+0x220>)
 800189a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800189e:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018a0:	4b19      	ldr	r3, [pc, #100]	@ (8001908 <HAL_DCMI_MspInit+0x220>)
 80018a2:	2204      	movs	r2, #4
 80018a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018a6:	4b18      	ldr	r3, [pc, #96]	@ (8001908 <HAL_DCMI_MspInit+0x220>)
 80018a8:	2203      	movs	r2, #3
 80018aa:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 80018ac:	4b16      	ldr	r3, [pc, #88]	@ (8001908 <HAL_DCMI_MspInit+0x220>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80018b2:	4b15      	ldr	r3, [pc, #84]	@ (8001908 <HAL_DCMI_MspInit+0x220>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80018b8:	4813      	ldr	r0, [pc, #76]	@ (8001908 <HAL_DCMI_MspInit+0x220>)
 80018ba:	f001 faa7 	bl	8002e0c <HAL_DMA_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_DCMI_MspInit+0x1e0>
    {
      Error_Handler();
 80018c4:	f7ff fef0 	bl	80016a8 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001908 <HAL_DCMI_MspInit+0x220>)
 80018cc:	649a      	str	r2, [r3, #72]	@ 0x48
 80018ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001908 <HAL_DCMI_MspInit+0x220>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2100      	movs	r1, #0
 80018d8:	204e      	movs	r0, #78	@ 0x4e
 80018da:	f000 fefe 	bl	80026da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80018de:	204e      	movs	r0, #78	@ 0x4e
 80018e0:	f000 ff15 	bl	800270e <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 80018e4:	bf00      	nop
 80018e6:	3738      	adds	r7, #56	@ 0x38
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	48020000 	.word	0x48020000
 80018f0:	58024400 	.word	0x58024400
 80018f4:	58021000 	.word	0x58021000
 80018f8:	58020000 	.word	0x58020000
 80018fc:	58020800 	.word	0x58020800
 8001900:	58020c00 	.word	0x58020c00
 8001904:	58020400 	.word	0x58020400
 8001908:	240001c8 	.word	0x240001c8
 800190c:	40020010 	.word	0x40020010

08001910 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b0ba      	sub	sp, #232	@ 0xe8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001928:	f107 0310 	add.w	r3, r7, #16
 800192c:	22c0      	movs	r2, #192	@ 0xc0
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f013 fea1 	bl	8015678 <memset>
  if(hi2c->Instance==I2C2)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a38      	ldr	r2, [pc, #224]	@ (8001a1c <HAL_I2C_MspInit+0x10c>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d169      	bne.n	8001a14 <HAL_I2C_MspInit+0x104>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001940:	f04f 0208 	mov.w	r2, #8
 8001944:	f04f 0300 	mov.w	r3, #0
 8001948:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 800194c:	2302      	movs	r3, #2
 800194e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 12;
 8001950:	230c      	movs	r3, #12
 8001952:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001954:	2302      	movs	r3, #2
 8001956:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001958:	2302      	movs	r3, #2
 800195a:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 800195c:	2303      	movs	r3, #3
 800195e:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001960:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001964:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001966:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800196a:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8001970:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001974:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001978:	f107 0310 	add.w	r3, r7, #16
 800197c:	4618      	mov	r0, r3
 800197e:	f00b fc03 	bl	800d188 <HAL_RCCEx_PeriphCLKConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_I2C_MspInit+0x7c>
    {
      Error_Handler();
 8001988:	f7ff fe8e 	bl	80016a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198c:	4b24      	ldr	r3, [pc, #144]	@ (8001a20 <HAL_I2C_MspInit+0x110>)
 800198e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001992:	4a23      	ldr	r2, [pc, #140]	@ (8001a20 <HAL_I2C_MspInit+0x110>)
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800199c:	4b20      	ldr	r3, [pc, #128]	@ (8001a20 <HAL_I2C_MspInit+0x110>)
 800199e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b2:	2312      	movs	r3, #18
 80019b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b8:	2301      	movs	r3, #1
 80019ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019c4:	2304      	movs	r3, #4
 80019c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019ce:	4619      	mov	r1, r3
 80019d0:	4814      	ldr	r0, [pc, #80]	@ (8001a24 <HAL_I2C_MspInit+0x114>)
 80019d2:	f004 fd15 	bl	8006400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019d6:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <HAL_I2C_MspInit+0x110>)
 80019d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019dc:	4a10      	ldr	r2, [pc, #64]	@ (8001a20 <HAL_I2C_MspInit+0x110>)
 80019de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a20 <HAL_I2C_MspInit+0x110>)
 80019e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2100      	movs	r1, #0
 80019f8:	2021      	movs	r0, #33	@ 0x21
 80019fa:	f000 fe6e 	bl	80026da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80019fe:	2021      	movs	r0, #33	@ 0x21
 8001a00:	f000 fe85 	bl	800270e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2100      	movs	r1, #0
 8001a08:	2022      	movs	r0, #34	@ 0x22
 8001a0a:	f000 fe66 	bl	80026da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001a0e:	2022      	movs	r0, #34	@ 0x22
 8001a10:	f000 fe7d 	bl	800270e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001a14:	bf00      	nop
 8001a16:	37e8      	adds	r7, #232	@ 0xe8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40005800 	.word	0x40005800
 8001a20:	58024400 	.word	0x58024400
 8001a24:	58020400 	.word	0x58020400

08001a28 <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a55      	ldr	r2, [pc, #340]	@ (8001b8c <HAL_JPEG_MspInit+0x164>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	f040 80a3 	bne.w	8001b82 <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001a3c:	4b54      	ldr	r3, [pc, #336]	@ (8001b90 <HAL_JPEG_MspInit+0x168>)
 8001a3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a42:	4a53      	ldr	r2, [pc, #332]	@ (8001b90 <HAL_JPEG_MspInit+0x168>)
 8001a44:	f043 0320 	orr.w	r3, r3, #32
 8001a48:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001a4c:	4b50      	ldr	r3, [pc, #320]	@ (8001b90 <HAL_JPEG_MspInit+0x168>)
 8001a4e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a52:	f003 0320 	and.w	r3, r3, #32
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 8001a5a:	4b4e      	ldr	r3, [pc, #312]	@ (8001b94 <HAL_JPEG_MspInit+0x16c>)
 8001a5c:	4a4e      	ldr	r2, [pc, #312]	@ (8001b98 <HAL_JPEG_MspInit+0x170>)
 8001a5e:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001a60:	4b4c      	ldr	r3, [pc, #304]	@ (8001b94 <HAL_JPEG_MspInit+0x16c>)
 8001a62:	2211      	movs	r2, #17
 8001a64:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001a66:	4b4b      	ldr	r3, [pc, #300]	@ (8001b94 <HAL_JPEG_MspInit+0x16c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001a6c:	4b49      	ldr	r3, [pc, #292]	@ (8001b94 <HAL_JPEG_MspInit+0x16c>)
 8001a6e:	2240      	movs	r2, #64	@ 0x40
 8001a70:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001a72:	4b48      	ldr	r3, [pc, #288]	@ (8001b94 <HAL_JPEG_MspInit+0x16c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8001a78:	4b46      	ldr	r3, [pc, #280]	@ (8001b94 <HAL_JPEG_MspInit+0x16c>)
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8001a7e:	4b45      	ldr	r3, [pc, #276]	@ (8001b94 <HAL_JPEG_MspInit+0x16c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8001a84:	4b43      	ldr	r3, [pc, #268]	@ (8001b94 <HAL_JPEG_MspInit+0x16c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001a8a:	4b42      	ldr	r3, [pc, #264]	@ (8001b94 <HAL_JPEG_MspInit+0x16c>)
 8001a8c:	2280      	movs	r2, #128	@ 0x80
 8001a8e:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001a90:	4b40      	ldr	r3, [pc, #256]	@ (8001b94 <HAL_JPEG_MspInit+0x16c>)
 8001a92:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a96:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001a98:	4b3e      	ldr	r3, [pc, #248]	@ (8001b94 <HAL_JPEG_MspInit+0x16c>)
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b94 <HAL_JPEG_MspInit+0x16c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001aa4:	4b3b      	ldr	r3, [pc, #236]	@ (8001b94 <HAL_JPEG_MspInit+0x16c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 8001aaa:	4b3a      	ldr	r3, [pc, #232]	@ (8001b94 <HAL_JPEG_MspInit+0x16c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8001ab0:	4b38      	ldr	r3, [pc, #224]	@ (8001b94 <HAL_JPEG_MspInit+0x16c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001ab6:	4837      	ldr	r0, [pc, #220]	@ (8001b94 <HAL_JPEG_MspInit+0x16c>)
 8001ab8:	f008 fcf4 	bl	800a4a4 <HAL_MDMA_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 8001ac2:	f7ff fdf1 	bl	80016a8 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4832      	ldr	r0, [pc, #200]	@ (8001b94 <HAL_JPEG_MspInit+0x16c>)
 8001acc:	f008 fd36 	bl	800a53c <HAL_MDMA_ConfigPostRequestMask>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 8001ad6:	f7ff fde7 	bl	80016a8 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a2d      	ldr	r2, [pc, #180]	@ (8001b94 <HAL_JPEG_MspInit+0x16c>)
 8001ade:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ae0:	4a2c      	ldr	r2, [pc, #176]	@ (8001b94 <HAL_JPEG_MspInit+0x16c>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b9c <HAL_JPEG_MspInit+0x174>)
 8001ae8:	4a2d      	ldr	r2, [pc, #180]	@ (8001ba0 <HAL_JPEG_MspInit+0x178>)
 8001aea:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 8001aec:	4b2b      	ldr	r3, [pc, #172]	@ (8001b9c <HAL_JPEG_MspInit+0x174>)
 8001aee:	2214      	movs	r2, #20
 8001af0:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001af2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b9c <HAL_JPEG_MspInit+0x174>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001af8:	4b28      	ldr	r3, [pc, #160]	@ (8001b9c <HAL_JPEG_MspInit+0x174>)
 8001afa:	2240      	movs	r2, #64	@ 0x40
 8001afc:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001afe:	4b27      	ldr	r3, [pc, #156]	@ (8001b9c <HAL_JPEG_MspInit+0x174>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001b04:	4b25      	ldr	r3, [pc, #148]	@ (8001b9c <HAL_JPEG_MspInit+0x174>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8001b0a:	4b24      	ldr	r3, [pc, #144]	@ (8001b9c <HAL_JPEG_MspInit+0x174>)
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001b10:	4b22      	ldr	r3, [pc, #136]	@ (8001b9c <HAL_JPEG_MspInit+0x174>)
 8001b12:	2220      	movs	r2, #32
 8001b14:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8001b16:	4b21      	ldr	r3, [pc, #132]	@ (8001b9c <HAL_JPEG_MspInit+0x174>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b9c <HAL_JPEG_MspInit+0x174>)
 8001b1e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b22:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 8001b24:	4b1d      	ldr	r3, [pc, #116]	@ (8001b9c <HAL_JPEG_MspInit+0x174>)
 8001b26:	2204      	movs	r2, #4
 8001b28:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b9c <HAL_JPEG_MspInit+0x174>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001b30:	4b1a      	ldr	r3, [pc, #104]	@ (8001b9c <HAL_JPEG_MspInit+0x174>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 8001b36:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <HAL_JPEG_MspInit+0x174>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 8001b3c:	4b17      	ldr	r3, [pc, #92]	@ (8001b9c <HAL_JPEG_MspInit+0x174>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 8001b42:	4816      	ldr	r0, [pc, #88]	@ (8001b9c <HAL_JPEG_MspInit+0x174>)
 8001b44:	f008 fcae 	bl	800a4a4 <HAL_MDMA_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 8001b4e:	f7ff fdab 	bl	80016a8 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	4811      	ldr	r0, [pc, #68]	@ (8001b9c <HAL_JPEG_MspInit+0x174>)
 8001b58:	f008 fcf0 	bl	800a53c <HAL_MDMA_ConfigPostRequestMask>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 8001b62:	f7ff fda1 	bl	80016a8 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a0c      	ldr	r2, [pc, #48]	@ (8001b9c <HAL_JPEG_MspInit+0x174>)
 8001b6a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b6c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b9c <HAL_JPEG_MspInit+0x174>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	2079      	movs	r0, #121	@ 0x79
 8001b78:	f000 fdaf 	bl	80026da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001b7c:	2079      	movs	r0, #121	@ 0x79
 8001b7e:	f000 fdc6 	bl	800270e <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	52003000 	.word	0x52003000
 8001b90:	58024400 	.word	0x58024400
 8001b94:	240002ec 	.word	0x240002ec
 8001b98:	52000040 	.word	0x52000040
 8001b9c:	24000358 	.word	0x24000358
 8001ba0:	52000080 	.word	0x52000080

08001ba4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b0bc      	sub	sp, #240	@ 0xf0
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bbc:	f107 0318 	add.w	r3, r7, #24
 8001bc0:	22c0      	movs	r2, #192	@ 0xc0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f013 fd57 	bl	8015678 <memset>
  if(hspi->Instance==SPI2)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a38      	ldr	r2, [pc, #224]	@ (8001cb0 <HAL_SPI_MspInit+0x10c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d169      	bne.n	8001ca8 <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001bd4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001be4:	f107 0318 	add.w	r3, r7, #24
 8001be8:	4618      	mov	r0, r3
 8001bea:	f00b facd 	bl	800d188 <HAL_RCCEx_PeriphCLKConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001bf4:	f7ff fd58 	bl	80016a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb4 <HAL_SPI_MspInit+0x110>)
 8001bfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bfe:	4a2d      	ldr	r2, [pc, #180]	@ (8001cb4 <HAL_SPI_MspInit+0x110>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c04:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c08:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb4 <HAL_SPI_MspInit+0x110>)
 8001c0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c16:	4b27      	ldr	r3, [pc, #156]	@ (8001cb4 <HAL_SPI_MspInit+0x110>)
 8001c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c1c:	4a25      	ldr	r2, [pc, #148]	@ (8001cb4 <HAL_SPI_MspInit+0x110>)
 8001c1e:	f043 0304 	orr.w	r3, r3, #4
 8001c22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c26:	4b23      	ldr	r3, [pc, #140]	@ (8001cb4 <HAL_SPI_MspInit+0x110>)
 8001c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c34:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb4 <HAL_SPI_MspInit+0x110>)
 8001c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb4 <HAL_SPI_MspInit+0x110>)
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c44:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <HAL_SPI_MspInit+0x110>)
 8001c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001c52:	2306      	movs	r3, #6
 8001c54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c6a:	2305      	movs	r3, #5
 8001c6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c70:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c74:	4619      	mov	r1, r3
 8001c76:	4810      	ldr	r0, [pc, #64]	@ (8001cb8 <HAL_SPI_MspInit+0x114>)
 8001c78:	f004 fbc2 	bl	8006400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c80:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c96:	2305      	movs	r3, #5
 8001c98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4806      	ldr	r0, [pc, #24]	@ (8001cbc <HAL_SPI_MspInit+0x118>)
 8001ca4:	f004 fbac 	bl	8006400 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001ca8:	bf00      	nop
 8001caa:	37f0      	adds	r7, #240	@ 0xf0
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40003800 	.word	0x40003800
 8001cb4:	58024400 	.word	0x58024400
 8001cb8:	58020800 	.word	0x58020800
 8001cbc:	58020400 	.word	0x58020400

08001cc0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8001d7c <HAL_TIM_PWM_MspInit+0xbc>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d10f      	bne.n	8001cf2 <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d80 <HAL_TIM_PWM_MspInit+0xc0>)
 8001cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cd8:	4a29      	ldr	r2, [pc, #164]	@ (8001d80 <HAL_TIM_PWM_MspInit+0xc0>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ce2:	4b27      	ldr	r3, [pc, #156]	@ (8001d80 <HAL_TIM_PWM_MspInit+0xc0>)
 8001ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001cf0:	e03d      	b.n	8001d6e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cfa:	d10f      	bne.n	8001d1c <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cfc:	4b20      	ldr	r3, [pc, #128]	@ (8001d80 <HAL_TIM_PWM_MspInit+0xc0>)
 8001cfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d02:	4a1f      	ldr	r2, [pc, #124]	@ (8001d80 <HAL_TIM_PWM_MspInit+0xc0>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001d80 <HAL_TIM_PWM_MspInit+0xc0>)
 8001d0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]
}
 8001d1a:	e028      	b.n	8001d6e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a18      	ldr	r2, [pc, #96]	@ (8001d84 <HAL_TIM_PWM_MspInit+0xc4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d10f      	bne.n	8001d46 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d26:	4b16      	ldr	r3, [pc, #88]	@ (8001d80 <HAL_TIM_PWM_MspInit+0xc0>)
 8001d28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d2c:	4a14      	ldr	r2, [pc, #80]	@ (8001d80 <HAL_TIM_PWM_MspInit+0xc0>)
 8001d2e:	f043 0302 	orr.w	r3, r3, #2
 8001d32:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d36:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <HAL_TIM_PWM_MspInit+0xc0>)
 8001d38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	e013      	b.n	8001d6e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d88 <HAL_TIM_PWM_MspInit+0xc8>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d10e      	bne.n	8001d6e <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d50:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <HAL_TIM_PWM_MspInit+0xc0>)
 8001d52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d56:	4a0a      	ldr	r2, [pc, #40]	@ (8001d80 <HAL_TIM_PWM_MspInit+0xc0>)
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d60:	4b07      	ldr	r3, [pc, #28]	@ (8001d80 <HAL_TIM_PWM_MspInit+0xc0>)
 8001d62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
}
 8001d6e:	bf00      	nop
 8001d70:	371c      	adds	r7, #28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	58024400 	.word	0x58024400
 8001d84:	40000400 	.word	0x40000400
 8001d88:	40000800 	.word	0x40000800

08001d8c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0e      	ldr	r2, [pc, #56]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x48>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d116      	bne.n	8001dcc <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x4c>)
 8001da0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001da4:	4a0c      	ldr	r2, [pc, #48]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x4c>)
 8001da6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001daa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001dae:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x4c>)
 8001db0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	202d      	movs	r0, #45	@ 0x2d
 8001dc2:	f000 fc8a 	bl	80026da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001dc6:	202d      	movs	r0, #45	@ 0x2d
 8001dc8:	f000 fca1 	bl	800270e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001dcc:	bf00      	nop
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40002000 	.word	0x40002000
 8001dd8:	58024400 	.word	0x58024400

08001ddc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08c      	sub	sp, #48	@ 0x30
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a5d      	ldr	r2, [pc, #372]	@ (8001f70 <HAL_TIM_MspPostInit+0x194>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d120      	bne.n	8001e40 <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dfe:	4b5d      	ldr	r3, [pc, #372]	@ (8001f74 <HAL_TIM_MspPostInit+0x198>)
 8001e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e04:	4a5b      	ldr	r2, [pc, #364]	@ (8001f74 <HAL_TIM_MspPostInit+0x198>)
 8001e06:	f043 0310 	orr.w	r3, r3, #16
 8001e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e0e:	4b59      	ldr	r3, [pc, #356]	@ (8001f74 <HAL_TIM_MspPostInit+0x198>)
 8001e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001e1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e32:	f107 031c 	add.w	r3, r7, #28
 8001e36:	4619      	mov	r1, r3
 8001e38:	484f      	ldr	r0, [pc, #316]	@ (8001f78 <HAL_TIM_MspPostInit+0x19c>)
 8001e3a:	f004 fae1 	bl	8006400 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001e3e:	e093      	b.n	8001f68 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e48:	d11f      	bne.n	8001e8a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8001f74 <HAL_TIM_MspPostInit+0x198>)
 8001e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e50:	4a48      	ldr	r2, [pc, #288]	@ (8001f74 <HAL_TIM_MspPostInit+0x198>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e5a:	4b46      	ldr	r3, [pc, #280]	@ (8001f74 <HAL_TIM_MspPostInit+0x198>)
 8001e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e68:	2307      	movs	r3, #7
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	2300      	movs	r3, #0
 8001e76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	4619      	mov	r1, r3
 8001e82:	483e      	ldr	r0, [pc, #248]	@ (8001f7c <HAL_TIM_MspPostInit+0x1a0>)
 8001e84:	f004 fabc 	bl	8006400 <HAL_GPIO_Init>
}
 8001e88:	e06e      	b.n	8001f68 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM3)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a3c      	ldr	r2, [pc, #240]	@ (8001f80 <HAL_TIM_MspPostInit+0x1a4>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d11f      	bne.n	8001ed4 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e94:	4b37      	ldr	r3, [pc, #220]	@ (8001f74 <HAL_TIM_MspPostInit+0x198>)
 8001e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9a:	4a36      	ldr	r2, [pc, #216]	@ (8001f74 <HAL_TIM_MspPostInit+0x198>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ea4:	4b33      	ldr	r3, [pc, #204]	@ (8001f74 <HAL_TIM_MspPostInit+0x198>)
 8001ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec6:	f107 031c 	add.w	r3, r7, #28
 8001eca:	4619      	mov	r1, r3
 8001ecc:	482d      	ldr	r0, [pc, #180]	@ (8001f84 <HAL_TIM_MspPostInit+0x1a8>)
 8001ece:	f004 fa97 	bl	8006400 <HAL_GPIO_Init>
}
 8001ed2:	e049      	b.n	8001f68 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM4)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a2b      	ldr	r2, [pc, #172]	@ (8001f88 <HAL_TIM_MspPostInit+0x1ac>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d120      	bne.n	8001f20 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ede:	4b25      	ldr	r3, [pc, #148]	@ (8001f74 <HAL_TIM_MspPostInit+0x198>)
 8001ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ee4:	4a23      	ldr	r2, [pc, #140]	@ (8001f74 <HAL_TIM_MspPostInit+0x198>)
 8001ee6:	f043 0302 	orr.w	r3, r3, #2
 8001eea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eee:	4b21      	ldr	r3, [pc, #132]	@ (8001f74 <HAL_TIM_MspPostInit+0x198>)
 8001ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001efc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f12:	f107 031c 	add.w	r3, r7, #28
 8001f16:	4619      	mov	r1, r3
 8001f18:	481a      	ldr	r0, [pc, #104]	@ (8001f84 <HAL_TIM_MspPostInit+0x1a8>)
 8001f1a:	f004 fa71 	bl	8006400 <HAL_GPIO_Init>
}
 8001f1e:	e023      	b.n	8001f68 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM14)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a19      	ldr	r2, [pc, #100]	@ (8001f8c <HAL_TIM_MspPostInit+0x1b0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d11e      	bne.n	8001f68 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2a:	4b12      	ldr	r3, [pc, #72]	@ (8001f74 <HAL_TIM_MspPostInit+0x198>)
 8001f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f30:	4a10      	ldr	r2, [pc, #64]	@ (8001f74 <HAL_TIM_MspPostInit+0x198>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <HAL_TIM_MspPostInit+0x198>)
 8001f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f48:	2380      	movs	r3, #128	@ 0x80
 8001f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f54:	2300      	movs	r3, #0
 8001f56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001f58:	2309      	movs	r3, #9
 8001f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5c:	f107 031c 	add.w	r3, r7, #28
 8001f60:	4619      	mov	r1, r3
 8001f62:	4806      	ldr	r0, [pc, #24]	@ (8001f7c <HAL_TIM_MspPostInit+0x1a0>)
 8001f64:	f004 fa4c 	bl	8006400 <HAL_GPIO_Init>
}
 8001f68:	bf00      	nop
 8001f6a:	3730      	adds	r7, #48	@ 0x30
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40010000 	.word	0x40010000
 8001f74:	58024400 	.word	0x58024400
 8001f78:	58021000 	.word	0x58021000
 8001f7c:	58020000 	.word	0x58020000
 8001f80:	40000400 	.word	0x40000400
 8001f84:	58020400 	.word	0x58020400
 8001f88:	40000800 	.word	0x40000800
 8001f8c:	40002000 	.word	0x40002000

08001f90 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b0ba      	sub	sp, #232	@ 0xe8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fa8:	f107 0310 	add.w	r3, r7, #16
 8001fac:	22c0      	movs	r2, #192	@ 0xc0
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f013 fb61 	bl	8015678 <memset>
  if(huart->Instance==USART1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a27      	ldr	r2, [pc, #156]	@ (8002058 <HAL_UART_MspInit+0xc8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d146      	bne.n	800204e <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fc0:	f04f 0201 	mov.w	r2, #1
 8001fc4:	f04f 0300 	mov.w	r3, #0
 8001fc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fd2:	f107 0310 	add.w	r3, r7, #16
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f00b f8d6 	bl	800d188 <HAL_RCCEx_PeriphCLKConfig>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001fe2:	f7ff fb61 	bl	80016a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800205c <HAL_UART_MspInit+0xcc>)
 8001fe8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fec:	4a1b      	ldr	r2, [pc, #108]	@ (800205c <HAL_UART_MspInit+0xcc>)
 8001fee:	f043 0310 	orr.w	r3, r3, #16
 8001ff2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ff6:	4b19      	ldr	r3, [pc, #100]	@ (800205c <HAL_UART_MspInit+0xcc>)
 8001ff8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ffc:	f003 0310 	and.w	r3, r3, #16
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002004:	4b15      	ldr	r3, [pc, #84]	@ (800205c <HAL_UART_MspInit+0xcc>)
 8002006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800200a:	4a14      	ldr	r2, [pc, #80]	@ (800205c <HAL_UART_MspInit+0xcc>)
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002014:	4b11      	ldr	r3, [pc, #68]	@ (800205c <HAL_UART_MspInit+0xcc>)
 8002016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002022:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002026:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	2300      	movs	r3, #0
 8002038:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800203c:	2304      	movs	r3, #4
 800203e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002042:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002046:	4619      	mov	r1, r3
 8002048:	4805      	ldr	r0, [pc, #20]	@ (8002060 <HAL_UART_MspInit+0xd0>)
 800204a:	f004 f9d9 	bl	8006400 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800204e:	bf00      	nop
 8002050:	37e8      	adds	r7, #232	@ 0xe8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40011000 	.word	0x40011000
 800205c:	58024400 	.word	0x58024400
 8002060:	58020400 	.word	0x58020400

08002064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <NMI_Handler+0x4>

0800206c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <HardFault_Handler+0x4>

08002074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002078:	bf00      	nop
 800207a:	e7fd      	b.n	8002078 <MemManage_Handler+0x4>

0800207c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <BusFault_Handler+0x4>

08002084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002088:	bf00      	nop
 800208a:	e7fd      	b.n	8002088 <UsageFault_Handler+0x4>

0800208c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ba:	f000 f9e3 	bl	8002484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80020c8:	4802      	ldr	r0, [pc, #8]	@ (80020d4 <DMA1_Stream0_IRQHandler+0x10>)
 80020ca:	f002 f9c9 	bl	8004460 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	240001c8 	.word	0x240001c8

080020d8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80020dc:	4802      	ldr	r0, [pc, #8]	@ (80020e8 <I2C2_EV_IRQHandler+0x10>)
 80020de:	f004 fe03 	bl	8006ce8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	24000240 	.word	0x24000240

080020ec <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80020f0:	4802      	ldr	r0, [pc, #8]	@ (80020fc <I2C2_ER_IRQHandler+0x10>)
 80020f2:	f004 fe13 	bl	8006d1c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	24000240 	.word	0x24000240

08002100 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002104:	4802      	ldr	r0, [pc, #8]	@ (8002110 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002106:	f00d f967 	bl	800f3d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2400057c 	.word	0x2400057c

08002114 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002118:	4802      	ldr	r0, [pc, #8]	@ (8002124 <DCMI_IRQHandler+0x10>)
 800211a:	f000 fd27 	bl	8002b6c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	24000178 	.word	0x24000178

08002128 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800212c:	4802      	ldr	r0, [pc, #8]	@ (8002138 <OTG_FS_IRQHandler+0x10>)
 800212e:	f008 fe9c 	bl	800ae6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2400b19c 	.word	0x2400b19c

0800213c <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8002140:	4802      	ldr	r0, [pc, #8]	@ (800214c <JPEG_IRQHandler+0x10>)
 8002142:	f006 fbb8 	bl	80088b6 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	24000294 	.word	0x24000294

08002150 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8002154:	4803      	ldr	r0, [pc, #12]	@ (8002164 <MDMA_IRQHandler+0x14>)
 8002156:	f008 faeb 	bl	800a730 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 800215a:	4803      	ldr	r0, [pc, #12]	@ (8002168 <MDMA_IRQHandler+0x18>)
 800215c:	f008 fae8 	bl	800a730 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}
 8002164:	240002ec 	.word	0x240002ec
 8002168:	24000358 	.word	0x24000358

0800216c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002174:	4a14      	ldr	r2, [pc, #80]	@ (80021c8 <_sbrk+0x5c>)
 8002176:	4b15      	ldr	r3, [pc, #84]	@ (80021cc <_sbrk+0x60>)
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002180:	4b13      	ldr	r3, [pc, #76]	@ (80021d0 <_sbrk+0x64>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002188:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <_sbrk+0x64>)
 800218a:	4a12      	ldr	r2, [pc, #72]	@ (80021d4 <_sbrk+0x68>)
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800218e:	4b10      	ldr	r3, [pc, #64]	@ (80021d0 <_sbrk+0x64>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	429a      	cmp	r2, r3
 800219a:	d207      	bcs.n	80021ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800219c:	f013 fa74 	bl	8015688 <__errno>
 80021a0:	4603      	mov	r3, r0
 80021a2:	220c      	movs	r2, #12
 80021a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
 80021aa:	e009      	b.n	80021c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ac:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021b2:	4b07      	ldr	r3, [pc, #28]	@ (80021d0 <_sbrk+0x64>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	4a05      	ldr	r2, [pc, #20]	@ (80021d0 <_sbrk+0x64>)
 80021bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021be:	68fb      	ldr	r3, [r7, #12]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	24080000 	.word	0x24080000
 80021cc:	00000400 	.word	0x00000400
 80021d0:	24009cb0 	.word	0x24009cb0
 80021d4:	2400b9e8 	.word	0x2400b9e8

080021d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021dc:	4b43      	ldr	r3, [pc, #268]	@ (80022ec <SystemInit+0x114>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e2:	4a42      	ldr	r2, [pc, #264]	@ (80022ec <SystemInit+0x114>)
 80021e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021ec:	4b40      	ldr	r3, [pc, #256]	@ (80022f0 <SystemInit+0x118>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	2b06      	cmp	r3, #6
 80021f6:	d807      	bhi.n	8002208 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80021f8:	4b3d      	ldr	r3, [pc, #244]	@ (80022f0 <SystemInit+0x118>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f023 030f 	bic.w	r3, r3, #15
 8002200:	4a3b      	ldr	r2, [pc, #236]	@ (80022f0 <SystemInit+0x118>)
 8002202:	f043 0307 	orr.w	r3, r3, #7
 8002206:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002208:	4b3a      	ldr	r3, [pc, #232]	@ (80022f4 <SystemInit+0x11c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a39      	ldr	r2, [pc, #228]	@ (80022f4 <SystemInit+0x11c>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002214:	4b37      	ldr	r3, [pc, #220]	@ (80022f4 <SystemInit+0x11c>)
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800221a:	4b36      	ldr	r3, [pc, #216]	@ (80022f4 <SystemInit+0x11c>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4935      	ldr	r1, [pc, #212]	@ (80022f4 <SystemInit+0x11c>)
 8002220:	4b35      	ldr	r3, [pc, #212]	@ (80022f8 <SystemInit+0x120>)
 8002222:	4013      	ands	r3, r2
 8002224:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002226:	4b32      	ldr	r3, [pc, #200]	@ (80022f0 <SystemInit+0x118>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002232:	4b2f      	ldr	r3, [pc, #188]	@ (80022f0 <SystemInit+0x118>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 030f 	bic.w	r3, r3, #15
 800223a:	4a2d      	ldr	r2, [pc, #180]	@ (80022f0 <SystemInit+0x118>)
 800223c:	f043 0307 	orr.w	r3, r3, #7
 8002240:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002242:	4b2c      	ldr	r3, [pc, #176]	@ (80022f4 <SystemInit+0x11c>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002248:	4b2a      	ldr	r3, [pc, #168]	@ (80022f4 <SystemInit+0x11c>)
 800224a:	2200      	movs	r2, #0
 800224c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800224e:	4b29      	ldr	r3, [pc, #164]	@ (80022f4 <SystemInit+0x11c>)
 8002250:	2200      	movs	r2, #0
 8002252:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002254:	4b27      	ldr	r3, [pc, #156]	@ (80022f4 <SystemInit+0x11c>)
 8002256:	4a29      	ldr	r2, [pc, #164]	@ (80022fc <SystemInit+0x124>)
 8002258:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800225a:	4b26      	ldr	r3, [pc, #152]	@ (80022f4 <SystemInit+0x11c>)
 800225c:	4a28      	ldr	r2, [pc, #160]	@ (8002300 <SystemInit+0x128>)
 800225e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002260:	4b24      	ldr	r3, [pc, #144]	@ (80022f4 <SystemInit+0x11c>)
 8002262:	4a28      	ldr	r2, [pc, #160]	@ (8002304 <SystemInit+0x12c>)
 8002264:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002266:	4b23      	ldr	r3, [pc, #140]	@ (80022f4 <SystemInit+0x11c>)
 8002268:	2200      	movs	r2, #0
 800226a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800226c:	4b21      	ldr	r3, [pc, #132]	@ (80022f4 <SystemInit+0x11c>)
 800226e:	4a25      	ldr	r2, [pc, #148]	@ (8002304 <SystemInit+0x12c>)
 8002270:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002272:	4b20      	ldr	r3, [pc, #128]	@ (80022f4 <SystemInit+0x11c>)
 8002274:	2200      	movs	r2, #0
 8002276:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002278:	4b1e      	ldr	r3, [pc, #120]	@ (80022f4 <SystemInit+0x11c>)
 800227a:	4a22      	ldr	r2, [pc, #136]	@ (8002304 <SystemInit+0x12c>)
 800227c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800227e:	4b1d      	ldr	r3, [pc, #116]	@ (80022f4 <SystemInit+0x11c>)
 8002280:	2200      	movs	r2, #0
 8002282:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002284:	4b1b      	ldr	r3, [pc, #108]	@ (80022f4 <SystemInit+0x11c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a1a      	ldr	r2, [pc, #104]	@ (80022f4 <SystemInit+0x11c>)
 800228a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800228e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002290:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <SystemInit+0x11c>)
 8002292:	2200      	movs	r2, #0
 8002294:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002296:	4b1c      	ldr	r3, [pc, #112]	@ (8002308 <SystemInit+0x130>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4b1c      	ldr	r3, [pc, #112]	@ (800230c <SystemInit+0x134>)
 800229c:	4013      	ands	r3, r2
 800229e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022a2:	d202      	bcs.n	80022aa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80022a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002310 <SystemInit+0x138>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80022aa:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <SystemInit+0x11c>)
 80022ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d113      	bne.n	80022e0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80022b8:	4b0e      	ldr	r3, [pc, #56]	@ (80022f4 <SystemInit+0x11c>)
 80022ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022be:	4a0d      	ldr	r2, [pc, #52]	@ (80022f4 <SystemInit+0x11c>)
 80022c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022c4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80022c8:	4b12      	ldr	r3, [pc, #72]	@ (8002314 <SystemInit+0x13c>)
 80022ca:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80022ce:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80022d0:	4b08      	ldr	r3, [pc, #32]	@ (80022f4 <SystemInit+0x11c>)
 80022d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022d6:	4a07      	ldr	r2, [pc, #28]	@ (80022f4 <SystemInit+0x11c>)
 80022d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000ed00 	.word	0xe000ed00
 80022f0:	52002000 	.word	0x52002000
 80022f4:	58024400 	.word	0x58024400
 80022f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80022fc:	02020200 	.word	0x02020200
 8002300:	01ff0000 	.word	0x01ff0000
 8002304:	01010280 	.word	0x01010280
 8002308:	5c001000 	.word	0x5c001000
 800230c:	ffff0000 	.word	0xffff0000
 8002310:	51008108 	.word	0x51008108
 8002314:	52004000 	.word	0x52004000

08002318 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800231c:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <ExitRun0Mode+0x2c>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4a08      	ldr	r2, [pc, #32]	@ (8002344 <ExitRun0Mode+0x2c>)
 8002322:	f043 0302 	orr.w	r3, r3, #2
 8002326:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002328:	bf00      	nop
 800232a:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <ExitRun0Mode+0x2c>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f9      	beq.n	800232a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002336:	bf00      	nop
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	58024800 	.word	0x58024800

08002348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002348:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002384 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800234c:	f7ff ffe4 	bl	8002318 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002350:	f7ff ff42 	bl	80021d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002354:	480c      	ldr	r0, [pc, #48]	@ (8002388 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002356:	490d      	ldr	r1, [pc, #52]	@ (800238c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002358:	4a0d      	ldr	r2, [pc, #52]	@ (8002390 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800235a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800235c:	e002      	b.n	8002364 <LoopCopyDataInit>

0800235e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800235e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002362:	3304      	adds	r3, #4

08002364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002368:	d3f9      	bcc.n	800235e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800236a:	4a0a      	ldr	r2, [pc, #40]	@ (8002394 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800236c:	4c0a      	ldr	r4, [pc, #40]	@ (8002398 <LoopFillZerobss+0x22>)
  movs r3, #0
 800236e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002370:	e001      	b.n	8002376 <LoopFillZerobss>

08002372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002374:	3204      	adds	r2, #4

08002376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002378:	d3fb      	bcc.n	8002372 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800237a:	f013 f98b 	bl	8015694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800237e:	f7fe f99d 	bl	80006bc <main>
  bx  lr
 8002382:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002384:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002388:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800238c:	2400015c 	.word	0x2400015c
  ldr r2, =_sidata
 8002390:	0801640c 	.word	0x0801640c
  ldr r2, =_sbss
 8002394:	2400015c 	.word	0x2400015c
  ldr r4, =_ebss
 8002398:	2400b9e8 	.word	0x2400b9e8

0800239c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800239c:	e7fe      	b.n	800239c <ADC3_IRQHandler>
	...

080023a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a6:	2003      	movs	r0, #3
 80023a8:	f000 f98c 	bl	80026c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023ac:	f00a fd16 	bl	800cddc <HAL_RCC_GetSysClockFreq>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b15      	ldr	r3, [pc, #84]	@ (8002408 <HAL_Init+0x68>)
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	0a1b      	lsrs	r3, r3, #8
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	4913      	ldr	r1, [pc, #76]	@ (800240c <HAL_Init+0x6c>)
 80023be:	5ccb      	ldrb	r3, [r1, r3]
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	fa22 f303 	lsr.w	r3, r2, r3
 80023c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002408 <HAL_Init+0x68>)
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	4a0e      	ldr	r2, [pc, #56]	@ (800240c <HAL_Init+0x6c>)
 80023d4:	5cd3      	ldrb	r3, [r2, r3]
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
 80023e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002410 <HAL_Init+0x70>)
 80023e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002414 <HAL_Init+0x74>)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023ea:	200f      	movs	r0, #15
 80023ec:	f000 f814 	bl	8002418 <HAL_InitTick>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e002      	b.n	8002400 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80023fa:	f7ff f95b 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	58024400 	.word	0x58024400
 800240c:	08016128 	.word	0x08016128
 8002410:	2400000c 	.word	0x2400000c
 8002414:	24000008 	.word	0x24000008

08002418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002420:	4b15      	ldr	r3, [pc, #84]	@ (8002478 <HAL_InitTick+0x60>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e021      	b.n	8002470 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800242c:	4b13      	ldr	r3, [pc, #76]	@ (800247c <HAL_InitTick+0x64>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4b11      	ldr	r3, [pc, #68]	@ (8002478 <HAL_InitTick+0x60>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	4619      	mov	r1, r3
 8002436:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800243a:	fbb3 f3f1 	udiv	r3, r3, r1
 800243e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002442:	4618      	mov	r0, r3
 8002444:	f000 f971 	bl	800272a <HAL_SYSTICK_Config>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e00e      	b.n	8002470 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b0f      	cmp	r3, #15
 8002456:	d80a      	bhi.n	800246e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002458:	2200      	movs	r2, #0
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	f04f 30ff 	mov.w	r0, #4294967295
 8002460:	f000 f93b 	bl	80026da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002464:	4a06      	ldr	r2, [pc, #24]	@ (8002480 <HAL_InitTick+0x68>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	e000      	b.n	8002470 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	24000014 	.word	0x24000014
 800247c:	24000008 	.word	0x24000008
 8002480:	24000010 	.word	0x24000010

08002484 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002488:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <HAL_IncTick+0x20>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <HAL_IncTick+0x24>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4413      	add	r3, r2
 8002494:	4a04      	ldr	r2, [pc, #16]	@ (80024a8 <HAL_IncTick+0x24>)
 8002496:	6013      	str	r3, [r2, #0]
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	24000014 	.word	0x24000014
 80024a8:	24009cb4 	.word	0x24009cb4

080024ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return uwTick;
 80024b0:	4b03      	ldr	r3, [pc, #12]	@ (80024c0 <HAL_GetTick+0x14>)
 80024b2:	681b      	ldr	r3, [r3, #0]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	24009cb4 	.word	0x24009cb4

080024c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024cc:	f7ff ffee 	bl	80024ac <HAL_GetTick>
 80024d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024dc:	d005      	beq.n	80024ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024de:	4b0a      	ldr	r3, [pc, #40]	@ (8002508 <HAL_Delay+0x44>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4413      	add	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ea:	bf00      	nop
 80024ec:	f7ff ffde 	bl	80024ac <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d8f7      	bhi.n	80024ec <HAL_Delay+0x28>
  {
  }
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	24000014 	.word	0x24000014

0800250c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002510:	4b03      	ldr	r3, [pc, #12]	@ (8002520 <HAL_GetREVID+0x14>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	0c1b      	lsrs	r3, r3, #16
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	5c001000 	.word	0x5c001000

08002524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002534:	4b0b      	ldr	r3, [pc, #44]	@ (8002564 <__NVIC_SetPriorityGrouping+0x40>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002540:	4013      	ands	r3, r2
 8002542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800254c:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <__NVIC_SetPriorityGrouping+0x44>)
 800254e:	4313      	orrs	r3, r2
 8002550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002552:	4a04      	ldr	r2, [pc, #16]	@ (8002564 <__NVIC_SetPriorityGrouping+0x40>)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	60d3      	str	r3, [r2, #12]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000ed00 	.word	0xe000ed00
 8002568:	05fa0000 	.word	0x05fa0000

0800256c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002570:	4b04      	ldr	r3, [pc, #16]	@ (8002584 <__NVIC_GetPriorityGrouping+0x18>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	f003 0307 	and.w	r3, r3, #7
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002596:	2b00      	cmp	r3, #0
 8002598:	db0b      	blt.n	80025b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	f003 021f 	and.w	r2, r3, #31
 80025a0:	4907      	ldr	r1, [pc, #28]	@ (80025c0 <__NVIC_EnableIRQ+0x38>)
 80025a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	2001      	movs	r0, #1
 80025aa:	fa00 f202 	lsl.w	r2, r0, r2
 80025ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000e100 	.word	0xe000e100

080025c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	6039      	str	r1, [r7, #0]
 80025ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	db0a      	blt.n	80025ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	490c      	ldr	r1, [pc, #48]	@ (8002610 <__NVIC_SetPriority+0x4c>)
 80025de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025e2:	0112      	lsls	r2, r2, #4
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	440b      	add	r3, r1
 80025e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025ec:	e00a      	b.n	8002604 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4908      	ldr	r1, [pc, #32]	@ (8002614 <__NVIC_SetPriority+0x50>)
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	3b04      	subs	r3, #4
 80025fc:	0112      	lsls	r2, r2, #4
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	440b      	add	r3, r1
 8002602:	761a      	strb	r2, [r3, #24]
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000e100 	.word	0xe000e100
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	@ 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f1c3 0307 	rsb	r3, r3, #7
 8002632:	2b04      	cmp	r3, #4
 8002634:	bf28      	it	cs
 8002636:	2304      	movcs	r3, #4
 8002638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3304      	adds	r3, #4
 800263e:	2b06      	cmp	r3, #6
 8002640:	d902      	bls.n	8002648 <NVIC_EncodePriority+0x30>
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3b03      	subs	r3, #3
 8002646:	e000      	b.n	800264a <NVIC_EncodePriority+0x32>
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	f04f 32ff 	mov.w	r2, #4294967295
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43da      	mvns	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	401a      	ands	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002660:	f04f 31ff 	mov.w	r1, #4294967295
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	fa01 f303 	lsl.w	r3, r1, r3
 800266a:	43d9      	mvns	r1, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002670:	4313      	orrs	r3, r2
         );
}
 8002672:	4618      	mov	r0, r3
 8002674:	3724      	adds	r7, #36	@ 0x24
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002690:	d301      	bcc.n	8002696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002692:	2301      	movs	r3, #1
 8002694:	e00f      	b.n	80026b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002696:	4a0a      	ldr	r2, [pc, #40]	@ (80026c0 <SysTick_Config+0x40>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269e:	210f      	movs	r1, #15
 80026a0:	f04f 30ff 	mov.w	r0, #4294967295
 80026a4:	f7ff ff8e 	bl	80025c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a8:	4b05      	ldr	r3, [pc, #20]	@ (80026c0 <SysTick_Config+0x40>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ae:	4b04      	ldr	r3, [pc, #16]	@ (80026c0 <SysTick_Config+0x40>)
 80026b0:	2207      	movs	r2, #7
 80026b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	e000e010 	.word	0xe000e010

080026c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ff29 	bl	8002524 <__NVIC_SetPriorityGrouping>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	4603      	mov	r3, r0
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026e8:	f7ff ff40 	bl	800256c <__NVIC_GetPriorityGrouping>
 80026ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	6978      	ldr	r0, [r7, #20]
 80026f4:	f7ff ff90 	bl	8002618 <NVIC_EncodePriority>
 80026f8:	4602      	mov	r2, r0
 80026fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff5f 	bl	80025c4 <__NVIC_SetPriority>
}
 8002706:	bf00      	nop
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff33 	bl	8002588 <__NVIC_EnableIRQ>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff ffa4 	bl	8002680 <SysTick_Config>
 8002738:	4603      	mov	r3, r0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002748:	f3bf 8f5f 	dmb	sy
}
 800274c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800274e:	4b07      	ldr	r3, [pc, #28]	@ (800276c <HAL_MPU_Disable+0x28>)
 8002750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002752:	4a06      	ldr	r2, [pc, #24]	@ (800276c <HAL_MPU_Disable+0x28>)
 8002754:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002758:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800275a:	4b05      	ldr	r3, [pc, #20]	@ (8002770 <HAL_MPU_Disable+0x2c>)
 800275c:	2200      	movs	r2, #0
 800275e:	605a      	str	r2, [r3, #4]
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000ed00 	.word	0xe000ed00
 8002770:	e000ed90 	.word	0xe000ed90

08002774 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800277c:	4a0b      	ldr	r2, [pc, #44]	@ (80027ac <HAL_MPU_Enable+0x38>)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002786:	4b0a      	ldr	r3, [pc, #40]	@ (80027b0 <HAL_MPU_Enable+0x3c>)
 8002788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278a:	4a09      	ldr	r2, [pc, #36]	@ (80027b0 <HAL_MPU_Enable+0x3c>)
 800278c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002790:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002792:	f3bf 8f4f 	dsb	sy
}
 8002796:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002798:	f3bf 8f6f 	isb	sy
}
 800279c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000ed90 	.word	0xe000ed90
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	785a      	ldrb	r2, [r3, #1]
 80027c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002830 <HAL_MPU_ConfigRegion+0x7c>)
 80027c2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80027c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002830 <HAL_MPU_ConfigRegion+0x7c>)
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	4a19      	ldr	r2, [pc, #100]	@ (8002830 <HAL_MPU_ConfigRegion+0x7c>)
 80027ca:	f023 0301 	bic.w	r3, r3, #1
 80027ce:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80027d0:	4a17      	ldr	r2, [pc, #92]	@ (8002830 <HAL_MPU_ConfigRegion+0x7c>)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	7b1b      	ldrb	r3, [r3, #12]
 80027dc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	7adb      	ldrb	r3, [r3, #11]
 80027e2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	7a9b      	ldrb	r3, [r3, #10]
 80027ea:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80027ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	7b5b      	ldrb	r3, [r3, #13]
 80027f2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80027f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	7b9b      	ldrb	r3, [r3, #14]
 80027fa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80027fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	7bdb      	ldrb	r3, [r3, #15]
 8002802:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002804:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	7a5b      	ldrb	r3, [r3, #9]
 800280a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800280c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	7a1b      	ldrb	r3, [r3, #8]
 8002812:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002814:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	7812      	ldrb	r2, [r2, #0]
 800281a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800281c:	4a04      	ldr	r2, [pc, #16]	@ (8002830 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800281e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002820:	6113      	str	r3, [r2, #16]
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000ed90 	.word	0xe000ed90

08002834 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e069      	b.n	800291a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d102      	bne.n	8002858 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7fe ff48 	bl	80016e8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6819      	ldr	r1, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4b2a      	ldr	r3, [pc, #168]	@ (8002924 <HAL_DCMI_Init+0xf0>)
 800287a:	400b      	ands	r3, r1
 800287c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6819      	ldr	r1, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002892:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800289e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80028aa:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80028b6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028bc:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80028c2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b10      	cmp	r3, #16
 80028d2:	d112      	bne.n	80028fa <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	7f1b      	ldrb	r3, [r3, #28]
 80028d8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	7f5b      	ldrb	r3, [r3, #29]
 80028de:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80028e0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	7f9b      	ldrb	r3, [r3, #30]
 80028e6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80028e8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	7fdb      	ldrb	r3, [r3, #31]
 80028f0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80028f6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80028f8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 021e 	orr.w	r2, r2, #30
 8002908:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	ffe0f007 	.word	0xffe0f007

08002928 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af02      	add	r7, sp, #8
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_DCMI_Start_DMA+0x1c>
 8002940:	2302      	movs	r3, #2
 8002942:	e0ab      	b.n	8002a9c <HAL_DCMI_Start_DMA+0x174>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002962:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0202 	bic.w	r2, r2, #2
 8002972:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6819      	ldr	r1, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	430a      	orrs	r2, r1
 8002982:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002988:	4a46      	ldr	r2, [pc, #280]	@ (8002aa4 <HAL_DCMI_Start_DMA+0x17c>)
 800298a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002990:	4a45      	ldr	r2, [pc, #276]	@ (8002aa8 <HAL_DCMI_Start_DMA+0x180>)
 8002992:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002998:	2200      	movs	r2, #0
 800299a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029ba:	d219      	bcs.n	80029f0 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3328      	adds	r3, #40	@ 0x28
 80029c6:	4619      	mov	r1, r3
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	f000 fd7a 	bl	80034c4 <HAL_DMA_Start_IT>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d055      	beq.n	8002a82 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2240      	movs	r2, #64	@ 0x40
 80029da:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e055      	b.n	8002a9c <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029f4:	4a2b      	ldr	r2, [pc, #172]	@ (8002aa4 <HAL_DCMI_Start_DMA+0x17c>)
 80029f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8002a0a:	e009      	b.n	8002a20 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a10:	085a      	lsrs	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a1a:	005a      	lsls	r2, r3, #1
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a28:	d2f0      	bcs.n	8002a0c <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a2e:	1e9a      	subs	r2, r3, #2
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	4413      	add	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3328      	adds	r3, #40	@ 0x28
 8002a52:	4619      	mov	r1, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	f003 f81f 	bl	8005aa0 <HAL_DMAEx_MultiBufferStart_IT>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00c      	beq.n	8002a82 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2240      	movs	r2, #64	@ 0x40
 8002a6c:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e00c      	b.n	8002a9c <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f042 0201 	orr.w	r2, r2, #1
 8002a90:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	08002cad 	.word	0x08002cad
 8002aa8:	08002dd3 	.word	0x08002dd3

08002aac <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8002ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b64 <HAL_DCMI_Stop+0xb8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a2b      	ldr	r2, [pc, #172]	@ (8002b68 <HAL_DCMI_Stop+0xbc>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	0a5b      	lsrs	r3, r3, #9
 8002ac0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ac4:	fb02 f303 	mul.w	r3, r2, r3
 8002ac8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_DCMI_Stop+0x30>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e03f      	b.n	8002b5c <HAL_DCMI_Stop+0xb0>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0201 	bic.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d108      	bne.n	8002b1a <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b0c:	f043 0220 	orr.w	r2, r3, #32
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	72fb      	strb	r3, [r7, #11]
      break;
 8002b18:	e006      	b.n	8002b28 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1e9      	bne.n	8002afc <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b36:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 ff2b 	bl	8003998 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 8002b5a:	7afb      	ldrb	r3, [r7, #11]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	24000008 	.word	0x24000008
 8002b68:	10624dd3 	.word	0x10624dd3

08002b6c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d016      	beq.n	8002bb4 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2204      	movs	r2, #4
 8002b8c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b92:	f043 0202 	orr.w	r2, r3, #2
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ba6:	4a31      	ldr	r2, [pc, #196]	@ (8002c6c <HAL_DCMI_IRQHandler+0x100>)
 8002ba8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f001 fa10 	bl	8003fd4 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d016      	beq.n	8002bec <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bca:	f043 0201 	orr.w	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bde:	4a23      	ldr	r2, [pc, #140]	@ (8002c6c <HAL_DCMI_IRQHandler+0x100>)
 8002be0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002be6:	4618      	mov	r0, r3
 8002be8:	f001 f9f4 	bl	8003fd4 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 0310 	and.w	r3, r3, #16
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d006      	beq.n	8002c04 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2210      	movs	r2, #16
 8002bfc:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f840 	bl	8002c84 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d006      	beq.n	8002c1c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2208      	movs	r2, #8
 8002c14:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7fe fafa 	bl	8001210 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d01d      	beq.n	8002c62 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d107      	bne.n	8002c44 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 021e 	bic.w	r2, r2, #30
 8002c42:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0201 	bic.w	r2, r2, #1
 8002c52:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f81b 	bl	8002c98 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	08002dd3 	.word	0x08002dd3

08002c70 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb8:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d043      	beq.n	8002d4a <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cce:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d118      	bne.n	8002d0e <DCMI_DMAXferCplt+0x62>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d015      	beq.n	8002d0e <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf4:	00da      	lsls	r2, r3, #3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f003 fa2d 	bl	800615c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d06:	1e5a      	subs	r2, r3, #1
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d0c:	e044      	b.n	8002d98 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d13c      	bne.n	8002d98 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d30:	00da      	lsls	r2, r3, #3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	4413      	add	r3, r2
 8002d36:	2201      	movs	r2, #1
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f003 fa0f 	bl	800615c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d42:	1e5a      	subs	r2, r3, #1
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d48:	e026      	b.n	8002d98 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d006      	beq.n	8002d68 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002d64:	60da      	str	r2, [r3, #12]
 8002d66:	e017      	b.n	8002d98 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10f      	bne.n	8002d98 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7c:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d82:	0099      	lsls	r1, r3, #2
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	440a      	add	r2, r1
 8002d8e:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d112      	bne.n	8002dca <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d103      	bne.n	8002dca <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dde:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d009      	beq.n	8002dfe <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f7ff ff36 	bl	8002c70 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8002e04:	bf00      	nop
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002e14:	f7ff fb4a 	bl	80024ac <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e316      	b.n	8003452 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a66      	ldr	r2, [pc, #408]	@ (8002fc4 <HAL_DMA_Init+0x1b8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d04a      	beq.n	8002ec4 <HAL_DMA_Init+0xb8>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a65      	ldr	r2, [pc, #404]	@ (8002fc8 <HAL_DMA_Init+0x1bc>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d045      	beq.n	8002ec4 <HAL_DMA_Init+0xb8>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a63      	ldr	r2, [pc, #396]	@ (8002fcc <HAL_DMA_Init+0x1c0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d040      	beq.n	8002ec4 <HAL_DMA_Init+0xb8>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a62      	ldr	r2, [pc, #392]	@ (8002fd0 <HAL_DMA_Init+0x1c4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d03b      	beq.n	8002ec4 <HAL_DMA_Init+0xb8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a60      	ldr	r2, [pc, #384]	@ (8002fd4 <HAL_DMA_Init+0x1c8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d036      	beq.n	8002ec4 <HAL_DMA_Init+0xb8>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a5f      	ldr	r2, [pc, #380]	@ (8002fd8 <HAL_DMA_Init+0x1cc>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d031      	beq.n	8002ec4 <HAL_DMA_Init+0xb8>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a5d      	ldr	r2, [pc, #372]	@ (8002fdc <HAL_DMA_Init+0x1d0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d02c      	beq.n	8002ec4 <HAL_DMA_Init+0xb8>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a5c      	ldr	r2, [pc, #368]	@ (8002fe0 <HAL_DMA_Init+0x1d4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d027      	beq.n	8002ec4 <HAL_DMA_Init+0xb8>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a5a      	ldr	r2, [pc, #360]	@ (8002fe4 <HAL_DMA_Init+0x1d8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d022      	beq.n	8002ec4 <HAL_DMA_Init+0xb8>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a59      	ldr	r2, [pc, #356]	@ (8002fe8 <HAL_DMA_Init+0x1dc>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d01d      	beq.n	8002ec4 <HAL_DMA_Init+0xb8>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a57      	ldr	r2, [pc, #348]	@ (8002fec <HAL_DMA_Init+0x1e0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d018      	beq.n	8002ec4 <HAL_DMA_Init+0xb8>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a56      	ldr	r2, [pc, #344]	@ (8002ff0 <HAL_DMA_Init+0x1e4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d013      	beq.n	8002ec4 <HAL_DMA_Init+0xb8>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a54      	ldr	r2, [pc, #336]	@ (8002ff4 <HAL_DMA_Init+0x1e8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00e      	beq.n	8002ec4 <HAL_DMA_Init+0xb8>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a53      	ldr	r2, [pc, #332]	@ (8002ff8 <HAL_DMA_Init+0x1ec>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d009      	beq.n	8002ec4 <HAL_DMA_Init+0xb8>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a51      	ldr	r2, [pc, #324]	@ (8002ffc <HAL_DMA_Init+0x1f0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d004      	beq.n	8002ec4 <HAL_DMA_Init+0xb8>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a50      	ldr	r2, [pc, #320]	@ (8003000 <HAL_DMA_Init+0x1f4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d101      	bne.n	8002ec8 <HAL_DMA_Init+0xbc>
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e000      	b.n	8002eca <HAL_DMA_Init+0xbe>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 813b 	beq.w	8003146 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a37      	ldr	r2, [pc, #220]	@ (8002fc4 <HAL_DMA_Init+0x1b8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d04a      	beq.n	8002f80 <HAL_DMA_Init+0x174>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a36      	ldr	r2, [pc, #216]	@ (8002fc8 <HAL_DMA_Init+0x1bc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d045      	beq.n	8002f80 <HAL_DMA_Init+0x174>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a34      	ldr	r2, [pc, #208]	@ (8002fcc <HAL_DMA_Init+0x1c0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d040      	beq.n	8002f80 <HAL_DMA_Init+0x174>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a33      	ldr	r2, [pc, #204]	@ (8002fd0 <HAL_DMA_Init+0x1c4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d03b      	beq.n	8002f80 <HAL_DMA_Init+0x174>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a31      	ldr	r2, [pc, #196]	@ (8002fd4 <HAL_DMA_Init+0x1c8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d036      	beq.n	8002f80 <HAL_DMA_Init+0x174>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a30      	ldr	r2, [pc, #192]	@ (8002fd8 <HAL_DMA_Init+0x1cc>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d031      	beq.n	8002f80 <HAL_DMA_Init+0x174>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a2e      	ldr	r2, [pc, #184]	@ (8002fdc <HAL_DMA_Init+0x1d0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d02c      	beq.n	8002f80 <HAL_DMA_Init+0x174>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a2d      	ldr	r2, [pc, #180]	@ (8002fe0 <HAL_DMA_Init+0x1d4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d027      	beq.n	8002f80 <HAL_DMA_Init+0x174>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a2b      	ldr	r2, [pc, #172]	@ (8002fe4 <HAL_DMA_Init+0x1d8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d022      	beq.n	8002f80 <HAL_DMA_Init+0x174>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a2a      	ldr	r2, [pc, #168]	@ (8002fe8 <HAL_DMA_Init+0x1dc>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d01d      	beq.n	8002f80 <HAL_DMA_Init+0x174>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a28      	ldr	r2, [pc, #160]	@ (8002fec <HAL_DMA_Init+0x1e0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d018      	beq.n	8002f80 <HAL_DMA_Init+0x174>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a27      	ldr	r2, [pc, #156]	@ (8002ff0 <HAL_DMA_Init+0x1e4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d013      	beq.n	8002f80 <HAL_DMA_Init+0x174>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a25      	ldr	r2, [pc, #148]	@ (8002ff4 <HAL_DMA_Init+0x1e8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00e      	beq.n	8002f80 <HAL_DMA_Init+0x174>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a24      	ldr	r2, [pc, #144]	@ (8002ff8 <HAL_DMA_Init+0x1ec>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d009      	beq.n	8002f80 <HAL_DMA_Init+0x174>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a22      	ldr	r2, [pc, #136]	@ (8002ffc <HAL_DMA_Init+0x1f0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d004      	beq.n	8002f80 <HAL_DMA_Init+0x174>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a21      	ldr	r2, [pc, #132]	@ (8003000 <HAL_DMA_Init+0x1f4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d108      	bne.n	8002f92 <HAL_DMA_Init+0x186>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	e007      	b.n	8002fa2 <HAL_DMA_Init+0x196>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0201 	bic.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002fa2:	e02f      	b.n	8003004 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fa4:	f7ff fa82 	bl	80024ac <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b05      	cmp	r3, #5
 8002fb0:	d928      	bls.n	8003004 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2203      	movs	r2, #3
 8002fbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e246      	b.n	8003452 <HAL_DMA_Init+0x646>
 8002fc4:	40020010 	.word	0x40020010
 8002fc8:	40020028 	.word	0x40020028
 8002fcc:	40020040 	.word	0x40020040
 8002fd0:	40020058 	.word	0x40020058
 8002fd4:	40020070 	.word	0x40020070
 8002fd8:	40020088 	.word	0x40020088
 8002fdc:	400200a0 	.word	0x400200a0
 8002fe0:	400200b8 	.word	0x400200b8
 8002fe4:	40020410 	.word	0x40020410
 8002fe8:	40020428 	.word	0x40020428
 8002fec:	40020440 	.word	0x40020440
 8002ff0:	40020458 	.word	0x40020458
 8002ff4:	40020470 	.word	0x40020470
 8002ff8:	40020488 	.word	0x40020488
 8002ffc:	400204a0 	.word	0x400204a0
 8003000:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1c8      	bne.n	8002fa4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	4b83      	ldr	r3, [pc, #524]	@ (800322c <HAL_DMA_Init+0x420>)
 800301e:	4013      	ands	r3, r2
 8003020:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800302a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003036:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003042:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003054:	2b04      	cmp	r3, #4
 8003056:	d107      	bne.n	8003068 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003060:	4313      	orrs	r3, r2
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003068:	4b71      	ldr	r3, [pc, #452]	@ (8003230 <HAL_DMA_Init+0x424>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	4b71      	ldr	r3, [pc, #452]	@ (8003234 <HAL_DMA_Init+0x428>)
 800306e:	4013      	ands	r3, r2
 8003070:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003074:	d328      	bcc.n	80030c8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b28      	cmp	r3, #40	@ 0x28
 800307c:	d903      	bls.n	8003086 <HAL_DMA_Init+0x27a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b2e      	cmp	r3, #46	@ 0x2e
 8003084:	d917      	bls.n	80030b6 <HAL_DMA_Init+0x2aa>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b3e      	cmp	r3, #62	@ 0x3e
 800308c:	d903      	bls.n	8003096 <HAL_DMA_Init+0x28a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b42      	cmp	r3, #66	@ 0x42
 8003094:	d90f      	bls.n	80030b6 <HAL_DMA_Init+0x2aa>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b46      	cmp	r3, #70	@ 0x46
 800309c:	d903      	bls.n	80030a6 <HAL_DMA_Init+0x29a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b48      	cmp	r3, #72	@ 0x48
 80030a4:	d907      	bls.n	80030b6 <HAL_DMA_Init+0x2aa>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b4e      	cmp	r3, #78	@ 0x4e
 80030ac:	d905      	bls.n	80030ba <HAL_DMA_Init+0x2ae>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b52      	cmp	r3, #82	@ 0x52
 80030b4:	d801      	bhi.n	80030ba <HAL_DMA_Init+0x2ae>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <HAL_DMA_Init+0x2b0>
 80030ba:	2300      	movs	r3, #0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030c6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f023 0307 	bic.w	r3, r3, #7
 80030de:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d117      	bne.n	8003122 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00e      	beq.n	8003122 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f002 fb41 	bl	800578c <DMA_CheckFifoParam>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2240      	movs	r2, #64	@ 0x40
 8003114:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e197      	b.n	8003452 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f002 fa7c 	bl	8005628 <DMA_CalcBaseAndBitshift>
 8003130:	4603      	mov	r3, r0
 8003132:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	223f      	movs	r2, #63	@ 0x3f
 800313e:	409a      	lsls	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	e0cd      	b.n	80032e2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a3b      	ldr	r2, [pc, #236]	@ (8003238 <HAL_DMA_Init+0x42c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d022      	beq.n	8003196 <HAL_DMA_Init+0x38a>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a39      	ldr	r2, [pc, #228]	@ (800323c <HAL_DMA_Init+0x430>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d01d      	beq.n	8003196 <HAL_DMA_Init+0x38a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a38      	ldr	r2, [pc, #224]	@ (8003240 <HAL_DMA_Init+0x434>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d018      	beq.n	8003196 <HAL_DMA_Init+0x38a>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a36      	ldr	r2, [pc, #216]	@ (8003244 <HAL_DMA_Init+0x438>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d013      	beq.n	8003196 <HAL_DMA_Init+0x38a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a35      	ldr	r2, [pc, #212]	@ (8003248 <HAL_DMA_Init+0x43c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00e      	beq.n	8003196 <HAL_DMA_Init+0x38a>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a33      	ldr	r2, [pc, #204]	@ (800324c <HAL_DMA_Init+0x440>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d009      	beq.n	8003196 <HAL_DMA_Init+0x38a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a32      	ldr	r2, [pc, #200]	@ (8003250 <HAL_DMA_Init+0x444>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d004      	beq.n	8003196 <HAL_DMA_Init+0x38a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a30      	ldr	r2, [pc, #192]	@ (8003254 <HAL_DMA_Init+0x448>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d101      	bne.n	800319a <HAL_DMA_Init+0x38e>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_DMA_Init+0x390>
 800319a:	2300      	movs	r3, #0
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8097 	beq.w	80032d0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a24      	ldr	r2, [pc, #144]	@ (8003238 <HAL_DMA_Init+0x42c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d021      	beq.n	80031f0 <HAL_DMA_Init+0x3e4>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a22      	ldr	r2, [pc, #136]	@ (800323c <HAL_DMA_Init+0x430>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d01c      	beq.n	80031f0 <HAL_DMA_Init+0x3e4>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a21      	ldr	r2, [pc, #132]	@ (8003240 <HAL_DMA_Init+0x434>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d017      	beq.n	80031f0 <HAL_DMA_Init+0x3e4>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003244 <HAL_DMA_Init+0x438>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d012      	beq.n	80031f0 <HAL_DMA_Init+0x3e4>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003248 <HAL_DMA_Init+0x43c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00d      	beq.n	80031f0 <HAL_DMA_Init+0x3e4>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1c      	ldr	r2, [pc, #112]	@ (800324c <HAL_DMA_Init+0x440>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d008      	beq.n	80031f0 <HAL_DMA_Init+0x3e4>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003250 <HAL_DMA_Init+0x444>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d003      	beq.n	80031f0 <HAL_DMA_Init+0x3e4>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a19      	ldr	r2, [pc, #100]	@ (8003254 <HAL_DMA_Init+0x448>)
 80031ee:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	4b13      	ldr	r3, [pc, #76]	@ (8003258 <HAL_DMA_Init+0x44c>)
 800320c:	4013      	ands	r3, r2
 800320e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b40      	cmp	r3, #64	@ 0x40
 8003216:	d021      	beq.n	800325c <HAL_DMA_Init+0x450>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b80      	cmp	r3, #128	@ 0x80
 800321e:	d102      	bne.n	8003226 <HAL_DMA_Init+0x41a>
 8003220:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003224:	e01b      	b.n	800325e <HAL_DMA_Init+0x452>
 8003226:	2300      	movs	r3, #0
 8003228:	e019      	b.n	800325e <HAL_DMA_Init+0x452>
 800322a:	bf00      	nop
 800322c:	fe10803f 	.word	0xfe10803f
 8003230:	5c001000 	.word	0x5c001000
 8003234:	ffff0000 	.word	0xffff0000
 8003238:	58025408 	.word	0x58025408
 800323c:	5802541c 	.word	0x5802541c
 8003240:	58025430 	.word	0x58025430
 8003244:	58025444 	.word	0x58025444
 8003248:	58025458 	.word	0x58025458
 800324c:	5802546c 	.word	0x5802546c
 8003250:	58025480 	.word	0x58025480
 8003254:	58025494 	.word	0x58025494
 8003258:	fffe000f 	.word	0xfffe000f
 800325c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	68d2      	ldr	r2, [r2, #12]
 8003262:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003264:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800326c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003274:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800327c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003284:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800328c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	4b6e      	ldr	r3, [pc, #440]	@ (800345c <HAL_DMA_Init+0x650>)
 80032a4:	4413      	add	r3, r2
 80032a6:	4a6e      	ldr	r2, [pc, #440]	@ (8003460 <HAL_DMA_Init+0x654>)
 80032a8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ac:	091b      	lsrs	r3, r3, #4
 80032ae:	009a      	lsls	r2, r3, #2
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f002 f9b7 	bl	8005628 <DMA_CalcBaseAndBitshift>
 80032ba:	4603      	mov	r3, r0
 80032bc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c2:	f003 031f 	and.w	r3, r3, #31
 80032c6:	2201      	movs	r2, #1
 80032c8:	409a      	lsls	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	e008      	b.n	80032e2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2240      	movs	r2, #64	@ 0x40
 80032d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2203      	movs	r2, #3
 80032da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e0b7      	b.n	8003452 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a5f      	ldr	r2, [pc, #380]	@ (8003464 <HAL_DMA_Init+0x658>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d072      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a5d      	ldr	r2, [pc, #372]	@ (8003468 <HAL_DMA_Init+0x65c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d06d      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a5c      	ldr	r2, [pc, #368]	@ (800346c <HAL_DMA_Init+0x660>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d068      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a5a      	ldr	r2, [pc, #360]	@ (8003470 <HAL_DMA_Init+0x664>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d063      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a59      	ldr	r2, [pc, #356]	@ (8003474 <HAL_DMA_Init+0x668>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d05e      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a57      	ldr	r2, [pc, #348]	@ (8003478 <HAL_DMA_Init+0x66c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d059      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a56      	ldr	r2, [pc, #344]	@ (800347c <HAL_DMA_Init+0x670>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d054      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a54      	ldr	r2, [pc, #336]	@ (8003480 <HAL_DMA_Init+0x674>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d04f      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a53      	ldr	r2, [pc, #332]	@ (8003484 <HAL_DMA_Init+0x678>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d04a      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a51      	ldr	r2, [pc, #324]	@ (8003488 <HAL_DMA_Init+0x67c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d045      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a50      	ldr	r2, [pc, #320]	@ (800348c <HAL_DMA_Init+0x680>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d040      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a4e      	ldr	r2, [pc, #312]	@ (8003490 <HAL_DMA_Init+0x684>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d03b      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a4d      	ldr	r2, [pc, #308]	@ (8003494 <HAL_DMA_Init+0x688>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d036      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a4b      	ldr	r2, [pc, #300]	@ (8003498 <HAL_DMA_Init+0x68c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d031      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a4a      	ldr	r2, [pc, #296]	@ (800349c <HAL_DMA_Init+0x690>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d02c      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a48      	ldr	r2, [pc, #288]	@ (80034a0 <HAL_DMA_Init+0x694>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d027      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a47      	ldr	r2, [pc, #284]	@ (80034a4 <HAL_DMA_Init+0x698>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d022      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a45      	ldr	r2, [pc, #276]	@ (80034a8 <HAL_DMA_Init+0x69c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d01d      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a44      	ldr	r2, [pc, #272]	@ (80034ac <HAL_DMA_Init+0x6a0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d018      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a42      	ldr	r2, [pc, #264]	@ (80034b0 <HAL_DMA_Init+0x6a4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a41      	ldr	r2, [pc, #260]	@ (80034b4 <HAL_DMA_Init+0x6a8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00e      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a3f      	ldr	r2, [pc, #252]	@ (80034b8 <HAL_DMA_Init+0x6ac>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d009      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a3e      	ldr	r2, [pc, #248]	@ (80034bc <HAL_DMA_Init+0x6b0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d004      	beq.n	80033d2 <HAL_DMA_Init+0x5c6>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a3c      	ldr	r2, [pc, #240]	@ (80034c0 <HAL_DMA_Init+0x6b4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d101      	bne.n	80033d6 <HAL_DMA_Init+0x5ca>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_DMA_Init+0x5cc>
 80033d6:	2300      	movs	r3, #0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d032      	beq.n	8003442 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f002 fa51 	bl	8005884 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b80      	cmp	r3, #128	@ 0x80
 80033e8:	d102      	bne.n	80033f0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003404:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d010      	beq.n	8003430 <HAL_DMA_Init+0x624>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b08      	cmp	r3, #8
 8003414:	d80c      	bhi.n	8003430 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f002 face 	bl	80059b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	e008      	b.n	8003442 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	a7fdabf8 	.word	0xa7fdabf8
 8003460:	cccccccd 	.word	0xcccccccd
 8003464:	40020010 	.word	0x40020010
 8003468:	40020028 	.word	0x40020028
 800346c:	40020040 	.word	0x40020040
 8003470:	40020058 	.word	0x40020058
 8003474:	40020070 	.word	0x40020070
 8003478:	40020088 	.word	0x40020088
 800347c:	400200a0 	.word	0x400200a0
 8003480:	400200b8 	.word	0x400200b8
 8003484:	40020410 	.word	0x40020410
 8003488:	40020428 	.word	0x40020428
 800348c:	40020440 	.word	0x40020440
 8003490:	40020458 	.word	0x40020458
 8003494:	40020470 	.word	0x40020470
 8003498:	40020488 	.word	0x40020488
 800349c:	400204a0 	.word	0x400204a0
 80034a0:	400204b8 	.word	0x400204b8
 80034a4:	58025408 	.word	0x58025408
 80034a8:	5802541c 	.word	0x5802541c
 80034ac:	58025430 	.word	0x58025430
 80034b0:	58025444 	.word	0x58025444
 80034b4:	58025458 	.word	0x58025458
 80034b8:	5802546c 	.word	0x5802546c
 80034bc:	58025480 	.word	0x58025480
 80034c0:	58025494 	.word	0x58025494

080034c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e226      	b.n	800392e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_DMA_Start_IT+0x2a>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e21f      	b.n	800392e <HAL_DMA_Start_IT+0x46a>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b01      	cmp	r3, #1
 8003500:	f040 820a 	bne.w	8003918 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a68      	ldr	r2, [pc, #416]	@ (80036b8 <HAL_DMA_Start_IT+0x1f4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d04a      	beq.n	80035b2 <HAL_DMA_Start_IT+0xee>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a66      	ldr	r2, [pc, #408]	@ (80036bc <HAL_DMA_Start_IT+0x1f8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d045      	beq.n	80035b2 <HAL_DMA_Start_IT+0xee>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a65      	ldr	r2, [pc, #404]	@ (80036c0 <HAL_DMA_Start_IT+0x1fc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d040      	beq.n	80035b2 <HAL_DMA_Start_IT+0xee>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a63      	ldr	r2, [pc, #396]	@ (80036c4 <HAL_DMA_Start_IT+0x200>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d03b      	beq.n	80035b2 <HAL_DMA_Start_IT+0xee>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a62      	ldr	r2, [pc, #392]	@ (80036c8 <HAL_DMA_Start_IT+0x204>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d036      	beq.n	80035b2 <HAL_DMA_Start_IT+0xee>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a60      	ldr	r2, [pc, #384]	@ (80036cc <HAL_DMA_Start_IT+0x208>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d031      	beq.n	80035b2 <HAL_DMA_Start_IT+0xee>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a5f      	ldr	r2, [pc, #380]	@ (80036d0 <HAL_DMA_Start_IT+0x20c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d02c      	beq.n	80035b2 <HAL_DMA_Start_IT+0xee>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a5d      	ldr	r2, [pc, #372]	@ (80036d4 <HAL_DMA_Start_IT+0x210>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d027      	beq.n	80035b2 <HAL_DMA_Start_IT+0xee>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a5c      	ldr	r2, [pc, #368]	@ (80036d8 <HAL_DMA_Start_IT+0x214>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d022      	beq.n	80035b2 <HAL_DMA_Start_IT+0xee>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a5a      	ldr	r2, [pc, #360]	@ (80036dc <HAL_DMA_Start_IT+0x218>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d01d      	beq.n	80035b2 <HAL_DMA_Start_IT+0xee>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a59      	ldr	r2, [pc, #356]	@ (80036e0 <HAL_DMA_Start_IT+0x21c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d018      	beq.n	80035b2 <HAL_DMA_Start_IT+0xee>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a57      	ldr	r2, [pc, #348]	@ (80036e4 <HAL_DMA_Start_IT+0x220>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d013      	beq.n	80035b2 <HAL_DMA_Start_IT+0xee>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a56      	ldr	r2, [pc, #344]	@ (80036e8 <HAL_DMA_Start_IT+0x224>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d00e      	beq.n	80035b2 <HAL_DMA_Start_IT+0xee>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a54      	ldr	r2, [pc, #336]	@ (80036ec <HAL_DMA_Start_IT+0x228>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d009      	beq.n	80035b2 <HAL_DMA_Start_IT+0xee>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a53      	ldr	r2, [pc, #332]	@ (80036f0 <HAL_DMA_Start_IT+0x22c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d004      	beq.n	80035b2 <HAL_DMA_Start_IT+0xee>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a51      	ldr	r2, [pc, #324]	@ (80036f4 <HAL_DMA_Start_IT+0x230>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d108      	bne.n	80035c4 <HAL_DMA_Start_IT+0x100>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0201 	bic.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	e007      	b.n	80035d4 <HAL_DMA_Start_IT+0x110>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f001 fe78 	bl	80052d0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a34      	ldr	r2, [pc, #208]	@ (80036b8 <HAL_DMA_Start_IT+0x1f4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d04a      	beq.n	8003680 <HAL_DMA_Start_IT+0x1bc>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a33      	ldr	r2, [pc, #204]	@ (80036bc <HAL_DMA_Start_IT+0x1f8>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d045      	beq.n	8003680 <HAL_DMA_Start_IT+0x1bc>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a31      	ldr	r2, [pc, #196]	@ (80036c0 <HAL_DMA_Start_IT+0x1fc>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d040      	beq.n	8003680 <HAL_DMA_Start_IT+0x1bc>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a30      	ldr	r2, [pc, #192]	@ (80036c4 <HAL_DMA_Start_IT+0x200>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d03b      	beq.n	8003680 <HAL_DMA_Start_IT+0x1bc>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a2e      	ldr	r2, [pc, #184]	@ (80036c8 <HAL_DMA_Start_IT+0x204>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d036      	beq.n	8003680 <HAL_DMA_Start_IT+0x1bc>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a2d      	ldr	r2, [pc, #180]	@ (80036cc <HAL_DMA_Start_IT+0x208>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d031      	beq.n	8003680 <HAL_DMA_Start_IT+0x1bc>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a2b      	ldr	r2, [pc, #172]	@ (80036d0 <HAL_DMA_Start_IT+0x20c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d02c      	beq.n	8003680 <HAL_DMA_Start_IT+0x1bc>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a2a      	ldr	r2, [pc, #168]	@ (80036d4 <HAL_DMA_Start_IT+0x210>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d027      	beq.n	8003680 <HAL_DMA_Start_IT+0x1bc>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a28      	ldr	r2, [pc, #160]	@ (80036d8 <HAL_DMA_Start_IT+0x214>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d022      	beq.n	8003680 <HAL_DMA_Start_IT+0x1bc>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a27      	ldr	r2, [pc, #156]	@ (80036dc <HAL_DMA_Start_IT+0x218>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d01d      	beq.n	8003680 <HAL_DMA_Start_IT+0x1bc>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a25      	ldr	r2, [pc, #148]	@ (80036e0 <HAL_DMA_Start_IT+0x21c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d018      	beq.n	8003680 <HAL_DMA_Start_IT+0x1bc>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a24      	ldr	r2, [pc, #144]	@ (80036e4 <HAL_DMA_Start_IT+0x220>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d013      	beq.n	8003680 <HAL_DMA_Start_IT+0x1bc>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a22      	ldr	r2, [pc, #136]	@ (80036e8 <HAL_DMA_Start_IT+0x224>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00e      	beq.n	8003680 <HAL_DMA_Start_IT+0x1bc>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a21      	ldr	r2, [pc, #132]	@ (80036ec <HAL_DMA_Start_IT+0x228>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d009      	beq.n	8003680 <HAL_DMA_Start_IT+0x1bc>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1f      	ldr	r2, [pc, #124]	@ (80036f0 <HAL_DMA_Start_IT+0x22c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d004      	beq.n	8003680 <HAL_DMA_Start_IT+0x1bc>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a1e      	ldr	r2, [pc, #120]	@ (80036f4 <HAL_DMA_Start_IT+0x230>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d101      	bne.n	8003684 <HAL_DMA_Start_IT+0x1c0>
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <HAL_DMA_Start_IT+0x1c2>
 8003684:	2300      	movs	r3, #0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d036      	beq.n	80036f8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f023 021e 	bic.w	r2, r3, #30
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0216 	orr.w	r2, r2, #22
 800369c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d03e      	beq.n	8003724 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0208 	orr.w	r2, r2, #8
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	e035      	b.n	8003724 <HAL_DMA_Start_IT+0x260>
 80036b8:	40020010 	.word	0x40020010
 80036bc:	40020028 	.word	0x40020028
 80036c0:	40020040 	.word	0x40020040
 80036c4:	40020058 	.word	0x40020058
 80036c8:	40020070 	.word	0x40020070
 80036cc:	40020088 	.word	0x40020088
 80036d0:	400200a0 	.word	0x400200a0
 80036d4:	400200b8 	.word	0x400200b8
 80036d8:	40020410 	.word	0x40020410
 80036dc:	40020428 	.word	0x40020428
 80036e0:	40020440 	.word	0x40020440
 80036e4:	40020458 	.word	0x40020458
 80036e8:	40020470 	.word	0x40020470
 80036ec:	40020488 	.word	0x40020488
 80036f0:	400204a0 	.word	0x400204a0
 80036f4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f023 020e 	bic.w	r2, r3, #14
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 020a 	orr.w	r2, r2, #10
 800370a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003710:	2b00      	cmp	r3, #0
 8003712:	d007      	beq.n	8003724 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0204 	orr.w	r2, r2, #4
 8003722:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a83      	ldr	r2, [pc, #524]	@ (8003938 <HAL_DMA_Start_IT+0x474>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d072      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a82      	ldr	r2, [pc, #520]	@ (800393c <HAL_DMA_Start_IT+0x478>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d06d      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a80      	ldr	r2, [pc, #512]	@ (8003940 <HAL_DMA_Start_IT+0x47c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d068      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a7f      	ldr	r2, [pc, #508]	@ (8003944 <HAL_DMA_Start_IT+0x480>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d063      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a7d      	ldr	r2, [pc, #500]	@ (8003948 <HAL_DMA_Start_IT+0x484>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d05e      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a7c      	ldr	r2, [pc, #496]	@ (800394c <HAL_DMA_Start_IT+0x488>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d059      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a7a      	ldr	r2, [pc, #488]	@ (8003950 <HAL_DMA_Start_IT+0x48c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d054      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a79      	ldr	r2, [pc, #484]	@ (8003954 <HAL_DMA_Start_IT+0x490>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d04f      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a77      	ldr	r2, [pc, #476]	@ (8003958 <HAL_DMA_Start_IT+0x494>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d04a      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a76      	ldr	r2, [pc, #472]	@ (800395c <HAL_DMA_Start_IT+0x498>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d045      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a74      	ldr	r2, [pc, #464]	@ (8003960 <HAL_DMA_Start_IT+0x49c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d040      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a73      	ldr	r2, [pc, #460]	@ (8003964 <HAL_DMA_Start_IT+0x4a0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d03b      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a71      	ldr	r2, [pc, #452]	@ (8003968 <HAL_DMA_Start_IT+0x4a4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d036      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a70      	ldr	r2, [pc, #448]	@ (800396c <HAL_DMA_Start_IT+0x4a8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d031      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a6e      	ldr	r2, [pc, #440]	@ (8003970 <HAL_DMA_Start_IT+0x4ac>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d02c      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a6d      	ldr	r2, [pc, #436]	@ (8003974 <HAL_DMA_Start_IT+0x4b0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d027      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a6b      	ldr	r2, [pc, #428]	@ (8003978 <HAL_DMA_Start_IT+0x4b4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d022      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a6a      	ldr	r2, [pc, #424]	@ (800397c <HAL_DMA_Start_IT+0x4b8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d01d      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a68      	ldr	r2, [pc, #416]	@ (8003980 <HAL_DMA_Start_IT+0x4bc>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d018      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a67      	ldr	r2, [pc, #412]	@ (8003984 <HAL_DMA_Start_IT+0x4c0>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d013      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a65      	ldr	r2, [pc, #404]	@ (8003988 <HAL_DMA_Start_IT+0x4c4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00e      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a64      	ldr	r2, [pc, #400]	@ (800398c <HAL_DMA_Start_IT+0x4c8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d009      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a62      	ldr	r2, [pc, #392]	@ (8003990 <HAL_DMA_Start_IT+0x4cc>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <HAL_DMA_Start_IT+0x350>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a61      	ldr	r2, [pc, #388]	@ (8003994 <HAL_DMA_Start_IT+0x4d0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d101      	bne.n	8003818 <HAL_DMA_Start_IT+0x354>
 8003814:	2301      	movs	r3, #1
 8003816:	e000      	b.n	800381a <HAL_DMA_Start_IT+0x356>
 8003818:	2300      	movs	r3, #0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d01a      	beq.n	8003854 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d007      	beq.n	800383c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003836:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800383a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003840:	2b00      	cmp	r3, #0
 8003842:	d007      	beq.n	8003854 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800384e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003852:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a37      	ldr	r2, [pc, #220]	@ (8003938 <HAL_DMA_Start_IT+0x474>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d04a      	beq.n	80038f4 <HAL_DMA_Start_IT+0x430>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a36      	ldr	r2, [pc, #216]	@ (800393c <HAL_DMA_Start_IT+0x478>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d045      	beq.n	80038f4 <HAL_DMA_Start_IT+0x430>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a34      	ldr	r2, [pc, #208]	@ (8003940 <HAL_DMA_Start_IT+0x47c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d040      	beq.n	80038f4 <HAL_DMA_Start_IT+0x430>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a33      	ldr	r2, [pc, #204]	@ (8003944 <HAL_DMA_Start_IT+0x480>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d03b      	beq.n	80038f4 <HAL_DMA_Start_IT+0x430>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a31      	ldr	r2, [pc, #196]	@ (8003948 <HAL_DMA_Start_IT+0x484>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d036      	beq.n	80038f4 <HAL_DMA_Start_IT+0x430>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a30      	ldr	r2, [pc, #192]	@ (800394c <HAL_DMA_Start_IT+0x488>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d031      	beq.n	80038f4 <HAL_DMA_Start_IT+0x430>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a2e      	ldr	r2, [pc, #184]	@ (8003950 <HAL_DMA_Start_IT+0x48c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d02c      	beq.n	80038f4 <HAL_DMA_Start_IT+0x430>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a2d      	ldr	r2, [pc, #180]	@ (8003954 <HAL_DMA_Start_IT+0x490>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d027      	beq.n	80038f4 <HAL_DMA_Start_IT+0x430>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003958 <HAL_DMA_Start_IT+0x494>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d022      	beq.n	80038f4 <HAL_DMA_Start_IT+0x430>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a2a      	ldr	r2, [pc, #168]	@ (800395c <HAL_DMA_Start_IT+0x498>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d01d      	beq.n	80038f4 <HAL_DMA_Start_IT+0x430>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a28      	ldr	r2, [pc, #160]	@ (8003960 <HAL_DMA_Start_IT+0x49c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d018      	beq.n	80038f4 <HAL_DMA_Start_IT+0x430>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a27      	ldr	r2, [pc, #156]	@ (8003964 <HAL_DMA_Start_IT+0x4a0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d013      	beq.n	80038f4 <HAL_DMA_Start_IT+0x430>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a25      	ldr	r2, [pc, #148]	@ (8003968 <HAL_DMA_Start_IT+0x4a4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00e      	beq.n	80038f4 <HAL_DMA_Start_IT+0x430>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a24      	ldr	r2, [pc, #144]	@ (800396c <HAL_DMA_Start_IT+0x4a8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d009      	beq.n	80038f4 <HAL_DMA_Start_IT+0x430>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a22      	ldr	r2, [pc, #136]	@ (8003970 <HAL_DMA_Start_IT+0x4ac>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d004      	beq.n	80038f4 <HAL_DMA_Start_IT+0x430>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a21      	ldr	r2, [pc, #132]	@ (8003974 <HAL_DMA_Start_IT+0x4b0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d108      	bne.n	8003906 <HAL_DMA_Start_IT+0x442>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	e012      	b.n	800392c <HAL_DMA_Start_IT+0x468>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0201 	orr.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	e009      	b.n	800392c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800391e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800392c:	7dfb      	ldrb	r3, [r7, #23]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40020010 	.word	0x40020010
 800393c:	40020028 	.word	0x40020028
 8003940:	40020040 	.word	0x40020040
 8003944:	40020058 	.word	0x40020058
 8003948:	40020070 	.word	0x40020070
 800394c:	40020088 	.word	0x40020088
 8003950:	400200a0 	.word	0x400200a0
 8003954:	400200b8 	.word	0x400200b8
 8003958:	40020410 	.word	0x40020410
 800395c:	40020428 	.word	0x40020428
 8003960:	40020440 	.word	0x40020440
 8003964:	40020458 	.word	0x40020458
 8003968:	40020470 	.word	0x40020470
 800396c:	40020488 	.word	0x40020488
 8003970:	400204a0 	.word	0x400204a0
 8003974:	400204b8 	.word	0x400204b8
 8003978:	58025408 	.word	0x58025408
 800397c:	5802541c 	.word	0x5802541c
 8003980:	58025430 	.word	0x58025430
 8003984:	58025444 	.word	0x58025444
 8003988:	58025458 	.word	0x58025458
 800398c:	5802546c 	.word	0x5802546c
 8003990:	58025480 	.word	0x58025480
 8003994:	58025494 	.word	0x58025494

08003998 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80039a0:	f7fe fd84 	bl	80024ac <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e2dc      	b.n	8003f6a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d008      	beq.n	80039ce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2280      	movs	r2, #128	@ 0x80
 80039c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e2cd      	b.n	8003f6a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a76      	ldr	r2, [pc, #472]	@ (8003bac <HAL_DMA_Abort+0x214>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d04a      	beq.n	8003a6e <HAL_DMA_Abort+0xd6>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a74      	ldr	r2, [pc, #464]	@ (8003bb0 <HAL_DMA_Abort+0x218>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d045      	beq.n	8003a6e <HAL_DMA_Abort+0xd6>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a73      	ldr	r2, [pc, #460]	@ (8003bb4 <HAL_DMA_Abort+0x21c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d040      	beq.n	8003a6e <HAL_DMA_Abort+0xd6>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a71      	ldr	r2, [pc, #452]	@ (8003bb8 <HAL_DMA_Abort+0x220>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d03b      	beq.n	8003a6e <HAL_DMA_Abort+0xd6>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a70      	ldr	r2, [pc, #448]	@ (8003bbc <HAL_DMA_Abort+0x224>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d036      	beq.n	8003a6e <HAL_DMA_Abort+0xd6>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a6e      	ldr	r2, [pc, #440]	@ (8003bc0 <HAL_DMA_Abort+0x228>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d031      	beq.n	8003a6e <HAL_DMA_Abort+0xd6>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a6d      	ldr	r2, [pc, #436]	@ (8003bc4 <HAL_DMA_Abort+0x22c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d02c      	beq.n	8003a6e <HAL_DMA_Abort+0xd6>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a6b      	ldr	r2, [pc, #428]	@ (8003bc8 <HAL_DMA_Abort+0x230>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d027      	beq.n	8003a6e <HAL_DMA_Abort+0xd6>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a6a      	ldr	r2, [pc, #424]	@ (8003bcc <HAL_DMA_Abort+0x234>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d022      	beq.n	8003a6e <HAL_DMA_Abort+0xd6>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a68      	ldr	r2, [pc, #416]	@ (8003bd0 <HAL_DMA_Abort+0x238>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d01d      	beq.n	8003a6e <HAL_DMA_Abort+0xd6>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a67      	ldr	r2, [pc, #412]	@ (8003bd4 <HAL_DMA_Abort+0x23c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d018      	beq.n	8003a6e <HAL_DMA_Abort+0xd6>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a65      	ldr	r2, [pc, #404]	@ (8003bd8 <HAL_DMA_Abort+0x240>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d013      	beq.n	8003a6e <HAL_DMA_Abort+0xd6>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a64      	ldr	r2, [pc, #400]	@ (8003bdc <HAL_DMA_Abort+0x244>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00e      	beq.n	8003a6e <HAL_DMA_Abort+0xd6>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a62      	ldr	r2, [pc, #392]	@ (8003be0 <HAL_DMA_Abort+0x248>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d009      	beq.n	8003a6e <HAL_DMA_Abort+0xd6>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a61      	ldr	r2, [pc, #388]	@ (8003be4 <HAL_DMA_Abort+0x24c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d004      	beq.n	8003a6e <HAL_DMA_Abort+0xd6>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a5f      	ldr	r2, [pc, #380]	@ (8003be8 <HAL_DMA_Abort+0x250>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d101      	bne.n	8003a72 <HAL_DMA_Abort+0xda>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <HAL_DMA_Abort+0xdc>
 8003a72:	2300      	movs	r3, #0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d013      	beq.n	8003aa0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 021e 	bic.w	r2, r2, #30
 8003a86:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695a      	ldr	r2, [r3, #20]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a96:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	e00a      	b.n	8003ab6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 020e 	bic.w	r2, r2, #14
 8003aae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a3c      	ldr	r2, [pc, #240]	@ (8003bac <HAL_DMA_Abort+0x214>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d072      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a3a      	ldr	r2, [pc, #232]	@ (8003bb0 <HAL_DMA_Abort+0x218>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d06d      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a39      	ldr	r2, [pc, #228]	@ (8003bb4 <HAL_DMA_Abort+0x21c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d068      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a37      	ldr	r2, [pc, #220]	@ (8003bb8 <HAL_DMA_Abort+0x220>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d063      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a36      	ldr	r2, [pc, #216]	@ (8003bbc <HAL_DMA_Abort+0x224>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d05e      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a34      	ldr	r2, [pc, #208]	@ (8003bc0 <HAL_DMA_Abort+0x228>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d059      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a33      	ldr	r2, [pc, #204]	@ (8003bc4 <HAL_DMA_Abort+0x22c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d054      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a31      	ldr	r2, [pc, #196]	@ (8003bc8 <HAL_DMA_Abort+0x230>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d04f      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a30      	ldr	r2, [pc, #192]	@ (8003bcc <HAL_DMA_Abort+0x234>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d04a      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a2e      	ldr	r2, [pc, #184]	@ (8003bd0 <HAL_DMA_Abort+0x238>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d045      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a2d      	ldr	r2, [pc, #180]	@ (8003bd4 <HAL_DMA_Abort+0x23c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d040      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a2b      	ldr	r2, [pc, #172]	@ (8003bd8 <HAL_DMA_Abort+0x240>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d03b      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a2a      	ldr	r2, [pc, #168]	@ (8003bdc <HAL_DMA_Abort+0x244>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d036      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a28      	ldr	r2, [pc, #160]	@ (8003be0 <HAL_DMA_Abort+0x248>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d031      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a27      	ldr	r2, [pc, #156]	@ (8003be4 <HAL_DMA_Abort+0x24c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d02c      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a25      	ldr	r2, [pc, #148]	@ (8003be8 <HAL_DMA_Abort+0x250>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d027      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a24      	ldr	r2, [pc, #144]	@ (8003bec <HAL_DMA_Abort+0x254>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d022      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a22      	ldr	r2, [pc, #136]	@ (8003bf0 <HAL_DMA_Abort+0x258>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d01d      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a21      	ldr	r2, [pc, #132]	@ (8003bf4 <HAL_DMA_Abort+0x25c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d018      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf8 <HAL_DMA_Abort+0x260>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d013      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a1e      	ldr	r2, [pc, #120]	@ (8003bfc <HAL_DMA_Abort+0x264>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00e      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003c00 <HAL_DMA_Abort+0x268>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d009      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a1b      	ldr	r2, [pc, #108]	@ (8003c04 <HAL_DMA_Abort+0x26c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d004      	beq.n	8003ba6 <HAL_DMA_Abort+0x20e>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a19      	ldr	r2, [pc, #100]	@ (8003c08 <HAL_DMA_Abort+0x270>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d132      	bne.n	8003c0c <HAL_DMA_Abort+0x274>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e031      	b.n	8003c0e <HAL_DMA_Abort+0x276>
 8003baa:	bf00      	nop
 8003bac:	40020010 	.word	0x40020010
 8003bb0:	40020028 	.word	0x40020028
 8003bb4:	40020040 	.word	0x40020040
 8003bb8:	40020058 	.word	0x40020058
 8003bbc:	40020070 	.word	0x40020070
 8003bc0:	40020088 	.word	0x40020088
 8003bc4:	400200a0 	.word	0x400200a0
 8003bc8:	400200b8 	.word	0x400200b8
 8003bcc:	40020410 	.word	0x40020410
 8003bd0:	40020428 	.word	0x40020428
 8003bd4:	40020440 	.word	0x40020440
 8003bd8:	40020458 	.word	0x40020458
 8003bdc:	40020470 	.word	0x40020470
 8003be0:	40020488 	.word	0x40020488
 8003be4:	400204a0 	.word	0x400204a0
 8003be8:	400204b8 	.word	0x400204b8
 8003bec:	58025408 	.word	0x58025408
 8003bf0:	5802541c 	.word	0x5802541c
 8003bf4:	58025430 	.word	0x58025430
 8003bf8:	58025444 	.word	0x58025444
 8003bfc:	58025458 	.word	0x58025458
 8003c00:	5802546c 	.word	0x5802546c
 8003c04:	58025480 	.word	0x58025480
 8003c08:	58025494 	.word	0x58025494
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d007      	beq.n	8003c22 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c20:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a6d      	ldr	r2, [pc, #436]	@ (8003ddc <HAL_DMA_Abort+0x444>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d04a      	beq.n	8003cc2 <HAL_DMA_Abort+0x32a>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a6b      	ldr	r2, [pc, #428]	@ (8003de0 <HAL_DMA_Abort+0x448>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d045      	beq.n	8003cc2 <HAL_DMA_Abort+0x32a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a6a      	ldr	r2, [pc, #424]	@ (8003de4 <HAL_DMA_Abort+0x44c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d040      	beq.n	8003cc2 <HAL_DMA_Abort+0x32a>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a68      	ldr	r2, [pc, #416]	@ (8003de8 <HAL_DMA_Abort+0x450>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d03b      	beq.n	8003cc2 <HAL_DMA_Abort+0x32a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a67      	ldr	r2, [pc, #412]	@ (8003dec <HAL_DMA_Abort+0x454>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d036      	beq.n	8003cc2 <HAL_DMA_Abort+0x32a>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a65      	ldr	r2, [pc, #404]	@ (8003df0 <HAL_DMA_Abort+0x458>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d031      	beq.n	8003cc2 <HAL_DMA_Abort+0x32a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a64      	ldr	r2, [pc, #400]	@ (8003df4 <HAL_DMA_Abort+0x45c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d02c      	beq.n	8003cc2 <HAL_DMA_Abort+0x32a>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a62      	ldr	r2, [pc, #392]	@ (8003df8 <HAL_DMA_Abort+0x460>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d027      	beq.n	8003cc2 <HAL_DMA_Abort+0x32a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a61      	ldr	r2, [pc, #388]	@ (8003dfc <HAL_DMA_Abort+0x464>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d022      	beq.n	8003cc2 <HAL_DMA_Abort+0x32a>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a5f      	ldr	r2, [pc, #380]	@ (8003e00 <HAL_DMA_Abort+0x468>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01d      	beq.n	8003cc2 <HAL_DMA_Abort+0x32a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a5e      	ldr	r2, [pc, #376]	@ (8003e04 <HAL_DMA_Abort+0x46c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d018      	beq.n	8003cc2 <HAL_DMA_Abort+0x32a>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a5c      	ldr	r2, [pc, #368]	@ (8003e08 <HAL_DMA_Abort+0x470>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d013      	beq.n	8003cc2 <HAL_DMA_Abort+0x32a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a5b      	ldr	r2, [pc, #364]	@ (8003e0c <HAL_DMA_Abort+0x474>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d00e      	beq.n	8003cc2 <HAL_DMA_Abort+0x32a>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a59      	ldr	r2, [pc, #356]	@ (8003e10 <HAL_DMA_Abort+0x478>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d009      	beq.n	8003cc2 <HAL_DMA_Abort+0x32a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a58      	ldr	r2, [pc, #352]	@ (8003e14 <HAL_DMA_Abort+0x47c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d004      	beq.n	8003cc2 <HAL_DMA_Abort+0x32a>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a56      	ldr	r2, [pc, #344]	@ (8003e18 <HAL_DMA_Abort+0x480>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d108      	bne.n	8003cd4 <HAL_DMA_Abort+0x33c>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0201 	bic.w	r2, r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	e007      	b.n	8003ce4 <HAL_DMA_Abort+0x34c>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0201 	bic.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003ce4:	e013      	b.n	8003d0e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ce6:	f7fe fbe1 	bl	80024ac <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b05      	cmp	r3, #5
 8003cf2:	d90c      	bls.n	8003d0e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e12d      	b.n	8003f6a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1e5      	bne.n	8003ce6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a2f      	ldr	r2, [pc, #188]	@ (8003ddc <HAL_DMA_Abort+0x444>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d04a      	beq.n	8003dba <HAL_DMA_Abort+0x422>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a2d      	ldr	r2, [pc, #180]	@ (8003de0 <HAL_DMA_Abort+0x448>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d045      	beq.n	8003dba <HAL_DMA_Abort+0x422>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a2c      	ldr	r2, [pc, #176]	@ (8003de4 <HAL_DMA_Abort+0x44c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d040      	beq.n	8003dba <HAL_DMA_Abort+0x422>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a2a      	ldr	r2, [pc, #168]	@ (8003de8 <HAL_DMA_Abort+0x450>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d03b      	beq.n	8003dba <HAL_DMA_Abort+0x422>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a29      	ldr	r2, [pc, #164]	@ (8003dec <HAL_DMA_Abort+0x454>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d036      	beq.n	8003dba <HAL_DMA_Abort+0x422>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a27      	ldr	r2, [pc, #156]	@ (8003df0 <HAL_DMA_Abort+0x458>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d031      	beq.n	8003dba <HAL_DMA_Abort+0x422>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a26      	ldr	r2, [pc, #152]	@ (8003df4 <HAL_DMA_Abort+0x45c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d02c      	beq.n	8003dba <HAL_DMA_Abort+0x422>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a24      	ldr	r2, [pc, #144]	@ (8003df8 <HAL_DMA_Abort+0x460>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d027      	beq.n	8003dba <HAL_DMA_Abort+0x422>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a23      	ldr	r2, [pc, #140]	@ (8003dfc <HAL_DMA_Abort+0x464>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d022      	beq.n	8003dba <HAL_DMA_Abort+0x422>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a21      	ldr	r2, [pc, #132]	@ (8003e00 <HAL_DMA_Abort+0x468>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d01d      	beq.n	8003dba <HAL_DMA_Abort+0x422>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a20      	ldr	r2, [pc, #128]	@ (8003e04 <HAL_DMA_Abort+0x46c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d018      	beq.n	8003dba <HAL_DMA_Abort+0x422>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003e08 <HAL_DMA_Abort+0x470>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <HAL_DMA_Abort+0x422>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a1d      	ldr	r2, [pc, #116]	@ (8003e0c <HAL_DMA_Abort+0x474>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00e      	beq.n	8003dba <HAL_DMA_Abort+0x422>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e10 <HAL_DMA_Abort+0x478>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d009      	beq.n	8003dba <HAL_DMA_Abort+0x422>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a1a      	ldr	r2, [pc, #104]	@ (8003e14 <HAL_DMA_Abort+0x47c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d004      	beq.n	8003dba <HAL_DMA_Abort+0x422>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a18      	ldr	r2, [pc, #96]	@ (8003e18 <HAL_DMA_Abort+0x480>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d101      	bne.n	8003dbe <HAL_DMA_Abort+0x426>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <HAL_DMA_Abort+0x428>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d02b      	beq.n	8003e1c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dce:	f003 031f 	and.w	r3, r3, #31
 8003dd2:	223f      	movs	r2, #63	@ 0x3f
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	609a      	str	r2, [r3, #8]
 8003dda:	e02a      	b.n	8003e32 <HAL_DMA_Abort+0x49a>
 8003ddc:	40020010 	.word	0x40020010
 8003de0:	40020028 	.word	0x40020028
 8003de4:	40020040 	.word	0x40020040
 8003de8:	40020058 	.word	0x40020058
 8003dec:	40020070 	.word	0x40020070
 8003df0:	40020088 	.word	0x40020088
 8003df4:	400200a0 	.word	0x400200a0
 8003df8:	400200b8 	.word	0x400200b8
 8003dfc:	40020410 	.word	0x40020410
 8003e00:	40020428 	.word	0x40020428
 8003e04:	40020440 	.word	0x40020440
 8003e08:	40020458 	.word	0x40020458
 8003e0c:	40020470 	.word	0x40020470
 8003e10:	40020488 	.word	0x40020488
 8003e14:	400204a0 	.word	0x400204a0
 8003e18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e20:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e26:	f003 031f 	and.w	r3, r3, #31
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	409a      	lsls	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a4f      	ldr	r2, [pc, #316]	@ (8003f74 <HAL_DMA_Abort+0x5dc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d072      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a4d      	ldr	r2, [pc, #308]	@ (8003f78 <HAL_DMA_Abort+0x5e0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d06d      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a4c      	ldr	r2, [pc, #304]	@ (8003f7c <HAL_DMA_Abort+0x5e4>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d068      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a4a      	ldr	r2, [pc, #296]	@ (8003f80 <HAL_DMA_Abort+0x5e8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d063      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a49      	ldr	r2, [pc, #292]	@ (8003f84 <HAL_DMA_Abort+0x5ec>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d05e      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a47      	ldr	r2, [pc, #284]	@ (8003f88 <HAL_DMA_Abort+0x5f0>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d059      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a46      	ldr	r2, [pc, #280]	@ (8003f8c <HAL_DMA_Abort+0x5f4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d054      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a44      	ldr	r2, [pc, #272]	@ (8003f90 <HAL_DMA_Abort+0x5f8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d04f      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a43      	ldr	r2, [pc, #268]	@ (8003f94 <HAL_DMA_Abort+0x5fc>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d04a      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a41      	ldr	r2, [pc, #260]	@ (8003f98 <HAL_DMA_Abort+0x600>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d045      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a40      	ldr	r2, [pc, #256]	@ (8003f9c <HAL_DMA_Abort+0x604>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d040      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a3e      	ldr	r2, [pc, #248]	@ (8003fa0 <HAL_DMA_Abort+0x608>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d03b      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a3d      	ldr	r2, [pc, #244]	@ (8003fa4 <HAL_DMA_Abort+0x60c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d036      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a3b      	ldr	r2, [pc, #236]	@ (8003fa8 <HAL_DMA_Abort+0x610>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d031      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a3a      	ldr	r2, [pc, #232]	@ (8003fac <HAL_DMA_Abort+0x614>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d02c      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a38      	ldr	r2, [pc, #224]	@ (8003fb0 <HAL_DMA_Abort+0x618>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d027      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a37      	ldr	r2, [pc, #220]	@ (8003fb4 <HAL_DMA_Abort+0x61c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d022      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a35      	ldr	r2, [pc, #212]	@ (8003fb8 <HAL_DMA_Abort+0x620>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01d      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a34      	ldr	r2, [pc, #208]	@ (8003fbc <HAL_DMA_Abort+0x624>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d018      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a32      	ldr	r2, [pc, #200]	@ (8003fc0 <HAL_DMA_Abort+0x628>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a31      	ldr	r2, [pc, #196]	@ (8003fc4 <HAL_DMA_Abort+0x62c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00e      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a2f      	ldr	r2, [pc, #188]	@ (8003fc8 <HAL_DMA_Abort+0x630>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d009      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a2e      	ldr	r2, [pc, #184]	@ (8003fcc <HAL_DMA_Abort+0x634>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d004      	beq.n	8003f22 <HAL_DMA_Abort+0x58a>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a2c      	ldr	r2, [pc, #176]	@ (8003fd0 <HAL_DMA_Abort+0x638>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d101      	bne.n	8003f26 <HAL_DMA_Abort+0x58e>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <HAL_DMA_Abort+0x590>
 8003f26:	2300      	movs	r3, #0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d015      	beq.n	8003f58 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003f34:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00c      	beq.n	8003f58 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f4c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003f56:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40020010 	.word	0x40020010
 8003f78:	40020028 	.word	0x40020028
 8003f7c:	40020040 	.word	0x40020040
 8003f80:	40020058 	.word	0x40020058
 8003f84:	40020070 	.word	0x40020070
 8003f88:	40020088 	.word	0x40020088
 8003f8c:	400200a0 	.word	0x400200a0
 8003f90:	400200b8 	.word	0x400200b8
 8003f94:	40020410 	.word	0x40020410
 8003f98:	40020428 	.word	0x40020428
 8003f9c:	40020440 	.word	0x40020440
 8003fa0:	40020458 	.word	0x40020458
 8003fa4:	40020470 	.word	0x40020470
 8003fa8:	40020488 	.word	0x40020488
 8003fac:	400204a0 	.word	0x400204a0
 8003fb0:	400204b8 	.word	0x400204b8
 8003fb4:	58025408 	.word	0x58025408
 8003fb8:	5802541c 	.word	0x5802541c
 8003fbc:	58025430 	.word	0x58025430
 8003fc0:	58025444 	.word	0x58025444
 8003fc4:	58025458 	.word	0x58025458
 8003fc8:	5802546c 	.word	0x5802546c
 8003fcc:	58025480 	.word	0x58025480
 8003fd0:	58025494 	.word	0x58025494

08003fd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e237      	b.n	8004456 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d004      	beq.n	8003ffc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2280      	movs	r2, #128	@ 0x80
 8003ff6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e22c      	b.n	8004456 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a5c      	ldr	r2, [pc, #368]	@ (8004174 <HAL_DMA_Abort_IT+0x1a0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d04a      	beq.n	800409c <HAL_DMA_Abort_IT+0xc8>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a5b      	ldr	r2, [pc, #364]	@ (8004178 <HAL_DMA_Abort_IT+0x1a4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d045      	beq.n	800409c <HAL_DMA_Abort_IT+0xc8>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a59      	ldr	r2, [pc, #356]	@ (800417c <HAL_DMA_Abort_IT+0x1a8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d040      	beq.n	800409c <HAL_DMA_Abort_IT+0xc8>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a58      	ldr	r2, [pc, #352]	@ (8004180 <HAL_DMA_Abort_IT+0x1ac>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d03b      	beq.n	800409c <HAL_DMA_Abort_IT+0xc8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a56      	ldr	r2, [pc, #344]	@ (8004184 <HAL_DMA_Abort_IT+0x1b0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d036      	beq.n	800409c <HAL_DMA_Abort_IT+0xc8>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a55      	ldr	r2, [pc, #340]	@ (8004188 <HAL_DMA_Abort_IT+0x1b4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d031      	beq.n	800409c <HAL_DMA_Abort_IT+0xc8>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a53      	ldr	r2, [pc, #332]	@ (800418c <HAL_DMA_Abort_IT+0x1b8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d02c      	beq.n	800409c <HAL_DMA_Abort_IT+0xc8>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a52      	ldr	r2, [pc, #328]	@ (8004190 <HAL_DMA_Abort_IT+0x1bc>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d027      	beq.n	800409c <HAL_DMA_Abort_IT+0xc8>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a50      	ldr	r2, [pc, #320]	@ (8004194 <HAL_DMA_Abort_IT+0x1c0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d022      	beq.n	800409c <HAL_DMA_Abort_IT+0xc8>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a4f      	ldr	r2, [pc, #316]	@ (8004198 <HAL_DMA_Abort_IT+0x1c4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d01d      	beq.n	800409c <HAL_DMA_Abort_IT+0xc8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a4d      	ldr	r2, [pc, #308]	@ (800419c <HAL_DMA_Abort_IT+0x1c8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d018      	beq.n	800409c <HAL_DMA_Abort_IT+0xc8>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a4c      	ldr	r2, [pc, #304]	@ (80041a0 <HAL_DMA_Abort_IT+0x1cc>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d013      	beq.n	800409c <HAL_DMA_Abort_IT+0xc8>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a4a      	ldr	r2, [pc, #296]	@ (80041a4 <HAL_DMA_Abort_IT+0x1d0>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00e      	beq.n	800409c <HAL_DMA_Abort_IT+0xc8>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a49      	ldr	r2, [pc, #292]	@ (80041a8 <HAL_DMA_Abort_IT+0x1d4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d009      	beq.n	800409c <HAL_DMA_Abort_IT+0xc8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a47      	ldr	r2, [pc, #284]	@ (80041ac <HAL_DMA_Abort_IT+0x1d8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d004      	beq.n	800409c <HAL_DMA_Abort_IT+0xc8>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a46      	ldr	r2, [pc, #280]	@ (80041b0 <HAL_DMA_Abort_IT+0x1dc>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d101      	bne.n	80040a0 <HAL_DMA_Abort_IT+0xcc>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <HAL_DMA_Abort_IT+0xce>
 80040a0:	2300      	movs	r3, #0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 8086 	beq.w	80041b4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2204      	movs	r2, #4
 80040ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a2f      	ldr	r2, [pc, #188]	@ (8004174 <HAL_DMA_Abort_IT+0x1a0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d04a      	beq.n	8004150 <HAL_DMA_Abort_IT+0x17c>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a2e      	ldr	r2, [pc, #184]	@ (8004178 <HAL_DMA_Abort_IT+0x1a4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d045      	beq.n	8004150 <HAL_DMA_Abort_IT+0x17c>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a2c      	ldr	r2, [pc, #176]	@ (800417c <HAL_DMA_Abort_IT+0x1a8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d040      	beq.n	8004150 <HAL_DMA_Abort_IT+0x17c>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a2b      	ldr	r2, [pc, #172]	@ (8004180 <HAL_DMA_Abort_IT+0x1ac>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d03b      	beq.n	8004150 <HAL_DMA_Abort_IT+0x17c>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a29      	ldr	r2, [pc, #164]	@ (8004184 <HAL_DMA_Abort_IT+0x1b0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d036      	beq.n	8004150 <HAL_DMA_Abort_IT+0x17c>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a28      	ldr	r2, [pc, #160]	@ (8004188 <HAL_DMA_Abort_IT+0x1b4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d031      	beq.n	8004150 <HAL_DMA_Abort_IT+0x17c>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a26      	ldr	r2, [pc, #152]	@ (800418c <HAL_DMA_Abort_IT+0x1b8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d02c      	beq.n	8004150 <HAL_DMA_Abort_IT+0x17c>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a25      	ldr	r2, [pc, #148]	@ (8004190 <HAL_DMA_Abort_IT+0x1bc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d027      	beq.n	8004150 <HAL_DMA_Abort_IT+0x17c>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a23      	ldr	r2, [pc, #140]	@ (8004194 <HAL_DMA_Abort_IT+0x1c0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d022      	beq.n	8004150 <HAL_DMA_Abort_IT+0x17c>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a22      	ldr	r2, [pc, #136]	@ (8004198 <HAL_DMA_Abort_IT+0x1c4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d01d      	beq.n	8004150 <HAL_DMA_Abort_IT+0x17c>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a20      	ldr	r2, [pc, #128]	@ (800419c <HAL_DMA_Abort_IT+0x1c8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d018      	beq.n	8004150 <HAL_DMA_Abort_IT+0x17c>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a1f      	ldr	r2, [pc, #124]	@ (80041a0 <HAL_DMA_Abort_IT+0x1cc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d013      	beq.n	8004150 <HAL_DMA_Abort_IT+0x17c>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1d      	ldr	r2, [pc, #116]	@ (80041a4 <HAL_DMA_Abort_IT+0x1d0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00e      	beq.n	8004150 <HAL_DMA_Abort_IT+0x17c>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a1c      	ldr	r2, [pc, #112]	@ (80041a8 <HAL_DMA_Abort_IT+0x1d4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d009      	beq.n	8004150 <HAL_DMA_Abort_IT+0x17c>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1a      	ldr	r2, [pc, #104]	@ (80041ac <HAL_DMA_Abort_IT+0x1d8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d004      	beq.n	8004150 <HAL_DMA_Abort_IT+0x17c>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a19      	ldr	r2, [pc, #100]	@ (80041b0 <HAL_DMA_Abort_IT+0x1dc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d108      	bne.n	8004162 <HAL_DMA_Abort_IT+0x18e>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0201 	bic.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	e178      	b.n	8004454 <HAL_DMA_Abort_IT+0x480>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	e16f      	b.n	8004454 <HAL_DMA_Abort_IT+0x480>
 8004174:	40020010 	.word	0x40020010
 8004178:	40020028 	.word	0x40020028
 800417c:	40020040 	.word	0x40020040
 8004180:	40020058 	.word	0x40020058
 8004184:	40020070 	.word	0x40020070
 8004188:	40020088 	.word	0x40020088
 800418c:	400200a0 	.word	0x400200a0
 8004190:	400200b8 	.word	0x400200b8
 8004194:	40020410 	.word	0x40020410
 8004198:	40020428 	.word	0x40020428
 800419c:	40020440 	.word	0x40020440
 80041a0:	40020458 	.word	0x40020458
 80041a4:	40020470 	.word	0x40020470
 80041a8:	40020488 	.word	0x40020488
 80041ac:	400204a0 	.word	0x400204a0
 80041b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 020e 	bic.w	r2, r2, #14
 80041c2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a6c      	ldr	r2, [pc, #432]	@ (800437c <HAL_DMA_Abort_IT+0x3a8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d04a      	beq.n	8004264 <HAL_DMA_Abort_IT+0x290>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a6b      	ldr	r2, [pc, #428]	@ (8004380 <HAL_DMA_Abort_IT+0x3ac>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d045      	beq.n	8004264 <HAL_DMA_Abort_IT+0x290>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a69      	ldr	r2, [pc, #420]	@ (8004384 <HAL_DMA_Abort_IT+0x3b0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d040      	beq.n	8004264 <HAL_DMA_Abort_IT+0x290>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a68      	ldr	r2, [pc, #416]	@ (8004388 <HAL_DMA_Abort_IT+0x3b4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d03b      	beq.n	8004264 <HAL_DMA_Abort_IT+0x290>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a66      	ldr	r2, [pc, #408]	@ (800438c <HAL_DMA_Abort_IT+0x3b8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d036      	beq.n	8004264 <HAL_DMA_Abort_IT+0x290>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a65      	ldr	r2, [pc, #404]	@ (8004390 <HAL_DMA_Abort_IT+0x3bc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d031      	beq.n	8004264 <HAL_DMA_Abort_IT+0x290>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a63      	ldr	r2, [pc, #396]	@ (8004394 <HAL_DMA_Abort_IT+0x3c0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d02c      	beq.n	8004264 <HAL_DMA_Abort_IT+0x290>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a62      	ldr	r2, [pc, #392]	@ (8004398 <HAL_DMA_Abort_IT+0x3c4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d027      	beq.n	8004264 <HAL_DMA_Abort_IT+0x290>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a60      	ldr	r2, [pc, #384]	@ (800439c <HAL_DMA_Abort_IT+0x3c8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d022      	beq.n	8004264 <HAL_DMA_Abort_IT+0x290>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a5f      	ldr	r2, [pc, #380]	@ (80043a0 <HAL_DMA_Abort_IT+0x3cc>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d01d      	beq.n	8004264 <HAL_DMA_Abort_IT+0x290>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a5d      	ldr	r2, [pc, #372]	@ (80043a4 <HAL_DMA_Abort_IT+0x3d0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d018      	beq.n	8004264 <HAL_DMA_Abort_IT+0x290>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a5c      	ldr	r2, [pc, #368]	@ (80043a8 <HAL_DMA_Abort_IT+0x3d4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d013      	beq.n	8004264 <HAL_DMA_Abort_IT+0x290>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a5a      	ldr	r2, [pc, #360]	@ (80043ac <HAL_DMA_Abort_IT+0x3d8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00e      	beq.n	8004264 <HAL_DMA_Abort_IT+0x290>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a59      	ldr	r2, [pc, #356]	@ (80043b0 <HAL_DMA_Abort_IT+0x3dc>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d009      	beq.n	8004264 <HAL_DMA_Abort_IT+0x290>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a57      	ldr	r2, [pc, #348]	@ (80043b4 <HAL_DMA_Abort_IT+0x3e0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d004      	beq.n	8004264 <HAL_DMA_Abort_IT+0x290>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a56      	ldr	r2, [pc, #344]	@ (80043b8 <HAL_DMA_Abort_IT+0x3e4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d108      	bne.n	8004276 <HAL_DMA_Abort_IT+0x2a2>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0201 	bic.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	e007      	b.n	8004286 <HAL_DMA_Abort_IT+0x2b2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0201 	bic.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a3c      	ldr	r2, [pc, #240]	@ (800437c <HAL_DMA_Abort_IT+0x3a8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d072      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a3a      	ldr	r2, [pc, #232]	@ (8004380 <HAL_DMA_Abort_IT+0x3ac>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d06d      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a39      	ldr	r2, [pc, #228]	@ (8004384 <HAL_DMA_Abort_IT+0x3b0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d068      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a37      	ldr	r2, [pc, #220]	@ (8004388 <HAL_DMA_Abort_IT+0x3b4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d063      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a36      	ldr	r2, [pc, #216]	@ (800438c <HAL_DMA_Abort_IT+0x3b8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d05e      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a34      	ldr	r2, [pc, #208]	@ (8004390 <HAL_DMA_Abort_IT+0x3bc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d059      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a33      	ldr	r2, [pc, #204]	@ (8004394 <HAL_DMA_Abort_IT+0x3c0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d054      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a31      	ldr	r2, [pc, #196]	@ (8004398 <HAL_DMA_Abort_IT+0x3c4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d04f      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a30      	ldr	r2, [pc, #192]	@ (800439c <HAL_DMA_Abort_IT+0x3c8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d04a      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a2e      	ldr	r2, [pc, #184]	@ (80043a0 <HAL_DMA_Abort_IT+0x3cc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d045      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a2d      	ldr	r2, [pc, #180]	@ (80043a4 <HAL_DMA_Abort_IT+0x3d0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d040      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a2b      	ldr	r2, [pc, #172]	@ (80043a8 <HAL_DMA_Abort_IT+0x3d4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d03b      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a2a      	ldr	r2, [pc, #168]	@ (80043ac <HAL_DMA_Abort_IT+0x3d8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d036      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a28      	ldr	r2, [pc, #160]	@ (80043b0 <HAL_DMA_Abort_IT+0x3dc>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d031      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a27      	ldr	r2, [pc, #156]	@ (80043b4 <HAL_DMA_Abort_IT+0x3e0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d02c      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a25      	ldr	r2, [pc, #148]	@ (80043b8 <HAL_DMA_Abort_IT+0x3e4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d027      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a24      	ldr	r2, [pc, #144]	@ (80043bc <HAL_DMA_Abort_IT+0x3e8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d022      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a22      	ldr	r2, [pc, #136]	@ (80043c0 <HAL_DMA_Abort_IT+0x3ec>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d01d      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a21      	ldr	r2, [pc, #132]	@ (80043c4 <HAL_DMA_Abort_IT+0x3f0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d018      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a1f      	ldr	r2, [pc, #124]	@ (80043c8 <HAL_DMA_Abort_IT+0x3f4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d013      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a1e      	ldr	r2, [pc, #120]	@ (80043cc <HAL_DMA_Abort_IT+0x3f8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d00e      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a1c      	ldr	r2, [pc, #112]	@ (80043d0 <HAL_DMA_Abort_IT+0x3fc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d009      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a1b      	ldr	r2, [pc, #108]	@ (80043d4 <HAL_DMA_Abort_IT+0x400>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d004      	beq.n	8004376 <HAL_DMA_Abort_IT+0x3a2>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a19      	ldr	r2, [pc, #100]	@ (80043d8 <HAL_DMA_Abort_IT+0x404>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d132      	bne.n	80043dc <HAL_DMA_Abort_IT+0x408>
 8004376:	2301      	movs	r3, #1
 8004378:	e031      	b.n	80043de <HAL_DMA_Abort_IT+0x40a>
 800437a:	bf00      	nop
 800437c:	40020010 	.word	0x40020010
 8004380:	40020028 	.word	0x40020028
 8004384:	40020040 	.word	0x40020040
 8004388:	40020058 	.word	0x40020058
 800438c:	40020070 	.word	0x40020070
 8004390:	40020088 	.word	0x40020088
 8004394:	400200a0 	.word	0x400200a0
 8004398:	400200b8 	.word	0x400200b8
 800439c:	40020410 	.word	0x40020410
 80043a0:	40020428 	.word	0x40020428
 80043a4:	40020440 	.word	0x40020440
 80043a8:	40020458 	.word	0x40020458
 80043ac:	40020470 	.word	0x40020470
 80043b0:	40020488 	.word	0x40020488
 80043b4:	400204a0 	.word	0x400204a0
 80043b8:	400204b8 	.word	0x400204b8
 80043bc:	58025408 	.word	0x58025408
 80043c0:	5802541c 	.word	0x5802541c
 80043c4:	58025430 	.word	0x58025430
 80043c8:	58025444 	.word	0x58025444
 80043cc:	58025458 	.word	0x58025458
 80043d0:	5802546c 	.word	0x5802546c
 80043d4:	58025480 	.word	0x58025480
 80043d8:	58025494 	.word	0x58025494
 80043dc:	2300      	movs	r3, #0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d028      	beq.n	8004434 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043f0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043fc:	f003 031f 	and.w	r3, r3, #31
 8004400:	2201      	movs	r2, #1
 8004402:	409a      	lsls	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004410:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00c      	beq.n	8004434 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004424:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004428:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004432:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop

08004460 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b08a      	sub	sp, #40	@ 0x28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800446c:	4b67      	ldr	r3, [pc, #412]	@ (800460c <HAL_DMA_IRQHandler+0x1ac>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a67      	ldr	r2, [pc, #412]	@ (8004610 <HAL_DMA_IRQHandler+0x1b0>)
 8004472:	fba2 2303 	umull	r2, r3, r2, r3
 8004476:	0a9b      	lsrs	r3, r3, #10
 8004478:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004484:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a5f      	ldr	r2, [pc, #380]	@ (8004614 <HAL_DMA_IRQHandler+0x1b4>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d04a      	beq.n	8004532 <HAL_DMA_IRQHandler+0xd2>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a5d      	ldr	r2, [pc, #372]	@ (8004618 <HAL_DMA_IRQHandler+0x1b8>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d045      	beq.n	8004532 <HAL_DMA_IRQHandler+0xd2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a5c      	ldr	r2, [pc, #368]	@ (800461c <HAL_DMA_IRQHandler+0x1bc>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d040      	beq.n	8004532 <HAL_DMA_IRQHandler+0xd2>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a5a      	ldr	r2, [pc, #360]	@ (8004620 <HAL_DMA_IRQHandler+0x1c0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d03b      	beq.n	8004532 <HAL_DMA_IRQHandler+0xd2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a59      	ldr	r2, [pc, #356]	@ (8004624 <HAL_DMA_IRQHandler+0x1c4>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d036      	beq.n	8004532 <HAL_DMA_IRQHandler+0xd2>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a57      	ldr	r2, [pc, #348]	@ (8004628 <HAL_DMA_IRQHandler+0x1c8>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d031      	beq.n	8004532 <HAL_DMA_IRQHandler+0xd2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a56      	ldr	r2, [pc, #344]	@ (800462c <HAL_DMA_IRQHandler+0x1cc>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d02c      	beq.n	8004532 <HAL_DMA_IRQHandler+0xd2>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a54      	ldr	r2, [pc, #336]	@ (8004630 <HAL_DMA_IRQHandler+0x1d0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d027      	beq.n	8004532 <HAL_DMA_IRQHandler+0xd2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a53      	ldr	r2, [pc, #332]	@ (8004634 <HAL_DMA_IRQHandler+0x1d4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d022      	beq.n	8004532 <HAL_DMA_IRQHandler+0xd2>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a51      	ldr	r2, [pc, #324]	@ (8004638 <HAL_DMA_IRQHandler+0x1d8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d01d      	beq.n	8004532 <HAL_DMA_IRQHandler+0xd2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a50      	ldr	r2, [pc, #320]	@ (800463c <HAL_DMA_IRQHandler+0x1dc>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d018      	beq.n	8004532 <HAL_DMA_IRQHandler+0xd2>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a4e      	ldr	r2, [pc, #312]	@ (8004640 <HAL_DMA_IRQHandler+0x1e0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d013      	beq.n	8004532 <HAL_DMA_IRQHandler+0xd2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a4d      	ldr	r2, [pc, #308]	@ (8004644 <HAL_DMA_IRQHandler+0x1e4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00e      	beq.n	8004532 <HAL_DMA_IRQHandler+0xd2>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a4b      	ldr	r2, [pc, #300]	@ (8004648 <HAL_DMA_IRQHandler+0x1e8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d009      	beq.n	8004532 <HAL_DMA_IRQHandler+0xd2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a4a      	ldr	r2, [pc, #296]	@ (800464c <HAL_DMA_IRQHandler+0x1ec>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d004      	beq.n	8004532 <HAL_DMA_IRQHandler+0xd2>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a48      	ldr	r2, [pc, #288]	@ (8004650 <HAL_DMA_IRQHandler+0x1f0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d101      	bne.n	8004536 <HAL_DMA_IRQHandler+0xd6>
 8004532:	2301      	movs	r3, #1
 8004534:	e000      	b.n	8004538 <HAL_DMA_IRQHandler+0xd8>
 8004536:	2300      	movs	r3, #0
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 842b 	beq.w	8004d94 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004542:	f003 031f 	and.w	r3, r3, #31
 8004546:	2208      	movs	r2, #8
 8004548:	409a      	lsls	r2, r3
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	4013      	ands	r3, r2
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 80a2 	beq.w	8004698 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a2e      	ldr	r2, [pc, #184]	@ (8004614 <HAL_DMA_IRQHandler+0x1b4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d04a      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x194>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a2d      	ldr	r2, [pc, #180]	@ (8004618 <HAL_DMA_IRQHandler+0x1b8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d045      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x194>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a2b      	ldr	r2, [pc, #172]	@ (800461c <HAL_DMA_IRQHandler+0x1bc>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d040      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x194>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a2a      	ldr	r2, [pc, #168]	@ (8004620 <HAL_DMA_IRQHandler+0x1c0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d03b      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x194>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a28      	ldr	r2, [pc, #160]	@ (8004624 <HAL_DMA_IRQHandler+0x1c4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d036      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x194>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a27      	ldr	r2, [pc, #156]	@ (8004628 <HAL_DMA_IRQHandler+0x1c8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d031      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x194>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a25      	ldr	r2, [pc, #148]	@ (800462c <HAL_DMA_IRQHandler+0x1cc>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d02c      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x194>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a24      	ldr	r2, [pc, #144]	@ (8004630 <HAL_DMA_IRQHandler+0x1d0>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d027      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x194>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a22      	ldr	r2, [pc, #136]	@ (8004634 <HAL_DMA_IRQHandler+0x1d4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d022      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x194>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a21      	ldr	r2, [pc, #132]	@ (8004638 <HAL_DMA_IRQHandler+0x1d8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d01d      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x194>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a1f      	ldr	r2, [pc, #124]	@ (800463c <HAL_DMA_IRQHandler+0x1dc>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d018      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x194>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004640 <HAL_DMA_IRQHandler+0x1e0>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d013      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x194>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004644 <HAL_DMA_IRQHandler+0x1e4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00e      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x194>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a1b      	ldr	r2, [pc, #108]	@ (8004648 <HAL_DMA_IRQHandler+0x1e8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d009      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x194>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a19      	ldr	r2, [pc, #100]	@ (800464c <HAL_DMA_IRQHandler+0x1ec>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d004      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x194>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a18      	ldr	r2, [pc, #96]	@ (8004650 <HAL_DMA_IRQHandler+0x1f0>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d12f      	bne.n	8004654 <HAL_DMA_IRQHandler+0x1f4>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	bf14      	ite	ne
 8004602:	2301      	movne	r3, #1
 8004604:	2300      	moveq	r3, #0
 8004606:	b2db      	uxtb	r3, r3
 8004608:	e02e      	b.n	8004668 <HAL_DMA_IRQHandler+0x208>
 800460a:	bf00      	nop
 800460c:	24000008 	.word	0x24000008
 8004610:	1b4e81b5 	.word	0x1b4e81b5
 8004614:	40020010 	.word	0x40020010
 8004618:	40020028 	.word	0x40020028
 800461c:	40020040 	.word	0x40020040
 8004620:	40020058 	.word	0x40020058
 8004624:	40020070 	.word	0x40020070
 8004628:	40020088 	.word	0x40020088
 800462c:	400200a0 	.word	0x400200a0
 8004630:	400200b8 	.word	0x400200b8
 8004634:	40020410 	.word	0x40020410
 8004638:	40020428 	.word	0x40020428
 800463c:	40020440 	.word	0x40020440
 8004640:	40020458 	.word	0x40020458
 8004644:	40020470 	.word	0x40020470
 8004648:	40020488 	.word	0x40020488
 800464c:	400204a0 	.word	0x400204a0
 8004650:	400204b8 	.word	0x400204b8
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b00      	cmp	r3, #0
 8004660:	bf14      	ite	ne
 8004662:	2301      	movne	r3, #1
 8004664:	2300      	moveq	r3, #0
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d015      	beq.n	8004698 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0204 	bic.w	r2, r2, #4
 800467a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004680:	f003 031f 	and.w	r3, r3, #31
 8004684:	2208      	movs	r2, #8
 8004686:	409a      	lsls	r2, r3
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004690:	f043 0201 	orr.w	r2, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800469c:	f003 031f 	and.w	r3, r3, #31
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	fa22 f303 	lsr.w	r3, r2, r3
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d06e      	beq.n	800478c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a69      	ldr	r2, [pc, #420]	@ (8004858 <HAL_DMA_IRQHandler+0x3f8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d04a      	beq.n	800474e <HAL_DMA_IRQHandler+0x2ee>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a67      	ldr	r2, [pc, #412]	@ (800485c <HAL_DMA_IRQHandler+0x3fc>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d045      	beq.n	800474e <HAL_DMA_IRQHandler+0x2ee>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a66      	ldr	r2, [pc, #408]	@ (8004860 <HAL_DMA_IRQHandler+0x400>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d040      	beq.n	800474e <HAL_DMA_IRQHandler+0x2ee>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a64      	ldr	r2, [pc, #400]	@ (8004864 <HAL_DMA_IRQHandler+0x404>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d03b      	beq.n	800474e <HAL_DMA_IRQHandler+0x2ee>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a63      	ldr	r2, [pc, #396]	@ (8004868 <HAL_DMA_IRQHandler+0x408>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d036      	beq.n	800474e <HAL_DMA_IRQHandler+0x2ee>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a61      	ldr	r2, [pc, #388]	@ (800486c <HAL_DMA_IRQHandler+0x40c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d031      	beq.n	800474e <HAL_DMA_IRQHandler+0x2ee>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a60      	ldr	r2, [pc, #384]	@ (8004870 <HAL_DMA_IRQHandler+0x410>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d02c      	beq.n	800474e <HAL_DMA_IRQHandler+0x2ee>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a5e      	ldr	r2, [pc, #376]	@ (8004874 <HAL_DMA_IRQHandler+0x414>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d027      	beq.n	800474e <HAL_DMA_IRQHandler+0x2ee>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a5d      	ldr	r2, [pc, #372]	@ (8004878 <HAL_DMA_IRQHandler+0x418>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d022      	beq.n	800474e <HAL_DMA_IRQHandler+0x2ee>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a5b      	ldr	r2, [pc, #364]	@ (800487c <HAL_DMA_IRQHandler+0x41c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d01d      	beq.n	800474e <HAL_DMA_IRQHandler+0x2ee>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a5a      	ldr	r2, [pc, #360]	@ (8004880 <HAL_DMA_IRQHandler+0x420>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d018      	beq.n	800474e <HAL_DMA_IRQHandler+0x2ee>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a58      	ldr	r2, [pc, #352]	@ (8004884 <HAL_DMA_IRQHandler+0x424>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d013      	beq.n	800474e <HAL_DMA_IRQHandler+0x2ee>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a57      	ldr	r2, [pc, #348]	@ (8004888 <HAL_DMA_IRQHandler+0x428>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d00e      	beq.n	800474e <HAL_DMA_IRQHandler+0x2ee>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a55      	ldr	r2, [pc, #340]	@ (800488c <HAL_DMA_IRQHandler+0x42c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d009      	beq.n	800474e <HAL_DMA_IRQHandler+0x2ee>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a54      	ldr	r2, [pc, #336]	@ (8004890 <HAL_DMA_IRQHandler+0x430>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d004      	beq.n	800474e <HAL_DMA_IRQHandler+0x2ee>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a52      	ldr	r2, [pc, #328]	@ (8004894 <HAL_DMA_IRQHandler+0x434>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d10a      	bne.n	8004764 <HAL_DMA_IRQHandler+0x304>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004758:	2b00      	cmp	r3, #0
 800475a:	bf14      	ite	ne
 800475c:	2301      	movne	r3, #1
 800475e:	2300      	moveq	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	e003      	b.n	800476c <HAL_DMA_IRQHandler+0x30c>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2300      	movs	r3, #0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00d      	beq.n	800478c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004774:	f003 031f 	and.w	r3, r3, #31
 8004778:	2201      	movs	r2, #1
 800477a:	409a      	lsls	r2, r3
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004784:	f043 0202 	orr.w	r2, r3, #2
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	2204      	movs	r2, #4
 8004796:	409a      	lsls	r2, r3
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	4013      	ands	r3, r2
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 808f 	beq.w	80048c0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a2c      	ldr	r2, [pc, #176]	@ (8004858 <HAL_DMA_IRQHandler+0x3f8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d04a      	beq.n	8004842 <HAL_DMA_IRQHandler+0x3e2>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a2a      	ldr	r2, [pc, #168]	@ (800485c <HAL_DMA_IRQHandler+0x3fc>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d045      	beq.n	8004842 <HAL_DMA_IRQHandler+0x3e2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a29      	ldr	r2, [pc, #164]	@ (8004860 <HAL_DMA_IRQHandler+0x400>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d040      	beq.n	8004842 <HAL_DMA_IRQHandler+0x3e2>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a27      	ldr	r2, [pc, #156]	@ (8004864 <HAL_DMA_IRQHandler+0x404>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d03b      	beq.n	8004842 <HAL_DMA_IRQHandler+0x3e2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a26      	ldr	r2, [pc, #152]	@ (8004868 <HAL_DMA_IRQHandler+0x408>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d036      	beq.n	8004842 <HAL_DMA_IRQHandler+0x3e2>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a24      	ldr	r2, [pc, #144]	@ (800486c <HAL_DMA_IRQHandler+0x40c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d031      	beq.n	8004842 <HAL_DMA_IRQHandler+0x3e2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a23      	ldr	r2, [pc, #140]	@ (8004870 <HAL_DMA_IRQHandler+0x410>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d02c      	beq.n	8004842 <HAL_DMA_IRQHandler+0x3e2>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a21      	ldr	r2, [pc, #132]	@ (8004874 <HAL_DMA_IRQHandler+0x414>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d027      	beq.n	8004842 <HAL_DMA_IRQHandler+0x3e2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a20      	ldr	r2, [pc, #128]	@ (8004878 <HAL_DMA_IRQHandler+0x418>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d022      	beq.n	8004842 <HAL_DMA_IRQHandler+0x3e2>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a1e      	ldr	r2, [pc, #120]	@ (800487c <HAL_DMA_IRQHandler+0x41c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d01d      	beq.n	8004842 <HAL_DMA_IRQHandler+0x3e2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a1d      	ldr	r2, [pc, #116]	@ (8004880 <HAL_DMA_IRQHandler+0x420>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d018      	beq.n	8004842 <HAL_DMA_IRQHandler+0x3e2>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1b      	ldr	r2, [pc, #108]	@ (8004884 <HAL_DMA_IRQHandler+0x424>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d013      	beq.n	8004842 <HAL_DMA_IRQHandler+0x3e2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a1a      	ldr	r2, [pc, #104]	@ (8004888 <HAL_DMA_IRQHandler+0x428>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00e      	beq.n	8004842 <HAL_DMA_IRQHandler+0x3e2>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a18      	ldr	r2, [pc, #96]	@ (800488c <HAL_DMA_IRQHandler+0x42c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d009      	beq.n	8004842 <HAL_DMA_IRQHandler+0x3e2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a17      	ldr	r2, [pc, #92]	@ (8004890 <HAL_DMA_IRQHandler+0x430>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d004      	beq.n	8004842 <HAL_DMA_IRQHandler+0x3e2>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a15      	ldr	r2, [pc, #84]	@ (8004894 <HAL_DMA_IRQHandler+0x434>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d12a      	bne.n	8004898 <HAL_DMA_IRQHandler+0x438>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	bf14      	ite	ne
 8004850:	2301      	movne	r3, #1
 8004852:	2300      	moveq	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	e023      	b.n	80048a0 <HAL_DMA_IRQHandler+0x440>
 8004858:	40020010 	.word	0x40020010
 800485c:	40020028 	.word	0x40020028
 8004860:	40020040 	.word	0x40020040
 8004864:	40020058 	.word	0x40020058
 8004868:	40020070 	.word	0x40020070
 800486c:	40020088 	.word	0x40020088
 8004870:	400200a0 	.word	0x400200a0
 8004874:	400200b8 	.word	0x400200b8
 8004878:	40020410 	.word	0x40020410
 800487c:	40020428 	.word	0x40020428
 8004880:	40020440 	.word	0x40020440
 8004884:	40020458 	.word	0x40020458
 8004888:	40020470 	.word	0x40020470
 800488c:	40020488 	.word	0x40020488
 8004890:	400204a0 	.word	0x400204a0
 8004894:	400204b8 	.word	0x400204b8
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2300      	movs	r3, #0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00d      	beq.n	80048c0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a8:	f003 031f 	and.w	r3, r3, #31
 80048ac:	2204      	movs	r2, #4
 80048ae:	409a      	lsls	r2, r3
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b8:	f043 0204 	orr.w	r2, r3, #4
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c4:	f003 031f 	and.w	r3, r3, #31
 80048c8:	2210      	movs	r2, #16
 80048ca:	409a      	lsls	r2, r3
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	4013      	ands	r3, r2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 80a6 	beq.w	8004a22 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a85      	ldr	r2, [pc, #532]	@ (8004af0 <HAL_DMA_IRQHandler+0x690>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d04a      	beq.n	8004976 <HAL_DMA_IRQHandler+0x516>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a83      	ldr	r2, [pc, #524]	@ (8004af4 <HAL_DMA_IRQHandler+0x694>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d045      	beq.n	8004976 <HAL_DMA_IRQHandler+0x516>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a82      	ldr	r2, [pc, #520]	@ (8004af8 <HAL_DMA_IRQHandler+0x698>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d040      	beq.n	8004976 <HAL_DMA_IRQHandler+0x516>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a80      	ldr	r2, [pc, #512]	@ (8004afc <HAL_DMA_IRQHandler+0x69c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d03b      	beq.n	8004976 <HAL_DMA_IRQHandler+0x516>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a7f      	ldr	r2, [pc, #508]	@ (8004b00 <HAL_DMA_IRQHandler+0x6a0>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d036      	beq.n	8004976 <HAL_DMA_IRQHandler+0x516>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a7d      	ldr	r2, [pc, #500]	@ (8004b04 <HAL_DMA_IRQHandler+0x6a4>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d031      	beq.n	8004976 <HAL_DMA_IRQHandler+0x516>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a7c      	ldr	r2, [pc, #496]	@ (8004b08 <HAL_DMA_IRQHandler+0x6a8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d02c      	beq.n	8004976 <HAL_DMA_IRQHandler+0x516>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a7a      	ldr	r2, [pc, #488]	@ (8004b0c <HAL_DMA_IRQHandler+0x6ac>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d027      	beq.n	8004976 <HAL_DMA_IRQHandler+0x516>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a79      	ldr	r2, [pc, #484]	@ (8004b10 <HAL_DMA_IRQHandler+0x6b0>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d022      	beq.n	8004976 <HAL_DMA_IRQHandler+0x516>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a77      	ldr	r2, [pc, #476]	@ (8004b14 <HAL_DMA_IRQHandler+0x6b4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d01d      	beq.n	8004976 <HAL_DMA_IRQHandler+0x516>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a76      	ldr	r2, [pc, #472]	@ (8004b18 <HAL_DMA_IRQHandler+0x6b8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d018      	beq.n	8004976 <HAL_DMA_IRQHandler+0x516>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a74      	ldr	r2, [pc, #464]	@ (8004b1c <HAL_DMA_IRQHandler+0x6bc>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d013      	beq.n	8004976 <HAL_DMA_IRQHandler+0x516>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a73      	ldr	r2, [pc, #460]	@ (8004b20 <HAL_DMA_IRQHandler+0x6c0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d00e      	beq.n	8004976 <HAL_DMA_IRQHandler+0x516>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a71      	ldr	r2, [pc, #452]	@ (8004b24 <HAL_DMA_IRQHandler+0x6c4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d009      	beq.n	8004976 <HAL_DMA_IRQHandler+0x516>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a70      	ldr	r2, [pc, #448]	@ (8004b28 <HAL_DMA_IRQHandler+0x6c8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d004      	beq.n	8004976 <HAL_DMA_IRQHandler+0x516>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a6e      	ldr	r2, [pc, #440]	@ (8004b2c <HAL_DMA_IRQHandler+0x6cc>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d10a      	bne.n	800498c <HAL_DMA_IRQHandler+0x52c>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	2b00      	cmp	r3, #0
 8004982:	bf14      	ite	ne
 8004984:	2301      	movne	r3, #1
 8004986:	2300      	moveq	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	e009      	b.n	80049a0 <HAL_DMA_IRQHandler+0x540>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0304 	and.w	r3, r3, #4
 8004996:	2b00      	cmp	r3, #0
 8004998:	bf14      	ite	ne
 800499a:	2301      	movne	r3, #1
 800499c:	2300      	moveq	r3, #0
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d03e      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a8:	f003 031f 	and.w	r3, r3, #31
 80049ac:	2210      	movs	r2, #16
 80049ae:	409a      	lsls	r2, r3
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d018      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d108      	bne.n	80049e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d024      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	4798      	blx	r3
 80049e0:	e01f      	b.n	8004a22 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d01b      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	4798      	blx	r3
 80049f2:	e016      	b.n	8004a22 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d107      	bne.n	8004a12 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0208 	bic.w	r2, r2, #8
 8004a10:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a26:	f003 031f 	and.w	r3, r3, #31
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	409a      	lsls	r2, r3
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	4013      	ands	r3, r2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 8110 	beq.w	8004c58 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a2c      	ldr	r2, [pc, #176]	@ (8004af0 <HAL_DMA_IRQHandler+0x690>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d04a      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x678>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a2b      	ldr	r2, [pc, #172]	@ (8004af4 <HAL_DMA_IRQHandler+0x694>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d045      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x678>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a29      	ldr	r2, [pc, #164]	@ (8004af8 <HAL_DMA_IRQHandler+0x698>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d040      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x678>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a28      	ldr	r2, [pc, #160]	@ (8004afc <HAL_DMA_IRQHandler+0x69c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d03b      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x678>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a26      	ldr	r2, [pc, #152]	@ (8004b00 <HAL_DMA_IRQHandler+0x6a0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d036      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x678>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a25      	ldr	r2, [pc, #148]	@ (8004b04 <HAL_DMA_IRQHandler+0x6a4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d031      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x678>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a23      	ldr	r2, [pc, #140]	@ (8004b08 <HAL_DMA_IRQHandler+0x6a8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d02c      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x678>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a22      	ldr	r2, [pc, #136]	@ (8004b0c <HAL_DMA_IRQHandler+0x6ac>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d027      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x678>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a20      	ldr	r2, [pc, #128]	@ (8004b10 <HAL_DMA_IRQHandler+0x6b0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d022      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x678>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a1f      	ldr	r2, [pc, #124]	@ (8004b14 <HAL_DMA_IRQHandler+0x6b4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d01d      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x678>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b18 <HAL_DMA_IRQHandler+0x6b8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d018      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x678>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8004b1c <HAL_DMA_IRQHandler+0x6bc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d013      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x678>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a1a      	ldr	r2, [pc, #104]	@ (8004b20 <HAL_DMA_IRQHandler+0x6c0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00e      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x678>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a19      	ldr	r2, [pc, #100]	@ (8004b24 <HAL_DMA_IRQHandler+0x6c4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d009      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x678>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a17      	ldr	r2, [pc, #92]	@ (8004b28 <HAL_DMA_IRQHandler+0x6c8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d004      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x678>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a16      	ldr	r2, [pc, #88]	@ (8004b2c <HAL_DMA_IRQHandler+0x6cc>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d12b      	bne.n	8004b30 <HAL_DMA_IRQHandler+0x6d0>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0310 	and.w	r3, r3, #16
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	bf14      	ite	ne
 8004ae6:	2301      	movne	r3, #1
 8004ae8:	2300      	moveq	r3, #0
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	e02a      	b.n	8004b44 <HAL_DMA_IRQHandler+0x6e4>
 8004aee:	bf00      	nop
 8004af0:	40020010 	.word	0x40020010
 8004af4:	40020028 	.word	0x40020028
 8004af8:	40020040 	.word	0x40020040
 8004afc:	40020058 	.word	0x40020058
 8004b00:	40020070 	.word	0x40020070
 8004b04:	40020088 	.word	0x40020088
 8004b08:	400200a0 	.word	0x400200a0
 8004b0c:	400200b8 	.word	0x400200b8
 8004b10:	40020410 	.word	0x40020410
 8004b14:	40020428 	.word	0x40020428
 8004b18:	40020440 	.word	0x40020440
 8004b1c:	40020458 	.word	0x40020458
 8004b20:	40020470 	.word	0x40020470
 8004b24:	40020488 	.word	0x40020488
 8004b28:	400204a0 	.word	0x400204a0
 8004b2c:	400204b8 	.word	0x400204b8
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	bf14      	ite	ne
 8004b3e:	2301      	movne	r3, #1
 8004b40:	2300      	moveq	r3, #0
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 8087 	beq.w	8004c58 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b4e:	f003 031f 	and.w	r3, r3, #31
 8004b52:	2220      	movs	r2, #32
 8004b54:	409a      	lsls	r2, r3
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d139      	bne.n	8004bda <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0216 	bic.w	r2, r2, #22
 8004b74:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695a      	ldr	r2, [r3, #20]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b84:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d103      	bne.n	8004b96 <HAL_DMA_IRQHandler+0x736>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d007      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0208 	bic.w	r2, r2, #8
 8004ba4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004baa:	f003 031f 	and.w	r3, r3, #31
 8004bae:	223f      	movs	r2, #63	@ 0x3f
 8004bb0:	409a      	lsls	r2, r3
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 834a 	beq.w	8005264 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	4798      	blx	r3
          }
          return;
 8004bd8:	e344      	b.n	8005264 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d018      	beq.n	8004c1a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d108      	bne.n	8004c08 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d02c      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	4798      	blx	r3
 8004c06:	e027      	b.n	8004c58 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d023      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	4798      	blx	r3
 8004c18:	e01e      	b.n	8004c58 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10f      	bne.n	8004c48 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0210 	bic.w	r2, r2, #16
 8004c36:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 8306 	beq.w	800526e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 8088 	beq.w	8004d80 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2204      	movs	r2, #4
 8004c74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a7a      	ldr	r2, [pc, #488]	@ (8004e68 <HAL_DMA_IRQHandler+0xa08>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d04a      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x8b8>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a79      	ldr	r2, [pc, #484]	@ (8004e6c <HAL_DMA_IRQHandler+0xa0c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d045      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x8b8>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a77      	ldr	r2, [pc, #476]	@ (8004e70 <HAL_DMA_IRQHandler+0xa10>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d040      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x8b8>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a76      	ldr	r2, [pc, #472]	@ (8004e74 <HAL_DMA_IRQHandler+0xa14>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d03b      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x8b8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a74      	ldr	r2, [pc, #464]	@ (8004e78 <HAL_DMA_IRQHandler+0xa18>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d036      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x8b8>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a73      	ldr	r2, [pc, #460]	@ (8004e7c <HAL_DMA_IRQHandler+0xa1c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d031      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x8b8>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a71      	ldr	r2, [pc, #452]	@ (8004e80 <HAL_DMA_IRQHandler+0xa20>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d02c      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x8b8>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a70      	ldr	r2, [pc, #448]	@ (8004e84 <HAL_DMA_IRQHandler+0xa24>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d027      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x8b8>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a6e      	ldr	r2, [pc, #440]	@ (8004e88 <HAL_DMA_IRQHandler+0xa28>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d022      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x8b8>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a6d      	ldr	r2, [pc, #436]	@ (8004e8c <HAL_DMA_IRQHandler+0xa2c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d01d      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x8b8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a6b      	ldr	r2, [pc, #428]	@ (8004e90 <HAL_DMA_IRQHandler+0xa30>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d018      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x8b8>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a6a      	ldr	r2, [pc, #424]	@ (8004e94 <HAL_DMA_IRQHandler+0xa34>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d013      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x8b8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a68      	ldr	r2, [pc, #416]	@ (8004e98 <HAL_DMA_IRQHandler+0xa38>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00e      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x8b8>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a67      	ldr	r2, [pc, #412]	@ (8004e9c <HAL_DMA_IRQHandler+0xa3c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d009      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x8b8>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a65      	ldr	r2, [pc, #404]	@ (8004ea0 <HAL_DMA_IRQHandler+0xa40>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d004      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x8b8>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a64      	ldr	r2, [pc, #400]	@ (8004ea4 <HAL_DMA_IRQHandler+0xa44>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d108      	bne.n	8004d2a <HAL_DMA_IRQHandler+0x8ca>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0201 	bic.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	e007      	b.n	8004d3a <HAL_DMA_IRQHandler+0x8da>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0201 	bic.w	r2, r2, #1
 8004d38:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d307      	bcc.n	8004d56 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f2      	bne.n	8004d3a <HAL_DMA_IRQHandler+0x8da>
 8004d54:	e000      	b.n	8004d58 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004d56:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d004      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2203      	movs	r2, #3
 8004d6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004d6e:	e003      	b.n	8004d78 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 8272 	beq.w	800526e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	4798      	blx	r3
 8004d92:	e26c      	b.n	800526e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a43      	ldr	r2, [pc, #268]	@ (8004ea8 <HAL_DMA_IRQHandler+0xa48>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d022      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x984>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a42      	ldr	r2, [pc, #264]	@ (8004eac <HAL_DMA_IRQHandler+0xa4c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d01d      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x984>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a40      	ldr	r2, [pc, #256]	@ (8004eb0 <HAL_DMA_IRQHandler+0xa50>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d018      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x984>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a3f      	ldr	r2, [pc, #252]	@ (8004eb4 <HAL_DMA_IRQHandler+0xa54>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d013      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x984>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a3d      	ldr	r2, [pc, #244]	@ (8004eb8 <HAL_DMA_IRQHandler+0xa58>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00e      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x984>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a3c      	ldr	r2, [pc, #240]	@ (8004ebc <HAL_DMA_IRQHandler+0xa5c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d009      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x984>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a3a      	ldr	r2, [pc, #232]	@ (8004ec0 <HAL_DMA_IRQHandler+0xa60>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d004      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x984>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a39      	ldr	r2, [pc, #228]	@ (8004ec4 <HAL_DMA_IRQHandler+0xa64>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d101      	bne.n	8004de8 <HAL_DMA_IRQHandler+0x988>
 8004de4:	2301      	movs	r3, #1
 8004de6:	e000      	b.n	8004dea <HAL_DMA_IRQHandler+0x98a>
 8004de8:	2300      	movs	r3, #0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 823f 	beq.w	800526e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dfc:	f003 031f 	and.w	r3, r3, #31
 8004e00:	2204      	movs	r2, #4
 8004e02:	409a      	lsls	r2, r3
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 80cd 	beq.w	8004fa8 <HAL_DMA_IRQHandler+0xb48>
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 80c7 	beq.w	8004fa8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e1e:	f003 031f 	and.w	r3, r3, #31
 8004e22:	2204      	movs	r2, #4
 8004e24:	409a      	lsls	r2, r3
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d049      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d109      	bne.n	8004e52 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 8210 	beq.w	8005268 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e50:	e20a      	b.n	8005268 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 8206 	beq.w	8005268 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e64:	e200      	b.n	8005268 <HAL_DMA_IRQHandler+0xe08>
 8004e66:	bf00      	nop
 8004e68:	40020010 	.word	0x40020010
 8004e6c:	40020028 	.word	0x40020028
 8004e70:	40020040 	.word	0x40020040
 8004e74:	40020058 	.word	0x40020058
 8004e78:	40020070 	.word	0x40020070
 8004e7c:	40020088 	.word	0x40020088
 8004e80:	400200a0 	.word	0x400200a0
 8004e84:	400200b8 	.word	0x400200b8
 8004e88:	40020410 	.word	0x40020410
 8004e8c:	40020428 	.word	0x40020428
 8004e90:	40020440 	.word	0x40020440
 8004e94:	40020458 	.word	0x40020458
 8004e98:	40020470 	.word	0x40020470
 8004e9c:	40020488 	.word	0x40020488
 8004ea0:	400204a0 	.word	0x400204a0
 8004ea4:	400204b8 	.word	0x400204b8
 8004ea8:	58025408 	.word	0x58025408
 8004eac:	5802541c 	.word	0x5802541c
 8004eb0:	58025430 	.word	0x58025430
 8004eb4:	58025444 	.word	0x58025444
 8004eb8:	58025458 	.word	0x58025458
 8004ebc:	5802546c 	.word	0x5802546c
 8004ec0:	58025480 	.word	0x58025480
 8004ec4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d160      	bne.n	8004f94 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a7f      	ldr	r2, [pc, #508]	@ (80050d4 <HAL_DMA_IRQHandler+0xc74>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d04a      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xb12>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a7d      	ldr	r2, [pc, #500]	@ (80050d8 <HAL_DMA_IRQHandler+0xc78>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d045      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xb12>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a7c      	ldr	r2, [pc, #496]	@ (80050dc <HAL_DMA_IRQHandler+0xc7c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d040      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xb12>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a7a      	ldr	r2, [pc, #488]	@ (80050e0 <HAL_DMA_IRQHandler+0xc80>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d03b      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xb12>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a79      	ldr	r2, [pc, #484]	@ (80050e4 <HAL_DMA_IRQHandler+0xc84>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d036      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xb12>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a77      	ldr	r2, [pc, #476]	@ (80050e8 <HAL_DMA_IRQHandler+0xc88>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d031      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xb12>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a76      	ldr	r2, [pc, #472]	@ (80050ec <HAL_DMA_IRQHandler+0xc8c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d02c      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xb12>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a74      	ldr	r2, [pc, #464]	@ (80050f0 <HAL_DMA_IRQHandler+0xc90>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d027      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xb12>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a73      	ldr	r2, [pc, #460]	@ (80050f4 <HAL_DMA_IRQHandler+0xc94>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d022      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xb12>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a71      	ldr	r2, [pc, #452]	@ (80050f8 <HAL_DMA_IRQHandler+0xc98>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d01d      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xb12>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a70      	ldr	r2, [pc, #448]	@ (80050fc <HAL_DMA_IRQHandler+0xc9c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d018      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xb12>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a6e      	ldr	r2, [pc, #440]	@ (8005100 <HAL_DMA_IRQHandler+0xca0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d013      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xb12>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a6d      	ldr	r2, [pc, #436]	@ (8005104 <HAL_DMA_IRQHandler+0xca4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00e      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xb12>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a6b      	ldr	r2, [pc, #428]	@ (8005108 <HAL_DMA_IRQHandler+0xca8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d009      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xb12>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a6a      	ldr	r2, [pc, #424]	@ (800510c <HAL_DMA_IRQHandler+0xcac>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d004      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xb12>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a68      	ldr	r2, [pc, #416]	@ (8005110 <HAL_DMA_IRQHandler+0xcb0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d108      	bne.n	8004f84 <HAL_DMA_IRQHandler+0xb24>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0208 	bic.w	r2, r2, #8
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	e007      	b.n	8004f94 <HAL_DMA_IRQHandler+0xb34>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0204 	bic.w	r2, r2, #4
 8004f92:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 8165 	beq.w	8005268 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fa6:	e15f      	b.n	8005268 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fac:	f003 031f 	and.w	r3, r3, #31
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	409a      	lsls	r2, r3
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 80c5 	beq.w	8005148 <HAL_DMA_IRQHandler+0xce8>
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 80bf 	beq.w	8005148 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	409a      	lsls	r2, r3
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d018      	beq.n	8005016 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d109      	bne.n	8005002 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 813a 	beq.w	800526c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005000:	e134      	b.n	800526c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 8130 	beq.w	800526c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005014:	e12a      	b.n	800526c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	2b00      	cmp	r3, #0
 800501e:	f040 8089 	bne.w	8005134 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a2b      	ldr	r2, [pc, #172]	@ (80050d4 <HAL_DMA_IRQHandler+0xc74>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d04a      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xc62>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a29      	ldr	r2, [pc, #164]	@ (80050d8 <HAL_DMA_IRQHandler+0xc78>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d045      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xc62>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a28      	ldr	r2, [pc, #160]	@ (80050dc <HAL_DMA_IRQHandler+0xc7c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d040      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xc62>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a26      	ldr	r2, [pc, #152]	@ (80050e0 <HAL_DMA_IRQHandler+0xc80>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d03b      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xc62>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a25      	ldr	r2, [pc, #148]	@ (80050e4 <HAL_DMA_IRQHandler+0xc84>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d036      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xc62>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a23      	ldr	r2, [pc, #140]	@ (80050e8 <HAL_DMA_IRQHandler+0xc88>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d031      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xc62>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a22      	ldr	r2, [pc, #136]	@ (80050ec <HAL_DMA_IRQHandler+0xc8c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d02c      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xc62>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a20      	ldr	r2, [pc, #128]	@ (80050f0 <HAL_DMA_IRQHandler+0xc90>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d027      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xc62>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a1f      	ldr	r2, [pc, #124]	@ (80050f4 <HAL_DMA_IRQHandler+0xc94>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d022      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xc62>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a1d      	ldr	r2, [pc, #116]	@ (80050f8 <HAL_DMA_IRQHandler+0xc98>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01d      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xc62>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a1c      	ldr	r2, [pc, #112]	@ (80050fc <HAL_DMA_IRQHandler+0xc9c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d018      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xc62>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1a      	ldr	r2, [pc, #104]	@ (8005100 <HAL_DMA_IRQHandler+0xca0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d013      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xc62>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a19      	ldr	r2, [pc, #100]	@ (8005104 <HAL_DMA_IRQHandler+0xca4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00e      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xc62>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a17      	ldr	r2, [pc, #92]	@ (8005108 <HAL_DMA_IRQHandler+0xca8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d009      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xc62>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a16      	ldr	r2, [pc, #88]	@ (800510c <HAL_DMA_IRQHandler+0xcac>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d004      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xc62>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a14      	ldr	r2, [pc, #80]	@ (8005110 <HAL_DMA_IRQHandler+0xcb0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d128      	bne.n	8005114 <HAL_DMA_IRQHandler+0xcb4>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0214 	bic.w	r2, r2, #20
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	e027      	b.n	8005124 <HAL_DMA_IRQHandler+0xcc4>
 80050d4:	40020010 	.word	0x40020010
 80050d8:	40020028 	.word	0x40020028
 80050dc:	40020040 	.word	0x40020040
 80050e0:	40020058 	.word	0x40020058
 80050e4:	40020070 	.word	0x40020070
 80050e8:	40020088 	.word	0x40020088
 80050ec:	400200a0 	.word	0x400200a0
 80050f0:	400200b8 	.word	0x400200b8
 80050f4:	40020410 	.word	0x40020410
 80050f8:	40020428 	.word	0x40020428
 80050fc:	40020440 	.word	0x40020440
 8005100:	40020458 	.word	0x40020458
 8005104:	40020470 	.word	0x40020470
 8005108:	40020488 	.word	0x40020488
 800510c:	400204a0 	.word	0x400204a0
 8005110:	400204b8 	.word	0x400204b8
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 020a 	bic.w	r2, r2, #10
 8005122:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 8097 	beq.w	800526c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005146:	e091      	b.n	800526c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800514c:	f003 031f 	and.w	r3, r3, #31
 8005150:	2208      	movs	r2, #8
 8005152:	409a      	lsls	r2, r3
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	4013      	ands	r3, r2
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 8088 	beq.w	800526e <HAL_DMA_IRQHandler+0xe0e>
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 8082 	beq.w	800526e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a41      	ldr	r2, [pc, #260]	@ (8005274 <HAL_DMA_IRQHandler+0xe14>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d04a      	beq.n	800520a <HAL_DMA_IRQHandler+0xdaa>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a3f      	ldr	r2, [pc, #252]	@ (8005278 <HAL_DMA_IRQHandler+0xe18>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d045      	beq.n	800520a <HAL_DMA_IRQHandler+0xdaa>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a3e      	ldr	r2, [pc, #248]	@ (800527c <HAL_DMA_IRQHandler+0xe1c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d040      	beq.n	800520a <HAL_DMA_IRQHandler+0xdaa>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a3c      	ldr	r2, [pc, #240]	@ (8005280 <HAL_DMA_IRQHandler+0xe20>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d03b      	beq.n	800520a <HAL_DMA_IRQHandler+0xdaa>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a3b      	ldr	r2, [pc, #236]	@ (8005284 <HAL_DMA_IRQHandler+0xe24>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d036      	beq.n	800520a <HAL_DMA_IRQHandler+0xdaa>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a39      	ldr	r2, [pc, #228]	@ (8005288 <HAL_DMA_IRQHandler+0xe28>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d031      	beq.n	800520a <HAL_DMA_IRQHandler+0xdaa>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a38      	ldr	r2, [pc, #224]	@ (800528c <HAL_DMA_IRQHandler+0xe2c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d02c      	beq.n	800520a <HAL_DMA_IRQHandler+0xdaa>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a36      	ldr	r2, [pc, #216]	@ (8005290 <HAL_DMA_IRQHandler+0xe30>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d027      	beq.n	800520a <HAL_DMA_IRQHandler+0xdaa>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a35      	ldr	r2, [pc, #212]	@ (8005294 <HAL_DMA_IRQHandler+0xe34>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d022      	beq.n	800520a <HAL_DMA_IRQHandler+0xdaa>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a33      	ldr	r2, [pc, #204]	@ (8005298 <HAL_DMA_IRQHandler+0xe38>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d01d      	beq.n	800520a <HAL_DMA_IRQHandler+0xdaa>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a32      	ldr	r2, [pc, #200]	@ (800529c <HAL_DMA_IRQHandler+0xe3c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d018      	beq.n	800520a <HAL_DMA_IRQHandler+0xdaa>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a30      	ldr	r2, [pc, #192]	@ (80052a0 <HAL_DMA_IRQHandler+0xe40>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d013      	beq.n	800520a <HAL_DMA_IRQHandler+0xdaa>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a2f      	ldr	r2, [pc, #188]	@ (80052a4 <HAL_DMA_IRQHandler+0xe44>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d00e      	beq.n	800520a <HAL_DMA_IRQHandler+0xdaa>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a2d      	ldr	r2, [pc, #180]	@ (80052a8 <HAL_DMA_IRQHandler+0xe48>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d009      	beq.n	800520a <HAL_DMA_IRQHandler+0xdaa>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a2c      	ldr	r2, [pc, #176]	@ (80052ac <HAL_DMA_IRQHandler+0xe4c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d004      	beq.n	800520a <HAL_DMA_IRQHandler+0xdaa>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a2a      	ldr	r2, [pc, #168]	@ (80052b0 <HAL_DMA_IRQHandler+0xe50>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d108      	bne.n	800521c <HAL_DMA_IRQHandler+0xdbc>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 021c 	bic.w	r2, r2, #28
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	e007      	b.n	800522c <HAL_DMA_IRQHandler+0xdcc>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 020e 	bic.w	r2, r2, #14
 800522a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005230:	f003 031f 	and.w	r3, r3, #31
 8005234:	2201      	movs	r2, #1
 8005236:	409a      	lsls	r2, r3
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005256:	2b00      	cmp	r3, #0
 8005258:	d009      	beq.n	800526e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	4798      	blx	r3
 8005262:	e004      	b.n	800526e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005264:	bf00      	nop
 8005266:	e002      	b.n	800526e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005268:	bf00      	nop
 800526a:	e000      	b.n	800526e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800526c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800526e:	3728      	adds	r7, #40	@ 0x28
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	40020010 	.word	0x40020010
 8005278:	40020028 	.word	0x40020028
 800527c:	40020040 	.word	0x40020040
 8005280:	40020058 	.word	0x40020058
 8005284:	40020070 	.word	0x40020070
 8005288:	40020088 	.word	0x40020088
 800528c:	400200a0 	.word	0x400200a0
 8005290:	400200b8 	.word	0x400200b8
 8005294:	40020410 	.word	0x40020410
 8005298:	40020428 	.word	0x40020428
 800529c:	40020440 	.word	0x40020440
 80052a0:	40020458 	.word	0x40020458
 80052a4:	40020470 	.word	0x40020470
 80052a8:	40020488 	.word	0x40020488
 80052ac:	400204a0 	.word	0x400204a0
 80052b0:	400204b8 	.word	0x400204b8

080052b4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052c2:	b2db      	uxtb	r3, r3
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a7f      	ldr	r2, [pc, #508]	@ (80054ec <DMA_SetConfig+0x21c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d072      	beq.n	80053da <DMA_SetConfig+0x10a>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a7d      	ldr	r2, [pc, #500]	@ (80054f0 <DMA_SetConfig+0x220>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d06d      	beq.n	80053da <DMA_SetConfig+0x10a>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a7c      	ldr	r2, [pc, #496]	@ (80054f4 <DMA_SetConfig+0x224>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d068      	beq.n	80053da <DMA_SetConfig+0x10a>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a7a      	ldr	r2, [pc, #488]	@ (80054f8 <DMA_SetConfig+0x228>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d063      	beq.n	80053da <DMA_SetConfig+0x10a>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a79      	ldr	r2, [pc, #484]	@ (80054fc <DMA_SetConfig+0x22c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d05e      	beq.n	80053da <DMA_SetConfig+0x10a>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a77      	ldr	r2, [pc, #476]	@ (8005500 <DMA_SetConfig+0x230>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d059      	beq.n	80053da <DMA_SetConfig+0x10a>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a76      	ldr	r2, [pc, #472]	@ (8005504 <DMA_SetConfig+0x234>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d054      	beq.n	80053da <DMA_SetConfig+0x10a>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a74      	ldr	r2, [pc, #464]	@ (8005508 <DMA_SetConfig+0x238>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d04f      	beq.n	80053da <DMA_SetConfig+0x10a>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a73      	ldr	r2, [pc, #460]	@ (800550c <DMA_SetConfig+0x23c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d04a      	beq.n	80053da <DMA_SetConfig+0x10a>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a71      	ldr	r2, [pc, #452]	@ (8005510 <DMA_SetConfig+0x240>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d045      	beq.n	80053da <DMA_SetConfig+0x10a>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a70      	ldr	r2, [pc, #448]	@ (8005514 <DMA_SetConfig+0x244>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d040      	beq.n	80053da <DMA_SetConfig+0x10a>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a6e      	ldr	r2, [pc, #440]	@ (8005518 <DMA_SetConfig+0x248>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d03b      	beq.n	80053da <DMA_SetConfig+0x10a>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a6d      	ldr	r2, [pc, #436]	@ (800551c <DMA_SetConfig+0x24c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d036      	beq.n	80053da <DMA_SetConfig+0x10a>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a6b      	ldr	r2, [pc, #428]	@ (8005520 <DMA_SetConfig+0x250>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d031      	beq.n	80053da <DMA_SetConfig+0x10a>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a6a      	ldr	r2, [pc, #424]	@ (8005524 <DMA_SetConfig+0x254>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d02c      	beq.n	80053da <DMA_SetConfig+0x10a>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a68      	ldr	r2, [pc, #416]	@ (8005528 <DMA_SetConfig+0x258>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d027      	beq.n	80053da <DMA_SetConfig+0x10a>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a67      	ldr	r2, [pc, #412]	@ (800552c <DMA_SetConfig+0x25c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d022      	beq.n	80053da <DMA_SetConfig+0x10a>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a65      	ldr	r2, [pc, #404]	@ (8005530 <DMA_SetConfig+0x260>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d01d      	beq.n	80053da <DMA_SetConfig+0x10a>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a64      	ldr	r2, [pc, #400]	@ (8005534 <DMA_SetConfig+0x264>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d018      	beq.n	80053da <DMA_SetConfig+0x10a>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a62      	ldr	r2, [pc, #392]	@ (8005538 <DMA_SetConfig+0x268>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d013      	beq.n	80053da <DMA_SetConfig+0x10a>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a61      	ldr	r2, [pc, #388]	@ (800553c <DMA_SetConfig+0x26c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d00e      	beq.n	80053da <DMA_SetConfig+0x10a>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a5f      	ldr	r2, [pc, #380]	@ (8005540 <DMA_SetConfig+0x270>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d009      	beq.n	80053da <DMA_SetConfig+0x10a>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a5e      	ldr	r2, [pc, #376]	@ (8005544 <DMA_SetConfig+0x274>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d004      	beq.n	80053da <DMA_SetConfig+0x10a>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a5c      	ldr	r2, [pc, #368]	@ (8005548 <DMA_SetConfig+0x278>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d101      	bne.n	80053de <DMA_SetConfig+0x10e>
 80053da:	2301      	movs	r3, #1
 80053dc:	e000      	b.n	80053e0 <DMA_SetConfig+0x110>
 80053de:	2300      	movs	r3, #0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00d      	beq.n	8005400 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80053ec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d004      	beq.n	8005400 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80053fe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a39      	ldr	r2, [pc, #228]	@ (80054ec <DMA_SetConfig+0x21c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d04a      	beq.n	80054a0 <DMA_SetConfig+0x1d0>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a38      	ldr	r2, [pc, #224]	@ (80054f0 <DMA_SetConfig+0x220>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d045      	beq.n	80054a0 <DMA_SetConfig+0x1d0>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a36      	ldr	r2, [pc, #216]	@ (80054f4 <DMA_SetConfig+0x224>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d040      	beq.n	80054a0 <DMA_SetConfig+0x1d0>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a35      	ldr	r2, [pc, #212]	@ (80054f8 <DMA_SetConfig+0x228>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d03b      	beq.n	80054a0 <DMA_SetConfig+0x1d0>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a33      	ldr	r2, [pc, #204]	@ (80054fc <DMA_SetConfig+0x22c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d036      	beq.n	80054a0 <DMA_SetConfig+0x1d0>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a32      	ldr	r2, [pc, #200]	@ (8005500 <DMA_SetConfig+0x230>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d031      	beq.n	80054a0 <DMA_SetConfig+0x1d0>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a30      	ldr	r2, [pc, #192]	@ (8005504 <DMA_SetConfig+0x234>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d02c      	beq.n	80054a0 <DMA_SetConfig+0x1d0>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a2f      	ldr	r2, [pc, #188]	@ (8005508 <DMA_SetConfig+0x238>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d027      	beq.n	80054a0 <DMA_SetConfig+0x1d0>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a2d      	ldr	r2, [pc, #180]	@ (800550c <DMA_SetConfig+0x23c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d022      	beq.n	80054a0 <DMA_SetConfig+0x1d0>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a2c      	ldr	r2, [pc, #176]	@ (8005510 <DMA_SetConfig+0x240>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d01d      	beq.n	80054a0 <DMA_SetConfig+0x1d0>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a2a      	ldr	r2, [pc, #168]	@ (8005514 <DMA_SetConfig+0x244>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d018      	beq.n	80054a0 <DMA_SetConfig+0x1d0>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a29      	ldr	r2, [pc, #164]	@ (8005518 <DMA_SetConfig+0x248>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d013      	beq.n	80054a0 <DMA_SetConfig+0x1d0>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a27      	ldr	r2, [pc, #156]	@ (800551c <DMA_SetConfig+0x24c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d00e      	beq.n	80054a0 <DMA_SetConfig+0x1d0>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a26      	ldr	r2, [pc, #152]	@ (8005520 <DMA_SetConfig+0x250>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d009      	beq.n	80054a0 <DMA_SetConfig+0x1d0>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a24      	ldr	r2, [pc, #144]	@ (8005524 <DMA_SetConfig+0x254>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d004      	beq.n	80054a0 <DMA_SetConfig+0x1d0>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a23      	ldr	r2, [pc, #140]	@ (8005528 <DMA_SetConfig+0x258>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d101      	bne.n	80054a4 <DMA_SetConfig+0x1d4>
 80054a0:	2301      	movs	r3, #1
 80054a2:	e000      	b.n	80054a6 <DMA_SetConfig+0x1d6>
 80054a4:	2300      	movs	r3, #0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d059      	beq.n	800555e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ae:	f003 031f 	and.w	r3, r3, #31
 80054b2:	223f      	movs	r2, #63	@ 0x3f
 80054b4:	409a      	lsls	r2, r3
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80054c8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	2b40      	cmp	r3, #64	@ 0x40
 80054d8:	d138      	bne.n	800554c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80054ea:	e086      	b.n	80055fa <DMA_SetConfig+0x32a>
 80054ec:	40020010 	.word	0x40020010
 80054f0:	40020028 	.word	0x40020028
 80054f4:	40020040 	.word	0x40020040
 80054f8:	40020058 	.word	0x40020058
 80054fc:	40020070 	.word	0x40020070
 8005500:	40020088 	.word	0x40020088
 8005504:	400200a0 	.word	0x400200a0
 8005508:	400200b8 	.word	0x400200b8
 800550c:	40020410 	.word	0x40020410
 8005510:	40020428 	.word	0x40020428
 8005514:	40020440 	.word	0x40020440
 8005518:	40020458 	.word	0x40020458
 800551c:	40020470 	.word	0x40020470
 8005520:	40020488 	.word	0x40020488
 8005524:	400204a0 	.word	0x400204a0
 8005528:	400204b8 	.word	0x400204b8
 800552c:	58025408 	.word	0x58025408
 8005530:	5802541c 	.word	0x5802541c
 8005534:	58025430 	.word	0x58025430
 8005538:	58025444 	.word	0x58025444
 800553c:	58025458 	.word	0x58025458
 8005540:	5802546c 	.word	0x5802546c
 8005544:	58025480 	.word	0x58025480
 8005548:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	60da      	str	r2, [r3, #12]
}
 800555c:	e04d      	b.n	80055fa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a29      	ldr	r2, [pc, #164]	@ (8005608 <DMA_SetConfig+0x338>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d022      	beq.n	80055ae <DMA_SetConfig+0x2de>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a27      	ldr	r2, [pc, #156]	@ (800560c <DMA_SetConfig+0x33c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d01d      	beq.n	80055ae <DMA_SetConfig+0x2de>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a26      	ldr	r2, [pc, #152]	@ (8005610 <DMA_SetConfig+0x340>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d018      	beq.n	80055ae <DMA_SetConfig+0x2de>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a24      	ldr	r2, [pc, #144]	@ (8005614 <DMA_SetConfig+0x344>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d013      	beq.n	80055ae <DMA_SetConfig+0x2de>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a23      	ldr	r2, [pc, #140]	@ (8005618 <DMA_SetConfig+0x348>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d00e      	beq.n	80055ae <DMA_SetConfig+0x2de>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a21      	ldr	r2, [pc, #132]	@ (800561c <DMA_SetConfig+0x34c>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d009      	beq.n	80055ae <DMA_SetConfig+0x2de>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a20      	ldr	r2, [pc, #128]	@ (8005620 <DMA_SetConfig+0x350>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d004      	beq.n	80055ae <DMA_SetConfig+0x2de>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005624 <DMA_SetConfig+0x354>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d101      	bne.n	80055b2 <DMA_SetConfig+0x2e2>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e000      	b.n	80055b4 <DMA_SetConfig+0x2e4>
 80055b2:	2300      	movs	r3, #0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d020      	beq.n	80055fa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055bc:	f003 031f 	and.w	r3, r3, #31
 80055c0:	2201      	movs	r2, #1
 80055c2:	409a      	lsls	r2, r3
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	2b40      	cmp	r3, #64	@ 0x40
 80055d6:	d108      	bne.n	80055ea <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	60da      	str	r2, [r3, #12]
}
 80055e8:	e007      	b.n	80055fa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	60da      	str	r2, [r3, #12]
}
 80055fa:	bf00      	nop
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	58025408 	.word	0x58025408
 800560c:	5802541c 	.word	0x5802541c
 8005610:	58025430 	.word	0x58025430
 8005614:	58025444 	.word	0x58025444
 8005618:	58025458 	.word	0x58025458
 800561c:	5802546c 	.word	0x5802546c
 8005620:	58025480 	.word	0x58025480
 8005624:	58025494 	.word	0x58025494

08005628 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a42      	ldr	r2, [pc, #264]	@ (8005740 <DMA_CalcBaseAndBitshift+0x118>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d04a      	beq.n	80056d0 <DMA_CalcBaseAndBitshift+0xa8>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a41      	ldr	r2, [pc, #260]	@ (8005744 <DMA_CalcBaseAndBitshift+0x11c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d045      	beq.n	80056d0 <DMA_CalcBaseAndBitshift+0xa8>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a3f      	ldr	r2, [pc, #252]	@ (8005748 <DMA_CalcBaseAndBitshift+0x120>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d040      	beq.n	80056d0 <DMA_CalcBaseAndBitshift+0xa8>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a3e      	ldr	r2, [pc, #248]	@ (800574c <DMA_CalcBaseAndBitshift+0x124>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d03b      	beq.n	80056d0 <DMA_CalcBaseAndBitshift+0xa8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a3c      	ldr	r2, [pc, #240]	@ (8005750 <DMA_CalcBaseAndBitshift+0x128>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d036      	beq.n	80056d0 <DMA_CalcBaseAndBitshift+0xa8>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a3b      	ldr	r2, [pc, #236]	@ (8005754 <DMA_CalcBaseAndBitshift+0x12c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d031      	beq.n	80056d0 <DMA_CalcBaseAndBitshift+0xa8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a39      	ldr	r2, [pc, #228]	@ (8005758 <DMA_CalcBaseAndBitshift+0x130>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d02c      	beq.n	80056d0 <DMA_CalcBaseAndBitshift+0xa8>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a38      	ldr	r2, [pc, #224]	@ (800575c <DMA_CalcBaseAndBitshift+0x134>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d027      	beq.n	80056d0 <DMA_CalcBaseAndBitshift+0xa8>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a36      	ldr	r2, [pc, #216]	@ (8005760 <DMA_CalcBaseAndBitshift+0x138>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d022      	beq.n	80056d0 <DMA_CalcBaseAndBitshift+0xa8>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a35      	ldr	r2, [pc, #212]	@ (8005764 <DMA_CalcBaseAndBitshift+0x13c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d01d      	beq.n	80056d0 <DMA_CalcBaseAndBitshift+0xa8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a33      	ldr	r2, [pc, #204]	@ (8005768 <DMA_CalcBaseAndBitshift+0x140>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d018      	beq.n	80056d0 <DMA_CalcBaseAndBitshift+0xa8>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a32      	ldr	r2, [pc, #200]	@ (800576c <DMA_CalcBaseAndBitshift+0x144>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d013      	beq.n	80056d0 <DMA_CalcBaseAndBitshift+0xa8>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a30      	ldr	r2, [pc, #192]	@ (8005770 <DMA_CalcBaseAndBitshift+0x148>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00e      	beq.n	80056d0 <DMA_CalcBaseAndBitshift+0xa8>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a2f      	ldr	r2, [pc, #188]	@ (8005774 <DMA_CalcBaseAndBitshift+0x14c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d009      	beq.n	80056d0 <DMA_CalcBaseAndBitshift+0xa8>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005778 <DMA_CalcBaseAndBitshift+0x150>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d004      	beq.n	80056d0 <DMA_CalcBaseAndBitshift+0xa8>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a2c      	ldr	r2, [pc, #176]	@ (800577c <DMA_CalcBaseAndBitshift+0x154>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d101      	bne.n	80056d4 <DMA_CalcBaseAndBitshift+0xac>
 80056d0:	2301      	movs	r3, #1
 80056d2:	e000      	b.n	80056d6 <DMA_CalcBaseAndBitshift+0xae>
 80056d4:	2300      	movs	r3, #0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d024      	beq.n	8005724 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	3b10      	subs	r3, #16
 80056e2:	4a27      	ldr	r2, [pc, #156]	@ (8005780 <DMA_CalcBaseAndBitshift+0x158>)
 80056e4:	fba2 2303 	umull	r2, r3, r2, r3
 80056e8:	091b      	lsrs	r3, r3, #4
 80056ea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	4a24      	ldr	r2, [pc, #144]	@ (8005784 <DMA_CalcBaseAndBitshift+0x15c>)
 80056f4:	5cd3      	ldrb	r3, [r2, r3]
 80056f6:	461a      	mov	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2b03      	cmp	r3, #3
 8005700:	d908      	bls.n	8005714 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	4b1f      	ldr	r3, [pc, #124]	@ (8005788 <DMA_CalcBaseAndBitshift+0x160>)
 800570a:	4013      	ands	r3, r2
 800570c:	1d1a      	adds	r2, r3, #4
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	659a      	str	r2, [r3, #88]	@ 0x58
 8005712:	e00d      	b.n	8005730 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	461a      	mov	r2, r3
 800571a:	4b1b      	ldr	r3, [pc, #108]	@ (8005788 <DMA_CalcBaseAndBitshift+0x160>)
 800571c:	4013      	ands	r3, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6593      	str	r3, [r2, #88]	@ 0x58
 8005722:	e005      	b.n	8005730 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	40020010 	.word	0x40020010
 8005744:	40020028 	.word	0x40020028
 8005748:	40020040 	.word	0x40020040
 800574c:	40020058 	.word	0x40020058
 8005750:	40020070 	.word	0x40020070
 8005754:	40020088 	.word	0x40020088
 8005758:	400200a0 	.word	0x400200a0
 800575c:	400200b8 	.word	0x400200b8
 8005760:	40020410 	.word	0x40020410
 8005764:	40020428 	.word	0x40020428
 8005768:	40020440 	.word	0x40020440
 800576c:	40020458 	.word	0x40020458
 8005770:	40020470 	.word	0x40020470
 8005774:	40020488 	.word	0x40020488
 8005778:	400204a0 	.word	0x400204a0
 800577c:	400204b8 	.word	0x400204b8
 8005780:	aaaaaaab 	.word	0xaaaaaaab
 8005784:	08016138 	.word	0x08016138
 8005788:	fffffc00 	.word	0xfffffc00

0800578c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005794:	2300      	movs	r3, #0
 8005796:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d120      	bne.n	80057e2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d858      	bhi.n	800585a <DMA_CheckFifoParam+0xce>
 80057a8:	a201      	add	r2, pc, #4	@ (adr r2, 80057b0 <DMA_CheckFifoParam+0x24>)
 80057aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ae:	bf00      	nop
 80057b0:	080057c1 	.word	0x080057c1
 80057b4:	080057d3 	.word	0x080057d3
 80057b8:	080057c1 	.word	0x080057c1
 80057bc:	0800585b 	.word	0x0800585b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d048      	beq.n	800585e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057d0:	e045      	b.n	800585e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057da:	d142      	bne.n	8005862 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057e0:	e03f      	b.n	8005862 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057ea:	d123      	bne.n	8005834 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d838      	bhi.n	8005866 <DMA_CheckFifoParam+0xda>
 80057f4:	a201      	add	r2, pc, #4	@ (adr r2, 80057fc <DMA_CheckFifoParam+0x70>)
 80057f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fa:	bf00      	nop
 80057fc:	0800580d 	.word	0x0800580d
 8005800:	08005813 	.word	0x08005813
 8005804:	0800580d 	.word	0x0800580d
 8005808:	08005825 	.word	0x08005825
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	73fb      	strb	r3, [r7, #15]
        break;
 8005810:	e030      	b.n	8005874 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005816:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d025      	beq.n	800586a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005822:	e022      	b.n	800586a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005828:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800582c:	d11f      	bne.n	800586e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005832:	e01c      	b.n	800586e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005838:	2b02      	cmp	r3, #2
 800583a:	d902      	bls.n	8005842 <DMA_CheckFifoParam+0xb6>
 800583c:	2b03      	cmp	r3, #3
 800583e:	d003      	beq.n	8005848 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005840:	e018      	b.n	8005874 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	73fb      	strb	r3, [r7, #15]
        break;
 8005846:	e015      	b.n	8005874 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800584c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00e      	beq.n	8005872 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	73fb      	strb	r3, [r7, #15]
    break;
 8005858:	e00b      	b.n	8005872 <DMA_CheckFifoParam+0xe6>
        break;
 800585a:	bf00      	nop
 800585c:	e00a      	b.n	8005874 <DMA_CheckFifoParam+0xe8>
        break;
 800585e:	bf00      	nop
 8005860:	e008      	b.n	8005874 <DMA_CheckFifoParam+0xe8>
        break;
 8005862:	bf00      	nop
 8005864:	e006      	b.n	8005874 <DMA_CheckFifoParam+0xe8>
        break;
 8005866:	bf00      	nop
 8005868:	e004      	b.n	8005874 <DMA_CheckFifoParam+0xe8>
        break;
 800586a:	bf00      	nop
 800586c:	e002      	b.n	8005874 <DMA_CheckFifoParam+0xe8>
        break;
 800586e:	bf00      	nop
 8005870:	e000      	b.n	8005874 <DMA_CheckFifoParam+0xe8>
    break;
 8005872:	bf00      	nop
    }
  }

  return status;
 8005874:	7bfb      	ldrb	r3, [r7, #15]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop

08005884 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a38      	ldr	r2, [pc, #224]	@ (8005978 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d022      	beq.n	80058e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a36      	ldr	r2, [pc, #216]	@ (800597c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d01d      	beq.n	80058e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a35      	ldr	r2, [pc, #212]	@ (8005980 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d018      	beq.n	80058e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a33      	ldr	r2, [pc, #204]	@ (8005984 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d013      	beq.n	80058e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a32      	ldr	r2, [pc, #200]	@ (8005988 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00e      	beq.n	80058e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a30      	ldr	r2, [pc, #192]	@ (800598c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d009      	beq.n	80058e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a2f      	ldr	r2, [pc, #188]	@ (8005990 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d004      	beq.n	80058e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a2d      	ldr	r2, [pc, #180]	@ (8005994 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d101      	bne.n	80058e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80058e2:	2301      	movs	r3, #1
 80058e4:	e000      	b.n	80058e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80058e6:	2300      	movs	r3, #0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d01a      	beq.n	8005922 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	3b08      	subs	r3, #8
 80058f4:	4a28      	ldr	r2, [pc, #160]	@ (8005998 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80058f6:	fba2 2303 	umull	r2, r3, r2, r3
 80058fa:	091b      	lsrs	r3, r3, #4
 80058fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4b26      	ldr	r3, [pc, #152]	@ (800599c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005902:	4413      	add	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	461a      	mov	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a24      	ldr	r2, [pc, #144]	@ (80059a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005910:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f003 031f 	and.w	r3, r3, #31
 8005918:	2201      	movs	r2, #1
 800591a:	409a      	lsls	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005920:	e024      	b.n	800596c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	3b10      	subs	r3, #16
 800592a:	4a1e      	ldr	r2, [pc, #120]	@ (80059a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800592c:	fba2 2303 	umull	r2, r3, r2, r3
 8005930:	091b      	lsrs	r3, r3, #4
 8005932:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4a1c      	ldr	r2, [pc, #112]	@ (80059a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d806      	bhi.n	800594a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4a1b      	ldr	r2, [pc, #108]	@ (80059ac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d902      	bls.n	800594a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3308      	adds	r3, #8
 8005948:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4b18      	ldr	r3, [pc, #96]	@ (80059b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800594e:	4413      	add	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	461a      	mov	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a16      	ldr	r2, [pc, #88]	@ (80059b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800595c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f003 031f 	and.w	r3, r3, #31
 8005964:	2201      	movs	r2, #1
 8005966:	409a      	lsls	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800596c:	bf00      	nop
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	58025408 	.word	0x58025408
 800597c:	5802541c 	.word	0x5802541c
 8005980:	58025430 	.word	0x58025430
 8005984:	58025444 	.word	0x58025444
 8005988:	58025458 	.word	0x58025458
 800598c:	5802546c 	.word	0x5802546c
 8005990:	58025480 	.word	0x58025480
 8005994:	58025494 	.word	0x58025494
 8005998:	cccccccd 	.word	0xcccccccd
 800599c:	16009600 	.word	0x16009600
 80059a0:	58025880 	.word	0x58025880
 80059a4:	aaaaaaab 	.word	0xaaaaaaab
 80059a8:	400204b8 	.word	0x400204b8
 80059ac:	4002040f 	.word	0x4002040f
 80059b0:	10008200 	.word	0x10008200
 80059b4:	40020880 	.word	0x40020880

080059b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d04a      	beq.n	8005a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b08      	cmp	r3, #8
 80059d2:	d847      	bhi.n	8005a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a25      	ldr	r2, [pc, #148]	@ (8005a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d022      	beq.n	8005a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a24      	ldr	r2, [pc, #144]	@ (8005a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d01d      	beq.n	8005a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a22      	ldr	r2, [pc, #136]	@ (8005a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d018      	beq.n	8005a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a21      	ldr	r2, [pc, #132]	@ (8005a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d013      	beq.n	8005a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a1f      	ldr	r2, [pc, #124]	@ (8005a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00e      	beq.n	8005a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8005a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d009      	beq.n	8005a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a1c      	ldr	r2, [pc, #112]	@ (8005a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d004      	beq.n	8005a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a1b      	ldr	r2, [pc, #108]	@ (8005a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d101      	bne.n	8005a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005a24:	2301      	movs	r3, #1
 8005a26:	e000      	b.n	8005a2a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4b17      	ldr	r3, [pc, #92]	@ (8005a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	461a      	mov	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a15      	ldr	r2, [pc, #84]	@ (8005a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005a40:	671a      	str	r2, [r3, #112]	@ 0x70
 8005a42:	e009      	b.n	8005a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4b14      	ldr	r3, [pc, #80]	@ (8005a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005a48:	4413      	add	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a11      	ldr	r2, [pc, #68]	@ (8005a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005a56:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	409a      	lsls	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005a64:	bf00      	nop
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	58025408 	.word	0x58025408
 8005a74:	5802541c 	.word	0x5802541c
 8005a78:	58025430 	.word	0x58025430
 8005a7c:	58025444 	.word	0x58025444
 8005a80:	58025458 	.word	0x58025458
 8005a84:	5802546c 	.word	0x5802546c
 8005a88:	58025480 	.word	0x58025480
 8005a8c:	58025494 	.word	0x58025494
 8005a90:	1600963f 	.word	0x1600963f
 8005a94:	58025940 	.word	0x58025940
 8005a98:	1000823f 	.word	0x1000823f
 8005a9c:	40020940 	.word	0x40020940

08005aa0 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	2b80      	cmp	r3, #128	@ 0x80
 8005ab8:	d105      	bne.n	8005ac6 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ac0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e315      	b.n	80060f2 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	e30e      	b.n	80060f2 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	f040 82fd 	bne.w	80060e4 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2202      	movs	r2, #2
 8005aee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a82      	ldr	r2, [pc, #520]	@ (8005d08 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d04a      	beq.n	8005b98 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a81      	ldr	r2, [pc, #516]	@ (8005d0c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d045      	beq.n	8005b98 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a7f      	ldr	r2, [pc, #508]	@ (8005d10 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d040      	beq.n	8005b98 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a7e      	ldr	r2, [pc, #504]	@ (8005d14 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d03b      	beq.n	8005b98 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a7c      	ldr	r2, [pc, #496]	@ (8005d18 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d036      	beq.n	8005b98 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a7b      	ldr	r2, [pc, #492]	@ (8005d1c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d031      	beq.n	8005b98 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a79      	ldr	r2, [pc, #484]	@ (8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d02c      	beq.n	8005b98 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a78      	ldr	r2, [pc, #480]	@ (8005d24 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d027      	beq.n	8005b98 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a76      	ldr	r2, [pc, #472]	@ (8005d28 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d022      	beq.n	8005b98 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a75      	ldr	r2, [pc, #468]	@ (8005d2c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d01d      	beq.n	8005b98 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a73      	ldr	r2, [pc, #460]	@ (8005d30 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d018      	beq.n	8005b98 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a72      	ldr	r2, [pc, #456]	@ (8005d34 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d013      	beq.n	8005b98 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a70      	ldr	r2, [pc, #448]	@ (8005d38 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d00e      	beq.n	8005b98 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a6f      	ldr	r2, [pc, #444]	@ (8005d3c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d009      	beq.n	8005b98 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a6d      	ldr	r2, [pc, #436]	@ (8005d40 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d004      	beq.n	8005b98 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a6c      	ldr	r2, [pc, #432]	@ (8005d44 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d101      	bne.n	8005b9c <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e000      	b.n	8005b9e <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d018      	beq.n	8005bd4 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005bb0:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bc6:	f003 031f 	and.w	r3, r3, #31
 8005bca:	223f      	movs	r2, #63	@ 0x3f
 8005bcc:	409a      	lsls	r2, r3
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	e018      	b.n	8005c06 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6819      	ldr	r1, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	f248 0320 	movw	r3, #32800	@ 0x8020
 8005be2:	430b      	orrs	r3, r1
 8005be4:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bfa:	f003 031f 	and.w	r3, r3, #31
 8005bfe:	2201      	movs	r2, #1
 8005c00:	409a      	lsls	r2, r3
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 fb41 	bl	8006294 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a3c      	ldr	r2, [pc, #240]	@ (8005d08 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d072      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a3a      	ldr	r2, [pc, #232]	@ (8005d0c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d06d      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a39      	ldr	r2, [pc, #228]	@ (8005d10 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d068      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a37      	ldr	r2, [pc, #220]	@ (8005d14 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d063      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a36      	ldr	r2, [pc, #216]	@ (8005d18 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d05e      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a34      	ldr	r2, [pc, #208]	@ (8005d1c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d059      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a33      	ldr	r2, [pc, #204]	@ (8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d054      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a31      	ldr	r2, [pc, #196]	@ (8005d24 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d04f      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a30      	ldr	r2, [pc, #192]	@ (8005d28 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d04a      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a2e      	ldr	r2, [pc, #184]	@ (8005d2c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d045      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a2d      	ldr	r2, [pc, #180]	@ (8005d30 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d040      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a2b      	ldr	r2, [pc, #172]	@ (8005d34 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d03b      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8005d38 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d036      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a28      	ldr	r2, [pc, #160]	@ (8005d3c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d031      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a27      	ldr	r2, [pc, #156]	@ (8005d40 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d02c      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a25      	ldr	r2, [pc, #148]	@ (8005d44 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d027      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a24      	ldr	r2, [pc, #144]	@ (8005d48 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d022      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a22      	ldr	r2, [pc, #136]	@ (8005d4c <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d01d      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a21      	ldr	r2, [pc, #132]	@ (8005d50 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d018      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a1f      	ldr	r2, [pc, #124]	@ (8005d54 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d013      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a1e      	ldr	r2, [pc, #120]	@ (8005d58 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d00e      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8005d5c <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d009      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8005d60 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d004      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a19      	ldr	r2, [pc, #100]	@ (8005d64 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d132      	bne.n	8005d68 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8005d02:	2301      	movs	r3, #1
 8005d04:	e031      	b.n	8005d6a <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8005d06:	bf00      	nop
 8005d08:	40020010 	.word	0x40020010
 8005d0c:	40020028 	.word	0x40020028
 8005d10:	40020040 	.word	0x40020040
 8005d14:	40020058 	.word	0x40020058
 8005d18:	40020070 	.word	0x40020070
 8005d1c:	40020088 	.word	0x40020088
 8005d20:	400200a0 	.word	0x400200a0
 8005d24:	400200b8 	.word	0x400200b8
 8005d28:	40020410 	.word	0x40020410
 8005d2c:	40020428 	.word	0x40020428
 8005d30:	40020440 	.word	0x40020440
 8005d34:	40020458 	.word	0x40020458
 8005d38:	40020470 	.word	0x40020470
 8005d3c:	40020488 	.word	0x40020488
 8005d40:	400204a0 	.word	0x400204a0
 8005d44:	400204b8 	.word	0x400204b8
 8005d48:	58025408 	.word	0x58025408
 8005d4c:	5802541c 	.word	0x5802541c
 8005d50:	58025430 	.word	0x58025430
 8005d54:	58025444 	.word	0x58025444
 8005d58:	58025458 	.word	0x58025458
 8005d5c:	5802546c 	.word	0x5802546c
 8005d60:	58025480 	.word	0x58025480
 8005d64:	58025494 	.word	0x58025494
 8005d68:	2300      	movs	r3, #0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00d      	beq.n	8005d8a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005d76:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d004      	beq.n	8005d8a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005d88:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a3b      	ldr	r2, [pc, #236]	@ (8005e7c <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d04a      	beq.n	8005e2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a39      	ldr	r2, [pc, #228]	@ (8005e80 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d045      	beq.n	8005e2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a38      	ldr	r2, [pc, #224]	@ (8005e84 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d040      	beq.n	8005e2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a36      	ldr	r2, [pc, #216]	@ (8005e88 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d03b      	beq.n	8005e2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a35      	ldr	r2, [pc, #212]	@ (8005e8c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d036      	beq.n	8005e2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a33      	ldr	r2, [pc, #204]	@ (8005e90 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d031      	beq.n	8005e2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a32      	ldr	r2, [pc, #200]	@ (8005e94 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d02c      	beq.n	8005e2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a30      	ldr	r2, [pc, #192]	@ (8005e98 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d027      	beq.n	8005e2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a2f      	ldr	r2, [pc, #188]	@ (8005e9c <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d022      	beq.n	8005e2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a2d      	ldr	r2, [pc, #180]	@ (8005ea0 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d01d      	beq.n	8005e2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a2c      	ldr	r2, [pc, #176]	@ (8005ea4 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d018      	beq.n	8005e2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a2a      	ldr	r2, [pc, #168]	@ (8005ea8 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d013      	beq.n	8005e2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a29      	ldr	r2, [pc, #164]	@ (8005eac <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00e      	beq.n	8005e2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a27      	ldr	r2, [pc, #156]	@ (8005eb0 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d009      	beq.n	8005e2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a26      	ldr	r2, [pc, #152]	@ (8005eb4 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d004      	beq.n	8005e2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a24      	ldr	r2, [pc, #144]	@ (8005eb8 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d101      	bne.n	8005e2e <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e000      	b.n	8005e30 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d043      	beq.n	8005ebc <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f023 021e 	bic.w	r2, r3, #30
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0216 	orr.w	r2, r2, #22
 8005e46:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	695a      	ldr	r2, [r3, #20]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005e56:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d103      	bne.n	8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d043      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0208 	orr.w	r2, r2, #8
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	e03a      	b.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8005e7a:	bf00      	nop
 8005e7c:	40020010 	.word	0x40020010
 8005e80:	40020028 	.word	0x40020028
 8005e84:	40020040 	.word	0x40020040
 8005e88:	40020058 	.word	0x40020058
 8005e8c:	40020070 	.word	0x40020070
 8005e90:	40020088 	.word	0x40020088
 8005e94:	400200a0 	.word	0x400200a0
 8005e98:	400200b8 	.word	0x400200b8
 8005e9c:	40020410 	.word	0x40020410
 8005ea0:	40020428 	.word	0x40020428
 8005ea4:	40020440 	.word	0x40020440
 8005ea8:	40020458 	.word	0x40020458
 8005eac:	40020470 	.word	0x40020470
 8005eb0:	40020488 	.word	0x40020488
 8005eb4:	400204a0 	.word	0x400204a0
 8005eb8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f023 020e 	bic.w	r2, r3, #14
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 020a 	orr.w	r2, r2, #10
 8005ece:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d103      	bne.n	8005ee0 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d007      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0204 	orr.w	r2, r2, #4
 8005eee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a81      	ldr	r2, [pc, #516]	@ (80060fc <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d072      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a80      	ldr	r2, [pc, #512]	@ (8006100 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d06d      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a7e      	ldr	r2, [pc, #504]	@ (8006104 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d068      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a7d      	ldr	r2, [pc, #500]	@ (8006108 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d063      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a7b      	ldr	r2, [pc, #492]	@ (800610c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d05e      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a7a      	ldr	r2, [pc, #488]	@ (8006110 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d059      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a78      	ldr	r2, [pc, #480]	@ (8006114 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d054      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a77      	ldr	r2, [pc, #476]	@ (8006118 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d04f      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a75      	ldr	r2, [pc, #468]	@ (800611c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d04a      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a74      	ldr	r2, [pc, #464]	@ (8006120 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d045      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a72      	ldr	r2, [pc, #456]	@ (8006124 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d040      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a71      	ldr	r2, [pc, #452]	@ (8006128 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d03b      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a6f      	ldr	r2, [pc, #444]	@ (800612c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d036      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a6e      	ldr	r2, [pc, #440]	@ (8006130 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d031      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a6c      	ldr	r2, [pc, #432]	@ (8006134 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d02c      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a6b      	ldr	r2, [pc, #428]	@ (8006138 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d027      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a69      	ldr	r2, [pc, #420]	@ (800613c <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d022      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a68      	ldr	r2, [pc, #416]	@ (8006140 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d01d      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a66      	ldr	r2, [pc, #408]	@ (8006144 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d018      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a65      	ldr	r2, [pc, #404]	@ (8006148 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d013      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a63      	ldr	r2, [pc, #396]	@ (800614c <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d00e      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a62      	ldr	r2, [pc, #392]	@ (8006150 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d009      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a60      	ldr	r2, [pc, #384]	@ (8006154 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d004      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a5f      	ldr	r2, [pc, #380]	@ (8006158 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d101      	bne.n	8005fe4 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d01a      	beq.n	8006020 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d007      	beq.n	8006008 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006002:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006006:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800600c:	2b00      	cmp	r3, #0
 800600e:	d007      	beq.n	8006020 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800601a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800601e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a35      	ldr	r2, [pc, #212]	@ (80060fc <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d04a      	beq.n	80060c0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a34      	ldr	r2, [pc, #208]	@ (8006100 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d045      	beq.n	80060c0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a32      	ldr	r2, [pc, #200]	@ (8006104 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d040      	beq.n	80060c0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a31      	ldr	r2, [pc, #196]	@ (8006108 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d03b      	beq.n	80060c0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a2f      	ldr	r2, [pc, #188]	@ (800610c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d036      	beq.n	80060c0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a2e      	ldr	r2, [pc, #184]	@ (8006110 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d031      	beq.n	80060c0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a2c      	ldr	r2, [pc, #176]	@ (8006114 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d02c      	beq.n	80060c0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a2b      	ldr	r2, [pc, #172]	@ (8006118 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d027      	beq.n	80060c0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a29      	ldr	r2, [pc, #164]	@ (800611c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d022      	beq.n	80060c0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a28      	ldr	r2, [pc, #160]	@ (8006120 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d01d      	beq.n	80060c0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a26      	ldr	r2, [pc, #152]	@ (8006124 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d018      	beq.n	80060c0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a25      	ldr	r2, [pc, #148]	@ (8006128 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d013      	beq.n	80060c0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a23      	ldr	r2, [pc, #140]	@ (800612c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d00e      	beq.n	80060c0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a22      	ldr	r2, [pc, #136]	@ (8006130 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d009      	beq.n	80060c0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a20      	ldr	r2, [pc, #128]	@ (8006134 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d004      	beq.n	80060c0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1f      	ldr	r2, [pc, #124]	@ (8006138 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d108      	bne.n	80060d2 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f042 0201 	orr.w	r2, r2, #1
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	e00e      	b.n	80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f042 0201 	orr.w	r2, r2, #1
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	e005      	b.n	80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80060ea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80060f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	40020010 	.word	0x40020010
 8006100:	40020028 	.word	0x40020028
 8006104:	40020040 	.word	0x40020040
 8006108:	40020058 	.word	0x40020058
 800610c:	40020070 	.word	0x40020070
 8006110:	40020088 	.word	0x40020088
 8006114:	400200a0 	.word	0x400200a0
 8006118:	400200b8 	.word	0x400200b8
 800611c:	40020410 	.word	0x40020410
 8006120:	40020428 	.word	0x40020428
 8006124:	40020440 	.word	0x40020440
 8006128:	40020458 	.word	0x40020458
 800612c:	40020470 	.word	0x40020470
 8006130:	40020488 	.word	0x40020488
 8006134:	400204a0 	.word	0x400204a0
 8006138:	400204b8 	.word	0x400204b8
 800613c:	58025408 	.word	0x58025408
 8006140:	5802541c 	.word	0x5802541c
 8006144:	58025430 	.word	0x58025430
 8006148:	58025444 	.word	0x58025444
 800614c:	58025458 	.word	0x58025458
 8006150:	5802546c 	.word	0x5802546c
 8006154:	58025480 	.word	0x58025480
 8006158:	58025494 	.word	0x58025494

0800615c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	4613      	mov	r3, r2
 8006168:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a39      	ldr	r2, [pc, #228]	@ (8006254 <HAL_DMAEx_ChangeMemory+0xf8>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d04a      	beq.n	800620a <HAL_DMAEx_ChangeMemory+0xae>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a37      	ldr	r2, [pc, #220]	@ (8006258 <HAL_DMAEx_ChangeMemory+0xfc>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d045      	beq.n	800620a <HAL_DMAEx_ChangeMemory+0xae>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a36      	ldr	r2, [pc, #216]	@ (800625c <HAL_DMAEx_ChangeMemory+0x100>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d040      	beq.n	800620a <HAL_DMAEx_ChangeMemory+0xae>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a34      	ldr	r2, [pc, #208]	@ (8006260 <HAL_DMAEx_ChangeMemory+0x104>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d03b      	beq.n	800620a <HAL_DMAEx_ChangeMemory+0xae>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a33      	ldr	r2, [pc, #204]	@ (8006264 <HAL_DMAEx_ChangeMemory+0x108>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d036      	beq.n	800620a <HAL_DMAEx_ChangeMemory+0xae>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a31      	ldr	r2, [pc, #196]	@ (8006268 <HAL_DMAEx_ChangeMemory+0x10c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d031      	beq.n	800620a <HAL_DMAEx_ChangeMemory+0xae>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a30      	ldr	r2, [pc, #192]	@ (800626c <HAL_DMAEx_ChangeMemory+0x110>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d02c      	beq.n	800620a <HAL_DMAEx_ChangeMemory+0xae>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a2e      	ldr	r2, [pc, #184]	@ (8006270 <HAL_DMAEx_ChangeMemory+0x114>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d027      	beq.n	800620a <HAL_DMAEx_ChangeMemory+0xae>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a2d      	ldr	r2, [pc, #180]	@ (8006274 <HAL_DMAEx_ChangeMemory+0x118>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d022      	beq.n	800620a <HAL_DMAEx_ChangeMemory+0xae>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a2b      	ldr	r2, [pc, #172]	@ (8006278 <HAL_DMAEx_ChangeMemory+0x11c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d01d      	beq.n	800620a <HAL_DMAEx_ChangeMemory+0xae>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a2a      	ldr	r2, [pc, #168]	@ (800627c <HAL_DMAEx_ChangeMemory+0x120>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d018      	beq.n	800620a <HAL_DMAEx_ChangeMemory+0xae>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a28      	ldr	r2, [pc, #160]	@ (8006280 <HAL_DMAEx_ChangeMemory+0x124>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d013      	beq.n	800620a <HAL_DMAEx_ChangeMemory+0xae>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a27      	ldr	r2, [pc, #156]	@ (8006284 <HAL_DMAEx_ChangeMemory+0x128>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d00e      	beq.n	800620a <HAL_DMAEx_ChangeMemory+0xae>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a25      	ldr	r2, [pc, #148]	@ (8006288 <HAL_DMAEx_ChangeMemory+0x12c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d009      	beq.n	800620a <HAL_DMAEx_ChangeMemory+0xae>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a24      	ldr	r2, [pc, #144]	@ (800628c <HAL_DMAEx_ChangeMemory+0x130>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d004      	beq.n	800620a <HAL_DMAEx_ChangeMemory+0xae>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a22      	ldr	r2, [pc, #136]	@ (8006290 <HAL_DMAEx_ChangeMemory+0x134>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d101      	bne.n	800620e <HAL_DMAEx_ChangeMemory+0xb2>
 800620a:	2301      	movs	r3, #1
 800620c:	e000      	b.n	8006210 <HAL_DMAEx_ChangeMemory+0xb4>
 800620e:	2300      	movs	r3, #0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00c      	beq.n	800622e <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8006214:	79fb      	ldrb	r3, [r7, #7]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d104      	bne.n	8006224 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	60da      	str	r2, [r3, #12]
 8006222:	e010      	b.n	8006246 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	611a      	str	r2, [r3, #16]
 800622c:	e00b      	b.n	8006246 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 800622e:	79fb      	ldrb	r3, [r7, #7]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d104      	bne.n	800623e <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	60da      	str	r2, [r3, #12]
 800623c:	e003      	b.n	8006246 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	40020010 	.word	0x40020010
 8006258:	40020028 	.word	0x40020028
 800625c:	40020040 	.word	0x40020040
 8006260:	40020058 	.word	0x40020058
 8006264:	40020070 	.word	0x40020070
 8006268:	40020088 	.word	0x40020088
 800626c:	400200a0 	.word	0x400200a0
 8006270:	400200b8 	.word	0x400200b8
 8006274:	40020410 	.word	0x40020410
 8006278:	40020428 	.word	0x40020428
 800627c:	40020440 	.word	0x40020440
 8006280:	40020458 	.word	0x40020458
 8006284:	40020470 	.word	0x40020470
 8006288:	40020488 	.word	0x40020488
 800628c:	400204a0 	.word	0x400204a0
 8006290:	400204b8 	.word	0x400204b8

08006294 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a46      	ldr	r2, [pc, #280]	@ (80063c0 <DMA_MultiBufferSetConfig+0x12c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d04a      	beq.n	8006342 <DMA_MultiBufferSetConfig+0xae>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a44      	ldr	r2, [pc, #272]	@ (80063c4 <DMA_MultiBufferSetConfig+0x130>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d045      	beq.n	8006342 <DMA_MultiBufferSetConfig+0xae>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a43      	ldr	r2, [pc, #268]	@ (80063c8 <DMA_MultiBufferSetConfig+0x134>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d040      	beq.n	8006342 <DMA_MultiBufferSetConfig+0xae>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a41      	ldr	r2, [pc, #260]	@ (80063cc <DMA_MultiBufferSetConfig+0x138>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d03b      	beq.n	8006342 <DMA_MultiBufferSetConfig+0xae>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a40      	ldr	r2, [pc, #256]	@ (80063d0 <DMA_MultiBufferSetConfig+0x13c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d036      	beq.n	8006342 <DMA_MultiBufferSetConfig+0xae>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a3e      	ldr	r2, [pc, #248]	@ (80063d4 <DMA_MultiBufferSetConfig+0x140>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d031      	beq.n	8006342 <DMA_MultiBufferSetConfig+0xae>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a3d      	ldr	r2, [pc, #244]	@ (80063d8 <DMA_MultiBufferSetConfig+0x144>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d02c      	beq.n	8006342 <DMA_MultiBufferSetConfig+0xae>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a3b      	ldr	r2, [pc, #236]	@ (80063dc <DMA_MultiBufferSetConfig+0x148>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d027      	beq.n	8006342 <DMA_MultiBufferSetConfig+0xae>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a3a      	ldr	r2, [pc, #232]	@ (80063e0 <DMA_MultiBufferSetConfig+0x14c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d022      	beq.n	8006342 <DMA_MultiBufferSetConfig+0xae>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a38      	ldr	r2, [pc, #224]	@ (80063e4 <DMA_MultiBufferSetConfig+0x150>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d01d      	beq.n	8006342 <DMA_MultiBufferSetConfig+0xae>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a37      	ldr	r2, [pc, #220]	@ (80063e8 <DMA_MultiBufferSetConfig+0x154>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d018      	beq.n	8006342 <DMA_MultiBufferSetConfig+0xae>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a35      	ldr	r2, [pc, #212]	@ (80063ec <DMA_MultiBufferSetConfig+0x158>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d013      	beq.n	8006342 <DMA_MultiBufferSetConfig+0xae>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a34      	ldr	r2, [pc, #208]	@ (80063f0 <DMA_MultiBufferSetConfig+0x15c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d00e      	beq.n	8006342 <DMA_MultiBufferSetConfig+0xae>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a32      	ldr	r2, [pc, #200]	@ (80063f4 <DMA_MultiBufferSetConfig+0x160>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d009      	beq.n	8006342 <DMA_MultiBufferSetConfig+0xae>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a31      	ldr	r2, [pc, #196]	@ (80063f8 <DMA_MultiBufferSetConfig+0x164>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d004      	beq.n	8006342 <DMA_MultiBufferSetConfig+0xae>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a2f      	ldr	r2, [pc, #188]	@ (80063fc <DMA_MultiBufferSetConfig+0x168>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d101      	bne.n	8006346 <DMA_MultiBufferSetConfig+0xb2>
 8006342:	2301      	movs	r3, #1
 8006344:	e000      	b.n	8006348 <DMA_MultiBufferSetConfig+0xb4>
 8006346:	2300      	movs	r3, #0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d019      	beq.n	8006380 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	2b40      	cmp	r3, #64	@ 0x40
 800635a:	d108      	bne.n	800636e <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 800636c:	e021      	b.n	80063b2 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	60da      	str	r2, [r3, #12]
}
 800637e:	e018      	b.n	80063b2 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	2b40      	cmp	r3, #64	@ 0x40
 800638e:	d108      	bne.n	80063a2 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	60da      	str	r2, [r3, #12]
}
 80063a0:	e007      	b.n	80063b2 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	60da      	str	r2, [r3, #12]
}
 80063b2:	bf00      	nop
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	40020010 	.word	0x40020010
 80063c4:	40020028 	.word	0x40020028
 80063c8:	40020040 	.word	0x40020040
 80063cc:	40020058 	.word	0x40020058
 80063d0:	40020070 	.word	0x40020070
 80063d4:	40020088 	.word	0x40020088
 80063d8:	400200a0 	.word	0x400200a0
 80063dc:	400200b8 	.word	0x400200b8
 80063e0:	40020410 	.word	0x40020410
 80063e4:	40020428 	.word	0x40020428
 80063e8:	40020440 	.word	0x40020440
 80063ec:	40020458 	.word	0x40020458
 80063f0:	40020470 	.word	0x40020470
 80063f4:	40020488 	.word	0x40020488
 80063f8:	400204a0 	.word	0x400204a0
 80063fc:	400204b8 	.word	0x400204b8

08006400 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006400:	b480      	push	{r7}
 8006402:	b089      	sub	sp, #36	@ 0x24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800640a:	2300      	movs	r3, #0
 800640c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800640e:	4b89      	ldr	r3, [pc, #548]	@ (8006634 <HAL_GPIO_Init+0x234>)
 8006410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006412:	e194      	b.n	800673e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	2101      	movs	r1, #1
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	fa01 f303 	lsl.w	r3, r1, r3
 8006420:	4013      	ands	r3, r2
 8006422:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 8186 	beq.w	8006738 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f003 0303 	and.w	r3, r3, #3
 8006434:	2b01      	cmp	r3, #1
 8006436:	d005      	beq.n	8006444 <HAL_GPIO_Init+0x44>
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f003 0303 	and.w	r3, r3, #3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d130      	bne.n	80064a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	2203      	movs	r2, #3
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	43db      	mvns	r3, r3
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	4013      	ands	r3, r2
 800645a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	68da      	ldr	r2, [r3, #12]
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	fa02 f303 	lsl.w	r3, r2, r3
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	4313      	orrs	r3, r2
 800646c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800647a:	2201      	movs	r2, #1
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	43db      	mvns	r3, r3
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	4013      	ands	r3, r2
 8006488:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	091b      	lsrs	r3, r3, #4
 8006490:	f003 0201 	and.w	r2, r3, #1
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	fa02 f303 	lsl.w	r3, r2, r3
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	4313      	orrs	r3, r2
 800649e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f003 0303 	and.w	r3, r3, #3
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d017      	beq.n	80064e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	2203      	movs	r2, #3
 80064be:	fa02 f303 	lsl.w	r3, r2, r3
 80064c2:	43db      	mvns	r3, r3
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	4013      	ands	r3, r2
 80064c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	689a      	ldr	r2, [r3, #8]
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	fa02 f303 	lsl.w	r3, r2, r3
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	4313      	orrs	r3, r2
 80064da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d123      	bne.n	8006536 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	08da      	lsrs	r2, r3, #3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	3208      	adds	r2, #8
 80064f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	220f      	movs	r2, #15
 8006506:	fa02 f303 	lsl.w	r3, r2, r3
 800650a:	43db      	mvns	r3, r3
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	4013      	ands	r3, r2
 8006510:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	691a      	ldr	r2, [r3, #16]
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	fa02 f303 	lsl.w	r3, r2, r3
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	4313      	orrs	r3, r2
 8006526:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	08da      	lsrs	r2, r3, #3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3208      	adds	r2, #8
 8006530:	69b9      	ldr	r1, [r7, #24]
 8006532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	2203      	movs	r2, #3
 8006542:	fa02 f303 	lsl.w	r3, r2, r3
 8006546:	43db      	mvns	r3, r3
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	4013      	ands	r3, r2
 800654c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f003 0203 	and.w	r2, r3, #3
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	fa02 f303 	lsl.w	r3, r2, r3
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	4313      	orrs	r3, r2
 8006562:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 80e0 	beq.w	8006738 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006578:	4b2f      	ldr	r3, [pc, #188]	@ (8006638 <HAL_GPIO_Init+0x238>)
 800657a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800657e:	4a2e      	ldr	r2, [pc, #184]	@ (8006638 <HAL_GPIO_Init+0x238>)
 8006580:	f043 0302 	orr.w	r3, r3, #2
 8006584:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006588:	4b2b      	ldr	r3, [pc, #172]	@ (8006638 <HAL_GPIO_Init+0x238>)
 800658a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006596:	4a29      	ldr	r2, [pc, #164]	@ (800663c <HAL_GPIO_Init+0x23c>)
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	089b      	lsrs	r3, r3, #2
 800659c:	3302      	adds	r3, #2
 800659e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	f003 0303 	and.w	r3, r3, #3
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	220f      	movs	r2, #15
 80065ae:	fa02 f303 	lsl.w	r3, r2, r3
 80065b2:	43db      	mvns	r3, r3
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	4013      	ands	r3, r2
 80065b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a20      	ldr	r2, [pc, #128]	@ (8006640 <HAL_GPIO_Init+0x240>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d052      	beq.n	8006668 <HAL_GPIO_Init+0x268>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006644 <HAL_GPIO_Init+0x244>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d031      	beq.n	800662e <HAL_GPIO_Init+0x22e>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a1e      	ldr	r2, [pc, #120]	@ (8006648 <HAL_GPIO_Init+0x248>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d02b      	beq.n	800662a <HAL_GPIO_Init+0x22a>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a1d      	ldr	r2, [pc, #116]	@ (800664c <HAL_GPIO_Init+0x24c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d025      	beq.n	8006626 <HAL_GPIO_Init+0x226>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006650 <HAL_GPIO_Init+0x250>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d01f      	beq.n	8006622 <HAL_GPIO_Init+0x222>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006654 <HAL_GPIO_Init+0x254>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d019      	beq.n	800661e <HAL_GPIO_Init+0x21e>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a1a      	ldr	r2, [pc, #104]	@ (8006658 <HAL_GPIO_Init+0x258>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d013      	beq.n	800661a <HAL_GPIO_Init+0x21a>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a19      	ldr	r2, [pc, #100]	@ (800665c <HAL_GPIO_Init+0x25c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d00d      	beq.n	8006616 <HAL_GPIO_Init+0x216>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a18      	ldr	r2, [pc, #96]	@ (8006660 <HAL_GPIO_Init+0x260>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d007      	beq.n	8006612 <HAL_GPIO_Init+0x212>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a17      	ldr	r2, [pc, #92]	@ (8006664 <HAL_GPIO_Init+0x264>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d101      	bne.n	800660e <HAL_GPIO_Init+0x20e>
 800660a:	2309      	movs	r3, #9
 800660c:	e02d      	b.n	800666a <HAL_GPIO_Init+0x26a>
 800660e:	230a      	movs	r3, #10
 8006610:	e02b      	b.n	800666a <HAL_GPIO_Init+0x26a>
 8006612:	2308      	movs	r3, #8
 8006614:	e029      	b.n	800666a <HAL_GPIO_Init+0x26a>
 8006616:	2307      	movs	r3, #7
 8006618:	e027      	b.n	800666a <HAL_GPIO_Init+0x26a>
 800661a:	2306      	movs	r3, #6
 800661c:	e025      	b.n	800666a <HAL_GPIO_Init+0x26a>
 800661e:	2305      	movs	r3, #5
 8006620:	e023      	b.n	800666a <HAL_GPIO_Init+0x26a>
 8006622:	2304      	movs	r3, #4
 8006624:	e021      	b.n	800666a <HAL_GPIO_Init+0x26a>
 8006626:	2303      	movs	r3, #3
 8006628:	e01f      	b.n	800666a <HAL_GPIO_Init+0x26a>
 800662a:	2302      	movs	r3, #2
 800662c:	e01d      	b.n	800666a <HAL_GPIO_Init+0x26a>
 800662e:	2301      	movs	r3, #1
 8006630:	e01b      	b.n	800666a <HAL_GPIO_Init+0x26a>
 8006632:	bf00      	nop
 8006634:	58000080 	.word	0x58000080
 8006638:	58024400 	.word	0x58024400
 800663c:	58000400 	.word	0x58000400
 8006640:	58020000 	.word	0x58020000
 8006644:	58020400 	.word	0x58020400
 8006648:	58020800 	.word	0x58020800
 800664c:	58020c00 	.word	0x58020c00
 8006650:	58021000 	.word	0x58021000
 8006654:	58021400 	.word	0x58021400
 8006658:	58021800 	.word	0x58021800
 800665c:	58021c00 	.word	0x58021c00
 8006660:	58022000 	.word	0x58022000
 8006664:	58022400 	.word	0x58022400
 8006668:	2300      	movs	r3, #0
 800666a:	69fa      	ldr	r2, [r7, #28]
 800666c:	f002 0203 	and.w	r2, r2, #3
 8006670:	0092      	lsls	r2, r2, #2
 8006672:	4093      	lsls	r3, r2
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	4313      	orrs	r3, r2
 8006678:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800667a:	4938      	ldr	r1, [pc, #224]	@ (800675c <HAL_GPIO_Init+0x35c>)
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	089b      	lsrs	r3, r3, #2
 8006680:	3302      	adds	r3, #2
 8006682:	69ba      	ldr	r2, [r7, #24]
 8006684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	43db      	mvns	r3, r3
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	4013      	ands	r3, r2
 8006698:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80066ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80066b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	43db      	mvns	r3, r3
 80066c2:	69ba      	ldr	r2, [r7, #24]
 80066c4:	4013      	ands	r3, r2
 80066c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	4313      	orrs	r3, r2
 80066da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80066dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	43db      	mvns	r3, r3
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	4013      	ands	r3, r2
 80066f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	43db      	mvns	r3, r3
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	4013      	ands	r3, r2
 800671c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	4313      	orrs	r3, r2
 8006730:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	3301      	adds	r3, #1
 800673c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	fa22 f303 	lsr.w	r3, r2, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	f47f ae63 	bne.w	8006414 <HAL_GPIO_Init+0x14>
  }
}
 800674e:	bf00      	nop
 8006750:	bf00      	nop
 8006752:	3724      	adds	r7, #36	@ 0x24
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	58000400 	.word	0x58000400

08006760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	460b      	mov	r3, r1
 800676a:	807b      	strh	r3, [r7, #2]
 800676c:	4613      	mov	r3, r2
 800676e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006770:	787b      	ldrb	r3, [r7, #1]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006776:	887a      	ldrh	r2, [r7, #2]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800677c:	e003      	b.n	8006786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800677e:	887b      	ldrh	r3, [r7, #2]
 8006780:	041a      	lsls	r2, r3, #16
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	619a      	str	r2, [r3, #24]
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
	...

08006794 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e08b      	b.n	80068be <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d106      	bne.n	80067c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7fb f8a8 	bl	8001910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2224      	movs	r2, #36	@ 0x24
 80067c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0201 	bic.w	r2, r2, #1
 80067d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80067e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80067f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d107      	bne.n	800680e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689a      	ldr	r2, [r3, #8]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800680a:	609a      	str	r2, [r3, #8]
 800680c:	e006      	b.n	800681c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	689a      	ldr	r2, [r3, #8]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800681a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	2b02      	cmp	r3, #2
 8006822:	d108      	bne.n	8006836 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006832:	605a      	str	r2, [r3, #4]
 8006834:	e007      	b.n	8006846 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006844:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6859      	ldr	r1, [r3, #4]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	4b1d      	ldr	r3, [pc, #116]	@ (80068c8 <HAL_I2C_Init+0x134>)
 8006852:	430b      	orrs	r3, r1
 8006854:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68da      	ldr	r2, [r3, #12]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006864:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	691a      	ldr	r2, [r3, #16]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	430a      	orrs	r2, r1
 800687e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	69d9      	ldr	r1, [r3, #28]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a1a      	ldr	r2, [r3, #32]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f042 0201 	orr.w	r2, r2, #1
 800689e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2220      	movs	r2, #32
 80068aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	02008000 	.word	0x02008000

080068cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b088      	sub	sp, #32
 80068d0:	af02      	add	r7, sp, #8
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	607a      	str	r2, [r7, #4]
 80068d6:	461a      	mov	r2, r3
 80068d8:	460b      	mov	r3, r1
 80068da:	817b      	strh	r3, [r7, #10]
 80068dc:	4613      	mov	r3, r2
 80068de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b20      	cmp	r3, #32
 80068ea:	f040 80fd 	bne.w	8006ae8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d101      	bne.n	80068fc <HAL_I2C_Master_Transmit+0x30>
 80068f8:	2302      	movs	r3, #2
 80068fa:	e0f6      	b.n	8006aea <HAL_I2C_Master_Transmit+0x21e>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006904:	f7fb fdd2 	bl	80024ac <HAL_GetTick>
 8006908:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	2319      	movs	r3, #25
 8006910:	2201      	movs	r2, #1
 8006912:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f001 f891 	bl	8007a3e <I2C_WaitOnFlagUntilTimeout>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e0e1      	b.n	8006aea <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2221      	movs	r2, #33	@ 0x21
 800692a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2210      	movs	r2, #16
 8006932:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	893a      	ldrh	r2, [r7, #8]
 8006946:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006952:	b29b      	uxth	r3, r3
 8006954:	2bff      	cmp	r3, #255	@ 0xff
 8006956:	d906      	bls.n	8006966 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	22ff      	movs	r2, #255	@ 0xff
 800695c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800695e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	e007      	b.n	8006976 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800696a:	b29a      	uxth	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006970:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006974:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800697a:	2b00      	cmp	r3, #0
 800697c:	d024      	beq.n	80069c8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006982:	781a      	ldrb	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006998:	b29b      	uxth	r3, r3
 800699a:	3b01      	subs	r3, #1
 800699c:	b29a      	uxth	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069a6:	3b01      	subs	r3, #1
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	3301      	adds	r3, #1
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	8979      	ldrh	r1, [r7, #10]
 80069ba:	4b4e      	ldr	r3, [pc, #312]	@ (8006af4 <HAL_I2C_Master_Transmit+0x228>)
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f001 fa8b 	bl	8007edc <I2C_TransferConfig>
 80069c6:	e066      	b.n	8006a96 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	8979      	ldrh	r1, [r7, #10]
 80069d0:	4b48      	ldr	r3, [pc, #288]	@ (8006af4 <HAL_I2C_Master_Transmit+0x228>)
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f001 fa80 	bl	8007edc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80069dc:	e05b      	b.n	8006a96 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	6a39      	ldr	r1, [r7, #32]
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f001 f884 	bl	8007af0 <I2C_WaitOnTXISFlagUntilTimeout>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e07b      	b.n	8006aea <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f6:	781a      	ldrb	r2, [r3, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a02:	1c5a      	adds	r2, r3, #1
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d034      	beq.n	8006a96 <HAL_I2C_Master_Transmit+0x1ca>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d130      	bne.n	8006a96 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	2180      	movs	r1, #128	@ 0x80
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f000 fffd 	bl	8007a3e <I2C_WaitOnFlagUntilTimeout>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e04d      	b.n	8006aea <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	2bff      	cmp	r3, #255	@ 0xff
 8006a56:	d90e      	bls.n	8006a76 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	22ff      	movs	r2, #255	@ 0xff
 8006a5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	8979      	ldrh	r1, [r7, #10]
 8006a66:	2300      	movs	r3, #0
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f001 fa34 	bl	8007edc <I2C_TransferConfig>
 8006a74:	e00f      	b.n	8006a96 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	8979      	ldrh	r1, [r7, #10]
 8006a88:	2300      	movs	r3, #0
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f001 fa23 	bl	8007edc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d19e      	bne.n	80069de <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	6a39      	ldr	r1, [r7, #32]
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f001 f86a 	bl	8007b7e <I2C_WaitOnSTOPFlagUntilTimeout>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e01a      	b.n	8006aea <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6859      	ldr	r1, [r3, #4]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8006af8 <HAL_I2C_Master_Transmit+0x22c>)
 8006ac8:	400b      	ands	r3, r1
 8006aca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	e000      	b.n	8006aea <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006ae8:	2302      	movs	r3, #2
  }
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	80002000 	.word	0x80002000
 8006af8:	fe00e800 	.word	0xfe00e800

08006afc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b088      	sub	sp, #32
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	607a      	str	r2, [r7, #4]
 8006b06:	461a      	mov	r2, r3
 8006b08:	460b      	mov	r3, r1
 8006b0a:	817b      	strh	r3, [r7, #10]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	f040 80db 	bne.w	8006cd4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d101      	bne.n	8006b2c <HAL_I2C_Master_Receive+0x30>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	e0d4      	b.n	8006cd6 <HAL_I2C_Master_Receive+0x1da>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b34:	f7fb fcba 	bl	80024ac <HAL_GetTick>
 8006b38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	2319      	movs	r3, #25
 8006b40:	2201      	movs	r2, #1
 8006b42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f000 ff79 	bl	8007a3e <I2C_WaitOnFlagUntilTimeout>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e0bf      	b.n	8006cd6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2222      	movs	r2, #34	@ 0x22
 8006b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2210      	movs	r2, #16
 8006b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	893a      	ldrh	r2, [r7, #8]
 8006b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	2bff      	cmp	r3, #255	@ 0xff
 8006b86:	d90e      	bls.n	8006ba6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	22ff      	movs	r2, #255	@ 0xff
 8006b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	8979      	ldrh	r1, [r7, #10]
 8006b96:	4b52      	ldr	r3, [pc, #328]	@ (8006ce0 <HAL_I2C_Master_Receive+0x1e4>)
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f001 f99c 	bl	8007edc <I2C_TransferConfig>
 8006ba4:	e06d      	b.n	8006c82 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	8979      	ldrh	r1, [r7, #10]
 8006bb8:	4b49      	ldr	r3, [pc, #292]	@ (8006ce0 <HAL_I2C_Master_Receive+0x1e4>)
 8006bba:	9300      	str	r3, [sp, #0]
 8006bbc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f001 f98b 	bl	8007edc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006bc6:	e05c      	b.n	8006c82 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	6a39      	ldr	r1, [r7, #32]
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f001 f819 	bl	8007c04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e07c      	b.n	8006cd6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bee:	1c5a      	adds	r2, r3, #1
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	3b01      	subs	r3, #1
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d034      	beq.n	8006c82 <HAL_I2C_Master_Receive+0x186>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d130      	bne.n	8006c82 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	2200      	movs	r2, #0
 8006c28:	2180      	movs	r1, #128	@ 0x80
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 ff07 	bl	8007a3e <I2C_WaitOnFlagUntilTimeout>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d001      	beq.n	8006c3a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e04d      	b.n	8006cd6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	2bff      	cmp	r3, #255	@ 0xff
 8006c42:	d90e      	bls.n	8006c62 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	22ff      	movs	r2, #255	@ 0xff
 8006c48:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	8979      	ldrh	r1, [r7, #10]
 8006c52:	2300      	movs	r3, #0
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f001 f93e 	bl	8007edc <I2C_TransferConfig>
 8006c60:	e00f      	b.n	8006c82 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	8979      	ldrh	r1, [r7, #10]
 8006c74:	2300      	movs	r3, #0
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f001 f92d 	bl	8007edc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d19d      	bne.n	8006bc8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	6a39      	ldr	r1, [r7, #32]
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 ff74 	bl	8007b7e <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e01a      	b.n	8006cd6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6859      	ldr	r1, [r3, #4]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce4 <HAL_I2C_Master_Receive+0x1e8>)
 8006cb4:	400b      	ands	r3, r1
 8006cb6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	e000      	b.n	8006cd6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006cd4:	2302      	movs	r3, #2
  }
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3718      	adds	r7, #24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	80002400 	.word	0x80002400
 8006ce4:	fe00e800 	.word	0xfe00e800

08006ce8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d005      	beq.n	8006d14 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	68f9      	ldr	r1, [r7, #12]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	4798      	blx	r3
  }
}
 8006d14:	bf00      	nop
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	0a1b      	lsrs	r3, r3, #8
 8006d38:	f003 0301 	and.w	r3, r3, #1
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d010      	beq.n	8006d62 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	09db      	lsrs	r3, r3, #7
 8006d44:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00a      	beq.n	8006d62 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d50:	f043 0201 	orr.w	r2, r3, #1
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d60:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	0a9b      	lsrs	r3, r3, #10
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d010      	beq.n	8006d90 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	09db      	lsrs	r3, r3, #7
 8006d72:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00a      	beq.n	8006d90 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d7e:	f043 0208 	orr.w	r2, r3, #8
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006d8e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	0a5b      	lsrs	r3, r3, #9
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d010      	beq.n	8006dbe <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	09db      	lsrs	r3, r3, #7
 8006da0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00a      	beq.n	8006dbe <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dac:	f043 0202 	orr.w	r2, r3, #2
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dbc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f003 030b 	and.w	r3, r3, #11
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8006dce:	68f9      	ldr	r1, [r7, #12]
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fcdb 	bl	800778c <I2C_ITError>
  }
}
 8006dd6:	bf00      	nop
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006dfa:	bf00      	nop
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b083      	sub	sp, #12
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	460b      	mov	r3, r1
 8006e10:	70fb      	strb	r3, [r7, #3]
 8006e12:	4613      	mov	r3, r2
 8006e14:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006e16:	bf00      	nop
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b083      	sub	sp, #12
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006e2a:	bf00      	nop
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006e3e:	bf00      	nop
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006e52:	bf00      	nop
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b086      	sub	sp, #24
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	60f8      	str	r0, [r7, #12]
 8006e66:	60b9      	str	r1, [r7, #8]
 8006e68:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d101      	bne.n	8006e82 <I2C_Slave_ISR_IT+0x24>
 8006e7e:	2302      	movs	r3, #2
 8006e80:	e0ed      	b.n	800705e <I2C_Slave_ISR_IT+0x200>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	095b      	lsrs	r3, r3, #5
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	095b      	lsrs	r3, r3, #5
 8006e9a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d004      	beq.n	8006eac <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006ea2:	6939      	ldr	r1, [r7, #16]
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 f9c1 	bl	800722c <I2C_ITSlaveCplt>
 8006eaa:	e0d3      	b.n	8007054 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	091b      	lsrs	r3, r3, #4
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d04d      	beq.n	8006f54 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	091b      	lsrs	r3, r3, #4
 8006ebc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d047      	beq.n	8006f54 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d128      	bne.n	8006f20 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b28      	cmp	r3, #40	@ 0x28
 8006ed8:	d108      	bne.n	8006eec <I2C_Slave_ISR_IT+0x8e>
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ee0:	d104      	bne.n	8006eec <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006ee2:	6939      	ldr	r1, [r7, #16]
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 fbfb 	bl	80076e0 <I2C_ITListenCplt>
 8006eea:	e032      	b.n	8006f52 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b29      	cmp	r3, #41	@ 0x29
 8006ef6:	d10e      	bne.n	8006f16 <I2C_Slave_ISR_IT+0xb8>
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006efe:	d00a      	beq.n	8006f16 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2210      	movs	r2, #16
 8006f06:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 fd56 	bl	80079ba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f000 f92d 	bl	800716e <I2C_ITSlaveSeqCplt>
 8006f14:	e01d      	b.n	8006f52 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2210      	movs	r2, #16
 8006f1c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006f1e:	e096      	b.n	800704e <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2210      	movs	r2, #16
 8006f26:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f2c:	f043 0204 	orr.w	r2, r3, #4
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d004      	beq.n	8006f44 <I2C_Slave_ISR_IT+0xe6>
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f40:	f040 8085 	bne.w	800704e <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f48:	4619      	mov	r1, r3
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f000 fc1e 	bl	800778c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006f50:	e07d      	b.n	800704e <I2C_Slave_ISR_IT+0x1f0>
 8006f52:	e07c      	b.n	800704e <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	089b      	lsrs	r3, r3, #2
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d030      	beq.n	8006fc2 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	089b      	lsrs	r3, r3, #2
 8006f64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d02a      	beq.n	8006fc2 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d018      	beq.n	8006fa8 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f80:	b2d2      	uxtb	r2, r2
 8006f82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f92:	3b01      	subs	r3, #1
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d14f      	bne.n	8007052 <I2C_Slave_ISR_IT+0x1f4>
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006fb8:	d04b      	beq.n	8007052 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 f8d7 	bl	800716e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006fc0:	e047      	b.n	8007052 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	08db      	lsrs	r3, r3, #3
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00a      	beq.n	8006fe4 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	08db      	lsrs	r3, r3, #3
 8006fd2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d004      	beq.n	8006fe4 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006fda:	6939      	ldr	r1, [r7, #16]
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 f842 	bl	8007066 <I2C_ITAddrCplt>
 8006fe2:	e037      	b.n	8007054 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	085b      	lsrs	r3, r3, #1
 8006fe8:	f003 0301 	and.w	r3, r3, #1
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d031      	beq.n	8007054 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	085b      	lsrs	r3, r3, #1
 8006ff4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d02b      	beq.n	8007054 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007000:	b29b      	uxth	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d018      	beq.n	8007038 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700a:	781a      	ldrb	r2, [r3, #0]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007020:	b29b      	uxth	r3, r3
 8007022:	3b01      	subs	r3, #1
 8007024:	b29a      	uxth	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800702e:	3b01      	subs	r3, #1
 8007030:	b29a      	uxth	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007036:	e00d      	b.n	8007054 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800703e:	d002      	beq.n	8007046 <I2C_Slave_ISR_IT+0x1e8>
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 f891 	bl	800716e <I2C_ITSlaveSeqCplt>
 800704c:	e002      	b.n	8007054 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800704e:	bf00      	nop
 8007050:	e000      	b.n	8007054 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8007052:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007076:	b2db      	uxtb	r3, r3
 8007078:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800707c:	2b28      	cmp	r3, #40	@ 0x28
 800707e:	d16a      	bne.n	8007156 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	0c1b      	lsrs	r3, r3, #16
 8007088:	b2db      	uxtb	r3, r3
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	0c1b      	lsrs	r3, r3, #16
 8007098:	b29b      	uxth	r3, r3
 800709a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800709e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070ac:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80070ba:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d138      	bne.n	8007136 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80070c4:	897b      	ldrh	r3, [r7, #10]
 80070c6:	09db      	lsrs	r3, r3, #7
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	89bb      	ldrh	r3, [r7, #12]
 80070cc:	4053      	eors	r3, r2
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	f003 0306 	and.w	r3, r3, #6
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d11c      	bne.n	8007112 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80070d8:	897b      	ldrh	r3, [r7, #10]
 80070da:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070e0:	1c5a      	adds	r2, r3, #1
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d13b      	bne.n	8007166 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2208      	movs	r2, #8
 80070fa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007104:	89ba      	ldrh	r2, [r7, #12]
 8007106:	7bfb      	ldrb	r3, [r7, #15]
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7ff fe7b 	bl	8006e06 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007110:	e029      	b.n	8007166 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007112:	893b      	ldrh	r3, [r7, #8]
 8007114:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007116:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 ff10 	bl	8007f40 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007128:	89ba      	ldrh	r2, [r7, #12]
 800712a:	7bfb      	ldrb	r3, [r7, #15]
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7ff fe69 	bl	8006e06 <HAL_I2C_AddrCallback>
}
 8007134:	e017      	b.n	8007166 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007136:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 ff00 	bl	8007f40 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007148:	89ba      	ldrh	r2, [r7, #12]
 800714a:	7bfb      	ldrb	r3, [r7, #15]
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7ff fe59 	bl	8006e06 <HAL_I2C_AddrCallback>
}
 8007154:	e007      	b.n	8007166 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2208      	movs	r2, #8
 800715c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007166:	bf00      	nop
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	0b9b      	lsrs	r3, r3, #14
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d008      	beq.n	80071a4 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80071a0:	601a      	str	r2, [r3, #0]
 80071a2:	e00d      	b.n	80071c0 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	0bdb      	lsrs	r3, r3, #15
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d007      	beq.n	80071c0 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80071be:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b29      	cmp	r3, #41	@ 0x29
 80071ca:	d112      	bne.n	80071f2 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2228      	movs	r2, #40	@ 0x28
 80071d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2221      	movs	r2, #33	@ 0x21
 80071d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80071da:	2101      	movs	r1, #1
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 feaf 	bl	8007f40 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7ff fdf7 	bl	8006dde <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80071f0:	e017      	b.n	8007222 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80071fc:	d111      	bne.n	8007222 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2228      	movs	r2, #40	@ 0x28
 8007202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2222      	movs	r2, #34	@ 0x22
 800720a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800720c:	2102      	movs	r1, #2
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fe96 	bl	8007f40 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7ff fde8 	bl	8006df2 <HAL_I2C_SlaveRxCpltCallback>
}
 8007222:	bf00      	nop
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007246:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800724e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2220      	movs	r2, #32
 8007256:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007258:	7afb      	ldrb	r3, [r7, #11]
 800725a:	2b21      	cmp	r3, #33	@ 0x21
 800725c:	d002      	beq.n	8007264 <I2C_ITSlaveCplt+0x38>
 800725e:	7afb      	ldrb	r3, [r7, #11]
 8007260:	2b29      	cmp	r3, #41	@ 0x29
 8007262:	d108      	bne.n	8007276 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007264:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fe69 	bl	8007f40 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2221      	movs	r2, #33	@ 0x21
 8007272:	631a      	str	r2, [r3, #48]	@ 0x30
 8007274:	e019      	b.n	80072aa <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007276:	7afb      	ldrb	r3, [r7, #11]
 8007278:	2b22      	cmp	r3, #34	@ 0x22
 800727a:	d002      	beq.n	8007282 <I2C_ITSlaveCplt+0x56>
 800727c:	7afb      	ldrb	r3, [r7, #11]
 800727e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007280:	d108      	bne.n	8007294 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007282:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fe5a 	bl	8007f40 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2222      	movs	r2, #34	@ 0x22
 8007290:	631a      	str	r2, [r3, #48]	@ 0x30
 8007292:	e00a      	b.n	80072aa <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007294:	7afb      	ldrb	r3, [r7, #11]
 8007296:	2b28      	cmp	r3, #40	@ 0x28
 8007298:	d107      	bne.n	80072aa <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800729a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fe4e 	bl	8007f40 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80072b8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6859      	ldr	r1, [r3, #4]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	4b80      	ldr	r3, [pc, #512]	@ (80074c8 <I2C_ITSlaveCplt+0x29c>)
 80072c6:	400b      	ands	r3, r1
 80072c8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fb75 	bl	80079ba <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	0b9b      	lsrs	r3, r3, #14
 80072d4:	f003 0301 	and.w	r3, r3, #1
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d07a      	beq.n	80073d2 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80072ea:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 8112 	beq.w	800751a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a73      	ldr	r2, [pc, #460]	@ (80074cc <I2C_ITSlaveCplt+0x2a0>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d059      	beq.n	80073b6 <I2C_ITSlaveCplt+0x18a>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a71      	ldr	r2, [pc, #452]	@ (80074d0 <I2C_ITSlaveCplt+0x2a4>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d053      	beq.n	80073b6 <I2C_ITSlaveCplt+0x18a>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a6f      	ldr	r2, [pc, #444]	@ (80074d4 <I2C_ITSlaveCplt+0x2a8>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d04d      	beq.n	80073b6 <I2C_ITSlaveCplt+0x18a>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a6d      	ldr	r2, [pc, #436]	@ (80074d8 <I2C_ITSlaveCplt+0x2ac>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d047      	beq.n	80073b6 <I2C_ITSlaveCplt+0x18a>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a6b      	ldr	r2, [pc, #428]	@ (80074dc <I2C_ITSlaveCplt+0x2b0>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d041      	beq.n	80073b6 <I2C_ITSlaveCplt+0x18a>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a69      	ldr	r2, [pc, #420]	@ (80074e0 <I2C_ITSlaveCplt+0x2b4>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d03b      	beq.n	80073b6 <I2C_ITSlaveCplt+0x18a>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a67      	ldr	r2, [pc, #412]	@ (80074e4 <I2C_ITSlaveCplt+0x2b8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d035      	beq.n	80073b6 <I2C_ITSlaveCplt+0x18a>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a65      	ldr	r2, [pc, #404]	@ (80074e8 <I2C_ITSlaveCplt+0x2bc>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d02f      	beq.n	80073b6 <I2C_ITSlaveCplt+0x18a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a63      	ldr	r2, [pc, #396]	@ (80074ec <I2C_ITSlaveCplt+0x2c0>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d029      	beq.n	80073b6 <I2C_ITSlaveCplt+0x18a>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a61      	ldr	r2, [pc, #388]	@ (80074f0 <I2C_ITSlaveCplt+0x2c4>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d023      	beq.n	80073b6 <I2C_ITSlaveCplt+0x18a>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a5f      	ldr	r2, [pc, #380]	@ (80074f4 <I2C_ITSlaveCplt+0x2c8>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d01d      	beq.n	80073b6 <I2C_ITSlaveCplt+0x18a>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a5d      	ldr	r2, [pc, #372]	@ (80074f8 <I2C_ITSlaveCplt+0x2cc>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d017      	beq.n	80073b6 <I2C_ITSlaveCplt+0x18a>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a5b      	ldr	r2, [pc, #364]	@ (80074fc <I2C_ITSlaveCplt+0x2d0>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d011      	beq.n	80073b6 <I2C_ITSlaveCplt+0x18a>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a59      	ldr	r2, [pc, #356]	@ (8007500 <I2C_ITSlaveCplt+0x2d4>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d00b      	beq.n	80073b6 <I2C_ITSlaveCplt+0x18a>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a57      	ldr	r2, [pc, #348]	@ (8007504 <I2C_ITSlaveCplt+0x2d8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d005      	beq.n	80073b6 <I2C_ITSlaveCplt+0x18a>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a55      	ldr	r2, [pc, #340]	@ (8007508 <I2C_ITSlaveCplt+0x2dc>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d105      	bne.n	80073c2 <I2C_ITSlaveCplt+0x196>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	e004      	b.n	80073cc <I2C_ITSlaveCplt+0x1a0>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80073d0:	e0a3      	b.n	800751a <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	0bdb      	lsrs	r3, r3, #15
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f000 809d 	beq.w	800751a <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80073ee:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 8090 	beq.w	800751a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a32      	ldr	r2, [pc, #200]	@ (80074cc <I2C_ITSlaveCplt+0x2a0>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d059      	beq.n	80074ba <I2C_ITSlaveCplt+0x28e>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a30      	ldr	r2, [pc, #192]	@ (80074d0 <I2C_ITSlaveCplt+0x2a4>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d053      	beq.n	80074ba <I2C_ITSlaveCplt+0x28e>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a2e      	ldr	r2, [pc, #184]	@ (80074d4 <I2C_ITSlaveCplt+0x2a8>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d04d      	beq.n	80074ba <I2C_ITSlaveCplt+0x28e>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a2c      	ldr	r2, [pc, #176]	@ (80074d8 <I2C_ITSlaveCplt+0x2ac>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d047      	beq.n	80074ba <I2C_ITSlaveCplt+0x28e>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a2a      	ldr	r2, [pc, #168]	@ (80074dc <I2C_ITSlaveCplt+0x2b0>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d041      	beq.n	80074ba <I2C_ITSlaveCplt+0x28e>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a28      	ldr	r2, [pc, #160]	@ (80074e0 <I2C_ITSlaveCplt+0x2b4>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d03b      	beq.n	80074ba <I2C_ITSlaveCplt+0x28e>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a26      	ldr	r2, [pc, #152]	@ (80074e4 <I2C_ITSlaveCplt+0x2b8>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d035      	beq.n	80074ba <I2C_ITSlaveCplt+0x28e>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a24      	ldr	r2, [pc, #144]	@ (80074e8 <I2C_ITSlaveCplt+0x2bc>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d02f      	beq.n	80074ba <I2C_ITSlaveCplt+0x28e>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a22      	ldr	r2, [pc, #136]	@ (80074ec <I2C_ITSlaveCplt+0x2c0>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d029      	beq.n	80074ba <I2C_ITSlaveCplt+0x28e>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a20      	ldr	r2, [pc, #128]	@ (80074f0 <I2C_ITSlaveCplt+0x2c4>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d023      	beq.n	80074ba <I2C_ITSlaveCplt+0x28e>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a1e      	ldr	r2, [pc, #120]	@ (80074f4 <I2C_ITSlaveCplt+0x2c8>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d01d      	beq.n	80074ba <I2C_ITSlaveCplt+0x28e>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a1c      	ldr	r2, [pc, #112]	@ (80074f8 <I2C_ITSlaveCplt+0x2cc>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d017      	beq.n	80074ba <I2C_ITSlaveCplt+0x28e>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a1a      	ldr	r2, [pc, #104]	@ (80074fc <I2C_ITSlaveCplt+0x2d0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d011      	beq.n	80074ba <I2C_ITSlaveCplt+0x28e>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a18      	ldr	r2, [pc, #96]	@ (8007500 <I2C_ITSlaveCplt+0x2d4>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d00b      	beq.n	80074ba <I2C_ITSlaveCplt+0x28e>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a16      	ldr	r2, [pc, #88]	@ (8007504 <I2C_ITSlaveCplt+0x2d8>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d005      	beq.n	80074ba <I2C_ITSlaveCplt+0x28e>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a14      	ldr	r2, [pc, #80]	@ (8007508 <I2C_ITSlaveCplt+0x2dc>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d128      	bne.n	800750c <I2C_ITSlaveCplt+0x2e0>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	e027      	b.n	8007516 <I2C_ITSlaveCplt+0x2ea>
 80074c6:	bf00      	nop
 80074c8:	fe00e800 	.word	0xfe00e800
 80074cc:	40020010 	.word	0x40020010
 80074d0:	40020028 	.word	0x40020028
 80074d4:	40020040 	.word	0x40020040
 80074d8:	40020058 	.word	0x40020058
 80074dc:	40020070 	.word	0x40020070
 80074e0:	40020088 	.word	0x40020088
 80074e4:	400200a0 	.word	0x400200a0
 80074e8:	400200b8 	.word	0x400200b8
 80074ec:	40020410 	.word	0x40020410
 80074f0:	40020428 	.word	0x40020428
 80074f4:	40020440 	.word	0x40020440
 80074f8:	40020458 	.word	0x40020458
 80074fc:	40020470 	.word	0x40020470
 8007500:	40020488 	.word	0x40020488
 8007504:	400204a0 	.word	0x400204a0
 8007508:	400204b8 	.word	0x400204b8
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	b29b      	uxth	r3, r3
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	089b      	lsrs	r3, r3, #2
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b00      	cmp	r3, #0
 8007524:	d020      	beq.n	8007568 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f023 0304 	bic.w	r3, r3, #4
 800752c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007538:	b2d2      	uxtb	r2, r2
 800753a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00c      	beq.n	8007568 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007552:	3b01      	subs	r3, #1
 8007554:	b29a      	uxth	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800755e:	b29b      	uxth	r3, r3
 8007560:	3b01      	subs	r3, #1
 8007562:	b29a      	uxth	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800756c:	b29b      	uxth	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d005      	beq.n	800757e <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007576:	f043 0204 	orr.w	r2, r3, #4
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	091b      	lsrs	r3, r3, #4
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d04a      	beq.n	8007620 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	091b      	lsrs	r3, r3, #4
 800758e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007592:	2b00      	cmp	r3, #0
 8007594:	d044      	beq.n	8007620 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800759a:	b29b      	uxth	r3, r3
 800759c:	2b00      	cmp	r3, #0
 800759e:	d128      	bne.n	80075f2 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b28      	cmp	r3, #40	@ 0x28
 80075aa:	d108      	bne.n	80075be <I2C_ITSlaveCplt+0x392>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075b2:	d104      	bne.n	80075be <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80075b4:	6979      	ldr	r1, [r7, #20]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f892 	bl	80076e0 <I2C_ITListenCplt>
 80075bc:	e030      	b.n	8007620 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b29      	cmp	r3, #41	@ 0x29
 80075c8:	d10e      	bne.n	80075e8 <I2C_ITSlaveCplt+0x3bc>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80075d0:	d00a      	beq.n	80075e8 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2210      	movs	r2, #16
 80075d8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f9ed 	bl	80079ba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7ff fdc4 	bl	800716e <I2C_ITSlaveSeqCplt>
 80075e6:	e01b      	b.n	8007620 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2210      	movs	r2, #16
 80075ee:	61da      	str	r2, [r3, #28]
 80075f0:	e016      	b.n	8007620 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2210      	movs	r2, #16
 80075f8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075fe:	f043 0204 	orr.w	r2, r3, #4
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d003      	beq.n	8007614 <I2C_ITSlaveCplt+0x3e8>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007612:	d105      	bne.n	8007620 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007618:	4619      	mov	r1, r3
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f8b6 	bl	800778c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007632:	2b00      	cmp	r3, #0
 8007634:	d010      	beq.n	8007658 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f8a5 	bl	800778c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b28      	cmp	r3, #40	@ 0x28
 800764c:	d141      	bne.n	80076d2 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800764e:	6979      	ldr	r1, [r7, #20]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f845 	bl	80076e0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007656:	e03c      	b.n	80076d2 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007660:	d014      	beq.n	800768c <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7ff fd83 	bl	800716e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a1c      	ldr	r2, [pc, #112]	@ (80076dc <I2C_ITSlaveCplt+0x4b0>)
 800766c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2220      	movs	r2, #32
 8007672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7ff fbcc 	bl	8006e22 <HAL_I2C_ListenCpltCallback>
}
 800768a:	e022      	b.n	80076d2 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b22      	cmp	r3, #34	@ 0x22
 8007696:	d10e      	bne.n	80076b6 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2220      	movs	r2, #32
 800769c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7ff fb9f 	bl	8006df2 <HAL_I2C_SlaveRxCpltCallback>
}
 80076b4:	e00d      	b.n	80076d2 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2220      	movs	r2, #32
 80076ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7ff fb86 	bl	8006dde <HAL_I2C_SlaveTxCpltCallback>
}
 80076d2:	bf00      	nop
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	ffff0000 	.word	0xffff0000

080076e0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a26      	ldr	r2, [pc, #152]	@ (8007788 <I2C_ITListenCplt+0xa8>)
 80076ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2220      	movs	r2, #32
 80076fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	089b      	lsrs	r3, r3, #2
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b00      	cmp	r3, #0
 8007716:	d022      	beq.n	800775e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007722:	b2d2      	uxtb	r2, r2
 8007724:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007734:	2b00      	cmp	r3, #0
 8007736:	d012      	beq.n	800775e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800773c:	3b01      	subs	r3, #1
 800773e:	b29a      	uxth	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007748:	b29b      	uxth	r3, r3
 800774a:	3b01      	subs	r3, #1
 800774c:	b29a      	uxth	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007756:	f043 0204 	orr.w	r2, r3, #4
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800775e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fbec 	bl	8007f40 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2210      	movs	r2, #16
 800776e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7ff fb52 	bl	8006e22 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800777e:	bf00      	nop
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	ffff0000 	.word	0xffff0000

0800778c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800779c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a6d      	ldr	r2, [pc, #436]	@ (8007960 <I2C_ITError+0x1d4>)
 80077aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	431a      	orrs	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80077be:	7bfb      	ldrb	r3, [r7, #15]
 80077c0:	2b28      	cmp	r3, #40	@ 0x28
 80077c2:	d005      	beq.n	80077d0 <I2C_ITError+0x44>
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	2b29      	cmp	r3, #41	@ 0x29
 80077c8:	d002      	beq.n	80077d0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
 80077cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80077ce:	d10b      	bne.n	80077e8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80077d0:	2103      	movs	r1, #3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fbb4 	bl	8007f40 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2228      	movs	r2, #40	@ 0x28
 80077dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a60      	ldr	r2, [pc, #384]	@ (8007964 <I2C_ITError+0x1d8>)
 80077e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80077e6:	e030      	b.n	800784a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80077e8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fba7 	bl	8007f40 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f8e1 	bl	80079ba <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b60      	cmp	r3, #96	@ 0x60
 8007802:	d01f      	beq.n	8007844 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2220      	movs	r2, #32
 8007808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b20      	cmp	r3, #32
 8007818:	d114      	bne.n	8007844 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	f003 0310 	and.w	r3, r3, #16
 8007824:	2b10      	cmp	r3, #16
 8007826:	d109      	bne.n	800783c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2210      	movs	r2, #16
 800782e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007834:	f043 0204 	orr.w	r2, r3, #4
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2220      	movs	r2, #32
 8007842:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800784e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007854:	2b00      	cmp	r3, #0
 8007856:	d039      	beq.n	80078cc <I2C_ITError+0x140>
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b11      	cmp	r3, #17
 800785c:	d002      	beq.n	8007864 <I2C_ITError+0xd8>
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2b21      	cmp	r3, #33	@ 0x21
 8007862:	d133      	bne.n	80078cc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800786e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007872:	d107      	bne.n	8007884 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007882:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007888:	4618      	mov	r0, r3
 800788a:	f7fd fd13 	bl	80052b4 <HAL_DMA_GetState>
 800788e:	4603      	mov	r3, r0
 8007890:	2b01      	cmp	r3, #1
 8007892:	d017      	beq.n	80078c4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007898:	4a33      	ldr	r2, [pc, #204]	@ (8007968 <I2C_ITError+0x1dc>)
 800789a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fc fb93 	bl	8003fd4 <HAL_DMA_Abort_IT>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d04d      	beq.n	8007950 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80078be:	4610      	mov	r0, r2
 80078c0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80078c2:	e045      	b.n	8007950 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f851 	bl	800796c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80078ca:	e041      	b.n	8007950 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d039      	beq.n	8007948 <I2C_ITError+0x1bc>
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2b12      	cmp	r3, #18
 80078d8:	d002      	beq.n	80078e0 <I2C_ITError+0x154>
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	2b22      	cmp	r3, #34	@ 0x22
 80078de:	d133      	bne.n	8007948 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078ee:	d107      	bne.n	8007900 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80078fe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007904:	4618      	mov	r0, r3
 8007906:	f7fd fcd5 	bl	80052b4 <HAL_DMA_GetState>
 800790a:	4603      	mov	r3, r0
 800790c:	2b01      	cmp	r3, #1
 800790e:	d017      	beq.n	8007940 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007914:	4a14      	ldr	r2, [pc, #80]	@ (8007968 <I2C_ITError+0x1dc>)
 8007916:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007924:	4618      	mov	r0, r3
 8007926:	f7fc fb55 	bl	8003fd4 <HAL_DMA_Abort_IT>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d011      	beq.n	8007954 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800793a:	4610      	mov	r0, r2
 800793c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800793e:	e009      	b.n	8007954 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f813 	bl	800796c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007946:	e005      	b.n	8007954 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f80f 	bl	800796c <I2C_TreatErrorCallback>
  }
}
 800794e:	e002      	b.n	8007956 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007950:	bf00      	nop
 8007952:	e000      	b.n	8007956 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007954:	bf00      	nop
}
 8007956:	bf00      	nop
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	ffff0000 	.word	0xffff0000
 8007964:	08006e5f 	.word	0x08006e5f
 8007968:	08007a03 	.word	0x08007a03

0800796c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b60      	cmp	r3, #96	@ 0x60
 800797e:	d10e      	bne.n	800799e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2220      	movs	r2, #32
 8007984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7ff fa57 	bl	8006e4a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800799c:	e009      	b.n	80079b2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7ff fa42 	bl	8006e36 <HAL_I2C_ErrorCallback>
}
 80079b2:	bf00      	nop
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d103      	bne.n	80079d8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2200      	movs	r2, #0
 80079d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d007      	beq.n	80079f6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	699a      	ldr	r2, [r3, #24]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f042 0201 	orr.w	r2, r2, #1
 80079f4:	619a      	str	r2, [r3, #24]
  }
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b084      	sub	sp, #16
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a0e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d003      	beq.n	8007a20 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d003      	beq.n	8007a30 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f7ff ff9b 	bl	800796c <I2C_TreatErrorCallback>
}
 8007a36:	bf00      	nop
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	60f8      	str	r0, [r7, #12]
 8007a46:	60b9      	str	r1, [r7, #8]
 8007a48:	603b      	str	r3, [r7, #0]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a4e:	e03b      	b.n	8007ac8 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a50:	69ba      	ldr	r2, [r7, #24]
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 f961 	bl	8007d1c <I2C_IsErrorOccurred>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e041      	b.n	8007ae8 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6a:	d02d      	beq.n	8007ac8 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a6c:	f7fa fd1e 	bl	80024ac <HAL_GetTick>
 8007a70:	4602      	mov	r2, r0
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	683a      	ldr	r2, [r7, #0]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d302      	bcc.n	8007a82 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d122      	bne.n	8007ac8 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	699a      	ldr	r2, [r3, #24]
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	bf0c      	ite	eq
 8007a92:	2301      	moveq	r3, #1
 8007a94:	2300      	movne	r3, #0
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	461a      	mov	r2, r3
 8007a9a:	79fb      	ldrb	r3, [r7, #7]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d113      	bne.n	8007ac8 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aa4:	f043 0220 	orr.w	r2, r3, #32
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2220      	movs	r2, #32
 8007ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e00f      	b.n	8007ae8 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	699a      	ldr	r2, [r3, #24]
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	bf0c      	ite	eq
 8007ad8:	2301      	moveq	r3, #1
 8007ada:	2300      	movne	r3, #0
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	461a      	mov	r2, r3
 8007ae0:	79fb      	ldrb	r3, [r7, #7]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d0b4      	beq.n	8007a50 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007afc:	e033      	b.n	8007b66 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	68b9      	ldr	r1, [r7, #8]
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 f90a 	bl	8007d1c <I2C_IsErrorOccurred>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e031      	b.n	8007b76 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b18:	d025      	beq.n	8007b66 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b1a:	f7fa fcc7 	bl	80024ac <HAL_GetTick>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d302      	bcc.n	8007b30 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d11a      	bne.n	8007b66 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d013      	beq.n	8007b66 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b42:	f043 0220 	orr.w	r2, r3, #32
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e007      	b.n	8007b76 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	f003 0302 	and.w	r3, r3, #2
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d1c4      	bne.n	8007afe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	60f8      	str	r0, [r7, #12]
 8007b86:	60b9      	str	r1, [r7, #8]
 8007b88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b8a:	e02f      	b.n	8007bec <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	68b9      	ldr	r1, [r7, #8]
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 f8c3 	bl	8007d1c <I2C_IsErrorOccurred>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e02d      	b.n	8007bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ba0:	f7fa fc84 	bl	80024ac <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d302      	bcc.n	8007bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d11a      	bne.n	8007bec <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	f003 0320 	and.w	r3, r3, #32
 8007bc0:	2b20      	cmp	r3, #32
 8007bc2:	d013      	beq.n	8007bec <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bc8:	f043 0220 	orr.w	r2, r3, #32
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e007      	b.n	8007bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	f003 0320 	and.w	r3, r3, #32
 8007bf6:	2b20      	cmp	r3, #32
 8007bf8:	d1c8      	bne.n	8007b8c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c10:	2300      	movs	r3, #0
 8007c12:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007c14:	e071      	b.n	8007cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	68b9      	ldr	r1, [r7, #8]
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f000 f87e 	bl	8007d1c <I2C_IsErrorOccurred>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d001      	beq.n	8007c2a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	f003 0320 	and.w	r3, r3, #32
 8007c34:	2b20      	cmp	r3, #32
 8007c36:	d13b      	bne.n	8007cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d138      	bne.n	8007cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	f003 0304 	and.w	r3, r3, #4
 8007c48:	2b04      	cmp	r3, #4
 8007c4a:	d105      	bne.n	8007c58 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d001      	beq.n	8007c58 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8007c54:	2300      	movs	r3, #0
 8007c56:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	f003 0310 	and.w	r3, r3, #16
 8007c62:	2b10      	cmp	r3, #16
 8007c64:	d121      	bne.n	8007caa <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2210      	movs	r2, #16
 8007c6c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2204      	movs	r2, #4
 8007c72:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2220      	movs	r2, #32
 8007c7a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6859      	ldr	r1, [r3, #4]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	4b24      	ldr	r3, [pc, #144]	@ (8007d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8007c88:	400b      	ands	r3, r1
 8007c8a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2220      	movs	r2, #32
 8007c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	75fb      	strb	r3, [r7, #23]
 8007ca8:	e002      	b.n	8007cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8007cb0:	f7fa fbfc 	bl	80024ac <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d302      	bcc.n	8007cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d119      	bne.n	8007cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8007cc6:	7dfb      	ldrb	r3, [r7, #23]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d116      	bne.n	8007cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	f003 0304 	and.w	r3, r3, #4
 8007cd6:	2b04      	cmp	r3, #4
 8007cd8:	d00f      	beq.n	8007cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cde:	f043 0220 	orr.w	r2, r3, #32
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2220      	movs	r2, #32
 8007cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	f003 0304 	and.w	r3, r3, #4
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	d002      	beq.n	8007d0e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8007d08:	7dfb      	ldrb	r3, [r7, #23]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d083      	beq.n	8007c16 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	fe00e800 	.word	0xfe00e800

08007d1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b08a      	sub	sp, #40	@ 0x28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007d36:	2300      	movs	r3, #0
 8007d38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	f003 0310 	and.w	r3, r3, #16
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d068      	beq.n	8007e1a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2210      	movs	r2, #16
 8007d4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d50:	e049      	b.n	8007de6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d58:	d045      	beq.n	8007de6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d5a:	f7fa fba7 	bl	80024ac <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d302      	bcc.n	8007d70 <I2C_IsErrorOccurred+0x54>
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d13a      	bne.n	8007de6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d92:	d121      	bne.n	8007dd8 <I2C_IsErrorOccurred+0xbc>
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d9a:	d01d      	beq.n	8007dd8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007d9c:	7cfb      	ldrb	r3, [r7, #19]
 8007d9e:	2b20      	cmp	r3, #32
 8007da0:	d01a      	beq.n	8007dd8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007db0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007db2:	f7fa fb7b 	bl	80024ac <HAL_GetTick>
 8007db6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007db8:	e00e      	b.n	8007dd8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007dba:	f7fa fb77 	bl	80024ac <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	2b19      	cmp	r3, #25
 8007dc6:	d907      	bls.n	8007dd8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007dc8:	6a3b      	ldr	r3, [r7, #32]
 8007dca:	f043 0320 	orr.w	r3, r3, #32
 8007dce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007dd6:	e006      	b.n	8007de6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	f003 0320 	and.w	r3, r3, #32
 8007de2:	2b20      	cmp	r3, #32
 8007de4:	d1e9      	bne.n	8007dba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	f003 0320 	and.w	r3, r3, #32
 8007df0:	2b20      	cmp	r3, #32
 8007df2:	d003      	beq.n	8007dfc <I2C_IsErrorOccurred+0xe0>
 8007df4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d0aa      	beq.n	8007d52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d103      	bne.n	8007e0c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2220      	movs	r2, #32
 8007e0a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	f043 0304 	orr.w	r3, r3, #4
 8007e12:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00b      	beq.n	8007e44 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	f043 0301 	orr.w	r3, r3, #1
 8007e32:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00b      	beq.n	8007e66 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007e4e:	6a3b      	ldr	r3, [r7, #32]
 8007e50:	f043 0308 	orr.w	r3, r3, #8
 8007e54:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007e5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00b      	beq.n	8007e88 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	f043 0302 	orr.w	r3, r3, #2
 8007e76:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007e88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d01c      	beq.n	8007eca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f7ff fd92 	bl	80079ba <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6859      	ldr	r1, [r3, #4]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed8 <I2C_IsErrorOccurred+0x1bc>)
 8007ea2:	400b      	ands	r3, r1
 8007ea4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	431a      	orrs	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007eca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3728      	adds	r7, #40	@ 0x28
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	fe00e800 	.word	0xfe00e800

08007edc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b087      	sub	sp, #28
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	607b      	str	r3, [r7, #4]
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	817b      	strh	r3, [r7, #10]
 8007eea:	4613      	mov	r3, r2
 8007eec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007eee:	897b      	ldrh	r3, [r7, #10]
 8007ef0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007ef4:	7a7b      	ldrb	r3, [r7, #9]
 8007ef6:	041b      	lsls	r3, r3, #16
 8007ef8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007efc:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f02:	6a3b      	ldr	r3, [r7, #32]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f0a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	6a3b      	ldr	r3, [r7, #32]
 8007f14:	0d5b      	lsrs	r3, r3, #21
 8007f16:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007f1a:	4b08      	ldr	r3, [pc, #32]	@ (8007f3c <I2C_TransferConfig+0x60>)
 8007f1c:	430b      	orrs	r3, r1
 8007f1e:	43db      	mvns	r3, r3
 8007f20:	ea02 0103 	and.w	r1, r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	430a      	orrs	r2, r1
 8007f2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007f2e:	bf00      	nop
 8007f30:	371c      	adds	r7, #28
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	03ff63ff 	.word	0x03ff63ff

08007f40 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007f50:	887b      	ldrh	r3, [r7, #2]
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00f      	beq.n	8007f7a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007f60:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007f6e:	2b28      	cmp	r3, #40	@ 0x28
 8007f70:	d003      	beq.n	8007f7a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007f78:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007f7a:	887b      	ldrh	r3, [r7, #2]
 8007f7c:	f003 0302 	and.w	r3, r3, #2
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00f      	beq.n	8007fa4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007f8a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007f98:	2b28      	cmp	r3, #40	@ 0x28
 8007f9a:	d003      	beq.n	8007fa4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007fa2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007fa4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	da03      	bge.n	8007fb4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007fb2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007fb4:	887b      	ldrh	r3, [r7, #2]
 8007fb6:	2b10      	cmp	r3, #16
 8007fb8:	d103      	bne.n	8007fc2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007fc0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007fc2:	887b      	ldrh	r3, [r7, #2]
 8007fc4:	2b20      	cmp	r3, #32
 8007fc6:	d103      	bne.n	8007fd0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f043 0320 	orr.w	r3, r3, #32
 8007fce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007fd0:	887b      	ldrh	r3, [r7, #2]
 8007fd2:	2b40      	cmp	r3, #64	@ 0x40
 8007fd4:	d103      	bne.n	8007fde <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fdc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6819      	ldr	r1, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	43da      	mvns	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	400a      	ands	r2, r1
 8007fee:	601a      	str	r2, [r3, #0]
}
 8007ff0:	bf00      	nop
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b20      	cmp	r3, #32
 8008010:	d138      	bne.n	8008084 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008018:	2b01      	cmp	r3, #1
 800801a:	d101      	bne.n	8008020 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800801c:	2302      	movs	r3, #2
 800801e:	e032      	b.n	8008086 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2224      	movs	r2, #36	@ 0x24
 800802c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f022 0201 	bic.w	r2, r2, #1
 800803e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800804e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6819      	ldr	r1, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	430a      	orrs	r2, r1
 800805e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f042 0201 	orr.w	r2, r2, #1
 800806e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2220      	movs	r2, #32
 8008074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008080:	2300      	movs	r3, #0
 8008082:	e000      	b.n	8008086 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008084:	2302      	movs	r3, #2
  }
}
 8008086:	4618      	mov	r0, r3
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008092:	b480      	push	{r7}
 8008094:	b085      	sub	sp, #20
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	2b20      	cmp	r3, #32
 80080a6:	d139      	bne.n	800811c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d101      	bne.n	80080b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80080b2:	2302      	movs	r3, #2
 80080b4:	e033      	b.n	800811e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2224      	movs	r2, #36	@ 0x24
 80080c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f022 0201 	bic.w	r2, r2, #1
 80080d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80080e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	021b      	lsls	r3, r3, #8
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f042 0201 	orr.w	r2, r2, #1
 8008106:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2220      	movs	r2, #32
 800810c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	e000      	b.n	800811e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800811c:	2302      	movs	r3, #2
  }
}
 800811e:	4618      	mov	r0, r3
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
	...

0800812c <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e070      	b.n	8008220 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d106      	bne.n	8008158 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7f9 fc68 	bl	8001a28 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2202      	movs	r2, #2
 800815c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f042 0201 	orr.w	r2, r2, #1
 800816e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f022 0201 	bic.w	r2, r2, #1
 800817e:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800818e:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800819e:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80081ae:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80081be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a19      	ldr	r2, [pc, #100]	@ (8008228 <HAL_JPEG_Init+0xfc>)
 80081c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a18      	ldr	r2, [pc, #96]	@ (800822c <HAL_JPEG_Init+0x100>)
 80081ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fea1 	bl	8008f20 <JPEG_Set_HuffEnc_Mem>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d004      	beq.n	80081ee <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e018      	b.n	8008220 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80081fc:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	08016320 	.word	0x08016320
 800822c:	08016360 	.word	0x08016360

08008230 <HAL_JPEG_ConfigEncoding>:
  * @param  pConf pointer to a JPEG_ConfTypeDef structure that contains
  *         the encoding configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_ConfigEncoding(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pConf)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b088      	sub	sp, #32
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  uint32_t vfactor;
  uint32_t hMCU;
  uint32_t vMCU;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pConf == NULL))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d002      	beq.n	8008246 <HAL_JPEG_ConfigEncoding+0x16>
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <HAL_JPEG_ConfigEncoding+0x1a>
  {
    return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e191      	b.n	800856e <HAL_JPEG_ConfigEncoding+0x33e>
    assert_param(IS_JPEG_COLORSPACE(pConf->ColorSpace));
    assert_param(IS_JPEG_CHROMASUBSAMPLING(pConf->ChromaSubsampling));
    assert_param(IS_JPEG_IMAGE_QUALITY(pConf->ImageQuality));

    /* Process Locked */
    __HAL_LOCK(hjpeg);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008250:	2b01      	cmp	r3, #1
 8008252:	d101      	bne.n	8008258 <HAL_JPEG_ConfigEncoding+0x28>
 8008254:	2302      	movs	r3, #2
 8008256:	e18a      	b.n	800856e <HAL_JPEG_ConfigEncoding+0x33e>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    if (hjpeg->State == HAL_JPEG_STATE_READY)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008266:	b2db      	uxtb	r3, r3
 8008268:	2b01      	cmp	r3, #1
 800826a:	f040 817b 	bne.w	8008564 <HAL_JPEG_ConfigEncoding+0x334>
    {
      hjpeg->State = HAL_JPEG_STATE_BUSY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2202      	movs	r2, #2
 8008272:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      hjpeg->Conf.ColorSpace          =  pConf->ColorSpace;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	605a      	str	r2, [r3, #4]
      hjpeg->Conf.ChromaSubsampling   =  pConf->ChromaSubsampling;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	609a      	str	r2, [r3, #8]
      hjpeg->Conf.ImageHeight         =  pConf->ImageHeight;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	689a      	ldr	r2, [r3, #8]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	60da      	str	r2, [r3, #12]
      hjpeg->Conf.ImageWidth          =  pConf->ImageWidth;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	68da      	ldr	r2, [r3, #12]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	611a      	str	r2, [r3, #16]
      hjpeg->Conf.ImageQuality        =  pConf->ImageQuality;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	691a      	ldr	r2, [r3, #16]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	615a      	str	r2, [r3, #20]

      /* Reset the Color Space : by default only one quantization table is used*/
      hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_COLORSPACE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80082ac:	605a      	str	r2, [r3, #4]

      /* Set Number of color components*/
      if (hjpeg->Conf.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d110      	bne.n	80082d8 <HAL_JPEG_ConfigEncoding+0xa8>
      {
        /*Gray Scale is only one component 8x8 blocks i.e 4:4:4*/
        hjpeg->Conf.ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	609a      	str	r2, [r3, #8]

        JPEG_SetColorGrayScale(hjpeg);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f001 f99b 	bl	80095f8 <JPEG_SetColorGrayScale>
        /* Set quantization table 0*/
        error = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	3350      	adds	r3, #80	@ 0x50
 80082cc:	461a      	mov	r2, r3
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f001 f8a8 	bl	8009424 <JPEG_Set_Quantization_Mem>
 80082d4:	61f8      	str	r0, [r7, #28]
 80082d6:	e0c5      	b.n	8008464 <HAL_JPEG_ConfigEncoding+0x234>
      }
      else if (hjpeg->Conf.ColorSpace == JPEG_YCBCR_COLORSPACE)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	2b10      	cmp	r3, #16
 80082de:	d166      	bne.n	80083ae <HAL_JPEG_ConfigEncoding+0x17e>
      {
        /*
           Set the Color Space for YCbCr : 2 quantization tables are used
           one for Luminance(Y) and one for both Chrominances (Cb & Cr)
          */
        hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE_0;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	685a      	ldr	r2, [r3, #4]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f042 0210 	orr.w	r2, r2, #16
 80082ee:	605a      	str	r2, [r3, #4]

        JPEG_SetColorYCBCR(hjpeg);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f001 f909 	bl	8009508 <JPEG_SetColorYCBCR>

        /* Set quantization table 0*/
        error  = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3350      	adds	r3, #80	@ 0x50
 8008300:	461a      	mov	r2, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f001 f88e 	bl	8009424 <JPEG_Set_Quantization_Mem>
 8008308:	61f8      	str	r0, [r7, #28]
        /*By default quantization table 0 for component 0 and quantization table 1 for both components 1 and 2*/
        error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable1, (hjpeg->Instance->QMEM1));
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3390      	adds	r3, #144	@ 0x90
 8008314:	461a      	mov	r2, r3
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f001 f884 	bl	8009424 <JPEG_Set_Quantization_Mem>
 800831c:	4602      	mov	r2, r0
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	4313      	orrs	r3, r2
 8008322:	61fb      	str	r3, [r7, #28]

        if ((hjpeg->Context & JPEG_CONTEXT_CUSTOM_TABLES) != 0UL)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008328:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800832c:	2b00      	cmp	r3, #0
 800832e:	f000 8099 	beq.w	8008464 <HAL_JPEG_ConfigEncoding+0x234>
        {
          /*Use user customized quantization tables , 1 table per component*/
          /* use 3 quantization tables , one for each component*/
          hjpeg->Instance->CONFR1 &= (~JPEG_CONFR1_COLORSPACE);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8008340:	605a      	str	r2, [r3, #4]
          hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE_1;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f042 0220 	orr.w	r2, r2, #32
 8008350:	605a      	str	r2, [r3, #4]

          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable2, (hjpeg->Instance->QMEM2));
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	33d0      	adds	r3, #208	@ 0xd0
 800835c:	461a      	mov	r2, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f001 f860 	bl	8009424 <JPEG_Set_Quantization_Mem>
 8008364:	4602      	mov	r2, r0
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	4313      	orrs	r3, r2
 800836a:	61fb      	str	r3, [r7, #28]

          /*Use Quantization 1 table for component 1*/
          hjpeg->Instance->CONFR5 &= (~JPEG_CONFR5_QT);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	695a      	ldr	r2, [r3, #20]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f022 020c 	bic.w	r2, r2, #12
 800837a:	615a      	str	r2, [r3, #20]
          hjpeg->Instance->CONFR5 |=  JPEG_CONFR5_QT_0;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	695a      	ldr	r2, [r3, #20]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 0204 	orr.w	r2, r2, #4
 800838a:	615a      	str	r2, [r3, #20]

          /*Use Quantization 2 table for component 2*/
          hjpeg->Instance->CONFR6 &= (~JPEG_CONFR6_QT);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	699a      	ldr	r2, [r3, #24]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 020c 	bic.w	r2, r2, #12
 800839a:	619a      	str	r2, [r3, #24]
          hjpeg->Instance->CONFR6 |=  JPEG_CONFR6_QT_1;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	699a      	ldr	r2, [r3, #24]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0208 	orr.w	r2, r2, #8
 80083aa:	619a      	str	r2, [r3, #24]
 80083ac:	e05a      	b.n	8008464 <HAL_JPEG_ConfigEncoding+0x234>
        }
      }
      else /* ColorSpace == JPEG_CMYK_COLORSPACE */
      {
        JPEG_SetColorCMYK(hjpeg);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f001 f940 	bl	8009634 <JPEG_SetColorCMYK>

        /* Set quantization table 0*/
        error  = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3350      	adds	r3, #80	@ 0x50
 80083be:	461a      	mov	r2, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f001 f82f 	bl	8009424 <JPEG_Set_Quantization_Mem>
 80083c6:	61f8      	str	r0, [r7, #28]
        /*By default quantization table 0 for All components*/

        if ((hjpeg->Context & JPEG_CONTEXT_CUSTOM_TABLES) != 0UL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d047      	beq.n	8008464 <HAL_JPEG_ConfigEncoding+0x234>
        {
          /*Use user customized quantization tables , 1 table per component*/
          /* use 4 quantization tables , one for each component*/
          hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	685a      	ldr	r2, [r3, #4]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80083e2:	605a      	str	r2, [r3, #4]

          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable1, (hjpeg->Instance->QMEM1));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	3390      	adds	r3, #144	@ 0x90
 80083ee:	461a      	mov	r2, r3
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f001 f817 	bl	8009424 <JPEG_Set_Quantization_Mem>
 80083f6:	4602      	mov	r2, r0
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	61fb      	str	r3, [r7, #28]
          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable2, (hjpeg->Instance->QMEM2));
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	33d0      	adds	r3, #208	@ 0xd0
 8008408:	461a      	mov	r2, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f001 f80a 	bl	8009424 <JPEG_Set_Quantization_Mem>
 8008410:	4602      	mov	r2, r0
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	4313      	orrs	r3, r2
 8008416:	61fb      	str	r3, [r7, #28]
          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable3, (hjpeg->Instance->QMEM3));
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8008424:	461a      	mov	r2, r3
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fffc 	bl	8009424 <JPEG_Set_Quantization_Mem>
 800842c:	4602      	mov	r2, r0
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	4313      	orrs	r3, r2
 8008432:	61fb      	str	r3, [r7, #28]

          /*Use Quantization 1 table for component 1*/
          hjpeg->Instance->CONFR5 |=  JPEG_CONFR5_QT_0;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	695a      	ldr	r2, [r3, #20]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f042 0204 	orr.w	r2, r2, #4
 8008442:	615a      	str	r2, [r3, #20]

          /*Use Quantization 2 table for component 2*/
          hjpeg->Instance->CONFR6 |=  JPEG_CONFR6_QT_1;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	699a      	ldr	r2, [r3, #24]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f042 0208 	orr.w	r2, r2, #8
 8008452:	619a      	str	r2, [r3, #24]

          /*Use Quantization 3 table for component 3*/
          hjpeg->Instance->CONFR7 |=  JPEG_CONFR7_QT;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	69da      	ldr	r2, [r3, #28]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 020c 	orr.w	r2, r2, #12
 8008462:	61da      	str	r2, [r3, #28]
        }
      }

      if (error != 0UL)
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00c      	beq.n	8008484 <HAL_JPEG_ConfigEncoding+0x254>
      {
        hjpeg->ErrorCode = HAL_JPEG_ERROR_QUANT_TABLE;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2202      	movs	r2, #2
 800846e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Process Unlocked */
        __HAL_UNLOCK(hjpeg);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Set the JPEG State to ready */
        hjpeg->State = HAL_JPEG_STATE_READY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

        return  HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e074      	b.n	800856e <HAL_JPEG_ConfigEncoding+0x33e>
      }
      /* Set the image size*/
      /* set the number of lines*/
      MODIFY_REG(hjpeg->Instance->CONFR1, JPEG_CONFR1_YSIZE, ((hjpeg->Conf.ImageHeight & 0x0000FFFFUL) << 16));
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	b299      	uxth	r1, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	041a      	lsls	r2, r3, #16
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	430a      	orrs	r2, r1
 8008498:	605a      	str	r2, [r3, #4]
      /* set the number of pixels per line*/
      MODIFY_REG(hjpeg->Instance->CONFR3, JPEG_CONFR3_XSIZE, ((hjpeg->Conf.ImageWidth & 0x0000FFFFUL) << 16));
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	b299      	uxth	r1, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	041a      	lsls	r2, r3, #16
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	430a      	orrs	r2, r1
 80084ae:	60da      	str	r2, [r3, #12]


      if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING) /* 4:2:0*/
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d104      	bne.n	80084c2 <HAL_JPEG_ConfigEncoding+0x292>
      {
        hfactor = 16;
 80084b8:	2310      	movs	r3, #16
 80084ba:	61bb      	str	r3, [r7, #24]
        vfactor = 16;
 80084bc:	2310      	movs	r3, #16
 80084be:	617b      	str	r3, [r7, #20]
 80084c0:	e00c      	b.n	80084dc <HAL_JPEG_ConfigEncoding+0x2ac>
      }
      else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING) /* 4:2:2*/
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d104      	bne.n	80084d4 <HAL_JPEG_ConfigEncoding+0x2a4>
      {
        hfactor = 16;
 80084ca:	2310      	movs	r3, #16
 80084cc:	61bb      	str	r3, [r7, #24]
        vfactor = 8;
 80084ce:	2308      	movs	r3, #8
 80084d0:	617b      	str	r3, [r7, #20]
 80084d2:	e003      	b.n	80084dc <HAL_JPEG_ConfigEncoding+0x2ac>
      }
      else /* Default is 8x8 MCU,  4:4:4*/
      {
        hfactor = 8;
 80084d4:	2308      	movs	r3, #8
 80084d6:	61bb      	str	r3, [r7, #24]
        vfactor = 8;
 80084d8:	2308      	movs	r3, #8
 80084da:	617b      	str	r3, [r7, #20]
      }

      hMCU = (hjpeg->Conf.ImageWidth / hfactor);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	691a      	ldr	r2, [r3, #16]
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084e6:	613b      	str	r3, [r7, #16]
      if ((hjpeg->Conf.ImageWidth % hfactor) != 0UL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	69ba      	ldr	r2, [r7, #24]
 80084ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80084f2:	69b9      	ldr	r1, [r7, #24]
 80084f4:	fb01 f202 	mul.w	r2, r1, r2
 80084f8:	1a9b      	subs	r3, r3, r2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d002      	beq.n	8008504 <HAL_JPEG_ConfigEncoding+0x2d4>
      {
        hMCU++; /*+1 for horizontal incomplete MCU */
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	3301      	adds	r3, #1
 8008502:	613b      	str	r3, [r7, #16]
      }

      vMCU = (hjpeg->Conf.ImageHeight / vfactor);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	fbb2 f3f3 	udiv	r3, r2, r3
 800850e:	60fb      	str	r3, [r7, #12]
      if ((hjpeg->Conf.ImageHeight % vfactor) != 0UL)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	fbb3 f2f2 	udiv	r2, r3, r2
 800851a:	6979      	ldr	r1, [r7, #20]
 800851c:	fb01 f202 	mul.w	r2, r1, r2
 8008520:	1a9b      	subs	r3, r3, r2
 8008522:	2b00      	cmp	r3, #0
 8008524:	d002      	beq.n	800852c <HAL_JPEG_ConfigEncoding+0x2fc>
      {
        vMCU++; /*+1 for vertical incomplete MCU */
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	3301      	adds	r3, #1
 800852a:	60fb      	str	r3, [r7, #12]
      }

      numberMCU = (hMCU * vMCU) - 1UL; /* Bit Field JPEG_CONFR2_NMCU shall be set to NB_MCU - 1*/
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	fb02 f303 	mul.w	r3, r2, r3
 8008534:	3b01      	subs	r3, #1
 8008536:	60bb      	str	r3, [r7, #8]
      /* Set the number of MCU*/
      hjpeg->Instance->CONFR2 = (numberMCU & JPEG_CONFR2_NMCU);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8008542:	609a      	str	r2, [r3, #8]

      hjpeg->Context |= JPEG_CONTEXT_CONF_ENCODING;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008548:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Set the JPEG State to ready */
      hjpeg->State = HAL_JPEG_STATE_READY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Return function status */
      return HAL_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	e004      	b.n	800856e <HAL_JPEG_ConfigEncoding+0x33e>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Return function status */
      return HAL_BUSY;
 800856c:	2302      	movs	r3, #2
    }
  }
}
 800856e:	4618      	mov	r0, r3
 8008570:	3720      	adds	r7, #32
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b086      	sub	sp, #24
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d002      	beq.n	800858c <HAL_JPEG_GetInfo+0x16>
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e083      	b.n	8008698 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	f003 0303 	and.w	r3, r3, #3
 800859a:	2b02      	cmp	r3, #2
 800859c:	d103      	bne.n	80085a6 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	2210      	movs	r2, #16
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	e017      	b.n	80085d6 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	f003 0303 	and.w	r3, r3, #3
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d103      	bne.n	80085bc <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	2200      	movs	r2, #0
 80085b8:	601a      	str	r2, [r3, #0]
 80085ba:	e00c      	b.n	80085d6 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	f003 0303 	and.w	r3, r3, #3
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d103      	bne.n	80085d2 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	2230      	movs	r2, #48	@ 0x30
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	e001      	b.n	80085d6 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e060      	b.n	8008698 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	0c1b      	lsrs	r3, r3, #16
 80085de:	b29a      	uxth	r2, r3
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	0c1b      	lsrs	r3, r3, #16
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b10      	cmp	r3, #16
 80085f8:	d003      	beq.n	8008602 <HAL_JPEG_GetInfo+0x8c>
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b30      	cmp	r3, #48	@ 0x30
 8008600:	d140      	bne.n	8008684 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	091b      	lsrs	r3, r3, #4
 800860a:	f003 030f 	and.w	r3, r3, #15
 800860e:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	695b      	ldr	r3, [r3, #20]
 8008616:	091b      	lsrs	r3, r3, #4
 8008618:	f003 030f 	and.w	r3, r3, #15
 800861c:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	091b      	lsrs	r3, r3, #4
 8008626:	f003 030f 	and.w	r3, r3, #15
 800862a:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d109      	bne.n	8008646 <HAL_JPEG_GetInfo+0xd0>
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d106      	bne.n	8008646 <HAL_JPEG_GetInfo+0xd0>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d103      	bne.n	8008646 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	2202      	movs	r2, #2
 8008642:	605a      	str	r2, [r3, #4]
 8008644:	e01d      	b.n	8008682 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d109      	bne.n	8008660 <HAL_JPEG_GetInfo+0xea>
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d106      	bne.n	8008660 <HAL_JPEG_GetInfo+0xea>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d103      	bne.n	8008660 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	2200      	movs	r2, #0
 800865c:	605a      	str	r2, [r3, #4]
 800865e:	e010      	b.n	8008682 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	2b03      	cmp	r3, #3
 8008664:	d109      	bne.n	800867a <HAL_JPEG_GetInfo+0x104>
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d106      	bne.n	800867a <HAL_JPEG_GetInfo+0x104>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d103      	bne.n	800867a <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2201      	movs	r2, #1
 8008676:	605a      	str	r2, [r3, #4]
 8008678:	e003      	b.n	8008682 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2200      	movs	r2, #0
 800867e:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008680:	e003      	b.n	800868a <HAL_JPEG_GetInfo+0x114>
 8008682:	e002      	b.n	800868a <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	2200      	movs	r2, #0
 8008688:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f001 feac 	bl	800a3e8 <JPEG_GetQuality>
 8008690:	4602      	mov	r2, r0
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3718      	adds	r7, #24
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <HAL_JPEG_Encode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Encode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataInMCU, uint32_t InDataLength,
                                       uint8_t *pDataOut, uint32_t OutDataLength)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
 80086ac:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataInMCU == NULL) || (pDataOut == NULL))
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d005      	beq.n	80086c0 <HAL_JPEG_Encode_DMA+0x20>
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d002      	beq.n	80086c0 <HAL_JPEG_Encode_DMA+0x20>
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <HAL_JPEG_Encode_DMA+0x24>
  {
    return HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	e059      	b.n	8008778 <HAL_JPEG_Encode_DMA+0xd8>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d101      	bne.n	80086d2 <HAL_JPEG_Encode_DMA+0x32>
 80086ce:	2302      	movs	r3, #2
 80086d0:	e052      	b.n	8008778 <HAL_JPEG_Encode_DMA+0xd8>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State != HAL_JPEG_STATE_READY)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d005      	beq.n	80086f2 <HAL_JPEG_Encode_DMA+0x52>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 80086ee:	2302      	movs	r3, #2
 80086f0:	e042      	b.n	8008778 <HAL_JPEG_Encode_DMA+0xd8>
  }
  else
  {
    if ((hjpeg->Context & JPEG_CONTEXT_CONF_ENCODING) == JPEG_CONTEXT_CONF_ENCODING)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086fe:	d134      	bne.n	800876a <HAL_JPEG_Encode_DMA+0xca>
    {
      /*Change JPEG state*/
      hjpeg->State = HAL_JPEG_STATE_BUSY_ENCODING;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2203      	movs	r2, #3
 8008704:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /*Set the Context to Encode with DMA*/
      hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800870c:	f023 020f 	bic.w	r2, r3, #15
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	655a      	str	r2, [r3, #84]	@ 0x54
      hjpeg->Context |= (JPEG_CONTEXT_ENCODE | JPEG_CONTEXT_DMA);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008718:	f043 020d 	orr.w	r2, r3, #13
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	655a      	str	r2, [r3, #84]	@ 0x54

      /*Store In/out buffers pointers and size*/
      hjpeg->pJpegInBuffPtr = pDataInMCU;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	619a      	str	r2, [r3, #24]
      hjpeg->pJpegOutBuffPtr = pDataOut;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	61da      	str	r2, [r3, #28]
      hjpeg->InDataLength = InDataLength;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	629a      	str	r2, [r3, #40]	@ 0x28
      hjpeg->OutDataLength = OutDataLength;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	62da      	str	r2, [r3, #44]	@ 0x2c

      /*Reset In/out data counter */
      hjpeg->JpegInCount = 0;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	621a      	str	r2, [r3, #32]
      hjpeg->JpegOutCount = 0;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Init decoding process*/
      JPEG_Init_Process(hjpeg);
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f000 ffdf 	bl	8009708 <JPEG_Init_Process>

      /* JPEG encoding process using DMA */
      if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f001 fb00 	bl	8009d50 <JPEG_DMA_StartProcess>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00f      	beq.n	8008776 <HAL_JPEG_Encode_DMA+0xd6>
      {
        /* Update State */
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2206      	movs	r2, #6
 800875a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        /* Process Unlocked */
        __HAL_UNLOCK(hjpeg);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e006      	b.n	8008778 <HAL_JPEG_Encode_DMA+0xd8>

    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e000      	b.n	8008778 <HAL_JPEG_Encode_DMA+0xd8>
    }
  }
  /* Return function status */
  return HAL_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800878a:	2300      	movs	r3, #0
 800878c:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008792:	f003 030c 	and.w	r3, r3, #12
 8008796:	2b0c      	cmp	r3, #12
 8008798:	d116      	bne.n	80087c8 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	f003 0301 	and.w	r3, r3, #1
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d005      	beq.n	80087b0 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087a8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	f003 0302 	and.w	r3, r3, #2
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d033      	beq.n	8008822 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087be:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	655a      	str	r2, [r3, #84]	@ 0x54
 80087c6:	e02c      	b.n	8008822 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087cc:	f003 030c 	and.w	r3, r3, #12
 80087d0:	2b08      	cmp	r3, #8
 80087d2:	d126      	bne.n	8008822 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d009      	beq.n	80087f2 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087e2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f043 0306 	orr.w	r3, r3, #6
 80087f0:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	f003 0302 	and.w	r3, r3, #2
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d009      	beq.n	8008810 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008800:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800880e:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	43da      	mvns	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	400a      	ands	r2, r1
 8008820:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3714      	adds	r7, #20
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008848:	bf00      	nop
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800886c:	bf00      	nop
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 8008882:	bf00      	nop
 8008884:	370c      	adds	r7, #12
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800888e:	b480      	push	{r7}
 8008890:	b083      	sub	sp, #12
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8008896:	bf00      	nop
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <HAL_JPEG_ErrorCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b083      	sub	sp, #12
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_ErrorCallback could be implemented in the user file
   */
}
 80088aa:	bf00      	nop
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	3b03      	subs	r3, #3
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d813      	bhi.n	80088f4 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088d0:	f003 030c 	and.w	r3, r3, #12
 80088d4:	2b08      	cmp	r3, #8
 80088d6:	d103      	bne.n	80088e0 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 ff89 	bl	80097f0 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 80088de:	e00b      	b.n	80088f8 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088e4:	f003 030c 	and.w	r3, r3, #12
 80088e8:	2b0c      	cmp	r3, #12
 80088ea:	d105      	bne.n	80088f8 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f001 fac9 	bl	8009e84 <JPEG_DMA_ContinueProcess>
      break;
 80088f2:	e001      	b.n	80088f8 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 80088f4:	bf00      	nop
 80088f6:	e000      	b.n	80088fa <HAL_JPEG_IRQHandler+0x44>
      break;
 80088f8:	bf00      	nop
  }
}
 80088fa:	bf00      	nop
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8008902:	b480      	push	{r7}
 8008904:	b08b      	sub	sp, #44	@ 0x2c
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	607a      	str	r2, [r7, #4]
 800890e:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8008910:	2300      	movs	r3, #0
 8008912:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8008914:	2300      	movs	r3, #0
 8008916:	61fb      	str	r3, [r7, #28]
 8008918:	e020      	b.n	800895c <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	4413      	add	r3, r2
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8008924:	6a3a      	ldr	r2, [r7, #32]
 8008926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008928:	4413      	add	r3, r2
 800892a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800892e:	d90f      	bls.n	8008950 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	e055      	b.n	80089e0 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	b2da      	uxtb	r2, r3
 8008938:	68b9      	ldr	r1, [r7, #8]
 800893a:	6a3b      	ldr	r3, [r7, #32]
 800893c:	440b      	add	r3, r1
 800893e:	3201      	adds	r2, #1
 8008940:	b2d2      	uxtb	r2, r2
 8008942:	701a      	strb	r2, [r3, #0]
      p++;
 8008944:	6a3b      	ldr	r3, [r7, #32]
 8008946:	3301      	adds	r3, #1
 8008948:	623b      	str	r3, [r7, #32]
      i--;
 800894a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894c:	3b01      	subs	r3, #1
 800894e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8008950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1ee      	bne.n	8008934 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	3301      	adds	r3, #1
 800895a:	61fb      	str	r3, [r7, #28]
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	2b0f      	cmp	r3, #15
 8008960:	d9db      	bls.n	800891a <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	6a3b      	ldr	r3, [r7, #32]
 8008966:	4413      	add	r3, r2
 8008968:	2200      	movs	r2, #0
 800896a:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	6a3a      	ldr	r2, [r7, #32]
 8008970:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8008972:	2300      	movs	r3, #0
 8008974:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	617b      	str	r3, [r7, #20]
  p = 0;
 800897c:	2300      	movs	r3, #0
 800897e:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8008980:	e027      	b.n	80089d2 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	4413      	add	r3, r2
 800898a:	69ba      	ldr	r2, [r7, #24]
 800898c:	601a      	str	r2, [r3, #0]
      p++;
 800898e:	6a3b      	ldr	r3, [r7, #32]
 8008990:	3301      	adds	r3, #1
 8008992:	623b      	str	r3, [r7, #32]
      code++;
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	3301      	adds	r3, #1
 8008998:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	6a3b      	ldr	r3, [r7, #32]
 800899e:	4413      	add	r3, r2
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d0eb      	beq.n	8008982 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	2b1f      	cmp	r3, #31
 80089ae:	d901      	bls.n	80089b4 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e015      	b.n	80089e0 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80089b4:	2201      	movs	r2, #1
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	fa02 f303 	lsl.w	r3, r2, r3
 80089bc:	69ba      	ldr	r2, [r7, #24]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d301      	bcc.n	80089c6 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e00c      	b.n	80089e0 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	005b      	lsls	r3, r3, #1
 80089ca:	61bb      	str	r3, [r7, #24]
    si++;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	3301      	adds	r3, #1
 80089d0:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	4413      	add	r3, r2
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1dd      	bne.n	800899a <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	372c      	adds	r7, #44	@ 0x2c
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80089f8:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80089fc:	6018      	str	r0, [r3, #0]
 80089fe:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008a02:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8008a06:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008a08:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008a0c:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8008a10:	6818      	ldr	r0, [r3, #0]
 8008a12:	f107 0308 	add.w	r3, r7, #8
 8008a16:	f107 020c 	add.w	r2, r7, #12
 8008a1a:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8008a1e:	f7ff ff70 	bl	8008902 <JPEG_Bits_To_SizeCodes>
 8008a22:	4603      	mov	r3, r0
 8008a24:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8008a28:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8008a30:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8008a34:	e075      	b.n	8008b22 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8008a36:	2300      	movs	r3, #0
 8008a38:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8008a3c:	e067      	b.n	8008b0e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8008a3e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008a42:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8008a4c:	4413      	add	r3, r2
 8008a4e:	3310      	adds	r3, #16
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8008a56:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d103      	bne.n	8008a66 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8008a5e:	23a0      	movs	r3, #160	@ 0xa0
 8008a60:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8008a64:	e021      	b.n	8008aaa <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8008a66:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008a6a:	2bf0      	cmp	r3, #240	@ 0xf0
 8008a6c:	d103      	bne.n	8008a76 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8008a6e:	23a1      	movs	r3, #161	@ 0xa1
 8008a70:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8008a74:	e019      	b.n	8008aaa <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8008a76:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008a7a:	091b      	lsrs	r3, r3, #4
 8008a7c:	f003 030f 	and.w	r3, r3, #15
 8008a80:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8008a84:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008a88:	f003 030f 	and.w	r3, r3, #15
 8008a8c:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8008a90:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8008a94:	4613      	mov	r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4413      	add	r3, r2
 8008a9a:	005b      	lsls	r3, r3, #1
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8008aa2:	4413      	add	r3, r2
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8008aaa:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008aae:	2ba1      	cmp	r3, #161	@ 0xa1
 8008ab0:	d901      	bls.n	8008ab6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e035      	b.n	8008b22 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008ab6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008aba:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8008abe:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8008ac2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008ac6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008aca:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8008ace:	6819      	ldr	r1, [r3, #0]
 8008ad0:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008ad4:	3328      	adds	r3, #40	@ 0x28
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	440b      	add	r3, r1
 8008ada:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8008adc:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008ae0:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8008ae4:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8008ae8:	4413      	add	r3, r2
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	3b01      	subs	r3, #1
 8008aee:	b2d9      	uxtb	r1, r3
 8008af0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008af4:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008afe:	4413      	add	r3, r2
 8008b00:	460a      	mov	r2, r1
 8008b02:	701a      	strb	r2, [r3, #0]
      k++;
 8008b04:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8008b08:	3301      	adds	r3, #1
 8008b0a:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8008b0e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008b12:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d38e      	bcc.n	8008a3e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008b38:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8008b3c:	6018      	str	r0, [r3, #0]
 8008b3e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008b42:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8008b46:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008b48:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008b4c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8008b50:	6818      	ldr	r0, [r3, #0]
 8008b52:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8008b56:	f107 0208 	add.w	r2, r7, #8
 8008b5a:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8008b5e:	f7ff fed0 	bl	8008902 <JPEG_Bits_To_SizeCodes>
 8008b62:	4603      	mov	r3, r0
 8008b64:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8008b68:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d002      	beq.n	8008b76 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8008b70:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8008b74:	e048      	b.n	8008c08 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8008b76:	2300      	movs	r3, #0
 8008b78:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8008b7c:	e03d      	b.n	8008bfa <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8008b7e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008b82:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8008b8c:	4413      	add	r3, r2
 8008b8e:	3310      	adds	r3, #16
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8008b96:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8008b9a:	2b0b      	cmp	r3, #11
 8008b9c:	d901      	bls.n	8008ba2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e032      	b.n	8008c08 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008ba2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008ba6:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8008baa:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8008bae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008bb2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008bb6:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8008bba:	6819      	ldr	r1, [r3, #0]
 8008bbc:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8008bc0:	3302      	adds	r3, #2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	440b      	add	r3, r1
 8008bc6:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8008bc8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008bcc:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8008bd0:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8008bd4:	4413      	add	r3, r2
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	b2d9      	uxtb	r1, r3
 8008bdc:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008be0:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8008bea:	4413      	add	r3, r2
 8008bec:	460a      	mov	r2, r1
 8008bee:	701a      	strb	r2, [r3, #0]
      k++;
 8008bf0:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8008bfa:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8008bfe:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d3bb      	bcc.n	8008b7e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b09a      	sub	sp, #104	@ 0x68
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	60f8      	str	r0, [r7, #12]
 8008c1a:	60b9      	str	r1, [r7, #8]
 8008c1c:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d106      	bne.n	8008c3a <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8008c34:	3318      	adds	r3, #24
 8008c36:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c38:	e00f      	b.n	8008c5a <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d106      	bne.n	8008c56 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8008c50:	3318      	adds	r3, #24
 8008c52:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c54:	e001      	b.n	8008c5a <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e059      	b.n	8008d0e <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d055      	beq.n	8008d0c <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8008c60:	f107 0314 	add.w	r3, r7, #20
 8008c64:	4619      	mov	r1, r3
 8008c66:	68b8      	ldr	r0, [r7, #8]
 8008c68:	f7ff ff60 	bl	8008b2c <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8008c72:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d002      	beq.n	8008c80 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8008c7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008c7e:	e046      	b.n	8008d0e <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8008c80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c82:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8008c84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c86:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8008c8a:	601a      	str	r2, [r3, #0]
    addressDef++;
 8008c8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c8e:	3304      	adds	r3, #4
 8008c90:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8008c92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c94:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8008c98:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8008c9a:	230c      	movs	r3, #12
 8008c9c:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8008c9e:	e032      	b.n	8008d06 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8008ca0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8008ca6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ca8:	3b04      	subs	r3, #4
 8008caa:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008cac:	f107 0214 	add.w	r2, r7, #20
 8008cb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008cb2:	4413      	add	r3, r2
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	021b      	lsls	r3, r3, #8
 8008cb8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008cbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008cbe:	3302      	adds	r3, #2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	3368      	adds	r3, #104	@ 0x68
 8008cc4:	443b      	add	r3, r7
 8008cc6:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8008cd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008cd6:	f107 0214 	add.w	r2, r7, #20
 8008cda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008cdc:	4413      	add	r3, r2
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	021b      	lsls	r3, r3, #8
 8008ce2:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008ce6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ce8:	3302      	adds	r3, #2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	3368      	adds	r3, #104	@ 0x68
 8008cee:	443b      	add	r3, r7
 8008cf0:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8008cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cfc:	041a      	lsls	r2, r3, #16
 8008cfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d00:	431a      	orrs	r2, r3
 8008d02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d04:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8008d06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d8c9      	bhi.n	8008ca0 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3768      	adds	r7, #104	@ 0x68
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
	...

08008d18 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008d24:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8008d28:	6018      	str	r0, [r3, #0]
 8008d2a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008d2e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8008d32:	6019      	str	r1, [r3, #0]
 8008d34:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008d38:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8008d3c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8008d3e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008d42:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d4e:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8008d52:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8008d56:	6812      	ldr	r2, [r2, #0]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d10c      	bne.n	8008d76 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8008d5c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008d60:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d6c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8008d70:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8008d74:	e01d      	b.n	8008db2 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8008d76:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008d7a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8008d86:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8008d8a:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8008d8e:	6812      	ldr	r2, [r2, #0]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d10c      	bne.n	8008dae <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8008d94:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008d98:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8008da4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8008da8:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8008dac:	e001      	b.n	8008db2 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e0a8      	b.n	8008f04 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8008db2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008db6:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 80a0 	beq.w	8008f02 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8008dc2:	f107 0214 	add.w	r2, r7, #20
 8008dc6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008dca:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8008dce:	4611      	mov	r1, r2
 8008dd0:	6818      	ldr	r0, [r3, #0]
 8008dd2:	f7ff fe0b 	bl	80089ec <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8008ddc:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d002      	beq.n	8008dea <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8008de4:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8008de8:	e08c      	b.n	8008f04 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8008dea:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8008dee:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8008df2:	2300      	movs	r3, #0
 8008df4:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8008df8:	e00e      	b.n	8008e18 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8008dfa:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008dfe:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8008e02:	601a      	str	r2, [r3, #0]
      addressDef++;
 8008e04:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008e08:	3304      	adds	r3, #4
 8008e0a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8008e0e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008e12:	3301      	adds	r3, #1
 8008e14:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8008e18:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d9ec      	bls.n	8008dfa <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8008e20:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008e24:	4a3a      	ldr	r2, [pc, #232]	@ (8008f10 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8008e26:	601a      	str	r2, [r3, #0]
    addressDef++;
 8008e28:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8008e32:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008e36:	4a37      	ldr	r2, [pc, #220]	@ (8008f14 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8008e38:	601a      	str	r2, [r3, #0]
    addressDef++;
 8008e3a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008e3e:	3304      	adds	r3, #4
 8008e40:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8008e44:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008e48:	4a33      	ldr	r2, [pc, #204]	@ (8008f18 <JPEG_Set_HuffAC_Mem+0x200>)
 8008e4a:	601a      	str	r2, [r3, #0]
    addressDef++;
 8008e4c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008e50:	3304      	adds	r3, #4
 8008e52:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8008e56:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008e5a:	4a30      	ldr	r2, [pc, #192]	@ (8008f1c <JPEG_Set_HuffAC_Mem+0x204>)
 8008e5c:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8008e5e:	23a2      	movs	r3, #162	@ 0xa2
 8008e60:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8008e64:	e049      	b.n	8008efa <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8008e66:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8008e70:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8008e74:	3b04      	subs	r3, #4
 8008e76:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008e7a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008e7e:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8008e82:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008e86:	4413      	add	r3, r2
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	021b      	lsls	r3, r3, #8
 8008e8c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008e90:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008e94:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8008e98:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008e9c:	3328      	adds	r3, #40	@ 0x28
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	440b      	add	r3, r1
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8008eac:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008eb6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008eba:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8008ebe:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008ec2:	4413      	add	r3, r2
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	021b      	lsls	r3, r3, #8
 8008ec8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008ecc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008ed0:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8008ed4:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008ed8:	3328      	adds	r3, #40	@ 0x28
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	440b      	add	r3, r1
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8008ee8:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8008eec:	041a      	lsls	r2, r3, #16
 8008eee:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8008ef2:	431a      	orrs	r2, r3
 8008ef4:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8008ef8:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8008efa:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d8b1      	bhi.n	8008e66 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	0fd10fd0 	.word	0x0fd10fd0
 8008f14:	0fd30fd2 	.word	0x0fd30fd2
 8008f18:	0fd50fd4 	.word	0x0fd50fd4
 8008f1c:	0fd70fd6 	.word	0x0fd70fd6

08008f20 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f84d 	bl	8008fc8 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8008f36:	461a      	mov	r2, r3
 8008f38:	491f      	ldr	r1, [pc, #124]	@ (8008fb8 <JPEG_Set_HuffEnc_Mem+0x98>)
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7ff feec 	bl	8008d18 <JPEG_Set_HuffAC_Mem>
 8008f40:	4603      	mov	r3, r0
 8008f42:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8008f44:	7bfb      	ldrb	r3, [r7, #15]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d001      	beq.n	8008f4e <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8008f4a:	7bfb      	ldrb	r3, [r7, #15]
 8008f4c:	e030      	b.n	8008fb0 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8008f56:	461a      	mov	r2, r3
 8008f58:	4918      	ldr	r1, [pc, #96]	@ (8008fbc <JPEG_Set_HuffEnc_Mem+0x9c>)
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7ff fedc 	bl	8008d18 <JPEG_Set_HuffAC_Mem>
 8008f60:	4603      	mov	r3, r0
 8008f62:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d001      	beq.n	8008f6e <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
 8008f6c:	e020      	b.n	8008fb0 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8008f76:	461a      	mov	r2, r3
 8008f78:	4911      	ldr	r1, [pc, #68]	@ (8008fc0 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7ff fe49 	bl	8008c12 <JPEG_Set_HuffDC_Mem>
 8008f80:	4603      	mov	r3, r0
 8008f82:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d001      	beq.n	8008f8e <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
 8008f8c:	e010      	b.n	8008fb0 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8008f96:	461a      	mov	r2, r3
 8008f98:	490a      	ldr	r1, [pc, #40]	@ (8008fc4 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7ff fe39 	bl	8008c12 <JPEG_Set_HuffDC_Mem>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8008faa:	7bfb      	ldrb	r3, [r7, #15]
 8008fac:	e000      	b.n	8008fb0 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	08016178 	.word	0x08016178
 8008fbc:	0801622c 	.word	0x0801622c
 8008fc0:	08016140 	.word	0x08016140
 8008fc4:	0801615c 	.word	0x0801615c

08008fc8 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b08b      	sub	sp, #44	@ 0x2c
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8008fd0:	4b80      	ldr	r3, [pc, #512]	@ (80091d4 <JPEG_Set_Huff_DHTMem+0x20c>)
 8008fd2:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8008fd4:	4b80      	ldr	r3, [pc, #512]	@ (80091d8 <JPEG_Set_Huff_DHTMem+0x210>)
 8008fd6:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8008fd8:	4b80      	ldr	r3, [pc, #512]	@ (80091dc <JPEG_Set_Huff_DHTMem+0x214>)
 8008fda:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8008fdc:	4b80      	ldr	r3, [pc, #512]	@ (80091e0 <JPEG_Set_Huff_DHTMem+0x218>)
 8008fde:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8008fe8:	330c      	adds	r3, #12
 8008fea:	623b      	str	r3, [r7, #32]
  index = 16;
 8008fec:	2310      	movs	r3, #16
 8008fee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8008ff0:	e01d      	b.n	800902e <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	5cd3      	ldrb	r3, [r2, r3]
 8008ffa:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffe:	3b02      	subs	r3, #2
 8009000:	6979      	ldr	r1, [r7, #20]
 8009002:	5ccb      	ldrb	r3, [r1, r3]
 8009004:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009006:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8009008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800900a:	3b03      	subs	r3, #3
 800900c:	6979      	ldr	r1, [r7, #20]
 800900e:	5ccb      	ldrb	r3, [r1, r3]
 8009010:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009012:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8009014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009016:	3a04      	subs	r2, #4
 8009018:	6979      	ldr	r1, [r7, #20]
 800901a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800901c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800901e:	6a3b      	ldr	r3, [r7, #32]
 8009020:	601a      	str	r2, [r3, #0]
    address--;
 8009022:	6a3b      	ldr	r3, [r7, #32]
 8009024:	3b04      	subs	r3, #4
 8009026:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902a:	3b04      	subs	r3, #4
 800902c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800902e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009030:	2b03      	cmp	r3, #3
 8009032:	d8de      	bhi.n	8008ff2 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800903c:	3318      	adds	r3, #24
 800903e:	623b      	str	r3, [r7, #32]
  index = 12;
 8009040:	230c      	movs	r3, #12
 8009042:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009044:	e021      	b.n	800908a <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009048:	3b01      	subs	r3, #1
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	4413      	add	r3, r2
 800904e:	7c1b      	ldrb	r3, [r3, #16]
 8009050:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8009052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009054:	3b02      	subs	r3, #2
 8009056:	6979      	ldr	r1, [r7, #20]
 8009058:	440b      	add	r3, r1
 800905a:	7c1b      	ldrb	r3, [r3, #16]
 800905c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800905e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009062:	3b03      	subs	r3, #3
 8009064:	6979      	ldr	r1, [r7, #20]
 8009066:	440b      	add	r3, r1
 8009068:	7c1b      	ldrb	r3, [r3, #16]
 800906a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800906c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800906e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009070:	3a04      	subs	r2, #4
 8009072:	6979      	ldr	r1, [r7, #20]
 8009074:	440a      	add	r2, r1
 8009076:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009078:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800907a:	6a3b      	ldr	r3, [r7, #32]
 800907c:	601a      	str	r2, [r3, #0]
    address--;
 800907e:	6a3b      	ldr	r3, [r7, #32]
 8009080:	3b04      	subs	r3, #4
 8009082:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009086:	3b04      	subs	r3, #4
 8009088:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800908a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908c:	2b03      	cmp	r3, #3
 800908e:	d8da      	bhi.n	8009046 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009098:	3328      	adds	r3, #40	@ 0x28
 800909a:	623b      	str	r3, [r7, #32]
  index = 16;
 800909c:	2310      	movs	r3, #16
 800909e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80090a0:	e01d      	b.n	80090de <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80090a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a4:	3b01      	subs	r3, #1
 80090a6:	69fa      	ldr	r2, [r7, #28]
 80090a8:	5cd3      	ldrb	r3, [r2, r3]
 80090aa:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80090ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ae:	3b02      	subs	r3, #2
 80090b0:	69f9      	ldr	r1, [r7, #28]
 80090b2:	5ccb      	ldrb	r3, [r1, r3]
 80090b4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80090b6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80090b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ba:	3b03      	subs	r3, #3
 80090bc:	69f9      	ldr	r1, [r7, #28]
 80090be:	5ccb      	ldrb	r3, [r1, r3]
 80090c0:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80090c2:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 80090c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090c6:	3a04      	subs	r2, #4
 80090c8:	69f9      	ldr	r1, [r7, #28]
 80090ca:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80090cc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80090ce:	6a3b      	ldr	r3, [r7, #32]
 80090d0:	601a      	str	r2, [r3, #0]
    address--;
 80090d2:	6a3b      	ldr	r3, [r7, #32]
 80090d4:	3b04      	subs	r3, #4
 80090d6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80090d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090da:	3b04      	subs	r3, #4
 80090dc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80090de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e0:	2b03      	cmp	r3, #3
 80090e2:	d8de      	bhi.n	80090a2 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80090ec:	33cc      	adds	r3, #204	@ 0xcc
 80090ee:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80090f0:	6a3b      	ldr	r3, [r7, #32]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	4b3b      	ldr	r3, [pc, #236]	@ (80091e4 <JPEG_Set_Huff_DHTMem+0x21c>)
 80090f6:	4013      	ands	r3, r2
 80090f8:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8009100:	021a      	lsls	r2, r3, #8
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	4313      	orrs	r3, r2
 8009106:	69fa      	ldr	r2, [r7, #28]
 8009108:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 800910c:	4313      	orrs	r3, r2
 800910e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009110:	6a3b      	ldr	r3, [r7, #32]
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8009116:	6a3b      	ldr	r3, [r7, #32]
 8009118:	3b04      	subs	r3, #4
 800911a:	623b      	str	r3, [r7, #32]
  index = 160;
 800911c:	23a0      	movs	r3, #160	@ 0xa0
 800911e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009120:	e021      	b.n	8009166 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009124:	3b01      	subs	r3, #1
 8009126:	69fa      	ldr	r2, [r7, #28]
 8009128:	4413      	add	r3, r2
 800912a:	7c1b      	ldrb	r3, [r3, #16]
 800912c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800912e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009130:	3b02      	subs	r3, #2
 8009132:	69f9      	ldr	r1, [r7, #28]
 8009134:	440b      	add	r3, r1
 8009136:	7c1b      	ldrb	r3, [r3, #16]
 8009138:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800913a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800913c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913e:	3b03      	subs	r3, #3
 8009140:	69f9      	ldr	r1, [r7, #28]
 8009142:	440b      	add	r3, r1
 8009144:	7c1b      	ldrb	r3, [r3, #16]
 8009146:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8009148:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800914a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800914c:	3a04      	subs	r2, #4
 800914e:	69f9      	ldr	r1, [r7, #28]
 8009150:	440a      	add	r2, r1
 8009152:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009154:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009156:	6a3b      	ldr	r3, [r7, #32]
 8009158:	601a      	str	r2, [r3, #0]
    address--;
 800915a:	6a3b      	ldr	r3, [r7, #32]
 800915c:	3b04      	subs	r3, #4
 800915e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009162:	3b04      	subs	r3, #4
 8009164:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009168:	2b03      	cmp	r3, #3
 800916a:	d8da      	bhi.n	8009122 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009174:	33cc      	adds	r3, #204	@ 0xcc
 8009176:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8009178:	6a3b      	ldr	r3, [r7, #32]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	b29b      	uxth	r3, r3
 800917e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	785b      	ldrb	r3, [r3, #1]
 8009184:	061a      	lsls	r2, r3, #24
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	431a      	orrs	r2, r3
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	041b      	lsls	r3, r3, #16
 8009190:	4313      	orrs	r3, r2
 8009192:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009194:	6a3b      	ldr	r3, [r7, #32]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80091a2:	33dc      	adds	r3, #220	@ 0xdc
 80091a4:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80091a6:	6a3b      	ldr	r3, [r7, #32]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	4b0e      	ldr	r3, [pc, #56]	@ (80091e4 <JPEG_Set_Huff_DHTMem+0x21c>)
 80091ac:	4013      	ands	r3, r2
 80091ae:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	7bdb      	ldrb	r3, [r3, #15]
 80091b4:	021a      	lsls	r2, r3, #8
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	4313      	orrs	r3, r2
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	7b92      	ldrb	r2, [r2, #14]
 80091be:	4313      	orrs	r3, r2
 80091c0:	60fb      	str	r3, [r7, #12]
  *address = value;
 80091c2:	6a3b      	ldr	r3, [r7, #32]
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 80091c8:	6a3b      	ldr	r3, [r7, #32]
 80091ca:	3b04      	subs	r3, #4
 80091cc:	623b      	str	r3, [r7, #32]
  index = 12;
 80091ce:	230c      	movs	r3, #12
 80091d0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80091d2:	e027      	b.n	8009224 <JPEG_Set_Huff_DHTMem+0x25c>
 80091d4:	08016178 	.word	0x08016178
 80091d8:	0801622c 	.word	0x0801622c
 80091dc:	08016140 	.word	0x08016140
 80091e0:	0801615c 	.word	0x0801615c
 80091e4:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80091e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ea:	3301      	adds	r3, #1
 80091ec:	693a      	ldr	r2, [r7, #16]
 80091ee:	5cd3      	ldrb	r3, [r2, r3]
 80091f0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80091f2:	6939      	ldr	r1, [r7, #16]
 80091f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f6:	440b      	add	r3, r1
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80091fc:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80091fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009200:	3b01      	subs	r3, #1
 8009202:	6939      	ldr	r1, [r7, #16]
 8009204:	5ccb      	ldrb	r3, [r1, r3]
 8009206:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8009208:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800920a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800920c:	3a02      	subs	r2, #2
 800920e:	6939      	ldr	r1, [r7, #16]
 8009210:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8009212:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	601a      	str	r2, [r3, #0]
    address--;
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	3b04      	subs	r3, #4
 800921c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800921e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009220:	3b04      	subs	r3, #4
 8009222:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009226:	2b03      	cmp	r3, #3
 8009228:	d8de      	bhi.n	80091e8 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009232:	33dc      	adds	r3, #220	@ 0xdc
 8009234:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8009236:	6a3b      	ldr	r3, [r7, #32]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	b29b      	uxth	r3, r3
 800923c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	7c5b      	ldrb	r3, [r3, #17]
 8009242:	061a      	lsls	r2, r3, #24
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	431a      	orrs	r2, r3
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	7c1b      	ldrb	r3, [r3, #16]
 800924c:	041b      	lsls	r3, r3, #16
 800924e:	4313      	orrs	r3, r2
 8009250:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8009252:	6a3b      	ldr	r3, [r7, #32]
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009260:	33e8      	adds	r3, #232	@ 0xe8
 8009262:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8009264:	6a3b      	ldr	r3, [r7, #32]
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	4b6d      	ldr	r3, [pc, #436]	@ (8009420 <JPEG_Set_Huff_DHTMem+0x458>)
 800926a:	4013      	ands	r3, r2
 800926c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	7edb      	ldrb	r3, [r3, #27]
 8009272:	021a      	lsls	r2, r3, #8
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	4313      	orrs	r3, r2
 8009278:	693a      	ldr	r2, [r7, #16]
 800927a:	7e92      	ldrb	r2, [r2, #26]
 800927c:	4313      	orrs	r3, r2
 800927e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009280:	6a3b      	ldr	r3, [r7, #32]
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8009286:	6a3b      	ldr	r3, [r7, #32]
 8009288:	3b04      	subs	r3, #4
 800928a:	623b      	str	r3, [r7, #32]
  index = 8;
 800928c:	2308      	movs	r3, #8
 800928e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009290:	e021      	b.n	80092d6 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009294:	3301      	adds	r3, #1
 8009296:	693a      	ldr	r2, [r7, #16]
 8009298:	4413      	add	r3, r2
 800929a:	7c1b      	ldrb	r3, [r3, #16]
 800929c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800929e:	6939      	ldr	r1, [r7, #16]
 80092a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a2:	440b      	add	r3, r1
 80092a4:	3310      	adds	r3, #16
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80092aa:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80092ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ae:	3b01      	subs	r3, #1
 80092b0:	6939      	ldr	r1, [r7, #16]
 80092b2:	440b      	add	r3, r1
 80092b4:	7c1b      	ldrb	r3, [r3, #16]
 80092b6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80092b8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 80092ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092bc:	3a02      	subs	r2, #2
 80092be:	6939      	ldr	r1, [r7, #16]
 80092c0:	440a      	add	r2, r1
 80092c2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80092c4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80092c6:	6a3b      	ldr	r3, [r7, #32]
 80092c8:	601a      	str	r2, [r3, #0]
    address--;
 80092ca:	6a3b      	ldr	r3, [r7, #32]
 80092cc:	3b04      	subs	r3, #4
 80092ce:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80092d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d2:	3b04      	subs	r3, #4
 80092d4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80092d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d8:	2b03      	cmp	r3, #3
 80092da:	d8da      	bhi.n	8009292 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80092e4:	33e8      	adds	r3, #232	@ 0xe8
 80092e6:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 80092e8:	6a3b      	ldr	r3, [r7, #32]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	785b      	ldrb	r3, [r3, #1]
 80092f4:	061a      	lsls	r2, r3, #24
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	431a      	orrs	r2, r3
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	041b      	lsls	r3, r3, #16
 8009300:	4313      	orrs	r3, r2
 8009302:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009304:	6a3b      	ldr	r3, [r7, #32]
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009312:	33f8      	adds	r3, #248	@ 0xf8
 8009314:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8009316:	6a3b      	ldr	r3, [r7, #32]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	4b41      	ldr	r3, [pc, #260]	@ (8009420 <JPEG_Set_Huff_DHTMem+0x458>)
 800931c:	4013      	ands	r3, r2
 800931e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	7bdb      	ldrb	r3, [r3, #15]
 8009324:	021a      	lsls	r2, r3, #8
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	4313      	orrs	r3, r2
 800932a:	69ba      	ldr	r2, [r7, #24]
 800932c:	7b92      	ldrb	r2, [r2, #14]
 800932e:	4313      	orrs	r3, r2
 8009330:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009332:	6a3b      	ldr	r3, [r7, #32]
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	3b04      	subs	r3, #4
 800933c:	623b      	str	r3, [r7, #32]
  index = 12;
 800933e:	230c      	movs	r3, #12
 8009340:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009342:	e01d      	b.n	8009380 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009346:	3301      	adds	r3, #1
 8009348:	69ba      	ldr	r2, [r7, #24]
 800934a:	5cd3      	ldrb	r3, [r2, r3]
 800934c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800934e:	69b9      	ldr	r1, [r7, #24]
 8009350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009352:	440b      	add	r3, r1
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009358:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800935a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935c:	3b01      	subs	r3, #1
 800935e:	69b9      	ldr	r1, [r7, #24]
 8009360:	5ccb      	ldrb	r3, [r1, r3]
 8009362:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8009364:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8009366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009368:	3a02      	subs	r2, #2
 800936a:	69b9      	ldr	r1, [r7, #24]
 800936c:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800936e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009370:	6a3b      	ldr	r3, [r7, #32]
 8009372:	601a      	str	r2, [r3, #0]
    address--;
 8009374:	6a3b      	ldr	r3, [r7, #32]
 8009376:	3b04      	subs	r3, #4
 8009378:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800937a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937c:	3b04      	subs	r3, #4
 800937e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009382:	2b03      	cmp	r3, #3
 8009384:	d8de      	bhi.n	8009344 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800938e:	33f8      	adds	r3, #248	@ 0xf8
 8009390:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8009392:	6a3b      	ldr	r3, [r7, #32]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	b29b      	uxth	r3, r3
 8009398:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	7c5b      	ldrb	r3, [r3, #17]
 800939e:	061a      	lsls	r2, r3, #24
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	431a      	orrs	r2, r3
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	7c1b      	ldrb	r3, [r3, #16]
 80093a8:	041b      	lsls	r3, r3, #16
 80093aa:	4313      	orrs	r3, r2
 80093ac:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80093ae:	6a3b      	ldr	r3, [r7, #32]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80093bc:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 80093c0:	623b      	str	r3, [r7, #32]
  index = 160;
 80093c2:	23a0      	movs	r3, #160	@ 0xa0
 80093c4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80093c6:	e021      	b.n	800940c <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80093c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ca:	3301      	adds	r3, #1
 80093cc:	69ba      	ldr	r2, [r7, #24]
 80093ce:	4413      	add	r3, r2
 80093d0:	7c1b      	ldrb	r3, [r3, #16]
 80093d2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80093d4:	69b9      	ldr	r1, [r7, #24]
 80093d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d8:	440b      	add	r3, r1
 80093da:	3310      	adds	r3, #16
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80093e0:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80093e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e4:	3b01      	subs	r3, #1
 80093e6:	69b9      	ldr	r1, [r7, #24]
 80093e8:	440b      	add	r3, r1
 80093ea:	7c1b      	ldrb	r3, [r3, #16]
 80093ec:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80093ee:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 80093f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093f2:	3a02      	subs	r2, #2
 80093f4:	69b9      	ldr	r1, [r7, #24]
 80093f6:	440a      	add	r2, r1
 80093f8:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80093fa:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80093fc:	6a3b      	ldr	r3, [r7, #32]
 80093fe:	601a      	str	r2, [r3, #0]
    address--;
 8009400:	6a3b      	ldr	r3, [r7, #32]
 8009402:	3b04      	subs	r3, #4
 8009404:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009408:	3b04      	subs	r3, #4
 800940a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800940c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940e:	2b03      	cmp	r3, #3
 8009410:	d8da      	bhi.n	80093c8 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8009412:	bf00      	nop
 8009414:	bf00      	nop
 8009416:	372c      	adds	r7, #44	@ 0x2c
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr
 8009420:	ffff0000 	.word	0xffff0000

08009424 <JPEG_Set_Quantization_Mem>:
  *         it could be QMEM0, QMEM1, QMEM2 or QMEM3
  * @retval 0 if no error, 1 if error
  */
static uint32_t JPEG_Set_Quantization_Mem(JPEG_HandleTypeDef *hjpeg, uint8_t *QTable,
                                                    __IO uint32_t *QTableAddress)
{
 8009424:	b480      	push	{r7}
 8009426:	b08b      	sub	sp, #44	@ 0x2c
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
  uint32_t quantRow;
  uint32_t quantVal;
  uint32_t ScaleFactor;
  __IO uint32_t *tableAddress;

  tableAddress = QTableAddress;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	613b      	str	r3, [r7, #16]

  if ((hjpeg->Conf.ImageQuality >= 50UL) && (hjpeg->Conf.ImageQuality <= 100UL))
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	695b      	ldr	r3, [r3, #20]
 8009438:	2b31      	cmp	r3, #49	@ 0x31
 800943a:	d90a      	bls.n	8009452 <JPEG_Set_Quantization_Mem+0x2e>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	695b      	ldr	r3, [r3, #20]
 8009440:	2b64      	cmp	r3, #100	@ 0x64
 8009442:	d806      	bhi.n	8009452 <JPEG_Set_Quantization_Mem+0x2e>
  {
    ScaleFactor = 200UL - (hjpeg->Conf.ImageQuality * 2UL);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	695b      	ldr	r3, [r3, #20]
 8009448:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800944c:	005b      	lsls	r3, r3, #1
 800944e:	617b      	str	r3, [r7, #20]
 8009450:	e00d      	b.n	800946e <JPEG_Set_Quantization_Mem+0x4a>
  }
  else if (hjpeg->Conf.ImageQuality > 0UL)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d007      	beq.n	800946a <JPEG_Set_Quantization_Mem+0x46>
  {
    ScaleFactor = ((uint32_t) 5000) / ((uint32_t) hjpeg->Conf.ImageQuality);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	695b      	ldr	r3, [r3, #20]
 800945e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009462:	fbb2 f3f3 	udiv	r3, r2, r3
 8009466:	617b      	str	r3, [r7, #20]
 8009468:	e001      	b.n	800946e <JPEG_Set_Quantization_Mem+0x4a>
  }
  else
  {
    return 1UL;
 800946a:	2301      	movs	r3, #1
 800946c:	e041      	b.n	80094f2 <JPEG_Set_Quantization_Mem+0xce>
  }

  /*Quantization_table = (Standard_quanization_table * ScaleFactor + 50) / 100*/
  i = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	627b      	str	r3, [r7, #36]	@ 0x24
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8009472:	e03a      	b.n	80094ea <JPEG_Set_Quantization_Mem+0xc6>
  {
    quantRow = 0;
 8009474:	2300      	movs	r3, #0
 8009476:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < 4UL; j++)
 8009478:	2300      	movs	r3, #0
 800947a:	623b      	str	r3, [r7, #32]
 800947c:	e029      	b.n	80094d2 <JPEG_Set_Quantization_Mem+0xae>
    {
      /* Note that the quantization coefficients must be specified in the table in zigzag order */
      quantVal = ((((uint32_t) QTable[JPEG_ZIGZAG_ORDER[i + j]]) * ScaleFactor) + 50UL) / 100UL;
 800947e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009480:	6a3b      	ldr	r3, [r7, #32]
 8009482:	4413      	add	r3, r2
 8009484:	4a1e      	ldr	r2, [pc, #120]	@ (8009500 <JPEG_Set_Quantization_Mem+0xdc>)
 8009486:	5cd3      	ldrb	r3, [r2, r3]
 8009488:	461a      	mov	r2, r3
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	4413      	add	r3, r2
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	461a      	mov	r2, r3
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	fb02 f303 	mul.w	r3, r2, r3
 8009498:	3332      	adds	r3, #50	@ 0x32
 800949a:	4a1a      	ldr	r2, [pc, #104]	@ (8009504 <JPEG_Set_Quantization_Mem+0xe0>)
 800949c:	fba2 2303 	umull	r2, r3, r2, r3
 80094a0:	095b      	lsrs	r3, r3, #5
 80094a2:	61bb      	str	r3, [r7, #24]

      if (quantVal == 0UL)
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d102      	bne.n	80094b0 <JPEG_Set_Quantization_Mem+0x8c>
      {
        quantVal = 1UL;
 80094aa:	2301      	movs	r3, #1
 80094ac:	61bb      	str	r3, [r7, #24]
 80094ae:	e004      	b.n	80094ba <JPEG_Set_Quantization_Mem+0x96>
      }
      else if (quantVal > 255UL)
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	2bff      	cmp	r3, #255	@ 0xff
 80094b4:	d901      	bls.n	80094ba <JPEG_Set_Quantization_Mem+0x96>
      {
        quantVal = 255UL;
 80094b6:	23ff      	movs	r3, #255	@ 0xff
 80094b8:	61bb      	str	r3, [r7, #24]
      else
      {
        /* Nothing to do, keep same value of quantVal */
      }

      quantRow |= ((quantVal & 0xFFUL) << (8UL * j));
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	6a3b      	ldr	r3, [r7, #32]
 80094c0:	00db      	lsls	r3, r3, #3
 80094c2:	fa02 f303 	lsl.w	r3, r2, r3
 80094c6:	69fa      	ldr	r2, [r7, #28]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < 4UL; j++)
 80094cc:	6a3b      	ldr	r3, [r7, #32]
 80094ce:	3301      	adds	r3, #1
 80094d0:	623b      	str	r3, [r7, #32]
 80094d2:	6a3b      	ldr	r3, [r7, #32]
 80094d4:	2b03      	cmp	r3, #3
 80094d6:	d9d2      	bls.n	800947e <JPEG_Set_Quantization_Mem+0x5a>
    }

    i += 4UL;
 80094d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094da:	3304      	adds	r3, #4
 80094dc:	627b      	str	r3, [r7, #36]	@ 0x24
    *tableAddress = quantRow;
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	69fa      	ldr	r2, [r7, #28]
 80094e2:	601a      	str	r2, [r3, #0]
    tableAddress ++;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	3304      	adds	r3, #4
 80094e8:	613b      	str	r3, [r7, #16]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80094ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ec:	2b3c      	cmp	r3, #60	@ 0x3c
 80094ee:	d9c1      	bls.n	8009474 <JPEG_Set_Quantization_Mem+0x50>
  }

  /* Return function status */
  return 0UL;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	372c      	adds	r7, #44	@ 0x2c
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	080162e0 	.word	0x080162e0
 8009504:	51eb851f 	.word	0x51eb851f

08009508 <JPEG_SetColorYCBCR>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorYCBCR(JPEG_HandleTypeDef *hjpeg)
{
 8009508:	b480      	push	{r7}
 800950a:	b087      	sub	sp, #28
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  uint32_t ySamplingH;
  uint32_t ySamplingV;
  uint32_t yblockNb;

  /*Set Number of color components to 3*/
  hjpeg->Instance->CONFR1 &=  ~JPEG_CONFR1_NF;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	685a      	ldr	r2, [r3, #4]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f022 0203 	bic.w	r2, r2, #3
 800951e:	605a      	str	r2, [r3, #4]
  hjpeg->Instance->CONFR1 |=  JPEG_CONFR1_NF_1;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	685a      	ldr	r2, [r3, #4]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f042 0202 	orr.w	r2, r2, #2
 800952e:	605a      	str	r2, [r3, #4]

  /* compute MCU block size and Y, Cb ,Cr sampling factors*/
  if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d108      	bne.n	800954a <JPEG_SetColorYCBCR+0x42>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 8009538:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800953c:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_1;   /* Vs = 2*/
 800953e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009542:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x30; /* 4 blocks of 8x8*/
 8009544:	2330      	movs	r3, #48	@ 0x30
 8009546:	60fb      	str	r3, [r7, #12]
 8009548:	e014      	b.n	8009574 <JPEG_SetColorYCBCR+0x6c>
  }
  else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	2b02      	cmp	r3, #2
 8009550:	d108      	bne.n	8009564 <JPEG_SetColorYCBCR+0x5c>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 8009552:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009556:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 8009558:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800955c:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x10; /* 2 blocks of 8x8*/
 800955e:	2310      	movs	r3, #16
 8009560:	60fb      	str	r3, [r7, #12]
 8009562:	e007      	b.n	8009574 <JPEG_SetColorYCBCR+0x6c>
  }
  else /*JPEG_444_SUBSAMPLING and default*/
  {
    ySamplingH  = JPEG_CONFR4_HSF_0;   /* Hs = 1*/
 8009564:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009568:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 800956a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800956e:	613b      	str	r3, [r7, #16]

    yblockNb  = 0; /* 1 block of 8x8*/
 8009570:	2300      	movs	r3, #0
 8009572:	60fb      	str	r3, [r7, #12]
  }

  hjpeg->Instance->CONFR1 &= ~(JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	685a      	ldr	r2, [r3, #4]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f022 02c3 	bic.w	r2, r2, #195	@ 0xc3
 8009582:	605a      	str	r2, [r3, #4]
  hjpeg->Instance->CONFR1 |= (JPEG_CONFR1_NF_1 | JPEG_CONFR1_NS_1);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	685a      	ldr	r2, [r3, #4]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f042 0282 	orr.w	r2, r2, #130	@ 0x82
 8009592:	605a      	str	r2, [r3, #4]

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2200      	movs	r2, #0
 800959a:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |= (ySamplingH | ySamplingV | (yblockNb & JPEG_CONFR4_NB));
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6919      	ldr	r1, [r3, #16]
 80095a2:	697a      	ldr	r2, [r7, #20]
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	431a      	orrs	r2, r3
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80095ae:	431a      	orrs	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	430a      	orrs	r2, r1
 80095b6:	611a      	str	r2, [r3, #16]

  /*Reset CONFR5 register*/
  hjpeg->Instance->CONFR5 =  0;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2200      	movs	r2, #0
 80095be:	615a      	str	r2, [r3, #20]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 1*/
  hjpeg->Instance->CONFR5 |= (JPEG_CONFR5_HSF_0 | JPEG_CONFR5_VSF_0 | JPEG_CONFR5_QT_0 | JPEG_CONFR5_HA | JPEG_CONFR5_HD);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	6959      	ldr	r1, [r3, #20]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	f241 1307 	movw	r3, #4359	@ 0x1107
 80095ce:	430b      	orrs	r3, r1
 80095d0:	6153      	str	r3, [r2, #20]

  /*Reset CONFR6 register*/
  hjpeg->Instance->CONFR6 =  0;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2200      	movs	r2, #0
 80095d8:	619a      	str	r2, [r3, #24]
  /*Set Horizental and Vertical  sampling factor and number of blocks for component 2*/
  /* In YCBCR , by default, both chrominance components (component 1 and component 2) use the same Quantization table (table 1) */
  /* In YCBCR , both chrominance components (component 1 and component 2) use the same Huffman tables (table 1) */
  hjpeg->Instance->CONFR6 |= (JPEG_CONFR6_HSF_0 | JPEG_CONFR6_VSF_0 | JPEG_CONFR6_QT_0 | JPEG_CONFR6_HA | JPEG_CONFR6_HD);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	6999      	ldr	r1, [r3, #24]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	f241 1307 	movw	r3, #4359	@ 0x1107
 80095e8:	430b      	orrs	r3, r1
 80095ea:	6193      	str	r3, [r2, #24]

}
 80095ec:	bf00      	nop
 80095ee:	371c      	adds	r7, #28
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <JPEG_SetColorGrayScale>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorGrayScale(JPEG_HandleTypeDef *hjpeg)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  /*Set Number of color components to 1*/
  hjpeg->Instance->CONFR1 &= ~(JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f022 02c3 	bic.w	r2, r2, #195	@ 0xc3
 800960e:	605a      	str	r2, [r3, #4]

  /*in GrayScale use 1 single Quantization table (Table 0)*/
  /*in GrayScale use only one couple of AC/DC huffman table (table 0)*/

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2200      	movs	r2, #0
 8009616:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |=  JPEG_CONFR4_HSF_0 | JPEG_CONFR4_VSF_0 ;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	691a      	ldr	r2, [r3, #16]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8009626:	611a      	str	r2, [r3, #16]
}
 8009628:	bf00      	nop
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <JPEG_SetColorCMYK>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorCMYK(JPEG_HandleTypeDef *hjpeg)
{
 8009634:	b480      	push	{r7}
 8009636:	b087      	sub	sp, #28
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  uint32_t ySamplingH;
  uint32_t ySamplingV;
  uint32_t yblockNb;

  /*Set Number of color components to 4*/
  hjpeg->Instance->CONFR1 |= (JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	685a      	ldr	r2, [r3, #4]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f042 02c3 	orr.w	r2, r2, #195	@ 0xc3
 800964a:	605a      	str	r2, [r3, #4]

  /* compute MCU block size and Y, Cb ,Cr sampling factors*/
  if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d108      	bne.n	8009666 <JPEG_SetColorCMYK+0x32>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 8009654:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009658:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_1;   /* Vs = 2*/
 800965a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800965e:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x30; /* 4 blocks of 8x8*/
 8009660:	2330      	movs	r3, #48	@ 0x30
 8009662:	60fb      	str	r3, [r7, #12]
 8009664:	e014      	b.n	8009690 <JPEG_SetColorCMYK+0x5c>
  }
  else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	2b02      	cmp	r3, #2
 800966c:	d108      	bne.n	8009680 <JPEG_SetColorCMYK+0x4c>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 800966e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009672:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 8009674:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009678:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x10; /* 2 blocks of 8x8*/
 800967a:	2310      	movs	r3, #16
 800967c:	60fb      	str	r3, [r7, #12]
 800967e:	e007      	b.n	8009690 <JPEG_SetColorCMYK+0x5c>
  }
  else /*JPEG_444_SUBSAMPLING and default*/
  {
    ySamplingH  = JPEG_CONFR4_HSF_0;   /* Hs = 1*/
 8009680:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009684:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 8009686:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800968a:	613b      	str	r3, [r7, #16]

    yblockNb  = 0; /* 1 block of 8x8*/
 800968c:	2300      	movs	r3, #0
 800968e:	60fb      	str	r3, [r7, #12]
  }

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2200      	movs	r2, #0
 8009696:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |= (ySamplingH | ySamplingV | (yblockNb & JPEG_CONFR4_NB));
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	6919      	ldr	r1, [r3, #16]
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	431a      	orrs	r2, r3
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80096aa:	431a      	orrs	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	430a      	orrs	r2, r1
 80096b2:	611a      	str	r2, [r3, #16]

  /*Reset CONFR5 register*/
  hjpeg->Instance->CONFR5 =  0;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2200      	movs	r2, #0
 80096ba:	615a      	str	r2, [r3, #20]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 1*/
  hjpeg->Instance->CONFR5 |= (JPEG_CONFR5_HSF_0 | JPEG_CONFR5_VSF_0);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	695a      	ldr	r2, [r3, #20]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 80096ca:	615a      	str	r2, [r3, #20]

  /*Reset CONFR6 register*/
  hjpeg->Instance->CONFR6 =  0;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2200      	movs	r2, #0
 80096d2:	619a      	str	r2, [r3, #24]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 2*/
  hjpeg->Instance->CONFR6 |= (JPEG_CONFR6_HSF_0 | JPEG_CONFR6_VSF_0);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	699a      	ldr	r2, [r3, #24]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 80096e2:	619a      	str	r2, [r3, #24]

  /*Reset CONFR7 register*/
  hjpeg->Instance->CONFR7 =  0;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2200      	movs	r2, #0
 80096ea:	61da      	str	r2, [r3, #28]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 3*/
  hjpeg->Instance->CONFR7 |= (JPEG_CONFR7_HSF_0 | JPEG_CONFR7_VSF_0);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	69da      	ldr	r2, [r3, #28]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 80096fa:	61da      	str	r2, [r3, #28]
}
 80096fc:	bf00      	nop
 80096fe:	371c      	adds	r7, #28
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009714:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009720:	f003 0303 	and.w	r3, r3, #3
 8009724:	2b02      	cmp	r3, #2
 8009726:	d108      	bne.n	800973a <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f042 0208 	orr.w	r2, r2, #8
 8009736:	605a      	str	r2, [r3, #4]
 8009738:	e007      	b.n	800974a <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	685a      	ldr	r2, [r3, #4]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f022 0208 	bic.w	r2, r2, #8
 8009748:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f022 0201 	bic.w	r2, r2, #1
 8009758:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009768:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009778:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009788:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009798:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f042 0201 	orr.w	r2, r2, #1
 80097a8:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097ae:	f003 030c 	and.w	r3, r3, #12
 80097b2:	2b08      	cmp	r3, #8
 80097b4:	d108      	bne.n	80097c8 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 80097c4:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 80097c6:	e00d      	b.n	80097e4 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097cc:	f003 030c 	and.w	r3, r3, #12
 80097d0:	2b0c      	cmp	r3, #12
 80097d2:	d107      	bne.n	80097e4 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80097e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097fc:	f003 0303 	and.w	r3, r3, #3
 8009800:	2b02      	cmp	r3, #2
 8009802:	d125      	bne.n	8009850 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800980a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800980e:	2b00      	cmp	r3, #0
 8009810:	d01e      	beq.n	8009850 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	3304      	adds	r3, #4
 8009816:	4619      	mov	r1, r3
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f7fe feac 	bl	8008576 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	3304      	adds	r3, #4
 8009828:	4619      	mov	r1, r3
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7ff f824 	bl	8008878 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800983e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800984e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009854:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009858:	2b00      	cmp	r3, #0
 800985a:	d116      	bne.n	800988a <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009862:	f003 0302 	and.w	r3, r3, #2
 8009866:	2b00      	cmp	r3, #0
 8009868:	d004      	beq.n	8009874 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800986a:	2108      	movs	r1, #8
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 f988 	bl	8009b82 <JPEG_ReadInputData>
 8009872:	e00a      	b.n	800988a <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800987a:	f003 0304 	and.w	r3, r3, #4
 800987e:	2b00      	cmp	r3, #0
 8009880:	d003      	beq.n	800988a <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8009882:	2101      	movs	r1, #1
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f97c 	bl	8009b82 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800988e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009892:	2b00      	cmp	r3, #0
 8009894:	d116      	bne.n	80098c4 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800989c:	f003 0308 	and.w	r3, r3, #8
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d004      	beq.n	80098ae <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80098a4:	2108      	movs	r1, #8
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f864 	bl	8009974 <JPEG_StoreOutputData>
 80098ac:	e00a      	b.n	80098c4 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098b4:	f003 0310 	and.w	r3, r3, #16
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d003      	beq.n	80098c4 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 80098bc:	2101      	movs	r1, #1
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f858 	bl	8009974 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098ce:	2b20      	cmp	r3, #32
 80098d0:	d14b      	bne.n	800996a <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f022 0201 	bic.w	r2, r2, #1
 80098e0:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098e6:	f003 030c 	and.w	r3, r3, #12
 80098ea:	2b08      	cmp	r3, #8
 80098ec:	d107      	bne.n	80098fe <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80098fc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800990c:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00a      	beq.n	800992c <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	69d9      	ldr	r1, [r3, #28]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800991e:	461a      	mov	r2, r3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f7f7 fcb9 	bl	8001298 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009930:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009936:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2201      	movs	r2, #1
 800994a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f003 0303 	and.w	r3, r3, #3
 8009954:	2b02      	cmp	r3, #2
 8009956:	d103      	bne.n	8009960 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f7fe ff98 	bl	800888e <HAL_JPEG_DecodeCpltCallback>
 800995e:	e002      	b.n	8009966 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7f7 fcb5 	bl	80012d0 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8009966:	2301      	movs	r3, #1
 8009968:	e000      	b.n	800996c <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800996a:	2300      	movs	r3, #0
}
 800996c:	4618      	mov	r0, r3
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b086      	sub	sp, #24
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	440b      	add	r3, r1
 800998c:	429a      	cmp	r2, r3
 800998e:	d34b      	bcc.n	8009a28 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8009990:	2300      	movs	r3, #0
 8009992:	617b      	str	r3, [r7, #20]
 8009994:	e031      	b.n	80099fa <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800999c:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	69da      	ldr	r2, [r3, #28]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a6:	4413      	add	r3, r2
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	b2d2      	uxtb	r2, r2
 80099ac:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	0a19      	lsrs	r1, r3, #8
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	69da      	ldr	r2, [r3, #28]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ba:	3301      	adds	r3, #1
 80099bc:	4413      	add	r3, r2
 80099be:	b2ca      	uxtb	r2, r1
 80099c0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	0c19      	lsrs	r1, r3, #16
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	69da      	ldr	r2, [r3, #28]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ce:	3302      	adds	r3, #2
 80099d0:	4413      	add	r3, r2
 80099d2:	b2ca      	uxtb	r2, r1
 80099d4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	0e19      	lsrs	r1, r3, #24
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	69da      	ldr	r2, [r3, #28]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099e2:	3303      	adds	r3, #3
 80099e4:	4413      	add	r3, r2
 80099e6:	b2ca      	uxtb	r2, r1
 80099e8:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ee:	1d1a      	adds	r2, r3, #4
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	3301      	adds	r3, #1
 80099f8:	617b      	str	r3, [r7, #20]
 80099fa:	697a      	ldr	r2, [r7, #20]
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d3c9      	bcc.n	8009996 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	f040 80b5 	bne.w	8009b7a <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	69d9      	ldr	r1, [r3, #28]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a18:	461a      	mov	r2, r3
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7f7 fc3c 	bl	8001298 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 8009a26:	e0a8      	b.n	8009b7a <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a30:	429a      	cmp	r2, r3
 8009a32:	f240 80a2 	bls.w	8009b7a <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	089b      	lsrs	r3, r3, #2
 8009a42:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8009a44:	2300      	movs	r3, #0
 8009a46:	617b      	str	r3, [r7, #20]
 8009a48:	e031      	b.n	8009aae <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a50:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	69da      	ldr	r2, [r3, #28]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a5a:	4413      	add	r3, r2
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	b2d2      	uxtb	r2, r2
 8009a60:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	0a19      	lsrs	r1, r3, #8
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	69da      	ldr	r2, [r3, #28]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a6e:	3301      	adds	r3, #1
 8009a70:	4413      	add	r3, r2
 8009a72:	b2ca      	uxtb	r2, r1
 8009a74:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	0c19      	lsrs	r1, r3, #16
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	69da      	ldr	r2, [r3, #28]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a82:	3302      	adds	r3, #2
 8009a84:	4413      	add	r3, r2
 8009a86:	b2ca      	uxtb	r2, r1
 8009a88:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	0e19      	lsrs	r1, r3, #24
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	69da      	ldr	r2, [r3, #28]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a96:	3303      	adds	r3, #3
 8009a98:	4413      	add	r3, r2
 8009a9a:	b2ca      	uxtb	r2, r1
 8009a9c:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aa2:	1d1a      	adds	r2, r3, #4
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	617b      	str	r3, [r7, #20]
 8009aae:	697a      	ldr	r2, [r7, #20]
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d3c9      	bcc.n	8009a4a <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d10b      	bne.n	8009ada <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	69d9      	ldr	r1, [r3, #28]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aca:	461a      	mov	r2, r3
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f7f7 fbe3 	bl	8001298 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8009ad8:	e04f      	b.n	8009b7a <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae2:	1ad3      	subs	r3, r2, r3
 8009ae4:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aec:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 8009aee:	2300      	movs	r3, #0
 8009af0:	617b      	str	r3, [r7, #20]
 8009af2:	e015      	b.n	8009b20 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	f003 0303 	and.w	r3, r3, #3
 8009afa:	00db      	lsls	r3, r3, #3
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	fa22 f103 	lsr.w	r1, r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	69da      	ldr	r2, [r3, #28]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b0a:	4413      	add	r3, r2
 8009b0c:	b2ca      	uxtb	r2, r1
 8009b0e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b14:	1c5a      	adds	r2, r3, #1
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	617b      	str	r3, [r7, #20]
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d3e5      	bcc.n	8009af4 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	69d9      	ldr	r1, [r3, #28]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b30:	461a      	mov	r2, r3
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f7f7 fbb0 	bl	8001298 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f1c3 0304 	rsb	r3, r3, #4
 8009b44:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	617b      	str	r3, [r7, #20]
 8009b4a:	e013      	b.n	8009b74 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	00db      	lsls	r3, r3, #3
 8009b50:	68ba      	ldr	r2, [r7, #8]
 8009b52:	fa22 f103 	lsr.w	r1, r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	69da      	ldr	r2, [r3, #28]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b5e:	4413      	add	r3, r2
 8009b60:	b2ca      	uxtb	r2, r1
 8009b62:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b68:	1c5a      	adds	r2, r3, #1
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	3301      	adds	r3, #1
 8009b72:	617b      	str	r3, [r7, #20]
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	2b03      	cmp	r3, #3
 8009b78:	d9e8      	bls.n	8009b4c <JPEG_StoreOutputData+0x1d8>
}
 8009b7a:	bf00      	nop
 8009b7c:	3718      	adds	r7, #24
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b088      	sub	sp, #32
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d002      	beq.n	8009b9e <JPEG_ReadInputData+0x1c>
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d104      	bne.n	8009ba8 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8009b9e:	2101      	movs	r1, #1
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f7fe fded 	bl	8008780 <HAL_JPEG_Pause>
 8009ba6:	e028      	b.n	8009bfa <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d906      	bls.n	8009bc2 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a1b      	ldr	r3, [r3, #32]
 8009bbc:	1ad3      	subs	r3, r2, r3
 8009bbe:	61fb      	str	r3, [r7, #28]
 8009bc0:	e01b      	b.n	8009bfa <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a1b      	ldr	r3, [r3, #32]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d115      	bne.n	8009bfa <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a1b      	ldr	r3, [r3, #32]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f7f7 fb3f 	bl	8001258 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bde:	2b04      	cmp	r3, #4
 8009be0:	d905      	bls.n	8009bee <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009be6:	f023 0203 	bic.w	r2, r3, #3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bf8:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f040 809f 	bne.w	8009d46 <JPEG_ReadInputData+0x1c4>
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f000 809b 	beq.w	8009d46 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	089b      	lsrs	r3, r3, #2
 8009c14:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d335      	bcc.n	8009c8a <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 8009c1e:	2300      	movs	r3, #0
 8009c20:	61bb      	str	r3, [r7, #24]
 8009c22:	e02d      	b.n	8009c80 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a1b      	ldr	r3, [r3, #32]
 8009c28:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	699a      	ldr	r2, [r3, #24]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	4413      	add	r3, r2
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	699a      	ldr	r2, [r3, #24]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	4413      	add	r3, r2
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c44:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6999      	ldr	r1, [r3, #24]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	3302      	adds	r3, #2
 8009c50:	440b      	add	r3, r1
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009c56:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	699a      	ldr	r2, [r3, #24]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	3303      	adds	r3, #3
 8009c62:	4413      	add	r3, r2
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009c6c:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c6e:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a1b      	ldr	r3, [r3, #32]
 8009c74:	1d1a      	adds	r2, r3, #4
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	61bb      	str	r3, [r7, #24]
 8009c80:	69ba      	ldr	r2, [r7, #24]
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d3cd      	bcc.n	8009c24 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 8009c88:	e05d      	b.n	8009d46 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d035      	beq.n	8009cfc <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 8009c90:	2300      	movs	r3, #0
 8009c92:	61bb      	str	r3, [r7, #24]
 8009c94:	e02d      	b.n	8009cf2 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a1b      	ldr	r3, [r3, #32]
 8009c9a:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	699a      	ldr	r2, [r3, #24]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	4413      	add	r3, r2
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	699a      	ldr	r2, [r3, #24]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	4413      	add	r3, r2
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009cb6:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6999      	ldr	r1, [r3, #24]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3302      	adds	r3, #2
 8009cc2:	440b      	add	r3, r1
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009cc8:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	699a      	ldr	r2, [r3, #24]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	3303      	adds	r3, #3
 8009cd4:	4413      	add	r3, r2
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009cde:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009ce0:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	1d1a      	adds	r2, r3, #4
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	61bb      	str	r3, [r7, #24]
 8009cf2:	69ba      	ldr	r2, [r7, #24]
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d3cd      	bcc.n	8009c96 <JPEG_ReadInputData+0x114>
}
 8009cfa:	e024      	b.n	8009d46 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 8009d00:	2300      	movs	r3, #0
 8009d02:	61bb      	str	r3, [r7, #24]
 8009d04:	e017      	b.n	8009d36 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	699a      	ldr	r2, [r3, #24]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a1b      	ldr	r3, [r3, #32]
 8009d0e:	4413      	add	r3, r2
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	461a      	mov	r2, r3
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	f003 0303 	and.w	r3, r3, #3
 8009d1a:	00db      	lsls	r3, r3, #3
 8009d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d20:	697a      	ldr	r2, [r7, #20]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	1c5a      	adds	r2, r3, #1
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	3301      	adds	r3, #1
 8009d34:	61bb      	str	r3, [r7, #24]
 8009d36:	69ba      	ldr	r2, [r7, #24]
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d3e3      	bcc.n	8009d06 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8009d46:	bf00      	nop
 8009d48:	3720      	adds	r7, #32
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
	...

08009d50 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8009d50:	b590      	push	{r4, r7, lr}
 8009d52:	b087      	sub	sp, #28
 8009d54:	af02      	add	r7, sp, #8
 8009d56:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d5e:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d66:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d804      	bhi.n	8009d7c <JPEG_DMA_StartProcess+0x2c>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d901      	bls.n	8009d80 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e074      	b.n	8009e6a <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d84:	4a3b      	ldr	r2, [pc, #236]	@ (8009e74 <JPEG_DMA_StartProcess+0x124>)
 8009d86:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d8c:	4a3a      	ldr	r2, [pc, #232]	@ (8009e78 <JPEG_DMA_StartProcess+0x128>)
 8009d8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d94:	4a39      	ldr	r2, [pc, #228]	@ (8009e7c <JPEG_DMA_StartProcess+0x12c>)
 8009d96:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d9c:	4a36      	ldr	r2, [pc, #216]	@ (8009e78 <JPEG_DMA_StartProcess+0x128>)
 8009d9e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009da4:	4a36      	ldr	r2, [pc, #216]	@ (8009e80 <JPEG_DMA_StartProcess+0x130>)
 8009da6:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d002      	beq.n	8009db4 <JPEG_DMA_StartProcess+0x64>
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d107      	bne.n	8009dc4 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009db8:	f043 0204 	orr.w	r2, r3, #4
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e052      	b.n	8009e6a <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dcc:	68f9      	ldr	r1, [r7, #12]
 8009dce:	fbb3 f1f1 	udiv	r1, r3, r1
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	fb00 f101 	mul.w	r1, r0, r1
 8009dd8:	1a5b      	subs	r3, r3, r1
 8009dda:	1ad2      	subs	r2, r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009de8:	68b9      	ldr	r1, [r7, #8]
 8009dea:	fbb3 f1f1 	udiv	r1, r3, r1
 8009dee:	68b8      	ldr	r0, [r7, #8]
 8009df0:	fb00 f101 	mul.w	r1, r0, r1
 8009df4:	1a5b      	subs	r3, r3, r1
 8009df6:	1ad2      	subs	r2, r2, r3
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	3344      	adds	r3, #68	@ 0x44
 8009e06:	4619      	mov	r1, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	69db      	ldr	r3, [r3, #28]
 8009e0c:	461c      	mov	r4, r3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e12:	2201      	movs	r2, #1
 8009e14:	9200      	str	r2, [sp, #0]
 8009e16:	4622      	mov	r2, r4
 8009e18:	f000 fbe2 	bl	800a5e0 <HAL_MDMA_Start_IT>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d007      	beq.n	8009e32 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e26:	f043 0204 	orr.w	r2, r3, #4
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e01b      	b.n	8009e6a <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	699b      	ldr	r3, [r3, #24]
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	3340      	adds	r3, #64	@ 0x40
 8009e42:	461c      	mov	r4, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e48:	2201      	movs	r2, #1
 8009e4a:	9200      	str	r2, [sp, #0]
 8009e4c:	4622      	mov	r2, r4
 8009e4e:	f000 fbc7 	bl	800a5e0 <HAL_MDMA_Start_IT>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d007      	beq.n	8009e68 <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e5c:	f043 0204 	orr.w	r2, r3, #4
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e000      	b.n	8009e6a <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3714      	adds	r7, #20
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd90      	pop	{r4, r7, pc}
 8009e72:	bf00      	nop
 8009e74:	0800a183 	.word	0x0800a183
 8009e78:	0800a371 	.word	0x0800a371
 8009e7c:	0800a2af 	.word	0x0800a2af
 8009e80:	0800a3c1 	.word	0x0800a3c1

08009e84 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e90:	f003 0303 	and.w	r3, r3, #3
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	d125      	bne.n	8009ee4 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d01e      	beq.n	8009ee4 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	3304      	adds	r3, #4
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f7fe fb62 	bl	8008576 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	3304      	adds	r3, #4
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f7fe fcda 	bl	8008878 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ed2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ee2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eea:	f003 0320 	and.w	r3, r3, #32
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d039      	beq.n	8009f66 <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ef6:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f022 0201 	bic.w	r2, r2, #1
 8009f0c:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009f1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009f2c:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d104      	bne.n	8009f46 <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f40:	4618      	mov	r0, r3
 8009f42:	f000 fbce 	bl	800a6e2 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	2b02      	cmp	r3, #2
 8009f52:	d105      	bne.n	8009f60 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f000 fbc2 	bl	800a6e2 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 8009f5e:	e002      	b.n	8009f66 <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 f804 	bl	8009f6e <JPEG_DMA_EndProcess>
}
 8009f66:	bf00      	nop
 8009f68:	3708      	adds	r7, #8
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b084      	sub	sp, #16
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	695b      	ldr	r3, [r3, #20]
 8009f82:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8009f86:	1ad2      	subs	r2, r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d10a      	bne.n	8009fae <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	69d9      	ldr	r1, [r3, #28]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f7f7 f978 	bl	8001298 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fb4:	f003 0310 	and.w	r3, r3, #16
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d134      	bne.n	800a026 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d00a      	beq.n	8009fda <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	69d9      	ldr	r1, [r3, #28]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fcc:	461a      	mov	r2, r3
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f7f7 f962 	bl	8001298 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f022 0201 	bic.w	r2, r2, #1
 8009fe8:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fee:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ff4:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f003 0303 	and.w	r3, r3, #3
 800a012:	2b02      	cmp	r3, #2
 800a014:	d103      	bne.n	800a01e <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f7fe fc39 	bl	800888e <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800a01c:	e00c      	b.n	800a038 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f7f7 f956 	bl	80012d0 <HAL_JPEG_EncodeCpltCallback>
}
 800a024:	e008      	b.n	800a038 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a02a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d102      	bne.n	800a038 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 f804 	bl	800a040 <JPEG_DMA_PollResidualData>
}
 800a038:	bf00      	nop
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b086      	sub	sp, #24
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800a048:	2310      	movs	r3, #16
 800a04a:	617b      	str	r3, [r7, #20]
 800a04c:	e04f      	b.n	800a0ee <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a056:	2b00      	cmp	r3, #0
 800a058:	d146      	bne.n	800a0e8 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a060:	f003 0310 	and.w	r3, r3, #16
 800a064:	2b00      	cmp	r3, #0
 800a066:	d03f      	beq.n	800a0e8 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a06e:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	69da      	ldr	r2, [r3, #28]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a078:	4413      	add	r3, r2
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	b2d2      	uxtb	r2, r2
 800a07e:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	0a19      	lsrs	r1, r3, #8
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	69da      	ldr	r2, [r3, #28]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a08c:	3301      	adds	r3, #1
 800a08e:	4413      	add	r3, r2
 800a090:	b2ca      	uxtb	r2, r1
 800a092:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	0c19      	lsrs	r1, r3, #16
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	69da      	ldr	r2, [r3, #28]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a0:	3302      	adds	r3, #2
 800a0a2:	4413      	add	r3, r2
 800a0a4:	b2ca      	uxtb	r2, r1
 800a0a6:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	0e19      	lsrs	r1, r3, #24
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	69da      	ldr	r2, [r3, #28]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0b4:	3303      	adds	r3, #3
 800a0b6:	4413      	add	r3, r2
 800a0b8:	b2ca      	uxtb	r2, r1
 800a0ba:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0c0:	1d1a      	adds	r2, r3, #4
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d10a      	bne.n	800a0e8 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	69d9      	ldr	r1, [r3, #28]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0da:	461a      	mov	r2, r3
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f7f7 f8db 	bl	8001298 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	617b      	str	r3, [r7, #20]
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1ac      	bne.n	800a04e <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0f8:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a100:	f003 0310 	and.w	r3, r3, #16
 800a104:	2b00      	cmp	r3, #0
 800a106:	d004      	beq.n	800a112 <JPEG_DMA_PollResidualData+0xd2>
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d133      	bne.n	800a17a <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f022 0201 	bic.w	r2, r2, #1
 800a120:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a126:	2b00      	cmp	r3, #0
 800a128:	d00a      	beq.n	800a140 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	69d9      	ldr	r1, [r3, #28]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a132:	461a      	mov	r2, r3
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7f7 f8af 	bl	8001298 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a144:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a14a:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2200      	movs	r2, #0
 800a156:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2201      	movs	r2, #1
 800a15e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	f003 0303 	and.w	r3, r3, #3
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d103      	bne.n	800a174 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7fe fb8e 	bl	800888e <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800a172:	e002      	b.n	800a17a <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7f7 f8ab 	bl	80012d0 <HAL_JPEG_EncodeCpltCallback>
}
 800a17a:	bf00      	nop
 800a17c:	3718      	adds	r7, #24
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}

0800a182 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800a182:	b590      	push	{r4, r7, lr}
 800a184:	b087      	sub	sp, #28
 800a186:	af02      	add	r7, sp, #8
 800a188:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a18e:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a19e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1a4:	f248 030c 	movw	r3, #32780	@ 0x800c
 800a1a8:	4013      	ands	r3, r2
 800a1aa:	2b0c      	cmp	r3, #12
 800a1ac:	d17c      	bne.n	800a2a8 <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1b4:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	695b      	ldr	r3, [r3, #20]
 800a1c0:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800a1c4:	1ad2      	subs	r2, r2, r3
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f7f7 f841 	bl	8001258 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d81f      	bhi.n	800a220 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d10d      	bne.n	800a202 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1ea:	f043 0204 	orr.w	r2, r3, #4
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2206      	movs	r2, #6
 800a1f6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f7fe fb51 	bl	80088a2 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800a200:	e052      	b.n	800a2a8 <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a20a:	68b9      	ldr	r1, [r7, #8]
 800a20c:	fbb3 f1f1 	udiv	r1, r3, r1
 800a210:	68b8      	ldr	r0, [r7, #8]
 800a212:	fb00 f101 	mul.w	r1, r0, r1
 800a216:	1a5b      	subs	r3, r3, r1
 800a218:	1ad2      	subs	r2, r2, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	629a      	str	r2, [r3, #40]	@ 0x28
 800a21e:	e010      	b.n	800a242 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00c      	beq.n	800a242 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a22c:	f003 0303 	and.w	r3, r3, #3
 800a230:	2b00      	cmp	r3, #0
 800a232:	d006      	beq.n	800a242 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a238:	089b      	lsrs	r3, r3, #2
 800a23a:	3301      	adds	r3, #1
 800a23c:	009a      	lsls	r2, r3, #2
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a246:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d124      	bne.n	800a298 <JPEG_MDMAInCpltCallback+0x116>
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a252:	2b00      	cmp	r3, #0
 800a254:	d020      	beq.n	800a298 <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	699b      	ldr	r3, [r3, #24]
 800a25e:	4619      	mov	r1, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	3340      	adds	r3, #64	@ 0x40
 800a266:	461c      	mov	r4, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a26c:	2201      	movs	r2, #1
 800a26e:	9200      	str	r2, [sp, #0]
 800a270:	4622      	mov	r2, r4
 800a272:	f000 f9b5 	bl	800a5e0 <HAL_MDMA_Start_IT>
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00d      	beq.n	800a298 <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a280:	f043 0204 	orr.w	r2, r3, #4
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2206      	movs	r2, #6
 800a28c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f7fe fb06 	bl	80088a2 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800a296:	e007      	b.n	800a2a8 <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a2a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 800a2a8:	3714      	adds	r7, #20
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd90      	pop	{r4, r7, pc}

0800a2ae <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800a2ae:	b590      	push	{r4, r7, lr}
 800a2b0:	b087      	sub	sp, #28
 800a2b2:	af02      	add	r7, sp, #8
 800a2b4:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2ba:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a2ca:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a2d0:	f248 030c 	movw	r3, #32780	@ 0x800c
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	2b0c      	cmp	r3, #12
 800a2d8:	d147      	bne.n	800a36a <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2e0:	f003 0320 	and.w	r3, r3, #32
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d138      	bne.n	800a35a <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	695b      	ldr	r3, [r3, #20]
 800a2f2:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800a2f6:	1ad2      	subs	r2, r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	69d9      	ldr	r1, [r3, #28]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a304:	461a      	mov	r2, r3
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f7f6 ffc6 	bl	8001298 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a310:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a314:	2b00      	cmp	r3, #0
 800a316:	d120      	bne.n	800a35a <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	3344      	adds	r3, #68	@ 0x44
 800a322:	4619      	mov	r1, r3
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	69db      	ldr	r3, [r3, #28]
 800a328:	461c      	mov	r4, r3
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a32e:	2201      	movs	r2, #1
 800a330:	9200      	str	r2, [sp, #0]
 800a332:	4622      	mov	r2, r4
 800a334:	f000 f954 	bl	800a5e0 <HAL_MDMA_Start_IT>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00d      	beq.n	800a35a <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a342:	f043 0204 	orr.w	r2, r3, #4
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2206      	movs	r2, #6
 800a34e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f7fe faa5 	bl	80088a2 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800a358:	e007      	b.n	800a36a <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a368:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800a36a:	3714      	adds	r7, #20
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd90      	pop	{r4, r7, pc}

0800a370 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a37c:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f022 0201 	bic.w	r2, r2, #1
 800a38c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a39c:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3aa:	f043 0204 	orr.w	r2, r3, #4
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800a3b2:	68f8      	ldr	r0, [r7, #12]
 800a3b4:	f7fe fa75 	bl	80088a2 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800a3b8:	bf00      	nop
 800a3ba:	3710      	adds	r7, #16
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3cc:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d002      	beq.n	800a3e0 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800a3da:	68f8      	ldr	r0, [r7, #12]
 800a3dc:	f7ff fdc7 	bl	8009f6e <JPEG_DMA_EndProcess>
  }
}
 800a3e0:	bf00      	nop
 800a3e2:	3710      	adds	r7, #16
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b08b      	sub	sp, #44	@ 0x2c
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	3350      	adds	r3, #80	@ 0x50
 800a3fa:	61bb      	str	r3, [r7, #24]

  i = 0;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a400:	e042      	b.n	800a488 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800a402:	69bb      	ldr	r3, [r7, #24]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800a408:	2300      	movs	r3, #0
 800a40a:	61fb      	str	r3, [r7, #28]
 800a40c:	e033      	b.n	800a476 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	00db      	lsls	r3, r3, #3
 800a412:	697a      	ldr	r2, [r7, #20]
 800a414:	fa22 f303 	lsr.w	r3, r2, r3
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d103      	bne.n	800a42a <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800a422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a424:	3364      	adds	r3, #100	@ 0x64
 800a426:	627b      	str	r3, [r7, #36]	@ 0x24
 800a428:	e022      	b.n	800a470 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	2264      	movs	r2, #100	@ 0x64
 800a42e:	fb02 f303 	mul.w	r3, r2, r3
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a436:	6a38      	ldr	r0, [r7, #32]
 800a438:	69f9      	ldr	r1, [r7, #28]
 800a43a:	4401      	add	r1, r0
 800a43c:	4818      	ldr	r0, [pc, #96]	@ (800a4a0 <JPEG_GetQuality+0xb8>)
 800a43e:	5c41      	ldrb	r1, [r0, r1]
 800a440:	440a      	add	r2, r1
 800a442:	7812      	ldrb	r2, [r2, #0]
 800a444:	fbb3 f3f2 	udiv	r3, r3, r2
 800a448:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2b64      	cmp	r3, #100	@ 0x64
 800a44e:	d807      	bhi.n	800a460 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800a456:	085b      	lsrs	r3, r3, #1
 800a458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a45a:	4413      	add	r3, r2
 800a45c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a45e:	e007      	b.n	800a470 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800a460:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	fbb2 f3f3 	udiv	r3, r2, r3
 800a46a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a46c:	4413      	add	r3, r2
 800a46e:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	3301      	adds	r3, #1
 800a474:	61fb      	str	r3, [r7, #28]
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	2b03      	cmp	r3, #3
 800a47a:	d9c8      	bls.n	800a40e <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800a47c:	6a3b      	ldr	r3, [r7, #32]
 800a47e:	3304      	adds	r3, #4
 800a480:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	3304      	adds	r3, #4
 800a486:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a488:	6a3b      	ldr	r3, [r7, #32]
 800a48a:	2b3c      	cmp	r3, #60	@ 0x3c
 800a48c:	d9b9      	bls.n	800a402 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800a48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a490:	099b      	lsrs	r3, r3, #6
}
 800a492:	4618      	mov	r0, r3
 800a494:	372c      	adds	r7, #44	@ 0x2c
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	080162e0 	.word	0x080162e0

0800a4a4 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a4ac:	f7f7 fffe 	bl	80024ac <HAL_GetTick>
 800a4b0:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d101      	bne.n	800a4bc <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e03b      	b.n	800a534 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2202      	movs	r2, #2
 800a4c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68da      	ldr	r2, [r3, #12]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f022 0201 	bic.w	r2, r2, #1
 800a4da:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a4dc:	e00f      	b.n	800a4fe <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800a4de:	f7f7 ffe5 	bl	80024ac <HAL_GetTick>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	1ad3      	subs	r3, r2, r3
 800a4e8:	2b05      	cmp	r3, #5
 800a4ea:	d908      	bls.n	800a4fe <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2240      	movs	r2, #64	@ 0x40
 800a4f0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2203      	movs	r2, #3
 800a4f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e01a      	b.n	800a534 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	f003 0301 	and.w	r3, r3, #1
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d1e8      	bne.n	800a4de <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 fad3 	bl	800aab8 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2201      	movs	r2, #1
 800a52e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a532:	2300      	movs	r3, #0
}
 800a534:	4618      	mov	r0, r3
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b087      	sub	sp, #28
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a548:	2300      	movs	r3, #0
 800a54a:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d101      	bne.n	800a556 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	e03e      	b.n	800a5d4 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d101      	bne.n	800a564 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800a560:	2302      	movs	r3, #2
 800a562:	e037      	b.n	800a5d4 <HAL_MDMA_ConfigPostRequestMask+0x98>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b01      	cmp	r3, #1
 800a576:	d126      	bne.n	800a5c6 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a582:	2b00      	cmp	r3, #0
 800a584:	d11c      	bne.n	800a5c0 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d108      	bne.n	800a5ae <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	691a      	ldr	r2, [r3, #16]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a5aa:	611a      	str	r2, [r3, #16]
 800a5ac:	e00d      	b.n	800a5ca <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	691a      	ldr	r2, [r3, #16]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a5bc:	611a      	str	r2, [r3, #16]
 800a5be:	e004      	b.n	800a5ca <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	75fb      	strb	r3, [r7, #23]
 800a5c4:	e001      	b.n	800a5ca <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a5d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	371c      	adds	r7, #28
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af02      	add	r7, sp, #8
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d101      	bne.n	800a5f8 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e070      	b.n	800a6da <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d101      	bne.n	800a606 <HAL_MDMA_Start_IT+0x26>
 800a602:	2302      	movs	r3, #2
 800a604:	e069      	b.n	800a6da <HAL_MDMA_Start_IT+0xfa>
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2201      	movs	r2, #1
 800a60a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a614:	b2db      	uxtb	r3, r3
 800a616:	2b01      	cmp	r3, #1
 800a618:	d158      	bne.n	800a6cc <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2202      	movs	r2, #2
 800a61e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2200      	movs	r2, #0
 800a626:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	68da      	ldr	r2, [r3, #12]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f022 0201 	bic.w	r2, r2, #1
 800a636:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	68b9      	ldr	r1, [r7, #8]
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	f000 f9c8 	bl	800a9d8 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68da      	ldr	r2, [r3, #12]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f042 0206 	orr.w	r2, r2, #6
 800a656:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d007      	beq.n	800a670 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68da      	ldr	r2, [r3, #12]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f042 0210 	orr.w	r2, r2, #16
 800a66e:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a674:	2b00      	cmp	r3, #0
 800a676:	d007      	beq.n	800a688 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68da      	ldr	r2, [r3, #12]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f042 0208 	orr.w	r2, r2, #8
 800a686:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d007      	beq.n	800a6a0 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68da      	ldr	r2, [r3, #12]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f042 0220 	orr.w	r2, r2, #32
 800a69e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	68da      	ldr	r2, [r3, #12]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f042 0201 	orr.w	r2, r2, #1
 800a6ae:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6b8:	d10e      	bne.n	800a6d8 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	68da      	ldr	r2, [r3, #12]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a6c8:	60da      	str	r2, [r3, #12]
 800a6ca:	e005      	b.n	800a6d8 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 800a6d4:	2302      	movs	r3, #2
 800a6d6:	e000      	b.n	800a6da <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800a6e2:	b480      	push	{r7}
 800a6e4:	b083      	sub	sp, #12
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d101      	bne.n	800a6f4 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e017      	b.n	800a724 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	d004      	beq.n	800a70a <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2280      	movs	r2, #128	@ 0x80
 800a704:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	e00c      	b.n	800a724 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2204      	movs	r2, #4
 800a70e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	68da      	ldr	r2, [r3, #12]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f022 0201 	bic.w	r2, r2, #1
 800a720:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800a738:	2300      	movs	r3, #0
 800a73a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a73c:	4b91      	ldr	r3, [pc, #580]	@ (800a984 <HAL_MDMA_IRQHandler+0x254>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a91      	ldr	r2, [pc, #580]	@ (800a988 <HAL_MDMA_IRQHandler+0x258>)
 800a742:	fba2 2303 	umull	r2, r3, r2, r3
 800a746:	0a9b      	lsrs	r3, r3, #10
 800a748:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	461a      	mov	r2, r3
 800a750:	4b8e      	ldr	r3, [pc, #568]	@ (800a98c <HAL_MDMA_IRQHandler+0x25c>)
 800a752:	4413      	add	r3, r2
 800a754:	099b      	lsrs	r3, r3, #6
 800a756:	f003 031f 	and.w	r3, r3, #31
 800a75a:	2201      	movs	r2, #1
 800a75c:	fa02 f303 	lsl.w	r3, r2, r3
 800a760:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800a762:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	4013      	ands	r3, r2
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f000 812d 	beq.w	800a9cc <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f003 0301 	and.w	r3, r3, #1
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d054      	beq.n	800a82a <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	f003 0302 	and.w	r3, r3, #2
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d04d      	beq.n	800a82a <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	68da      	ldr	r2, [r3, #12]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f022 0202 	bic.w	r2, r2, #2
 800a79c:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d106      	bne.n	800a7be <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7b4:	f043 0201 	orr.w	r2, r3, #1
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	669a      	str	r2, [r3, #104]	@ 0x68
 800a7bc:	e005      	b.n	800a7ca <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7c2:	f043 0202 	orr.w	r2, r3, #2
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d005      	beq.n	800a7e0 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7d8:	f043 0204 	orr.w	r2, r3, #4
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d005      	beq.n	800a7f6 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7ee:	f043 0208 	orr.w	r2, r3, #8
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d005      	beq.n	800a80c <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a804:	f043 0210 	orr.w	r2, r3, #16
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a812:	2b00      	cmp	r3, #0
 800a814:	d005      	beq.n	800a822 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a81a:	f043 0220 	orr.w	r2, r3, #32
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2201      	movs	r2, #1
 800a828:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f003 0310 	and.w	r3, r3, #16
 800a834:	2b00      	cmp	r3, #0
 800a836:	d012      	beq.n	800a85e <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	f003 0320 	and.w	r3, r3, #32
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00b      	beq.n	800a85e <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2210      	movs	r2, #16
 800a84c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a852:	2b00      	cmp	r3, #0
 800a854:	d003      	beq.n	800a85e <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 0308 	and.w	r3, r3, #8
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d012      	beq.n	800a892 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	f003 0310 	and.w	r3, r3, #16
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00b      	beq.n	800a892 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2208      	movs	r2, #8
 800a880:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a886:	2b00      	cmp	r3, #0
 800a888:	d003      	beq.n	800a892 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f003 0304 	and.w	r3, r3, #4
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d012      	beq.n	800a8c6 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	f003 0308 	and.w	r3, r3, #8
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d00b      	beq.n	800a8c6 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2204      	movs	r2, #4
 800a8b4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d003      	beq.n	800a8c6 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f003 0302 	and.w	r3, r3, #2
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d039      	beq.n	800a948 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	f003 0304 	and.w	r3, r3, #4
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d032      	beq.n	800a948 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	68da      	ldr	r2, [r3, #12]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800a8f0:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	2b04      	cmp	r3, #4
 800a8fc:	d110      	bne.n	800a920 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2201      	movs	r2, #1
 800a90a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a912:	2b00      	cmp	r3, #0
 800a914:	d05c      	beq.n	800a9d0 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	4798      	blx	r3
        }
        return;
 800a91e:	e057      	b.n	800a9d0 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2202      	movs	r2, #2
 800a926:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d003      	beq.n	800a948 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d040      	beq.n	800a9d2 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2204      	movs	r2, #4
 800a954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	68da      	ldr	r2, [r3, #12]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f022 0201 	bic.w	r2, r2, #1
 800a966:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	3301      	adds	r3, #1
 800a96c:	60bb      	str	r3, [r7, #8]
 800a96e:	697a      	ldr	r2, [r7, #20]
 800a970:	429a      	cmp	r2, r3
 800a972:	d30d      	bcc.n	800a990 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	f003 0301 	and.w	r3, r3, #1
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d1f2      	bne.n	800a968 <HAL_MDMA_IRQHandler+0x238>
 800a982:	e006      	b.n	800a992 <HAL_MDMA_IRQHandler+0x262>
 800a984:	24000008 	.word	0x24000008
 800a988:	1b4e81b5 	.word	0x1b4e81b5
 800a98c:	adffffc0 	.word	0xadffffc0
        break;
 800a990:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	f003 0301 	and.w	r3, r3, #1
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d004      	beq.n	800a9b2 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2203      	movs	r2, #3
 800a9ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a9b0:	e003      	b.n	800a9ba <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d007      	beq.n	800a9d2 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	4798      	blx	r3
 800a9ca:	e002      	b.n	800a9d2 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800a9cc:	bf00      	nop
 800a9ce:	e000      	b.n	800a9d2 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800a9d0:	bf00      	nop
    }
  }
}
 800a9d2:	3718      	adds	r7, #24
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b087      	sub	sp, #28
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	607a      	str	r2, [r7, #4]
 800a9e4:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	695a      	ldr	r2, [r3, #20]
 800a9ec:	4b31      	ldr	r3, [pc, #196]	@ (800aab4 <MDMA_SetConfig+0xdc>)
 800a9ee:	4013      	ands	r3, r2
 800a9f0:	683a      	ldr	r2, [r7, #0]
 800a9f2:	f3c2 0110 	ubfx	r1, r2, #0, #17
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	6812      	ldr	r2, [r2, #0]
 800a9fa:	430b      	orrs	r3, r1
 800a9fc:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	695b      	ldr	r3, [r3, #20]
 800aa04:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800aa08:	6a3b      	ldr	r3, [r7, #32]
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	051a      	lsls	r2, r3, #20
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	430a      	orrs	r2, r1
 800aa14:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	221f      	movs	r2, #31
 800aa1c:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800aa34:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa3c:	d002      	beq.n	800aa44 <MDMA_SetConfig+0x6c>
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d108      	bne.n	800aa56 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800aa52:	629a      	str	r2, [r3, #40]	@ 0x28
 800aa54:	e007      	b.n	800aa66 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800aa64:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800aa6c:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa74:	d002      	beq.n	800aa7c <MDMA_SetConfig+0xa4>
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d108      	bne.n	800aa8e <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800aa8a:	629a      	str	r2, [r3, #40]	@ 0x28
 800aa8c:	e007      	b.n	800aa9e <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800aa9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800aaa8:	bf00      	nop
 800aaaa:	371c      	adds	r7, #28
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	fffe0000 	.word	0xfffe0000

0800aab8 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	68d9      	ldr	r1, [r3, #12]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	691a      	ldr	r2, [r3, #16]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	430a      	orrs	r2, r1
 800aace:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	695a      	ldr	r2, [r3, #20]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	699b      	ldr	r3, [r3, #24]
 800aad8:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800aade:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6a1b      	ldr	r3, [r3, #32]
 800aae4:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800aaea:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaf0:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800aaf6:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aafc:	3b01      	subs	r3, #1
 800aafe:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800ab00:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800ab0c:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ab0e:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab18:	d107      	bne.n	800ab2a <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	691a      	ldr	r2, [r3, #16]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800ab28:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	da11      	bge.n	800ab5e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	695a      	ldr	r2, [r3, #20]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800ab48:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab4e:	425b      	negs	r3, r3
 800ab50:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	b292      	uxth	r2, r2
 800ab5a:	621a      	str	r2, [r3, #32]
 800ab5c:	e006      	b.n	800ab6c <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab62:	461a      	mov	r2, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	b292      	uxth	r2, r2
 800ab6a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	da15      	bge.n	800aba0 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	695a      	ldr	r2, [r3, #20]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800ab82:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab88:	425b      	negs	r3, r3
 800ab8a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	6a19      	ldr	r1, [r3, #32]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	041a      	lsls	r2, r3, #16
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	430a      	orrs	r2, r1
 800ab9c:	621a      	str	r2, [r3, #32]
 800ab9e:	e009      	b.n	800abb4 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	6a19      	ldr	r1, [r3, #32]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abaa:	041a      	lsls	r2, r3, #16
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	430a      	orrs	r2, r1
 800abb2:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abbc:	d006      	beq.n	800abcc <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	685a      	ldr	r2, [r3, #4]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	b2d2      	uxtb	r2, r2
 800abc8:	629a      	str	r2, [r3, #40]	@ 0x28
 800abca:	e003      	b.n	800abd4 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2200      	movs	r2, #0
 800abd2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2200      	movs	r2, #0
 800abda:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800abdc:	bf00      	nop
 800abde:	3714      	adds	r7, #20
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b086      	sub	sp, #24
 800abec:	af02      	add	r7, sp, #8
 800abee:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d101      	bne.n	800abfa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800abf6:	2301      	movs	r3, #1
 800abf8:	e0fe      	b.n	800adf8 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d106      	bne.n	800ac14 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f00a f9d8 	bl	8014fc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2203      	movs	r2, #3
 800ac18:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4618      	mov	r0, r3
 800ac22:	f006 fd7e 	bl	8011722 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6818      	ldr	r0, [r3, #0]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	7c1a      	ldrb	r2, [r3, #16]
 800ac2e:	f88d 2000 	strb.w	r2, [sp]
 800ac32:	3304      	adds	r3, #4
 800ac34:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac36:	f006 fc4f 	bl	80114d8 <USB_CoreInit>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d005      	beq.n	800ac4c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2202      	movs	r2, #2
 800ac44:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e0d5      	b.n	800adf8 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2100      	movs	r1, #0
 800ac52:	4618      	mov	r0, r3
 800ac54:	f006 fd76 	bl	8011744 <USB_SetCurrentMode>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d005      	beq.n	800ac6a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2202      	movs	r2, #2
 800ac62:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800ac66:	2301      	movs	r3, #1
 800ac68:	e0c6      	b.n	800adf8 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	73fb      	strb	r3, [r7, #15]
 800ac6e:	e04a      	b.n	800ad06 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ac70:	7bfa      	ldrb	r2, [r7, #15]
 800ac72:	6879      	ldr	r1, [r7, #4]
 800ac74:	4613      	mov	r3, r2
 800ac76:	00db      	lsls	r3, r3, #3
 800ac78:	4413      	add	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	440b      	add	r3, r1
 800ac7e:	3315      	adds	r3, #21
 800ac80:	2201      	movs	r2, #1
 800ac82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ac84:	7bfa      	ldrb	r2, [r7, #15]
 800ac86:	6879      	ldr	r1, [r7, #4]
 800ac88:	4613      	mov	r3, r2
 800ac8a:	00db      	lsls	r3, r3, #3
 800ac8c:	4413      	add	r3, r2
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	440b      	add	r3, r1
 800ac92:	3314      	adds	r3, #20
 800ac94:	7bfa      	ldrb	r2, [r7, #15]
 800ac96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ac98:	7bfa      	ldrb	r2, [r7, #15]
 800ac9a:	7bfb      	ldrb	r3, [r7, #15]
 800ac9c:	b298      	uxth	r0, r3
 800ac9e:	6879      	ldr	r1, [r7, #4]
 800aca0:	4613      	mov	r3, r2
 800aca2:	00db      	lsls	r3, r3, #3
 800aca4:	4413      	add	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	440b      	add	r3, r1
 800acaa:	332e      	adds	r3, #46	@ 0x2e
 800acac:	4602      	mov	r2, r0
 800acae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800acb0:	7bfa      	ldrb	r2, [r7, #15]
 800acb2:	6879      	ldr	r1, [r7, #4]
 800acb4:	4613      	mov	r3, r2
 800acb6:	00db      	lsls	r3, r3, #3
 800acb8:	4413      	add	r3, r2
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	440b      	add	r3, r1
 800acbe:	3318      	adds	r3, #24
 800acc0:	2200      	movs	r2, #0
 800acc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800acc4:	7bfa      	ldrb	r2, [r7, #15]
 800acc6:	6879      	ldr	r1, [r7, #4]
 800acc8:	4613      	mov	r3, r2
 800acca:	00db      	lsls	r3, r3, #3
 800accc:	4413      	add	r3, r2
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	440b      	add	r3, r1
 800acd2:	331c      	adds	r3, #28
 800acd4:	2200      	movs	r2, #0
 800acd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800acd8:	7bfa      	ldrb	r2, [r7, #15]
 800acda:	6879      	ldr	r1, [r7, #4]
 800acdc:	4613      	mov	r3, r2
 800acde:	00db      	lsls	r3, r3, #3
 800ace0:	4413      	add	r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	440b      	add	r3, r1
 800ace6:	3320      	adds	r3, #32
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800acec:	7bfa      	ldrb	r2, [r7, #15]
 800acee:	6879      	ldr	r1, [r7, #4]
 800acf0:	4613      	mov	r3, r2
 800acf2:	00db      	lsls	r3, r3, #3
 800acf4:	4413      	add	r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	440b      	add	r3, r1
 800acfa:	3324      	adds	r3, #36	@ 0x24
 800acfc:	2200      	movs	r2, #0
 800acfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad00:	7bfb      	ldrb	r3, [r7, #15]
 800ad02:	3301      	adds	r3, #1
 800ad04:	73fb      	strb	r3, [r7, #15]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	791b      	ldrb	r3, [r3, #4]
 800ad0a:	7bfa      	ldrb	r2, [r7, #15]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d3af      	bcc.n	800ac70 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad10:	2300      	movs	r3, #0
 800ad12:	73fb      	strb	r3, [r7, #15]
 800ad14:	e044      	b.n	800ada0 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ad16:	7bfa      	ldrb	r2, [r7, #15]
 800ad18:	6879      	ldr	r1, [r7, #4]
 800ad1a:	4613      	mov	r3, r2
 800ad1c:	00db      	lsls	r3, r3, #3
 800ad1e:	4413      	add	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	440b      	add	r3, r1
 800ad24:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800ad28:	2200      	movs	r2, #0
 800ad2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ad2c:	7bfa      	ldrb	r2, [r7, #15]
 800ad2e:	6879      	ldr	r1, [r7, #4]
 800ad30:	4613      	mov	r3, r2
 800ad32:	00db      	lsls	r3, r3, #3
 800ad34:	4413      	add	r3, r2
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	440b      	add	r3, r1
 800ad3a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800ad3e:	7bfa      	ldrb	r2, [r7, #15]
 800ad40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ad42:	7bfa      	ldrb	r2, [r7, #15]
 800ad44:	6879      	ldr	r1, [r7, #4]
 800ad46:	4613      	mov	r3, r2
 800ad48:	00db      	lsls	r3, r3, #3
 800ad4a:	4413      	add	r3, r2
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	440b      	add	r3, r1
 800ad50:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800ad54:	2200      	movs	r2, #0
 800ad56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ad58:	7bfa      	ldrb	r2, [r7, #15]
 800ad5a:	6879      	ldr	r1, [r7, #4]
 800ad5c:	4613      	mov	r3, r2
 800ad5e:	00db      	lsls	r3, r3, #3
 800ad60:	4413      	add	r3, r2
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	440b      	add	r3, r1
 800ad66:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ad6e:	7bfa      	ldrb	r2, [r7, #15]
 800ad70:	6879      	ldr	r1, [r7, #4]
 800ad72:	4613      	mov	r3, r2
 800ad74:	00db      	lsls	r3, r3, #3
 800ad76:	4413      	add	r3, r2
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	440b      	add	r3, r1
 800ad7c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ad80:	2200      	movs	r2, #0
 800ad82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ad84:	7bfa      	ldrb	r2, [r7, #15]
 800ad86:	6879      	ldr	r1, [r7, #4]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	00db      	lsls	r3, r3, #3
 800ad8c:	4413      	add	r3, r2
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	440b      	add	r3, r1
 800ad92:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800ad96:	2200      	movs	r2, #0
 800ad98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad9a:	7bfb      	ldrb	r3, [r7, #15]
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	73fb      	strb	r3, [r7, #15]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	791b      	ldrb	r3, [r3, #4]
 800ada4:	7bfa      	ldrb	r2, [r7, #15]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d3b5      	bcc.n	800ad16 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6818      	ldr	r0, [r3, #0]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	7c1a      	ldrb	r2, [r3, #16]
 800adb2:	f88d 2000 	strb.w	r2, [sp]
 800adb6:	3304      	adds	r3, #4
 800adb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800adba:	f006 fd0f 	bl	80117dc <USB_DevInit>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d005      	beq.n	800add0 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2202      	movs	r2, #2
 800adc8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800adcc:	2301      	movs	r3, #1
 800adce:	e013      	b.n	800adf8 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2201      	movs	r2, #1
 800adda:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	7b1b      	ldrb	r3, [r3, #12]
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d102      	bne.n	800adec <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f001 f96e 	bl	800c0c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4618      	mov	r0, r3
 800adf2:	f007 fd52 	bl	801289a <USB_DevDisconnect>

  return HAL_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d101      	bne.n	800ae1c <HAL_PCD_Start+0x1c>
 800ae18:	2302      	movs	r3, #2
 800ae1a:	e022      	b.n	800ae62 <HAL_PCD_Start+0x62>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d009      	beq.n	800ae44 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d105      	bne.n	800ae44 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae3c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f006 fc59 	bl	8011700 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4618      	mov	r0, r3
 800ae54:	f007 fd00 	bl	8012858 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ae6a:	b590      	push	{r4, r7, lr}
 800ae6c:	b08d      	sub	sp, #52	@ 0x34
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae78:	6a3b      	ldr	r3, [r7, #32]
 800ae7a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4618      	mov	r0, r3
 800ae82:	f007 fdbe 	bl	8012a02 <USB_GetMode>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f040 84b9 	bne.w	800b800 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4618      	mov	r0, r3
 800ae94:	f007 fd22 	bl	80128dc <USB_ReadInterrupts>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f000 84af 	beq.w	800b7fe <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	0a1b      	lsrs	r3, r3, #8
 800aeaa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f007 fd0f 	bl	80128dc <USB_ReadInterrupts>
 800aebe:	4603      	mov	r3, r0
 800aec0:	f003 0302 	and.w	r3, r3, #2
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	d107      	bne.n	800aed8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	695a      	ldr	r2, [r3, #20]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f002 0202 	and.w	r2, r2, #2
 800aed6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4618      	mov	r0, r3
 800aede:	f007 fcfd 	bl	80128dc <USB_ReadInterrupts>
 800aee2:	4603      	mov	r3, r0
 800aee4:	f003 0310 	and.w	r3, r3, #16
 800aee8:	2b10      	cmp	r3, #16
 800aeea:	d161      	bne.n	800afb0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	699a      	ldr	r2, [r3, #24]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f022 0210 	bic.w	r2, r2, #16
 800aefa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800aefc:	6a3b      	ldr	r3, [r7, #32]
 800aefe:	6a1b      	ldr	r3, [r3, #32]
 800af00:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800af02:	69bb      	ldr	r3, [r7, #24]
 800af04:	f003 020f 	and.w	r2, r3, #15
 800af08:	4613      	mov	r3, r2
 800af0a:	00db      	lsls	r3, r3, #3
 800af0c:	4413      	add	r3, r2
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	4413      	add	r3, r2
 800af18:	3304      	adds	r3, #4
 800af1a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800af1c:	69bb      	ldr	r3, [r7, #24]
 800af1e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800af22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800af26:	d124      	bne.n	800af72 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800af28:	69ba      	ldr	r2, [r7, #24]
 800af2a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800af2e:	4013      	ands	r3, r2
 800af30:	2b00      	cmp	r3, #0
 800af32:	d035      	beq.n	800afa0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800af38:	69bb      	ldr	r3, [r7, #24]
 800af3a:	091b      	lsrs	r3, r3, #4
 800af3c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800af3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af42:	b29b      	uxth	r3, r3
 800af44:	461a      	mov	r2, r3
 800af46:	6a38      	ldr	r0, [r7, #32]
 800af48:	f007 fb34 	bl	80125b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	68da      	ldr	r2, [r3, #12]
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	091b      	lsrs	r3, r3, #4
 800af54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af58:	441a      	add	r2, r3
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	695a      	ldr	r2, [r3, #20]
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	091b      	lsrs	r3, r3, #4
 800af66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af6a:	441a      	add	r2, r3
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	615a      	str	r2, [r3, #20]
 800af70:	e016      	b.n	800afa0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800af78:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800af7c:	d110      	bne.n	800afa0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800af84:	2208      	movs	r2, #8
 800af86:	4619      	mov	r1, r3
 800af88:	6a38      	ldr	r0, [r7, #32]
 800af8a:	f007 fb13 	bl	80125b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	695a      	ldr	r2, [r3, #20]
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	091b      	lsrs	r3, r3, #4
 800af96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af9a:	441a      	add	r2, r3
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	699a      	ldr	r2, [r3, #24]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f042 0210 	orr.w	r2, r2, #16
 800afae:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4618      	mov	r0, r3
 800afb6:	f007 fc91 	bl	80128dc <USB_ReadInterrupts>
 800afba:	4603      	mov	r3, r0
 800afbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800afc0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800afc4:	f040 80a7 	bne.w	800b116 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800afc8:	2300      	movs	r3, #0
 800afca:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4618      	mov	r0, r3
 800afd2:	f007 fc96 	bl	8012902 <USB_ReadDevAllOutEpInterrupt>
 800afd6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800afd8:	e099      	b.n	800b10e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800afda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afdc:	f003 0301 	and.w	r3, r3, #1
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f000 808e 	beq.w	800b102 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afec:	b2d2      	uxtb	r2, r2
 800afee:	4611      	mov	r1, r2
 800aff0:	4618      	mov	r0, r3
 800aff2:	f007 fcba 	bl	801296a <USB_ReadDevOutEPInterrupt>
 800aff6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	f003 0301 	and.w	r3, r3, #1
 800affe:	2b00      	cmp	r3, #0
 800b000:	d00c      	beq.n	800b01c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b004:	015a      	lsls	r2, r3, #5
 800b006:	69fb      	ldr	r3, [r7, #28]
 800b008:	4413      	add	r3, r2
 800b00a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b00e:	461a      	mov	r2, r3
 800b010:	2301      	movs	r3, #1
 800b012:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b014:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 fed0 	bl	800bdbc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	f003 0308 	and.w	r3, r3, #8
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00c      	beq.n	800b040 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b028:	015a      	lsls	r2, r3, #5
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	4413      	add	r3, r2
 800b02e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b032:	461a      	mov	r2, r3
 800b034:	2308      	movs	r3, #8
 800b036:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b038:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 ffa6 	bl	800bf8c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	f003 0310 	and.w	r3, r3, #16
 800b046:	2b00      	cmp	r3, #0
 800b048:	d008      	beq.n	800b05c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04c:	015a      	lsls	r2, r3, #5
 800b04e:	69fb      	ldr	r3, [r7, #28]
 800b050:	4413      	add	r3, r2
 800b052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b056:	461a      	mov	r2, r3
 800b058:	2310      	movs	r3, #16
 800b05a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	f003 0302 	and.w	r3, r3, #2
 800b062:	2b00      	cmp	r3, #0
 800b064:	d030      	beq.n	800b0c8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b066:	6a3b      	ldr	r3, [r7, #32]
 800b068:	695b      	ldr	r3, [r3, #20]
 800b06a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b06e:	2b80      	cmp	r3, #128	@ 0x80
 800b070:	d109      	bne.n	800b086 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b072:	69fb      	ldr	r3, [r7, #28]
 800b074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	69fa      	ldr	r2, [r7, #28]
 800b07c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b080:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b084:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b088:	4613      	mov	r3, r2
 800b08a:	00db      	lsls	r3, r3, #3
 800b08c:	4413      	add	r3, r2
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	4413      	add	r3, r2
 800b098:	3304      	adds	r3, #4
 800b09a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	78db      	ldrb	r3, [r3, #3]
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d108      	bne.n	800b0b6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f00a f8ad 	bl	8015210 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b8:	015a      	lsls	r2, r3, #5
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	4413      	add	r3, r2
 800b0be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	2302      	movs	r3, #2
 800b0c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	f003 0320 	and.w	r3, r3, #32
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d008      	beq.n	800b0e4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d4:	015a      	lsls	r2, r3, #5
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	4413      	add	r3, r2
 800b0da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0de:	461a      	mov	r2, r3
 800b0e0:	2320      	movs	r3, #32
 800b0e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d009      	beq.n	800b102 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f0:	015a      	lsls	r2, r3, #5
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	4413      	add	r3, r2
 800b0f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b100:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b104:	3301      	adds	r3, #1
 800b106:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b10a:	085b      	lsrs	r3, r3, #1
 800b10c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b110:	2b00      	cmp	r3, #0
 800b112:	f47f af62 	bne.w	800afda <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4618      	mov	r0, r3
 800b11c:	f007 fbde 	bl	80128dc <USB_ReadInterrupts>
 800b120:	4603      	mov	r3, r0
 800b122:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b126:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b12a:	f040 80db 	bne.w	800b2e4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4618      	mov	r0, r3
 800b134:	f007 fbff 	bl	8012936 <USB_ReadDevAllInEpInterrupt>
 800b138:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800b13a:	2300      	movs	r3, #0
 800b13c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800b13e:	e0cd      	b.n	800b2dc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b142:	f003 0301 	and.w	r3, r3, #1
 800b146:	2b00      	cmp	r3, #0
 800b148:	f000 80c2 	beq.w	800b2d0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b152:	b2d2      	uxtb	r2, r2
 800b154:	4611      	mov	r1, r2
 800b156:	4618      	mov	r0, r3
 800b158:	f007 fc25 	bl	80129a6 <USB_ReadDevInEPInterrupt>
 800b15c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	f003 0301 	and.w	r3, r3, #1
 800b164:	2b00      	cmp	r3, #0
 800b166:	d057      	beq.n	800b218 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b16a:	f003 030f 	and.w	r3, r3, #15
 800b16e:	2201      	movs	r2, #1
 800b170:	fa02 f303 	lsl.w	r3, r2, r3
 800b174:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b17c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	43db      	mvns	r3, r3
 800b182:	69f9      	ldr	r1, [r7, #28]
 800b184:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b188:	4013      	ands	r3, r2
 800b18a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b18e:	015a      	lsls	r2, r3, #5
 800b190:	69fb      	ldr	r3, [r7, #28]
 800b192:	4413      	add	r3, r2
 800b194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b198:	461a      	mov	r2, r3
 800b19a:	2301      	movs	r3, #1
 800b19c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	799b      	ldrb	r3, [r3, #6]
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d132      	bne.n	800b20c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b1a6:	6879      	ldr	r1, [r7, #4]
 800b1a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	00db      	lsls	r3, r3, #3
 800b1ae:	4413      	add	r3, r2
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	440b      	add	r3, r1
 800b1b4:	3320      	adds	r3, #32
 800b1b6:	6819      	ldr	r1, [r3, #0]
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1bc:	4613      	mov	r3, r2
 800b1be:	00db      	lsls	r3, r3, #3
 800b1c0:	4413      	add	r3, r2
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	4403      	add	r3, r0
 800b1c6:	331c      	adds	r3, #28
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4419      	add	r1, r3
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	00db      	lsls	r3, r3, #3
 800b1d4:	4413      	add	r3, r2
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	4403      	add	r3, r0
 800b1da:	3320      	adds	r3, #32
 800b1dc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d113      	bne.n	800b20c <HAL_PCD_IRQHandler+0x3a2>
 800b1e4:	6879      	ldr	r1, [r7, #4]
 800b1e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	00db      	lsls	r3, r3, #3
 800b1ec:	4413      	add	r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	440b      	add	r3, r1
 800b1f2:	3324      	adds	r3, #36	@ 0x24
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d108      	bne.n	800b20c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6818      	ldr	r0, [r3, #0]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b204:	461a      	mov	r2, r3
 800b206:	2101      	movs	r1, #1
 800b208:	f007 fc2e 	bl	8012a68 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	4619      	mov	r1, r3
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f009 ff77 	bl	8015106 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	f003 0308 	and.w	r3, r3, #8
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d008      	beq.n	800b234 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b224:	015a      	lsls	r2, r3, #5
 800b226:	69fb      	ldr	r3, [r7, #28]
 800b228:	4413      	add	r3, r2
 800b22a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b22e:	461a      	mov	r2, r3
 800b230:	2308      	movs	r3, #8
 800b232:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	f003 0310 	and.w	r3, r3, #16
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d008      	beq.n	800b250 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b240:	015a      	lsls	r2, r3, #5
 800b242:	69fb      	ldr	r3, [r7, #28]
 800b244:	4413      	add	r3, r2
 800b246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b24a:	461a      	mov	r2, r3
 800b24c:	2310      	movs	r3, #16
 800b24e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b256:	2b00      	cmp	r3, #0
 800b258:	d008      	beq.n	800b26c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b25c:	015a      	lsls	r2, r3, #5
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	4413      	add	r3, r2
 800b262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b266:	461a      	mov	r2, r3
 800b268:	2340      	movs	r3, #64	@ 0x40
 800b26a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	f003 0302 	and.w	r3, r3, #2
 800b272:	2b00      	cmp	r3, #0
 800b274:	d023      	beq.n	800b2be <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b276:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b278:	6a38      	ldr	r0, [r7, #32]
 800b27a:	f006 fc0d 	bl	8011a98 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b27e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b280:	4613      	mov	r3, r2
 800b282:	00db      	lsls	r3, r3, #3
 800b284:	4413      	add	r3, r2
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	3310      	adds	r3, #16
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	4413      	add	r3, r2
 800b28e:	3304      	adds	r3, #4
 800b290:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	78db      	ldrb	r3, [r3, #3]
 800b296:	2b01      	cmp	r3, #1
 800b298:	d108      	bne.n	800b2ac <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	2200      	movs	r2, #0
 800b29e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f009 ffc4 	bl	8015234 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ae:	015a      	lsls	r2, r3, #5
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	2302      	movs	r3, #2
 800b2bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d003      	beq.n	800b2d0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b2c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 fcea 	bl	800bca4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d8:	085b      	lsrs	r3, r3, #1
 800b2da:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	f47f af2e 	bne.w	800b140 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f007 faf7 	bl	80128dc <USB_ReadInterrupts>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b2f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b2f8:	d122      	bne.n	800b340 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	69fa      	ldr	r2, [r7, #28]
 800b304:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b308:	f023 0301 	bic.w	r3, r3, #1
 800b30c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800b314:	2b01      	cmp	r3, #1
 800b316:	d108      	bne.n	800b32a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2200      	movs	r2, #0
 800b31c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b320:	2100      	movs	r1, #0
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 fef4 	bl	800c110 <HAL_PCDEx_LPM_Callback>
 800b328:	e002      	b.n	800b330 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f009 ff62 	bl	80151f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	695a      	ldr	r2, [r3, #20]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800b33e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4618      	mov	r0, r3
 800b346:	f007 fac9 	bl	80128dc <USB_ReadInterrupts>
 800b34a:	4603      	mov	r3, r0
 800b34c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b350:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b354:	d112      	bne.n	800b37c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	f003 0301 	and.w	r3, r3, #1
 800b362:	2b01      	cmp	r3, #1
 800b364:	d102      	bne.n	800b36c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f009 ff1e 	bl	80151a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	695a      	ldr	r2, [r3, #20]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800b37a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4618      	mov	r0, r3
 800b382:	f007 faab 	bl	80128dc <USB_ReadInterrupts>
 800b386:	4603      	mov	r3, r0
 800b388:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b38c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b390:	d121      	bne.n	800b3d6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	695a      	ldr	r2, [r3, #20]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800b3a0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d111      	bne.n	800b3d0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3ba:	089b      	lsrs	r3, r3, #2
 800b3bc:	f003 020f 	and.w	r2, r3, #15
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b3c6:	2101      	movs	r1, #1
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 fea1 	bl	800c110 <HAL_PCDEx_LPM_Callback>
 800b3ce:	e002      	b.n	800b3d6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f009 fee9 	bl	80151a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f007 fa7e 	bl	80128dc <USB_ReadInterrupts>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b3e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b3ea:	f040 80b7 	bne.w	800b55c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	69fa      	ldr	r2, [r7, #28]
 800b3f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b3fc:	f023 0301 	bic.w	r3, r3, #1
 800b400:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2110      	movs	r1, #16
 800b408:	4618      	mov	r0, r3
 800b40a:	f006 fb45 	bl	8011a98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b40e:	2300      	movs	r3, #0
 800b410:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b412:	e046      	b.n	800b4a2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b416:	015a      	lsls	r2, r3, #5
 800b418:	69fb      	ldr	r3, [r7, #28]
 800b41a:	4413      	add	r3, r2
 800b41c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b420:	461a      	mov	r2, r3
 800b422:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b426:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b42a:	015a      	lsls	r2, r3, #5
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	4413      	add	r3, r2
 800b430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b438:	0151      	lsls	r1, r2, #5
 800b43a:	69fa      	ldr	r2, [r7, #28]
 800b43c:	440a      	add	r2, r1
 800b43e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b442:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b446:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b44a:	015a      	lsls	r2, r3, #5
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	4413      	add	r3, r2
 800b450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b454:	461a      	mov	r2, r3
 800b456:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b45a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b45e:	015a      	lsls	r2, r3, #5
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	4413      	add	r3, r2
 800b464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b46c:	0151      	lsls	r1, r2, #5
 800b46e:	69fa      	ldr	r2, [r7, #28]
 800b470:	440a      	add	r2, r1
 800b472:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b476:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b47a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b47e:	015a      	lsls	r2, r3, #5
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	4413      	add	r3, r2
 800b484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b48c:	0151      	lsls	r1, r2, #5
 800b48e:	69fa      	ldr	r2, [r7, #28]
 800b490:	440a      	add	r2, r1
 800b492:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b496:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b49a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b49e:	3301      	adds	r3, #1
 800b4a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	791b      	ldrb	r3, [r3, #4]
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d3b2      	bcc.n	800b414 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b4ae:	69fb      	ldr	r3, [r7, #28]
 800b4b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4b4:	69db      	ldr	r3, [r3, #28]
 800b4b6:	69fa      	ldr	r2, [r7, #28]
 800b4b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4bc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800b4c0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	7bdb      	ldrb	r3, [r3, #15]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d016      	beq.n	800b4f8 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b4ca:	69fb      	ldr	r3, [r7, #28]
 800b4cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4d4:	69fa      	ldr	r2, [r7, #28]
 800b4d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4da:	f043 030b 	orr.w	r3, r3, #11
 800b4de:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b4e2:	69fb      	ldr	r3, [r7, #28]
 800b4e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4ea:	69fa      	ldr	r2, [r7, #28]
 800b4ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4f0:	f043 030b 	orr.w	r3, r3, #11
 800b4f4:	6453      	str	r3, [r2, #68]	@ 0x44
 800b4f6:	e015      	b.n	800b524 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b4f8:	69fb      	ldr	r3, [r7, #28]
 800b4fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4fe:	695a      	ldr	r2, [r3, #20]
 800b500:	69fb      	ldr	r3, [r7, #28]
 800b502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b506:	4619      	mov	r1, r3
 800b508:	f242 032b 	movw	r3, #8235	@ 0x202b
 800b50c:	4313      	orrs	r3, r2
 800b50e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b510:	69fb      	ldr	r3, [r7, #28]
 800b512:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b516:	691b      	ldr	r3, [r3, #16]
 800b518:	69fa      	ldr	r2, [r7, #28]
 800b51a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b51e:	f043 030b 	orr.w	r3, r3, #11
 800b522:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	69fa      	ldr	r2, [r7, #28]
 800b52e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b532:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b536:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6818      	ldr	r0, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b546:	461a      	mov	r2, r3
 800b548:	f007 fa8e 	bl	8012a68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	695a      	ldr	r2, [r3, #20]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800b55a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4618      	mov	r0, r3
 800b562:	f007 f9bb 	bl	80128dc <USB_ReadInterrupts>
 800b566:	4603      	mov	r3, r0
 800b568:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b56c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b570:	d123      	bne.n	800b5ba <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4618      	mov	r0, r3
 800b578:	f007 fa52 	bl	8012a20 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4618      	mov	r0, r3
 800b582:	f006 fb02 	bl	8011b8a <USB_GetDevSpeed>
 800b586:	4603      	mov	r3, r0
 800b588:	461a      	mov	r2, r3
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681c      	ldr	r4, [r3, #0]
 800b592:	f001 fd9d 	bl	800d0d0 <HAL_RCC_GetHCLKFreq>
 800b596:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b59c:	461a      	mov	r2, r3
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f006 f80c 	bl	80115bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f009 fdd6 	bl	8015156 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	695a      	ldr	r2, [r3, #20]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800b5b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f007 f98c 	bl	80128dc <USB_ReadInterrupts>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	f003 0308 	and.w	r3, r3, #8
 800b5ca:	2b08      	cmp	r3, #8
 800b5cc:	d10a      	bne.n	800b5e4 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f009 fdb3 	bl	801513a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	695a      	ldr	r2, [r3, #20]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f002 0208 	and.w	r2, r2, #8
 800b5e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f007 f977 	bl	80128dc <USB_ReadInterrupts>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5f4:	2b80      	cmp	r3, #128	@ 0x80
 800b5f6:	d123      	bne.n	800b640 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800b5f8:	6a3b      	ldr	r3, [r7, #32]
 800b5fa:	699b      	ldr	r3, [r3, #24]
 800b5fc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b600:	6a3b      	ldr	r3, [r7, #32]
 800b602:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b604:	2301      	movs	r3, #1
 800b606:	627b      	str	r3, [r7, #36]	@ 0x24
 800b608:	e014      	b.n	800b634 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800b60a:	6879      	ldr	r1, [r7, #4]
 800b60c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b60e:	4613      	mov	r3, r2
 800b610:	00db      	lsls	r3, r3, #3
 800b612:	4413      	add	r3, r2
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	440b      	add	r3, r1
 800b618:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d105      	bne.n	800b62e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800b622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b624:	b2db      	uxtb	r3, r3
 800b626:	4619      	mov	r1, r3
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 fb0a 	bl	800bc42 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b630:	3301      	adds	r3, #1
 800b632:	627b      	str	r3, [r7, #36]	@ 0x24
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	791b      	ldrb	r3, [r3, #4]
 800b638:	461a      	mov	r2, r3
 800b63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d3e4      	bcc.n	800b60a <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4618      	mov	r0, r3
 800b646:	f007 f949 	bl	80128dc <USB_ReadInterrupts>
 800b64a:	4603      	mov	r3, r0
 800b64c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b650:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b654:	d13c      	bne.n	800b6d0 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b656:	2301      	movs	r3, #1
 800b658:	627b      	str	r3, [r7, #36]	@ 0x24
 800b65a:	e02b      	b.n	800b6b4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800b65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b65e:	015a      	lsls	r2, r3, #5
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	4413      	add	r3, r2
 800b664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b66c:	6879      	ldr	r1, [r7, #4]
 800b66e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b670:	4613      	mov	r3, r2
 800b672:	00db      	lsls	r3, r3, #3
 800b674:	4413      	add	r3, r2
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	440b      	add	r3, r1
 800b67a:	3318      	adds	r3, #24
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d115      	bne.n	800b6ae <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800b682:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b684:	2b00      	cmp	r3, #0
 800b686:	da12      	bge.n	800b6ae <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800b688:	6879      	ldr	r1, [r7, #4]
 800b68a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b68c:	4613      	mov	r3, r2
 800b68e:	00db      	lsls	r3, r3, #3
 800b690:	4413      	add	r3, r2
 800b692:	009b      	lsls	r3, r3, #2
 800b694:	440b      	add	r3, r1
 800b696:	3317      	adds	r3, #23
 800b698:	2201      	movs	r2, #1
 800b69a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800b69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 faca 	bl	800bc42 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	791b      	ldrb	r3, [r3, #4]
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d3cd      	bcc.n	800b65c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	695a      	ldr	r2, [r3, #20]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800b6ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f007 f901 	bl	80128dc <USB_ReadInterrupts>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b6e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b6e4:	d156      	bne.n	800b794 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6ea:	e045      	b.n	800b778 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800b6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ee:	015a      	lsls	r2, r3, #5
 800b6f0:	69fb      	ldr	r3, [r7, #28]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b6fc:	6879      	ldr	r1, [r7, #4]
 800b6fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b700:	4613      	mov	r3, r2
 800b702:	00db      	lsls	r3, r3, #3
 800b704:	4413      	add	r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	440b      	add	r3, r1
 800b70a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	2b01      	cmp	r3, #1
 800b712:	d12e      	bne.n	800b772 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b714:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b716:	2b00      	cmp	r3, #0
 800b718:	da2b      	bge.n	800b772 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	0c1a      	lsrs	r2, r3, #16
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800b724:	4053      	eors	r3, r2
 800b726:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d121      	bne.n	800b772 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800b72e:	6879      	ldr	r1, [r7, #4]
 800b730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b732:	4613      	mov	r3, r2
 800b734:	00db      	lsls	r3, r3, #3
 800b736:	4413      	add	r3, r2
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	440b      	add	r3, r1
 800b73c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800b740:	2201      	movs	r2, #1
 800b742:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800b744:	6a3b      	ldr	r3, [r7, #32]
 800b746:	699b      	ldr	r3, [r3, #24]
 800b748:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b74c:	6a3b      	ldr	r3, [r7, #32]
 800b74e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800b750:	6a3b      	ldr	r3, [r7, #32]
 800b752:	695b      	ldr	r3, [r3, #20]
 800b754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d10a      	bne.n	800b772 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	69fa      	ldr	r2, [r7, #28]
 800b766:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b76a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b76e:	6053      	str	r3, [r2, #4]
            break;
 800b770:	e008      	b.n	800b784 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b774:	3301      	adds	r3, #1
 800b776:	627b      	str	r3, [r7, #36]	@ 0x24
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	791b      	ldrb	r3, [r3, #4]
 800b77c:	461a      	mov	r2, r3
 800b77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b780:	4293      	cmp	r3, r2
 800b782:	d3b3      	bcc.n	800b6ec <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	695a      	ldr	r2, [r3, #20]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800b792:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4618      	mov	r0, r3
 800b79a:	f007 f89f 	bl	80128dc <USB_ReadInterrupts>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b7a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7a8:	d10a      	bne.n	800b7c0 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f009 fd54 	bl	8015258 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	695a      	ldr	r2, [r3, #20]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800b7be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f007 f889 	bl	80128dc <USB_ReadInterrupts>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	f003 0304 	and.w	r3, r3, #4
 800b7d0:	2b04      	cmp	r3, #4
 800b7d2:	d115      	bne.n	800b800 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b7dc:	69bb      	ldr	r3, [r7, #24]
 800b7de:	f003 0304 	and.w	r3, r3, #4
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d002      	beq.n	800b7ec <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f009 fd44 	bl	8015274 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	6859      	ldr	r1, [r3, #4]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	69ba      	ldr	r2, [r7, #24]
 800b7f8:	430a      	orrs	r2, r1
 800b7fa:	605a      	str	r2, [r3, #4]
 800b7fc:	e000      	b.n	800b800 <HAL_PCD_IRQHandler+0x996>
      return;
 800b7fe:	bf00      	nop
    }
  }
}
 800b800:	3734      	adds	r7, #52	@ 0x34
 800b802:	46bd      	mov	sp, r7
 800b804:	bd90      	pop	{r4, r7, pc}

0800b806 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b082      	sub	sp, #8
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
 800b80e:	460b      	mov	r3, r1
 800b810:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d101      	bne.n	800b820 <HAL_PCD_SetAddress+0x1a>
 800b81c:	2302      	movs	r3, #2
 800b81e:	e012      	b.n	800b846 <HAL_PCD_SetAddress+0x40>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2201      	movs	r2, #1
 800b824:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	78fa      	ldrb	r2, [r7, #3]
 800b82c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	78fa      	ldrb	r2, [r7, #3]
 800b834:	4611      	mov	r1, r2
 800b836:	4618      	mov	r0, r3
 800b838:	f006 ffe8 	bl	801280c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b844:	2300      	movs	r3, #0
}
 800b846:	4618      	mov	r0, r3
 800b848:	3708      	adds	r7, #8
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b84e:	b580      	push	{r7, lr}
 800b850:	b084      	sub	sp, #16
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
 800b856:	4608      	mov	r0, r1
 800b858:	4611      	mov	r1, r2
 800b85a:	461a      	mov	r2, r3
 800b85c:	4603      	mov	r3, r0
 800b85e:	70fb      	strb	r3, [r7, #3]
 800b860:	460b      	mov	r3, r1
 800b862:	803b      	strh	r3, [r7, #0]
 800b864:	4613      	mov	r3, r2
 800b866:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800b868:	2300      	movs	r3, #0
 800b86a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b86c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b870:	2b00      	cmp	r3, #0
 800b872:	da0f      	bge.n	800b894 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b874:	78fb      	ldrb	r3, [r7, #3]
 800b876:	f003 020f 	and.w	r2, r3, #15
 800b87a:	4613      	mov	r3, r2
 800b87c:	00db      	lsls	r3, r3, #3
 800b87e:	4413      	add	r3, r2
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	3310      	adds	r3, #16
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	4413      	add	r3, r2
 800b888:	3304      	adds	r3, #4
 800b88a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2201      	movs	r2, #1
 800b890:	705a      	strb	r2, [r3, #1]
 800b892:	e00f      	b.n	800b8b4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b894:	78fb      	ldrb	r3, [r7, #3]
 800b896:	f003 020f 	and.w	r2, r3, #15
 800b89a:	4613      	mov	r3, r2
 800b89c:	00db      	lsls	r3, r3, #3
 800b89e:	4413      	add	r3, r2
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	3304      	adds	r3, #4
 800b8ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b8b4:	78fb      	ldrb	r3, [r7, #3]
 800b8b6:	f003 030f 	and.w	r3, r3, #15
 800b8ba:	b2da      	uxtb	r2, r3
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800b8c0:	883b      	ldrh	r3, [r7, #0]
 800b8c2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	78ba      	ldrb	r2, [r7, #2]
 800b8ce:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	785b      	ldrb	r3, [r3, #1]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d004      	beq.n	800b8e2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	781b      	ldrb	r3, [r3, #0]
 800b8dc:	461a      	mov	r2, r3
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b8e2:	78bb      	ldrb	r3, [r7, #2]
 800b8e4:	2b02      	cmp	r3, #2
 800b8e6:	d102      	bne.n	800b8ee <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d101      	bne.n	800b8fc <HAL_PCD_EP_Open+0xae>
 800b8f8:	2302      	movs	r3, #2
 800b8fa:	e00e      	b.n	800b91a <HAL_PCD_EP_Open+0xcc>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2201      	movs	r2, #1
 800b900:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68f9      	ldr	r1, [r7, #12]
 800b90a:	4618      	mov	r0, r3
 800b90c:	f006 f962 	bl	8011bd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800b918:	7afb      	ldrb	r3, [r7, #11]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b084      	sub	sp, #16
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
 800b92a:	460b      	mov	r3, r1
 800b92c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b92e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b932:	2b00      	cmp	r3, #0
 800b934:	da0f      	bge.n	800b956 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b936:	78fb      	ldrb	r3, [r7, #3]
 800b938:	f003 020f 	and.w	r2, r3, #15
 800b93c:	4613      	mov	r3, r2
 800b93e:	00db      	lsls	r3, r3, #3
 800b940:	4413      	add	r3, r2
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	3310      	adds	r3, #16
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	4413      	add	r3, r2
 800b94a:	3304      	adds	r3, #4
 800b94c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2201      	movs	r2, #1
 800b952:	705a      	strb	r2, [r3, #1]
 800b954:	e00f      	b.n	800b976 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b956:	78fb      	ldrb	r3, [r7, #3]
 800b958:	f003 020f 	and.w	r2, r3, #15
 800b95c:	4613      	mov	r3, r2
 800b95e:	00db      	lsls	r3, r3, #3
 800b960:	4413      	add	r3, r2
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	4413      	add	r3, r2
 800b96c:	3304      	adds	r3, #4
 800b96e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2200      	movs	r2, #0
 800b974:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800b976:	78fb      	ldrb	r3, [r7, #3]
 800b978:	f003 030f 	and.w	r3, r3, #15
 800b97c:	b2da      	uxtb	r2, r3
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d101      	bne.n	800b990 <HAL_PCD_EP_Close+0x6e>
 800b98c:	2302      	movs	r3, #2
 800b98e:	e00e      	b.n	800b9ae <HAL_PCD_EP_Close+0x8c>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	68f9      	ldr	r1, [r7, #12]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f006 f9a0 	bl	8011ce4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3710      	adds	r7, #16
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b086      	sub	sp, #24
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	60f8      	str	r0, [r7, #12]
 800b9be:	607a      	str	r2, [r7, #4]
 800b9c0:	603b      	str	r3, [r7, #0]
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b9c6:	7afb      	ldrb	r3, [r7, #11]
 800b9c8:	f003 020f 	and.w	r2, r3, #15
 800b9cc:	4613      	mov	r3, r2
 800b9ce:	00db      	lsls	r3, r3, #3
 800b9d0:	4413      	add	r3, r2
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b9d8:	68fa      	ldr	r2, [r7, #12]
 800b9da:	4413      	add	r3, r2
 800b9dc:	3304      	adds	r3, #4
 800b9de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	683a      	ldr	r2, [r7, #0]
 800b9ea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b9f8:	7afb      	ldrb	r3, [r7, #11]
 800b9fa:	f003 030f 	and.w	r3, r3, #15
 800b9fe:	b2da      	uxtb	r2, r3
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	799b      	ldrb	r3, [r3, #6]
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d102      	bne.n	800ba12 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	6818      	ldr	r0, [r3, #0]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	799b      	ldrb	r3, [r3, #6]
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	6979      	ldr	r1, [r7, #20]
 800ba1e:	f006 fa3d 	bl	8011e9c <USB_EPStartXfer>

  return HAL_OK;
 800ba22:	2300      	movs	r3, #0
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3718      	adds	r7, #24
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	460b      	mov	r3, r1
 800ba36:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ba38:	78fb      	ldrb	r3, [r7, #3]
 800ba3a:	f003 020f 	and.w	r2, r3, #15
 800ba3e:	6879      	ldr	r1, [r7, #4]
 800ba40:	4613      	mov	r3, r2
 800ba42:	00db      	lsls	r3, r3, #3
 800ba44:	4413      	add	r3, r2
 800ba46:	009b      	lsls	r3, r3, #2
 800ba48:	440b      	add	r3, r1
 800ba4a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800ba4e:	681b      	ldr	r3, [r3, #0]
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	370c      	adds	r7, #12
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b086      	sub	sp, #24
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	60f8      	str	r0, [r7, #12]
 800ba64:	607a      	str	r2, [r7, #4]
 800ba66:	603b      	str	r3, [r7, #0]
 800ba68:	460b      	mov	r3, r1
 800ba6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba6c:	7afb      	ldrb	r3, [r7, #11]
 800ba6e:	f003 020f 	and.w	r2, r3, #15
 800ba72:	4613      	mov	r3, r2
 800ba74:	00db      	lsls	r3, r3, #3
 800ba76:	4413      	add	r3, r2
 800ba78:	009b      	lsls	r3, r3, #2
 800ba7a:	3310      	adds	r3, #16
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	4413      	add	r3, r2
 800ba80:	3304      	adds	r3, #4
 800ba82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	683a      	ldr	r2, [r7, #0]
 800ba8e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	2200      	movs	r2, #0
 800ba94:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ba9c:	7afb      	ldrb	r3, [r7, #11]
 800ba9e:	f003 030f 	and.w	r3, r3, #15
 800baa2:	b2da      	uxtb	r2, r3
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	799b      	ldrb	r3, [r3, #6]
 800baac:	2b01      	cmp	r3, #1
 800baae:	d102      	bne.n	800bab6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	6818      	ldr	r0, [r3, #0]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	799b      	ldrb	r3, [r3, #6]
 800babe:	461a      	mov	r2, r3
 800bac0:	6979      	ldr	r1, [r7, #20]
 800bac2:	f006 f9eb 	bl	8011e9c <USB_EPStartXfer>

  return HAL_OK;
 800bac6:	2300      	movs	r3, #0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3718      	adds	r7, #24
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	460b      	mov	r3, r1
 800bada:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800badc:	78fb      	ldrb	r3, [r7, #3]
 800bade:	f003 030f 	and.w	r3, r3, #15
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	7912      	ldrb	r2, [r2, #4]
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d901      	bls.n	800baee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800baea:	2301      	movs	r3, #1
 800baec:	e04f      	b.n	800bb8e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800baee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	da0f      	bge.n	800bb16 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800baf6:	78fb      	ldrb	r3, [r7, #3]
 800baf8:	f003 020f 	and.w	r2, r3, #15
 800bafc:	4613      	mov	r3, r2
 800bafe:	00db      	lsls	r3, r3, #3
 800bb00:	4413      	add	r3, r2
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	3310      	adds	r3, #16
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	4413      	add	r3, r2
 800bb0a:	3304      	adds	r3, #4
 800bb0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2201      	movs	r2, #1
 800bb12:	705a      	strb	r2, [r3, #1]
 800bb14:	e00d      	b.n	800bb32 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bb16:	78fa      	ldrb	r2, [r7, #3]
 800bb18:	4613      	mov	r3, r2
 800bb1a:	00db      	lsls	r3, r3, #3
 800bb1c:	4413      	add	r3, r2
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	4413      	add	r3, r2
 800bb28:	3304      	adds	r3, #4
 800bb2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2201      	movs	r2, #1
 800bb36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bb38:	78fb      	ldrb	r3, [r7, #3]
 800bb3a:	f003 030f 	and.w	r3, r3, #15
 800bb3e:	b2da      	uxtb	r2, r3
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bb4a:	2b01      	cmp	r3, #1
 800bb4c:	d101      	bne.n	800bb52 <HAL_PCD_EP_SetStall+0x82>
 800bb4e:	2302      	movs	r3, #2
 800bb50:	e01d      	b.n	800bb8e <HAL_PCD_EP_SetStall+0xbe>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2201      	movs	r2, #1
 800bb56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	68f9      	ldr	r1, [r7, #12]
 800bb60:	4618      	mov	r0, r3
 800bb62:	f006 fd7f 	bl	8012664 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bb66:	78fb      	ldrb	r3, [r7, #3]
 800bb68:	f003 030f 	and.w	r3, r3, #15
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d109      	bne.n	800bb84 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6818      	ldr	r0, [r3, #0]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	7999      	ldrb	r1, [r3, #6]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bb7e:	461a      	mov	r2, r3
 800bb80:	f006 ff72 	bl	8012a68 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b084      	sub	sp, #16
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
 800bb9e:	460b      	mov	r3, r1
 800bba0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800bba2:	78fb      	ldrb	r3, [r7, #3]
 800bba4:	f003 030f 	and.w	r3, r3, #15
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	7912      	ldrb	r2, [r2, #4]
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d901      	bls.n	800bbb4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	e042      	b.n	800bc3a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bbb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	da0f      	bge.n	800bbdc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bbbc:	78fb      	ldrb	r3, [r7, #3]
 800bbbe:	f003 020f 	and.w	r2, r3, #15
 800bbc2:	4613      	mov	r3, r2
 800bbc4:	00db      	lsls	r3, r3, #3
 800bbc6:	4413      	add	r3, r2
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	3310      	adds	r3, #16
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	4413      	add	r3, r2
 800bbd0:	3304      	adds	r3, #4
 800bbd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	705a      	strb	r2, [r3, #1]
 800bbda:	e00f      	b.n	800bbfc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bbdc:	78fb      	ldrb	r3, [r7, #3]
 800bbde:	f003 020f 	and.w	r2, r3, #15
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	00db      	lsls	r3, r3, #3
 800bbe6:	4413      	add	r3, r2
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	3304      	adds	r3, #4
 800bbf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bc02:	78fb      	ldrb	r3, [r7, #3]
 800bc04:	f003 030f 	and.w	r3, r3, #15
 800bc08:	b2da      	uxtb	r2, r3
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d101      	bne.n	800bc1c <HAL_PCD_EP_ClrStall+0x86>
 800bc18:	2302      	movs	r3, #2
 800bc1a:	e00e      	b.n	800bc3a <HAL_PCD_EP_ClrStall+0xa4>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	68f9      	ldr	r1, [r7, #12]
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f006 fd88 	bl	8012740 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2200      	movs	r2, #0
 800bc34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bc38:	2300      	movs	r3, #0
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3710      	adds	r7, #16
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bc42:	b580      	push	{r7, lr}
 800bc44:	b084      	sub	sp, #16
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800bc4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	da0c      	bge.n	800bc70 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bc56:	78fb      	ldrb	r3, [r7, #3]
 800bc58:	f003 020f 	and.w	r2, r3, #15
 800bc5c:	4613      	mov	r3, r2
 800bc5e:	00db      	lsls	r3, r3, #3
 800bc60:	4413      	add	r3, r2
 800bc62:	009b      	lsls	r3, r3, #2
 800bc64:	3310      	adds	r3, #16
 800bc66:	687a      	ldr	r2, [r7, #4]
 800bc68:	4413      	add	r3, r2
 800bc6a:	3304      	adds	r3, #4
 800bc6c:	60fb      	str	r3, [r7, #12]
 800bc6e:	e00c      	b.n	800bc8a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bc70:	78fb      	ldrb	r3, [r7, #3]
 800bc72:	f003 020f 	and.w	r2, r3, #15
 800bc76:	4613      	mov	r3, r2
 800bc78:	00db      	lsls	r3, r3, #3
 800bc7a:	4413      	add	r3, r2
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	4413      	add	r3, r2
 800bc86:	3304      	adds	r3, #4
 800bc88:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	68f9      	ldr	r1, [r7, #12]
 800bc90:	4618      	mov	r0, r3
 800bc92:	f006 fba7 	bl	80123e4 <USB_EPStopXfer>
 800bc96:	4603      	mov	r3, r0
 800bc98:	72fb      	strb	r3, [r7, #11]

  return ret;
 800bc9a:	7afb      	ldrb	r3, [r7, #11]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3710      	adds	r7, #16
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b08a      	sub	sp, #40	@ 0x28
 800bca8:	af02      	add	r7, sp, #8
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800bcb8:	683a      	ldr	r2, [r7, #0]
 800bcba:	4613      	mov	r3, r2
 800bcbc:	00db      	lsls	r3, r3, #3
 800bcbe:	4413      	add	r3, r2
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	3310      	adds	r3, #16
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	4413      	add	r3, r2
 800bcc8:	3304      	adds	r3, #4
 800bcca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	695a      	ldr	r2, [r3, #20]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	691b      	ldr	r3, [r3, #16]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d901      	bls.n	800bcdc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	e06b      	b.n	800bdb4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	691a      	ldr	r2, [r3, #16]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	695b      	ldr	r3, [r3, #20]
 800bce4:	1ad3      	subs	r3, r2, r3
 800bce6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	689b      	ldr	r3, [r3, #8]
 800bcec:	69fa      	ldr	r2, [r7, #28]
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d902      	bls.n	800bcf8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800bcf8:	69fb      	ldr	r3, [r7, #28]
 800bcfa:	3303      	adds	r3, #3
 800bcfc:	089b      	lsrs	r3, r3, #2
 800bcfe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bd00:	e02a      	b.n	800bd58 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	691a      	ldr	r2, [r3, #16]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	695b      	ldr	r3, [r3, #20]
 800bd0a:	1ad3      	subs	r3, r2, r3
 800bd0c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	689b      	ldr	r3, [r3, #8]
 800bd12:	69fa      	ldr	r2, [r7, #28]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d902      	bls.n	800bd1e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	3303      	adds	r3, #3
 800bd22:	089b      	lsrs	r3, r3, #2
 800bd24:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	68d9      	ldr	r1, [r3, #12]
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	b2da      	uxtb	r2, r3
 800bd2e:	69fb      	ldr	r3, [r7, #28]
 800bd30:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bd36:	9300      	str	r3, [sp, #0]
 800bd38:	4603      	mov	r3, r0
 800bd3a:	6978      	ldr	r0, [r7, #20]
 800bd3c:	f006 fbfc 	bl	8012538 <USB_WritePacket>

    ep->xfer_buff  += len;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	68da      	ldr	r2, [r3, #12]
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	441a      	add	r2, r3
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	695a      	ldr	r2, [r3, #20]
 800bd50:	69fb      	ldr	r3, [r7, #28]
 800bd52:	441a      	add	r2, r3
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	015a      	lsls	r2, r3, #5
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	4413      	add	r3, r2
 800bd60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd64:	699b      	ldr	r3, [r3, #24]
 800bd66:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bd68:	69ba      	ldr	r2, [r7, #24]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d809      	bhi.n	800bd82 <PCD_WriteEmptyTxFifo+0xde>
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	695a      	ldr	r2, [r3, #20]
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d203      	bcs.n	800bd82 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	691b      	ldr	r3, [r3, #16]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d1bf      	bne.n	800bd02 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	691a      	ldr	r2, [r3, #16]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	695b      	ldr	r3, [r3, #20]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d811      	bhi.n	800bdb2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	f003 030f 	and.w	r3, r3, #15
 800bd94:	2201      	movs	r2, #1
 800bd96:	fa02 f303 	lsl.w	r3, r2, r3
 800bd9a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bda2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	43db      	mvns	r3, r3
 800bda8:	6939      	ldr	r1, [r7, #16]
 800bdaa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bdae:	4013      	ands	r3, r2
 800bdb0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800bdb2:	2300      	movs	r3, #0
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3720      	adds	r7, #32
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b088      	sub	sp, #32
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	333c      	adds	r3, #60	@ 0x3c
 800bdd4:	3304      	adds	r3, #4
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	015a      	lsls	r2, r3, #5
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	4413      	add	r3, r2
 800bde2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	799b      	ldrb	r3, [r3, #6]
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	d17b      	bne.n	800beea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	f003 0308 	and.w	r3, r3, #8
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d015      	beq.n	800be28 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	4a61      	ldr	r2, [pc, #388]	@ (800bf84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800be00:	4293      	cmp	r3, r2
 800be02:	f240 80b9 	bls.w	800bf78 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f000 80b3 	beq.w	800bf78 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	015a      	lsls	r2, r3, #5
 800be16:	69bb      	ldr	r3, [r7, #24]
 800be18:	4413      	add	r3, r2
 800be1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be1e:	461a      	mov	r2, r3
 800be20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be24:	6093      	str	r3, [r2, #8]
 800be26:	e0a7      	b.n	800bf78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	f003 0320 	and.w	r3, r3, #32
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d009      	beq.n	800be46 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	015a      	lsls	r2, r3, #5
 800be36:	69bb      	ldr	r3, [r7, #24]
 800be38:	4413      	add	r3, r2
 800be3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be3e:	461a      	mov	r2, r3
 800be40:	2320      	movs	r3, #32
 800be42:	6093      	str	r3, [r2, #8]
 800be44:	e098      	b.n	800bf78 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	f040 8093 	bne.w	800bf78 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	4a4b      	ldr	r2, [pc, #300]	@ (800bf84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d90f      	bls.n	800be7a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800be60:	2b00      	cmp	r3, #0
 800be62:	d00a      	beq.n	800be7a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	015a      	lsls	r2, r3, #5
 800be68:	69bb      	ldr	r3, [r7, #24]
 800be6a:	4413      	add	r3, r2
 800be6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be70:	461a      	mov	r2, r3
 800be72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be76:	6093      	str	r3, [r2, #8]
 800be78:	e07e      	b.n	800bf78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800be7a:	683a      	ldr	r2, [r7, #0]
 800be7c:	4613      	mov	r3, r2
 800be7e:	00db      	lsls	r3, r3, #3
 800be80:	4413      	add	r3, r2
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	4413      	add	r3, r2
 800be8c:	3304      	adds	r3, #4
 800be8e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	6a1a      	ldr	r2, [r3, #32]
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	0159      	lsls	r1, r3, #5
 800be98:	69bb      	ldr	r3, [r7, #24]
 800be9a:	440b      	add	r3, r1
 800be9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bea0:	691b      	ldr	r3, [r3, #16]
 800bea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bea6:	1ad2      	subs	r2, r2, r3
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d114      	bne.n	800bedc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	691b      	ldr	r3, [r3, #16]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d109      	bne.n	800bece <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6818      	ldr	r0, [r3, #0]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bec4:	461a      	mov	r2, r3
 800bec6:	2101      	movs	r1, #1
 800bec8:	f006 fdce 	bl	8012a68 <USB_EP0_OutStart>
 800becc:	e006      	b.n	800bedc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	68da      	ldr	r2, [r3, #12]
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	695b      	ldr	r3, [r3, #20]
 800bed6:	441a      	add	r2, r3
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	4619      	mov	r1, r3
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f009 f8f4 	bl	80150d0 <HAL_PCD_DataOutStageCallback>
 800bee8:	e046      	b.n	800bf78 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	4a26      	ldr	r2, [pc, #152]	@ (800bf88 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d124      	bne.n	800bf3c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d00a      	beq.n	800bf12 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	015a      	lsls	r2, r3, #5
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	4413      	add	r3, r2
 800bf04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf08:	461a      	mov	r2, r3
 800bf0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf0e:	6093      	str	r3, [r2, #8]
 800bf10:	e032      	b.n	800bf78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	f003 0320 	and.w	r3, r3, #32
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d008      	beq.n	800bf2e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	015a      	lsls	r2, r3, #5
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	4413      	add	r3, r2
 800bf24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf28:	461a      	mov	r2, r3
 800bf2a:	2320      	movs	r3, #32
 800bf2c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	4619      	mov	r1, r3
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f009 f8cb 	bl	80150d0 <HAL_PCD_DataOutStageCallback>
 800bf3a:	e01d      	b.n	800bf78 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d114      	bne.n	800bf6c <PCD_EP_OutXfrComplete_int+0x1b0>
 800bf42:	6879      	ldr	r1, [r7, #4]
 800bf44:	683a      	ldr	r2, [r7, #0]
 800bf46:	4613      	mov	r3, r2
 800bf48:	00db      	lsls	r3, r3, #3
 800bf4a:	4413      	add	r3, r2
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	440b      	add	r3, r1
 800bf50:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d108      	bne.n	800bf6c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6818      	ldr	r0, [r3, #0]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bf64:	461a      	mov	r2, r3
 800bf66:	2100      	movs	r1, #0
 800bf68:	f006 fd7e 	bl	8012a68 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	4619      	mov	r1, r3
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f009 f8ac 	bl	80150d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3720      	adds	r7, #32
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	4f54300a 	.word	0x4f54300a
 800bf88:	4f54310a 	.word	0x4f54310a

0800bf8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b086      	sub	sp, #24
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	333c      	adds	r3, #60	@ 0x3c
 800bfa4:	3304      	adds	r3, #4
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	015a      	lsls	r2, r3, #5
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	4413      	add	r3, r2
 800bfb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfb6:	689b      	ldr	r3, [r3, #8]
 800bfb8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	4a15      	ldr	r2, [pc, #84]	@ (800c014 <PCD_EP_OutSetupPacket_int+0x88>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d90e      	bls.n	800bfe0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d009      	beq.n	800bfe0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	015a      	lsls	r2, r3, #5
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfd8:	461a      	mov	r2, r3
 800bfda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bfde:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f009 f863 	bl	80150ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	4a0a      	ldr	r2, [pc, #40]	@ (800c014 <PCD_EP_OutSetupPacket_int+0x88>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d90c      	bls.n	800c008 <PCD_EP_OutSetupPacket_int+0x7c>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	799b      	ldrb	r3, [r3, #6]
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	d108      	bne.n	800c008 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6818      	ldr	r0, [r3, #0]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c000:	461a      	mov	r2, r3
 800c002:	2101      	movs	r1, #1
 800c004:	f006 fd30 	bl	8012a68 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c008:	2300      	movs	r3, #0
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3718      	adds	r7, #24
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	4f54300a 	.word	0x4f54300a

0800c018 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c018:	b480      	push	{r7}
 800c01a:	b085      	sub	sp, #20
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	460b      	mov	r3, r1
 800c022:	70fb      	strb	r3, [r7, #3]
 800c024:	4613      	mov	r3, r2
 800c026:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c02e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c030:	78fb      	ldrb	r3, [r7, #3]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d107      	bne.n	800c046 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c036:	883b      	ldrh	r3, [r7, #0]
 800c038:	0419      	lsls	r1, r3, #16
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	68ba      	ldr	r2, [r7, #8]
 800c040:	430a      	orrs	r2, r1
 800c042:	629a      	str	r2, [r3, #40]	@ 0x28
 800c044:	e028      	b.n	800c098 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c04c:	0c1b      	lsrs	r3, r3, #16
 800c04e:	68ba      	ldr	r2, [r7, #8]
 800c050:	4413      	add	r3, r2
 800c052:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c054:	2300      	movs	r3, #0
 800c056:	73fb      	strb	r3, [r7, #15]
 800c058:	e00d      	b.n	800c076 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	7bfb      	ldrb	r3, [r7, #15]
 800c060:	3340      	adds	r3, #64	@ 0x40
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	4413      	add	r3, r2
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	0c1b      	lsrs	r3, r3, #16
 800c06a:	68ba      	ldr	r2, [r7, #8]
 800c06c:	4413      	add	r3, r2
 800c06e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c070:	7bfb      	ldrb	r3, [r7, #15]
 800c072:	3301      	adds	r3, #1
 800c074:	73fb      	strb	r3, [r7, #15]
 800c076:	7bfa      	ldrb	r2, [r7, #15]
 800c078:	78fb      	ldrb	r3, [r7, #3]
 800c07a:	3b01      	subs	r3, #1
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d3ec      	bcc.n	800c05a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c080:	883b      	ldrh	r3, [r7, #0]
 800c082:	0418      	lsls	r0, r3, #16
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6819      	ldr	r1, [r3, #0]
 800c088:	78fb      	ldrb	r3, [r7, #3]
 800c08a:	3b01      	subs	r3, #1
 800c08c:	68ba      	ldr	r2, [r7, #8]
 800c08e:	4302      	orrs	r2, r0
 800c090:	3340      	adds	r3, #64	@ 0x40
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	440b      	add	r3, r1
 800c096:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c098:	2300      	movs	r3, #0
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3714      	adds	r7, #20
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr

0800c0a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c0a6:	b480      	push	{r7}
 800c0a8:	b083      	sub	sp, #12
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	887a      	ldrh	r2, [r7, #2]
 800c0b8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c0ba:	2300      	movs	r3, #0
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b085      	sub	sp, #20
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2201      	movs	r2, #1
 800c0da:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	699b      	ldr	r3, [r3, #24]
 800c0ea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c0f6:	4b05      	ldr	r3, [pc, #20]	@ (800c10c <HAL_PCDEx_ActivateLPM+0x44>)
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800c0fe:	2300      	movs	r3, #0
}
 800c100:	4618      	mov	r0, r3
 800c102:	3714      	adds	r7, #20
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr
 800c10c:	10000003 	.word	0x10000003

0800c110 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	460b      	mov	r3, r1
 800c11a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c11c:	bf00      	nop
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800c130:	4b19      	ldr	r3, [pc, #100]	@ (800c198 <HAL_PWREx_ConfigSupply+0x70>)
 800c132:	68db      	ldr	r3, [r3, #12]
 800c134:	f003 0304 	and.w	r3, r3, #4
 800c138:	2b04      	cmp	r3, #4
 800c13a:	d00a      	beq.n	800c152 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c13c:	4b16      	ldr	r3, [pc, #88]	@ (800c198 <HAL_PWREx_ConfigSupply+0x70>)
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	f003 0307 	and.w	r3, r3, #7
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	429a      	cmp	r2, r3
 800c148:	d001      	beq.n	800c14e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c14a:	2301      	movs	r3, #1
 800c14c:	e01f      	b.n	800c18e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c14e:	2300      	movs	r3, #0
 800c150:	e01d      	b.n	800c18e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c152:	4b11      	ldr	r3, [pc, #68]	@ (800c198 <HAL_PWREx_ConfigSupply+0x70>)
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	f023 0207 	bic.w	r2, r3, #7
 800c15a:	490f      	ldr	r1, [pc, #60]	@ (800c198 <HAL_PWREx_ConfigSupply+0x70>)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	4313      	orrs	r3, r2
 800c160:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c162:	f7f6 f9a3 	bl	80024ac <HAL_GetTick>
 800c166:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c168:	e009      	b.n	800c17e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c16a:	f7f6 f99f 	bl	80024ac <HAL_GetTick>
 800c16e:	4602      	mov	r2, r0
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	1ad3      	subs	r3, r2, r3
 800c174:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c178:	d901      	bls.n	800c17e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c17a:	2301      	movs	r3, #1
 800c17c:	e007      	b.n	800c18e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c17e:	4b06      	ldr	r3, [pc, #24]	@ (800c198 <HAL_PWREx_ConfigSupply+0x70>)
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c18a:	d1ee      	bne.n	800c16a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c18c:	2300      	movs	r3, #0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3710      	adds	r7, #16
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	58024800 	.word	0x58024800

0800c19c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800c19c:	b480      	push	{r7}
 800c19e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800c1a0:	4b05      	ldr	r3, [pc, #20]	@ (800c1b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	4a04      	ldr	r2, [pc, #16]	@ (800c1b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c1a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c1aa:	60d3      	str	r3, [r2, #12]
}
 800c1ac:	bf00      	nop
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr
 800c1b6:	bf00      	nop
 800c1b8:	58024800 	.word	0x58024800

0800c1bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b08c      	sub	sp, #48	@ 0x30
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d102      	bne.n	800c1d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	f000 bc48 	b.w	800ca60 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f003 0301 	and.w	r3, r3, #1
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	f000 8088 	beq.w	800c2ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c1de:	4b99      	ldr	r3, [pc, #612]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c1e0:	691b      	ldr	r3, [r3, #16]
 800c1e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c1e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c1e8:	4b96      	ldr	r3, [pc, #600]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c1ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c1ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1f0:	2b10      	cmp	r3, #16
 800c1f2:	d007      	beq.n	800c204 <HAL_RCC_OscConfig+0x48>
 800c1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1f6:	2b18      	cmp	r3, #24
 800c1f8:	d111      	bne.n	800c21e <HAL_RCC_OscConfig+0x62>
 800c1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1fc:	f003 0303 	and.w	r3, r3, #3
 800c200:	2b02      	cmp	r3, #2
 800c202:	d10c      	bne.n	800c21e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c204:	4b8f      	ldr	r3, [pc, #572]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d06d      	beq.n	800c2ec <HAL_RCC_OscConfig+0x130>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d169      	bne.n	800c2ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c218:	2301      	movs	r3, #1
 800c21a:	f000 bc21 	b.w	800ca60 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c226:	d106      	bne.n	800c236 <HAL_RCC_OscConfig+0x7a>
 800c228:	4b86      	ldr	r3, [pc, #536]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a85      	ldr	r2, [pc, #532]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c22e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c232:	6013      	str	r3, [r2, #0]
 800c234:	e02e      	b.n	800c294 <HAL_RCC_OscConfig+0xd8>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d10c      	bne.n	800c258 <HAL_RCC_OscConfig+0x9c>
 800c23e:	4b81      	ldr	r3, [pc, #516]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4a80      	ldr	r2, [pc, #512]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c248:	6013      	str	r3, [r2, #0]
 800c24a:	4b7e      	ldr	r3, [pc, #504]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4a7d      	ldr	r2, [pc, #500]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c250:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c254:	6013      	str	r3, [r2, #0]
 800c256:	e01d      	b.n	800c294 <HAL_RCC_OscConfig+0xd8>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c260:	d10c      	bne.n	800c27c <HAL_RCC_OscConfig+0xc0>
 800c262:	4b78      	ldr	r3, [pc, #480]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	4a77      	ldr	r2, [pc, #476]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c26c:	6013      	str	r3, [r2, #0]
 800c26e:	4b75      	ldr	r3, [pc, #468]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	4a74      	ldr	r2, [pc, #464]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c278:	6013      	str	r3, [r2, #0]
 800c27a:	e00b      	b.n	800c294 <HAL_RCC_OscConfig+0xd8>
 800c27c:	4b71      	ldr	r3, [pc, #452]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a70      	ldr	r2, [pc, #448]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c286:	6013      	str	r3, [r2, #0]
 800c288:	4b6e      	ldr	r3, [pc, #440]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a6d      	ldr	r2, [pc, #436]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c28e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d013      	beq.n	800c2c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c29c:	f7f6 f906 	bl	80024ac <HAL_GetTick>
 800c2a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c2a2:	e008      	b.n	800c2b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c2a4:	f7f6 f902 	bl	80024ac <HAL_GetTick>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ac:	1ad3      	subs	r3, r2, r3
 800c2ae:	2b64      	cmp	r3, #100	@ 0x64
 800c2b0:	d901      	bls.n	800c2b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c2b2:	2303      	movs	r3, #3
 800c2b4:	e3d4      	b.n	800ca60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c2b6:	4b63      	ldr	r3, [pc, #396]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d0f0      	beq.n	800c2a4 <HAL_RCC_OscConfig+0xe8>
 800c2c2:	e014      	b.n	800c2ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2c4:	f7f6 f8f2 	bl	80024ac <HAL_GetTick>
 800c2c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c2ca:	e008      	b.n	800c2de <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c2cc:	f7f6 f8ee 	bl	80024ac <HAL_GetTick>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d4:	1ad3      	subs	r3, r2, r3
 800c2d6:	2b64      	cmp	r3, #100	@ 0x64
 800c2d8:	d901      	bls.n	800c2de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c2da:	2303      	movs	r3, #3
 800c2dc:	e3c0      	b.n	800ca60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c2de:	4b59      	ldr	r3, [pc, #356]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d1f0      	bne.n	800c2cc <HAL_RCC_OscConfig+0x110>
 800c2ea:	e000      	b.n	800c2ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c2ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f003 0302 	and.w	r3, r3, #2
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	f000 80ca 	beq.w	800c490 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c2fc:	4b51      	ldr	r3, [pc, #324]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c2fe:	691b      	ldr	r3, [r3, #16]
 800c300:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c304:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c306:	4b4f      	ldr	r3, [pc, #316]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c30a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c30c:	6a3b      	ldr	r3, [r7, #32]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d007      	beq.n	800c322 <HAL_RCC_OscConfig+0x166>
 800c312:	6a3b      	ldr	r3, [r7, #32]
 800c314:	2b18      	cmp	r3, #24
 800c316:	d156      	bne.n	800c3c6 <HAL_RCC_OscConfig+0x20a>
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	f003 0303 	and.w	r3, r3, #3
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d151      	bne.n	800c3c6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c322:	4b48      	ldr	r3, [pc, #288]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f003 0304 	and.w	r3, r3, #4
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d005      	beq.n	800c33a <HAL_RCC_OscConfig+0x17e>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	68db      	ldr	r3, [r3, #12]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d101      	bne.n	800c33a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800c336:	2301      	movs	r3, #1
 800c338:	e392      	b.n	800ca60 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c33a:	4b42      	ldr	r3, [pc, #264]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f023 0219 	bic.w	r2, r3, #25
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	68db      	ldr	r3, [r3, #12]
 800c346:	493f      	ldr	r1, [pc, #252]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c348:	4313      	orrs	r3, r2
 800c34a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c34c:	f7f6 f8ae 	bl	80024ac <HAL_GetTick>
 800c350:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c352:	e008      	b.n	800c366 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c354:	f7f6 f8aa 	bl	80024ac <HAL_GetTick>
 800c358:	4602      	mov	r2, r0
 800c35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c35c:	1ad3      	subs	r3, r2, r3
 800c35e:	2b02      	cmp	r3, #2
 800c360:	d901      	bls.n	800c366 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c362:	2303      	movs	r3, #3
 800c364:	e37c      	b.n	800ca60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c366:	4b37      	ldr	r3, [pc, #220]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f003 0304 	and.w	r3, r3, #4
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d0f0      	beq.n	800c354 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c372:	f7f6 f8cb 	bl	800250c <HAL_GetREVID>
 800c376:	4603      	mov	r3, r0
 800c378:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d817      	bhi.n	800c3b0 <HAL_RCC_OscConfig+0x1f4>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	691b      	ldr	r3, [r3, #16]
 800c384:	2b40      	cmp	r3, #64	@ 0x40
 800c386:	d108      	bne.n	800c39a <HAL_RCC_OscConfig+0x1de>
 800c388:	4b2e      	ldr	r3, [pc, #184]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800c390:	4a2c      	ldr	r2, [pc, #176]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c396:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c398:	e07a      	b.n	800c490 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c39a:	4b2a      	ldr	r3, [pc, #168]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	691b      	ldr	r3, [r3, #16]
 800c3a6:	031b      	lsls	r3, r3, #12
 800c3a8:	4926      	ldr	r1, [pc, #152]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c3ae:	e06f      	b.n	800c490 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c3b0:	4b24      	ldr	r3, [pc, #144]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	691b      	ldr	r3, [r3, #16]
 800c3bc:	061b      	lsls	r3, r3, #24
 800c3be:	4921      	ldr	r1, [pc, #132]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c3c4:	e064      	b.n	800c490 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	68db      	ldr	r3, [r3, #12]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d047      	beq.n	800c45e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c3ce:	4b1d      	ldr	r3, [pc, #116]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f023 0219 	bic.w	r2, r3, #25
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	491a      	ldr	r1, [pc, #104]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3e0:	f7f6 f864 	bl	80024ac <HAL_GetTick>
 800c3e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c3e6:	e008      	b.n	800c3fa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c3e8:	f7f6 f860 	bl	80024ac <HAL_GetTick>
 800c3ec:	4602      	mov	r2, r0
 800c3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f0:	1ad3      	subs	r3, r2, r3
 800c3f2:	2b02      	cmp	r3, #2
 800c3f4:	d901      	bls.n	800c3fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c3f6:	2303      	movs	r3, #3
 800c3f8:	e332      	b.n	800ca60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c3fa:	4b12      	ldr	r3, [pc, #72]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f003 0304 	and.w	r3, r3, #4
 800c402:	2b00      	cmp	r3, #0
 800c404:	d0f0      	beq.n	800c3e8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c406:	f7f6 f881 	bl	800250c <HAL_GetREVID>
 800c40a:	4603      	mov	r3, r0
 800c40c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c410:	4293      	cmp	r3, r2
 800c412:	d819      	bhi.n	800c448 <HAL_RCC_OscConfig+0x28c>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	691b      	ldr	r3, [r3, #16]
 800c418:	2b40      	cmp	r3, #64	@ 0x40
 800c41a:	d108      	bne.n	800c42e <HAL_RCC_OscConfig+0x272>
 800c41c:	4b09      	ldr	r3, [pc, #36]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800c424:	4a07      	ldr	r2, [pc, #28]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c42a:	6053      	str	r3, [r2, #4]
 800c42c:	e030      	b.n	800c490 <HAL_RCC_OscConfig+0x2d4>
 800c42e:	4b05      	ldr	r3, [pc, #20]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	691b      	ldr	r3, [r3, #16]
 800c43a:	031b      	lsls	r3, r3, #12
 800c43c:	4901      	ldr	r1, [pc, #4]	@ (800c444 <HAL_RCC_OscConfig+0x288>)
 800c43e:	4313      	orrs	r3, r2
 800c440:	604b      	str	r3, [r1, #4]
 800c442:	e025      	b.n	800c490 <HAL_RCC_OscConfig+0x2d4>
 800c444:	58024400 	.word	0x58024400
 800c448:	4b9a      	ldr	r3, [pc, #616]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	691b      	ldr	r3, [r3, #16]
 800c454:	061b      	lsls	r3, r3, #24
 800c456:	4997      	ldr	r1, [pc, #604]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c458:	4313      	orrs	r3, r2
 800c45a:	604b      	str	r3, [r1, #4]
 800c45c:	e018      	b.n	800c490 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c45e:	4b95      	ldr	r3, [pc, #596]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4a94      	ldr	r2, [pc, #592]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c464:	f023 0301 	bic.w	r3, r3, #1
 800c468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c46a:	f7f6 f81f 	bl	80024ac <HAL_GetTick>
 800c46e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c470:	e008      	b.n	800c484 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c472:	f7f6 f81b 	bl	80024ac <HAL_GetTick>
 800c476:	4602      	mov	r2, r0
 800c478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c47a:	1ad3      	subs	r3, r2, r3
 800c47c:	2b02      	cmp	r3, #2
 800c47e:	d901      	bls.n	800c484 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800c480:	2303      	movs	r3, #3
 800c482:	e2ed      	b.n	800ca60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c484:	4b8b      	ldr	r3, [pc, #556]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f003 0304 	and.w	r3, r3, #4
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d1f0      	bne.n	800c472 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f003 0310 	and.w	r3, r3, #16
 800c498:	2b00      	cmp	r3, #0
 800c49a:	f000 80a9 	beq.w	800c5f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c49e:	4b85      	ldr	r3, [pc, #532]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c4a0:	691b      	ldr	r3, [r3, #16]
 800c4a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c4a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c4a8:	4b82      	ldr	r3, [pc, #520]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c4aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4ac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800c4ae:	69bb      	ldr	r3, [r7, #24]
 800c4b0:	2b08      	cmp	r3, #8
 800c4b2:	d007      	beq.n	800c4c4 <HAL_RCC_OscConfig+0x308>
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	2b18      	cmp	r3, #24
 800c4b8:	d13a      	bne.n	800c530 <HAL_RCC_OscConfig+0x374>
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	f003 0303 	and.w	r3, r3, #3
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d135      	bne.n	800c530 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c4c4:	4b7b      	ldr	r3, [pc, #492]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d005      	beq.n	800c4dc <HAL_RCC_OscConfig+0x320>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	69db      	ldr	r3, [r3, #28]
 800c4d4:	2b80      	cmp	r3, #128	@ 0x80
 800c4d6:	d001      	beq.n	800c4dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800c4d8:	2301      	movs	r3, #1
 800c4da:	e2c1      	b.n	800ca60 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c4dc:	f7f6 f816 	bl	800250c <HAL_GetREVID>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d817      	bhi.n	800c51a <HAL_RCC_OscConfig+0x35e>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6a1b      	ldr	r3, [r3, #32]
 800c4ee:	2b20      	cmp	r3, #32
 800c4f0:	d108      	bne.n	800c504 <HAL_RCC_OscConfig+0x348>
 800c4f2:	4b70      	ldr	r3, [pc, #448]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800c4fa:	4a6e      	ldr	r2, [pc, #440]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c4fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c500:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c502:	e075      	b.n	800c5f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c504:	4b6b      	ldr	r3, [pc, #428]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6a1b      	ldr	r3, [r3, #32]
 800c510:	069b      	lsls	r3, r3, #26
 800c512:	4968      	ldr	r1, [pc, #416]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c514:	4313      	orrs	r3, r2
 800c516:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c518:	e06a      	b.n	800c5f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c51a:	4b66      	ldr	r3, [pc, #408]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6a1b      	ldr	r3, [r3, #32]
 800c526:	061b      	lsls	r3, r3, #24
 800c528:	4962      	ldr	r1, [pc, #392]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c52a:	4313      	orrs	r3, r2
 800c52c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c52e:	e05f      	b.n	800c5f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	69db      	ldr	r3, [r3, #28]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d042      	beq.n	800c5be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800c538:	4b5e      	ldr	r3, [pc, #376]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4a5d      	ldr	r2, [pc, #372]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c53e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c544:	f7f5 ffb2 	bl	80024ac <HAL_GetTick>
 800c548:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c54a:	e008      	b.n	800c55e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c54c:	f7f5 ffae 	bl	80024ac <HAL_GetTick>
 800c550:	4602      	mov	r2, r0
 800c552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c554:	1ad3      	subs	r3, r2, r3
 800c556:	2b02      	cmp	r3, #2
 800c558:	d901      	bls.n	800c55e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800c55a:	2303      	movs	r3, #3
 800c55c:	e280      	b.n	800ca60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c55e:	4b55      	ldr	r3, [pc, #340]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c566:	2b00      	cmp	r3, #0
 800c568:	d0f0      	beq.n	800c54c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c56a:	f7f5 ffcf 	bl	800250c <HAL_GetREVID>
 800c56e:	4603      	mov	r3, r0
 800c570:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c574:	4293      	cmp	r3, r2
 800c576:	d817      	bhi.n	800c5a8 <HAL_RCC_OscConfig+0x3ec>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6a1b      	ldr	r3, [r3, #32]
 800c57c:	2b20      	cmp	r3, #32
 800c57e:	d108      	bne.n	800c592 <HAL_RCC_OscConfig+0x3d6>
 800c580:	4b4c      	ldr	r3, [pc, #304]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c582:	685b      	ldr	r3, [r3, #4]
 800c584:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800c588:	4a4a      	ldr	r2, [pc, #296]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c58a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c58e:	6053      	str	r3, [r2, #4]
 800c590:	e02e      	b.n	800c5f0 <HAL_RCC_OscConfig+0x434>
 800c592:	4b48      	ldr	r3, [pc, #288]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6a1b      	ldr	r3, [r3, #32]
 800c59e:	069b      	lsls	r3, r3, #26
 800c5a0:	4944      	ldr	r1, [pc, #272]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	604b      	str	r3, [r1, #4]
 800c5a6:	e023      	b.n	800c5f0 <HAL_RCC_OscConfig+0x434>
 800c5a8:	4b42      	ldr	r3, [pc, #264]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c5aa:	68db      	ldr	r3, [r3, #12]
 800c5ac:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6a1b      	ldr	r3, [r3, #32]
 800c5b4:	061b      	lsls	r3, r3, #24
 800c5b6:	493f      	ldr	r1, [pc, #252]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	60cb      	str	r3, [r1, #12]
 800c5bc:	e018      	b.n	800c5f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800c5be:	4b3d      	ldr	r3, [pc, #244]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4a3c      	ldr	r2, [pc, #240]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c5c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c5c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5ca:	f7f5 ff6f 	bl	80024ac <HAL_GetTick>
 800c5ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c5d0:	e008      	b.n	800c5e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c5d2:	f7f5 ff6b 	bl	80024ac <HAL_GetTick>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5da:	1ad3      	subs	r3, r2, r3
 800c5dc:	2b02      	cmp	r3, #2
 800c5de:	d901      	bls.n	800c5e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c5e0:	2303      	movs	r3, #3
 800c5e2:	e23d      	b.n	800ca60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c5e4:	4b33      	ldr	r3, [pc, #204]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d1f0      	bne.n	800c5d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f003 0308 	and.w	r3, r3, #8
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d036      	beq.n	800c66a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	695b      	ldr	r3, [r3, #20]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d019      	beq.n	800c638 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c604:	4b2b      	ldr	r3, [pc, #172]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c606:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c608:	4a2a      	ldr	r2, [pc, #168]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c60a:	f043 0301 	orr.w	r3, r3, #1
 800c60e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c610:	f7f5 ff4c 	bl	80024ac <HAL_GetTick>
 800c614:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c616:	e008      	b.n	800c62a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c618:	f7f5 ff48 	bl	80024ac <HAL_GetTick>
 800c61c:	4602      	mov	r2, r0
 800c61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c620:	1ad3      	subs	r3, r2, r3
 800c622:	2b02      	cmp	r3, #2
 800c624:	d901      	bls.n	800c62a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800c626:	2303      	movs	r3, #3
 800c628:	e21a      	b.n	800ca60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c62a:	4b22      	ldr	r3, [pc, #136]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c62c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c62e:	f003 0302 	and.w	r3, r3, #2
 800c632:	2b00      	cmp	r3, #0
 800c634:	d0f0      	beq.n	800c618 <HAL_RCC_OscConfig+0x45c>
 800c636:	e018      	b.n	800c66a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c638:	4b1e      	ldr	r3, [pc, #120]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c63a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c63c:	4a1d      	ldr	r2, [pc, #116]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c63e:	f023 0301 	bic.w	r3, r3, #1
 800c642:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c644:	f7f5 ff32 	bl	80024ac <HAL_GetTick>
 800c648:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c64a:	e008      	b.n	800c65e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c64c:	f7f5 ff2e 	bl	80024ac <HAL_GetTick>
 800c650:	4602      	mov	r2, r0
 800c652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c654:	1ad3      	subs	r3, r2, r3
 800c656:	2b02      	cmp	r3, #2
 800c658:	d901      	bls.n	800c65e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800c65a:	2303      	movs	r3, #3
 800c65c:	e200      	b.n	800ca60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c65e:	4b15      	ldr	r3, [pc, #84]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c662:	f003 0302 	and.w	r3, r3, #2
 800c666:	2b00      	cmp	r3, #0
 800c668:	d1f0      	bne.n	800c64c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f003 0320 	and.w	r3, r3, #32
 800c672:	2b00      	cmp	r3, #0
 800c674:	d039      	beq.n	800c6ea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	699b      	ldr	r3, [r3, #24]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d01c      	beq.n	800c6b8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c67e:	4b0d      	ldr	r3, [pc, #52]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4a0c      	ldr	r2, [pc, #48]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c684:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c688:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c68a:	f7f5 ff0f 	bl	80024ac <HAL_GetTick>
 800c68e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c690:	e008      	b.n	800c6a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c692:	f7f5 ff0b 	bl	80024ac <HAL_GetTick>
 800c696:	4602      	mov	r2, r0
 800c698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c69a:	1ad3      	subs	r3, r2, r3
 800c69c:	2b02      	cmp	r3, #2
 800c69e:	d901      	bls.n	800c6a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	e1dd      	b.n	800ca60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c6a4:	4b03      	ldr	r3, [pc, #12]	@ (800c6b4 <HAL_RCC_OscConfig+0x4f8>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d0f0      	beq.n	800c692 <HAL_RCC_OscConfig+0x4d6>
 800c6b0:	e01b      	b.n	800c6ea <HAL_RCC_OscConfig+0x52e>
 800c6b2:	bf00      	nop
 800c6b4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c6b8:	4b9b      	ldr	r3, [pc, #620]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a9a      	ldr	r2, [pc, #616]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c6be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c6c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c6c4:	f7f5 fef2 	bl	80024ac <HAL_GetTick>
 800c6c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c6ca:	e008      	b.n	800c6de <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c6cc:	f7f5 feee 	bl	80024ac <HAL_GetTick>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d901      	bls.n	800c6de <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800c6da:	2303      	movs	r3, #3
 800c6dc:	e1c0      	b.n	800ca60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c6de:	4b92      	ldr	r3, [pc, #584]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d1f0      	bne.n	800c6cc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f003 0304 	and.w	r3, r3, #4
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	f000 8081 	beq.w	800c7fa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c6f8:	4b8c      	ldr	r3, [pc, #560]	@ (800c92c <HAL_RCC_OscConfig+0x770>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4a8b      	ldr	r2, [pc, #556]	@ (800c92c <HAL_RCC_OscConfig+0x770>)
 800c6fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c702:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c704:	f7f5 fed2 	bl	80024ac <HAL_GetTick>
 800c708:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c70a:	e008      	b.n	800c71e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c70c:	f7f5 fece 	bl	80024ac <HAL_GetTick>
 800c710:	4602      	mov	r2, r0
 800c712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c714:	1ad3      	subs	r3, r2, r3
 800c716:	2b64      	cmp	r3, #100	@ 0x64
 800c718:	d901      	bls.n	800c71e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800c71a:	2303      	movs	r3, #3
 800c71c:	e1a0      	b.n	800ca60 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c71e:	4b83      	ldr	r3, [pc, #524]	@ (800c92c <HAL_RCC_OscConfig+0x770>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c726:	2b00      	cmp	r3, #0
 800c728:	d0f0      	beq.n	800c70c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	689b      	ldr	r3, [r3, #8]
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d106      	bne.n	800c740 <HAL_RCC_OscConfig+0x584>
 800c732:	4b7d      	ldr	r3, [pc, #500]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c736:	4a7c      	ldr	r2, [pc, #496]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c738:	f043 0301 	orr.w	r3, r3, #1
 800c73c:	6713      	str	r3, [r2, #112]	@ 0x70
 800c73e:	e02d      	b.n	800c79c <HAL_RCC_OscConfig+0x5e0>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	689b      	ldr	r3, [r3, #8]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d10c      	bne.n	800c762 <HAL_RCC_OscConfig+0x5a6>
 800c748:	4b77      	ldr	r3, [pc, #476]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c74a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c74c:	4a76      	ldr	r2, [pc, #472]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c74e:	f023 0301 	bic.w	r3, r3, #1
 800c752:	6713      	str	r3, [r2, #112]	@ 0x70
 800c754:	4b74      	ldr	r3, [pc, #464]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c758:	4a73      	ldr	r2, [pc, #460]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c75a:	f023 0304 	bic.w	r3, r3, #4
 800c75e:	6713      	str	r3, [r2, #112]	@ 0x70
 800c760:	e01c      	b.n	800c79c <HAL_RCC_OscConfig+0x5e0>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	689b      	ldr	r3, [r3, #8]
 800c766:	2b05      	cmp	r3, #5
 800c768:	d10c      	bne.n	800c784 <HAL_RCC_OscConfig+0x5c8>
 800c76a:	4b6f      	ldr	r3, [pc, #444]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c76c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c76e:	4a6e      	ldr	r2, [pc, #440]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c770:	f043 0304 	orr.w	r3, r3, #4
 800c774:	6713      	str	r3, [r2, #112]	@ 0x70
 800c776:	4b6c      	ldr	r3, [pc, #432]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c77a:	4a6b      	ldr	r2, [pc, #428]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c77c:	f043 0301 	orr.w	r3, r3, #1
 800c780:	6713      	str	r3, [r2, #112]	@ 0x70
 800c782:	e00b      	b.n	800c79c <HAL_RCC_OscConfig+0x5e0>
 800c784:	4b68      	ldr	r3, [pc, #416]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c788:	4a67      	ldr	r2, [pc, #412]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c78a:	f023 0301 	bic.w	r3, r3, #1
 800c78e:	6713      	str	r3, [r2, #112]	@ 0x70
 800c790:	4b65      	ldr	r3, [pc, #404]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c794:	4a64      	ldr	r2, [pc, #400]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c796:	f023 0304 	bic.w	r3, r3, #4
 800c79a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	689b      	ldr	r3, [r3, #8]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d015      	beq.n	800c7d0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7a4:	f7f5 fe82 	bl	80024ac <HAL_GetTick>
 800c7a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c7aa:	e00a      	b.n	800c7c2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c7ac:	f7f5 fe7e 	bl	80024ac <HAL_GetTick>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b4:	1ad3      	subs	r3, r2, r3
 800c7b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d901      	bls.n	800c7c2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800c7be:	2303      	movs	r3, #3
 800c7c0:	e14e      	b.n	800ca60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c7c2:	4b59      	ldr	r3, [pc, #356]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c7c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7c6:	f003 0302 	and.w	r3, r3, #2
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d0ee      	beq.n	800c7ac <HAL_RCC_OscConfig+0x5f0>
 800c7ce:	e014      	b.n	800c7fa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7d0:	f7f5 fe6c 	bl	80024ac <HAL_GetTick>
 800c7d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c7d6:	e00a      	b.n	800c7ee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c7d8:	f7f5 fe68 	bl	80024ac <HAL_GetTick>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e0:	1ad3      	subs	r3, r2, r3
 800c7e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d901      	bls.n	800c7ee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800c7ea:	2303      	movs	r3, #3
 800c7ec:	e138      	b.n	800ca60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c7ee:	4b4e      	ldr	r3, [pc, #312]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c7f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7f2:	f003 0302 	and.w	r3, r3, #2
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d1ee      	bne.n	800c7d8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	f000 812d 	beq.w	800ca5e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c804:	4b48      	ldr	r3, [pc, #288]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c806:	691b      	ldr	r3, [r3, #16]
 800c808:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c80c:	2b18      	cmp	r3, #24
 800c80e:	f000 80bd 	beq.w	800c98c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c816:	2b02      	cmp	r3, #2
 800c818:	f040 809e 	bne.w	800c958 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c81c:	4b42      	ldr	r3, [pc, #264]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a41      	ldr	r2, [pc, #260]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c822:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c828:	f7f5 fe40 	bl	80024ac <HAL_GetTick>
 800c82c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c82e:	e008      	b.n	800c842 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c830:	f7f5 fe3c 	bl	80024ac <HAL_GetTick>
 800c834:	4602      	mov	r2, r0
 800c836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c838:	1ad3      	subs	r3, r2, r3
 800c83a:	2b02      	cmp	r3, #2
 800c83c:	d901      	bls.n	800c842 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800c83e:	2303      	movs	r3, #3
 800c840:	e10e      	b.n	800ca60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c842:	4b39      	ldr	r3, [pc, #228]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d1f0      	bne.n	800c830 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c84e:	4b36      	ldr	r3, [pc, #216]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c850:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c852:	4b37      	ldr	r3, [pc, #220]	@ (800c930 <HAL_RCC_OscConfig+0x774>)
 800c854:	4013      	ands	r3, r2
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800c85a:	687a      	ldr	r2, [r7, #4]
 800c85c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c85e:	0112      	lsls	r2, r2, #4
 800c860:	430a      	orrs	r2, r1
 800c862:	4931      	ldr	r1, [pc, #196]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c864:	4313      	orrs	r3, r2
 800c866:	628b      	str	r3, [r1, #40]	@ 0x28
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c86c:	3b01      	subs	r3, #1
 800c86e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c876:	3b01      	subs	r3, #1
 800c878:	025b      	lsls	r3, r3, #9
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	431a      	orrs	r2, r3
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c882:	3b01      	subs	r3, #1
 800c884:	041b      	lsls	r3, r3, #16
 800c886:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c88a:	431a      	orrs	r2, r3
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c890:	3b01      	subs	r3, #1
 800c892:	061b      	lsls	r3, r3, #24
 800c894:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c898:	4923      	ldr	r1, [pc, #140]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c89a:	4313      	orrs	r3, r2
 800c89c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c89e:	4b22      	ldr	r3, [pc, #136]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c8a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8a2:	4a21      	ldr	r2, [pc, #132]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c8a4:	f023 0301 	bic.w	r3, r3, #1
 800c8a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c8aa:	4b1f      	ldr	r3, [pc, #124]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c8ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c8ae:	4b21      	ldr	r3, [pc, #132]	@ (800c934 <HAL_RCC_OscConfig+0x778>)
 800c8b0:	4013      	ands	r3, r2
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c8b6:	00d2      	lsls	r2, r2, #3
 800c8b8:	491b      	ldr	r1, [pc, #108]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c8be:	4b1a      	ldr	r3, [pc, #104]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c8c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8c2:	f023 020c 	bic.w	r2, r3, #12
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8ca:	4917      	ldr	r1, [pc, #92]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c8d0:	4b15      	ldr	r3, [pc, #84]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c8d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8d4:	f023 0202 	bic.w	r2, r3, #2
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8dc:	4912      	ldr	r1, [pc, #72]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c8e2:	4b11      	ldr	r3, [pc, #68]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c8e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8e6:	4a10      	ldr	r2, [pc, #64]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c8e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c8ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8ee:	4b0e      	ldr	r3, [pc, #56]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c8f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8f2:	4a0d      	ldr	r2, [pc, #52]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c8f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c8f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c8fa:	4b0b      	ldr	r3, [pc, #44]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8fe:	4a0a      	ldr	r2, [pc, #40]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c904:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c906:	4b08      	ldr	r3, [pc, #32]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c90a:	4a07      	ldr	r2, [pc, #28]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c90c:	f043 0301 	orr.w	r3, r3, #1
 800c910:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c912:	4b05      	ldr	r3, [pc, #20]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a04      	ldr	r2, [pc, #16]	@ (800c928 <HAL_RCC_OscConfig+0x76c>)
 800c918:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c91c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c91e:	f7f5 fdc5 	bl	80024ac <HAL_GetTick>
 800c922:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c924:	e011      	b.n	800c94a <HAL_RCC_OscConfig+0x78e>
 800c926:	bf00      	nop
 800c928:	58024400 	.word	0x58024400
 800c92c:	58024800 	.word	0x58024800
 800c930:	fffffc0c 	.word	0xfffffc0c
 800c934:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c938:	f7f5 fdb8 	bl	80024ac <HAL_GetTick>
 800c93c:	4602      	mov	r2, r0
 800c93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c940:	1ad3      	subs	r3, r2, r3
 800c942:	2b02      	cmp	r3, #2
 800c944:	d901      	bls.n	800c94a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800c946:	2303      	movs	r3, #3
 800c948:	e08a      	b.n	800ca60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c94a:	4b47      	ldr	r3, [pc, #284]	@ (800ca68 <HAL_RCC_OscConfig+0x8ac>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c952:	2b00      	cmp	r3, #0
 800c954:	d0f0      	beq.n	800c938 <HAL_RCC_OscConfig+0x77c>
 800c956:	e082      	b.n	800ca5e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c958:	4b43      	ldr	r3, [pc, #268]	@ (800ca68 <HAL_RCC_OscConfig+0x8ac>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a42      	ldr	r2, [pc, #264]	@ (800ca68 <HAL_RCC_OscConfig+0x8ac>)
 800c95e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c964:	f7f5 fda2 	bl	80024ac <HAL_GetTick>
 800c968:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c96a:	e008      	b.n	800c97e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c96c:	f7f5 fd9e 	bl	80024ac <HAL_GetTick>
 800c970:	4602      	mov	r2, r0
 800c972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c974:	1ad3      	subs	r3, r2, r3
 800c976:	2b02      	cmp	r3, #2
 800c978:	d901      	bls.n	800c97e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800c97a:	2303      	movs	r3, #3
 800c97c:	e070      	b.n	800ca60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c97e:	4b3a      	ldr	r3, [pc, #232]	@ (800ca68 <HAL_RCC_OscConfig+0x8ac>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c986:	2b00      	cmp	r3, #0
 800c988:	d1f0      	bne.n	800c96c <HAL_RCC_OscConfig+0x7b0>
 800c98a:	e068      	b.n	800ca5e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c98c:	4b36      	ldr	r3, [pc, #216]	@ (800ca68 <HAL_RCC_OscConfig+0x8ac>)
 800c98e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c990:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c992:	4b35      	ldr	r3, [pc, #212]	@ (800ca68 <HAL_RCC_OscConfig+0x8ac>)
 800c994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c996:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d031      	beq.n	800ca04 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	f003 0203 	and.w	r2, r3, #3
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d12a      	bne.n	800ca04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	091b      	lsrs	r3, r3, #4
 800c9b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d122      	bne.n	800ca04 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d11a      	bne.n	800ca04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	0a5b      	lsrs	r3, r3, #9
 800c9d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	d111      	bne.n	800ca04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	0c1b      	lsrs	r3, r3, #16
 800c9e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d108      	bne.n	800ca04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	0e1b      	lsrs	r3, r3, #24
 800c9f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d001      	beq.n	800ca08 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800ca04:	2301      	movs	r3, #1
 800ca06:	e02b      	b.n	800ca60 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ca08:	4b17      	ldr	r3, [pc, #92]	@ (800ca68 <HAL_RCC_OscConfig+0x8ac>)
 800ca0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca0c:	08db      	lsrs	r3, r3, #3
 800ca0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca12:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ca18:	693a      	ldr	r2, [r7, #16]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d01f      	beq.n	800ca5e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ca1e:	4b12      	ldr	r3, [pc, #72]	@ (800ca68 <HAL_RCC_OscConfig+0x8ac>)
 800ca20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca22:	4a11      	ldr	r2, [pc, #68]	@ (800ca68 <HAL_RCC_OscConfig+0x8ac>)
 800ca24:	f023 0301 	bic.w	r3, r3, #1
 800ca28:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ca2a:	f7f5 fd3f 	bl	80024ac <HAL_GetTick>
 800ca2e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ca30:	bf00      	nop
 800ca32:	f7f5 fd3b 	bl	80024ac <HAL_GetTick>
 800ca36:	4602      	mov	r2, r0
 800ca38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d0f9      	beq.n	800ca32 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ca3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ca68 <HAL_RCC_OscConfig+0x8ac>)
 800ca40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca42:	4b0a      	ldr	r3, [pc, #40]	@ (800ca6c <HAL_RCC_OscConfig+0x8b0>)
 800ca44:	4013      	ands	r3, r2
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ca4a:	00d2      	lsls	r2, r2, #3
 800ca4c:	4906      	ldr	r1, [pc, #24]	@ (800ca68 <HAL_RCC_OscConfig+0x8ac>)
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ca52:	4b05      	ldr	r3, [pc, #20]	@ (800ca68 <HAL_RCC_OscConfig+0x8ac>)
 800ca54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca56:	4a04      	ldr	r2, [pc, #16]	@ (800ca68 <HAL_RCC_OscConfig+0x8ac>)
 800ca58:	f043 0301 	orr.w	r3, r3, #1
 800ca5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ca5e:	2300      	movs	r3, #0
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3730      	adds	r7, #48	@ 0x30
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	58024400 	.word	0x58024400
 800ca6c:	ffff0007 	.word	0xffff0007

0800ca70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b086      	sub	sp, #24
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d101      	bne.n	800ca84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ca80:	2301      	movs	r3, #1
 800ca82:	e19c      	b.n	800cdbe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ca84:	4b8a      	ldr	r3, [pc, #552]	@ (800ccb0 <HAL_RCC_ClockConfig+0x240>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f003 030f 	and.w	r3, r3, #15
 800ca8c:	683a      	ldr	r2, [r7, #0]
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d910      	bls.n	800cab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca92:	4b87      	ldr	r3, [pc, #540]	@ (800ccb0 <HAL_RCC_ClockConfig+0x240>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f023 020f 	bic.w	r2, r3, #15
 800ca9a:	4985      	ldr	r1, [pc, #532]	@ (800ccb0 <HAL_RCC_ClockConfig+0x240>)
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800caa2:	4b83      	ldr	r3, [pc, #524]	@ (800ccb0 <HAL_RCC_ClockConfig+0x240>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f003 030f 	and.w	r3, r3, #15
 800caaa:	683a      	ldr	r2, [r7, #0]
 800caac:	429a      	cmp	r2, r3
 800caae:	d001      	beq.n	800cab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800cab0:	2301      	movs	r3, #1
 800cab2:	e184      	b.n	800cdbe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f003 0304 	and.w	r3, r3, #4
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d010      	beq.n	800cae2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	691a      	ldr	r2, [r3, #16]
 800cac4:	4b7b      	ldr	r3, [pc, #492]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cac6:	699b      	ldr	r3, [r3, #24]
 800cac8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cacc:	429a      	cmp	r2, r3
 800cace:	d908      	bls.n	800cae2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800cad0:	4b78      	ldr	r3, [pc, #480]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cad2:	699b      	ldr	r3, [r3, #24]
 800cad4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	691b      	ldr	r3, [r3, #16]
 800cadc:	4975      	ldr	r1, [pc, #468]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cade:	4313      	orrs	r3, r2
 800cae0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f003 0308 	and.w	r3, r3, #8
 800caea:	2b00      	cmp	r3, #0
 800caec:	d010      	beq.n	800cb10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	695a      	ldr	r2, [r3, #20]
 800caf2:	4b70      	ldr	r3, [pc, #448]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800caf4:	69db      	ldr	r3, [r3, #28]
 800caf6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d908      	bls.n	800cb10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800cafe:	4b6d      	ldr	r3, [pc, #436]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cb00:	69db      	ldr	r3, [r3, #28]
 800cb02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	695b      	ldr	r3, [r3, #20]
 800cb0a:	496a      	ldr	r1, [pc, #424]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	f003 0310 	and.w	r3, r3, #16
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d010      	beq.n	800cb3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	699a      	ldr	r2, [r3, #24]
 800cb20:	4b64      	ldr	r3, [pc, #400]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cb22:	69db      	ldr	r3, [r3, #28]
 800cb24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d908      	bls.n	800cb3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800cb2c:	4b61      	ldr	r3, [pc, #388]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cb2e:	69db      	ldr	r3, [r3, #28]
 800cb30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	699b      	ldr	r3, [r3, #24]
 800cb38:	495e      	ldr	r1, [pc, #376]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f003 0320 	and.w	r3, r3, #32
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d010      	beq.n	800cb6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	69da      	ldr	r2, [r3, #28]
 800cb4e:	4b59      	ldr	r3, [pc, #356]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cb50:	6a1b      	ldr	r3, [r3, #32]
 800cb52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d908      	bls.n	800cb6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800cb5a:	4b56      	ldr	r3, [pc, #344]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cb5c:	6a1b      	ldr	r3, [r3, #32]
 800cb5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	69db      	ldr	r3, [r3, #28]
 800cb66:	4953      	ldr	r1, [pc, #332]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f003 0302 	and.w	r3, r3, #2
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d010      	beq.n	800cb9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	68da      	ldr	r2, [r3, #12]
 800cb7c:	4b4d      	ldr	r3, [pc, #308]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cb7e:	699b      	ldr	r3, [r3, #24]
 800cb80:	f003 030f 	and.w	r3, r3, #15
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d908      	bls.n	800cb9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cb88:	4b4a      	ldr	r3, [pc, #296]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cb8a:	699b      	ldr	r3, [r3, #24]
 800cb8c:	f023 020f 	bic.w	r2, r3, #15
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	4947      	ldr	r1, [pc, #284]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cb96:	4313      	orrs	r3, r2
 800cb98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f003 0301 	and.w	r3, r3, #1
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d055      	beq.n	800cc52 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800cba6:	4b43      	ldr	r3, [pc, #268]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cba8:	699b      	ldr	r3, [r3, #24]
 800cbaa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	689b      	ldr	r3, [r3, #8]
 800cbb2:	4940      	ldr	r1, [pc, #256]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cbb4:	4313      	orrs	r3, r2
 800cbb6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	2b02      	cmp	r3, #2
 800cbbe:	d107      	bne.n	800cbd0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cbc0:	4b3c      	ldr	r3, [pc, #240]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d121      	bne.n	800cc10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cbcc:	2301      	movs	r3, #1
 800cbce:	e0f6      	b.n	800cdbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	2b03      	cmp	r3, #3
 800cbd6:	d107      	bne.n	800cbe8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cbd8:	4b36      	ldr	r3, [pc, #216]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d115      	bne.n	800cc10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	e0ea      	b.n	800cdbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d107      	bne.n	800cc00 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cbf0:	4b30      	ldr	r3, [pc, #192]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d109      	bne.n	800cc10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	e0de      	b.n	800cdbe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cc00:	4b2c      	ldr	r3, [pc, #176]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f003 0304 	and.w	r3, r3, #4
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d101      	bne.n	800cc10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	e0d6      	b.n	800cdbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cc10:	4b28      	ldr	r3, [pc, #160]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cc12:	691b      	ldr	r3, [r3, #16]
 800cc14:	f023 0207 	bic.w	r2, r3, #7
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	4925      	ldr	r1, [pc, #148]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cc1e:	4313      	orrs	r3, r2
 800cc20:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc22:	f7f5 fc43 	bl	80024ac <HAL_GetTick>
 800cc26:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc28:	e00a      	b.n	800cc40 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc2a:	f7f5 fc3f 	bl	80024ac <HAL_GetTick>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	1ad3      	subs	r3, r2, r3
 800cc34:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d901      	bls.n	800cc40 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800cc3c:	2303      	movs	r3, #3
 800cc3e:	e0be      	b.n	800cdbe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc40:	4b1c      	ldr	r3, [pc, #112]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cc42:	691b      	ldr	r3, [r3, #16]
 800cc44:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	00db      	lsls	r3, r3, #3
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d1eb      	bne.n	800cc2a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f003 0302 	and.w	r3, r3, #2
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d010      	beq.n	800cc80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	68da      	ldr	r2, [r3, #12]
 800cc62:	4b14      	ldr	r3, [pc, #80]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cc64:	699b      	ldr	r3, [r3, #24]
 800cc66:	f003 030f 	and.w	r3, r3, #15
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d208      	bcs.n	800cc80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cc6e:	4b11      	ldr	r3, [pc, #68]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cc70:	699b      	ldr	r3, [r3, #24]
 800cc72:	f023 020f 	bic.w	r2, r3, #15
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	490e      	ldr	r1, [pc, #56]	@ (800ccb4 <HAL_RCC_ClockConfig+0x244>)
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cc80:	4b0b      	ldr	r3, [pc, #44]	@ (800ccb0 <HAL_RCC_ClockConfig+0x240>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f003 030f 	and.w	r3, r3, #15
 800cc88:	683a      	ldr	r2, [r7, #0]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d214      	bcs.n	800ccb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc8e:	4b08      	ldr	r3, [pc, #32]	@ (800ccb0 <HAL_RCC_ClockConfig+0x240>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f023 020f 	bic.w	r2, r3, #15
 800cc96:	4906      	ldr	r1, [pc, #24]	@ (800ccb0 <HAL_RCC_ClockConfig+0x240>)
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc9e:	4b04      	ldr	r3, [pc, #16]	@ (800ccb0 <HAL_RCC_ClockConfig+0x240>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f003 030f 	and.w	r3, r3, #15
 800cca6:	683a      	ldr	r2, [r7, #0]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d005      	beq.n	800ccb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ccac:	2301      	movs	r3, #1
 800ccae:	e086      	b.n	800cdbe <HAL_RCC_ClockConfig+0x34e>
 800ccb0:	52002000 	.word	0x52002000
 800ccb4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f003 0304 	and.w	r3, r3, #4
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d010      	beq.n	800cce6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	691a      	ldr	r2, [r3, #16]
 800ccc8:	4b3f      	ldr	r3, [pc, #252]	@ (800cdc8 <HAL_RCC_ClockConfig+0x358>)
 800ccca:	699b      	ldr	r3, [r3, #24]
 800cccc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d208      	bcs.n	800cce6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ccd4:	4b3c      	ldr	r3, [pc, #240]	@ (800cdc8 <HAL_RCC_ClockConfig+0x358>)
 800ccd6:	699b      	ldr	r3, [r3, #24]
 800ccd8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	4939      	ldr	r1, [pc, #228]	@ (800cdc8 <HAL_RCC_ClockConfig+0x358>)
 800cce2:	4313      	orrs	r3, r2
 800cce4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f003 0308 	and.w	r3, r3, #8
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d010      	beq.n	800cd14 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	695a      	ldr	r2, [r3, #20]
 800ccf6:	4b34      	ldr	r3, [pc, #208]	@ (800cdc8 <HAL_RCC_ClockConfig+0x358>)
 800ccf8:	69db      	ldr	r3, [r3, #28]
 800ccfa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d208      	bcs.n	800cd14 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800cd02:	4b31      	ldr	r3, [pc, #196]	@ (800cdc8 <HAL_RCC_ClockConfig+0x358>)
 800cd04:	69db      	ldr	r3, [r3, #28]
 800cd06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	695b      	ldr	r3, [r3, #20]
 800cd0e:	492e      	ldr	r1, [pc, #184]	@ (800cdc8 <HAL_RCC_ClockConfig+0x358>)
 800cd10:	4313      	orrs	r3, r2
 800cd12:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f003 0310 	and.w	r3, r3, #16
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d010      	beq.n	800cd42 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	699a      	ldr	r2, [r3, #24]
 800cd24:	4b28      	ldr	r3, [pc, #160]	@ (800cdc8 <HAL_RCC_ClockConfig+0x358>)
 800cd26:	69db      	ldr	r3, [r3, #28]
 800cd28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d208      	bcs.n	800cd42 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800cd30:	4b25      	ldr	r3, [pc, #148]	@ (800cdc8 <HAL_RCC_ClockConfig+0x358>)
 800cd32:	69db      	ldr	r3, [r3, #28]
 800cd34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	699b      	ldr	r3, [r3, #24]
 800cd3c:	4922      	ldr	r1, [pc, #136]	@ (800cdc8 <HAL_RCC_ClockConfig+0x358>)
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f003 0320 	and.w	r3, r3, #32
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d010      	beq.n	800cd70 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	69da      	ldr	r2, [r3, #28]
 800cd52:	4b1d      	ldr	r3, [pc, #116]	@ (800cdc8 <HAL_RCC_ClockConfig+0x358>)
 800cd54:	6a1b      	ldr	r3, [r3, #32]
 800cd56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d208      	bcs.n	800cd70 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800cd5e:	4b1a      	ldr	r3, [pc, #104]	@ (800cdc8 <HAL_RCC_ClockConfig+0x358>)
 800cd60:	6a1b      	ldr	r3, [r3, #32]
 800cd62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	69db      	ldr	r3, [r3, #28]
 800cd6a:	4917      	ldr	r1, [pc, #92]	@ (800cdc8 <HAL_RCC_ClockConfig+0x358>)
 800cd6c:	4313      	orrs	r3, r2
 800cd6e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800cd70:	f000 f834 	bl	800cddc <HAL_RCC_GetSysClockFreq>
 800cd74:	4602      	mov	r2, r0
 800cd76:	4b14      	ldr	r3, [pc, #80]	@ (800cdc8 <HAL_RCC_ClockConfig+0x358>)
 800cd78:	699b      	ldr	r3, [r3, #24]
 800cd7a:	0a1b      	lsrs	r3, r3, #8
 800cd7c:	f003 030f 	and.w	r3, r3, #15
 800cd80:	4912      	ldr	r1, [pc, #72]	@ (800cdcc <HAL_RCC_ClockConfig+0x35c>)
 800cd82:	5ccb      	ldrb	r3, [r1, r3]
 800cd84:	f003 031f 	and.w	r3, r3, #31
 800cd88:	fa22 f303 	lsr.w	r3, r2, r3
 800cd8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cd8e:	4b0e      	ldr	r3, [pc, #56]	@ (800cdc8 <HAL_RCC_ClockConfig+0x358>)
 800cd90:	699b      	ldr	r3, [r3, #24]
 800cd92:	f003 030f 	and.w	r3, r3, #15
 800cd96:	4a0d      	ldr	r2, [pc, #52]	@ (800cdcc <HAL_RCC_ClockConfig+0x35c>)
 800cd98:	5cd3      	ldrb	r3, [r2, r3]
 800cd9a:	f003 031f 	and.w	r3, r3, #31
 800cd9e:	693a      	ldr	r2, [r7, #16]
 800cda0:	fa22 f303 	lsr.w	r3, r2, r3
 800cda4:	4a0a      	ldr	r2, [pc, #40]	@ (800cdd0 <HAL_RCC_ClockConfig+0x360>)
 800cda6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cda8:	4a0a      	ldr	r2, [pc, #40]	@ (800cdd4 <HAL_RCC_ClockConfig+0x364>)
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800cdae:	4b0a      	ldr	r3, [pc, #40]	@ (800cdd8 <HAL_RCC_ClockConfig+0x368>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7f5 fb30 	bl	8002418 <HAL_InitTick>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800cdbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3718      	adds	r7, #24
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
 800cdc6:	bf00      	nop
 800cdc8:	58024400 	.word	0x58024400
 800cdcc:	08016128 	.word	0x08016128
 800cdd0:	2400000c 	.word	0x2400000c
 800cdd4:	24000008 	.word	0x24000008
 800cdd8:	24000010 	.word	0x24000010

0800cddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cddc:	b480      	push	{r7}
 800cdde:	b089      	sub	sp, #36	@ 0x24
 800cde0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cde2:	4bb3      	ldr	r3, [pc, #716]	@ (800d0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cde4:	691b      	ldr	r3, [r3, #16]
 800cde6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cdea:	2b18      	cmp	r3, #24
 800cdec:	f200 8155 	bhi.w	800d09a <HAL_RCC_GetSysClockFreq+0x2be>
 800cdf0:	a201      	add	r2, pc, #4	@ (adr r2, 800cdf8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800cdf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdf6:	bf00      	nop
 800cdf8:	0800ce5d 	.word	0x0800ce5d
 800cdfc:	0800d09b 	.word	0x0800d09b
 800ce00:	0800d09b 	.word	0x0800d09b
 800ce04:	0800d09b 	.word	0x0800d09b
 800ce08:	0800d09b 	.word	0x0800d09b
 800ce0c:	0800d09b 	.word	0x0800d09b
 800ce10:	0800d09b 	.word	0x0800d09b
 800ce14:	0800d09b 	.word	0x0800d09b
 800ce18:	0800ce83 	.word	0x0800ce83
 800ce1c:	0800d09b 	.word	0x0800d09b
 800ce20:	0800d09b 	.word	0x0800d09b
 800ce24:	0800d09b 	.word	0x0800d09b
 800ce28:	0800d09b 	.word	0x0800d09b
 800ce2c:	0800d09b 	.word	0x0800d09b
 800ce30:	0800d09b 	.word	0x0800d09b
 800ce34:	0800d09b 	.word	0x0800d09b
 800ce38:	0800ce89 	.word	0x0800ce89
 800ce3c:	0800d09b 	.word	0x0800d09b
 800ce40:	0800d09b 	.word	0x0800d09b
 800ce44:	0800d09b 	.word	0x0800d09b
 800ce48:	0800d09b 	.word	0x0800d09b
 800ce4c:	0800d09b 	.word	0x0800d09b
 800ce50:	0800d09b 	.word	0x0800d09b
 800ce54:	0800d09b 	.word	0x0800d09b
 800ce58:	0800ce8f 	.word	0x0800ce8f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce5c:	4b94      	ldr	r3, [pc, #592]	@ (800d0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f003 0320 	and.w	r3, r3, #32
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d009      	beq.n	800ce7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce68:	4b91      	ldr	r3, [pc, #580]	@ (800d0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	08db      	lsrs	r3, r3, #3
 800ce6e:	f003 0303 	and.w	r3, r3, #3
 800ce72:	4a90      	ldr	r2, [pc, #576]	@ (800d0b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ce74:	fa22 f303 	lsr.w	r3, r2, r3
 800ce78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ce7a:	e111      	b.n	800d0a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ce7c:	4b8d      	ldr	r3, [pc, #564]	@ (800d0b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ce7e:	61bb      	str	r3, [r7, #24]
      break;
 800ce80:	e10e      	b.n	800d0a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ce82:	4b8d      	ldr	r3, [pc, #564]	@ (800d0b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ce84:	61bb      	str	r3, [r7, #24]
      break;
 800ce86:	e10b      	b.n	800d0a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ce88:	4b8c      	ldr	r3, [pc, #560]	@ (800d0bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ce8a:	61bb      	str	r3, [r7, #24]
      break;
 800ce8c:	e108      	b.n	800d0a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ce8e:	4b88      	ldr	r3, [pc, #544]	@ (800d0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce92:	f003 0303 	and.w	r3, r3, #3
 800ce96:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ce98:	4b85      	ldr	r3, [pc, #532]	@ (800d0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce9c:	091b      	lsrs	r3, r3, #4
 800ce9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cea2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800cea4:	4b82      	ldr	r3, [pc, #520]	@ (800d0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cea8:	f003 0301 	and.w	r3, r3, #1
 800ceac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ceae:	4b80      	ldr	r3, [pc, #512]	@ (800d0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ceb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ceb2:	08db      	lsrs	r3, r3, #3
 800ceb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ceb8:	68fa      	ldr	r2, [r7, #12]
 800ceba:	fb02 f303 	mul.w	r3, r2, r3
 800cebe:	ee07 3a90 	vmov	s15, r3
 800cec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cec6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	f000 80e1 	beq.w	800d094 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	2b02      	cmp	r3, #2
 800ced6:	f000 8083 	beq.w	800cfe0 <HAL_RCC_GetSysClockFreq+0x204>
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	2b02      	cmp	r3, #2
 800cede:	f200 80a1 	bhi.w	800d024 <HAL_RCC_GetSysClockFreq+0x248>
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d003      	beq.n	800cef0 <HAL_RCC_GetSysClockFreq+0x114>
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	d056      	beq.n	800cf9c <HAL_RCC_GetSysClockFreq+0x1c0>
 800ceee:	e099      	b.n	800d024 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cef0:	4b6f      	ldr	r3, [pc, #444]	@ (800d0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f003 0320 	and.w	r3, r3, #32
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d02d      	beq.n	800cf58 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cefc:	4b6c      	ldr	r3, [pc, #432]	@ (800d0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	08db      	lsrs	r3, r3, #3
 800cf02:	f003 0303 	and.w	r3, r3, #3
 800cf06:	4a6b      	ldr	r2, [pc, #428]	@ (800d0b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800cf08:	fa22 f303 	lsr.w	r3, r2, r3
 800cf0c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	ee07 3a90 	vmov	s15, r3
 800cf14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	ee07 3a90 	vmov	s15, r3
 800cf1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf26:	4b62      	ldr	r3, [pc, #392]	@ (800d0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cf28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf2e:	ee07 3a90 	vmov	s15, r3
 800cf32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf36:	ed97 6a02 	vldr	s12, [r7, #8]
 800cf3a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800d0c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cf3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf52:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800cf56:	e087      	b.n	800d068 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	ee07 3a90 	vmov	s15, r3
 800cf5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf62:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800d0c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800cf66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf6a:	4b51      	ldr	r3, [pc, #324]	@ (800d0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cf6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf72:	ee07 3a90 	vmov	s15, r3
 800cf76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf7a:	ed97 6a02 	vldr	s12, [r7, #8]
 800cf7e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800d0c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cf82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cf9a:	e065      	b.n	800d068 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	ee07 3a90 	vmov	s15, r3
 800cfa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfa6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800d0c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800cfaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfae:	4b40      	ldr	r3, [pc, #256]	@ (800d0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cfb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfb6:	ee07 3a90 	vmov	s15, r3
 800cfba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfbe:	ed97 6a02 	vldr	s12, [r7, #8]
 800cfc2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d0c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cfc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cfd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cfde:	e043      	b.n	800d068 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	ee07 3a90 	vmov	s15, r3
 800cfe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800d0cc <HAL_RCC_GetSysClockFreq+0x2f0>
 800cfee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cff2:	4b2f      	ldr	r3, [pc, #188]	@ (800d0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cffa:	ee07 3a90 	vmov	s15, r3
 800cffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d002:	ed97 6a02 	vldr	s12, [r7, #8]
 800d006:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800d0c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d00a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d00e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d01a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d01e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d022:	e021      	b.n	800d068 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	ee07 3a90 	vmov	s15, r3
 800d02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d02e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800d0c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d036:	4b1e      	ldr	r3, [pc, #120]	@ (800d0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d03e:	ee07 3a90 	vmov	s15, r3
 800d042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d046:	ed97 6a02 	vldr	s12, [r7, #8]
 800d04a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800d0c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d04e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d05a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d062:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d066:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d068:	4b11      	ldr	r3, [pc, #68]	@ (800d0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d06a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d06c:	0a5b      	lsrs	r3, r3, #9
 800d06e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d072:	3301      	adds	r3, #1
 800d074:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	ee07 3a90 	vmov	s15, r3
 800d07c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d080:	edd7 6a07 	vldr	s13, [r7, #28]
 800d084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d08c:	ee17 3a90 	vmov	r3, s15
 800d090:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800d092:	e005      	b.n	800d0a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800d094:	2300      	movs	r3, #0
 800d096:	61bb      	str	r3, [r7, #24]
      break;
 800d098:	e002      	b.n	800d0a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800d09a:	4b07      	ldr	r3, [pc, #28]	@ (800d0b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d09c:	61bb      	str	r3, [r7, #24]
      break;
 800d09e:	bf00      	nop
  }

  return sysclockfreq;
 800d0a0:	69bb      	ldr	r3, [r7, #24]
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3724      	adds	r7, #36	@ 0x24
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr
 800d0ae:	bf00      	nop
 800d0b0:	58024400 	.word	0x58024400
 800d0b4:	03d09000 	.word	0x03d09000
 800d0b8:	003d0900 	.word	0x003d0900
 800d0bc:	017d7840 	.word	0x017d7840
 800d0c0:	46000000 	.word	0x46000000
 800d0c4:	4c742400 	.word	0x4c742400
 800d0c8:	4a742400 	.word	0x4a742400
 800d0cc:	4bbebc20 	.word	0x4bbebc20

0800d0d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d0d6:	f7ff fe81 	bl	800cddc <HAL_RCC_GetSysClockFreq>
 800d0da:	4602      	mov	r2, r0
 800d0dc:	4b10      	ldr	r3, [pc, #64]	@ (800d120 <HAL_RCC_GetHCLKFreq+0x50>)
 800d0de:	699b      	ldr	r3, [r3, #24]
 800d0e0:	0a1b      	lsrs	r3, r3, #8
 800d0e2:	f003 030f 	and.w	r3, r3, #15
 800d0e6:	490f      	ldr	r1, [pc, #60]	@ (800d124 <HAL_RCC_GetHCLKFreq+0x54>)
 800d0e8:	5ccb      	ldrb	r3, [r1, r3]
 800d0ea:	f003 031f 	and.w	r3, r3, #31
 800d0ee:	fa22 f303 	lsr.w	r3, r2, r3
 800d0f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d0f4:	4b0a      	ldr	r3, [pc, #40]	@ (800d120 <HAL_RCC_GetHCLKFreq+0x50>)
 800d0f6:	699b      	ldr	r3, [r3, #24]
 800d0f8:	f003 030f 	and.w	r3, r3, #15
 800d0fc:	4a09      	ldr	r2, [pc, #36]	@ (800d124 <HAL_RCC_GetHCLKFreq+0x54>)
 800d0fe:	5cd3      	ldrb	r3, [r2, r3]
 800d100:	f003 031f 	and.w	r3, r3, #31
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	fa22 f303 	lsr.w	r3, r2, r3
 800d10a:	4a07      	ldr	r2, [pc, #28]	@ (800d128 <HAL_RCC_GetHCLKFreq+0x58>)
 800d10c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d10e:	4a07      	ldr	r2, [pc, #28]	@ (800d12c <HAL_RCC_GetHCLKFreq+0x5c>)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d114:	4b04      	ldr	r3, [pc, #16]	@ (800d128 <HAL_RCC_GetHCLKFreq+0x58>)
 800d116:	681b      	ldr	r3, [r3, #0]
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3708      	adds	r7, #8
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}
 800d120:	58024400 	.word	0x58024400
 800d124:	08016128 	.word	0x08016128
 800d128:	2400000c 	.word	0x2400000c
 800d12c:	24000008 	.word	0x24000008

0800d130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800d134:	f7ff ffcc 	bl	800d0d0 <HAL_RCC_GetHCLKFreq>
 800d138:	4602      	mov	r2, r0
 800d13a:	4b06      	ldr	r3, [pc, #24]	@ (800d154 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d13c:	69db      	ldr	r3, [r3, #28]
 800d13e:	091b      	lsrs	r3, r3, #4
 800d140:	f003 0307 	and.w	r3, r3, #7
 800d144:	4904      	ldr	r1, [pc, #16]	@ (800d158 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d146:	5ccb      	ldrb	r3, [r1, r3]
 800d148:	f003 031f 	and.w	r3, r3, #31
 800d14c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800d150:	4618      	mov	r0, r3
 800d152:	bd80      	pop	{r7, pc}
 800d154:	58024400 	.word	0x58024400
 800d158:	08016128 	.word	0x08016128

0800d15c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800d160:	f7ff ffb6 	bl	800d0d0 <HAL_RCC_GetHCLKFreq>
 800d164:	4602      	mov	r2, r0
 800d166:	4b06      	ldr	r3, [pc, #24]	@ (800d180 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d168:	69db      	ldr	r3, [r3, #28]
 800d16a:	0a1b      	lsrs	r3, r3, #8
 800d16c:	f003 0307 	and.w	r3, r3, #7
 800d170:	4904      	ldr	r1, [pc, #16]	@ (800d184 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d172:	5ccb      	ldrb	r3, [r1, r3]
 800d174:	f003 031f 	and.w	r3, r3, #31
 800d178:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	58024400 	.word	0x58024400
 800d184:	08016128 	.word	0x08016128

0800d188 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d18c:	b0ca      	sub	sp, #296	@ 0x128
 800d18e:	af00      	add	r7, sp, #0
 800d190:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d194:	2300      	movs	r3, #0
 800d196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d19a:	2300      	movs	r3, #0
 800d19c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d1a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800d1ac:	2500      	movs	r5, #0
 800d1ae:	ea54 0305 	orrs.w	r3, r4, r5
 800d1b2:	d049      	beq.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800d1b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d1ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d1be:	d02f      	beq.n	800d220 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d1c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d1c4:	d828      	bhi.n	800d218 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d1c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d1ca:	d01a      	beq.n	800d202 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d1cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d1d0:	d822      	bhi.n	800d218 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d003      	beq.n	800d1de <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d1d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d1da:	d007      	beq.n	800d1ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d1dc:	e01c      	b.n	800d218 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d1de:	4bb8      	ldr	r3, [pc, #736]	@ (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d1e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1e2:	4ab7      	ldr	r2, [pc, #732]	@ (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d1e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d1e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d1ea:	e01a      	b.n	800d222 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d1ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1f0:	3308      	adds	r3, #8
 800d1f2:	2102      	movs	r1, #2
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f001 fc8f 	bl	800eb18 <RCCEx_PLL2_Config>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d200:	e00f      	b.n	800d222 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d206:	3328      	adds	r3, #40	@ 0x28
 800d208:	2102      	movs	r1, #2
 800d20a:	4618      	mov	r0, r3
 800d20c:	f001 fd36 	bl	800ec7c <RCCEx_PLL3_Config>
 800d210:	4603      	mov	r3, r0
 800d212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d216:	e004      	b.n	800d222 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d218:	2301      	movs	r3, #1
 800d21a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d21e:	e000      	b.n	800d222 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800d220:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d226:	2b00      	cmp	r3, #0
 800d228:	d10a      	bne.n	800d240 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d22a:	4ba5      	ldr	r3, [pc, #660]	@ (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d22c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d22e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d236:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d238:	4aa1      	ldr	r2, [pc, #644]	@ (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d23a:	430b      	orrs	r3, r1
 800d23c:	6513      	str	r3, [r2, #80]	@ 0x50
 800d23e:	e003      	b.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d240:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d244:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d250:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800d254:	f04f 0900 	mov.w	r9, #0
 800d258:	ea58 0309 	orrs.w	r3, r8, r9
 800d25c:	d047      	beq.n	800d2ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800d25e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d264:	2b04      	cmp	r3, #4
 800d266:	d82a      	bhi.n	800d2be <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d268:	a201      	add	r2, pc, #4	@ (adr r2, 800d270 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800d26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d26e:	bf00      	nop
 800d270:	0800d285 	.word	0x0800d285
 800d274:	0800d293 	.word	0x0800d293
 800d278:	0800d2a9 	.word	0x0800d2a9
 800d27c:	0800d2c7 	.word	0x0800d2c7
 800d280:	0800d2c7 	.word	0x0800d2c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d284:	4b8e      	ldr	r3, [pc, #568]	@ (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d288:	4a8d      	ldr	r2, [pc, #564]	@ (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d28a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d28e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d290:	e01a      	b.n	800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d296:	3308      	adds	r3, #8
 800d298:	2100      	movs	r1, #0
 800d29a:	4618      	mov	r0, r3
 800d29c:	f001 fc3c 	bl	800eb18 <RCCEx_PLL2_Config>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d2a6:	e00f      	b.n	800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d2a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2ac:	3328      	adds	r3, #40	@ 0x28
 800d2ae:	2100      	movs	r1, #0
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f001 fce3 	bl	800ec7c <RCCEx_PLL3_Config>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d2bc:	e004      	b.n	800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d2be:	2301      	movs	r3, #1
 800d2c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d2c4:	e000      	b.n	800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800d2c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d10a      	bne.n	800d2e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d2d0:	4b7b      	ldr	r3, [pc, #492]	@ (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d2d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2d4:	f023 0107 	bic.w	r1, r3, #7
 800d2d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2de:	4a78      	ldr	r2, [pc, #480]	@ (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d2e0:	430b      	orrs	r3, r1
 800d2e2:	6513      	str	r3, [r2, #80]	@ 0x50
 800d2e4:	e003      	b.n	800d2ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d2ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800d2ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800d2fa:	f04f 0b00 	mov.w	fp, #0
 800d2fe:	ea5a 030b 	orrs.w	r3, sl, fp
 800d302:	d04c      	beq.n	800d39e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800d304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d30a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d30e:	d030      	beq.n	800d372 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800d310:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d314:	d829      	bhi.n	800d36a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d316:	2bc0      	cmp	r3, #192	@ 0xc0
 800d318:	d02d      	beq.n	800d376 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d31a:	2bc0      	cmp	r3, #192	@ 0xc0
 800d31c:	d825      	bhi.n	800d36a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d31e:	2b80      	cmp	r3, #128	@ 0x80
 800d320:	d018      	beq.n	800d354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800d322:	2b80      	cmp	r3, #128	@ 0x80
 800d324:	d821      	bhi.n	800d36a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d326:	2b00      	cmp	r3, #0
 800d328:	d002      	beq.n	800d330 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800d32a:	2b40      	cmp	r3, #64	@ 0x40
 800d32c:	d007      	beq.n	800d33e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800d32e:	e01c      	b.n	800d36a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d330:	4b63      	ldr	r3, [pc, #396]	@ (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d334:	4a62      	ldr	r2, [pc, #392]	@ (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d336:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d33a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d33c:	e01c      	b.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d33e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d342:	3308      	adds	r3, #8
 800d344:	2100      	movs	r1, #0
 800d346:	4618      	mov	r0, r3
 800d348:	f001 fbe6 	bl	800eb18 <RCCEx_PLL2_Config>
 800d34c:	4603      	mov	r3, r0
 800d34e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d352:	e011      	b.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d358:	3328      	adds	r3, #40	@ 0x28
 800d35a:	2100      	movs	r1, #0
 800d35c:	4618      	mov	r0, r3
 800d35e:	f001 fc8d 	bl	800ec7c <RCCEx_PLL3_Config>
 800d362:	4603      	mov	r3, r0
 800d364:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d368:	e006      	b.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d36a:	2301      	movs	r3, #1
 800d36c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d370:	e002      	b.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800d372:	bf00      	nop
 800d374:	e000      	b.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800d376:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d378:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d10a      	bne.n	800d396 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800d380:	4b4f      	ldr	r3, [pc, #316]	@ (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d384:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800d388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d38c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d38e:	4a4c      	ldr	r2, [pc, #304]	@ (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d390:	430b      	orrs	r3, r1
 800d392:	6513      	str	r3, [r2, #80]	@ 0x50
 800d394:	e003      	b.n	800d39e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d39a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800d39e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800d3aa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800d3b4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	4313      	orrs	r3, r2
 800d3bc:	d053      	beq.n	800d466 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800d3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d3c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d3ca:	d035      	beq.n	800d438 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800d3cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d3d0:	d82e      	bhi.n	800d430 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d3d2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d3d6:	d031      	beq.n	800d43c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800d3d8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d3dc:	d828      	bhi.n	800d430 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d3de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d3e2:	d01a      	beq.n	800d41a <HAL_RCCEx_PeriphCLKConfig+0x292>
 800d3e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d3e8:	d822      	bhi.n	800d430 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d003      	beq.n	800d3f6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800d3ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d3f2:	d007      	beq.n	800d404 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800d3f4:	e01c      	b.n	800d430 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d3f6:	4b32      	ldr	r3, [pc, #200]	@ (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d3f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3fa:	4a31      	ldr	r2, [pc, #196]	@ (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d3fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d400:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d402:	e01c      	b.n	800d43e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d408:	3308      	adds	r3, #8
 800d40a:	2100      	movs	r1, #0
 800d40c:	4618      	mov	r0, r3
 800d40e:	f001 fb83 	bl	800eb18 <RCCEx_PLL2_Config>
 800d412:	4603      	mov	r3, r0
 800d414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d418:	e011      	b.n	800d43e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d41a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d41e:	3328      	adds	r3, #40	@ 0x28
 800d420:	2100      	movs	r1, #0
 800d422:	4618      	mov	r0, r3
 800d424:	f001 fc2a 	bl	800ec7c <RCCEx_PLL3_Config>
 800d428:	4603      	mov	r3, r0
 800d42a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d42e:	e006      	b.n	800d43e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d430:	2301      	movs	r3, #1
 800d432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d436:	e002      	b.n	800d43e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800d438:	bf00      	nop
 800d43a:	e000      	b.n	800d43e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800d43c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d43e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d442:	2b00      	cmp	r3, #0
 800d444:	d10b      	bne.n	800d45e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800d446:	4b1e      	ldr	r3, [pc, #120]	@ (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d44a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800d44e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d452:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d456:	4a1a      	ldr	r2, [pc, #104]	@ (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d458:	430b      	orrs	r3, r1
 800d45a:	6593      	str	r3, [r2, #88]	@ 0x58
 800d45c:	e003      	b.n	800d466 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d45e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d462:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800d466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d46e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800d472:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d476:	2300      	movs	r3, #0
 800d478:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800d47c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800d480:	460b      	mov	r3, r1
 800d482:	4313      	orrs	r3, r2
 800d484:	d056      	beq.n	800d534 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800d486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d48a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d48e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d492:	d038      	beq.n	800d506 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800d494:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d498:	d831      	bhi.n	800d4fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d49a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d49e:	d034      	beq.n	800d50a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800d4a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d4a4:	d82b      	bhi.n	800d4fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d4a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d4aa:	d01d      	beq.n	800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800d4ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d4b0:	d825      	bhi.n	800d4fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d006      	beq.n	800d4c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800d4b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d4ba:	d00a      	beq.n	800d4d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800d4bc:	e01f      	b.n	800d4fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d4be:	bf00      	nop
 800d4c0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d4c4:	4ba2      	ldr	r3, [pc, #648]	@ (800d750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d4c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4c8:	4aa1      	ldr	r2, [pc, #644]	@ (800d750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d4ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d4ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d4d0:	e01c      	b.n	800d50c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4d6:	3308      	adds	r3, #8
 800d4d8:	2100      	movs	r1, #0
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f001 fb1c 	bl	800eb18 <RCCEx_PLL2_Config>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d4e6:	e011      	b.n	800d50c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d4e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4ec:	3328      	adds	r3, #40	@ 0x28
 800d4ee:	2100      	movs	r1, #0
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f001 fbc3 	bl	800ec7c <RCCEx_PLL3_Config>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d4fc:	e006      	b.n	800d50c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d4fe:	2301      	movs	r3, #1
 800d500:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d504:	e002      	b.n	800d50c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800d506:	bf00      	nop
 800d508:	e000      	b.n	800d50c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800d50a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d50c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d510:	2b00      	cmp	r3, #0
 800d512:	d10b      	bne.n	800d52c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800d514:	4b8e      	ldr	r3, [pc, #568]	@ (800d750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d518:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800d51c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d520:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d524:	4a8a      	ldr	r2, [pc, #552]	@ (800d750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d526:	430b      	orrs	r3, r1
 800d528:	6593      	str	r3, [r2, #88]	@ 0x58
 800d52a:	e003      	b.n	800d534 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d52c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d530:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800d540:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d544:	2300      	movs	r3, #0
 800d546:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d54a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800d54e:	460b      	mov	r3, r1
 800d550:	4313      	orrs	r3, r2
 800d552:	d03a      	beq.n	800d5ca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800d554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d55a:	2b30      	cmp	r3, #48	@ 0x30
 800d55c:	d01f      	beq.n	800d59e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800d55e:	2b30      	cmp	r3, #48	@ 0x30
 800d560:	d819      	bhi.n	800d596 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800d562:	2b20      	cmp	r3, #32
 800d564:	d00c      	beq.n	800d580 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800d566:	2b20      	cmp	r3, #32
 800d568:	d815      	bhi.n	800d596 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d019      	beq.n	800d5a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800d56e:	2b10      	cmp	r3, #16
 800d570:	d111      	bne.n	800d596 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d572:	4b77      	ldr	r3, [pc, #476]	@ (800d750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d576:	4a76      	ldr	r2, [pc, #472]	@ (800d750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d57c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800d57e:	e011      	b.n	800d5a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d584:	3308      	adds	r3, #8
 800d586:	2102      	movs	r1, #2
 800d588:	4618      	mov	r0, r3
 800d58a:	f001 fac5 	bl	800eb18 <RCCEx_PLL2_Config>
 800d58e:	4603      	mov	r3, r0
 800d590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800d594:	e006      	b.n	800d5a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d596:	2301      	movs	r3, #1
 800d598:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d59c:	e002      	b.n	800d5a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d59e:	bf00      	nop
 800d5a0:	e000      	b.n	800d5a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d5a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d10a      	bne.n	800d5c2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d5ac:	4b68      	ldr	r3, [pc, #416]	@ (800d750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d5ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d5b0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800d5b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d5ba:	4a65      	ldr	r2, [pc, #404]	@ (800d750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d5bc:	430b      	orrs	r3, r1
 800d5be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d5c0:	e003      	b.n	800d5ca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d5c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800d5d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d5da:	2300      	movs	r3, #0
 800d5dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d5e0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	d051      	beq.n	800d68e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800d5ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d5f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d5f4:	d035      	beq.n	800d662 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800d5f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d5fa:	d82e      	bhi.n	800d65a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d5fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d600:	d031      	beq.n	800d666 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800d602:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d606:	d828      	bhi.n	800d65a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d608:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d60c:	d01a      	beq.n	800d644 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800d60e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d612:	d822      	bhi.n	800d65a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d614:	2b00      	cmp	r3, #0
 800d616:	d003      	beq.n	800d620 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800d618:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d61c:	d007      	beq.n	800d62e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800d61e:	e01c      	b.n	800d65a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d620:	4b4b      	ldr	r3, [pc, #300]	@ (800d750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d624:	4a4a      	ldr	r2, [pc, #296]	@ (800d750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d626:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d62a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d62c:	e01c      	b.n	800d668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d62e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d632:	3308      	adds	r3, #8
 800d634:	2100      	movs	r1, #0
 800d636:	4618      	mov	r0, r3
 800d638:	f001 fa6e 	bl	800eb18 <RCCEx_PLL2_Config>
 800d63c:	4603      	mov	r3, r0
 800d63e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d642:	e011      	b.n	800d668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d648:	3328      	adds	r3, #40	@ 0x28
 800d64a:	2100      	movs	r1, #0
 800d64c:	4618      	mov	r0, r3
 800d64e:	f001 fb15 	bl	800ec7c <RCCEx_PLL3_Config>
 800d652:	4603      	mov	r3, r0
 800d654:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d658:	e006      	b.n	800d668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d65a:	2301      	movs	r3, #1
 800d65c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d660:	e002      	b.n	800d668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d662:	bf00      	nop
 800d664:	e000      	b.n	800d668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d666:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d668:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d10a      	bne.n	800d686 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d670:	4b37      	ldr	r3, [pc, #220]	@ (800d750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d674:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800d678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d67c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d67e:	4a34      	ldr	r2, [pc, #208]	@ (800d750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d680:	430b      	orrs	r3, r1
 800d682:	6513      	str	r3, [r2, #80]	@ 0x50
 800d684:	e003      	b.n	800d68e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d68a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d68e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d696:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800d69a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d69e:	2300      	movs	r3, #0
 800d6a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d6a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800d6a8:	460b      	mov	r3, r1
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	d056      	beq.n	800d75c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800d6ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d6b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d6b8:	d033      	beq.n	800d722 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800d6ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d6be:	d82c      	bhi.n	800d71a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d6c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d6c4:	d02f      	beq.n	800d726 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800d6c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d6ca:	d826      	bhi.n	800d71a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d6cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d6d0:	d02b      	beq.n	800d72a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800d6d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d6d6:	d820      	bhi.n	800d71a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d6d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d6dc:	d012      	beq.n	800d704 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800d6de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d6e2:	d81a      	bhi.n	800d71a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d022      	beq.n	800d72e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800d6e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6ec:	d115      	bne.n	800d71a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d6ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6f2:	3308      	adds	r3, #8
 800d6f4:	2101      	movs	r1, #1
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f001 fa0e 	bl	800eb18 <RCCEx_PLL2_Config>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d702:	e015      	b.n	800d730 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d708:	3328      	adds	r3, #40	@ 0x28
 800d70a:	2101      	movs	r1, #1
 800d70c:	4618      	mov	r0, r3
 800d70e:	f001 fab5 	bl	800ec7c <RCCEx_PLL3_Config>
 800d712:	4603      	mov	r3, r0
 800d714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d718:	e00a      	b.n	800d730 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d71a:	2301      	movs	r3, #1
 800d71c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d720:	e006      	b.n	800d730 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d722:	bf00      	nop
 800d724:	e004      	b.n	800d730 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d726:	bf00      	nop
 800d728:	e002      	b.n	800d730 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d72a:	bf00      	nop
 800d72c:	e000      	b.n	800d730 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d72e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d730:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d734:	2b00      	cmp	r3, #0
 800d736:	d10d      	bne.n	800d754 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d738:	4b05      	ldr	r3, [pc, #20]	@ (800d750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d73a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d73c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800d740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d744:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d746:	4a02      	ldr	r2, [pc, #8]	@ (800d750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d748:	430b      	orrs	r3, r1
 800d74a:	6513      	str	r3, [r2, #80]	@ 0x50
 800d74c:	e006      	b.n	800d75c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800d74e:	bf00      	nop
 800d750:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d754:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d758:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d75c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d764:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800d768:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d76c:	2300      	movs	r3, #0
 800d76e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d772:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800d776:	460b      	mov	r3, r1
 800d778:	4313      	orrs	r3, r2
 800d77a:	d055      	beq.n	800d828 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800d77c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d780:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d784:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d788:	d033      	beq.n	800d7f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800d78a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d78e:	d82c      	bhi.n	800d7ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d794:	d02f      	beq.n	800d7f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800d796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d79a:	d826      	bhi.n	800d7ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d79c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d7a0:	d02b      	beq.n	800d7fa <HAL_RCCEx_PeriphCLKConfig+0x672>
 800d7a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d7a6:	d820      	bhi.n	800d7ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d7a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d7ac:	d012      	beq.n	800d7d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800d7ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d7b2:	d81a      	bhi.n	800d7ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d022      	beq.n	800d7fe <HAL_RCCEx_PeriphCLKConfig+0x676>
 800d7b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d7bc:	d115      	bne.n	800d7ea <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d7be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7c2:	3308      	adds	r3, #8
 800d7c4:	2101      	movs	r1, #1
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f001 f9a6 	bl	800eb18 <RCCEx_PLL2_Config>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d7d2:	e015      	b.n	800d800 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d7d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7d8:	3328      	adds	r3, #40	@ 0x28
 800d7da:	2101      	movs	r1, #1
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f001 fa4d 	bl	800ec7c <RCCEx_PLL3_Config>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d7e8:	e00a      	b.n	800d800 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d7f0:	e006      	b.n	800d800 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d7f2:	bf00      	nop
 800d7f4:	e004      	b.n	800d800 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d7f6:	bf00      	nop
 800d7f8:	e002      	b.n	800d800 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d7fa:	bf00      	nop
 800d7fc:	e000      	b.n	800d800 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d7fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d800:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d804:	2b00      	cmp	r3, #0
 800d806:	d10b      	bne.n	800d820 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d808:	4ba3      	ldr	r3, [pc, #652]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d80a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d80c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d814:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d818:	4a9f      	ldr	r2, [pc, #636]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d81a:	430b      	orrs	r3, r1
 800d81c:	6593      	str	r3, [r2, #88]	@ 0x58
 800d81e:	e003      	b.n	800d828 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d820:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d824:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d830:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800d834:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d838:	2300      	movs	r3, #0
 800d83a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d83e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d842:	460b      	mov	r3, r1
 800d844:	4313      	orrs	r3, r2
 800d846:	d037      	beq.n	800d8b8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d84c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d84e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d852:	d00e      	beq.n	800d872 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800d854:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d858:	d816      	bhi.n	800d888 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d018      	beq.n	800d890 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800d85e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d862:	d111      	bne.n	800d888 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d864:	4b8c      	ldr	r3, [pc, #560]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d868:	4a8b      	ldr	r2, [pc, #556]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d86a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d86e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d870:	e00f      	b.n	800d892 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d876:	3308      	adds	r3, #8
 800d878:	2101      	movs	r1, #1
 800d87a:	4618      	mov	r0, r3
 800d87c:	f001 f94c 	bl	800eb18 <RCCEx_PLL2_Config>
 800d880:	4603      	mov	r3, r0
 800d882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d886:	e004      	b.n	800d892 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d888:	2301      	movs	r3, #1
 800d88a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d88e:	e000      	b.n	800d892 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800d890:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d892:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d896:	2b00      	cmp	r3, #0
 800d898:	d10a      	bne.n	800d8b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d89a:	4b7f      	ldr	r3, [pc, #508]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d89c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d89e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d8a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d8a8:	4a7b      	ldr	r2, [pc, #492]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d8aa:	430b      	orrs	r3, r1
 800d8ac:	6513      	str	r3, [r2, #80]	@ 0x50
 800d8ae:	e003      	b.n	800d8b8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d8b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800d8c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d8ce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800d8d2:	460b      	mov	r3, r1
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	d039      	beq.n	800d94c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800d8d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d8de:	2b03      	cmp	r3, #3
 800d8e0:	d81c      	bhi.n	800d91c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800d8e2:	a201      	add	r2, pc, #4	@ (adr r2, 800d8e8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800d8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e8:	0800d925 	.word	0x0800d925
 800d8ec:	0800d8f9 	.word	0x0800d8f9
 800d8f0:	0800d907 	.word	0x0800d907
 800d8f4:	0800d925 	.word	0x0800d925
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d8f8:	4b67      	ldr	r3, [pc, #412]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d8fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8fc:	4a66      	ldr	r2, [pc, #408]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d8fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d902:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d904:	e00f      	b.n	800d926 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d90a:	3308      	adds	r3, #8
 800d90c:	2102      	movs	r1, #2
 800d90e:	4618      	mov	r0, r3
 800d910:	f001 f902 	bl	800eb18 <RCCEx_PLL2_Config>
 800d914:	4603      	mov	r3, r0
 800d916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d91a:	e004      	b.n	800d926 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d91c:	2301      	movs	r3, #1
 800d91e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d922:	e000      	b.n	800d926 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800d924:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d10a      	bne.n	800d944 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d92e:	4b5a      	ldr	r3, [pc, #360]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d932:	f023 0103 	bic.w	r1, r3, #3
 800d936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d93a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d93c:	4a56      	ldr	r2, [pc, #344]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d93e:	430b      	orrs	r3, r1
 800d940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d942:	e003      	b.n	800d94c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d948:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d94c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d954:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800d958:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d95c:	2300      	movs	r3, #0
 800d95e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d962:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800d966:	460b      	mov	r3, r1
 800d968:	4313      	orrs	r3, r2
 800d96a:	f000 809f 	beq.w	800daac <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d96e:	4b4b      	ldr	r3, [pc, #300]	@ (800da9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	4a4a      	ldr	r2, [pc, #296]	@ (800da9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d978:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d97a:	f7f4 fd97 	bl	80024ac <HAL_GetTick>
 800d97e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d982:	e00b      	b.n	800d99c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d984:	f7f4 fd92 	bl	80024ac <HAL_GetTick>
 800d988:	4602      	mov	r2, r0
 800d98a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d98e:	1ad3      	subs	r3, r2, r3
 800d990:	2b64      	cmp	r3, #100	@ 0x64
 800d992:	d903      	bls.n	800d99c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800d994:	2303      	movs	r3, #3
 800d996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d99a:	e005      	b.n	800d9a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d99c:	4b3f      	ldr	r3, [pc, #252]	@ (800da9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d0ed      	beq.n	800d984 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800d9a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d179      	bne.n	800daa4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d9b0:	4b39      	ldr	r3, [pc, #228]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d9b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d9bc:	4053      	eors	r3, r2
 800d9be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d015      	beq.n	800d9f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d9c6:	4b34      	ldr	r3, [pc, #208]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d9ce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d9d2:	4b31      	ldr	r3, [pc, #196]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9d6:	4a30      	ldr	r2, [pc, #192]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d9dc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d9de:	4b2e      	ldr	r3, [pc, #184]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9e2:	4a2d      	ldr	r2, [pc, #180]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d9e8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d9ea:	4a2b      	ldr	r2, [pc, #172]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d9f0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d9f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d9fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d9fe:	d118      	bne.n	800da32 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da00:	f7f4 fd54 	bl	80024ac <HAL_GetTick>
 800da04:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800da08:	e00d      	b.n	800da26 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da0a:	f7f4 fd4f 	bl	80024ac <HAL_GetTick>
 800da0e:	4602      	mov	r2, r0
 800da10:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800da14:	1ad2      	subs	r2, r2, r3
 800da16:	f241 3388 	movw	r3, #5000	@ 0x1388
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d903      	bls.n	800da26 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800da1e:	2303      	movs	r3, #3
 800da20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800da24:	e005      	b.n	800da32 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800da26:	4b1c      	ldr	r3, [pc, #112]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da2a:	f003 0302 	and.w	r3, r3, #2
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d0eb      	beq.n	800da0a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800da32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da36:	2b00      	cmp	r3, #0
 800da38:	d129      	bne.n	800da8e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800da3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800da42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800da46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800da4a:	d10e      	bne.n	800da6a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800da4c:	4b12      	ldr	r3, [pc, #72]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da4e:	691b      	ldr	r3, [r3, #16]
 800da50:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800da54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800da5c:	091a      	lsrs	r2, r3, #4
 800da5e:	4b10      	ldr	r3, [pc, #64]	@ (800daa0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800da60:	4013      	ands	r3, r2
 800da62:	4a0d      	ldr	r2, [pc, #52]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da64:	430b      	orrs	r3, r1
 800da66:	6113      	str	r3, [r2, #16]
 800da68:	e005      	b.n	800da76 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800da6a:	4b0b      	ldr	r3, [pc, #44]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da6c:	691b      	ldr	r3, [r3, #16]
 800da6e:	4a0a      	ldr	r2, [pc, #40]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da70:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800da74:	6113      	str	r3, [r2, #16]
 800da76:	4b08      	ldr	r3, [pc, #32]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da78:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800da7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800da82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800da86:	4a04      	ldr	r2, [pc, #16]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da88:	430b      	orrs	r3, r1
 800da8a:	6713      	str	r3, [r2, #112]	@ 0x70
 800da8c:	e00e      	b.n	800daac <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800da8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800da96:	e009      	b.n	800daac <HAL_RCCEx_PeriphCLKConfig+0x924>
 800da98:	58024400 	.word	0x58024400
 800da9c:	58024800 	.word	0x58024800
 800daa0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800daa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800daa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800daac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab4:	f002 0301 	and.w	r3, r2, #1
 800dab8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800dabc:	2300      	movs	r3, #0
 800dabe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dac2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800dac6:	460b      	mov	r3, r1
 800dac8:	4313      	orrs	r3, r2
 800daca:	f000 8089 	beq.w	800dbe0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800dace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dad2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dad4:	2b28      	cmp	r3, #40	@ 0x28
 800dad6:	d86b      	bhi.n	800dbb0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800dad8:	a201      	add	r2, pc, #4	@ (adr r2, 800dae0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800dada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dade:	bf00      	nop
 800dae0:	0800dbb9 	.word	0x0800dbb9
 800dae4:	0800dbb1 	.word	0x0800dbb1
 800dae8:	0800dbb1 	.word	0x0800dbb1
 800daec:	0800dbb1 	.word	0x0800dbb1
 800daf0:	0800dbb1 	.word	0x0800dbb1
 800daf4:	0800dbb1 	.word	0x0800dbb1
 800daf8:	0800dbb1 	.word	0x0800dbb1
 800dafc:	0800dbb1 	.word	0x0800dbb1
 800db00:	0800db85 	.word	0x0800db85
 800db04:	0800dbb1 	.word	0x0800dbb1
 800db08:	0800dbb1 	.word	0x0800dbb1
 800db0c:	0800dbb1 	.word	0x0800dbb1
 800db10:	0800dbb1 	.word	0x0800dbb1
 800db14:	0800dbb1 	.word	0x0800dbb1
 800db18:	0800dbb1 	.word	0x0800dbb1
 800db1c:	0800dbb1 	.word	0x0800dbb1
 800db20:	0800db9b 	.word	0x0800db9b
 800db24:	0800dbb1 	.word	0x0800dbb1
 800db28:	0800dbb1 	.word	0x0800dbb1
 800db2c:	0800dbb1 	.word	0x0800dbb1
 800db30:	0800dbb1 	.word	0x0800dbb1
 800db34:	0800dbb1 	.word	0x0800dbb1
 800db38:	0800dbb1 	.word	0x0800dbb1
 800db3c:	0800dbb1 	.word	0x0800dbb1
 800db40:	0800dbb9 	.word	0x0800dbb9
 800db44:	0800dbb1 	.word	0x0800dbb1
 800db48:	0800dbb1 	.word	0x0800dbb1
 800db4c:	0800dbb1 	.word	0x0800dbb1
 800db50:	0800dbb1 	.word	0x0800dbb1
 800db54:	0800dbb1 	.word	0x0800dbb1
 800db58:	0800dbb1 	.word	0x0800dbb1
 800db5c:	0800dbb1 	.word	0x0800dbb1
 800db60:	0800dbb9 	.word	0x0800dbb9
 800db64:	0800dbb1 	.word	0x0800dbb1
 800db68:	0800dbb1 	.word	0x0800dbb1
 800db6c:	0800dbb1 	.word	0x0800dbb1
 800db70:	0800dbb1 	.word	0x0800dbb1
 800db74:	0800dbb1 	.word	0x0800dbb1
 800db78:	0800dbb1 	.word	0x0800dbb1
 800db7c:	0800dbb1 	.word	0x0800dbb1
 800db80:	0800dbb9 	.word	0x0800dbb9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800db84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db88:	3308      	adds	r3, #8
 800db8a:	2101      	movs	r1, #1
 800db8c:	4618      	mov	r0, r3
 800db8e:	f000 ffc3 	bl	800eb18 <RCCEx_PLL2_Config>
 800db92:	4603      	mov	r3, r0
 800db94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800db98:	e00f      	b.n	800dbba <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800db9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db9e:	3328      	adds	r3, #40	@ 0x28
 800dba0:	2101      	movs	r1, #1
 800dba2:	4618      	mov	r0, r3
 800dba4:	f001 f86a 	bl	800ec7c <RCCEx_PLL3_Config>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800dbae:	e004      	b.n	800dbba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dbb6:	e000      	b.n	800dbba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800dbb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d10a      	bne.n	800dbd8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800dbc2:	4bbf      	ldr	r3, [pc, #764]	@ (800dec0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dbc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbc6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800dbca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dbd0:	4abb      	ldr	r2, [pc, #748]	@ (800dec0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dbd2:	430b      	orrs	r3, r1
 800dbd4:	6553      	str	r3, [r2, #84]	@ 0x54
 800dbd6:	e003      	b.n	800dbe0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800dbe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe8:	f002 0302 	and.w	r3, r2, #2
 800dbec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800dbf6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	4313      	orrs	r3, r2
 800dbfe:	d041      	beq.n	800dc84 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800dc00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dc06:	2b05      	cmp	r3, #5
 800dc08:	d824      	bhi.n	800dc54 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800dc0a:	a201      	add	r2, pc, #4	@ (adr r2, 800dc10 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800dc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc10:	0800dc5d 	.word	0x0800dc5d
 800dc14:	0800dc29 	.word	0x0800dc29
 800dc18:	0800dc3f 	.word	0x0800dc3f
 800dc1c:	0800dc5d 	.word	0x0800dc5d
 800dc20:	0800dc5d 	.word	0x0800dc5d
 800dc24:	0800dc5d 	.word	0x0800dc5d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dc28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc2c:	3308      	adds	r3, #8
 800dc2e:	2101      	movs	r1, #1
 800dc30:	4618      	mov	r0, r3
 800dc32:	f000 ff71 	bl	800eb18 <RCCEx_PLL2_Config>
 800dc36:	4603      	mov	r3, r0
 800dc38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800dc3c:	e00f      	b.n	800dc5e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dc3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc42:	3328      	adds	r3, #40	@ 0x28
 800dc44:	2101      	movs	r1, #1
 800dc46:	4618      	mov	r0, r3
 800dc48:	f001 f818 	bl	800ec7c <RCCEx_PLL3_Config>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800dc52:	e004      	b.n	800dc5e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dc54:	2301      	movs	r3, #1
 800dc56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dc5a:	e000      	b.n	800dc5e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800dc5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d10a      	bne.n	800dc7c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800dc66:	4b96      	ldr	r3, [pc, #600]	@ (800dec0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dc68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc6a:	f023 0107 	bic.w	r1, r3, #7
 800dc6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dc74:	4a92      	ldr	r2, [pc, #584]	@ (800dec0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dc76:	430b      	orrs	r3, r1
 800dc78:	6553      	str	r3, [r2, #84]	@ 0x54
 800dc7a:	e003      	b.n	800dc84 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800dc84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc8c:	f002 0304 	and.w	r3, r2, #4
 800dc90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dc94:	2300      	movs	r3, #0
 800dc96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dc9a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800dc9e:	460b      	mov	r3, r1
 800dca0:	4313      	orrs	r3, r2
 800dca2:	d044      	beq.n	800dd2e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800dca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dcac:	2b05      	cmp	r3, #5
 800dcae:	d825      	bhi.n	800dcfc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800dcb0:	a201      	add	r2, pc, #4	@ (adr r2, 800dcb8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800dcb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb6:	bf00      	nop
 800dcb8:	0800dd05 	.word	0x0800dd05
 800dcbc:	0800dcd1 	.word	0x0800dcd1
 800dcc0:	0800dce7 	.word	0x0800dce7
 800dcc4:	0800dd05 	.word	0x0800dd05
 800dcc8:	0800dd05 	.word	0x0800dd05
 800dccc:	0800dd05 	.word	0x0800dd05
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dcd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcd4:	3308      	adds	r3, #8
 800dcd6:	2101      	movs	r1, #1
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f000 ff1d 	bl	800eb18 <RCCEx_PLL2_Config>
 800dcde:	4603      	mov	r3, r0
 800dce0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800dce4:	e00f      	b.n	800dd06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcea:	3328      	adds	r3, #40	@ 0x28
 800dcec:	2101      	movs	r1, #1
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f000 ffc4 	bl	800ec7c <RCCEx_PLL3_Config>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800dcfa:	e004      	b.n	800dd06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dd02:	e000      	b.n	800dd06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800dd04:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d10b      	bne.n	800dd26 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800dd0e:	4b6c      	ldr	r3, [pc, #432]	@ (800dec0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dd10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd12:	f023 0107 	bic.w	r1, r3, #7
 800dd16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dd1e:	4a68      	ldr	r2, [pc, #416]	@ (800dec0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dd20:	430b      	orrs	r3, r1
 800dd22:	6593      	str	r3, [r2, #88]	@ 0x58
 800dd24:	e003      	b.n	800dd2e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800dd2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd36:	f002 0320 	and.w	r3, r2, #32
 800dd3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800dd3e:	2300      	movs	r3, #0
 800dd40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dd44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800dd48:	460b      	mov	r3, r1
 800dd4a:	4313      	orrs	r3, r2
 800dd4c:	d055      	beq.n	800ddfa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800dd4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dd5a:	d033      	beq.n	800ddc4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800dd5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dd60:	d82c      	bhi.n	800ddbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800dd62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd66:	d02f      	beq.n	800ddc8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800dd68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd6c:	d826      	bhi.n	800ddbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800dd6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dd72:	d02b      	beq.n	800ddcc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800dd74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dd78:	d820      	bhi.n	800ddbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800dd7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd7e:	d012      	beq.n	800dda6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800dd80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd84:	d81a      	bhi.n	800ddbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d022      	beq.n	800ddd0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800dd8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd8e:	d115      	bne.n	800ddbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dd90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd94:	3308      	adds	r3, #8
 800dd96:	2100      	movs	r1, #0
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f000 febd 	bl	800eb18 <RCCEx_PLL2_Config>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800dda4:	e015      	b.n	800ddd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dda6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddaa:	3328      	adds	r3, #40	@ 0x28
 800ddac:	2102      	movs	r1, #2
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f000 ff64 	bl	800ec7c <RCCEx_PLL3_Config>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ddba:	e00a      	b.n	800ddd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ddc2:	e006      	b.n	800ddd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ddc4:	bf00      	nop
 800ddc6:	e004      	b.n	800ddd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ddc8:	bf00      	nop
 800ddca:	e002      	b.n	800ddd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ddcc:	bf00      	nop
 800ddce:	e000      	b.n	800ddd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ddd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ddd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d10b      	bne.n	800ddf2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ddda:	4b39      	ldr	r3, [pc, #228]	@ (800dec0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddde:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800dde2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dde6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ddea:	4a35      	ldr	r2, [pc, #212]	@ (800dec0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ddec:	430b      	orrs	r3, r1
 800ddee:	6553      	str	r3, [r2, #84]	@ 0x54
 800ddf0:	e003      	b.n	800ddfa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ddf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ddfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de02:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800de06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800de0a:	2300      	movs	r3, #0
 800de0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800de10:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800de14:	460b      	mov	r3, r1
 800de16:	4313      	orrs	r3, r2
 800de18:	d058      	beq.n	800decc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800de1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800de22:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800de26:	d033      	beq.n	800de90 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800de28:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800de2c:	d82c      	bhi.n	800de88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800de2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de32:	d02f      	beq.n	800de94 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800de34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de38:	d826      	bhi.n	800de88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800de3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800de3e:	d02b      	beq.n	800de98 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800de40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800de44:	d820      	bhi.n	800de88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800de46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800de4a:	d012      	beq.n	800de72 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800de4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800de50:	d81a      	bhi.n	800de88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800de52:	2b00      	cmp	r3, #0
 800de54:	d022      	beq.n	800de9c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800de56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de5a:	d115      	bne.n	800de88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800de5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de60:	3308      	adds	r3, #8
 800de62:	2100      	movs	r1, #0
 800de64:	4618      	mov	r0, r3
 800de66:	f000 fe57 	bl	800eb18 <RCCEx_PLL2_Config>
 800de6a:	4603      	mov	r3, r0
 800de6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800de70:	e015      	b.n	800de9e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800de72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de76:	3328      	adds	r3, #40	@ 0x28
 800de78:	2102      	movs	r1, #2
 800de7a:	4618      	mov	r0, r3
 800de7c:	f000 fefe 	bl	800ec7c <RCCEx_PLL3_Config>
 800de80:	4603      	mov	r3, r0
 800de82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800de86:	e00a      	b.n	800de9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800de88:	2301      	movs	r3, #1
 800de8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800de8e:	e006      	b.n	800de9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800de90:	bf00      	nop
 800de92:	e004      	b.n	800de9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800de94:	bf00      	nop
 800de96:	e002      	b.n	800de9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800de98:	bf00      	nop
 800de9a:	e000      	b.n	800de9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800de9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d10e      	bne.n	800dec4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800dea6:	4b06      	ldr	r3, [pc, #24]	@ (800dec0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800deaa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800deae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800deb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800deb6:	4a02      	ldr	r2, [pc, #8]	@ (800dec0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800deb8:	430b      	orrs	r3, r1
 800deba:	6593      	str	r3, [r2, #88]	@ 0x58
 800debc:	e006      	b.n	800decc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800debe:	bf00      	nop
 800dec0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dec8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800decc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ded0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800ded8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800dedc:	2300      	movs	r3, #0
 800dede:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dee2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800dee6:	460b      	mov	r3, r1
 800dee8:	4313      	orrs	r3, r2
 800deea:	d055      	beq.n	800df98 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800deec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800def0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800def4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800def8:	d033      	beq.n	800df62 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800defa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800defe:	d82c      	bhi.n	800df5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800df00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800df04:	d02f      	beq.n	800df66 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800df06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800df0a:	d826      	bhi.n	800df5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800df0c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800df10:	d02b      	beq.n	800df6a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800df12:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800df16:	d820      	bhi.n	800df5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800df18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800df1c:	d012      	beq.n	800df44 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800df1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800df22:	d81a      	bhi.n	800df5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800df24:	2b00      	cmp	r3, #0
 800df26:	d022      	beq.n	800df6e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800df28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800df2c:	d115      	bne.n	800df5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800df2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df32:	3308      	adds	r3, #8
 800df34:	2100      	movs	r1, #0
 800df36:	4618      	mov	r0, r3
 800df38:	f000 fdee 	bl	800eb18 <RCCEx_PLL2_Config>
 800df3c:	4603      	mov	r3, r0
 800df3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800df42:	e015      	b.n	800df70 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800df44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df48:	3328      	adds	r3, #40	@ 0x28
 800df4a:	2102      	movs	r1, #2
 800df4c:	4618      	mov	r0, r3
 800df4e:	f000 fe95 	bl	800ec7c <RCCEx_PLL3_Config>
 800df52:	4603      	mov	r3, r0
 800df54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800df58:	e00a      	b.n	800df70 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800df5a:	2301      	movs	r3, #1
 800df5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800df60:	e006      	b.n	800df70 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800df62:	bf00      	nop
 800df64:	e004      	b.n	800df70 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800df66:	bf00      	nop
 800df68:	e002      	b.n	800df70 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800df6a:	bf00      	nop
 800df6c:	e000      	b.n	800df70 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800df6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df74:	2b00      	cmp	r3, #0
 800df76:	d10b      	bne.n	800df90 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800df78:	4ba1      	ldr	r3, [pc, #644]	@ (800e200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800df7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df7c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800df80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800df88:	4a9d      	ldr	r2, [pc, #628]	@ (800e200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800df8a:	430b      	orrs	r3, r1
 800df8c:	6593      	str	r3, [r2, #88]	@ 0x58
 800df8e:	e003      	b.n	800df98 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800df98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa0:	f002 0308 	and.w	r3, r2, #8
 800dfa4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800dfae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800dfb2:	460b      	mov	r3, r1
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	d01e      	beq.n	800dff6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800dfb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dfc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dfc4:	d10c      	bne.n	800dfe0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800dfc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfca:	3328      	adds	r3, #40	@ 0x28
 800dfcc:	2102      	movs	r1, #2
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f000 fe54 	bl	800ec7c <RCCEx_PLL3_Config>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d002      	beq.n	800dfe0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800dfe0:	4b87      	ldr	r3, [pc, #540]	@ (800e200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dfe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dfe4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800dfe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dff0:	4a83      	ldr	r2, [pc, #524]	@ (800e200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dff2:	430b      	orrs	r3, r1
 800dff4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800dff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffe:	f002 0310 	and.w	r3, r2, #16
 800e002:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e006:	2300      	movs	r3, #0
 800e008:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e00c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800e010:	460b      	mov	r3, r1
 800e012:	4313      	orrs	r3, r2
 800e014:	d01e      	beq.n	800e054 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e01a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e01e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e022:	d10c      	bne.n	800e03e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e028:	3328      	adds	r3, #40	@ 0x28
 800e02a:	2102      	movs	r1, #2
 800e02c:	4618      	mov	r0, r3
 800e02e:	f000 fe25 	bl	800ec7c <RCCEx_PLL3_Config>
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	d002      	beq.n	800e03e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800e038:	2301      	movs	r3, #1
 800e03a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e03e:	4b70      	ldr	r3, [pc, #448]	@ (800e200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e042:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e04a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e04e:	4a6c      	ldr	r2, [pc, #432]	@ (800e200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e050:	430b      	orrs	r3, r1
 800e052:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e05c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800e060:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e064:	2300      	movs	r3, #0
 800e066:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e06a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800e06e:	460b      	mov	r3, r1
 800e070:	4313      	orrs	r3, r2
 800e072:	d03e      	beq.n	800e0f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800e074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e078:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e07c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e080:	d022      	beq.n	800e0c8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800e082:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e086:	d81b      	bhi.n	800e0c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d003      	beq.n	800e094 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800e08c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e090:	d00b      	beq.n	800e0aa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800e092:	e015      	b.n	800e0c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e098:	3308      	adds	r3, #8
 800e09a:	2100      	movs	r1, #0
 800e09c:	4618      	mov	r0, r3
 800e09e:	f000 fd3b 	bl	800eb18 <RCCEx_PLL2_Config>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e0a8:	e00f      	b.n	800e0ca <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0ae:	3328      	adds	r3, #40	@ 0x28
 800e0b0:	2102      	movs	r1, #2
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f000 fde2 	bl	800ec7c <RCCEx_PLL3_Config>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e0be:	e004      	b.n	800e0ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e0c6:	e000      	b.n	800e0ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800e0c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e0ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d10b      	bne.n	800e0ea <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e0d2:	4b4b      	ldr	r3, [pc, #300]	@ (800e200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e0d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0d6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800e0da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e0e2:	4a47      	ldr	r2, [pc, #284]	@ (800e200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e0e4:	430b      	orrs	r3, r1
 800e0e6:	6593      	str	r3, [r2, #88]	@ 0x58
 800e0e8:	e003      	b.n	800e0f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e0ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800e0fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e100:	2300      	movs	r3, #0
 800e102:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e104:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800e108:	460b      	mov	r3, r1
 800e10a:	4313      	orrs	r3, r2
 800e10c:	d03b      	beq.n	800e186 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800e10e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e116:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e11a:	d01f      	beq.n	800e15c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800e11c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e120:	d818      	bhi.n	800e154 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800e122:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e126:	d003      	beq.n	800e130 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800e128:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e12c:	d007      	beq.n	800e13e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800e12e:	e011      	b.n	800e154 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e130:	4b33      	ldr	r3, [pc, #204]	@ (800e200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e134:	4a32      	ldr	r2, [pc, #200]	@ (800e200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e136:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e13a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800e13c:	e00f      	b.n	800e15e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e142:	3328      	adds	r3, #40	@ 0x28
 800e144:	2101      	movs	r1, #1
 800e146:	4618      	mov	r0, r3
 800e148:	f000 fd98 	bl	800ec7c <RCCEx_PLL3_Config>
 800e14c:	4603      	mov	r3, r0
 800e14e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800e152:	e004      	b.n	800e15e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e154:	2301      	movs	r3, #1
 800e156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e15a:	e000      	b.n	800e15e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800e15c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e15e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e162:	2b00      	cmp	r3, #0
 800e164:	d10b      	bne.n	800e17e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e166:	4b26      	ldr	r3, [pc, #152]	@ (800e200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e16a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e16e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e176:	4a22      	ldr	r2, [pc, #136]	@ (800e200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e178:	430b      	orrs	r3, r1
 800e17a:	6553      	str	r3, [r2, #84]	@ 0x54
 800e17c:	e003      	b.n	800e186 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e17e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e182:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800e192:	673b      	str	r3, [r7, #112]	@ 0x70
 800e194:	2300      	movs	r3, #0
 800e196:	677b      	str	r3, [r7, #116]	@ 0x74
 800e198:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800e19c:	460b      	mov	r3, r1
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	d034      	beq.n	800e20c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800e1a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d003      	beq.n	800e1b4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800e1ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e1b0:	d007      	beq.n	800e1c2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800e1b2:	e011      	b.n	800e1d8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1b4:	4b12      	ldr	r3, [pc, #72]	@ (800e200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e1b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1b8:	4a11      	ldr	r2, [pc, #68]	@ (800e200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e1ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e1be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e1c0:	e00e      	b.n	800e1e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e1c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1c6:	3308      	adds	r3, #8
 800e1c8:	2102      	movs	r1, #2
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f000 fca4 	bl	800eb18 <RCCEx_PLL2_Config>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e1d6:	e003      	b.n	800e1e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800e1d8:	2301      	movs	r3, #1
 800e1da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e1de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e1e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d10d      	bne.n	800e204 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e1e8:	4b05      	ldr	r3, [pc, #20]	@ (800e200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e1ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1ec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e1f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e1f6:	4a02      	ldr	r2, [pc, #8]	@ (800e200 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e1f8:	430b      	orrs	r3, r1
 800e1fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e1fc:	e006      	b.n	800e20c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800e1fe:	bf00      	nop
 800e200:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e208:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e20c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e214:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800e218:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e21a:	2300      	movs	r3, #0
 800e21c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e21e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800e222:	460b      	mov	r3, r1
 800e224:	4313      	orrs	r3, r2
 800e226:	d00c      	beq.n	800e242 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e22c:	3328      	adds	r3, #40	@ 0x28
 800e22e:	2102      	movs	r1, #2
 800e230:	4618      	mov	r0, r3
 800e232:	f000 fd23 	bl	800ec7c <RCCEx_PLL3_Config>
 800e236:	4603      	mov	r3, r0
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d002      	beq.n	800e242 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800e23c:	2301      	movs	r3, #1
 800e23e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800e24e:	663b      	str	r3, [r7, #96]	@ 0x60
 800e250:	2300      	movs	r3, #0
 800e252:	667b      	str	r3, [r7, #100]	@ 0x64
 800e254:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800e258:	460b      	mov	r3, r1
 800e25a:	4313      	orrs	r3, r2
 800e25c:	d038      	beq.n	800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800e25e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e266:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e26a:	d018      	beq.n	800e29e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800e26c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e270:	d811      	bhi.n	800e296 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e272:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e276:	d014      	beq.n	800e2a2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800e278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e27c:	d80b      	bhi.n	800e296 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d011      	beq.n	800e2a6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800e282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e286:	d106      	bne.n	800e296 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e288:	4bc3      	ldr	r3, [pc, #780]	@ (800e598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e28a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e28c:	4ac2      	ldr	r2, [pc, #776]	@ (800e598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e28e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e292:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800e294:	e008      	b.n	800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e296:	2301      	movs	r3, #1
 800e298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e29c:	e004      	b.n	800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e29e:	bf00      	nop
 800e2a0:	e002      	b.n	800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e2a2:	bf00      	nop
 800e2a4:	e000      	b.n	800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e2a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e2a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d10b      	bne.n	800e2c8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e2b0:	4bb9      	ldr	r3, [pc, #740]	@ (800e598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e2b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2b4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e2b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2c0:	4ab5      	ldr	r2, [pc, #724]	@ (800e598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e2c2:	430b      	orrs	r3, r1
 800e2c4:	6553      	str	r3, [r2, #84]	@ 0x54
 800e2c6:	e003      	b.n	800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e2cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e2d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800e2dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e2de:	2300      	movs	r3, #0
 800e2e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e2e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800e2e6:	460b      	mov	r3, r1
 800e2e8:	4313      	orrs	r3, r2
 800e2ea:	d009      	beq.n	800e300 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e2ec:	4baa      	ldr	r3, [pc, #680]	@ (800e598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e2ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e2f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e2fa:	4aa7      	ldr	r2, [pc, #668]	@ (800e598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e2fc:	430b      	orrs	r3, r1
 800e2fe:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800e300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e308:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800e30c:	653b      	str	r3, [r7, #80]	@ 0x50
 800e30e:	2300      	movs	r3, #0
 800e310:	657b      	str	r3, [r7, #84]	@ 0x54
 800e312:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800e316:	460b      	mov	r3, r1
 800e318:	4313      	orrs	r3, r2
 800e31a:	d00a      	beq.n	800e332 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800e31c:	4b9e      	ldr	r3, [pc, #632]	@ (800e598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e31e:	691b      	ldr	r3, [r3, #16]
 800e320:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800e324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e328:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e32c:	4a9a      	ldr	r2, [pc, #616]	@ (800e598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e32e:	430b      	orrs	r3, r1
 800e330:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800e33e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e340:	2300      	movs	r3, #0
 800e342:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e344:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800e348:	460b      	mov	r3, r1
 800e34a:	4313      	orrs	r3, r2
 800e34c:	d009      	beq.n	800e362 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e34e:	4b92      	ldr	r3, [pc, #584]	@ (800e598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e352:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800e356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e35a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e35c:	4a8e      	ldr	r2, [pc, #568]	@ (800e598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e35e:	430b      	orrs	r3, r1
 800e360:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800e36e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e370:	2300      	movs	r3, #0
 800e372:	647b      	str	r3, [r7, #68]	@ 0x44
 800e374:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800e378:	460b      	mov	r3, r1
 800e37a:	4313      	orrs	r3, r2
 800e37c:	d00e      	beq.n	800e39c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e37e:	4b86      	ldr	r3, [pc, #536]	@ (800e598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e380:	691b      	ldr	r3, [r3, #16]
 800e382:	4a85      	ldr	r2, [pc, #532]	@ (800e598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e384:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e388:	6113      	str	r3, [r2, #16]
 800e38a:	4b83      	ldr	r3, [pc, #524]	@ (800e598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e38c:	6919      	ldr	r1, [r3, #16]
 800e38e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e392:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e396:	4a80      	ldr	r2, [pc, #512]	@ (800e598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e398:	430b      	orrs	r3, r1
 800e39a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800e3a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e3ae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800e3b2:	460b      	mov	r3, r1
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	d009      	beq.n	800e3cc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e3b8:	4b77      	ldr	r3, [pc, #476]	@ (800e598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e3ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3bc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e3c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3c6:	4a74      	ldr	r2, [pc, #464]	@ (800e598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e3c8:	430b      	orrs	r3, r1
 800e3ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e3cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800e3d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800e3da:	2300      	movs	r3, #0
 800e3dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800e3de:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800e3e2:	460b      	mov	r3, r1
 800e3e4:	4313      	orrs	r3, r2
 800e3e6:	d00a      	beq.n	800e3fe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e3e8:	4b6b      	ldr	r3, [pc, #428]	@ (800e598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e3ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3ec:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800e3f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e3f8:	4a67      	ldr	r2, [pc, #412]	@ (800e598 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e3fa:	430b      	orrs	r3, r1
 800e3fc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800e3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e406:	2100      	movs	r1, #0
 800e408:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e40a:	f003 0301 	and.w	r3, r3, #1
 800e40e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e410:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800e414:	460b      	mov	r3, r1
 800e416:	4313      	orrs	r3, r2
 800e418:	d011      	beq.n	800e43e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e41a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e41e:	3308      	adds	r3, #8
 800e420:	2100      	movs	r1, #0
 800e422:	4618      	mov	r0, r3
 800e424:	f000 fb78 	bl	800eb18 <RCCEx_PLL2_Config>
 800e428:	4603      	mov	r3, r0
 800e42a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e42e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e432:	2b00      	cmp	r3, #0
 800e434:	d003      	beq.n	800e43e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e43a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800e43e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e446:	2100      	movs	r1, #0
 800e448:	6239      	str	r1, [r7, #32]
 800e44a:	f003 0302 	and.w	r3, r3, #2
 800e44e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e450:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e454:	460b      	mov	r3, r1
 800e456:	4313      	orrs	r3, r2
 800e458:	d011      	beq.n	800e47e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e45e:	3308      	adds	r3, #8
 800e460:	2101      	movs	r1, #1
 800e462:	4618      	mov	r0, r3
 800e464:	f000 fb58 	bl	800eb18 <RCCEx_PLL2_Config>
 800e468:	4603      	mov	r3, r0
 800e46a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e46e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e472:	2b00      	cmp	r3, #0
 800e474:	d003      	beq.n	800e47e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e47a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800e47e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e486:	2100      	movs	r1, #0
 800e488:	61b9      	str	r1, [r7, #24]
 800e48a:	f003 0304 	and.w	r3, r3, #4
 800e48e:	61fb      	str	r3, [r7, #28]
 800e490:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e494:	460b      	mov	r3, r1
 800e496:	4313      	orrs	r3, r2
 800e498:	d011      	beq.n	800e4be <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e49a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e49e:	3308      	adds	r3, #8
 800e4a0:	2102      	movs	r1, #2
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f000 fb38 	bl	800eb18 <RCCEx_PLL2_Config>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e4ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d003      	beq.n	800e4be <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800e4be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c6:	2100      	movs	r1, #0
 800e4c8:	6139      	str	r1, [r7, #16]
 800e4ca:	f003 0308 	and.w	r3, r3, #8
 800e4ce:	617b      	str	r3, [r7, #20]
 800e4d0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	4313      	orrs	r3, r2
 800e4d8:	d011      	beq.n	800e4fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e4da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4de:	3328      	adds	r3, #40	@ 0x28
 800e4e0:	2100      	movs	r1, #0
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f000 fbca 	bl	800ec7c <RCCEx_PLL3_Config>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800e4ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d003      	beq.n	800e4fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800e4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e506:	2100      	movs	r1, #0
 800e508:	60b9      	str	r1, [r7, #8]
 800e50a:	f003 0310 	and.w	r3, r3, #16
 800e50e:	60fb      	str	r3, [r7, #12]
 800e510:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e514:	460b      	mov	r3, r1
 800e516:	4313      	orrs	r3, r2
 800e518:	d011      	beq.n	800e53e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e51e:	3328      	adds	r3, #40	@ 0x28
 800e520:	2101      	movs	r1, #1
 800e522:	4618      	mov	r0, r3
 800e524:	f000 fbaa 	bl	800ec7c <RCCEx_PLL3_Config>
 800e528:	4603      	mov	r3, r0
 800e52a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e52e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e532:	2b00      	cmp	r3, #0
 800e534:	d003      	beq.n	800e53e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e53a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800e53e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e546:	2100      	movs	r1, #0
 800e548:	6039      	str	r1, [r7, #0]
 800e54a:	f003 0320 	and.w	r3, r3, #32
 800e54e:	607b      	str	r3, [r7, #4]
 800e550:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e554:	460b      	mov	r3, r1
 800e556:	4313      	orrs	r3, r2
 800e558:	d011      	beq.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e55a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e55e:	3328      	adds	r3, #40	@ 0x28
 800e560:	2102      	movs	r1, #2
 800e562:	4618      	mov	r0, r3
 800e564:	f000 fb8a 	bl	800ec7c <RCCEx_PLL3_Config>
 800e568:	4603      	mov	r3, r0
 800e56a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e56e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e572:	2b00      	cmp	r3, #0
 800e574:	d003      	beq.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e57a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800e57e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800e582:	2b00      	cmp	r3, #0
 800e584:	d101      	bne.n	800e58a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800e586:	2300      	movs	r3, #0
 800e588:	e000      	b.n	800e58c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800e58a:	2301      	movs	r3, #1
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800e592:	46bd      	mov	sp, r7
 800e594:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e598:	58024400 	.word	0x58024400

0800e59c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800e5a0:	f7fe fd96 	bl	800d0d0 <HAL_RCC_GetHCLKFreq>
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	4b06      	ldr	r3, [pc, #24]	@ (800e5c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800e5a8:	6a1b      	ldr	r3, [r3, #32]
 800e5aa:	091b      	lsrs	r3, r3, #4
 800e5ac:	f003 0307 	and.w	r3, r3, #7
 800e5b0:	4904      	ldr	r1, [pc, #16]	@ (800e5c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800e5b2:	5ccb      	ldrb	r3, [r1, r3]
 800e5b4:	f003 031f 	and.w	r3, r3, #31
 800e5b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	bd80      	pop	{r7, pc}
 800e5c0:	58024400 	.word	0x58024400
 800e5c4:	08016128 	.word	0x08016128

0800e5c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e5c8:	b480      	push	{r7}
 800e5ca:	b089      	sub	sp, #36	@ 0x24
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e5d0:	4ba1      	ldr	r3, [pc, #644]	@ (800e858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e5d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5d4:	f003 0303 	and.w	r3, r3, #3
 800e5d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800e5da:	4b9f      	ldr	r3, [pc, #636]	@ (800e858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e5dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5de:	0b1b      	lsrs	r3, r3, #12
 800e5e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e5e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e5e6:	4b9c      	ldr	r3, [pc, #624]	@ (800e858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e5e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5ea:	091b      	lsrs	r3, r3, #4
 800e5ec:	f003 0301 	and.w	r3, r3, #1
 800e5f0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800e5f2:	4b99      	ldr	r3, [pc, #612]	@ (800e858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e5f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5f6:	08db      	lsrs	r3, r3, #3
 800e5f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e5fc:	693a      	ldr	r2, [r7, #16]
 800e5fe:	fb02 f303 	mul.w	r3, r2, r3
 800e602:	ee07 3a90 	vmov	s15, r3
 800e606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e60a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	2b00      	cmp	r3, #0
 800e612:	f000 8111 	beq.w	800e838 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	2b02      	cmp	r3, #2
 800e61a:	f000 8083 	beq.w	800e724 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800e61e:	69bb      	ldr	r3, [r7, #24]
 800e620:	2b02      	cmp	r3, #2
 800e622:	f200 80a1 	bhi.w	800e768 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800e626:	69bb      	ldr	r3, [r7, #24]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d003      	beq.n	800e634 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	2b01      	cmp	r3, #1
 800e630:	d056      	beq.n	800e6e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800e632:	e099      	b.n	800e768 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e634:	4b88      	ldr	r3, [pc, #544]	@ (800e858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f003 0320 	and.w	r3, r3, #32
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d02d      	beq.n	800e69c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e640:	4b85      	ldr	r3, [pc, #532]	@ (800e858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	08db      	lsrs	r3, r3, #3
 800e646:	f003 0303 	and.w	r3, r3, #3
 800e64a:	4a84      	ldr	r2, [pc, #528]	@ (800e85c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800e64c:	fa22 f303 	lsr.w	r3, r2, r3
 800e650:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	ee07 3a90 	vmov	s15, r3
 800e658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	ee07 3a90 	vmov	s15, r3
 800e662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e66a:	4b7b      	ldr	r3, [pc, #492]	@ (800e858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e66c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e66e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e672:	ee07 3a90 	vmov	s15, r3
 800e676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e67a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e67e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e860 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e68a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e68e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e692:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e696:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e69a:	e087      	b.n	800e7ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	ee07 3a90 	vmov	s15, r3
 800e6a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e864 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e6aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6ae:	4b6a      	ldr	r3, [pc, #424]	@ (800e858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e6b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6b6:	ee07 3a90 	vmov	s15, r3
 800e6ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6be:	ed97 6a03 	vldr	s12, [r7, #12]
 800e6c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e860 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e6c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e6d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e6de:	e065      	b.n	800e7ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	ee07 3a90 	vmov	s15, r3
 800e6e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e868 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e6ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6f2:	4b59      	ldr	r3, [pc, #356]	@ (800e858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e6f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6fa:	ee07 3a90 	vmov	s15, r3
 800e6fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e702:	ed97 6a03 	vldr	s12, [r7, #12]
 800e706:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e860 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e70a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e70e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e71a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e71e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e722:	e043      	b.n	800e7ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	ee07 3a90 	vmov	s15, r3
 800e72a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e72e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e86c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800e732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e736:	4b48      	ldr	r3, [pc, #288]	@ (800e858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e73a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e73e:	ee07 3a90 	vmov	s15, r3
 800e742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e746:	ed97 6a03 	vldr	s12, [r7, #12]
 800e74a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e860 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e74e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e75a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e75e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e766:	e021      	b.n	800e7ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	ee07 3a90 	vmov	s15, r3
 800e76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e772:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e868 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e77a:	4b37      	ldr	r3, [pc, #220]	@ (800e858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e77c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e77e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e782:	ee07 3a90 	vmov	s15, r3
 800e786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e78a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e78e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e860 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e79a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e79e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e7aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800e7ac:	4b2a      	ldr	r3, [pc, #168]	@ (800e858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e7ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7b0:	0a5b      	lsrs	r3, r3, #9
 800e7b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e7b6:	ee07 3a90 	vmov	s15, r3
 800e7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e7c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e7c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800e7ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e7ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e7d2:	ee17 2a90 	vmov	r2, s15
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800e7da:	4b1f      	ldr	r3, [pc, #124]	@ (800e858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e7dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7de:	0c1b      	lsrs	r3, r3, #16
 800e7e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e7e4:	ee07 3a90 	vmov	s15, r3
 800e7e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e7f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e7f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800e7f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e7fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e800:	ee17 2a90 	vmov	r2, s15
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800e808:	4b13      	ldr	r3, [pc, #76]	@ (800e858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e80a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e80c:	0e1b      	lsrs	r3, r3, #24
 800e80e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e812:	ee07 3a90 	vmov	s15, r3
 800e816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e81a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e81e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e822:	edd7 6a07 	vldr	s13, [r7, #28]
 800e826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e82a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e82e:	ee17 2a90 	vmov	r2, s15
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e836:	e008      	b.n	800e84a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2200      	movs	r2, #0
 800e83c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2200      	movs	r2, #0
 800e842:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2200      	movs	r2, #0
 800e848:	609a      	str	r2, [r3, #8]
}
 800e84a:	bf00      	nop
 800e84c:	3724      	adds	r7, #36	@ 0x24
 800e84e:	46bd      	mov	sp, r7
 800e850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e854:	4770      	bx	lr
 800e856:	bf00      	nop
 800e858:	58024400 	.word	0x58024400
 800e85c:	03d09000 	.word	0x03d09000
 800e860:	46000000 	.word	0x46000000
 800e864:	4c742400 	.word	0x4c742400
 800e868:	4a742400 	.word	0x4a742400
 800e86c:	4bbebc20 	.word	0x4bbebc20

0800e870 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e870:	b480      	push	{r7}
 800e872:	b089      	sub	sp, #36	@ 0x24
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e878:	4ba1      	ldr	r3, [pc, #644]	@ (800eb00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e87a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e87c:	f003 0303 	and.w	r3, r3, #3
 800e880:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e882:	4b9f      	ldr	r3, [pc, #636]	@ (800eb00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e886:	0d1b      	lsrs	r3, r3, #20
 800e888:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e88c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e88e:	4b9c      	ldr	r3, [pc, #624]	@ (800eb00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e892:	0a1b      	lsrs	r3, r3, #8
 800e894:	f003 0301 	and.w	r3, r3, #1
 800e898:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e89a:	4b99      	ldr	r3, [pc, #612]	@ (800eb00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e89c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e89e:	08db      	lsrs	r3, r3, #3
 800e8a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e8a4:	693a      	ldr	r2, [r7, #16]
 800e8a6:	fb02 f303 	mul.w	r3, r2, r3
 800e8aa:	ee07 3a90 	vmov	s15, r3
 800e8ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	f000 8111 	beq.w	800eae0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e8be:	69bb      	ldr	r3, [r7, #24]
 800e8c0:	2b02      	cmp	r3, #2
 800e8c2:	f000 8083 	beq.w	800e9cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e8c6:	69bb      	ldr	r3, [r7, #24]
 800e8c8:	2b02      	cmp	r3, #2
 800e8ca:	f200 80a1 	bhi.w	800ea10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e8ce:	69bb      	ldr	r3, [r7, #24]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d003      	beq.n	800e8dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e8d4:	69bb      	ldr	r3, [r7, #24]
 800e8d6:	2b01      	cmp	r3, #1
 800e8d8:	d056      	beq.n	800e988 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e8da:	e099      	b.n	800ea10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e8dc:	4b88      	ldr	r3, [pc, #544]	@ (800eb00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f003 0320 	and.w	r3, r3, #32
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d02d      	beq.n	800e944 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e8e8:	4b85      	ldr	r3, [pc, #532]	@ (800eb00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	08db      	lsrs	r3, r3, #3
 800e8ee:	f003 0303 	and.w	r3, r3, #3
 800e8f2:	4a84      	ldr	r2, [pc, #528]	@ (800eb04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e8f4:	fa22 f303 	lsr.w	r3, r2, r3
 800e8f8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	ee07 3a90 	vmov	s15, r3
 800e900:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	ee07 3a90 	vmov	s15, r3
 800e90a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e90e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e912:	4b7b      	ldr	r3, [pc, #492]	@ (800eb00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e91a:	ee07 3a90 	vmov	s15, r3
 800e91e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e922:	ed97 6a03 	vldr	s12, [r7, #12]
 800e926:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800eb08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e92a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e92e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e93a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e93e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e942:	e087      	b.n	800ea54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	ee07 3a90 	vmov	s15, r3
 800e94a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e94e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800eb0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e956:	4b6a      	ldr	r3, [pc, #424]	@ (800eb00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e95a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e95e:	ee07 3a90 	vmov	s15, r3
 800e962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e966:	ed97 6a03 	vldr	s12, [r7, #12]
 800e96a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800eb08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e96e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e97a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e97e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e986:	e065      	b.n	800ea54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	ee07 3a90 	vmov	s15, r3
 800e98e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e992:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800eb10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e99a:	4b59      	ldr	r3, [pc, #356]	@ (800eb00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e99c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e99e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9a2:	ee07 3a90 	vmov	s15, r3
 800e9a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800e9ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800eb08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e9b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e9be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e9ca:	e043      	b.n	800ea54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	ee07 3a90 	vmov	s15, r3
 800e9d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800eb14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e9da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e9de:	4b48      	ldr	r3, [pc, #288]	@ (800eb00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e9e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9e6:	ee07 3a90 	vmov	s15, r3
 800e9ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800e9f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800eb08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e9f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ea02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ea0e:	e021      	b.n	800ea54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	ee07 3a90 	vmov	s15, r3
 800ea16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea1a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800eb10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ea1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea22:	4b37      	ldr	r3, [pc, #220]	@ (800eb00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ea24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea2a:	ee07 3a90 	vmov	s15, r3
 800ea2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea32:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea36:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800eb08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ea3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ea46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ea52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ea54:	4b2a      	ldr	r3, [pc, #168]	@ (800eb00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ea56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea58:	0a5b      	lsrs	r3, r3, #9
 800ea5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea5e:	ee07 3a90 	vmov	s15, r3
 800ea62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ea6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ea6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ea72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea7a:	ee17 2a90 	vmov	r2, s15
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ea82:	4b1f      	ldr	r3, [pc, #124]	@ (800eb00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ea84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea86:	0c1b      	lsrs	r3, r3, #16
 800ea88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea8c:	ee07 3a90 	vmov	s15, r3
 800ea90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ea98:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ea9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800eaa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eaa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eaa8:	ee17 2a90 	vmov	r2, s15
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800eab0:	4b13      	ldr	r3, [pc, #76]	@ (800eb00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eab4:	0e1b      	lsrs	r3, r3, #24
 800eab6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eaba:	ee07 3a90 	vmov	s15, r3
 800eabe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eac2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800eac6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eaca:	edd7 6a07 	vldr	s13, [r7, #28]
 800eace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ead2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ead6:	ee17 2a90 	vmov	r2, s15
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800eade:	e008      	b.n	800eaf2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2200      	movs	r2, #0
 800eae4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2200      	movs	r2, #0
 800eaea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	609a      	str	r2, [r3, #8]
}
 800eaf2:	bf00      	nop
 800eaf4:	3724      	adds	r7, #36	@ 0x24
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafc:	4770      	bx	lr
 800eafe:	bf00      	nop
 800eb00:	58024400 	.word	0x58024400
 800eb04:	03d09000 	.word	0x03d09000
 800eb08:	46000000 	.word	0x46000000
 800eb0c:	4c742400 	.word	0x4c742400
 800eb10:	4a742400 	.word	0x4a742400
 800eb14:	4bbebc20 	.word	0x4bbebc20

0800eb18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800eb22:	2300      	movs	r3, #0
 800eb24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800eb26:	4b53      	ldr	r3, [pc, #332]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800eb28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb2a:	f003 0303 	and.w	r3, r3, #3
 800eb2e:	2b03      	cmp	r3, #3
 800eb30:	d101      	bne.n	800eb36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800eb32:	2301      	movs	r3, #1
 800eb34:	e099      	b.n	800ec6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800eb36:	4b4f      	ldr	r3, [pc, #316]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	4a4e      	ldr	r2, [pc, #312]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800eb3c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800eb40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eb42:	f7f3 fcb3 	bl	80024ac <HAL_GetTick>
 800eb46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800eb48:	e008      	b.n	800eb5c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800eb4a:	f7f3 fcaf 	bl	80024ac <HAL_GetTick>
 800eb4e:	4602      	mov	r2, r0
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	1ad3      	subs	r3, r2, r3
 800eb54:	2b02      	cmp	r3, #2
 800eb56:	d901      	bls.n	800eb5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800eb58:	2303      	movs	r3, #3
 800eb5a:	e086      	b.n	800ec6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800eb5c:	4b45      	ldr	r3, [pc, #276]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d1f0      	bne.n	800eb4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800eb68:	4b42      	ldr	r3, [pc, #264]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800eb6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb6c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	031b      	lsls	r3, r3, #12
 800eb76:	493f      	ldr	r1, [pc, #252]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800eb78:	4313      	orrs	r3, r2
 800eb7a:	628b      	str	r3, [r1, #40]	@ 0x28
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	685b      	ldr	r3, [r3, #4]
 800eb80:	3b01      	subs	r3, #1
 800eb82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	689b      	ldr	r3, [r3, #8]
 800eb8a:	3b01      	subs	r3, #1
 800eb8c:	025b      	lsls	r3, r3, #9
 800eb8e:	b29b      	uxth	r3, r3
 800eb90:	431a      	orrs	r2, r3
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	68db      	ldr	r3, [r3, #12]
 800eb96:	3b01      	subs	r3, #1
 800eb98:	041b      	lsls	r3, r3, #16
 800eb9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800eb9e:	431a      	orrs	r2, r3
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	691b      	ldr	r3, [r3, #16]
 800eba4:	3b01      	subs	r3, #1
 800eba6:	061b      	lsls	r3, r3, #24
 800eba8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ebac:	4931      	ldr	r1, [pc, #196]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800ebae:	4313      	orrs	r3, r2
 800ebb0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ebb2:	4b30      	ldr	r3, [pc, #192]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800ebb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebb6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	695b      	ldr	r3, [r3, #20]
 800ebbe:	492d      	ldr	r1, [pc, #180]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800ebc0:	4313      	orrs	r3, r2
 800ebc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ebc4:	4b2b      	ldr	r3, [pc, #172]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800ebc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebc8:	f023 0220 	bic.w	r2, r3, #32
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	699b      	ldr	r3, [r3, #24]
 800ebd0:	4928      	ldr	r1, [pc, #160]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800ebd2:	4313      	orrs	r3, r2
 800ebd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ebd6:	4b27      	ldr	r3, [pc, #156]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800ebd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebda:	4a26      	ldr	r2, [pc, #152]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800ebdc:	f023 0310 	bic.w	r3, r3, #16
 800ebe0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ebe2:	4b24      	ldr	r3, [pc, #144]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800ebe4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ebe6:	4b24      	ldr	r3, [pc, #144]	@ (800ec78 <RCCEx_PLL2_Config+0x160>)
 800ebe8:	4013      	ands	r3, r2
 800ebea:	687a      	ldr	r2, [r7, #4]
 800ebec:	69d2      	ldr	r2, [r2, #28]
 800ebee:	00d2      	lsls	r2, r2, #3
 800ebf0:	4920      	ldr	r1, [pc, #128]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800ebf2:	4313      	orrs	r3, r2
 800ebf4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ebf6:	4b1f      	ldr	r3, [pc, #124]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800ebf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebfa:	4a1e      	ldr	r2, [pc, #120]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800ebfc:	f043 0310 	orr.w	r3, r3, #16
 800ec00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d106      	bne.n	800ec16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ec08:	4b1a      	ldr	r3, [pc, #104]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800ec0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec0c:	4a19      	ldr	r2, [pc, #100]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800ec0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ec12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ec14:	e00f      	b.n	800ec36 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	2b01      	cmp	r3, #1
 800ec1a:	d106      	bne.n	800ec2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ec1c:	4b15      	ldr	r3, [pc, #84]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800ec1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec20:	4a14      	ldr	r2, [pc, #80]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800ec22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ec26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ec28:	e005      	b.n	800ec36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ec2a:	4b12      	ldr	r3, [pc, #72]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800ec2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec2e:	4a11      	ldr	r2, [pc, #68]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800ec30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ec34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ec36:	4b0f      	ldr	r3, [pc, #60]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	4a0e      	ldr	r2, [pc, #56]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800ec3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ec40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ec42:	f7f3 fc33 	bl	80024ac <HAL_GetTick>
 800ec46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ec48:	e008      	b.n	800ec5c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ec4a:	f7f3 fc2f 	bl	80024ac <HAL_GetTick>
 800ec4e:	4602      	mov	r2, r0
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	1ad3      	subs	r3, r2, r3
 800ec54:	2b02      	cmp	r3, #2
 800ec56:	d901      	bls.n	800ec5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ec58:	2303      	movs	r3, #3
 800ec5a:	e006      	b.n	800ec6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ec5c:	4b05      	ldr	r3, [pc, #20]	@ (800ec74 <RCCEx_PLL2_Config+0x15c>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d0f0      	beq.n	800ec4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ec68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3710      	adds	r7, #16
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop
 800ec74:	58024400 	.word	0x58024400
 800ec78:	ffff0007 	.word	0xffff0007

0800ec7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b084      	sub	sp, #16
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ec86:	2300      	movs	r3, #0
 800ec88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ec8a:	4b53      	ldr	r3, [pc, #332]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ec8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec8e:	f003 0303 	and.w	r3, r3, #3
 800ec92:	2b03      	cmp	r3, #3
 800ec94:	d101      	bne.n	800ec9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ec96:	2301      	movs	r3, #1
 800ec98:	e099      	b.n	800edce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ec9a:	4b4f      	ldr	r3, [pc, #316]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	4a4e      	ldr	r2, [pc, #312]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800eca0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eca6:	f7f3 fc01 	bl	80024ac <HAL_GetTick>
 800ecaa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ecac:	e008      	b.n	800ecc0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ecae:	f7f3 fbfd 	bl	80024ac <HAL_GetTick>
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	1ad3      	subs	r3, r2, r3
 800ecb8:	2b02      	cmp	r3, #2
 800ecba:	d901      	bls.n	800ecc0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ecbc:	2303      	movs	r3, #3
 800ecbe:	e086      	b.n	800edce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ecc0:	4b45      	ldr	r3, [pc, #276]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d1f0      	bne.n	800ecae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800eccc:	4b42      	ldr	r3, [pc, #264]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ecce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecd0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	051b      	lsls	r3, r3, #20
 800ecda:	493f      	ldr	r1, [pc, #252]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ecdc:	4313      	orrs	r3, r2
 800ecde:	628b      	str	r3, [r1, #40]	@ 0x28
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	3b01      	subs	r3, #1
 800ece6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	689b      	ldr	r3, [r3, #8]
 800ecee:	3b01      	subs	r3, #1
 800ecf0:	025b      	lsls	r3, r3, #9
 800ecf2:	b29b      	uxth	r3, r3
 800ecf4:	431a      	orrs	r2, r3
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	68db      	ldr	r3, [r3, #12]
 800ecfa:	3b01      	subs	r3, #1
 800ecfc:	041b      	lsls	r3, r3, #16
 800ecfe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ed02:	431a      	orrs	r2, r3
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	691b      	ldr	r3, [r3, #16]
 800ed08:	3b01      	subs	r3, #1
 800ed0a:	061b      	lsls	r3, r3, #24
 800ed0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ed10:	4931      	ldr	r1, [pc, #196]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ed12:	4313      	orrs	r3, r2
 800ed14:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ed16:	4b30      	ldr	r3, [pc, #192]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ed18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	695b      	ldr	r3, [r3, #20]
 800ed22:	492d      	ldr	r1, [pc, #180]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ed24:	4313      	orrs	r3, r2
 800ed26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ed28:	4b2b      	ldr	r3, [pc, #172]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ed2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed2c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	699b      	ldr	r3, [r3, #24]
 800ed34:	4928      	ldr	r1, [pc, #160]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ed36:	4313      	orrs	r3, r2
 800ed38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ed3a:	4b27      	ldr	r3, [pc, #156]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ed3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed3e:	4a26      	ldr	r2, [pc, #152]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ed40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ed44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ed46:	4b24      	ldr	r3, [pc, #144]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ed48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ed4a:	4b24      	ldr	r3, [pc, #144]	@ (800eddc <RCCEx_PLL3_Config+0x160>)
 800ed4c:	4013      	ands	r3, r2
 800ed4e:	687a      	ldr	r2, [r7, #4]
 800ed50:	69d2      	ldr	r2, [r2, #28]
 800ed52:	00d2      	lsls	r2, r2, #3
 800ed54:	4920      	ldr	r1, [pc, #128]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ed56:	4313      	orrs	r3, r2
 800ed58:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ed5a:	4b1f      	ldr	r3, [pc, #124]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ed5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed5e:	4a1e      	ldr	r2, [pc, #120]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ed60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ed64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d106      	bne.n	800ed7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ed6c:	4b1a      	ldr	r3, [pc, #104]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ed6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed70:	4a19      	ldr	r2, [pc, #100]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ed72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ed76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ed78:	e00f      	b.n	800ed9a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	d106      	bne.n	800ed8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ed80:	4b15      	ldr	r3, [pc, #84]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ed82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed84:	4a14      	ldr	r2, [pc, #80]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ed86:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ed8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ed8c:	e005      	b.n	800ed9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ed8e:	4b12      	ldr	r3, [pc, #72]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ed90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed92:	4a11      	ldr	r2, [pc, #68]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ed94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ed98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ed9a:	4b0f      	ldr	r3, [pc, #60]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	4a0e      	ldr	r2, [pc, #56]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800eda0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eda4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eda6:	f7f3 fb81 	bl	80024ac <HAL_GetTick>
 800edaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800edac:	e008      	b.n	800edc0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800edae:	f7f3 fb7d 	bl	80024ac <HAL_GetTick>
 800edb2:	4602      	mov	r2, r0
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	1ad3      	subs	r3, r2, r3
 800edb8:	2b02      	cmp	r3, #2
 800edba:	d901      	bls.n	800edc0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800edbc:	2303      	movs	r3, #3
 800edbe:	e006      	b.n	800edce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800edc0:	4b05      	ldr	r3, [pc, #20]	@ (800edd8 <RCCEx_PLL3_Config+0x15c>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d0f0      	beq.n	800edae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800edcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3710      	adds	r7, #16
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
 800edd6:	bf00      	nop
 800edd8:	58024400 	.word	0x58024400
 800eddc:	ffff0007 	.word	0xffff0007

0800ede0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b084      	sub	sp, #16
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d101      	bne.n	800edf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800edee:	2301      	movs	r3, #1
 800edf0:	e10f      	b.n	800f012 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2200      	movs	r2, #0
 800edf6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	4a87      	ldr	r2, [pc, #540]	@ (800f01c <HAL_SPI_Init+0x23c>)
 800edfe:	4293      	cmp	r3, r2
 800ee00:	d00f      	beq.n	800ee22 <HAL_SPI_Init+0x42>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	4a86      	ldr	r2, [pc, #536]	@ (800f020 <HAL_SPI_Init+0x240>)
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	d00a      	beq.n	800ee22 <HAL_SPI_Init+0x42>
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	4a84      	ldr	r2, [pc, #528]	@ (800f024 <HAL_SPI_Init+0x244>)
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d005      	beq.n	800ee22 <HAL_SPI_Init+0x42>
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	68db      	ldr	r3, [r3, #12]
 800ee1a:	2b0f      	cmp	r3, #15
 800ee1c:	d901      	bls.n	800ee22 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ee1e:	2301      	movs	r3, #1
 800ee20:	e0f7      	b.n	800f012 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f000 f900 	bl	800f028 <SPI_GetPacketSize>
 800ee28:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	4a7b      	ldr	r2, [pc, #492]	@ (800f01c <HAL_SPI_Init+0x23c>)
 800ee30:	4293      	cmp	r3, r2
 800ee32:	d00c      	beq.n	800ee4e <HAL_SPI_Init+0x6e>
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	4a79      	ldr	r2, [pc, #484]	@ (800f020 <HAL_SPI_Init+0x240>)
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d007      	beq.n	800ee4e <HAL_SPI_Init+0x6e>
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	4a78      	ldr	r2, [pc, #480]	@ (800f024 <HAL_SPI_Init+0x244>)
 800ee44:	4293      	cmp	r3, r2
 800ee46:	d002      	beq.n	800ee4e <HAL_SPI_Init+0x6e>
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	2b08      	cmp	r3, #8
 800ee4c:	d811      	bhi.n	800ee72 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ee52:	4a72      	ldr	r2, [pc, #456]	@ (800f01c <HAL_SPI_Init+0x23c>)
 800ee54:	4293      	cmp	r3, r2
 800ee56:	d009      	beq.n	800ee6c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4a70      	ldr	r2, [pc, #448]	@ (800f020 <HAL_SPI_Init+0x240>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d004      	beq.n	800ee6c <HAL_SPI_Init+0x8c>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	4a6f      	ldr	r2, [pc, #444]	@ (800f024 <HAL_SPI_Init+0x244>)
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	d104      	bne.n	800ee76 <HAL_SPI_Init+0x96>
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	2b10      	cmp	r3, #16
 800ee70:	d901      	bls.n	800ee76 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ee72:	2301      	movs	r3, #1
 800ee74:	e0cd      	b.n	800f012 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ee7c:	b2db      	uxtb	r3, r3
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d106      	bne.n	800ee90 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2200      	movs	r2, #0
 800ee86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f7f2 fe8a 	bl	8001ba4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2202      	movs	r2, #2
 800ee94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	681a      	ldr	r2, [r3, #0]
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f022 0201 	bic.w	r2, r2, #1
 800eea6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	689b      	ldr	r3, [r3, #8]
 800eeae:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800eeb2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	699b      	ldr	r3, [r3, #24]
 800eeb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800eebc:	d119      	bne.n	800eef2 <HAL_SPI_Init+0x112>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800eec6:	d103      	bne.n	800eed0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d008      	beq.n	800eee2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d10c      	bne.n	800eef2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800eedc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eee0:	d107      	bne.n	800eef2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	681a      	ldr	r2, [r3, #0]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800eef0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d00f      	beq.n	800ef1e <HAL_SPI_Init+0x13e>
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	68db      	ldr	r3, [r3, #12]
 800ef02:	2b06      	cmp	r3, #6
 800ef04:	d90b      	bls.n	800ef1e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	430a      	orrs	r2, r1
 800ef1a:	601a      	str	r2, [r3, #0]
 800ef1c:	e007      	b.n	800ef2e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	681a      	ldr	r2, [r3, #0]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ef2c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	69da      	ldr	r2, [r3, #28]
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef36:	431a      	orrs	r2, r3
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	431a      	orrs	r2, r3
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef40:	ea42 0103 	orr.w	r1, r2, r3
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	68da      	ldr	r2, [r3, #12]
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	430a      	orrs	r2, r1
 800ef4e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef58:	431a      	orrs	r2, r3
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef5e:	431a      	orrs	r2, r3
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	699b      	ldr	r3, [r3, #24]
 800ef64:	431a      	orrs	r2, r3
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	691b      	ldr	r3, [r3, #16]
 800ef6a:	431a      	orrs	r2, r3
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	695b      	ldr	r3, [r3, #20]
 800ef70:	431a      	orrs	r2, r3
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6a1b      	ldr	r3, [r3, #32]
 800ef76:	431a      	orrs	r2, r3
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	431a      	orrs	r2, r3
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef82:	431a      	orrs	r2, r3
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	689b      	ldr	r3, [r3, #8]
 800ef88:	431a      	orrs	r2, r3
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef8e:	ea42 0103 	orr.w	r1, r2, r3
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	430a      	orrs	r2, r1
 800ef9c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d113      	bne.n	800efce <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	689b      	ldr	r3, [r3, #8]
 800efac:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800efb8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	689b      	ldr	r3, [r3, #8]
 800efc0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800efcc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	f022 0201 	bic.w	r2, r2, #1
 800efdc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	685b      	ldr	r3, [r3, #4]
 800efe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d00a      	beq.n	800f000 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	68db      	ldr	r3, [r3, #12]
 800eff0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	430a      	orrs	r2, r1
 800effe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2200      	movs	r2, #0
 800f004:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2201      	movs	r2, #1
 800f00c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800f010:	2300      	movs	r3, #0
}
 800f012:	4618      	mov	r0, r3
 800f014:	3710      	adds	r7, #16
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}
 800f01a:	bf00      	nop
 800f01c:	40013000 	.word	0x40013000
 800f020:	40003800 	.word	0x40003800
 800f024:	40003c00 	.word	0x40003c00

0800f028 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800f028:	b480      	push	{r7}
 800f02a:	b085      	sub	sp, #20
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f034:	095b      	lsrs	r3, r3, #5
 800f036:	3301      	adds	r3, #1
 800f038:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	68db      	ldr	r3, [r3, #12]
 800f03e:	3301      	adds	r3, #1
 800f040:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	3307      	adds	r3, #7
 800f046:	08db      	lsrs	r3, r3, #3
 800f048:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	68fa      	ldr	r2, [r7, #12]
 800f04e:	fb02 f303 	mul.w	r3, r2, r3
}
 800f052:	4618      	mov	r0, r3
 800f054:	3714      	adds	r7, #20
 800f056:	46bd      	mov	sp, r7
 800f058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05c:	4770      	bx	lr

0800f05e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f05e:	b580      	push	{r7, lr}
 800f060:	b082      	sub	sp, #8
 800f062:	af00      	add	r7, sp, #0
 800f064:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d101      	bne.n	800f070 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f06c:	2301      	movs	r3, #1
 800f06e:	e049      	b.n	800f104 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f076:	b2db      	uxtb	r3, r3
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d106      	bne.n	800f08a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2200      	movs	r2, #0
 800f080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f7f2 fe81 	bl	8001d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2202      	movs	r2, #2
 800f08e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681a      	ldr	r2, [r3, #0]
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	3304      	adds	r3, #4
 800f09a:	4619      	mov	r1, r3
 800f09c:	4610      	mov	r0, r2
 800f09e:	f000 fbe9 	bl	800f874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2201      	movs	r2, #1
 800f0a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2201      	movs	r2, #1
 800f0ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2201      	movs	r2, #1
 800f0b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2201      	movs	r2, #1
 800f0be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2201      	movs	r2, #1
 800f0c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2201      	movs	r2, #1
 800f0ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2201      	movs	r2, #1
 800f0d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2201      	movs	r2, #1
 800f0de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2201      	movs	r2, #1
 800f0ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2201      	movs	r2, #1
 800f0f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2201      	movs	r2, #1
 800f0fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f102:	2300      	movs	r3, #0
}
 800f104:	4618      	mov	r0, r3
 800f106:	3708      	adds	r7, #8
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}

0800f10c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b082      	sub	sp, #8
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d101      	bne.n	800f11e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f11a:	2301      	movs	r3, #1
 800f11c:	e049      	b.n	800f1b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f124:	b2db      	uxtb	r3, r3
 800f126:	2b00      	cmp	r3, #0
 800f128:	d106      	bne.n	800f138 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2200      	movs	r2, #0
 800f12e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f7f2 fdc4 	bl	8001cc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2202      	movs	r2, #2
 800f13c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681a      	ldr	r2, [r3, #0]
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	3304      	adds	r3, #4
 800f148:	4619      	mov	r1, r3
 800f14a:	4610      	mov	r0, r2
 800f14c:	f000 fb92 	bl	800f874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2201      	movs	r2, #1
 800f154:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2201      	movs	r2, #1
 800f15c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2201      	movs	r2, #1
 800f164:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2201      	movs	r2, #1
 800f16c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2201      	movs	r2, #1
 800f174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2201      	movs	r2, #1
 800f17c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2201      	movs	r2, #1
 800f184:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2201      	movs	r2, #1
 800f18c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2201      	movs	r2, #1
 800f194:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2201      	movs	r2, #1
 800f19c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f1b0:	2300      	movs	r3, #0
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3708      	adds	r7, #8
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}
	...

0800f1bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b084      	sub	sp, #16
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
 800f1c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d109      	bne.n	800f1e0 <HAL_TIM_PWM_Start+0x24>
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f1d2:	b2db      	uxtb	r3, r3
 800f1d4:	2b01      	cmp	r3, #1
 800f1d6:	bf14      	ite	ne
 800f1d8:	2301      	movne	r3, #1
 800f1da:	2300      	moveq	r3, #0
 800f1dc:	b2db      	uxtb	r3, r3
 800f1de:	e03c      	b.n	800f25a <HAL_TIM_PWM_Start+0x9e>
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	2b04      	cmp	r3, #4
 800f1e4:	d109      	bne.n	800f1fa <HAL_TIM_PWM_Start+0x3e>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f1ec:	b2db      	uxtb	r3, r3
 800f1ee:	2b01      	cmp	r3, #1
 800f1f0:	bf14      	ite	ne
 800f1f2:	2301      	movne	r3, #1
 800f1f4:	2300      	moveq	r3, #0
 800f1f6:	b2db      	uxtb	r3, r3
 800f1f8:	e02f      	b.n	800f25a <HAL_TIM_PWM_Start+0x9e>
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	2b08      	cmp	r3, #8
 800f1fe:	d109      	bne.n	800f214 <HAL_TIM_PWM_Start+0x58>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f206:	b2db      	uxtb	r3, r3
 800f208:	2b01      	cmp	r3, #1
 800f20a:	bf14      	ite	ne
 800f20c:	2301      	movne	r3, #1
 800f20e:	2300      	moveq	r3, #0
 800f210:	b2db      	uxtb	r3, r3
 800f212:	e022      	b.n	800f25a <HAL_TIM_PWM_Start+0x9e>
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	2b0c      	cmp	r3, #12
 800f218:	d109      	bne.n	800f22e <HAL_TIM_PWM_Start+0x72>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f220:	b2db      	uxtb	r3, r3
 800f222:	2b01      	cmp	r3, #1
 800f224:	bf14      	ite	ne
 800f226:	2301      	movne	r3, #1
 800f228:	2300      	moveq	r3, #0
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	e015      	b.n	800f25a <HAL_TIM_PWM_Start+0x9e>
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	2b10      	cmp	r3, #16
 800f232:	d109      	bne.n	800f248 <HAL_TIM_PWM_Start+0x8c>
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f23a:	b2db      	uxtb	r3, r3
 800f23c:	2b01      	cmp	r3, #1
 800f23e:	bf14      	ite	ne
 800f240:	2301      	movne	r3, #1
 800f242:	2300      	moveq	r3, #0
 800f244:	b2db      	uxtb	r3, r3
 800f246:	e008      	b.n	800f25a <HAL_TIM_PWM_Start+0x9e>
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f24e:	b2db      	uxtb	r3, r3
 800f250:	2b01      	cmp	r3, #1
 800f252:	bf14      	ite	ne
 800f254:	2301      	movne	r3, #1
 800f256:	2300      	moveq	r3, #0
 800f258:	b2db      	uxtb	r3, r3
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d001      	beq.n	800f262 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f25e:	2301      	movs	r3, #1
 800f260:	e0a1      	b.n	800f3a6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d104      	bne.n	800f272 <HAL_TIM_PWM_Start+0xb6>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2202      	movs	r2, #2
 800f26c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f270:	e023      	b.n	800f2ba <HAL_TIM_PWM_Start+0xfe>
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	2b04      	cmp	r3, #4
 800f276:	d104      	bne.n	800f282 <HAL_TIM_PWM_Start+0xc6>
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2202      	movs	r2, #2
 800f27c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f280:	e01b      	b.n	800f2ba <HAL_TIM_PWM_Start+0xfe>
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	2b08      	cmp	r3, #8
 800f286:	d104      	bne.n	800f292 <HAL_TIM_PWM_Start+0xd6>
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2202      	movs	r2, #2
 800f28c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f290:	e013      	b.n	800f2ba <HAL_TIM_PWM_Start+0xfe>
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	2b0c      	cmp	r3, #12
 800f296:	d104      	bne.n	800f2a2 <HAL_TIM_PWM_Start+0xe6>
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2202      	movs	r2, #2
 800f29c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f2a0:	e00b      	b.n	800f2ba <HAL_TIM_PWM_Start+0xfe>
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	2b10      	cmp	r3, #16
 800f2a6:	d104      	bne.n	800f2b2 <HAL_TIM_PWM_Start+0xf6>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2202      	movs	r2, #2
 800f2ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f2b0:	e003      	b.n	800f2ba <HAL_TIM_PWM_Start+0xfe>
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2202      	movs	r2, #2
 800f2b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	2201      	movs	r2, #1
 800f2c0:	6839      	ldr	r1, [r7, #0]
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f000 fe4c 	bl	800ff60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	4a38      	ldr	r2, [pc, #224]	@ (800f3b0 <HAL_TIM_PWM_Start+0x1f4>)
 800f2ce:	4293      	cmp	r3, r2
 800f2d0:	d013      	beq.n	800f2fa <HAL_TIM_PWM_Start+0x13e>
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	4a37      	ldr	r2, [pc, #220]	@ (800f3b4 <HAL_TIM_PWM_Start+0x1f8>)
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	d00e      	beq.n	800f2fa <HAL_TIM_PWM_Start+0x13e>
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	4a35      	ldr	r2, [pc, #212]	@ (800f3b8 <HAL_TIM_PWM_Start+0x1fc>)
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	d009      	beq.n	800f2fa <HAL_TIM_PWM_Start+0x13e>
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	4a34      	ldr	r2, [pc, #208]	@ (800f3bc <HAL_TIM_PWM_Start+0x200>)
 800f2ec:	4293      	cmp	r3, r2
 800f2ee:	d004      	beq.n	800f2fa <HAL_TIM_PWM_Start+0x13e>
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	4a32      	ldr	r2, [pc, #200]	@ (800f3c0 <HAL_TIM_PWM_Start+0x204>)
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	d101      	bne.n	800f2fe <HAL_TIM_PWM_Start+0x142>
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	e000      	b.n	800f300 <HAL_TIM_PWM_Start+0x144>
 800f2fe:	2300      	movs	r3, #0
 800f300:	2b00      	cmp	r3, #0
 800f302:	d007      	beq.n	800f314 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f312:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	4a25      	ldr	r2, [pc, #148]	@ (800f3b0 <HAL_TIM_PWM_Start+0x1f4>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d022      	beq.n	800f364 <HAL_TIM_PWM_Start+0x1a8>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f326:	d01d      	beq.n	800f364 <HAL_TIM_PWM_Start+0x1a8>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	4a25      	ldr	r2, [pc, #148]	@ (800f3c4 <HAL_TIM_PWM_Start+0x208>)
 800f32e:	4293      	cmp	r3, r2
 800f330:	d018      	beq.n	800f364 <HAL_TIM_PWM_Start+0x1a8>
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	4a24      	ldr	r2, [pc, #144]	@ (800f3c8 <HAL_TIM_PWM_Start+0x20c>)
 800f338:	4293      	cmp	r3, r2
 800f33a:	d013      	beq.n	800f364 <HAL_TIM_PWM_Start+0x1a8>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	4a22      	ldr	r2, [pc, #136]	@ (800f3cc <HAL_TIM_PWM_Start+0x210>)
 800f342:	4293      	cmp	r3, r2
 800f344:	d00e      	beq.n	800f364 <HAL_TIM_PWM_Start+0x1a8>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	4a1a      	ldr	r2, [pc, #104]	@ (800f3b4 <HAL_TIM_PWM_Start+0x1f8>)
 800f34c:	4293      	cmp	r3, r2
 800f34e:	d009      	beq.n	800f364 <HAL_TIM_PWM_Start+0x1a8>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	4a1e      	ldr	r2, [pc, #120]	@ (800f3d0 <HAL_TIM_PWM_Start+0x214>)
 800f356:	4293      	cmp	r3, r2
 800f358:	d004      	beq.n	800f364 <HAL_TIM_PWM_Start+0x1a8>
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	4a16      	ldr	r2, [pc, #88]	@ (800f3b8 <HAL_TIM_PWM_Start+0x1fc>)
 800f360:	4293      	cmp	r3, r2
 800f362:	d115      	bne.n	800f390 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	689a      	ldr	r2, [r3, #8]
 800f36a:	4b1a      	ldr	r3, [pc, #104]	@ (800f3d4 <HAL_TIM_PWM_Start+0x218>)
 800f36c:	4013      	ands	r3, r2
 800f36e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2b06      	cmp	r3, #6
 800f374:	d015      	beq.n	800f3a2 <HAL_TIM_PWM_Start+0x1e6>
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f37c:	d011      	beq.n	800f3a2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	681a      	ldr	r2, [r3, #0]
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	f042 0201 	orr.w	r2, r2, #1
 800f38c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f38e:	e008      	b.n	800f3a2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	681a      	ldr	r2, [r3, #0]
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	f042 0201 	orr.w	r2, r2, #1
 800f39e:	601a      	str	r2, [r3, #0]
 800f3a0:	e000      	b.n	800f3a4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f3a4:	2300      	movs	r3, #0
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3710      	adds	r7, #16
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}
 800f3ae:	bf00      	nop
 800f3b0:	40010000 	.word	0x40010000
 800f3b4:	40010400 	.word	0x40010400
 800f3b8:	40014000 	.word	0x40014000
 800f3bc:	40014400 	.word	0x40014400
 800f3c0:	40014800 	.word	0x40014800
 800f3c4:	40000400 	.word	0x40000400
 800f3c8:	40000800 	.word	0x40000800
 800f3cc:	40000c00 	.word	0x40000c00
 800f3d0:	40001800 	.word	0x40001800
 800f3d4:	00010007 	.word	0x00010007

0800f3d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b084      	sub	sp, #16
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	68db      	ldr	r3, [r3, #12]
 800f3e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	691b      	ldr	r3, [r3, #16]
 800f3ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	f003 0302 	and.w	r3, r3, #2
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d020      	beq.n	800f43c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f003 0302 	and.w	r3, r3, #2
 800f400:	2b00      	cmp	r3, #0
 800f402:	d01b      	beq.n	800f43c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	f06f 0202 	mvn.w	r2, #2
 800f40c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2201      	movs	r2, #1
 800f412:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	699b      	ldr	r3, [r3, #24]
 800f41a:	f003 0303 	and.w	r3, r3, #3
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d003      	beq.n	800f42a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f000 fa08 	bl	800f838 <HAL_TIM_IC_CaptureCallback>
 800f428:	e005      	b.n	800f436 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f000 f9fa 	bl	800f824 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f000 fa0b 	bl	800f84c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2200      	movs	r2, #0
 800f43a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f43c:	68bb      	ldr	r3, [r7, #8]
 800f43e:	f003 0304 	and.w	r3, r3, #4
 800f442:	2b00      	cmp	r3, #0
 800f444:	d020      	beq.n	800f488 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f003 0304 	and.w	r3, r3, #4
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d01b      	beq.n	800f488 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	f06f 0204 	mvn.w	r2, #4
 800f458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2202      	movs	r2, #2
 800f45e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	699b      	ldr	r3, [r3, #24]
 800f466:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d003      	beq.n	800f476 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f000 f9e2 	bl	800f838 <HAL_TIM_IC_CaptureCallback>
 800f474:	e005      	b.n	800f482 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f000 f9d4 	bl	800f824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f000 f9e5 	bl	800f84c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2200      	movs	r2, #0
 800f486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	f003 0308 	and.w	r3, r3, #8
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d020      	beq.n	800f4d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	f003 0308 	and.w	r3, r3, #8
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d01b      	beq.n	800f4d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	f06f 0208 	mvn.w	r2, #8
 800f4a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2204      	movs	r2, #4
 800f4aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	69db      	ldr	r3, [r3, #28]
 800f4b2:	f003 0303 	and.w	r3, r3, #3
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d003      	beq.n	800f4c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f000 f9bc 	bl	800f838 <HAL_TIM_IC_CaptureCallback>
 800f4c0:	e005      	b.n	800f4ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f000 f9ae 	bl	800f824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f000 f9bf 	bl	800f84c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	f003 0310 	and.w	r3, r3, #16
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d020      	beq.n	800f520 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	f003 0310 	and.w	r3, r3, #16
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d01b      	beq.n	800f520 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	f06f 0210 	mvn.w	r2, #16
 800f4f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2208      	movs	r2, #8
 800f4f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	69db      	ldr	r3, [r3, #28]
 800f4fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f502:	2b00      	cmp	r3, #0
 800f504:	d003      	beq.n	800f50e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f000 f996 	bl	800f838 <HAL_TIM_IC_CaptureCallback>
 800f50c:	e005      	b.n	800f51a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f000 f988 	bl	800f824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f000 f999 	bl	800f84c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2200      	movs	r2, #0
 800f51e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	f003 0301 	and.w	r3, r3, #1
 800f526:	2b00      	cmp	r3, #0
 800f528:	d00c      	beq.n	800f544 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	f003 0301 	and.w	r3, r3, #1
 800f530:	2b00      	cmp	r3, #0
 800f532:	d007      	beq.n	800f544 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	f06f 0201 	mvn.w	r2, #1
 800f53c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	f000 f966 	bl	800f810 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d104      	bne.n	800f558 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f554:	2b00      	cmp	r3, #0
 800f556:	d00c      	beq.n	800f572 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d007      	beq.n	800f572 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f56a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f000 fe33 	bl	80101d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d00c      	beq.n	800f596 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f582:	2b00      	cmp	r3, #0
 800f584:	d007      	beq.n	800f596 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f58e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f000 fe2b 	bl	80101ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d00c      	beq.n	800f5ba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d007      	beq.n	800f5ba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f5b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f000 f953 	bl	800f860 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	f003 0320 	and.w	r3, r3, #32
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d00c      	beq.n	800f5de <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	f003 0320 	and.w	r3, r3, #32
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d007      	beq.n	800f5de <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	f06f 0220 	mvn.w	r2, #32
 800f5d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f000 fdf3 	bl	80101c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f5de:	bf00      	nop
 800f5e0:	3710      	adds	r7, #16
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}
	...

0800f5e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b086      	sub	sp, #24
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	60f8      	str	r0, [r7, #12]
 800f5f0:	60b9      	str	r1, [r7, #8]
 800f5f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f5fe:	2b01      	cmp	r3, #1
 800f600:	d101      	bne.n	800f606 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f602:	2302      	movs	r3, #2
 800f604:	e0ff      	b.n	800f806 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	2201      	movs	r2, #1
 800f60a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2b14      	cmp	r3, #20
 800f612:	f200 80f0 	bhi.w	800f7f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f616:	a201      	add	r2, pc, #4	@ (adr r2, 800f61c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f61c:	0800f671 	.word	0x0800f671
 800f620:	0800f7f7 	.word	0x0800f7f7
 800f624:	0800f7f7 	.word	0x0800f7f7
 800f628:	0800f7f7 	.word	0x0800f7f7
 800f62c:	0800f6b1 	.word	0x0800f6b1
 800f630:	0800f7f7 	.word	0x0800f7f7
 800f634:	0800f7f7 	.word	0x0800f7f7
 800f638:	0800f7f7 	.word	0x0800f7f7
 800f63c:	0800f6f3 	.word	0x0800f6f3
 800f640:	0800f7f7 	.word	0x0800f7f7
 800f644:	0800f7f7 	.word	0x0800f7f7
 800f648:	0800f7f7 	.word	0x0800f7f7
 800f64c:	0800f733 	.word	0x0800f733
 800f650:	0800f7f7 	.word	0x0800f7f7
 800f654:	0800f7f7 	.word	0x0800f7f7
 800f658:	0800f7f7 	.word	0x0800f7f7
 800f65c:	0800f775 	.word	0x0800f775
 800f660:	0800f7f7 	.word	0x0800f7f7
 800f664:	0800f7f7 	.word	0x0800f7f7
 800f668:	0800f7f7 	.word	0x0800f7f7
 800f66c:	0800f7b5 	.word	0x0800f7b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	68b9      	ldr	r1, [r7, #8]
 800f676:	4618      	mov	r0, r3
 800f678:	f000 f99c 	bl	800f9b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	699a      	ldr	r2, [r3, #24]
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	f042 0208 	orr.w	r2, r2, #8
 800f68a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	699a      	ldr	r2, [r3, #24]
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	f022 0204 	bic.w	r2, r2, #4
 800f69a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	6999      	ldr	r1, [r3, #24]
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	691a      	ldr	r2, [r3, #16]
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	430a      	orrs	r2, r1
 800f6ac:	619a      	str	r2, [r3, #24]
      break;
 800f6ae:	e0a5      	b.n	800f7fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	68b9      	ldr	r1, [r7, #8]
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f000 fa0c 	bl	800fad4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	699a      	ldr	r2, [r3, #24]
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f6ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	699a      	ldr	r2, [r3, #24]
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f6da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	6999      	ldr	r1, [r3, #24]
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	691b      	ldr	r3, [r3, #16]
 800f6e6:	021a      	lsls	r2, r3, #8
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	430a      	orrs	r2, r1
 800f6ee:	619a      	str	r2, [r3, #24]
      break;
 800f6f0:	e084      	b.n	800f7fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	68b9      	ldr	r1, [r7, #8]
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f000 fa75 	bl	800fbe8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	69da      	ldr	r2, [r3, #28]
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	f042 0208 	orr.w	r2, r2, #8
 800f70c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	69da      	ldr	r2, [r3, #28]
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f022 0204 	bic.w	r2, r2, #4
 800f71c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	69d9      	ldr	r1, [r3, #28]
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	691a      	ldr	r2, [r3, #16]
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	430a      	orrs	r2, r1
 800f72e:	61da      	str	r2, [r3, #28]
      break;
 800f730:	e064      	b.n	800f7fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	68b9      	ldr	r1, [r7, #8]
 800f738:	4618      	mov	r0, r3
 800f73a:	f000 fadd 	bl	800fcf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	69da      	ldr	r2, [r3, #28]
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f74c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	69da      	ldr	r2, [r3, #28]
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f75c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	69d9      	ldr	r1, [r3, #28]
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	691b      	ldr	r3, [r3, #16]
 800f768:	021a      	lsls	r2, r3, #8
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	430a      	orrs	r2, r1
 800f770:	61da      	str	r2, [r3, #28]
      break;
 800f772:	e043      	b.n	800f7fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	68b9      	ldr	r1, [r7, #8]
 800f77a:	4618      	mov	r0, r3
 800f77c:	f000 fb26 	bl	800fdcc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	f042 0208 	orr.w	r2, r2, #8
 800f78e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f022 0204 	bic.w	r2, r2, #4
 800f79e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	691a      	ldr	r2, [r3, #16]
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	430a      	orrs	r2, r1
 800f7b0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f7b2:	e023      	b.n	800f7fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	68b9      	ldr	r1, [r7, #8]
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f000 fb6a 	bl	800fe94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f7ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f7de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	691b      	ldr	r3, [r3, #16]
 800f7ea:	021a      	lsls	r2, r3, #8
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	430a      	orrs	r2, r1
 800f7f2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f7f4:	e002      	b.n	800f7fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	75fb      	strb	r3, [r7, #23]
      break;
 800f7fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	2200      	movs	r2, #0
 800f800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f804:	7dfb      	ldrb	r3, [r7, #23]
}
 800f806:	4618      	mov	r0, r3
 800f808:	3718      	adds	r7, #24
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop

0800f810 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f810:	b480      	push	{r7}
 800f812:	b083      	sub	sp, #12
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f818:	bf00      	nop
 800f81a:	370c      	adds	r7, #12
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr

0800f824 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f824:	b480      	push	{r7}
 800f826:	b083      	sub	sp, #12
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f82c:	bf00      	nop
 800f82e:	370c      	adds	r7, #12
 800f830:	46bd      	mov	sp, r7
 800f832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f836:	4770      	bx	lr

0800f838 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f838:	b480      	push	{r7}
 800f83a:	b083      	sub	sp, #12
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f840:	bf00      	nop
 800f842:	370c      	adds	r7, #12
 800f844:	46bd      	mov	sp, r7
 800f846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84a:	4770      	bx	lr

0800f84c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f84c:	b480      	push	{r7}
 800f84e:	b083      	sub	sp, #12
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f854:	bf00      	nop
 800f856:	370c      	adds	r7, #12
 800f858:	46bd      	mov	sp, r7
 800f85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85e:	4770      	bx	lr

0800f860 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f860:	b480      	push	{r7}
 800f862:	b083      	sub	sp, #12
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f868:	bf00      	nop
 800f86a:	370c      	adds	r7, #12
 800f86c:	46bd      	mov	sp, r7
 800f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f872:	4770      	bx	lr

0800f874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f874:	b480      	push	{r7}
 800f876:	b085      	sub	sp, #20
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	4a43      	ldr	r2, [pc, #268]	@ (800f994 <TIM_Base_SetConfig+0x120>)
 800f888:	4293      	cmp	r3, r2
 800f88a:	d013      	beq.n	800f8b4 <TIM_Base_SetConfig+0x40>
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f892:	d00f      	beq.n	800f8b4 <TIM_Base_SetConfig+0x40>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	4a40      	ldr	r2, [pc, #256]	@ (800f998 <TIM_Base_SetConfig+0x124>)
 800f898:	4293      	cmp	r3, r2
 800f89a:	d00b      	beq.n	800f8b4 <TIM_Base_SetConfig+0x40>
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	4a3f      	ldr	r2, [pc, #252]	@ (800f99c <TIM_Base_SetConfig+0x128>)
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d007      	beq.n	800f8b4 <TIM_Base_SetConfig+0x40>
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	4a3e      	ldr	r2, [pc, #248]	@ (800f9a0 <TIM_Base_SetConfig+0x12c>)
 800f8a8:	4293      	cmp	r3, r2
 800f8aa:	d003      	beq.n	800f8b4 <TIM_Base_SetConfig+0x40>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	4a3d      	ldr	r2, [pc, #244]	@ (800f9a4 <TIM_Base_SetConfig+0x130>)
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	d108      	bne.n	800f8c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f8ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	68fa      	ldr	r2, [r7, #12]
 800f8c2:	4313      	orrs	r3, r2
 800f8c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	4a32      	ldr	r2, [pc, #200]	@ (800f994 <TIM_Base_SetConfig+0x120>)
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	d01f      	beq.n	800f90e <TIM_Base_SetConfig+0x9a>
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f8d4:	d01b      	beq.n	800f90e <TIM_Base_SetConfig+0x9a>
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	4a2f      	ldr	r2, [pc, #188]	@ (800f998 <TIM_Base_SetConfig+0x124>)
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	d017      	beq.n	800f90e <TIM_Base_SetConfig+0x9a>
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	4a2e      	ldr	r2, [pc, #184]	@ (800f99c <TIM_Base_SetConfig+0x128>)
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d013      	beq.n	800f90e <TIM_Base_SetConfig+0x9a>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	4a2d      	ldr	r2, [pc, #180]	@ (800f9a0 <TIM_Base_SetConfig+0x12c>)
 800f8ea:	4293      	cmp	r3, r2
 800f8ec:	d00f      	beq.n	800f90e <TIM_Base_SetConfig+0x9a>
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	4a2c      	ldr	r2, [pc, #176]	@ (800f9a4 <TIM_Base_SetConfig+0x130>)
 800f8f2:	4293      	cmp	r3, r2
 800f8f4:	d00b      	beq.n	800f90e <TIM_Base_SetConfig+0x9a>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	4a2b      	ldr	r2, [pc, #172]	@ (800f9a8 <TIM_Base_SetConfig+0x134>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d007      	beq.n	800f90e <TIM_Base_SetConfig+0x9a>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	4a2a      	ldr	r2, [pc, #168]	@ (800f9ac <TIM_Base_SetConfig+0x138>)
 800f902:	4293      	cmp	r3, r2
 800f904:	d003      	beq.n	800f90e <TIM_Base_SetConfig+0x9a>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	4a29      	ldr	r2, [pc, #164]	@ (800f9b0 <TIM_Base_SetConfig+0x13c>)
 800f90a:	4293      	cmp	r3, r2
 800f90c:	d108      	bne.n	800f920 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	68db      	ldr	r3, [r3, #12]
 800f91a:	68fa      	ldr	r2, [r7, #12]
 800f91c:	4313      	orrs	r3, r2
 800f91e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	695b      	ldr	r3, [r3, #20]
 800f92a:	4313      	orrs	r3, r2
 800f92c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	689a      	ldr	r2, [r3, #8]
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	681a      	ldr	r2, [r3, #0]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	4a14      	ldr	r2, [pc, #80]	@ (800f994 <TIM_Base_SetConfig+0x120>)
 800f942:	4293      	cmp	r3, r2
 800f944:	d00f      	beq.n	800f966 <TIM_Base_SetConfig+0xf2>
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	4a16      	ldr	r2, [pc, #88]	@ (800f9a4 <TIM_Base_SetConfig+0x130>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d00b      	beq.n	800f966 <TIM_Base_SetConfig+0xf2>
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	4a15      	ldr	r2, [pc, #84]	@ (800f9a8 <TIM_Base_SetConfig+0x134>)
 800f952:	4293      	cmp	r3, r2
 800f954:	d007      	beq.n	800f966 <TIM_Base_SetConfig+0xf2>
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	4a14      	ldr	r2, [pc, #80]	@ (800f9ac <TIM_Base_SetConfig+0x138>)
 800f95a:	4293      	cmp	r3, r2
 800f95c:	d003      	beq.n	800f966 <TIM_Base_SetConfig+0xf2>
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	4a13      	ldr	r2, [pc, #76]	@ (800f9b0 <TIM_Base_SetConfig+0x13c>)
 800f962:	4293      	cmp	r3, r2
 800f964:	d103      	bne.n	800f96e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	691a      	ldr	r2, [r3, #16]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	f043 0204 	orr.w	r2, r3, #4
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2201      	movs	r2, #1
 800f97e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	68fa      	ldr	r2, [r7, #12]
 800f984:	601a      	str	r2, [r3, #0]
}
 800f986:	bf00      	nop
 800f988:	3714      	adds	r7, #20
 800f98a:	46bd      	mov	sp, r7
 800f98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f990:	4770      	bx	lr
 800f992:	bf00      	nop
 800f994:	40010000 	.word	0x40010000
 800f998:	40000400 	.word	0x40000400
 800f99c:	40000800 	.word	0x40000800
 800f9a0:	40000c00 	.word	0x40000c00
 800f9a4:	40010400 	.word	0x40010400
 800f9a8:	40014000 	.word	0x40014000
 800f9ac:	40014400 	.word	0x40014400
 800f9b0:	40014800 	.word	0x40014800

0800f9b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f9b4:	b480      	push	{r7}
 800f9b6:	b087      	sub	sp, #28
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6a1b      	ldr	r3, [r3, #32]
 800f9c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	6a1b      	ldr	r3, [r3, #32]
 800f9c8:	f023 0201 	bic.w	r2, r3, #1
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	699b      	ldr	r3, [r3, #24]
 800f9da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f9dc:	68fa      	ldr	r2, [r7, #12]
 800f9de:	4b37      	ldr	r3, [pc, #220]	@ (800fabc <TIM_OC1_SetConfig+0x108>)
 800f9e0:	4013      	ands	r3, r2
 800f9e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	f023 0303 	bic.w	r3, r3, #3
 800f9ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	68fa      	ldr	r2, [r7, #12]
 800f9f2:	4313      	orrs	r3, r2
 800f9f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	f023 0302 	bic.w	r3, r3, #2
 800f9fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	689b      	ldr	r3, [r3, #8]
 800fa02:	697a      	ldr	r2, [r7, #20]
 800fa04:	4313      	orrs	r3, r2
 800fa06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	4a2d      	ldr	r2, [pc, #180]	@ (800fac0 <TIM_OC1_SetConfig+0x10c>)
 800fa0c:	4293      	cmp	r3, r2
 800fa0e:	d00f      	beq.n	800fa30 <TIM_OC1_SetConfig+0x7c>
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	4a2c      	ldr	r2, [pc, #176]	@ (800fac4 <TIM_OC1_SetConfig+0x110>)
 800fa14:	4293      	cmp	r3, r2
 800fa16:	d00b      	beq.n	800fa30 <TIM_OC1_SetConfig+0x7c>
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	4a2b      	ldr	r2, [pc, #172]	@ (800fac8 <TIM_OC1_SetConfig+0x114>)
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	d007      	beq.n	800fa30 <TIM_OC1_SetConfig+0x7c>
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	4a2a      	ldr	r2, [pc, #168]	@ (800facc <TIM_OC1_SetConfig+0x118>)
 800fa24:	4293      	cmp	r3, r2
 800fa26:	d003      	beq.n	800fa30 <TIM_OC1_SetConfig+0x7c>
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	4a29      	ldr	r2, [pc, #164]	@ (800fad0 <TIM_OC1_SetConfig+0x11c>)
 800fa2c:	4293      	cmp	r3, r2
 800fa2e:	d10c      	bne.n	800fa4a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	f023 0308 	bic.w	r3, r3, #8
 800fa36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	68db      	ldr	r3, [r3, #12]
 800fa3c:	697a      	ldr	r2, [r7, #20]
 800fa3e:	4313      	orrs	r3, r2
 800fa40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	f023 0304 	bic.w	r3, r3, #4
 800fa48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	4a1c      	ldr	r2, [pc, #112]	@ (800fac0 <TIM_OC1_SetConfig+0x10c>)
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d00f      	beq.n	800fa72 <TIM_OC1_SetConfig+0xbe>
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	4a1b      	ldr	r2, [pc, #108]	@ (800fac4 <TIM_OC1_SetConfig+0x110>)
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d00b      	beq.n	800fa72 <TIM_OC1_SetConfig+0xbe>
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	4a1a      	ldr	r2, [pc, #104]	@ (800fac8 <TIM_OC1_SetConfig+0x114>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d007      	beq.n	800fa72 <TIM_OC1_SetConfig+0xbe>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	4a19      	ldr	r2, [pc, #100]	@ (800facc <TIM_OC1_SetConfig+0x118>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d003      	beq.n	800fa72 <TIM_OC1_SetConfig+0xbe>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	4a18      	ldr	r2, [pc, #96]	@ (800fad0 <TIM_OC1_SetConfig+0x11c>)
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	d111      	bne.n	800fa96 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fa78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fa80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	695b      	ldr	r3, [r3, #20]
 800fa86:	693a      	ldr	r2, [r7, #16]
 800fa88:	4313      	orrs	r3, r2
 800fa8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	699b      	ldr	r3, [r3, #24]
 800fa90:	693a      	ldr	r2, [r7, #16]
 800fa92:	4313      	orrs	r3, r2
 800fa94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	693a      	ldr	r2, [r7, #16]
 800fa9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	68fa      	ldr	r2, [r7, #12]
 800faa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	685a      	ldr	r2, [r3, #4]
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	697a      	ldr	r2, [r7, #20]
 800faae:	621a      	str	r2, [r3, #32]
}
 800fab0:	bf00      	nop
 800fab2:	371c      	adds	r7, #28
 800fab4:	46bd      	mov	sp, r7
 800fab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faba:	4770      	bx	lr
 800fabc:	fffeff8f 	.word	0xfffeff8f
 800fac0:	40010000 	.word	0x40010000
 800fac4:	40010400 	.word	0x40010400
 800fac8:	40014000 	.word	0x40014000
 800facc:	40014400 	.word	0x40014400
 800fad0:	40014800 	.word	0x40014800

0800fad4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fad4:	b480      	push	{r7}
 800fad6:	b087      	sub	sp, #28
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
 800fadc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6a1b      	ldr	r3, [r3, #32]
 800fae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6a1b      	ldr	r3, [r3, #32]
 800fae8:	f023 0210 	bic.w	r2, r3, #16
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	685b      	ldr	r3, [r3, #4]
 800faf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	699b      	ldr	r3, [r3, #24]
 800fafa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fafc:	68fa      	ldr	r2, [r7, #12]
 800fafe:	4b34      	ldr	r3, [pc, #208]	@ (800fbd0 <TIM_OC2_SetConfig+0xfc>)
 800fb00:	4013      	ands	r3, r2
 800fb02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fb0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	021b      	lsls	r3, r3, #8
 800fb12:	68fa      	ldr	r2, [r7, #12]
 800fb14:	4313      	orrs	r3, r2
 800fb16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	f023 0320 	bic.w	r3, r3, #32
 800fb1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	689b      	ldr	r3, [r3, #8]
 800fb24:	011b      	lsls	r3, r3, #4
 800fb26:	697a      	ldr	r2, [r7, #20]
 800fb28:	4313      	orrs	r3, r2
 800fb2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	4a29      	ldr	r2, [pc, #164]	@ (800fbd4 <TIM_OC2_SetConfig+0x100>)
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d003      	beq.n	800fb3c <TIM_OC2_SetConfig+0x68>
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	4a28      	ldr	r2, [pc, #160]	@ (800fbd8 <TIM_OC2_SetConfig+0x104>)
 800fb38:	4293      	cmp	r3, r2
 800fb3a:	d10d      	bne.n	800fb58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fb42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	68db      	ldr	r3, [r3, #12]
 800fb48:	011b      	lsls	r3, r3, #4
 800fb4a:	697a      	ldr	r2, [r7, #20]
 800fb4c:	4313      	orrs	r3, r2
 800fb4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fb50:	697b      	ldr	r3, [r7, #20]
 800fb52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	4a1e      	ldr	r2, [pc, #120]	@ (800fbd4 <TIM_OC2_SetConfig+0x100>)
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	d00f      	beq.n	800fb80 <TIM_OC2_SetConfig+0xac>
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	4a1d      	ldr	r2, [pc, #116]	@ (800fbd8 <TIM_OC2_SetConfig+0x104>)
 800fb64:	4293      	cmp	r3, r2
 800fb66:	d00b      	beq.n	800fb80 <TIM_OC2_SetConfig+0xac>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	4a1c      	ldr	r2, [pc, #112]	@ (800fbdc <TIM_OC2_SetConfig+0x108>)
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d007      	beq.n	800fb80 <TIM_OC2_SetConfig+0xac>
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	4a1b      	ldr	r2, [pc, #108]	@ (800fbe0 <TIM_OC2_SetConfig+0x10c>)
 800fb74:	4293      	cmp	r3, r2
 800fb76:	d003      	beq.n	800fb80 <TIM_OC2_SetConfig+0xac>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	4a1a      	ldr	r2, [pc, #104]	@ (800fbe4 <TIM_OC2_SetConfig+0x110>)
 800fb7c:	4293      	cmp	r3, r2
 800fb7e:	d113      	bne.n	800fba8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fb80:	693b      	ldr	r3, [r7, #16]
 800fb82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fb86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fb8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	695b      	ldr	r3, [r3, #20]
 800fb94:	009b      	lsls	r3, r3, #2
 800fb96:	693a      	ldr	r2, [r7, #16]
 800fb98:	4313      	orrs	r3, r2
 800fb9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	699b      	ldr	r3, [r3, #24]
 800fba0:	009b      	lsls	r3, r3, #2
 800fba2:	693a      	ldr	r2, [r7, #16]
 800fba4:	4313      	orrs	r3, r2
 800fba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	693a      	ldr	r2, [r7, #16]
 800fbac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	68fa      	ldr	r2, [r7, #12]
 800fbb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	685a      	ldr	r2, [r3, #4]
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	697a      	ldr	r2, [r7, #20]
 800fbc0:	621a      	str	r2, [r3, #32]
}
 800fbc2:	bf00      	nop
 800fbc4:	371c      	adds	r7, #28
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbcc:	4770      	bx	lr
 800fbce:	bf00      	nop
 800fbd0:	feff8fff 	.word	0xfeff8fff
 800fbd4:	40010000 	.word	0x40010000
 800fbd8:	40010400 	.word	0x40010400
 800fbdc:	40014000 	.word	0x40014000
 800fbe0:	40014400 	.word	0x40014400
 800fbe4:	40014800 	.word	0x40014800

0800fbe8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b087      	sub	sp, #28
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6a1b      	ldr	r3, [r3, #32]
 800fbf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6a1b      	ldr	r3, [r3, #32]
 800fbfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	685b      	ldr	r3, [r3, #4]
 800fc08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	69db      	ldr	r3, [r3, #28]
 800fc0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fc10:	68fa      	ldr	r2, [r7, #12]
 800fc12:	4b33      	ldr	r3, [pc, #204]	@ (800fce0 <TIM_OC3_SetConfig+0xf8>)
 800fc14:	4013      	ands	r3, r2
 800fc16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f023 0303 	bic.w	r3, r3, #3
 800fc1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	68fa      	ldr	r2, [r7, #12]
 800fc26:	4313      	orrs	r3, r2
 800fc28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fc30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fc32:	683b      	ldr	r3, [r7, #0]
 800fc34:	689b      	ldr	r3, [r3, #8]
 800fc36:	021b      	lsls	r3, r3, #8
 800fc38:	697a      	ldr	r2, [r7, #20]
 800fc3a:	4313      	orrs	r3, r2
 800fc3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	4a28      	ldr	r2, [pc, #160]	@ (800fce4 <TIM_OC3_SetConfig+0xfc>)
 800fc42:	4293      	cmp	r3, r2
 800fc44:	d003      	beq.n	800fc4e <TIM_OC3_SetConfig+0x66>
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	4a27      	ldr	r2, [pc, #156]	@ (800fce8 <TIM_OC3_SetConfig+0x100>)
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	d10d      	bne.n	800fc6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fc54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	68db      	ldr	r3, [r3, #12]
 800fc5a:	021b      	lsls	r3, r3, #8
 800fc5c:	697a      	ldr	r2, [r7, #20]
 800fc5e:	4313      	orrs	r3, r2
 800fc60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fc68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	4a1d      	ldr	r2, [pc, #116]	@ (800fce4 <TIM_OC3_SetConfig+0xfc>)
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d00f      	beq.n	800fc92 <TIM_OC3_SetConfig+0xaa>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	4a1c      	ldr	r2, [pc, #112]	@ (800fce8 <TIM_OC3_SetConfig+0x100>)
 800fc76:	4293      	cmp	r3, r2
 800fc78:	d00b      	beq.n	800fc92 <TIM_OC3_SetConfig+0xaa>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	4a1b      	ldr	r2, [pc, #108]	@ (800fcec <TIM_OC3_SetConfig+0x104>)
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	d007      	beq.n	800fc92 <TIM_OC3_SetConfig+0xaa>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	4a1a      	ldr	r2, [pc, #104]	@ (800fcf0 <TIM_OC3_SetConfig+0x108>)
 800fc86:	4293      	cmp	r3, r2
 800fc88:	d003      	beq.n	800fc92 <TIM_OC3_SetConfig+0xaa>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	4a19      	ldr	r2, [pc, #100]	@ (800fcf4 <TIM_OC3_SetConfig+0x10c>)
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d113      	bne.n	800fcba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fc98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fc9a:	693b      	ldr	r3, [r7, #16]
 800fc9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	695b      	ldr	r3, [r3, #20]
 800fca6:	011b      	lsls	r3, r3, #4
 800fca8:	693a      	ldr	r2, [r7, #16]
 800fcaa:	4313      	orrs	r3, r2
 800fcac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	699b      	ldr	r3, [r3, #24]
 800fcb2:	011b      	lsls	r3, r3, #4
 800fcb4:	693a      	ldr	r2, [r7, #16]
 800fcb6:	4313      	orrs	r3, r2
 800fcb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	693a      	ldr	r2, [r7, #16]
 800fcbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	68fa      	ldr	r2, [r7, #12]
 800fcc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	685a      	ldr	r2, [r3, #4]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	697a      	ldr	r2, [r7, #20]
 800fcd2:	621a      	str	r2, [r3, #32]
}
 800fcd4:	bf00      	nop
 800fcd6:	371c      	adds	r7, #28
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr
 800fce0:	fffeff8f 	.word	0xfffeff8f
 800fce4:	40010000 	.word	0x40010000
 800fce8:	40010400 	.word	0x40010400
 800fcec:	40014000 	.word	0x40014000
 800fcf0:	40014400 	.word	0x40014400
 800fcf4:	40014800 	.word	0x40014800

0800fcf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b087      	sub	sp, #28
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	6a1b      	ldr	r3, [r3, #32]
 800fd06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6a1b      	ldr	r3, [r3, #32]
 800fd0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	685b      	ldr	r3, [r3, #4]
 800fd18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	69db      	ldr	r3, [r3, #28]
 800fd1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fd20:	68fa      	ldr	r2, [r7, #12]
 800fd22:	4b24      	ldr	r3, [pc, #144]	@ (800fdb4 <TIM_OC4_SetConfig+0xbc>)
 800fd24:	4013      	ands	r3, r2
 800fd26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fd2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	021b      	lsls	r3, r3, #8
 800fd36:	68fa      	ldr	r2, [r7, #12]
 800fd38:	4313      	orrs	r3, r2
 800fd3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fd3c:	693b      	ldr	r3, [r7, #16]
 800fd3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fd42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	689b      	ldr	r3, [r3, #8]
 800fd48:	031b      	lsls	r3, r3, #12
 800fd4a:	693a      	ldr	r2, [r7, #16]
 800fd4c:	4313      	orrs	r3, r2
 800fd4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	4a19      	ldr	r2, [pc, #100]	@ (800fdb8 <TIM_OC4_SetConfig+0xc0>)
 800fd54:	4293      	cmp	r3, r2
 800fd56:	d00f      	beq.n	800fd78 <TIM_OC4_SetConfig+0x80>
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	4a18      	ldr	r2, [pc, #96]	@ (800fdbc <TIM_OC4_SetConfig+0xc4>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d00b      	beq.n	800fd78 <TIM_OC4_SetConfig+0x80>
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	4a17      	ldr	r2, [pc, #92]	@ (800fdc0 <TIM_OC4_SetConfig+0xc8>)
 800fd64:	4293      	cmp	r3, r2
 800fd66:	d007      	beq.n	800fd78 <TIM_OC4_SetConfig+0x80>
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	4a16      	ldr	r2, [pc, #88]	@ (800fdc4 <TIM_OC4_SetConfig+0xcc>)
 800fd6c:	4293      	cmp	r3, r2
 800fd6e:	d003      	beq.n	800fd78 <TIM_OC4_SetConfig+0x80>
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	4a15      	ldr	r2, [pc, #84]	@ (800fdc8 <TIM_OC4_SetConfig+0xd0>)
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d109      	bne.n	800fd8c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fd78:	697b      	ldr	r3, [r7, #20]
 800fd7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fd7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	695b      	ldr	r3, [r3, #20]
 800fd84:	019b      	lsls	r3, r3, #6
 800fd86:	697a      	ldr	r2, [r7, #20]
 800fd88:	4313      	orrs	r3, r2
 800fd8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	697a      	ldr	r2, [r7, #20]
 800fd90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	68fa      	ldr	r2, [r7, #12]
 800fd96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	685a      	ldr	r2, [r3, #4]
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	693a      	ldr	r2, [r7, #16]
 800fda4:	621a      	str	r2, [r3, #32]
}
 800fda6:	bf00      	nop
 800fda8:	371c      	adds	r7, #28
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb0:	4770      	bx	lr
 800fdb2:	bf00      	nop
 800fdb4:	feff8fff 	.word	0xfeff8fff
 800fdb8:	40010000 	.word	0x40010000
 800fdbc:	40010400 	.word	0x40010400
 800fdc0:	40014000 	.word	0x40014000
 800fdc4:	40014400 	.word	0x40014400
 800fdc8:	40014800 	.word	0x40014800

0800fdcc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fdcc:	b480      	push	{r7}
 800fdce:	b087      	sub	sp, #28
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6a1b      	ldr	r3, [r3, #32]
 800fdda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	6a1b      	ldr	r3, [r3, #32]
 800fde0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	685b      	ldr	r3, [r3, #4]
 800fdec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fdf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fdf4:	68fa      	ldr	r2, [r7, #12]
 800fdf6:	4b21      	ldr	r3, [pc, #132]	@ (800fe7c <TIM_OC5_SetConfig+0xb0>)
 800fdf8:	4013      	ands	r3, r2
 800fdfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	68fa      	ldr	r2, [r7, #12]
 800fe02:	4313      	orrs	r3, r2
 800fe04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800fe0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	689b      	ldr	r3, [r3, #8]
 800fe12:	041b      	lsls	r3, r3, #16
 800fe14:	693a      	ldr	r2, [r7, #16]
 800fe16:	4313      	orrs	r3, r2
 800fe18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	4a18      	ldr	r2, [pc, #96]	@ (800fe80 <TIM_OC5_SetConfig+0xb4>)
 800fe1e:	4293      	cmp	r3, r2
 800fe20:	d00f      	beq.n	800fe42 <TIM_OC5_SetConfig+0x76>
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	4a17      	ldr	r2, [pc, #92]	@ (800fe84 <TIM_OC5_SetConfig+0xb8>)
 800fe26:	4293      	cmp	r3, r2
 800fe28:	d00b      	beq.n	800fe42 <TIM_OC5_SetConfig+0x76>
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	4a16      	ldr	r2, [pc, #88]	@ (800fe88 <TIM_OC5_SetConfig+0xbc>)
 800fe2e:	4293      	cmp	r3, r2
 800fe30:	d007      	beq.n	800fe42 <TIM_OC5_SetConfig+0x76>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	4a15      	ldr	r2, [pc, #84]	@ (800fe8c <TIM_OC5_SetConfig+0xc0>)
 800fe36:	4293      	cmp	r3, r2
 800fe38:	d003      	beq.n	800fe42 <TIM_OC5_SetConfig+0x76>
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	4a14      	ldr	r2, [pc, #80]	@ (800fe90 <TIM_OC5_SetConfig+0xc4>)
 800fe3e:	4293      	cmp	r3, r2
 800fe40:	d109      	bne.n	800fe56 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fe42:	697b      	ldr	r3, [r7, #20]
 800fe44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fe48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	695b      	ldr	r3, [r3, #20]
 800fe4e:	021b      	lsls	r3, r3, #8
 800fe50:	697a      	ldr	r2, [r7, #20]
 800fe52:	4313      	orrs	r3, r2
 800fe54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	697a      	ldr	r2, [r7, #20]
 800fe5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	68fa      	ldr	r2, [r7, #12]
 800fe60:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	685a      	ldr	r2, [r3, #4]
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	693a      	ldr	r2, [r7, #16]
 800fe6e:	621a      	str	r2, [r3, #32]
}
 800fe70:	bf00      	nop
 800fe72:	371c      	adds	r7, #28
 800fe74:	46bd      	mov	sp, r7
 800fe76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7a:	4770      	bx	lr
 800fe7c:	fffeff8f 	.word	0xfffeff8f
 800fe80:	40010000 	.word	0x40010000
 800fe84:	40010400 	.word	0x40010400
 800fe88:	40014000 	.word	0x40014000
 800fe8c:	40014400 	.word	0x40014400
 800fe90:	40014800 	.word	0x40014800

0800fe94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b087      	sub	sp, #28
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6a1b      	ldr	r3, [r3, #32]
 800fea2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	6a1b      	ldr	r3, [r3, #32]
 800fea8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	685b      	ldr	r3, [r3, #4]
 800feb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800feba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800febc:	68fa      	ldr	r2, [r7, #12]
 800febe:	4b22      	ldr	r3, [pc, #136]	@ (800ff48 <TIM_OC6_SetConfig+0xb4>)
 800fec0:	4013      	ands	r3, r2
 800fec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	021b      	lsls	r3, r3, #8
 800feca:	68fa      	ldr	r2, [r7, #12]
 800fecc:	4313      	orrs	r3, r2
 800fece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	689b      	ldr	r3, [r3, #8]
 800fedc:	051b      	lsls	r3, r3, #20
 800fede:	693a      	ldr	r2, [r7, #16]
 800fee0:	4313      	orrs	r3, r2
 800fee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	4a19      	ldr	r2, [pc, #100]	@ (800ff4c <TIM_OC6_SetConfig+0xb8>)
 800fee8:	4293      	cmp	r3, r2
 800feea:	d00f      	beq.n	800ff0c <TIM_OC6_SetConfig+0x78>
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	4a18      	ldr	r2, [pc, #96]	@ (800ff50 <TIM_OC6_SetConfig+0xbc>)
 800fef0:	4293      	cmp	r3, r2
 800fef2:	d00b      	beq.n	800ff0c <TIM_OC6_SetConfig+0x78>
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	4a17      	ldr	r2, [pc, #92]	@ (800ff54 <TIM_OC6_SetConfig+0xc0>)
 800fef8:	4293      	cmp	r3, r2
 800fefa:	d007      	beq.n	800ff0c <TIM_OC6_SetConfig+0x78>
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	4a16      	ldr	r2, [pc, #88]	@ (800ff58 <TIM_OC6_SetConfig+0xc4>)
 800ff00:	4293      	cmp	r3, r2
 800ff02:	d003      	beq.n	800ff0c <TIM_OC6_SetConfig+0x78>
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	4a15      	ldr	r2, [pc, #84]	@ (800ff5c <TIM_OC6_SetConfig+0xc8>)
 800ff08:	4293      	cmp	r3, r2
 800ff0a:	d109      	bne.n	800ff20 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ff0c:	697b      	ldr	r3, [r7, #20]
 800ff0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ff12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	695b      	ldr	r3, [r3, #20]
 800ff18:	029b      	lsls	r3, r3, #10
 800ff1a:	697a      	ldr	r2, [r7, #20]
 800ff1c:	4313      	orrs	r3, r2
 800ff1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	697a      	ldr	r2, [r7, #20]
 800ff24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	68fa      	ldr	r2, [r7, #12]
 800ff2a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	685a      	ldr	r2, [r3, #4]
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	693a      	ldr	r2, [r7, #16]
 800ff38:	621a      	str	r2, [r3, #32]
}
 800ff3a:	bf00      	nop
 800ff3c:	371c      	adds	r7, #28
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff44:	4770      	bx	lr
 800ff46:	bf00      	nop
 800ff48:	feff8fff 	.word	0xfeff8fff
 800ff4c:	40010000 	.word	0x40010000
 800ff50:	40010400 	.word	0x40010400
 800ff54:	40014000 	.word	0x40014000
 800ff58:	40014400 	.word	0x40014400
 800ff5c:	40014800 	.word	0x40014800

0800ff60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ff60:	b480      	push	{r7}
 800ff62:	b087      	sub	sp, #28
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	60f8      	str	r0, [r7, #12]
 800ff68:	60b9      	str	r1, [r7, #8]
 800ff6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	f003 031f 	and.w	r3, r3, #31
 800ff72:	2201      	movs	r2, #1
 800ff74:	fa02 f303 	lsl.w	r3, r2, r3
 800ff78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	6a1a      	ldr	r2, [r3, #32]
 800ff7e:	697b      	ldr	r3, [r7, #20]
 800ff80:	43db      	mvns	r3, r3
 800ff82:	401a      	ands	r2, r3
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	6a1a      	ldr	r2, [r3, #32]
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	f003 031f 	and.w	r3, r3, #31
 800ff92:	6879      	ldr	r1, [r7, #4]
 800ff94:	fa01 f303 	lsl.w	r3, r1, r3
 800ff98:	431a      	orrs	r2, r3
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	621a      	str	r2, [r3, #32]
}
 800ff9e:	bf00      	nop
 800ffa0:	371c      	adds	r7, #28
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa8:	4770      	bx	lr
	...

0800ffac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ffac:	b480      	push	{r7}
 800ffae:	b085      	sub	sp, #20
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
 800ffb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ffbc:	2b01      	cmp	r3, #1
 800ffbe:	d101      	bne.n	800ffc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ffc0:	2302      	movs	r3, #2
 800ffc2:	e06d      	b.n	80100a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2201      	movs	r2, #1
 800ffc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2202      	movs	r2, #2
 800ffd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	689b      	ldr	r3, [r3, #8]
 800ffe2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	4a30      	ldr	r2, [pc, #192]	@ (80100ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ffea:	4293      	cmp	r3, r2
 800ffec:	d004      	beq.n	800fff8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	4a2f      	ldr	r2, [pc, #188]	@ (80100b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fff4:	4293      	cmp	r3, r2
 800fff6:	d108      	bne.n	801000a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800fffe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	685b      	ldr	r3, [r3, #4]
 8010004:	68fa      	ldr	r2, [r7, #12]
 8010006:	4313      	orrs	r3, r2
 8010008:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010010:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	68fa      	ldr	r2, [r7, #12]
 8010018:	4313      	orrs	r3, r2
 801001a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	68fa      	ldr	r2, [r7, #12]
 8010022:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	4a20      	ldr	r2, [pc, #128]	@ (80100ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801002a:	4293      	cmp	r3, r2
 801002c:	d022      	beq.n	8010074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010036:	d01d      	beq.n	8010074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	4a1d      	ldr	r2, [pc, #116]	@ (80100b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801003e:	4293      	cmp	r3, r2
 8010040:	d018      	beq.n	8010074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	4a1c      	ldr	r2, [pc, #112]	@ (80100b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010048:	4293      	cmp	r3, r2
 801004a:	d013      	beq.n	8010074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	4a1a      	ldr	r2, [pc, #104]	@ (80100bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010052:	4293      	cmp	r3, r2
 8010054:	d00e      	beq.n	8010074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	4a15      	ldr	r2, [pc, #84]	@ (80100b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801005c:	4293      	cmp	r3, r2
 801005e:	d009      	beq.n	8010074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	4a16      	ldr	r2, [pc, #88]	@ (80100c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010066:	4293      	cmp	r3, r2
 8010068:	d004      	beq.n	8010074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	4a15      	ldr	r2, [pc, #84]	@ (80100c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010070:	4293      	cmp	r3, r2
 8010072:	d10c      	bne.n	801008e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801007a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	689b      	ldr	r3, [r3, #8]
 8010080:	68ba      	ldr	r2, [r7, #8]
 8010082:	4313      	orrs	r3, r2
 8010084:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	68ba      	ldr	r2, [r7, #8]
 801008c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2201      	movs	r2, #1
 8010092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2200      	movs	r2, #0
 801009a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801009e:	2300      	movs	r3, #0
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	3714      	adds	r7, #20
 80100a4:	46bd      	mov	sp, r7
 80100a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100aa:	4770      	bx	lr
 80100ac:	40010000 	.word	0x40010000
 80100b0:	40010400 	.word	0x40010400
 80100b4:	40000400 	.word	0x40000400
 80100b8:	40000800 	.word	0x40000800
 80100bc:	40000c00 	.word	0x40000c00
 80100c0:	40001800 	.word	0x40001800
 80100c4:	40014000 	.word	0x40014000

080100c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80100c8:	b480      	push	{r7}
 80100ca:	b085      	sub	sp, #20
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80100d2:	2300      	movs	r3, #0
 80100d4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80100dc:	2b01      	cmp	r3, #1
 80100de:	d101      	bne.n	80100e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80100e0:	2302      	movs	r3, #2
 80100e2:	e065      	b.n	80101b0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2201      	movs	r2, #1
 80100e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	68db      	ldr	r3, [r3, #12]
 80100f6:	4313      	orrs	r3, r2
 80100f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	689b      	ldr	r3, [r3, #8]
 8010104:	4313      	orrs	r3, r2
 8010106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	685b      	ldr	r3, [r3, #4]
 8010112:	4313      	orrs	r3, r2
 8010114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	4313      	orrs	r3, r2
 8010122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	691b      	ldr	r3, [r3, #16]
 801012e:	4313      	orrs	r3, r2
 8010130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	695b      	ldr	r3, [r3, #20]
 801013c:	4313      	orrs	r3, r2
 801013e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801014a:	4313      	orrs	r3, r2
 801014c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	699b      	ldr	r3, [r3, #24]
 8010158:	041b      	lsls	r3, r3, #16
 801015a:	4313      	orrs	r3, r2
 801015c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	4a16      	ldr	r2, [pc, #88]	@ (80101bc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010164:	4293      	cmp	r3, r2
 8010166:	d004      	beq.n	8010172 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	4a14      	ldr	r2, [pc, #80]	@ (80101c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801016e:	4293      	cmp	r3, r2
 8010170:	d115      	bne.n	801019e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801017c:	051b      	lsls	r3, r3, #20
 801017e:	4313      	orrs	r3, r2
 8010180:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	69db      	ldr	r3, [r3, #28]
 801018c:	4313      	orrs	r3, r2
 801018e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	6a1b      	ldr	r3, [r3, #32]
 801019a:	4313      	orrs	r3, r2
 801019c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	68fa      	ldr	r2, [r7, #12]
 80101a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2200      	movs	r2, #0
 80101aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80101ae:	2300      	movs	r3, #0
}
 80101b0:	4618      	mov	r0, r3
 80101b2:	3714      	adds	r7, #20
 80101b4:	46bd      	mov	sp, r7
 80101b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ba:	4770      	bx	lr
 80101bc:	40010000 	.word	0x40010000
 80101c0:	40010400 	.word	0x40010400

080101c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80101c4:	b480      	push	{r7}
 80101c6:	b083      	sub	sp, #12
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80101cc:	bf00      	nop
 80101ce:	370c      	adds	r7, #12
 80101d0:	46bd      	mov	sp, r7
 80101d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d6:	4770      	bx	lr

080101d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80101d8:	b480      	push	{r7}
 80101da:	b083      	sub	sp, #12
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80101e0:	bf00      	nop
 80101e2:	370c      	adds	r7, #12
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr

080101ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80101ec:	b480      	push	{r7}
 80101ee:	b083      	sub	sp, #12
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80101f4:	bf00      	nop
 80101f6:	370c      	adds	r7, #12
 80101f8:	46bd      	mov	sp, r7
 80101fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fe:	4770      	bx	lr

08010200 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d101      	bne.n	8010212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801020e:	2301      	movs	r3, #1
 8010210:	e042      	b.n	8010298 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010218:	2b00      	cmp	r3, #0
 801021a:	d106      	bne.n	801022a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2200      	movs	r2, #0
 8010220:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f7f1 feb3 	bl	8001f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2224      	movs	r2, #36	@ 0x24
 801022e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	681a      	ldr	r2, [r3, #0]
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	f022 0201 	bic.w	r2, r2, #1
 8010240:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010246:	2b00      	cmp	r3, #0
 8010248:	d002      	beq.n	8010250 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f000 fe1e 	bl	8010e8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f000 f8b3 	bl	80103bc <UART_SetConfig>
 8010256:	4603      	mov	r3, r0
 8010258:	2b01      	cmp	r3, #1
 801025a:	d101      	bne.n	8010260 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801025c:	2301      	movs	r3, #1
 801025e:	e01b      	b.n	8010298 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	685a      	ldr	r2, [r3, #4]
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801026e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	689a      	ldr	r2, [r3, #8]
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801027e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	681a      	ldr	r2, [r3, #0]
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	f042 0201 	orr.w	r2, r2, #1
 801028e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010290:	6878      	ldr	r0, [r7, #4]
 8010292:	f000 fe9d 	bl	8010fd0 <UART_CheckIdleState>
 8010296:	4603      	mov	r3, r0
}
 8010298:	4618      	mov	r0, r3
 801029a:	3708      	adds	r7, #8
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}

080102a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b08a      	sub	sp, #40	@ 0x28
 80102a4:	af02      	add	r7, sp, #8
 80102a6:	60f8      	str	r0, [r7, #12]
 80102a8:	60b9      	str	r1, [r7, #8]
 80102aa:	603b      	str	r3, [r7, #0]
 80102ac:	4613      	mov	r3, r2
 80102ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80102b6:	2b20      	cmp	r3, #32
 80102b8:	d17b      	bne.n	80103b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d002      	beq.n	80102c6 <HAL_UART_Transmit+0x26>
 80102c0:	88fb      	ldrh	r3, [r7, #6]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d101      	bne.n	80102ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80102c6:	2301      	movs	r3, #1
 80102c8:	e074      	b.n	80103b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	2200      	movs	r2, #0
 80102ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	2221      	movs	r2, #33	@ 0x21
 80102d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80102da:	f7f2 f8e7 	bl	80024ac <HAL_GetTick>
 80102de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	88fa      	ldrh	r2, [r7, #6]
 80102e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	88fa      	ldrh	r2, [r7, #6]
 80102ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	689b      	ldr	r3, [r3, #8]
 80102f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80102f8:	d108      	bne.n	801030c <HAL_UART_Transmit+0x6c>
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	691b      	ldr	r3, [r3, #16]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d104      	bne.n	801030c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010302:	2300      	movs	r3, #0
 8010304:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010306:	68bb      	ldr	r3, [r7, #8]
 8010308:	61bb      	str	r3, [r7, #24]
 801030a:	e003      	b.n	8010314 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010310:	2300      	movs	r3, #0
 8010312:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010314:	e030      	b.n	8010378 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	9300      	str	r3, [sp, #0]
 801031a:	697b      	ldr	r3, [r7, #20]
 801031c:	2200      	movs	r2, #0
 801031e:	2180      	movs	r1, #128	@ 0x80
 8010320:	68f8      	ldr	r0, [r7, #12]
 8010322:	f000 feff 	bl	8011124 <UART_WaitOnFlagUntilTimeout>
 8010326:	4603      	mov	r3, r0
 8010328:	2b00      	cmp	r3, #0
 801032a:	d005      	beq.n	8010338 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	2220      	movs	r2, #32
 8010330:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8010334:	2303      	movs	r3, #3
 8010336:	e03d      	b.n	80103b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010338:	69fb      	ldr	r3, [r7, #28]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d10b      	bne.n	8010356 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801033e:	69bb      	ldr	r3, [r7, #24]
 8010340:	881b      	ldrh	r3, [r3, #0]
 8010342:	461a      	mov	r2, r3
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801034c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801034e:	69bb      	ldr	r3, [r7, #24]
 8010350:	3302      	adds	r3, #2
 8010352:	61bb      	str	r3, [r7, #24]
 8010354:	e007      	b.n	8010366 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010356:	69fb      	ldr	r3, [r7, #28]
 8010358:	781a      	ldrb	r2, [r3, #0]
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8010360:	69fb      	ldr	r3, [r7, #28]
 8010362:	3301      	adds	r3, #1
 8010364:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801036c:	b29b      	uxth	r3, r3
 801036e:	3b01      	subs	r3, #1
 8010370:	b29a      	uxth	r2, r3
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801037e:	b29b      	uxth	r3, r3
 8010380:	2b00      	cmp	r3, #0
 8010382:	d1c8      	bne.n	8010316 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	9300      	str	r3, [sp, #0]
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	2200      	movs	r2, #0
 801038c:	2140      	movs	r1, #64	@ 0x40
 801038e:	68f8      	ldr	r0, [r7, #12]
 8010390:	f000 fec8 	bl	8011124 <UART_WaitOnFlagUntilTimeout>
 8010394:	4603      	mov	r3, r0
 8010396:	2b00      	cmp	r3, #0
 8010398:	d005      	beq.n	80103a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	2220      	movs	r2, #32
 801039e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80103a2:	2303      	movs	r3, #3
 80103a4:	e006      	b.n	80103b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	2220      	movs	r2, #32
 80103aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80103ae:	2300      	movs	r3, #0
 80103b0:	e000      	b.n	80103b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80103b2:	2302      	movs	r3, #2
  }
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3720      	adds	r7, #32
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}

080103bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80103bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80103c0:	b092      	sub	sp, #72	@ 0x48
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80103c6:	2300      	movs	r3, #0
 80103c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80103cc:	697b      	ldr	r3, [r7, #20]
 80103ce:	689a      	ldr	r2, [r3, #8]
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	691b      	ldr	r3, [r3, #16]
 80103d4:	431a      	orrs	r2, r3
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	695b      	ldr	r3, [r3, #20]
 80103da:	431a      	orrs	r2, r3
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	69db      	ldr	r3, [r3, #28]
 80103e0:	4313      	orrs	r3, r2
 80103e2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	681a      	ldr	r2, [r3, #0]
 80103ea:	4bbe      	ldr	r3, [pc, #760]	@ (80106e4 <UART_SetConfig+0x328>)
 80103ec:	4013      	ands	r3, r2
 80103ee:	697a      	ldr	r2, [r7, #20]
 80103f0:	6812      	ldr	r2, [r2, #0]
 80103f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80103f4:	430b      	orrs	r3, r1
 80103f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	685b      	ldr	r3, [r3, #4]
 80103fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	68da      	ldr	r2, [r3, #12]
 8010406:	697b      	ldr	r3, [r7, #20]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	430a      	orrs	r2, r1
 801040c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801040e:	697b      	ldr	r3, [r7, #20]
 8010410:	699b      	ldr	r3, [r3, #24]
 8010412:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010414:	697b      	ldr	r3, [r7, #20]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	4ab3      	ldr	r2, [pc, #716]	@ (80106e8 <UART_SetConfig+0x32c>)
 801041a:	4293      	cmp	r3, r2
 801041c:	d004      	beq.n	8010428 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801041e:	697b      	ldr	r3, [r7, #20]
 8010420:	6a1b      	ldr	r3, [r3, #32]
 8010422:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010424:	4313      	orrs	r3, r2
 8010426:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	689a      	ldr	r2, [r3, #8]
 801042e:	4baf      	ldr	r3, [pc, #700]	@ (80106ec <UART_SetConfig+0x330>)
 8010430:	4013      	ands	r3, r2
 8010432:	697a      	ldr	r2, [r7, #20]
 8010434:	6812      	ldr	r2, [r2, #0]
 8010436:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010438:	430b      	orrs	r3, r1
 801043a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010442:	f023 010f 	bic.w	r1, r3, #15
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	430a      	orrs	r2, r1
 8010450:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	4aa6      	ldr	r2, [pc, #664]	@ (80106f0 <UART_SetConfig+0x334>)
 8010458:	4293      	cmp	r3, r2
 801045a:	d177      	bne.n	801054c <UART_SetConfig+0x190>
 801045c:	4ba5      	ldr	r3, [pc, #660]	@ (80106f4 <UART_SetConfig+0x338>)
 801045e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010460:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010464:	2b28      	cmp	r3, #40	@ 0x28
 8010466:	d86d      	bhi.n	8010544 <UART_SetConfig+0x188>
 8010468:	a201      	add	r2, pc, #4	@ (adr r2, 8010470 <UART_SetConfig+0xb4>)
 801046a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801046e:	bf00      	nop
 8010470:	08010515 	.word	0x08010515
 8010474:	08010545 	.word	0x08010545
 8010478:	08010545 	.word	0x08010545
 801047c:	08010545 	.word	0x08010545
 8010480:	08010545 	.word	0x08010545
 8010484:	08010545 	.word	0x08010545
 8010488:	08010545 	.word	0x08010545
 801048c:	08010545 	.word	0x08010545
 8010490:	0801051d 	.word	0x0801051d
 8010494:	08010545 	.word	0x08010545
 8010498:	08010545 	.word	0x08010545
 801049c:	08010545 	.word	0x08010545
 80104a0:	08010545 	.word	0x08010545
 80104a4:	08010545 	.word	0x08010545
 80104a8:	08010545 	.word	0x08010545
 80104ac:	08010545 	.word	0x08010545
 80104b0:	08010525 	.word	0x08010525
 80104b4:	08010545 	.word	0x08010545
 80104b8:	08010545 	.word	0x08010545
 80104bc:	08010545 	.word	0x08010545
 80104c0:	08010545 	.word	0x08010545
 80104c4:	08010545 	.word	0x08010545
 80104c8:	08010545 	.word	0x08010545
 80104cc:	08010545 	.word	0x08010545
 80104d0:	0801052d 	.word	0x0801052d
 80104d4:	08010545 	.word	0x08010545
 80104d8:	08010545 	.word	0x08010545
 80104dc:	08010545 	.word	0x08010545
 80104e0:	08010545 	.word	0x08010545
 80104e4:	08010545 	.word	0x08010545
 80104e8:	08010545 	.word	0x08010545
 80104ec:	08010545 	.word	0x08010545
 80104f0:	08010535 	.word	0x08010535
 80104f4:	08010545 	.word	0x08010545
 80104f8:	08010545 	.word	0x08010545
 80104fc:	08010545 	.word	0x08010545
 8010500:	08010545 	.word	0x08010545
 8010504:	08010545 	.word	0x08010545
 8010508:	08010545 	.word	0x08010545
 801050c:	08010545 	.word	0x08010545
 8010510:	0801053d 	.word	0x0801053d
 8010514:	2301      	movs	r3, #1
 8010516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801051a:	e222      	b.n	8010962 <UART_SetConfig+0x5a6>
 801051c:	2304      	movs	r3, #4
 801051e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010522:	e21e      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010524:	2308      	movs	r3, #8
 8010526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801052a:	e21a      	b.n	8010962 <UART_SetConfig+0x5a6>
 801052c:	2310      	movs	r3, #16
 801052e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010532:	e216      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010534:	2320      	movs	r3, #32
 8010536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801053a:	e212      	b.n	8010962 <UART_SetConfig+0x5a6>
 801053c:	2340      	movs	r3, #64	@ 0x40
 801053e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010542:	e20e      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010544:	2380      	movs	r3, #128	@ 0x80
 8010546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801054a:	e20a      	b.n	8010962 <UART_SetConfig+0x5a6>
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	4a69      	ldr	r2, [pc, #420]	@ (80106f8 <UART_SetConfig+0x33c>)
 8010552:	4293      	cmp	r3, r2
 8010554:	d130      	bne.n	80105b8 <UART_SetConfig+0x1fc>
 8010556:	4b67      	ldr	r3, [pc, #412]	@ (80106f4 <UART_SetConfig+0x338>)
 8010558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801055a:	f003 0307 	and.w	r3, r3, #7
 801055e:	2b05      	cmp	r3, #5
 8010560:	d826      	bhi.n	80105b0 <UART_SetConfig+0x1f4>
 8010562:	a201      	add	r2, pc, #4	@ (adr r2, 8010568 <UART_SetConfig+0x1ac>)
 8010564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010568:	08010581 	.word	0x08010581
 801056c:	08010589 	.word	0x08010589
 8010570:	08010591 	.word	0x08010591
 8010574:	08010599 	.word	0x08010599
 8010578:	080105a1 	.word	0x080105a1
 801057c:	080105a9 	.word	0x080105a9
 8010580:	2300      	movs	r3, #0
 8010582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010586:	e1ec      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010588:	2304      	movs	r3, #4
 801058a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801058e:	e1e8      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010590:	2308      	movs	r3, #8
 8010592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010596:	e1e4      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010598:	2310      	movs	r3, #16
 801059a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801059e:	e1e0      	b.n	8010962 <UART_SetConfig+0x5a6>
 80105a0:	2320      	movs	r3, #32
 80105a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105a6:	e1dc      	b.n	8010962 <UART_SetConfig+0x5a6>
 80105a8:	2340      	movs	r3, #64	@ 0x40
 80105aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105ae:	e1d8      	b.n	8010962 <UART_SetConfig+0x5a6>
 80105b0:	2380      	movs	r3, #128	@ 0x80
 80105b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105b6:	e1d4      	b.n	8010962 <UART_SetConfig+0x5a6>
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	4a4f      	ldr	r2, [pc, #316]	@ (80106fc <UART_SetConfig+0x340>)
 80105be:	4293      	cmp	r3, r2
 80105c0:	d130      	bne.n	8010624 <UART_SetConfig+0x268>
 80105c2:	4b4c      	ldr	r3, [pc, #304]	@ (80106f4 <UART_SetConfig+0x338>)
 80105c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80105c6:	f003 0307 	and.w	r3, r3, #7
 80105ca:	2b05      	cmp	r3, #5
 80105cc:	d826      	bhi.n	801061c <UART_SetConfig+0x260>
 80105ce:	a201      	add	r2, pc, #4	@ (adr r2, 80105d4 <UART_SetConfig+0x218>)
 80105d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105d4:	080105ed 	.word	0x080105ed
 80105d8:	080105f5 	.word	0x080105f5
 80105dc:	080105fd 	.word	0x080105fd
 80105e0:	08010605 	.word	0x08010605
 80105e4:	0801060d 	.word	0x0801060d
 80105e8:	08010615 	.word	0x08010615
 80105ec:	2300      	movs	r3, #0
 80105ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105f2:	e1b6      	b.n	8010962 <UART_SetConfig+0x5a6>
 80105f4:	2304      	movs	r3, #4
 80105f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105fa:	e1b2      	b.n	8010962 <UART_SetConfig+0x5a6>
 80105fc:	2308      	movs	r3, #8
 80105fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010602:	e1ae      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010604:	2310      	movs	r3, #16
 8010606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801060a:	e1aa      	b.n	8010962 <UART_SetConfig+0x5a6>
 801060c:	2320      	movs	r3, #32
 801060e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010612:	e1a6      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010614:	2340      	movs	r3, #64	@ 0x40
 8010616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801061a:	e1a2      	b.n	8010962 <UART_SetConfig+0x5a6>
 801061c:	2380      	movs	r3, #128	@ 0x80
 801061e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010622:	e19e      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	4a35      	ldr	r2, [pc, #212]	@ (8010700 <UART_SetConfig+0x344>)
 801062a:	4293      	cmp	r3, r2
 801062c:	d130      	bne.n	8010690 <UART_SetConfig+0x2d4>
 801062e:	4b31      	ldr	r3, [pc, #196]	@ (80106f4 <UART_SetConfig+0x338>)
 8010630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010632:	f003 0307 	and.w	r3, r3, #7
 8010636:	2b05      	cmp	r3, #5
 8010638:	d826      	bhi.n	8010688 <UART_SetConfig+0x2cc>
 801063a:	a201      	add	r2, pc, #4	@ (adr r2, 8010640 <UART_SetConfig+0x284>)
 801063c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010640:	08010659 	.word	0x08010659
 8010644:	08010661 	.word	0x08010661
 8010648:	08010669 	.word	0x08010669
 801064c:	08010671 	.word	0x08010671
 8010650:	08010679 	.word	0x08010679
 8010654:	08010681 	.word	0x08010681
 8010658:	2300      	movs	r3, #0
 801065a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801065e:	e180      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010660:	2304      	movs	r3, #4
 8010662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010666:	e17c      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010668:	2308      	movs	r3, #8
 801066a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801066e:	e178      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010670:	2310      	movs	r3, #16
 8010672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010676:	e174      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010678:	2320      	movs	r3, #32
 801067a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801067e:	e170      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010680:	2340      	movs	r3, #64	@ 0x40
 8010682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010686:	e16c      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010688:	2380      	movs	r3, #128	@ 0x80
 801068a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801068e:	e168      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	4a1b      	ldr	r2, [pc, #108]	@ (8010704 <UART_SetConfig+0x348>)
 8010696:	4293      	cmp	r3, r2
 8010698:	d142      	bne.n	8010720 <UART_SetConfig+0x364>
 801069a:	4b16      	ldr	r3, [pc, #88]	@ (80106f4 <UART_SetConfig+0x338>)
 801069c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801069e:	f003 0307 	and.w	r3, r3, #7
 80106a2:	2b05      	cmp	r3, #5
 80106a4:	d838      	bhi.n	8010718 <UART_SetConfig+0x35c>
 80106a6:	a201      	add	r2, pc, #4	@ (adr r2, 80106ac <UART_SetConfig+0x2f0>)
 80106a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106ac:	080106c5 	.word	0x080106c5
 80106b0:	080106cd 	.word	0x080106cd
 80106b4:	080106d5 	.word	0x080106d5
 80106b8:	080106dd 	.word	0x080106dd
 80106bc:	08010709 	.word	0x08010709
 80106c0:	08010711 	.word	0x08010711
 80106c4:	2300      	movs	r3, #0
 80106c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106ca:	e14a      	b.n	8010962 <UART_SetConfig+0x5a6>
 80106cc:	2304      	movs	r3, #4
 80106ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106d2:	e146      	b.n	8010962 <UART_SetConfig+0x5a6>
 80106d4:	2308      	movs	r3, #8
 80106d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106da:	e142      	b.n	8010962 <UART_SetConfig+0x5a6>
 80106dc:	2310      	movs	r3, #16
 80106de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106e2:	e13e      	b.n	8010962 <UART_SetConfig+0x5a6>
 80106e4:	cfff69f3 	.word	0xcfff69f3
 80106e8:	58000c00 	.word	0x58000c00
 80106ec:	11fff4ff 	.word	0x11fff4ff
 80106f0:	40011000 	.word	0x40011000
 80106f4:	58024400 	.word	0x58024400
 80106f8:	40004400 	.word	0x40004400
 80106fc:	40004800 	.word	0x40004800
 8010700:	40004c00 	.word	0x40004c00
 8010704:	40005000 	.word	0x40005000
 8010708:	2320      	movs	r3, #32
 801070a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801070e:	e128      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010710:	2340      	movs	r3, #64	@ 0x40
 8010712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010716:	e124      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010718:	2380      	movs	r3, #128	@ 0x80
 801071a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801071e:	e120      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010720:	697b      	ldr	r3, [r7, #20]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	4acb      	ldr	r2, [pc, #812]	@ (8010a54 <UART_SetConfig+0x698>)
 8010726:	4293      	cmp	r3, r2
 8010728:	d176      	bne.n	8010818 <UART_SetConfig+0x45c>
 801072a:	4bcb      	ldr	r3, [pc, #812]	@ (8010a58 <UART_SetConfig+0x69c>)
 801072c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801072e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010732:	2b28      	cmp	r3, #40	@ 0x28
 8010734:	d86c      	bhi.n	8010810 <UART_SetConfig+0x454>
 8010736:	a201      	add	r2, pc, #4	@ (adr r2, 801073c <UART_SetConfig+0x380>)
 8010738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801073c:	080107e1 	.word	0x080107e1
 8010740:	08010811 	.word	0x08010811
 8010744:	08010811 	.word	0x08010811
 8010748:	08010811 	.word	0x08010811
 801074c:	08010811 	.word	0x08010811
 8010750:	08010811 	.word	0x08010811
 8010754:	08010811 	.word	0x08010811
 8010758:	08010811 	.word	0x08010811
 801075c:	080107e9 	.word	0x080107e9
 8010760:	08010811 	.word	0x08010811
 8010764:	08010811 	.word	0x08010811
 8010768:	08010811 	.word	0x08010811
 801076c:	08010811 	.word	0x08010811
 8010770:	08010811 	.word	0x08010811
 8010774:	08010811 	.word	0x08010811
 8010778:	08010811 	.word	0x08010811
 801077c:	080107f1 	.word	0x080107f1
 8010780:	08010811 	.word	0x08010811
 8010784:	08010811 	.word	0x08010811
 8010788:	08010811 	.word	0x08010811
 801078c:	08010811 	.word	0x08010811
 8010790:	08010811 	.word	0x08010811
 8010794:	08010811 	.word	0x08010811
 8010798:	08010811 	.word	0x08010811
 801079c:	080107f9 	.word	0x080107f9
 80107a0:	08010811 	.word	0x08010811
 80107a4:	08010811 	.word	0x08010811
 80107a8:	08010811 	.word	0x08010811
 80107ac:	08010811 	.word	0x08010811
 80107b0:	08010811 	.word	0x08010811
 80107b4:	08010811 	.word	0x08010811
 80107b8:	08010811 	.word	0x08010811
 80107bc:	08010801 	.word	0x08010801
 80107c0:	08010811 	.word	0x08010811
 80107c4:	08010811 	.word	0x08010811
 80107c8:	08010811 	.word	0x08010811
 80107cc:	08010811 	.word	0x08010811
 80107d0:	08010811 	.word	0x08010811
 80107d4:	08010811 	.word	0x08010811
 80107d8:	08010811 	.word	0x08010811
 80107dc:	08010809 	.word	0x08010809
 80107e0:	2301      	movs	r3, #1
 80107e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107e6:	e0bc      	b.n	8010962 <UART_SetConfig+0x5a6>
 80107e8:	2304      	movs	r3, #4
 80107ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107ee:	e0b8      	b.n	8010962 <UART_SetConfig+0x5a6>
 80107f0:	2308      	movs	r3, #8
 80107f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107f6:	e0b4      	b.n	8010962 <UART_SetConfig+0x5a6>
 80107f8:	2310      	movs	r3, #16
 80107fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107fe:	e0b0      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010800:	2320      	movs	r3, #32
 8010802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010806:	e0ac      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010808:	2340      	movs	r3, #64	@ 0x40
 801080a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801080e:	e0a8      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010810:	2380      	movs	r3, #128	@ 0x80
 8010812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010816:	e0a4      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	4a8f      	ldr	r2, [pc, #572]	@ (8010a5c <UART_SetConfig+0x6a0>)
 801081e:	4293      	cmp	r3, r2
 8010820:	d130      	bne.n	8010884 <UART_SetConfig+0x4c8>
 8010822:	4b8d      	ldr	r3, [pc, #564]	@ (8010a58 <UART_SetConfig+0x69c>)
 8010824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010826:	f003 0307 	and.w	r3, r3, #7
 801082a:	2b05      	cmp	r3, #5
 801082c:	d826      	bhi.n	801087c <UART_SetConfig+0x4c0>
 801082e:	a201      	add	r2, pc, #4	@ (adr r2, 8010834 <UART_SetConfig+0x478>)
 8010830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010834:	0801084d 	.word	0x0801084d
 8010838:	08010855 	.word	0x08010855
 801083c:	0801085d 	.word	0x0801085d
 8010840:	08010865 	.word	0x08010865
 8010844:	0801086d 	.word	0x0801086d
 8010848:	08010875 	.word	0x08010875
 801084c:	2300      	movs	r3, #0
 801084e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010852:	e086      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010854:	2304      	movs	r3, #4
 8010856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801085a:	e082      	b.n	8010962 <UART_SetConfig+0x5a6>
 801085c:	2308      	movs	r3, #8
 801085e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010862:	e07e      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010864:	2310      	movs	r3, #16
 8010866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801086a:	e07a      	b.n	8010962 <UART_SetConfig+0x5a6>
 801086c:	2320      	movs	r3, #32
 801086e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010872:	e076      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010874:	2340      	movs	r3, #64	@ 0x40
 8010876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801087a:	e072      	b.n	8010962 <UART_SetConfig+0x5a6>
 801087c:	2380      	movs	r3, #128	@ 0x80
 801087e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010882:	e06e      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010884:	697b      	ldr	r3, [r7, #20]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	4a75      	ldr	r2, [pc, #468]	@ (8010a60 <UART_SetConfig+0x6a4>)
 801088a:	4293      	cmp	r3, r2
 801088c:	d130      	bne.n	80108f0 <UART_SetConfig+0x534>
 801088e:	4b72      	ldr	r3, [pc, #456]	@ (8010a58 <UART_SetConfig+0x69c>)
 8010890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010892:	f003 0307 	and.w	r3, r3, #7
 8010896:	2b05      	cmp	r3, #5
 8010898:	d826      	bhi.n	80108e8 <UART_SetConfig+0x52c>
 801089a:	a201      	add	r2, pc, #4	@ (adr r2, 80108a0 <UART_SetConfig+0x4e4>)
 801089c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108a0:	080108b9 	.word	0x080108b9
 80108a4:	080108c1 	.word	0x080108c1
 80108a8:	080108c9 	.word	0x080108c9
 80108ac:	080108d1 	.word	0x080108d1
 80108b0:	080108d9 	.word	0x080108d9
 80108b4:	080108e1 	.word	0x080108e1
 80108b8:	2300      	movs	r3, #0
 80108ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108be:	e050      	b.n	8010962 <UART_SetConfig+0x5a6>
 80108c0:	2304      	movs	r3, #4
 80108c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108c6:	e04c      	b.n	8010962 <UART_SetConfig+0x5a6>
 80108c8:	2308      	movs	r3, #8
 80108ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108ce:	e048      	b.n	8010962 <UART_SetConfig+0x5a6>
 80108d0:	2310      	movs	r3, #16
 80108d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108d6:	e044      	b.n	8010962 <UART_SetConfig+0x5a6>
 80108d8:	2320      	movs	r3, #32
 80108da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108de:	e040      	b.n	8010962 <UART_SetConfig+0x5a6>
 80108e0:	2340      	movs	r3, #64	@ 0x40
 80108e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108e6:	e03c      	b.n	8010962 <UART_SetConfig+0x5a6>
 80108e8:	2380      	movs	r3, #128	@ 0x80
 80108ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108ee:	e038      	b.n	8010962 <UART_SetConfig+0x5a6>
 80108f0:	697b      	ldr	r3, [r7, #20]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	4a5b      	ldr	r2, [pc, #364]	@ (8010a64 <UART_SetConfig+0x6a8>)
 80108f6:	4293      	cmp	r3, r2
 80108f8:	d130      	bne.n	801095c <UART_SetConfig+0x5a0>
 80108fa:	4b57      	ldr	r3, [pc, #348]	@ (8010a58 <UART_SetConfig+0x69c>)
 80108fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80108fe:	f003 0307 	and.w	r3, r3, #7
 8010902:	2b05      	cmp	r3, #5
 8010904:	d826      	bhi.n	8010954 <UART_SetConfig+0x598>
 8010906:	a201      	add	r2, pc, #4	@ (adr r2, 801090c <UART_SetConfig+0x550>)
 8010908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801090c:	08010925 	.word	0x08010925
 8010910:	0801092d 	.word	0x0801092d
 8010914:	08010935 	.word	0x08010935
 8010918:	0801093d 	.word	0x0801093d
 801091c:	08010945 	.word	0x08010945
 8010920:	0801094d 	.word	0x0801094d
 8010924:	2302      	movs	r3, #2
 8010926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801092a:	e01a      	b.n	8010962 <UART_SetConfig+0x5a6>
 801092c:	2304      	movs	r3, #4
 801092e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010932:	e016      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010934:	2308      	movs	r3, #8
 8010936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801093a:	e012      	b.n	8010962 <UART_SetConfig+0x5a6>
 801093c:	2310      	movs	r3, #16
 801093e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010942:	e00e      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010944:	2320      	movs	r3, #32
 8010946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801094a:	e00a      	b.n	8010962 <UART_SetConfig+0x5a6>
 801094c:	2340      	movs	r3, #64	@ 0x40
 801094e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010952:	e006      	b.n	8010962 <UART_SetConfig+0x5a6>
 8010954:	2380      	movs	r3, #128	@ 0x80
 8010956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801095a:	e002      	b.n	8010962 <UART_SetConfig+0x5a6>
 801095c:	2380      	movs	r3, #128	@ 0x80
 801095e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	4a3f      	ldr	r2, [pc, #252]	@ (8010a64 <UART_SetConfig+0x6a8>)
 8010968:	4293      	cmp	r3, r2
 801096a:	f040 80f8 	bne.w	8010b5e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801096e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010972:	2b20      	cmp	r3, #32
 8010974:	dc46      	bgt.n	8010a04 <UART_SetConfig+0x648>
 8010976:	2b02      	cmp	r3, #2
 8010978:	f2c0 8082 	blt.w	8010a80 <UART_SetConfig+0x6c4>
 801097c:	3b02      	subs	r3, #2
 801097e:	2b1e      	cmp	r3, #30
 8010980:	d87e      	bhi.n	8010a80 <UART_SetConfig+0x6c4>
 8010982:	a201      	add	r2, pc, #4	@ (adr r2, 8010988 <UART_SetConfig+0x5cc>)
 8010984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010988:	08010a0b 	.word	0x08010a0b
 801098c:	08010a81 	.word	0x08010a81
 8010990:	08010a13 	.word	0x08010a13
 8010994:	08010a81 	.word	0x08010a81
 8010998:	08010a81 	.word	0x08010a81
 801099c:	08010a81 	.word	0x08010a81
 80109a0:	08010a23 	.word	0x08010a23
 80109a4:	08010a81 	.word	0x08010a81
 80109a8:	08010a81 	.word	0x08010a81
 80109ac:	08010a81 	.word	0x08010a81
 80109b0:	08010a81 	.word	0x08010a81
 80109b4:	08010a81 	.word	0x08010a81
 80109b8:	08010a81 	.word	0x08010a81
 80109bc:	08010a81 	.word	0x08010a81
 80109c0:	08010a33 	.word	0x08010a33
 80109c4:	08010a81 	.word	0x08010a81
 80109c8:	08010a81 	.word	0x08010a81
 80109cc:	08010a81 	.word	0x08010a81
 80109d0:	08010a81 	.word	0x08010a81
 80109d4:	08010a81 	.word	0x08010a81
 80109d8:	08010a81 	.word	0x08010a81
 80109dc:	08010a81 	.word	0x08010a81
 80109e0:	08010a81 	.word	0x08010a81
 80109e4:	08010a81 	.word	0x08010a81
 80109e8:	08010a81 	.word	0x08010a81
 80109ec:	08010a81 	.word	0x08010a81
 80109f0:	08010a81 	.word	0x08010a81
 80109f4:	08010a81 	.word	0x08010a81
 80109f8:	08010a81 	.word	0x08010a81
 80109fc:	08010a81 	.word	0x08010a81
 8010a00:	08010a73 	.word	0x08010a73
 8010a04:	2b40      	cmp	r3, #64	@ 0x40
 8010a06:	d037      	beq.n	8010a78 <UART_SetConfig+0x6bc>
 8010a08:	e03a      	b.n	8010a80 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010a0a:	f7fd fdc7 	bl	800e59c <HAL_RCCEx_GetD3PCLK1Freq>
 8010a0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010a10:	e03c      	b.n	8010a8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010a16:	4618      	mov	r0, r3
 8010a18:	f7fd fdd6 	bl	800e5c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a20:	e034      	b.n	8010a8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010a22:	f107 0318 	add.w	r3, r7, #24
 8010a26:	4618      	mov	r0, r3
 8010a28:	f7fd ff22 	bl	800e870 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010a2c:	69fb      	ldr	r3, [r7, #28]
 8010a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a30:	e02c      	b.n	8010a8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010a32:	4b09      	ldr	r3, [pc, #36]	@ (8010a58 <UART_SetConfig+0x69c>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	f003 0320 	and.w	r3, r3, #32
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d016      	beq.n	8010a6c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010a3e:	4b06      	ldr	r3, [pc, #24]	@ (8010a58 <UART_SetConfig+0x69c>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	08db      	lsrs	r3, r3, #3
 8010a44:	f003 0303 	and.w	r3, r3, #3
 8010a48:	4a07      	ldr	r2, [pc, #28]	@ (8010a68 <UART_SetConfig+0x6ac>)
 8010a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8010a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010a50:	e01c      	b.n	8010a8c <UART_SetConfig+0x6d0>
 8010a52:	bf00      	nop
 8010a54:	40011400 	.word	0x40011400
 8010a58:	58024400 	.word	0x58024400
 8010a5c:	40007800 	.word	0x40007800
 8010a60:	40007c00 	.word	0x40007c00
 8010a64:	58000c00 	.word	0x58000c00
 8010a68:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010a6c:	4b9d      	ldr	r3, [pc, #628]	@ (8010ce4 <UART_SetConfig+0x928>)
 8010a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a70:	e00c      	b.n	8010a8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010a72:	4b9d      	ldr	r3, [pc, #628]	@ (8010ce8 <UART_SetConfig+0x92c>)
 8010a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a76:	e009      	b.n	8010a8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010a78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a7e:	e005      	b.n	8010a8c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010a80:	2300      	movs	r3, #0
 8010a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010a84:	2301      	movs	r3, #1
 8010a86:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010a8a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	f000 81de 	beq.w	8010e50 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010a94:	697b      	ldr	r3, [r7, #20]
 8010a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a98:	4a94      	ldr	r2, [pc, #592]	@ (8010cec <UART_SetConfig+0x930>)
 8010a9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010aa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8010aa6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	685a      	ldr	r2, [r3, #4]
 8010aac:	4613      	mov	r3, r2
 8010aae:	005b      	lsls	r3, r3, #1
 8010ab0:	4413      	add	r3, r2
 8010ab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	d305      	bcc.n	8010ac4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	685b      	ldr	r3, [r3, #4]
 8010abc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010abe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d903      	bls.n	8010acc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010aca:	e1c1      	b.n	8010e50 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ace:	2200      	movs	r2, #0
 8010ad0:	60bb      	str	r3, [r7, #8]
 8010ad2:	60fa      	str	r2, [r7, #12]
 8010ad4:	697b      	ldr	r3, [r7, #20]
 8010ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ad8:	4a84      	ldr	r2, [pc, #528]	@ (8010cec <UART_SetConfig+0x930>)
 8010ada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ade:	b29b      	uxth	r3, r3
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	603b      	str	r3, [r7, #0]
 8010ae4:	607a      	str	r2, [r7, #4]
 8010ae6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010aea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010aee:	f7ef fc4f 	bl	8000390 <__aeabi_uldivmod>
 8010af2:	4602      	mov	r2, r0
 8010af4:	460b      	mov	r3, r1
 8010af6:	4610      	mov	r0, r2
 8010af8:	4619      	mov	r1, r3
 8010afa:	f04f 0200 	mov.w	r2, #0
 8010afe:	f04f 0300 	mov.w	r3, #0
 8010b02:	020b      	lsls	r3, r1, #8
 8010b04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010b08:	0202      	lsls	r2, r0, #8
 8010b0a:	6979      	ldr	r1, [r7, #20]
 8010b0c:	6849      	ldr	r1, [r1, #4]
 8010b0e:	0849      	lsrs	r1, r1, #1
 8010b10:	2000      	movs	r0, #0
 8010b12:	460c      	mov	r4, r1
 8010b14:	4605      	mov	r5, r0
 8010b16:	eb12 0804 	adds.w	r8, r2, r4
 8010b1a:	eb43 0905 	adc.w	r9, r3, r5
 8010b1e:	697b      	ldr	r3, [r7, #20]
 8010b20:	685b      	ldr	r3, [r3, #4]
 8010b22:	2200      	movs	r2, #0
 8010b24:	469a      	mov	sl, r3
 8010b26:	4693      	mov	fp, r2
 8010b28:	4652      	mov	r2, sl
 8010b2a:	465b      	mov	r3, fp
 8010b2c:	4640      	mov	r0, r8
 8010b2e:	4649      	mov	r1, r9
 8010b30:	f7ef fc2e 	bl	8000390 <__aeabi_uldivmod>
 8010b34:	4602      	mov	r2, r0
 8010b36:	460b      	mov	r3, r1
 8010b38:	4613      	mov	r3, r2
 8010b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010b42:	d308      	bcc.n	8010b56 <UART_SetConfig+0x79a>
 8010b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010b4a:	d204      	bcs.n	8010b56 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010b52:	60da      	str	r2, [r3, #12]
 8010b54:	e17c      	b.n	8010e50 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8010b56:	2301      	movs	r3, #1
 8010b58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010b5c:	e178      	b.n	8010e50 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	69db      	ldr	r3, [r3, #28]
 8010b62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010b66:	f040 80c5 	bne.w	8010cf4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010b6a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010b6e:	2b20      	cmp	r3, #32
 8010b70:	dc48      	bgt.n	8010c04 <UART_SetConfig+0x848>
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	db7b      	blt.n	8010c6e <UART_SetConfig+0x8b2>
 8010b76:	2b20      	cmp	r3, #32
 8010b78:	d879      	bhi.n	8010c6e <UART_SetConfig+0x8b2>
 8010b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8010b80 <UART_SetConfig+0x7c4>)
 8010b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b80:	08010c0b 	.word	0x08010c0b
 8010b84:	08010c13 	.word	0x08010c13
 8010b88:	08010c6f 	.word	0x08010c6f
 8010b8c:	08010c6f 	.word	0x08010c6f
 8010b90:	08010c1b 	.word	0x08010c1b
 8010b94:	08010c6f 	.word	0x08010c6f
 8010b98:	08010c6f 	.word	0x08010c6f
 8010b9c:	08010c6f 	.word	0x08010c6f
 8010ba0:	08010c2b 	.word	0x08010c2b
 8010ba4:	08010c6f 	.word	0x08010c6f
 8010ba8:	08010c6f 	.word	0x08010c6f
 8010bac:	08010c6f 	.word	0x08010c6f
 8010bb0:	08010c6f 	.word	0x08010c6f
 8010bb4:	08010c6f 	.word	0x08010c6f
 8010bb8:	08010c6f 	.word	0x08010c6f
 8010bbc:	08010c6f 	.word	0x08010c6f
 8010bc0:	08010c3b 	.word	0x08010c3b
 8010bc4:	08010c6f 	.word	0x08010c6f
 8010bc8:	08010c6f 	.word	0x08010c6f
 8010bcc:	08010c6f 	.word	0x08010c6f
 8010bd0:	08010c6f 	.word	0x08010c6f
 8010bd4:	08010c6f 	.word	0x08010c6f
 8010bd8:	08010c6f 	.word	0x08010c6f
 8010bdc:	08010c6f 	.word	0x08010c6f
 8010be0:	08010c6f 	.word	0x08010c6f
 8010be4:	08010c6f 	.word	0x08010c6f
 8010be8:	08010c6f 	.word	0x08010c6f
 8010bec:	08010c6f 	.word	0x08010c6f
 8010bf0:	08010c6f 	.word	0x08010c6f
 8010bf4:	08010c6f 	.word	0x08010c6f
 8010bf8:	08010c6f 	.word	0x08010c6f
 8010bfc:	08010c6f 	.word	0x08010c6f
 8010c00:	08010c61 	.word	0x08010c61
 8010c04:	2b40      	cmp	r3, #64	@ 0x40
 8010c06:	d02e      	beq.n	8010c66 <UART_SetConfig+0x8aa>
 8010c08:	e031      	b.n	8010c6e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010c0a:	f7fc fa91 	bl	800d130 <HAL_RCC_GetPCLK1Freq>
 8010c0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010c10:	e033      	b.n	8010c7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010c12:	f7fc faa3 	bl	800d15c <HAL_RCC_GetPCLK2Freq>
 8010c16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010c18:	e02f      	b.n	8010c7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010c1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7fd fcd2 	bl	800e5c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c28:	e027      	b.n	8010c7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010c2a:	f107 0318 	add.w	r3, r7, #24
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f7fd fe1e 	bl	800e870 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010c34:	69fb      	ldr	r3, [r7, #28]
 8010c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c38:	e01f      	b.n	8010c7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8010cf0 <UART_SetConfig+0x934>)
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	f003 0320 	and.w	r3, r3, #32
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d009      	beq.n	8010c5a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010c46:	4b2a      	ldr	r3, [pc, #168]	@ (8010cf0 <UART_SetConfig+0x934>)
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	08db      	lsrs	r3, r3, #3
 8010c4c:	f003 0303 	and.w	r3, r3, #3
 8010c50:	4a24      	ldr	r2, [pc, #144]	@ (8010ce4 <UART_SetConfig+0x928>)
 8010c52:	fa22 f303 	lsr.w	r3, r2, r3
 8010c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010c58:	e00f      	b.n	8010c7a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010c5a:	4b22      	ldr	r3, [pc, #136]	@ (8010ce4 <UART_SetConfig+0x928>)
 8010c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c5e:	e00c      	b.n	8010c7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010c60:	4b21      	ldr	r3, [pc, #132]	@ (8010ce8 <UART_SetConfig+0x92c>)
 8010c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c64:	e009      	b.n	8010c7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c6c:	e005      	b.n	8010c7a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010c72:	2301      	movs	r3, #1
 8010c74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010c78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	f000 80e7 	beq.w	8010e50 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010c82:	697b      	ldr	r3, [r7, #20]
 8010c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c86:	4a19      	ldr	r2, [pc, #100]	@ (8010cec <UART_SetConfig+0x930>)
 8010c88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c90:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c94:	005a      	lsls	r2, r3, #1
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	685b      	ldr	r3, [r3, #4]
 8010c9a:	085b      	lsrs	r3, r3, #1
 8010c9c:	441a      	add	r2, r3
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	685b      	ldr	r3, [r3, #4]
 8010ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010caa:	2b0f      	cmp	r3, #15
 8010cac:	d916      	bls.n	8010cdc <UART_SetConfig+0x920>
 8010cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010cb4:	d212      	bcs.n	8010cdc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cb8:	b29b      	uxth	r3, r3
 8010cba:	f023 030f 	bic.w	r3, r3, #15
 8010cbe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cc2:	085b      	lsrs	r3, r3, #1
 8010cc4:	b29b      	uxth	r3, r3
 8010cc6:	f003 0307 	and.w	r3, r3, #7
 8010cca:	b29a      	uxth	r2, r3
 8010ccc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010cce:	4313      	orrs	r3, r2
 8010cd0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010cd8:	60da      	str	r2, [r3, #12]
 8010cda:	e0b9      	b.n	8010e50 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010cdc:	2301      	movs	r3, #1
 8010cde:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010ce2:	e0b5      	b.n	8010e50 <UART_SetConfig+0xa94>
 8010ce4:	03d09000 	.word	0x03d09000
 8010ce8:	003d0900 	.word	0x003d0900
 8010cec:	080163a0 	.word	0x080163a0
 8010cf0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8010cf4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010cf8:	2b20      	cmp	r3, #32
 8010cfa:	dc49      	bgt.n	8010d90 <UART_SetConfig+0x9d4>
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	db7c      	blt.n	8010dfa <UART_SetConfig+0xa3e>
 8010d00:	2b20      	cmp	r3, #32
 8010d02:	d87a      	bhi.n	8010dfa <UART_SetConfig+0xa3e>
 8010d04:	a201      	add	r2, pc, #4	@ (adr r2, 8010d0c <UART_SetConfig+0x950>)
 8010d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d0a:	bf00      	nop
 8010d0c:	08010d97 	.word	0x08010d97
 8010d10:	08010d9f 	.word	0x08010d9f
 8010d14:	08010dfb 	.word	0x08010dfb
 8010d18:	08010dfb 	.word	0x08010dfb
 8010d1c:	08010da7 	.word	0x08010da7
 8010d20:	08010dfb 	.word	0x08010dfb
 8010d24:	08010dfb 	.word	0x08010dfb
 8010d28:	08010dfb 	.word	0x08010dfb
 8010d2c:	08010db7 	.word	0x08010db7
 8010d30:	08010dfb 	.word	0x08010dfb
 8010d34:	08010dfb 	.word	0x08010dfb
 8010d38:	08010dfb 	.word	0x08010dfb
 8010d3c:	08010dfb 	.word	0x08010dfb
 8010d40:	08010dfb 	.word	0x08010dfb
 8010d44:	08010dfb 	.word	0x08010dfb
 8010d48:	08010dfb 	.word	0x08010dfb
 8010d4c:	08010dc7 	.word	0x08010dc7
 8010d50:	08010dfb 	.word	0x08010dfb
 8010d54:	08010dfb 	.word	0x08010dfb
 8010d58:	08010dfb 	.word	0x08010dfb
 8010d5c:	08010dfb 	.word	0x08010dfb
 8010d60:	08010dfb 	.word	0x08010dfb
 8010d64:	08010dfb 	.word	0x08010dfb
 8010d68:	08010dfb 	.word	0x08010dfb
 8010d6c:	08010dfb 	.word	0x08010dfb
 8010d70:	08010dfb 	.word	0x08010dfb
 8010d74:	08010dfb 	.word	0x08010dfb
 8010d78:	08010dfb 	.word	0x08010dfb
 8010d7c:	08010dfb 	.word	0x08010dfb
 8010d80:	08010dfb 	.word	0x08010dfb
 8010d84:	08010dfb 	.word	0x08010dfb
 8010d88:	08010dfb 	.word	0x08010dfb
 8010d8c:	08010ded 	.word	0x08010ded
 8010d90:	2b40      	cmp	r3, #64	@ 0x40
 8010d92:	d02e      	beq.n	8010df2 <UART_SetConfig+0xa36>
 8010d94:	e031      	b.n	8010dfa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010d96:	f7fc f9cb 	bl	800d130 <HAL_RCC_GetPCLK1Freq>
 8010d9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010d9c:	e033      	b.n	8010e06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d9e:	f7fc f9dd 	bl	800d15c <HAL_RCC_GetPCLK2Freq>
 8010da2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010da4:	e02f      	b.n	8010e06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010da6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7fd fc0c 	bl	800e5c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010db4:	e027      	b.n	8010e06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010db6:	f107 0318 	add.w	r3, r7, #24
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7fd fd58 	bl	800e870 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010dc0:	69fb      	ldr	r3, [r7, #28]
 8010dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010dc4:	e01f      	b.n	8010e06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8010e7c <UART_SetConfig+0xac0>)
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	f003 0320 	and.w	r3, r3, #32
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d009      	beq.n	8010de6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8010e7c <UART_SetConfig+0xac0>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	08db      	lsrs	r3, r3, #3
 8010dd8:	f003 0303 	and.w	r3, r3, #3
 8010ddc:	4a28      	ldr	r2, [pc, #160]	@ (8010e80 <UART_SetConfig+0xac4>)
 8010dde:	fa22 f303 	lsr.w	r3, r2, r3
 8010de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010de4:	e00f      	b.n	8010e06 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8010de6:	4b26      	ldr	r3, [pc, #152]	@ (8010e80 <UART_SetConfig+0xac4>)
 8010de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010dea:	e00c      	b.n	8010e06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010dec:	4b25      	ldr	r3, [pc, #148]	@ (8010e84 <UART_SetConfig+0xac8>)
 8010dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010df0:	e009      	b.n	8010e06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010df2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010df8:	e005      	b.n	8010e06 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010dfe:	2301      	movs	r3, #1
 8010e00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010e04:	bf00      	nop
    }

    if (pclk != 0U)
 8010e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d021      	beq.n	8010e50 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e10:	4a1d      	ldr	r2, [pc, #116]	@ (8010e88 <UART_SetConfig+0xacc>)
 8010e12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e16:	461a      	mov	r2, r3
 8010e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8010e1e:	697b      	ldr	r3, [r7, #20]
 8010e20:	685b      	ldr	r3, [r3, #4]
 8010e22:	085b      	lsrs	r3, r3, #1
 8010e24:	441a      	add	r2, r3
 8010e26:	697b      	ldr	r3, [r7, #20]
 8010e28:	685b      	ldr	r3, [r3, #4]
 8010e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e32:	2b0f      	cmp	r3, #15
 8010e34:	d909      	bls.n	8010e4a <UART_SetConfig+0xa8e>
 8010e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010e3c:	d205      	bcs.n	8010e4a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e40:	b29a      	uxth	r2, r3
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	60da      	str	r2, [r3, #12]
 8010e48:	e002      	b.n	8010e50 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010e50:	697b      	ldr	r3, [r7, #20]
 8010e52:	2201      	movs	r2, #1
 8010e54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	2201      	movs	r2, #1
 8010e5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010e60:	697b      	ldr	r3, [r7, #20]
 8010e62:	2200      	movs	r2, #0
 8010e64:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010e66:	697b      	ldr	r3, [r7, #20]
 8010e68:	2200      	movs	r2, #0
 8010e6a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010e6c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3748      	adds	r7, #72	@ 0x48
 8010e74:	46bd      	mov	sp, r7
 8010e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010e7a:	bf00      	nop
 8010e7c:	58024400 	.word	0x58024400
 8010e80:	03d09000 	.word	0x03d09000
 8010e84:	003d0900 	.word	0x003d0900
 8010e88:	080163a0 	.word	0x080163a0

08010e8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010e8c:	b480      	push	{r7}
 8010e8e:	b083      	sub	sp, #12
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e98:	f003 0308 	and.w	r3, r3, #8
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d00a      	beq.n	8010eb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	685b      	ldr	r3, [r3, #4]
 8010ea6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	430a      	orrs	r2, r1
 8010eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010eba:	f003 0301 	and.w	r3, r3, #1
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d00a      	beq.n	8010ed8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	430a      	orrs	r2, r1
 8010ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010edc:	f003 0302 	and.w	r3, r3, #2
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d00a      	beq.n	8010efa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	685b      	ldr	r3, [r3, #4]
 8010eea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	430a      	orrs	r2, r1
 8010ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010efe:	f003 0304 	and.w	r3, r3, #4
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d00a      	beq.n	8010f1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	685b      	ldr	r3, [r3, #4]
 8010f0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	430a      	orrs	r2, r1
 8010f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f20:	f003 0310 	and.w	r3, r3, #16
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d00a      	beq.n	8010f3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	689b      	ldr	r3, [r3, #8]
 8010f2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	430a      	orrs	r2, r1
 8010f3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f42:	f003 0320 	and.w	r3, r3, #32
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d00a      	beq.n	8010f60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	689b      	ldr	r3, [r3, #8]
 8010f50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	430a      	orrs	r2, r1
 8010f5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d01a      	beq.n	8010fa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	685b      	ldr	r3, [r3, #4]
 8010f72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	430a      	orrs	r2, r1
 8010f80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010f8a:	d10a      	bne.n	8010fa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	430a      	orrs	r2, r1
 8010fa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d00a      	beq.n	8010fc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	685b      	ldr	r3, [r3, #4]
 8010fb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	430a      	orrs	r2, r1
 8010fc2:	605a      	str	r2, [r3, #4]
  }
}
 8010fc4:	bf00      	nop
 8010fc6:	370c      	adds	r7, #12
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fce:	4770      	bx	lr

08010fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b098      	sub	sp, #96	@ 0x60
 8010fd4:	af02      	add	r7, sp, #8
 8010fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2200      	movs	r2, #0
 8010fdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010fe0:	f7f1 fa64 	bl	80024ac <HAL_GetTick>
 8010fe4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	f003 0308 	and.w	r3, r3, #8
 8010ff0:	2b08      	cmp	r3, #8
 8010ff2:	d12f      	bne.n	8011054 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ff4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010ff8:	9300      	str	r3, [sp, #0]
 8010ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f000 f88e 	bl	8011124 <UART_WaitOnFlagUntilTimeout>
 8011008:	4603      	mov	r3, r0
 801100a:	2b00      	cmp	r3, #0
 801100c:	d022      	beq.n	8011054 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011016:	e853 3f00 	ldrex	r3, [r3]
 801101a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801101c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801101e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011022:	653b      	str	r3, [r7, #80]	@ 0x50
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	461a      	mov	r2, r3
 801102a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801102c:	647b      	str	r3, [r7, #68]	@ 0x44
 801102e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011030:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011032:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011034:	e841 2300 	strex	r3, r2, [r1]
 8011038:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801103a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801103c:	2b00      	cmp	r3, #0
 801103e:	d1e6      	bne.n	801100e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2220      	movs	r2, #32
 8011044:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2200      	movs	r2, #0
 801104c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011050:	2303      	movs	r3, #3
 8011052:	e063      	b.n	801111c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	f003 0304 	and.w	r3, r3, #4
 801105e:	2b04      	cmp	r3, #4
 8011060:	d149      	bne.n	80110f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011062:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011066:	9300      	str	r3, [sp, #0]
 8011068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801106a:	2200      	movs	r2, #0
 801106c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f000 f857 	bl	8011124 <UART_WaitOnFlagUntilTimeout>
 8011076:	4603      	mov	r3, r0
 8011078:	2b00      	cmp	r3, #0
 801107a:	d03c      	beq.n	80110f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011084:	e853 3f00 	ldrex	r3, [r3]
 8011088:	623b      	str	r3, [r7, #32]
   return(result);
 801108a:	6a3b      	ldr	r3, [r7, #32]
 801108c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011090:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	461a      	mov	r2, r3
 8011098:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801109a:	633b      	str	r3, [r7, #48]	@ 0x30
 801109c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801109e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80110a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80110a2:	e841 2300 	strex	r3, r2, [r1]
 80110a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80110a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d1e6      	bne.n	801107c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	3308      	adds	r3, #8
 80110b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110b6:	693b      	ldr	r3, [r7, #16]
 80110b8:	e853 3f00 	ldrex	r3, [r3]
 80110bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	f023 0301 	bic.w	r3, r3, #1
 80110c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	3308      	adds	r3, #8
 80110cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80110ce:	61fa      	str	r2, [r7, #28]
 80110d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110d2:	69b9      	ldr	r1, [r7, #24]
 80110d4:	69fa      	ldr	r2, [r7, #28]
 80110d6:	e841 2300 	strex	r3, r2, [r1]
 80110da:	617b      	str	r3, [r7, #20]
   return(result);
 80110dc:	697b      	ldr	r3, [r7, #20]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d1e5      	bne.n	80110ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	2220      	movs	r2, #32
 80110e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2200      	movs	r2, #0
 80110ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80110f2:	2303      	movs	r3, #3
 80110f4:	e012      	b.n	801111c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	2220      	movs	r2, #32
 80110fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	2220      	movs	r2, #32
 8011102:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2200      	movs	r2, #0
 801110a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2200      	movs	r2, #0
 8011110:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	2200      	movs	r2, #0
 8011116:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801111a:	2300      	movs	r3, #0
}
 801111c:	4618      	mov	r0, r3
 801111e:	3758      	adds	r7, #88	@ 0x58
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}

08011124 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b084      	sub	sp, #16
 8011128:	af00      	add	r7, sp, #0
 801112a:	60f8      	str	r0, [r7, #12]
 801112c:	60b9      	str	r1, [r7, #8]
 801112e:	603b      	str	r3, [r7, #0]
 8011130:	4613      	mov	r3, r2
 8011132:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011134:	e04f      	b.n	80111d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011136:	69bb      	ldr	r3, [r7, #24]
 8011138:	f1b3 3fff 	cmp.w	r3, #4294967295
 801113c:	d04b      	beq.n	80111d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801113e:	f7f1 f9b5 	bl	80024ac <HAL_GetTick>
 8011142:	4602      	mov	r2, r0
 8011144:	683b      	ldr	r3, [r7, #0]
 8011146:	1ad3      	subs	r3, r2, r3
 8011148:	69ba      	ldr	r2, [r7, #24]
 801114a:	429a      	cmp	r2, r3
 801114c:	d302      	bcc.n	8011154 <UART_WaitOnFlagUntilTimeout+0x30>
 801114e:	69bb      	ldr	r3, [r7, #24]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d101      	bne.n	8011158 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011154:	2303      	movs	r3, #3
 8011156:	e04e      	b.n	80111f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	f003 0304 	and.w	r3, r3, #4
 8011162:	2b00      	cmp	r3, #0
 8011164:	d037      	beq.n	80111d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	2b80      	cmp	r3, #128	@ 0x80
 801116a:	d034      	beq.n	80111d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	2b40      	cmp	r3, #64	@ 0x40
 8011170:	d031      	beq.n	80111d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	69db      	ldr	r3, [r3, #28]
 8011178:	f003 0308 	and.w	r3, r3, #8
 801117c:	2b08      	cmp	r3, #8
 801117e:	d110      	bne.n	80111a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	2208      	movs	r2, #8
 8011186:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011188:	68f8      	ldr	r0, [r7, #12]
 801118a:	f000 f839 	bl	8011200 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	2208      	movs	r2, #8
 8011192:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	2200      	movs	r2, #0
 801119a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801119e:	2301      	movs	r3, #1
 80111a0:	e029      	b.n	80111f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	69db      	ldr	r3, [r3, #28]
 80111a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80111ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80111b0:	d111      	bne.n	80111d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80111ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80111bc:	68f8      	ldr	r0, [r7, #12]
 80111be:	f000 f81f 	bl	8011200 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	2220      	movs	r2, #32
 80111c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	2200      	movs	r2, #0
 80111ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80111d2:	2303      	movs	r3, #3
 80111d4:	e00f      	b.n	80111f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	69da      	ldr	r2, [r3, #28]
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	4013      	ands	r3, r2
 80111e0:	68ba      	ldr	r2, [r7, #8]
 80111e2:	429a      	cmp	r2, r3
 80111e4:	bf0c      	ite	eq
 80111e6:	2301      	moveq	r3, #1
 80111e8:	2300      	movne	r3, #0
 80111ea:	b2db      	uxtb	r3, r3
 80111ec:	461a      	mov	r2, r3
 80111ee:	79fb      	ldrb	r3, [r7, #7]
 80111f0:	429a      	cmp	r2, r3
 80111f2:	d0a0      	beq.n	8011136 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80111f4:	2300      	movs	r3, #0
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	3710      	adds	r7, #16
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}
	...

08011200 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011200:	b480      	push	{r7}
 8011202:	b095      	sub	sp, #84	@ 0x54
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801120e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011210:	e853 3f00 	ldrex	r3, [r3]
 8011214:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011218:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801121c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	461a      	mov	r2, r3
 8011224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011226:	643b      	str	r3, [r7, #64]	@ 0x40
 8011228:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801122a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801122c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801122e:	e841 2300 	strex	r3, r2, [r1]
 8011232:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011236:	2b00      	cmp	r3, #0
 8011238:	d1e6      	bne.n	8011208 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	3308      	adds	r3, #8
 8011240:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011242:	6a3b      	ldr	r3, [r7, #32]
 8011244:	e853 3f00 	ldrex	r3, [r3]
 8011248:	61fb      	str	r3, [r7, #28]
   return(result);
 801124a:	69fa      	ldr	r2, [r7, #28]
 801124c:	4b1e      	ldr	r3, [pc, #120]	@ (80112c8 <UART_EndRxTransfer+0xc8>)
 801124e:	4013      	ands	r3, r2
 8011250:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	3308      	adds	r3, #8
 8011258:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801125a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801125c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801125e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011260:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011262:	e841 2300 	strex	r3, r2, [r1]
 8011266:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801126a:	2b00      	cmp	r3, #0
 801126c:	d1e5      	bne.n	801123a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011272:	2b01      	cmp	r3, #1
 8011274:	d118      	bne.n	80112a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	e853 3f00 	ldrex	r3, [r3]
 8011282:	60bb      	str	r3, [r7, #8]
   return(result);
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	f023 0310 	bic.w	r3, r3, #16
 801128a:	647b      	str	r3, [r7, #68]	@ 0x44
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	461a      	mov	r2, r3
 8011292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011294:	61bb      	str	r3, [r7, #24]
 8011296:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011298:	6979      	ldr	r1, [r7, #20]
 801129a:	69ba      	ldr	r2, [r7, #24]
 801129c:	e841 2300 	strex	r3, r2, [r1]
 80112a0:	613b      	str	r3, [r7, #16]
   return(result);
 80112a2:	693b      	ldr	r3, [r7, #16]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d1e6      	bne.n	8011276 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	2220      	movs	r2, #32
 80112ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2200      	movs	r2, #0
 80112b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2200      	movs	r2, #0
 80112ba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80112bc:	bf00      	nop
 80112be:	3754      	adds	r7, #84	@ 0x54
 80112c0:	46bd      	mov	sp, r7
 80112c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c6:	4770      	bx	lr
 80112c8:	effffffe 	.word	0xeffffffe

080112cc <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b084      	sub	sp, #16
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80112da:	2b01      	cmp	r3, #1
 80112dc:	d101      	bne.n	80112e2 <HAL_UARTEx_EnableFifoMode+0x16>
 80112de:	2302      	movs	r3, #2
 80112e0:	e02b      	b.n	801133a <HAL_UARTEx_EnableFifoMode+0x6e>
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2201      	movs	r2, #1
 80112e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2224      	movs	r2, #36	@ 0x24
 80112ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	681a      	ldr	r2, [r3, #0]
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	f022 0201 	bic.w	r2, r2, #1
 8011308:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011310:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8011318:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	68fa      	ldr	r2, [r7, #12]
 8011320:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011322:	6878      	ldr	r0, [r7, #4]
 8011324:	f000 f88a 	bl	801143c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2220      	movs	r2, #32
 801132c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2200      	movs	r2, #0
 8011334:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011338:	2300      	movs	r3, #0
}
 801133a:	4618      	mov	r0, r3
 801133c:	3710      	adds	r7, #16
 801133e:	46bd      	mov	sp, r7
 8011340:	bd80      	pop	{r7, pc}

08011342 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011342:	b580      	push	{r7, lr}
 8011344:	b084      	sub	sp, #16
 8011346:	af00      	add	r7, sp, #0
 8011348:	6078      	str	r0, [r7, #4]
 801134a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011352:	2b01      	cmp	r3, #1
 8011354:	d101      	bne.n	801135a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011356:	2302      	movs	r3, #2
 8011358:	e02d      	b.n	80113b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	2201      	movs	r2, #1
 801135e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2224      	movs	r2, #36	@ 0x24
 8011366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	681a      	ldr	r2, [r3, #0]
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	f022 0201 	bic.w	r2, r2, #1
 8011380:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	689b      	ldr	r3, [r3, #8]
 8011388:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	683a      	ldr	r2, [r7, #0]
 8011392:	430a      	orrs	r2, r1
 8011394:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f000 f850 	bl	801143c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	68fa      	ldr	r2, [r7, #12]
 80113a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2220      	movs	r2, #32
 80113a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	2200      	movs	r2, #0
 80113b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80113b4:	2300      	movs	r3, #0
}
 80113b6:	4618      	mov	r0, r3
 80113b8:	3710      	adds	r7, #16
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}

080113be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80113be:	b580      	push	{r7, lr}
 80113c0:	b084      	sub	sp, #16
 80113c2:	af00      	add	r7, sp, #0
 80113c4:	6078      	str	r0, [r7, #4]
 80113c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80113ce:	2b01      	cmp	r3, #1
 80113d0:	d101      	bne.n	80113d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80113d2:	2302      	movs	r3, #2
 80113d4:	e02d      	b.n	8011432 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	2201      	movs	r2, #1
 80113da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	2224      	movs	r2, #36	@ 0x24
 80113e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	681a      	ldr	r2, [r3, #0]
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	f022 0201 	bic.w	r2, r2, #1
 80113fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	689b      	ldr	r3, [r3, #8]
 8011404:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	683a      	ldr	r2, [r7, #0]
 801140e:	430a      	orrs	r2, r1
 8011410:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011412:	6878      	ldr	r0, [r7, #4]
 8011414:	f000 f812 	bl	801143c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	68fa      	ldr	r2, [r7, #12]
 801141e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	2220      	movs	r2, #32
 8011424:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	2200      	movs	r2, #0
 801142c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011430:	2300      	movs	r3, #0
}
 8011432:	4618      	mov	r0, r3
 8011434:	3710      	adds	r7, #16
 8011436:	46bd      	mov	sp, r7
 8011438:	bd80      	pop	{r7, pc}
	...

0801143c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801143c:	b480      	push	{r7}
 801143e:	b085      	sub	sp, #20
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011448:	2b00      	cmp	r3, #0
 801144a:	d108      	bne.n	801145e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	2201      	movs	r2, #1
 8011450:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2201      	movs	r2, #1
 8011458:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801145c:	e031      	b.n	80114c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801145e:	2310      	movs	r3, #16
 8011460:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011462:	2310      	movs	r3, #16
 8011464:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	689b      	ldr	r3, [r3, #8]
 801146c:	0e5b      	lsrs	r3, r3, #25
 801146e:	b2db      	uxtb	r3, r3
 8011470:	f003 0307 	and.w	r3, r3, #7
 8011474:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	689b      	ldr	r3, [r3, #8]
 801147c:	0f5b      	lsrs	r3, r3, #29
 801147e:	b2db      	uxtb	r3, r3
 8011480:	f003 0307 	and.w	r3, r3, #7
 8011484:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011486:	7bbb      	ldrb	r3, [r7, #14]
 8011488:	7b3a      	ldrb	r2, [r7, #12]
 801148a:	4911      	ldr	r1, [pc, #68]	@ (80114d0 <UARTEx_SetNbDataToProcess+0x94>)
 801148c:	5c8a      	ldrb	r2, [r1, r2]
 801148e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011492:	7b3a      	ldrb	r2, [r7, #12]
 8011494:	490f      	ldr	r1, [pc, #60]	@ (80114d4 <UARTEx_SetNbDataToProcess+0x98>)
 8011496:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011498:	fb93 f3f2 	sdiv	r3, r3, r2
 801149c:	b29a      	uxth	r2, r3
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80114a4:	7bfb      	ldrb	r3, [r7, #15]
 80114a6:	7b7a      	ldrb	r2, [r7, #13]
 80114a8:	4909      	ldr	r1, [pc, #36]	@ (80114d0 <UARTEx_SetNbDataToProcess+0x94>)
 80114aa:	5c8a      	ldrb	r2, [r1, r2]
 80114ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80114b0:	7b7a      	ldrb	r2, [r7, #13]
 80114b2:	4908      	ldr	r1, [pc, #32]	@ (80114d4 <UARTEx_SetNbDataToProcess+0x98>)
 80114b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80114b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80114ba:	b29a      	uxth	r2, r3
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80114c2:	bf00      	nop
 80114c4:	3714      	adds	r7, #20
 80114c6:	46bd      	mov	sp, r7
 80114c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114cc:	4770      	bx	lr
 80114ce:	bf00      	nop
 80114d0:	080163b8 	.word	0x080163b8
 80114d4:	080163c0 	.word	0x080163c0

080114d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80114d8:	b084      	sub	sp, #16
 80114da:	b580      	push	{r7, lr}
 80114dc:	b084      	sub	sp, #16
 80114de:	af00      	add	r7, sp, #0
 80114e0:	6078      	str	r0, [r7, #4]
 80114e2:	f107 001c 	add.w	r0, r7, #28
 80114e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80114ea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80114ee:	2b01      	cmp	r3, #1
 80114f0:	d121      	bne.n	8011536 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	68da      	ldr	r2, [r3, #12]
 8011502:	4b2c      	ldr	r3, [pc, #176]	@ (80115b4 <USB_CoreInit+0xdc>)
 8011504:	4013      	ands	r3, r2
 8011506:	687a      	ldr	r2, [r7, #4]
 8011508:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	68db      	ldr	r3, [r3, #12]
 801150e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011516:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801151a:	2b01      	cmp	r3, #1
 801151c:	d105      	bne.n	801152a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	68db      	ldr	r3, [r3, #12]
 8011522:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f001 fafa 	bl	8012b24 <USB_CoreReset>
 8011530:	4603      	mov	r3, r0
 8011532:	73fb      	strb	r3, [r7, #15]
 8011534:	e01b      	b.n	801156e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	68db      	ldr	r3, [r3, #12]
 801153a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011542:	6878      	ldr	r0, [r7, #4]
 8011544:	f001 faee 	bl	8012b24 <USB_CoreReset>
 8011548:	4603      	mov	r3, r0
 801154a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801154c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8011550:	2b00      	cmp	r3, #0
 8011552:	d106      	bne.n	8011562 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011558:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	639a      	str	r2, [r3, #56]	@ 0x38
 8011560:	e005      	b.n	801156e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011566:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801156e:	7fbb      	ldrb	r3, [r7, #30]
 8011570:	2b01      	cmp	r3, #1
 8011572:	d116      	bne.n	80115a2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011578:	b29a      	uxth	r2, r3
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011582:	4b0d      	ldr	r3, [pc, #52]	@ (80115b8 <USB_CoreInit+0xe0>)
 8011584:	4313      	orrs	r3, r2
 8011586:	687a      	ldr	r2, [r7, #4]
 8011588:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	689b      	ldr	r3, [r3, #8]
 801158e:	f043 0206 	orr.w	r2, r3, #6
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	689b      	ldr	r3, [r3, #8]
 801159a:	f043 0220 	orr.w	r2, r3, #32
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80115a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80115a4:	4618      	mov	r0, r3
 80115a6:	3710      	adds	r7, #16
 80115a8:	46bd      	mov	sp, r7
 80115aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80115ae:	b004      	add	sp, #16
 80115b0:	4770      	bx	lr
 80115b2:	bf00      	nop
 80115b4:	ffbdffbf 	.word	0xffbdffbf
 80115b8:	03ee0000 	.word	0x03ee0000

080115bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80115bc:	b480      	push	{r7}
 80115be:	b087      	sub	sp, #28
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	60f8      	str	r0, [r7, #12]
 80115c4:	60b9      	str	r1, [r7, #8]
 80115c6:	4613      	mov	r3, r2
 80115c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80115ca:	79fb      	ldrb	r3, [r7, #7]
 80115cc:	2b02      	cmp	r3, #2
 80115ce:	d165      	bne.n	801169c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80115d0:	68bb      	ldr	r3, [r7, #8]
 80115d2:	4a41      	ldr	r2, [pc, #260]	@ (80116d8 <USB_SetTurnaroundTime+0x11c>)
 80115d4:	4293      	cmp	r3, r2
 80115d6:	d906      	bls.n	80115e6 <USB_SetTurnaroundTime+0x2a>
 80115d8:	68bb      	ldr	r3, [r7, #8]
 80115da:	4a40      	ldr	r2, [pc, #256]	@ (80116dc <USB_SetTurnaroundTime+0x120>)
 80115dc:	4293      	cmp	r3, r2
 80115de:	d202      	bcs.n	80115e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80115e0:	230f      	movs	r3, #15
 80115e2:	617b      	str	r3, [r7, #20]
 80115e4:	e062      	b.n	80116ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	4a3c      	ldr	r2, [pc, #240]	@ (80116dc <USB_SetTurnaroundTime+0x120>)
 80115ea:	4293      	cmp	r3, r2
 80115ec:	d306      	bcc.n	80115fc <USB_SetTurnaroundTime+0x40>
 80115ee:	68bb      	ldr	r3, [r7, #8]
 80115f0:	4a3b      	ldr	r2, [pc, #236]	@ (80116e0 <USB_SetTurnaroundTime+0x124>)
 80115f2:	4293      	cmp	r3, r2
 80115f4:	d202      	bcs.n	80115fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80115f6:	230e      	movs	r3, #14
 80115f8:	617b      	str	r3, [r7, #20]
 80115fa:	e057      	b.n	80116ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	4a38      	ldr	r2, [pc, #224]	@ (80116e0 <USB_SetTurnaroundTime+0x124>)
 8011600:	4293      	cmp	r3, r2
 8011602:	d306      	bcc.n	8011612 <USB_SetTurnaroundTime+0x56>
 8011604:	68bb      	ldr	r3, [r7, #8]
 8011606:	4a37      	ldr	r2, [pc, #220]	@ (80116e4 <USB_SetTurnaroundTime+0x128>)
 8011608:	4293      	cmp	r3, r2
 801160a:	d202      	bcs.n	8011612 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801160c:	230d      	movs	r3, #13
 801160e:	617b      	str	r3, [r7, #20]
 8011610:	e04c      	b.n	80116ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011612:	68bb      	ldr	r3, [r7, #8]
 8011614:	4a33      	ldr	r2, [pc, #204]	@ (80116e4 <USB_SetTurnaroundTime+0x128>)
 8011616:	4293      	cmp	r3, r2
 8011618:	d306      	bcc.n	8011628 <USB_SetTurnaroundTime+0x6c>
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	4a32      	ldr	r2, [pc, #200]	@ (80116e8 <USB_SetTurnaroundTime+0x12c>)
 801161e:	4293      	cmp	r3, r2
 8011620:	d802      	bhi.n	8011628 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011622:	230c      	movs	r3, #12
 8011624:	617b      	str	r3, [r7, #20]
 8011626:	e041      	b.n	80116ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011628:	68bb      	ldr	r3, [r7, #8]
 801162a:	4a2f      	ldr	r2, [pc, #188]	@ (80116e8 <USB_SetTurnaroundTime+0x12c>)
 801162c:	4293      	cmp	r3, r2
 801162e:	d906      	bls.n	801163e <USB_SetTurnaroundTime+0x82>
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	4a2e      	ldr	r2, [pc, #184]	@ (80116ec <USB_SetTurnaroundTime+0x130>)
 8011634:	4293      	cmp	r3, r2
 8011636:	d802      	bhi.n	801163e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011638:	230b      	movs	r3, #11
 801163a:	617b      	str	r3, [r7, #20]
 801163c:	e036      	b.n	80116ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	4a2a      	ldr	r2, [pc, #168]	@ (80116ec <USB_SetTurnaroundTime+0x130>)
 8011642:	4293      	cmp	r3, r2
 8011644:	d906      	bls.n	8011654 <USB_SetTurnaroundTime+0x98>
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	4a29      	ldr	r2, [pc, #164]	@ (80116f0 <USB_SetTurnaroundTime+0x134>)
 801164a:	4293      	cmp	r3, r2
 801164c:	d802      	bhi.n	8011654 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801164e:	230a      	movs	r3, #10
 8011650:	617b      	str	r3, [r7, #20]
 8011652:	e02b      	b.n	80116ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011654:	68bb      	ldr	r3, [r7, #8]
 8011656:	4a26      	ldr	r2, [pc, #152]	@ (80116f0 <USB_SetTurnaroundTime+0x134>)
 8011658:	4293      	cmp	r3, r2
 801165a:	d906      	bls.n	801166a <USB_SetTurnaroundTime+0xae>
 801165c:	68bb      	ldr	r3, [r7, #8]
 801165e:	4a25      	ldr	r2, [pc, #148]	@ (80116f4 <USB_SetTurnaroundTime+0x138>)
 8011660:	4293      	cmp	r3, r2
 8011662:	d202      	bcs.n	801166a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011664:	2309      	movs	r3, #9
 8011666:	617b      	str	r3, [r7, #20]
 8011668:	e020      	b.n	80116ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801166a:	68bb      	ldr	r3, [r7, #8]
 801166c:	4a21      	ldr	r2, [pc, #132]	@ (80116f4 <USB_SetTurnaroundTime+0x138>)
 801166e:	4293      	cmp	r3, r2
 8011670:	d306      	bcc.n	8011680 <USB_SetTurnaroundTime+0xc4>
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	4a20      	ldr	r2, [pc, #128]	@ (80116f8 <USB_SetTurnaroundTime+0x13c>)
 8011676:	4293      	cmp	r3, r2
 8011678:	d802      	bhi.n	8011680 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801167a:	2308      	movs	r3, #8
 801167c:	617b      	str	r3, [r7, #20]
 801167e:	e015      	b.n	80116ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011680:	68bb      	ldr	r3, [r7, #8]
 8011682:	4a1d      	ldr	r2, [pc, #116]	@ (80116f8 <USB_SetTurnaroundTime+0x13c>)
 8011684:	4293      	cmp	r3, r2
 8011686:	d906      	bls.n	8011696 <USB_SetTurnaroundTime+0xda>
 8011688:	68bb      	ldr	r3, [r7, #8]
 801168a:	4a1c      	ldr	r2, [pc, #112]	@ (80116fc <USB_SetTurnaroundTime+0x140>)
 801168c:	4293      	cmp	r3, r2
 801168e:	d202      	bcs.n	8011696 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011690:	2307      	movs	r3, #7
 8011692:	617b      	str	r3, [r7, #20]
 8011694:	e00a      	b.n	80116ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011696:	2306      	movs	r3, #6
 8011698:	617b      	str	r3, [r7, #20]
 801169a:	e007      	b.n	80116ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801169c:	79fb      	ldrb	r3, [r7, #7]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d102      	bne.n	80116a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80116a2:	2309      	movs	r3, #9
 80116a4:	617b      	str	r3, [r7, #20]
 80116a6:	e001      	b.n	80116ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80116a8:	2309      	movs	r3, #9
 80116aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	68db      	ldr	r3, [r3, #12]
 80116b0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	68da      	ldr	r2, [r3, #12]
 80116bc:	697b      	ldr	r3, [r7, #20]
 80116be:	029b      	lsls	r3, r3, #10
 80116c0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80116c4:	431a      	orrs	r2, r3
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80116ca:	2300      	movs	r3, #0
}
 80116cc:	4618      	mov	r0, r3
 80116ce:	371c      	adds	r7, #28
 80116d0:	46bd      	mov	sp, r7
 80116d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d6:	4770      	bx	lr
 80116d8:	00d8acbf 	.word	0x00d8acbf
 80116dc:	00e4e1c0 	.word	0x00e4e1c0
 80116e0:	00f42400 	.word	0x00f42400
 80116e4:	01067380 	.word	0x01067380
 80116e8:	011a499f 	.word	0x011a499f
 80116ec:	01312cff 	.word	0x01312cff
 80116f0:	014ca43f 	.word	0x014ca43f
 80116f4:	016e3600 	.word	0x016e3600
 80116f8:	01a6ab1f 	.word	0x01a6ab1f
 80116fc:	01e84800 	.word	0x01e84800

08011700 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011700:	b480      	push	{r7}
 8011702:	b083      	sub	sp, #12
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	689b      	ldr	r3, [r3, #8]
 801170c:	f043 0201 	orr.w	r2, r3, #1
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011714:	2300      	movs	r3, #0
}
 8011716:	4618      	mov	r0, r3
 8011718:	370c      	adds	r7, #12
 801171a:	46bd      	mov	sp, r7
 801171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011720:	4770      	bx	lr

08011722 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011722:	b480      	push	{r7}
 8011724:	b083      	sub	sp, #12
 8011726:	af00      	add	r7, sp, #0
 8011728:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	689b      	ldr	r3, [r3, #8]
 801172e:	f023 0201 	bic.w	r2, r3, #1
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011736:	2300      	movs	r3, #0
}
 8011738:	4618      	mov	r0, r3
 801173a:	370c      	adds	r7, #12
 801173c:	46bd      	mov	sp, r7
 801173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011742:	4770      	bx	lr

08011744 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b084      	sub	sp, #16
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
 801174c:	460b      	mov	r3, r1
 801174e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011750:	2300      	movs	r3, #0
 8011752:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	68db      	ldr	r3, [r3, #12]
 8011758:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011760:	78fb      	ldrb	r3, [r7, #3]
 8011762:	2b01      	cmp	r3, #1
 8011764:	d115      	bne.n	8011792 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	68db      	ldr	r3, [r3, #12]
 801176a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011772:	200a      	movs	r0, #10
 8011774:	f7f0 fea6 	bl	80024c4 <HAL_Delay>
      ms += 10U;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	330a      	adds	r3, #10
 801177c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801177e:	6878      	ldr	r0, [r7, #4]
 8011780:	f001 f93f 	bl	8012a02 <USB_GetMode>
 8011784:	4603      	mov	r3, r0
 8011786:	2b01      	cmp	r3, #1
 8011788:	d01e      	beq.n	80117c8 <USB_SetCurrentMode+0x84>
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	2bc7      	cmp	r3, #199	@ 0xc7
 801178e:	d9f0      	bls.n	8011772 <USB_SetCurrentMode+0x2e>
 8011790:	e01a      	b.n	80117c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011792:	78fb      	ldrb	r3, [r7, #3]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d115      	bne.n	80117c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	68db      	ldr	r3, [r3, #12]
 801179c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80117a4:	200a      	movs	r0, #10
 80117a6:	f7f0 fe8d 	bl	80024c4 <HAL_Delay>
      ms += 10U;
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	330a      	adds	r3, #10
 80117ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f001 f926 	bl	8012a02 <USB_GetMode>
 80117b6:	4603      	mov	r3, r0
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d005      	beq.n	80117c8 <USB_SetCurrentMode+0x84>
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	2bc7      	cmp	r3, #199	@ 0xc7
 80117c0:	d9f0      	bls.n	80117a4 <USB_SetCurrentMode+0x60>
 80117c2:	e001      	b.n	80117c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80117c4:	2301      	movs	r3, #1
 80117c6:	e005      	b.n	80117d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	2bc8      	cmp	r3, #200	@ 0xc8
 80117cc:	d101      	bne.n	80117d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80117ce:	2301      	movs	r3, #1
 80117d0:	e000      	b.n	80117d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80117d2:	2300      	movs	r3, #0
}
 80117d4:	4618      	mov	r0, r3
 80117d6:	3710      	adds	r7, #16
 80117d8:	46bd      	mov	sp, r7
 80117da:	bd80      	pop	{r7, pc}

080117dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80117dc:	b084      	sub	sp, #16
 80117de:	b580      	push	{r7, lr}
 80117e0:	b086      	sub	sp, #24
 80117e2:	af00      	add	r7, sp, #0
 80117e4:	6078      	str	r0, [r7, #4]
 80117e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80117ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80117ee:	2300      	movs	r3, #0
 80117f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80117f6:	2300      	movs	r3, #0
 80117f8:	613b      	str	r3, [r7, #16]
 80117fa:	e009      	b.n	8011810 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80117fc:	687a      	ldr	r2, [r7, #4]
 80117fe:	693b      	ldr	r3, [r7, #16]
 8011800:	3340      	adds	r3, #64	@ 0x40
 8011802:	009b      	lsls	r3, r3, #2
 8011804:	4413      	add	r3, r2
 8011806:	2200      	movs	r2, #0
 8011808:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801180a:	693b      	ldr	r3, [r7, #16]
 801180c:	3301      	adds	r3, #1
 801180e:	613b      	str	r3, [r7, #16]
 8011810:	693b      	ldr	r3, [r7, #16]
 8011812:	2b0e      	cmp	r3, #14
 8011814:	d9f2      	bls.n	80117fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011816:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801181a:	2b00      	cmp	r3, #0
 801181c:	d11c      	bne.n	8011858 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011824:	685b      	ldr	r3, [r3, #4]
 8011826:	68fa      	ldr	r2, [r7, #12]
 8011828:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801182c:	f043 0302 	orr.w	r3, r3, #2
 8011830:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011836:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	601a      	str	r2, [r3, #0]
 8011856:	e005      	b.n	8011864 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801185c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801186a:	461a      	mov	r2, r3
 801186c:	2300      	movs	r3, #0
 801186e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011870:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8011874:	2b01      	cmp	r3, #1
 8011876:	d10d      	bne.n	8011894 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011878:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801187c:	2b00      	cmp	r3, #0
 801187e:	d104      	bne.n	801188a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011880:	2100      	movs	r1, #0
 8011882:	6878      	ldr	r0, [r7, #4]
 8011884:	f000 f968 	bl	8011b58 <USB_SetDevSpeed>
 8011888:	e008      	b.n	801189c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801188a:	2101      	movs	r1, #1
 801188c:	6878      	ldr	r0, [r7, #4]
 801188e:	f000 f963 	bl	8011b58 <USB_SetDevSpeed>
 8011892:	e003      	b.n	801189c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011894:	2103      	movs	r1, #3
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	f000 f95e 	bl	8011b58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801189c:	2110      	movs	r1, #16
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f000 f8fa 	bl	8011a98 <USB_FlushTxFifo>
 80118a4:	4603      	mov	r3, r0
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d001      	beq.n	80118ae <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80118aa:	2301      	movs	r3, #1
 80118ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	f000 f924 	bl	8011afc <USB_FlushRxFifo>
 80118b4:	4603      	mov	r3, r0
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d001      	beq.n	80118be <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80118ba:	2301      	movs	r3, #1
 80118bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80118c4:	461a      	mov	r2, r3
 80118c6:	2300      	movs	r3, #0
 80118c8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80118d0:	461a      	mov	r2, r3
 80118d2:	2300      	movs	r3, #0
 80118d4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80118dc:	461a      	mov	r2, r3
 80118de:	2300      	movs	r3, #0
 80118e0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80118e2:	2300      	movs	r3, #0
 80118e4:	613b      	str	r3, [r7, #16]
 80118e6:	e043      	b.n	8011970 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	015a      	lsls	r2, r3, #5
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	4413      	add	r3, r2
 80118f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80118fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80118fe:	d118      	bne.n	8011932 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8011900:	693b      	ldr	r3, [r7, #16]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d10a      	bne.n	801191c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011906:	693b      	ldr	r3, [r7, #16]
 8011908:	015a      	lsls	r2, r3, #5
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	4413      	add	r3, r2
 801190e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011912:	461a      	mov	r2, r3
 8011914:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011918:	6013      	str	r3, [r2, #0]
 801191a:	e013      	b.n	8011944 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801191c:	693b      	ldr	r3, [r7, #16]
 801191e:	015a      	lsls	r2, r3, #5
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	4413      	add	r3, r2
 8011924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011928:	461a      	mov	r2, r3
 801192a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801192e:	6013      	str	r3, [r2, #0]
 8011930:	e008      	b.n	8011944 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011932:	693b      	ldr	r3, [r7, #16]
 8011934:	015a      	lsls	r2, r3, #5
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	4413      	add	r3, r2
 801193a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801193e:	461a      	mov	r2, r3
 8011940:	2300      	movs	r3, #0
 8011942:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011944:	693b      	ldr	r3, [r7, #16]
 8011946:	015a      	lsls	r2, r3, #5
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	4413      	add	r3, r2
 801194c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011950:	461a      	mov	r2, r3
 8011952:	2300      	movs	r3, #0
 8011954:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011956:	693b      	ldr	r3, [r7, #16]
 8011958:	015a      	lsls	r2, r3, #5
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	4413      	add	r3, r2
 801195e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011962:	461a      	mov	r2, r3
 8011964:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8011968:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	3301      	adds	r3, #1
 801196e:	613b      	str	r3, [r7, #16]
 8011970:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011974:	461a      	mov	r2, r3
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	4293      	cmp	r3, r2
 801197a:	d3b5      	bcc.n	80118e8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801197c:	2300      	movs	r3, #0
 801197e:	613b      	str	r3, [r7, #16]
 8011980:	e043      	b.n	8011a0a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011982:	693b      	ldr	r3, [r7, #16]
 8011984:	015a      	lsls	r2, r3, #5
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	4413      	add	r3, r2
 801198a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011994:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011998:	d118      	bne.n	80119cc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 801199a:	693b      	ldr	r3, [r7, #16]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d10a      	bne.n	80119b6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80119a0:	693b      	ldr	r3, [r7, #16]
 80119a2:	015a      	lsls	r2, r3, #5
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	4413      	add	r3, r2
 80119a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119ac:	461a      	mov	r2, r3
 80119ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80119b2:	6013      	str	r3, [r2, #0]
 80119b4:	e013      	b.n	80119de <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80119b6:	693b      	ldr	r3, [r7, #16]
 80119b8:	015a      	lsls	r2, r3, #5
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	4413      	add	r3, r2
 80119be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119c2:	461a      	mov	r2, r3
 80119c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80119c8:	6013      	str	r3, [r2, #0]
 80119ca:	e008      	b.n	80119de <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80119cc:	693b      	ldr	r3, [r7, #16]
 80119ce:	015a      	lsls	r2, r3, #5
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	4413      	add	r3, r2
 80119d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119d8:	461a      	mov	r2, r3
 80119da:	2300      	movs	r3, #0
 80119dc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80119de:	693b      	ldr	r3, [r7, #16]
 80119e0:	015a      	lsls	r2, r3, #5
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	4413      	add	r3, r2
 80119e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119ea:	461a      	mov	r2, r3
 80119ec:	2300      	movs	r3, #0
 80119ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80119f0:	693b      	ldr	r3, [r7, #16]
 80119f2:	015a      	lsls	r2, r3, #5
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	4413      	add	r3, r2
 80119f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119fc:	461a      	mov	r2, r3
 80119fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8011a02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011a04:	693b      	ldr	r3, [r7, #16]
 8011a06:	3301      	adds	r3, #1
 8011a08:	613b      	str	r3, [r7, #16]
 8011a0a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011a0e:	461a      	mov	r2, r3
 8011a10:	693b      	ldr	r3, [r7, #16]
 8011a12:	4293      	cmp	r3, r2
 8011a14:	d3b5      	bcc.n	8011982 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011a1c:	691b      	ldr	r3, [r3, #16]
 8011a1e:	68fa      	ldr	r2, [r7, #12]
 8011a20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011a24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011a28:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8011a36:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011a38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d105      	bne.n	8011a4c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	699b      	ldr	r3, [r3, #24]
 8011a44:	f043 0210 	orr.w	r2, r3, #16
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	699a      	ldr	r2, [r3, #24]
 8011a50:	4b0f      	ldr	r3, [pc, #60]	@ (8011a90 <USB_DevInit+0x2b4>)
 8011a52:	4313      	orrs	r3, r2
 8011a54:	687a      	ldr	r2, [r7, #4]
 8011a56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011a58:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d005      	beq.n	8011a6c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	699b      	ldr	r3, [r3, #24]
 8011a64:	f043 0208 	orr.w	r2, r3, #8
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011a6c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011a70:	2b01      	cmp	r3, #1
 8011a72:	d105      	bne.n	8011a80 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	699a      	ldr	r2, [r3, #24]
 8011a78:	4b06      	ldr	r3, [pc, #24]	@ (8011a94 <USB_DevInit+0x2b8>)
 8011a7a:	4313      	orrs	r3, r2
 8011a7c:	687a      	ldr	r2, [r7, #4]
 8011a7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	3718      	adds	r7, #24
 8011a86:	46bd      	mov	sp, r7
 8011a88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011a8c:	b004      	add	sp, #16
 8011a8e:	4770      	bx	lr
 8011a90:	803c3800 	.word	0x803c3800
 8011a94:	40000004 	.word	0x40000004

08011a98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011a98:	b480      	push	{r7}
 8011a9a:	b085      	sub	sp, #20
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
 8011aa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	3301      	adds	r3, #1
 8011aaa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011ab2:	d901      	bls.n	8011ab8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011ab4:	2303      	movs	r3, #3
 8011ab6:	e01b      	b.n	8011af0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	691b      	ldr	r3, [r3, #16]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	daf2      	bge.n	8011aa6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011ac4:	683b      	ldr	r3, [r7, #0]
 8011ac6:	019b      	lsls	r3, r3, #6
 8011ac8:	f043 0220 	orr.w	r2, r3, #32
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011adc:	d901      	bls.n	8011ae2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011ade:	2303      	movs	r3, #3
 8011ae0:	e006      	b.n	8011af0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	691b      	ldr	r3, [r3, #16]
 8011ae6:	f003 0320 	and.w	r3, r3, #32
 8011aea:	2b20      	cmp	r3, #32
 8011aec:	d0f0      	beq.n	8011ad0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011aee:	2300      	movs	r3, #0
}
 8011af0:	4618      	mov	r0, r3
 8011af2:	3714      	adds	r7, #20
 8011af4:	46bd      	mov	sp, r7
 8011af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afa:	4770      	bx	lr

08011afc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011afc:	b480      	push	{r7}
 8011afe:	b085      	sub	sp, #20
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011b04:	2300      	movs	r3, #0
 8011b06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	3301      	adds	r3, #1
 8011b0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011b14:	d901      	bls.n	8011b1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011b16:	2303      	movs	r3, #3
 8011b18:	e018      	b.n	8011b4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	691b      	ldr	r3, [r3, #16]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	daf2      	bge.n	8011b08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011b22:	2300      	movs	r3, #0
 8011b24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	2210      	movs	r2, #16
 8011b2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	3301      	adds	r3, #1
 8011b30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011b38:	d901      	bls.n	8011b3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011b3a:	2303      	movs	r3, #3
 8011b3c:	e006      	b.n	8011b4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	691b      	ldr	r3, [r3, #16]
 8011b42:	f003 0310 	and.w	r3, r3, #16
 8011b46:	2b10      	cmp	r3, #16
 8011b48:	d0f0      	beq.n	8011b2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011b4a:	2300      	movs	r3, #0
}
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	3714      	adds	r7, #20
 8011b50:	46bd      	mov	sp, r7
 8011b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b56:	4770      	bx	lr

08011b58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011b58:	b480      	push	{r7}
 8011b5a:	b085      	sub	sp, #20
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
 8011b60:	460b      	mov	r3, r1
 8011b62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011b6e:	681a      	ldr	r2, [r3, #0]
 8011b70:	78fb      	ldrb	r3, [r7, #3]
 8011b72:	68f9      	ldr	r1, [r7, #12]
 8011b74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011b78:	4313      	orrs	r3, r2
 8011b7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011b7c:	2300      	movs	r3, #0
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	3714      	adds	r7, #20
 8011b82:	46bd      	mov	sp, r7
 8011b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b88:	4770      	bx	lr

08011b8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8011b8a:	b480      	push	{r7}
 8011b8c:	b087      	sub	sp, #28
 8011b8e:	af00      	add	r7, sp, #0
 8011b90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011b96:	693b      	ldr	r3, [r7, #16]
 8011b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011b9c:	689b      	ldr	r3, [r3, #8]
 8011b9e:	f003 0306 	and.w	r3, r3, #6
 8011ba2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d102      	bne.n	8011bb0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8011baa:	2300      	movs	r3, #0
 8011bac:	75fb      	strb	r3, [r7, #23]
 8011bae:	e00a      	b.n	8011bc6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	2b02      	cmp	r3, #2
 8011bb4:	d002      	beq.n	8011bbc <USB_GetDevSpeed+0x32>
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	2b06      	cmp	r3, #6
 8011bba:	d102      	bne.n	8011bc2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011bbc:	2302      	movs	r3, #2
 8011bbe:	75fb      	strb	r3, [r7, #23]
 8011bc0:	e001      	b.n	8011bc6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8011bc2:	230f      	movs	r3, #15
 8011bc4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011bc8:	4618      	mov	r0, r3
 8011bca:	371c      	adds	r7, #28
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd2:	4770      	bx	lr

08011bd4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011bd4:	b480      	push	{r7}
 8011bd6:	b085      	sub	sp, #20
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
 8011bdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	785b      	ldrb	r3, [r3, #1]
 8011bec:	2b01      	cmp	r3, #1
 8011bee:	d139      	bne.n	8011c64 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011bf6:	69da      	ldr	r2, [r3, #28]
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	781b      	ldrb	r3, [r3, #0]
 8011bfc:	f003 030f 	and.w	r3, r3, #15
 8011c00:	2101      	movs	r1, #1
 8011c02:	fa01 f303 	lsl.w	r3, r1, r3
 8011c06:	b29b      	uxth	r3, r3
 8011c08:	68f9      	ldr	r1, [r7, #12]
 8011c0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011c0e:	4313      	orrs	r3, r2
 8011c10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	015a      	lsls	r2, r3, #5
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	4413      	add	r3, r2
 8011c1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d153      	bne.n	8011cd0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011c28:	68bb      	ldr	r3, [r7, #8]
 8011c2a:	015a      	lsls	r2, r3, #5
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	4413      	add	r3, r2
 8011c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c34:	681a      	ldr	r2, [r3, #0]
 8011c36:	683b      	ldr	r3, [r7, #0]
 8011c38:	689b      	ldr	r3, [r3, #8]
 8011c3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011c3e:	683b      	ldr	r3, [r7, #0]
 8011c40:	791b      	ldrb	r3, [r3, #4]
 8011c42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011c44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011c46:	68bb      	ldr	r3, [r7, #8]
 8011c48:	059b      	lsls	r3, r3, #22
 8011c4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011c4c:	431a      	orrs	r2, r3
 8011c4e:	68bb      	ldr	r3, [r7, #8]
 8011c50:	0159      	lsls	r1, r3, #5
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	440b      	add	r3, r1
 8011c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c5a:	4619      	mov	r1, r3
 8011c5c:	4b20      	ldr	r3, [pc, #128]	@ (8011ce0 <USB_ActivateEndpoint+0x10c>)
 8011c5e:	4313      	orrs	r3, r2
 8011c60:	600b      	str	r3, [r1, #0]
 8011c62:	e035      	b.n	8011cd0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011c6a:	69da      	ldr	r2, [r3, #28]
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	781b      	ldrb	r3, [r3, #0]
 8011c70:	f003 030f 	and.w	r3, r3, #15
 8011c74:	2101      	movs	r1, #1
 8011c76:	fa01 f303 	lsl.w	r3, r1, r3
 8011c7a:	041b      	lsls	r3, r3, #16
 8011c7c:	68f9      	ldr	r1, [r7, #12]
 8011c7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011c82:	4313      	orrs	r3, r2
 8011c84:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011c86:	68bb      	ldr	r3, [r7, #8]
 8011c88:	015a      	lsls	r2, r3, #5
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	4413      	add	r3, r2
 8011c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d119      	bne.n	8011cd0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011c9c:	68bb      	ldr	r3, [r7, #8]
 8011c9e:	015a      	lsls	r2, r3, #5
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	4413      	add	r3, r2
 8011ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ca8:	681a      	ldr	r2, [r3, #0]
 8011caa:	683b      	ldr	r3, [r7, #0]
 8011cac:	689b      	ldr	r3, [r3, #8]
 8011cae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011cb2:	683b      	ldr	r3, [r7, #0]
 8011cb4:	791b      	ldrb	r3, [r3, #4]
 8011cb6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011cb8:	430b      	orrs	r3, r1
 8011cba:	431a      	orrs	r2, r3
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	0159      	lsls	r1, r3, #5
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	440b      	add	r3, r1
 8011cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011cc8:	4619      	mov	r1, r3
 8011cca:	4b05      	ldr	r3, [pc, #20]	@ (8011ce0 <USB_ActivateEndpoint+0x10c>)
 8011ccc:	4313      	orrs	r3, r2
 8011cce:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011cd0:	2300      	movs	r3, #0
}
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	3714      	adds	r7, #20
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cdc:	4770      	bx	lr
 8011cde:	bf00      	nop
 8011ce0:	10008000 	.word	0x10008000

08011ce4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011ce4:	b480      	push	{r7}
 8011ce6:	b085      	sub	sp, #20
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
 8011cec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	781b      	ldrb	r3, [r3, #0]
 8011cf6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	785b      	ldrb	r3, [r3, #1]
 8011cfc:	2b01      	cmp	r3, #1
 8011cfe:	d161      	bne.n	8011dc4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011d00:	68bb      	ldr	r3, [r7, #8]
 8011d02:	015a      	lsls	r2, r3, #5
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	4413      	add	r3, r2
 8011d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011d12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011d16:	d11f      	bne.n	8011d58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011d18:	68bb      	ldr	r3, [r7, #8]
 8011d1a:	015a      	lsls	r2, r3, #5
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	4413      	add	r3, r2
 8011d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	68ba      	ldr	r2, [r7, #8]
 8011d28:	0151      	lsls	r1, r2, #5
 8011d2a:	68fa      	ldr	r2, [r7, #12]
 8011d2c:	440a      	add	r2, r1
 8011d2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011d32:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011d36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011d38:	68bb      	ldr	r3, [r7, #8]
 8011d3a:	015a      	lsls	r2, r3, #5
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	4413      	add	r3, r2
 8011d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	68ba      	ldr	r2, [r7, #8]
 8011d48:	0151      	lsls	r1, r2, #5
 8011d4a:	68fa      	ldr	r2, [r7, #12]
 8011d4c:	440a      	add	r2, r1
 8011d4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011d52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011d56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011d5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	781b      	ldrb	r3, [r3, #0]
 8011d64:	f003 030f 	and.w	r3, r3, #15
 8011d68:	2101      	movs	r1, #1
 8011d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8011d6e:	b29b      	uxth	r3, r3
 8011d70:	43db      	mvns	r3, r3
 8011d72:	68f9      	ldr	r1, [r7, #12]
 8011d74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011d78:	4013      	ands	r3, r2
 8011d7a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011d82:	69da      	ldr	r2, [r3, #28]
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	781b      	ldrb	r3, [r3, #0]
 8011d88:	f003 030f 	and.w	r3, r3, #15
 8011d8c:	2101      	movs	r1, #1
 8011d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8011d92:	b29b      	uxth	r3, r3
 8011d94:	43db      	mvns	r3, r3
 8011d96:	68f9      	ldr	r1, [r7, #12]
 8011d98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011d9c:	4013      	ands	r3, r2
 8011d9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	015a      	lsls	r2, r3, #5
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	4413      	add	r3, r2
 8011da8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011dac:	681a      	ldr	r2, [r3, #0]
 8011dae:	68bb      	ldr	r3, [r7, #8]
 8011db0:	0159      	lsls	r1, r3, #5
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	440b      	add	r3, r1
 8011db6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011dba:	4619      	mov	r1, r3
 8011dbc:	4b35      	ldr	r3, [pc, #212]	@ (8011e94 <USB_DeactivateEndpoint+0x1b0>)
 8011dbe:	4013      	ands	r3, r2
 8011dc0:	600b      	str	r3, [r1, #0]
 8011dc2:	e060      	b.n	8011e86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011dc4:	68bb      	ldr	r3, [r7, #8]
 8011dc6:	015a      	lsls	r2, r3, #5
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	4413      	add	r3, r2
 8011dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011dda:	d11f      	bne.n	8011e1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011ddc:	68bb      	ldr	r3, [r7, #8]
 8011dde:	015a      	lsls	r2, r3, #5
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	4413      	add	r3, r2
 8011de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	68ba      	ldr	r2, [r7, #8]
 8011dec:	0151      	lsls	r1, r2, #5
 8011dee:	68fa      	ldr	r2, [r7, #12]
 8011df0:	440a      	add	r2, r1
 8011df2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011df6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011dfa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011dfc:	68bb      	ldr	r3, [r7, #8]
 8011dfe:	015a      	lsls	r2, r3, #5
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	4413      	add	r3, r2
 8011e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	68ba      	ldr	r2, [r7, #8]
 8011e0c:	0151      	lsls	r1, r2, #5
 8011e0e:	68fa      	ldr	r2, [r7, #12]
 8011e10:	440a      	add	r2, r1
 8011e12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011e16:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011e1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011e22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	781b      	ldrb	r3, [r3, #0]
 8011e28:	f003 030f 	and.w	r3, r3, #15
 8011e2c:	2101      	movs	r1, #1
 8011e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8011e32:	041b      	lsls	r3, r3, #16
 8011e34:	43db      	mvns	r3, r3
 8011e36:	68f9      	ldr	r1, [r7, #12]
 8011e38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011e3c:	4013      	ands	r3, r2
 8011e3e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011e46:	69da      	ldr	r2, [r3, #28]
 8011e48:	683b      	ldr	r3, [r7, #0]
 8011e4a:	781b      	ldrb	r3, [r3, #0]
 8011e4c:	f003 030f 	and.w	r3, r3, #15
 8011e50:	2101      	movs	r1, #1
 8011e52:	fa01 f303 	lsl.w	r3, r1, r3
 8011e56:	041b      	lsls	r3, r3, #16
 8011e58:	43db      	mvns	r3, r3
 8011e5a:	68f9      	ldr	r1, [r7, #12]
 8011e5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011e60:	4013      	ands	r3, r2
 8011e62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	015a      	lsls	r2, r3, #5
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	4413      	add	r3, r2
 8011e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e70:	681a      	ldr	r2, [r3, #0]
 8011e72:	68bb      	ldr	r3, [r7, #8]
 8011e74:	0159      	lsls	r1, r3, #5
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	440b      	add	r3, r1
 8011e7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e7e:	4619      	mov	r1, r3
 8011e80:	4b05      	ldr	r3, [pc, #20]	@ (8011e98 <USB_DeactivateEndpoint+0x1b4>)
 8011e82:	4013      	ands	r3, r2
 8011e84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011e86:	2300      	movs	r3, #0
}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	3714      	adds	r7, #20
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e92:	4770      	bx	lr
 8011e94:	ec337800 	.word	0xec337800
 8011e98:	eff37800 	.word	0xeff37800

08011e9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b08a      	sub	sp, #40	@ 0x28
 8011ea0:	af02      	add	r7, sp, #8
 8011ea2:	60f8      	str	r0, [r7, #12]
 8011ea4:	60b9      	str	r1, [r7, #8]
 8011ea6:	4613      	mov	r3, r2
 8011ea8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	781b      	ldrb	r3, [r3, #0]
 8011eb2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011eb4:	68bb      	ldr	r3, [r7, #8]
 8011eb6:	785b      	ldrb	r3, [r3, #1]
 8011eb8:	2b01      	cmp	r3, #1
 8011eba:	f040 8185 	bne.w	80121c8 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	691b      	ldr	r3, [r3, #16]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d132      	bne.n	8011f2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011ec6:	69bb      	ldr	r3, [r7, #24]
 8011ec8:	015a      	lsls	r2, r3, #5
 8011eca:	69fb      	ldr	r3, [r7, #28]
 8011ecc:	4413      	add	r3, r2
 8011ece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ed2:	691a      	ldr	r2, [r3, #16]
 8011ed4:	69bb      	ldr	r3, [r7, #24]
 8011ed6:	0159      	lsls	r1, r3, #5
 8011ed8:	69fb      	ldr	r3, [r7, #28]
 8011eda:	440b      	add	r3, r1
 8011edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ee0:	4619      	mov	r1, r3
 8011ee2:	4ba7      	ldr	r3, [pc, #668]	@ (8012180 <USB_EPStartXfer+0x2e4>)
 8011ee4:	4013      	ands	r3, r2
 8011ee6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011ee8:	69bb      	ldr	r3, [r7, #24]
 8011eea:	015a      	lsls	r2, r3, #5
 8011eec:	69fb      	ldr	r3, [r7, #28]
 8011eee:	4413      	add	r3, r2
 8011ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ef4:	691b      	ldr	r3, [r3, #16]
 8011ef6:	69ba      	ldr	r2, [r7, #24]
 8011ef8:	0151      	lsls	r1, r2, #5
 8011efa:	69fa      	ldr	r2, [r7, #28]
 8011efc:	440a      	add	r2, r1
 8011efe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011f02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011f06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011f08:	69bb      	ldr	r3, [r7, #24]
 8011f0a:	015a      	lsls	r2, r3, #5
 8011f0c:	69fb      	ldr	r3, [r7, #28]
 8011f0e:	4413      	add	r3, r2
 8011f10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f14:	691a      	ldr	r2, [r3, #16]
 8011f16:	69bb      	ldr	r3, [r7, #24]
 8011f18:	0159      	lsls	r1, r3, #5
 8011f1a:	69fb      	ldr	r3, [r7, #28]
 8011f1c:	440b      	add	r3, r1
 8011f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f22:	4619      	mov	r1, r3
 8011f24:	4b97      	ldr	r3, [pc, #604]	@ (8012184 <USB_EPStartXfer+0x2e8>)
 8011f26:	4013      	ands	r3, r2
 8011f28:	610b      	str	r3, [r1, #16]
 8011f2a:	e097      	b.n	801205c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011f2c:	69bb      	ldr	r3, [r7, #24]
 8011f2e:	015a      	lsls	r2, r3, #5
 8011f30:	69fb      	ldr	r3, [r7, #28]
 8011f32:	4413      	add	r3, r2
 8011f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f38:	691a      	ldr	r2, [r3, #16]
 8011f3a:	69bb      	ldr	r3, [r7, #24]
 8011f3c:	0159      	lsls	r1, r3, #5
 8011f3e:	69fb      	ldr	r3, [r7, #28]
 8011f40:	440b      	add	r3, r1
 8011f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f46:	4619      	mov	r1, r3
 8011f48:	4b8e      	ldr	r3, [pc, #568]	@ (8012184 <USB_EPStartXfer+0x2e8>)
 8011f4a:	4013      	ands	r3, r2
 8011f4c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011f4e:	69bb      	ldr	r3, [r7, #24]
 8011f50:	015a      	lsls	r2, r3, #5
 8011f52:	69fb      	ldr	r3, [r7, #28]
 8011f54:	4413      	add	r3, r2
 8011f56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f5a:	691a      	ldr	r2, [r3, #16]
 8011f5c:	69bb      	ldr	r3, [r7, #24]
 8011f5e:	0159      	lsls	r1, r3, #5
 8011f60:	69fb      	ldr	r3, [r7, #28]
 8011f62:	440b      	add	r3, r1
 8011f64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f68:	4619      	mov	r1, r3
 8011f6a:	4b85      	ldr	r3, [pc, #532]	@ (8012180 <USB_EPStartXfer+0x2e4>)
 8011f6c:	4013      	ands	r3, r2
 8011f6e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8011f70:	69bb      	ldr	r3, [r7, #24]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d11a      	bne.n	8011fac <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8011f76:	68bb      	ldr	r3, [r7, #8]
 8011f78:	691a      	ldr	r2, [r3, #16]
 8011f7a:	68bb      	ldr	r3, [r7, #8]
 8011f7c:	689b      	ldr	r3, [r3, #8]
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d903      	bls.n	8011f8a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8011f82:	68bb      	ldr	r3, [r7, #8]
 8011f84:	689a      	ldr	r2, [r3, #8]
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011f8a:	69bb      	ldr	r3, [r7, #24]
 8011f8c:	015a      	lsls	r2, r3, #5
 8011f8e:	69fb      	ldr	r3, [r7, #28]
 8011f90:	4413      	add	r3, r2
 8011f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f96:	691b      	ldr	r3, [r3, #16]
 8011f98:	69ba      	ldr	r2, [r7, #24]
 8011f9a:	0151      	lsls	r1, r2, #5
 8011f9c:	69fa      	ldr	r2, [r7, #28]
 8011f9e:	440a      	add	r2, r1
 8011fa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011fa4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011fa8:	6113      	str	r3, [r2, #16]
 8011faa:	e044      	b.n	8012036 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	691a      	ldr	r2, [r3, #16]
 8011fb0:	68bb      	ldr	r3, [r7, #8]
 8011fb2:	689b      	ldr	r3, [r3, #8]
 8011fb4:	4413      	add	r3, r2
 8011fb6:	1e5a      	subs	r2, r3, #1
 8011fb8:	68bb      	ldr	r3, [r7, #8]
 8011fba:	689b      	ldr	r3, [r3, #8]
 8011fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8011fc0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8011fc2:	69bb      	ldr	r3, [r7, #24]
 8011fc4:	015a      	lsls	r2, r3, #5
 8011fc6:	69fb      	ldr	r3, [r7, #28]
 8011fc8:	4413      	add	r3, r2
 8011fca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011fce:	691a      	ldr	r2, [r3, #16]
 8011fd0:	8afb      	ldrh	r3, [r7, #22]
 8011fd2:	04d9      	lsls	r1, r3, #19
 8011fd4:	4b6c      	ldr	r3, [pc, #432]	@ (8012188 <USB_EPStartXfer+0x2ec>)
 8011fd6:	400b      	ands	r3, r1
 8011fd8:	69b9      	ldr	r1, [r7, #24]
 8011fda:	0148      	lsls	r0, r1, #5
 8011fdc:	69f9      	ldr	r1, [r7, #28]
 8011fde:	4401      	add	r1, r0
 8011fe0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8011fe4:	4313      	orrs	r3, r2
 8011fe6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8011fe8:	68bb      	ldr	r3, [r7, #8]
 8011fea:	791b      	ldrb	r3, [r3, #4]
 8011fec:	2b01      	cmp	r3, #1
 8011fee:	d122      	bne.n	8012036 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011ff0:	69bb      	ldr	r3, [r7, #24]
 8011ff2:	015a      	lsls	r2, r3, #5
 8011ff4:	69fb      	ldr	r3, [r7, #28]
 8011ff6:	4413      	add	r3, r2
 8011ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ffc:	691b      	ldr	r3, [r3, #16]
 8011ffe:	69ba      	ldr	r2, [r7, #24]
 8012000:	0151      	lsls	r1, r2, #5
 8012002:	69fa      	ldr	r2, [r7, #28]
 8012004:	440a      	add	r2, r1
 8012006:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801200a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 801200e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8012010:	69bb      	ldr	r3, [r7, #24]
 8012012:	015a      	lsls	r2, r3, #5
 8012014:	69fb      	ldr	r3, [r7, #28]
 8012016:	4413      	add	r3, r2
 8012018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801201c:	691a      	ldr	r2, [r3, #16]
 801201e:	8afb      	ldrh	r3, [r7, #22]
 8012020:	075b      	lsls	r3, r3, #29
 8012022:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8012026:	69b9      	ldr	r1, [r7, #24]
 8012028:	0148      	lsls	r0, r1, #5
 801202a:	69f9      	ldr	r1, [r7, #28]
 801202c:	4401      	add	r1, r0
 801202e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8012032:	4313      	orrs	r3, r2
 8012034:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012036:	69bb      	ldr	r3, [r7, #24]
 8012038:	015a      	lsls	r2, r3, #5
 801203a:	69fb      	ldr	r3, [r7, #28]
 801203c:	4413      	add	r3, r2
 801203e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012042:	691a      	ldr	r2, [r3, #16]
 8012044:	68bb      	ldr	r3, [r7, #8]
 8012046:	691b      	ldr	r3, [r3, #16]
 8012048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801204c:	69b9      	ldr	r1, [r7, #24]
 801204e:	0148      	lsls	r0, r1, #5
 8012050:	69f9      	ldr	r1, [r7, #28]
 8012052:	4401      	add	r1, r0
 8012054:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8012058:	4313      	orrs	r3, r2
 801205a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801205c:	79fb      	ldrb	r3, [r7, #7]
 801205e:	2b01      	cmp	r3, #1
 8012060:	d14b      	bne.n	80120fa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	69db      	ldr	r3, [r3, #28]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d009      	beq.n	801207e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801206a:	69bb      	ldr	r3, [r7, #24]
 801206c:	015a      	lsls	r2, r3, #5
 801206e:	69fb      	ldr	r3, [r7, #28]
 8012070:	4413      	add	r3, r2
 8012072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012076:	461a      	mov	r2, r3
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	69db      	ldr	r3, [r3, #28]
 801207c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801207e:	68bb      	ldr	r3, [r7, #8]
 8012080:	791b      	ldrb	r3, [r3, #4]
 8012082:	2b01      	cmp	r3, #1
 8012084:	d128      	bne.n	80120d8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012086:	69fb      	ldr	r3, [r7, #28]
 8012088:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801208c:	689b      	ldr	r3, [r3, #8]
 801208e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012092:	2b00      	cmp	r3, #0
 8012094:	d110      	bne.n	80120b8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012096:	69bb      	ldr	r3, [r7, #24]
 8012098:	015a      	lsls	r2, r3, #5
 801209a:	69fb      	ldr	r3, [r7, #28]
 801209c:	4413      	add	r3, r2
 801209e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	69ba      	ldr	r2, [r7, #24]
 80120a6:	0151      	lsls	r1, r2, #5
 80120a8:	69fa      	ldr	r2, [r7, #28]
 80120aa:	440a      	add	r2, r1
 80120ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80120b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80120b4:	6013      	str	r3, [r2, #0]
 80120b6:	e00f      	b.n	80120d8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80120b8:	69bb      	ldr	r3, [r7, #24]
 80120ba:	015a      	lsls	r2, r3, #5
 80120bc:	69fb      	ldr	r3, [r7, #28]
 80120be:	4413      	add	r3, r2
 80120c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	69ba      	ldr	r2, [r7, #24]
 80120c8:	0151      	lsls	r1, r2, #5
 80120ca:	69fa      	ldr	r2, [r7, #28]
 80120cc:	440a      	add	r2, r1
 80120ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80120d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80120d6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80120d8:	69bb      	ldr	r3, [r7, #24]
 80120da:	015a      	lsls	r2, r3, #5
 80120dc:	69fb      	ldr	r3, [r7, #28]
 80120de:	4413      	add	r3, r2
 80120e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	69ba      	ldr	r2, [r7, #24]
 80120e8:	0151      	lsls	r1, r2, #5
 80120ea:	69fa      	ldr	r2, [r7, #28]
 80120ec:	440a      	add	r2, r1
 80120ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80120f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80120f6:	6013      	str	r3, [r2, #0]
 80120f8:	e169      	b.n	80123ce <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80120fa:	69bb      	ldr	r3, [r7, #24]
 80120fc:	015a      	lsls	r2, r3, #5
 80120fe:	69fb      	ldr	r3, [r7, #28]
 8012100:	4413      	add	r3, r2
 8012102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	69ba      	ldr	r2, [r7, #24]
 801210a:	0151      	lsls	r1, r2, #5
 801210c:	69fa      	ldr	r2, [r7, #28]
 801210e:	440a      	add	r2, r1
 8012110:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012114:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8012118:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801211a:	68bb      	ldr	r3, [r7, #8]
 801211c:	791b      	ldrb	r3, [r3, #4]
 801211e:	2b01      	cmp	r3, #1
 8012120:	d015      	beq.n	801214e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012122:	68bb      	ldr	r3, [r7, #8]
 8012124:	691b      	ldr	r3, [r3, #16]
 8012126:	2b00      	cmp	r3, #0
 8012128:	f000 8151 	beq.w	80123ce <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801212c:	69fb      	ldr	r3, [r7, #28]
 801212e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012132:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012134:	68bb      	ldr	r3, [r7, #8]
 8012136:	781b      	ldrb	r3, [r3, #0]
 8012138:	f003 030f 	and.w	r3, r3, #15
 801213c:	2101      	movs	r1, #1
 801213e:	fa01 f303 	lsl.w	r3, r1, r3
 8012142:	69f9      	ldr	r1, [r7, #28]
 8012144:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012148:	4313      	orrs	r3, r2
 801214a:	634b      	str	r3, [r1, #52]	@ 0x34
 801214c:	e13f      	b.n	80123ce <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801214e:	69fb      	ldr	r3, [r7, #28]
 8012150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012154:	689b      	ldr	r3, [r3, #8]
 8012156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801215a:	2b00      	cmp	r3, #0
 801215c:	d116      	bne.n	801218c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801215e:	69bb      	ldr	r3, [r7, #24]
 8012160:	015a      	lsls	r2, r3, #5
 8012162:	69fb      	ldr	r3, [r7, #28]
 8012164:	4413      	add	r3, r2
 8012166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	69ba      	ldr	r2, [r7, #24]
 801216e:	0151      	lsls	r1, r2, #5
 8012170:	69fa      	ldr	r2, [r7, #28]
 8012172:	440a      	add	r2, r1
 8012174:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012178:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801217c:	6013      	str	r3, [r2, #0]
 801217e:	e015      	b.n	80121ac <USB_EPStartXfer+0x310>
 8012180:	e007ffff 	.word	0xe007ffff
 8012184:	fff80000 	.word	0xfff80000
 8012188:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801218c:	69bb      	ldr	r3, [r7, #24]
 801218e:	015a      	lsls	r2, r3, #5
 8012190:	69fb      	ldr	r3, [r7, #28]
 8012192:	4413      	add	r3, r2
 8012194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	69ba      	ldr	r2, [r7, #24]
 801219c:	0151      	lsls	r1, r2, #5
 801219e:	69fa      	ldr	r2, [r7, #28]
 80121a0:	440a      	add	r2, r1
 80121a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80121a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80121aa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80121ac:	68bb      	ldr	r3, [r7, #8]
 80121ae:	68d9      	ldr	r1, [r3, #12]
 80121b0:	68bb      	ldr	r3, [r7, #8]
 80121b2:	781a      	ldrb	r2, [r3, #0]
 80121b4:	68bb      	ldr	r3, [r7, #8]
 80121b6:	691b      	ldr	r3, [r3, #16]
 80121b8:	b298      	uxth	r0, r3
 80121ba:	79fb      	ldrb	r3, [r7, #7]
 80121bc:	9300      	str	r3, [sp, #0]
 80121be:	4603      	mov	r3, r0
 80121c0:	68f8      	ldr	r0, [r7, #12]
 80121c2:	f000 f9b9 	bl	8012538 <USB_WritePacket>
 80121c6:	e102      	b.n	80123ce <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80121c8:	69bb      	ldr	r3, [r7, #24]
 80121ca:	015a      	lsls	r2, r3, #5
 80121cc:	69fb      	ldr	r3, [r7, #28]
 80121ce:	4413      	add	r3, r2
 80121d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80121d4:	691a      	ldr	r2, [r3, #16]
 80121d6:	69bb      	ldr	r3, [r7, #24]
 80121d8:	0159      	lsls	r1, r3, #5
 80121da:	69fb      	ldr	r3, [r7, #28]
 80121dc:	440b      	add	r3, r1
 80121de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80121e2:	4619      	mov	r1, r3
 80121e4:	4b7c      	ldr	r3, [pc, #496]	@ (80123d8 <USB_EPStartXfer+0x53c>)
 80121e6:	4013      	ands	r3, r2
 80121e8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80121ea:	69bb      	ldr	r3, [r7, #24]
 80121ec:	015a      	lsls	r2, r3, #5
 80121ee:	69fb      	ldr	r3, [r7, #28]
 80121f0:	4413      	add	r3, r2
 80121f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80121f6:	691a      	ldr	r2, [r3, #16]
 80121f8:	69bb      	ldr	r3, [r7, #24]
 80121fa:	0159      	lsls	r1, r3, #5
 80121fc:	69fb      	ldr	r3, [r7, #28]
 80121fe:	440b      	add	r3, r1
 8012200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012204:	4619      	mov	r1, r3
 8012206:	4b75      	ldr	r3, [pc, #468]	@ (80123dc <USB_EPStartXfer+0x540>)
 8012208:	4013      	ands	r3, r2
 801220a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 801220c:	69bb      	ldr	r3, [r7, #24]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d12f      	bne.n	8012272 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8012212:	68bb      	ldr	r3, [r7, #8]
 8012214:	691b      	ldr	r3, [r3, #16]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d003      	beq.n	8012222 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 801221a:	68bb      	ldr	r3, [r7, #8]
 801221c:	689a      	ldr	r2, [r3, #8]
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8012222:	68bb      	ldr	r3, [r7, #8]
 8012224:	689a      	ldr	r2, [r3, #8]
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801222a:	69bb      	ldr	r3, [r7, #24]
 801222c:	015a      	lsls	r2, r3, #5
 801222e:	69fb      	ldr	r3, [r7, #28]
 8012230:	4413      	add	r3, r2
 8012232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012236:	691a      	ldr	r2, [r3, #16]
 8012238:	68bb      	ldr	r3, [r7, #8]
 801223a:	6a1b      	ldr	r3, [r3, #32]
 801223c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012240:	69b9      	ldr	r1, [r7, #24]
 8012242:	0148      	lsls	r0, r1, #5
 8012244:	69f9      	ldr	r1, [r7, #28]
 8012246:	4401      	add	r1, r0
 8012248:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801224c:	4313      	orrs	r3, r2
 801224e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012250:	69bb      	ldr	r3, [r7, #24]
 8012252:	015a      	lsls	r2, r3, #5
 8012254:	69fb      	ldr	r3, [r7, #28]
 8012256:	4413      	add	r3, r2
 8012258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801225c:	691b      	ldr	r3, [r3, #16]
 801225e:	69ba      	ldr	r2, [r7, #24]
 8012260:	0151      	lsls	r1, r2, #5
 8012262:	69fa      	ldr	r2, [r7, #28]
 8012264:	440a      	add	r2, r1
 8012266:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801226a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801226e:	6113      	str	r3, [r2, #16]
 8012270:	e05f      	b.n	8012332 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8012272:	68bb      	ldr	r3, [r7, #8]
 8012274:	691b      	ldr	r3, [r3, #16]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d123      	bne.n	80122c2 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801227a:	69bb      	ldr	r3, [r7, #24]
 801227c:	015a      	lsls	r2, r3, #5
 801227e:	69fb      	ldr	r3, [r7, #28]
 8012280:	4413      	add	r3, r2
 8012282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012286:	691a      	ldr	r2, [r3, #16]
 8012288:	68bb      	ldr	r3, [r7, #8]
 801228a:	689b      	ldr	r3, [r3, #8]
 801228c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012290:	69b9      	ldr	r1, [r7, #24]
 8012292:	0148      	lsls	r0, r1, #5
 8012294:	69f9      	ldr	r1, [r7, #28]
 8012296:	4401      	add	r1, r0
 8012298:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801229c:	4313      	orrs	r3, r2
 801229e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80122a0:	69bb      	ldr	r3, [r7, #24]
 80122a2:	015a      	lsls	r2, r3, #5
 80122a4:	69fb      	ldr	r3, [r7, #28]
 80122a6:	4413      	add	r3, r2
 80122a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80122ac:	691b      	ldr	r3, [r3, #16]
 80122ae:	69ba      	ldr	r2, [r7, #24]
 80122b0:	0151      	lsls	r1, r2, #5
 80122b2:	69fa      	ldr	r2, [r7, #28]
 80122b4:	440a      	add	r2, r1
 80122b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80122ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80122be:	6113      	str	r3, [r2, #16]
 80122c0:	e037      	b.n	8012332 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	691a      	ldr	r2, [r3, #16]
 80122c6:	68bb      	ldr	r3, [r7, #8]
 80122c8:	689b      	ldr	r3, [r3, #8]
 80122ca:	4413      	add	r3, r2
 80122cc:	1e5a      	subs	r2, r3, #1
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	689b      	ldr	r3, [r3, #8]
 80122d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80122d6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80122d8:	68bb      	ldr	r3, [r7, #8]
 80122da:	689b      	ldr	r3, [r3, #8]
 80122dc:	8afa      	ldrh	r2, [r7, #22]
 80122de:	fb03 f202 	mul.w	r2, r3, r2
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80122e6:	69bb      	ldr	r3, [r7, #24]
 80122e8:	015a      	lsls	r2, r3, #5
 80122ea:	69fb      	ldr	r3, [r7, #28]
 80122ec:	4413      	add	r3, r2
 80122ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80122f2:	691a      	ldr	r2, [r3, #16]
 80122f4:	8afb      	ldrh	r3, [r7, #22]
 80122f6:	04d9      	lsls	r1, r3, #19
 80122f8:	4b39      	ldr	r3, [pc, #228]	@ (80123e0 <USB_EPStartXfer+0x544>)
 80122fa:	400b      	ands	r3, r1
 80122fc:	69b9      	ldr	r1, [r7, #24]
 80122fe:	0148      	lsls	r0, r1, #5
 8012300:	69f9      	ldr	r1, [r7, #28]
 8012302:	4401      	add	r1, r0
 8012304:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8012308:	4313      	orrs	r3, r2
 801230a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801230c:	69bb      	ldr	r3, [r7, #24]
 801230e:	015a      	lsls	r2, r3, #5
 8012310:	69fb      	ldr	r3, [r7, #28]
 8012312:	4413      	add	r3, r2
 8012314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012318:	691a      	ldr	r2, [r3, #16]
 801231a:	68bb      	ldr	r3, [r7, #8]
 801231c:	6a1b      	ldr	r3, [r3, #32]
 801231e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012322:	69b9      	ldr	r1, [r7, #24]
 8012324:	0148      	lsls	r0, r1, #5
 8012326:	69f9      	ldr	r1, [r7, #28]
 8012328:	4401      	add	r1, r0
 801232a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801232e:	4313      	orrs	r3, r2
 8012330:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8012332:	79fb      	ldrb	r3, [r7, #7]
 8012334:	2b01      	cmp	r3, #1
 8012336:	d10d      	bne.n	8012354 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	68db      	ldr	r3, [r3, #12]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d009      	beq.n	8012354 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012340:	68bb      	ldr	r3, [r7, #8]
 8012342:	68d9      	ldr	r1, [r3, #12]
 8012344:	69bb      	ldr	r3, [r7, #24]
 8012346:	015a      	lsls	r2, r3, #5
 8012348:	69fb      	ldr	r3, [r7, #28]
 801234a:	4413      	add	r3, r2
 801234c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012350:	460a      	mov	r2, r1
 8012352:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8012354:	68bb      	ldr	r3, [r7, #8]
 8012356:	791b      	ldrb	r3, [r3, #4]
 8012358:	2b01      	cmp	r3, #1
 801235a:	d128      	bne.n	80123ae <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801235c:	69fb      	ldr	r3, [r7, #28]
 801235e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012362:	689b      	ldr	r3, [r3, #8]
 8012364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012368:	2b00      	cmp	r3, #0
 801236a:	d110      	bne.n	801238e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801236c:	69bb      	ldr	r3, [r7, #24]
 801236e:	015a      	lsls	r2, r3, #5
 8012370:	69fb      	ldr	r3, [r7, #28]
 8012372:	4413      	add	r3, r2
 8012374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	69ba      	ldr	r2, [r7, #24]
 801237c:	0151      	lsls	r1, r2, #5
 801237e:	69fa      	ldr	r2, [r7, #28]
 8012380:	440a      	add	r2, r1
 8012382:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012386:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801238a:	6013      	str	r3, [r2, #0]
 801238c:	e00f      	b.n	80123ae <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801238e:	69bb      	ldr	r3, [r7, #24]
 8012390:	015a      	lsls	r2, r3, #5
 8012392:	69fb      	ldr	r3, [r7, #28]
 8012394:	4413      	add	r3, r2
 8012396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	69ba      	ldr	r2, [r7, #24]
 801239e:	0151      	lsls	r1, r2, #5
 80123a0:	69fa      	ldr	r2, [r7, #28]
 80123a2:	440a      	add	r2, r1
 80123a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80123a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80123ac:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80123ae:	69bb      	ldr	r3, [r7, #24]
 80123b0:	015a      	lsls	r2, r3, #5
 80123b2:	69fb      	ldr	r3, [r7, #28]
 80123b4:	4413      	add	r3, r2
 80123b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	69ba      	ldr	r2, [r7, #24]
 80123be:	0151      	lsls	r1, r2, #5
 80123c0:	69fa      	ldr	r2, [r7, #28]
 80123c2:	440a      	add	r2, r1
 80123c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80123c8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80123cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80123ce:	2300      	movs	r3, #0
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3720      	adds	r7, #32
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}
 80123d8:	fff80000 	.word	0xfff80000
 80123dc:	e007ffff 	.word	0xe007ffff
 80123e0:	1ff80000 	.word	0x1ff80000

080123e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80123e4:	b480      	push	{r7}
 80123e6:	b087      	sub	sp, #28
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
 80123ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80123ee:	2300      	movs	r3, #0
 80123f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80123f2:	2300      	movs	r3, #0
 80123f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	785b      	ldrb	r3, [r3, #1]
 80123fe:	2b01      	cmp	r3, #1
 8012400:	d14a      	bne.n	8012498 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	781b      	ldrb	r3, [r3, #0]
 8012406:	015a      	lsls	r2, r3, #5
 8012408:	693b      	ldr	r3, [r7, #16]
 801240a:	4413      	add	r3, r2
 801240c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012416:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801241a:	f040 8086 	bne.w	801252a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	781b      	ldrb	r3, [r3, #0]
 8012422:	015a      	lsls	r2, r3, #5
 8012424:	693b      	ldr	r3, [r7, #16]
 8012426:	4413      	add	r3, r2
 8012428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	683a      	ldr	r2, [r7, #0]
 8012430:	7812      	ldrb	r2, [r2, #0]
 8012432:	0151      	lsls	r1, r2, #5
 8012434:	693a      	ldr	r2, [r7, #16]
 8012436:	440a      	add	r2, r1
 8012438:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801243c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012440:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8012442:	683b      	ldr	r3, [r7, #0]
 8012444:	781b      	ldrb	r3, [r3, #0]
 8012446:	015a      	lsls	r2, r3, #5
 8012448:	693b      	ldr	r3, [r7, #16]
 801244a:	4413      	add	r3, r2
 801244c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	683a      	ldr	r2, [r7, #0]
 8012454:	7812      	ldrb	r2, [r2, #0]
 8012456:	0151      	lsls	r1, r2, #5
 8012458:	693a      	ldr	r2, [r7, #16]
 801245a:	440a      	add	r2, r1
 801245c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012460:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012464:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	3301      	adds	r3, #1
 801246a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8012472:	4293      	cmp	r3, r2
 8012474:	d902      	bls.n	801247c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8012476:	2301      	movs	r3, #1
 8012478:	75fb      	strb	r3, [r7, #23]
          break;
 801247a:	e056      	b.n	801252a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801247c:	683b      	ldr	r3, [r7, #0]
 801247e:	781b      	ldrb	r3, [r3, #0]
 8012480:	015a      	lsls	r2, r3, #5
 8012482:	693b      	ldr	r3, [r7, #16]
 8012484:	4413      	add	r3, r2
 8012486:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012490:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012494:	d0e7      	beq.n	8012466 <USB_EPStopXfer+0x82>
 8012496:	e048      	b.n	801252a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012498:	683b      	ldr	r3, [r7, #0]
 801249a:	781b      	ldrb	r3, [r3, #0]
 801249c:	015a      	lsls	r2, r3, #5
 801249e:	693b      	ldr	r3, [r7, #16]
 80124a0:	4413      	add	r3, r2
 80124a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80124ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80124b0:	d13b      	bne.n	801252a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80124b2:	683b      	ldr	r3, [r7, #0]
 80124b4:	781b      	ldrb	r3, [r3, #0]
 80124b6:	015a      	lsls	r2, r3, #5
 80124b8:	693b      	ldr	r3, [r7, #16]
 80124ba:	4413      	add	r3, r2
 80124bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	683a      	ldr	r2, [r7, #0]
 80124c4:	7812      	ldrb	r2, [r2, #0]
 80124c6:	0151      	lsls	r1, r2, #5
 80124c8:	693a      	ldr	r2, [r7, #16]
 80124ca:	440a      	add	r2, r1
 80124cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80124d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80124d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	781b      	ldrb	r3, [r3, #0]
 80124da:	015a      	lsls	r2, r3, #5
 80124dc:	693b      	ldr	r3, [r7, #16]
 80124de:	4413      	add	r3, r2
 80124e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	683a      	ldr	r2, [r7, #0]
 80124e8:	7812      	ldrb	r2, [r2, #0]
 80124ea:	0151      	lsls	r1, r2, #5
 80124ec:	693a      	ldr	r2, [r7, #16]
 80124ee:	440a      	add	r2, r1
 80124f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80124f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80124f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	3301      	adds	r3, #1
 80124fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	f242 7210 	movw	r2, #10000	@ 0x2710
 8012506:	4293      	cmp	r3, r2
 8012508:	d902      	bls.n	8012510 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801250a:	2301      	movs	r3, #1
 801250c:	75fb      	strb	r3, [r7, #23]
          break;
 801250e:	e00c      	b.n	801252a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8012510:	683b      	ldr	r3, [r7, #0]
 8012512:	781b      	ldrb	r3, [r3, #0]
 8012514:	015a      	lsls	r2, r3, #5
 8012516:	693b      	ldr	r3, [r7, #16]
 8012518:	4413      	add	r3, r2
 801251a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012524:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012528:	d0e7      	beq.n	80124fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801252a:	7dfb      	ldrb	r3, [r7, #23]
}
 801252c:	4618      	mov	r0, r3
 801252e:	371c      	adds	r7, #28
 8012530:	46bd      	mov	sp, r7
 8012532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012536:	4770      	bx	lr

08012538 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012538:	b480      	push	{r7}
 801253a:	b089      	sub	sp, #36	@ 0x24
 801253c:	af00      	add	r7, sp, #0
 801253e:	60f8      	str	r0, [r7, #12]
 8012540:	60b9      	str	r1, [r7, #8]
 8012542:	4611      	mov	r1, r2
 8012544:	461a      	mov	r2, r3
 8012546:	460b      	mov	r3, r1
 8012548:	71fb      	strb	r3, [r7, #7]
 801254a:	4613      	mov	r3, r2
 801254c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8012552:	68bb      	ldr	r3, [r7, #8]
 8012554:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8012556:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801255a:	2b00      	cmp	r3, #0
 801255c:	d123      	bne.n	80125a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801255e:	88bb      	ldrh	r3, [r7, #4]
 8012560:	3303      	adds	r3, #3
 8012562:	089b      	lsrs	r3, r3, #2
 8012564:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012566:	2300      	movs	r3, #0
 8012568:	61bb      	str	r3, [r7, #24]
 801256a:	e018      	b.n	801259e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801256c:	79fb      	ldrb	r3, [r7, #7]
 801256e:	031a      	lsls	r2, r3, #12
 8012570:	697b      	ldr	r3, [r7, #20]
 8012572:	4413      	add	r3, r2
 8012574:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012578:	461a      	mov	r2, r3
 801257a:	69fb      	ldr	r3, [r7, #28]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012580:	69fb      	ldr	r3, [r7, #28]
 8012582:	3301      	adds	r3, #1
 8012584:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012586:	69fb      	ldr	r3, [r7, #28]
 8012588:	3301      	adds	r3, #1
 801258a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801258c:	69fb      	ldr	r3, [r7, #28]
 801258e:	3301      	adds	r3, #1
 8012590:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012592:	69fb      	ldr	r3, [r7, #28]
 8012594:	3301      	adds	r3, #1
 8012596:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012598:	69bb      	ldr	r3, [r7, #24]
 801259a:	3301      	adds	r3, #1
 801259c:	61bb      	str	r3, [r7, #24]
 801259e:	69ba      	ldr	r2, [r7, #24]
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d3e2      	bcc.n	801256c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80125a6:	2300      	movs	r3, #0
}
 80125a8:	4618      	mov	r0, r3
 80125aa:	3724      	adds	r7, #36	@ 0x24
 80125ac:	46bd      	mov	sp, r7
 80125ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b2:	4770      	bx	lr

080125b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80125b4:	b480      	push	{r7}
 80125b6:	b08b      	sub	sp, #44	@ 0x2c
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	60f8      	str	r0, [r7, #12]
 80125bc:	60b9      	str	r1, [r7, #8]
 80125be:	4613      	mov	r3, r2
 80125c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80125c6:	68bb      	ldr	r3, [r7, #8]
 80125c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80125ca:	88fb      	ldrh	r3, [r7, #6]
 80125cc:	089b      	lsrs	r3, r3, #2
 80125ce:	b29b      	uxth	r3, r3
 80125d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80125d2:	88fb      	ldrh	r3, [r7, #6]
 80125d4:	f003 0303 	and.w	r3, r3, #3
 80125d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80125da:	2300      	movs	r3, #0
 80125dc:	623b      	str	r3, [r7, #32]
 80125de:	e014      	b.n	801260a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80125e0:	69bb      	ldr	r3, [r7, #24]
 80125e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80125e6:	681a      	ldr	r2, [r3, #0]
 80125e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80125ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125ee:	3301      	adds	r3, #1
 80125f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80125f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125f4:	3301      	adds	r3, #1
 80125f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80125f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125fa:	3301      	adds	r3, #1
 80125fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80125fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012600:	3301      	adds	r3, #1
 8012602:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8012604:	6a3b      	ldr	r3, [r7, #32]
 8012606:	3301      	adds	r3, #1
 8012608:	623b      	str	r3, [r7, #32]
 801260a:	6a3a      	ldr	r2, [r7, #32]
 801260c:	697b      	ldr	r3, [r7, #20]
 801260e:	429a      	cmp	r2, r3
 8012610:	d3e6      	bcc.n	80125e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8012612:	8bfb      	ldrh	r3, [r7, #30]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d01e      	beq.n	8012656 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8012618:	2300      	movs	r3, #0
 801261a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801261c:	69bb      	ldr	r3, [r7, #24]
 801261e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012622:	461a      	mov	r2, r3
 8012624:	f107 0310 	add.w	r3, r7, #16
 8012628:	6812      	ldr	r2, [r2, #0]
 801262a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801262c:	693a      	ldr	r2, [r7, #16]
 801262e:	6a3b      	ldr	r3, [r7, #32]
 8012630:	b2db      	uxtb	r3, r3
 8012632:	00db      	lsls	r3, r3, #3
 8012634:	fa22 f303 	lsr.w	r3, r2, r3
 8012638:	b2da      	uxtb	r2, r3
 801263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801263c:	701a      	strb	r2, [r3, #0]
      i++;
 801263e:	6a3b      	ldr	r3, [r7, #32]
 8012640:	3301      	adds	r3, #1
 8012642:	623b      	str	r3, [r7, #32]
      pDest++;
 8012644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012646:	3301      	adds	r3, #1
 8012648:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801264a:	8bfb      	ldrh	r3, [r7, #30]
 801264c:	3b01      	subs	r3, #1
 801264e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012650:	8bfb      	ldrh	r3, [r7, #30]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d1ea      	bne.n	801262c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8012656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012658:	4618      	mov	r0, r3
 801265a:	372c      	adds	r7, #44	@ 0x2c
 801265c:	46bd      	mov	sp, r7
 801265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012662:	4770      	bx	lr

08012664 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012664:	b480      	push	{r7}
 8012666:	b085      	sub	sp, #20
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
 801266c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012672:	683b      	ldr	r3, [r7, #0]
 8012674:	781b      	ldrb	r3, [r3, #0]
 8012676:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	785b      	ldrb	r3, [r3, #1]
 801267c:	2b01      	cmp	r3, #1
 801267e:	d12c      	bne.n	80126da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012680:	68bb      	ldr	r3, [r7, #8]
 8012682:	015a      	lsls	r2, r3, #5
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	4413      	add	r3, r2
 8012688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	2b00      	cmp	r3, #0
 8012690:	db12      	blt.n	80126b8 <USB_EPSetStall+0x54>
 8012692:	68bb      	ldr	r3, [r7, #8]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d00f      	beq.n	80126b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012698:	68bb      	ldr	r3, [r7, #8]
 801269a:	015a      	lsls	r2, r3, #5
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	4413      	add	r3, r2
 80126a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	68ba      	ldr	r2, [r7, #8]
 80126a8:	0151      	lsls	r1, r2, #5
 80126aa:	68fa      	ldr	r2, [r7, #12]
 80126ac:	440a      	add	r2, r1
 80126ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80126b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80126b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	015a      	lsls	r2, r3, #5
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	4413      	add	r3, r2
 80126c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	68ba      	ldr	r2, [r7, #8]
 80126c8:	0151      	lsls	r1, r2, #5
 80126ca:	68fa      	ldr	r2, [r7, #12]
 80126cc:	440a      	add	r2, r1
 80126ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80126d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80126d6:	6013      	str	r3, [r2, #0]
 80126d8:	e02b      	b.n	8012732 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80126da:	68bb      	ldr	r3, [r7, #8]
 80126dc:	015a      	lsls	r2, r3, #5
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	4413      	add	r3, r2
 80126e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	db12      	blt.n	8012712 <USB_EPSetStall+0xae>
 80126ec:	68bb      	ldr	r3, [r7, #8]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d00f      	beq.n	8012712 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80126f2:	68bb      	ldr	r3, [r7, #8]
 80126f4:	015a      	lsls	r2, r3, #5
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	4413      	add	r3, r2
 80126fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	68ba      	ldr	r2, [r7, #8]
 8012702:	0151      	lsls	r1, r2, #5
 8012704:	68fa      	ldr	r2, [r7, #12]
 8012706:	440a      	add	r2, r1
 8012708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801270c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8012710:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012712:	68bb      	ldr	r3, [r7, #8]
 8012714:	015a      	lsls	r2, r3, #5
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	4413      	add	r3, r2
 801271a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	68ba      	ldr	r2, [r7, #8]
 8012722:	0151      	lsls	r1, r2, #5
 8012724:	68fa      	ldr	r2, [r7, #12]
 8012726:	440a      	add	r2, r1
 8012728:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801272c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012730:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012732:	2300      	movs	r3, #0
}
 8012734:	4618      	mov	r0, r3
 8012736:	3714      	adds	r7, #20
 8012738:	46bd      	mov	sp, r7
 801273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273e:	4770      	bx	lr

08012740 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012740:	b480      	push	{r7}
 8012742:	b085      	sub	sp, #20
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
 8012748:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	781b      	ldrb	r3, [r3, #0]
 8012752:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012754:	683b      	ldr	r3, [r7, #0]
 8012756:	785b      	ldrb	r3, [r3, #1]
 8012758:	2b01      	cmp	r3, #1
 801275a:	d128      	bne.n	80127ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801275c:	68bb      	ldr	r3, [r7, #8]
 801275e:	015a      	lsls	r2, r3, #5
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	4413      	add	r3, r2
 8012764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	68ba      	ldr	r2, [r7, #8]
 801276c:	0151      	lsls	r1, r2, #5
 801276e:	68fa      	ldr	r2, [r7, #12]
 8012770:	440a      	add	r2, r1
 8012772:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012776:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801277a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	791b      	ldrb	r3, [r3, #4]
 8012780:	2b03      	cmp	r3, #3
 8012782:	d003      	beq.n	801278c <USB_EPClearStall+0x4c>
 8012784:	683b      	ldr	r3, [r7, #0]
 8012786:	791b      	ldrb	r3, [r3, #4]
 8012788:	2b02      	cmp	r3, #2
 801278a:	d138      	bne.n	80127fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801278c:	68bb      	ldr	r3, [r7, #8]
 801278e:	015a      	lsls	r2, r3, #5
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	4413      	add	r3, r2
 8012794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	68ba      	ldr	r2, [r7, #8]
 801279c:	0151      	lsls	r1, r2, #5
 801279e:	68fa      	ldr	r2, [r7, #12]
 80127a0:	440a      	add	r2, r1
 80127a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80127a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80127aa:	6013      	str	r3, [r2, #0]
 80127ac:	e027      	b.n	80127fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80127ae:	68bb      	ldr	r3, [r7, #8]
 80127b0:	015a      	lsls	r2, r3, #5
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	4413      	add	r3, r2
 80127b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	68ba      	ldr	r2, [r7, #8]
 80127be:	0151      	lsls	r1, r2, #5
 80127c0:	68fa      	ldr	r2, [r7, #12]
 80127c2:	440a      	add	r2, r1
 80127c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80127c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80127cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80127ce:	683b      	ldr	r3, [r7, #0]
 80127d0:	791b      	ldrb	r3, [r3, #4]
 80127d2:	2b03      	cmp	r3, #3
 80127d4:	d003      	beq.n	80127de <USB_EPClearStall+0x9e>
 80127d6:	683b      	ldr	r3, [r7, #0]
 80127d8:	791b      	ldrb	r3, [r3, #4]
 80127da:	2b02      	cmp	r3, #2
 80127dc:	d10f      	bne.n	80127fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80127de:	68bb      	ldr	r3, [r7, #8]
 80127e0:	015a      	lsls	r2, r3, #5
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	4413      	add	r3, r2
 80127e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	68ba      	ldr	r2, [r7, #8]
 80127ee:	0151      	lsls	r1, r2, #5
 80127f0:	68fa      	ldr	r2, [r7, #12]
 80127f2:	440a      	add	r2, r1
 80127f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80127f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80127fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80127fe:	2300      	movs	r3, #0
}
 8012800:	4618      	mov	r0, r3
 8012802:	3714      	adds	r7, #20
 8012804:	46bd      	mov	sp, r7
 8012806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280a:	4770      	bx	lr

0801280c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801280c:	b480      	push	{r7}
 801280e:	b085      	sub	sp, #20
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
 8012814:	460b      	mov	r3, r1
 8012816:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	68fa      	ldr	r2, [r7, #12]
 8012826:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801282a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 801282e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012836:	681a      	ldr	r2, [r3, #0]
 8012838:	78fb      	ldrb	r3, [r7, #3]
 801283a:	011b      	lsls	r3, r3, #4
 801283c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8012840:	68f9      	ldr	r1, [r7, #12]
 8012842:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012846:	4313      	orrs	r3, r2
 8012848:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801284a:	2300      	movs	r3, #0
}
 801284c:	4618      	mov	r0, r3
 801284e:	3714      	adds	r7, #20
 8012850:	46bd      	mov	sp, r7
 8012852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012856:	4770      	bx	lr

08012858 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8012858:	b480      	push	{r7}
 801285a:	b085      	sub	sp, #20
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	68fa      	ldr	r2, [r7, #12]
 801286e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012872:	f023 0303 	bic.w	r3, r3, #3
 8012876:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801287e:	685b      	ldr	r3, [r3, #4]
 8012880:	68fa      	ldr	r2, [r7, #12]
 8012882:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012886:	f023 0302 	bic.w	r3, r3, #2
 801288a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801288c:	2300      	movs	r3, #0
}
 801288e:	4618      	mov	r0, r3
 8012890:	3714      	adds	r7, #20
 8012892:	46bd      	mov	sp, r7
 8012894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012898:	4770      	bx	lr

0801289a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801289a:	b480      	push	{r7}
 801289c:	b085      	sub	sp, #20
 801289e:	af00      	add	r7, sp, #0
 80128a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	68fa      	ldr	r2, [r7, #12]
 80128b0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80128b4:	f023 0303 	bic.w	r3, r3, #3
 80128b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80128c0:	685b      	ldr	r3, [r3, #4]
 80128c2:	68fa      	ldr	r2, [r7, #12]
 80128c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80128c8:	f043 0302 	orr.w	r3, r3, #2
 80128cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80128ce:	2300      	movs	r3, #0
}
 80128d0:	4618      	mov	r0, r3
 80128d2:	3714      	adds	r7, #20
 80128d4:	46bd      	mov	sp, r7
 80128d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128da:	4770      	bx	lr

080128dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80128dc:	b480      	push	{r7}
 80128de:	b085      	sub	sp, #20
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	695b      	ldr	r3, [r3, #20]
 80128e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	699b      	ldr	r3, [r3, #24]
 80128ee:	68fa      	ldr	r2, [r7, #12]
 80128f0:	4013      	ands	r3, r2
 80128f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80128f4:	68fb      	ldr	r3, [r7, #12]
}
 80128f6:	4618      	mov	r0, r3
 80128f8:	3714      	adds	r7, #20
 80128fa:	46bd      	mov	sp, r7
 80128fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012900:	4770      	bx	lr

08012902 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8012902:	b480      	push	{r7}
 8012904:	b085      	sub	sp, #20
 8012906:	af00      	add	r7, sp, #0
 8012908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012914:	699b      	ldr	r3, [r3, #24]
 8012916:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801291e:	69db      	ldr	r3, [r3, #28]
 8012920:	68ba      	ldr	r2, [r7, #8]
 8012922:	4013      	ands	r3, r2
 8012924:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012926:	68bb      	ldr	r3, [r7, #8]
 8012928:	0c1b      	lsrs	r3, r3, #16
}
 801292a:	4618      	mov	r0, r3
 801292c:	3714      	adds	r7, #20
 801292e:	46bd      	mov	sp, r7
 8012930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012934:	4770      	bx	lr

08012936 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8012936:	b480      	push	{r7}
 8012938:	b085      	sub	sp, #20
 801293a:	af00      	add	r7, sp, #0
 801293c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012948:	699b      	ldr	r3, [r3, #24]
 801294a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012952:	69db      	ldr	r3, [r3, #28]
 8012954:	68ba      	ldr	r2, [r7, #8]
 8012956:	4013      	ands	r3, r2
 8012958:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801295a:	68bb      	ldr	r3, [r7, #8]
 801295c:	b29b      	uxth	r3, r3
}
 801295e:	4618      	mov	r0, r3
 8012960:	3714      	adds	r7, #20
 8012962:	46bd      	mov	sp, r7
 8012964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012968:	4770      	bx	lr

0801296a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801296a:	b480      	push	{r7}
 801296c:	b085      	sub	sp, #20
 801296e:	af00      	add	r7, sp, #0
 8012970:	6078      	str	r0, [r7, #4]
 8012972:	460b      	mov	r3, r1
 8012974:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801297a:	78fb      	ldrb	r3, [r7, #3]
 801297c:	015a      	lsls	r2, r3, #5
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	4413      	add	r3, r2
 8012982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012986:	689b      	ldr	r3, [r3, #8]
 8012988:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012990:	695b      	ldr	r3, [r3, #20]
 8012992:	68ba      	ldr	r2, [r7, #8]
 8012994:	4013      	ands	r3, r2
 8012996:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012998:	68bb      	ldr	r3, [r7, #8]
}
 801299a:	4618      	mov	r0, r3
 801299c:	3714      	adds	r7, #20
 801299e:	46bd      	mov	sp, r7
 80129a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a4:	4770      	bx	lr

080129a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80129a6:	b480      	push	{r7}
 80129a8:	b087      	sub	sp, #28
 80129aa:	af00      	add	r7, sp, #0
 80129ac:	6078      	str	r0, [r7, #4]
 80129ae:	460b      	mov	r3, r1
 80129b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80129b6:	697b      	ldr	r3, [r7, #20]
 80129b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80129bc:	691b      	ldr	r3, [r3, #16]
 80129be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80129c0:	697b      	ldr	r3, [r7, #20]
 80129c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80129c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80129c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80129ca:	78fb      	ldrb	r3, [r7, #3]
 80129cc:	f003 030f 	and.w	r3, r3, #15
 80129d0:	68fa      	ldr	r2, [r7, #12]
 80129d2:	fa22 f303 	lsr.w	r3, r2, r3
 80129d6:	01db      	lsls	r3, r3, #7
 80129d8:	b2db      	uxtb	r3, r3
 80129da:	693a      	ldr	r2, [r7, #16]
 80129dc:	4313      	orrs	r3, r2
 80129de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80129e0:	78fb      	ldrb	r3, [r7, #3]
 80129e2:	015a      	lsls	r2, r3, #5
 80129e4:	697b      	ldr	r3, [r7, #20]
 80129e6:	4413      	add	r3, r2
 80129e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80129ec:	689b      	ldr	r3, [r3, #8]
 80129ee:	693a      	ldr	r2, [r7, #16]
 80129f0:	4013      	ands	r3, r2
 80129f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80129f4:	68bb      	ldr	r3, [r7, #8]
}
 80129f6:	4618      	mov	r0, r3
 80129f8:	371c      	adds	r7, #28
 80129fa:	46bd      	mov	sp, r7
 80129fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a00:	4770      	bx	lr

08012a02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8012a02:	b480      	push	{r7}
 8012a04:	b083      	sub	sp, #12
 8012a06:	af00      	add	r7, sp, #0
 8012a08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	695b      	ldr	r3, [r3, #20]
 8012a0e:	f003 0301 	and.w	r3, r3, #1
}
 8012a12:	4618      	mov	r0, r3
 8012a14:	370c      	adds	r7, #12
 8012a16:	46bd      	mov	sp, r7
 8012a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1c:	4770      	bx	lr
	...

08012a20 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8012a20:	b480      	push	{r7}
 8012a22:	b085      	sub	sp, #20
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012a32:	681a      	ldr	r2, [r3, #0]
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012a3a:	4619      	mov	r1, r3
 8012a3c:	4b09      	ldr	r3, [pc, #36]	@ (8012a64 <USB_ActivateSetup+0x44>)
 8012a3e:	4013      	ands	r3, r2
 8012a40:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012a48:	685b      	ldr	r3, [r3, #4]
 8012a4a:	68fa      	ldr	r2, [r7, #12]
 8012a4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012a50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012a54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012a56:	2300      	movs	r3, #0
}
 8012a58:	4618      	mov	r0, r3
 8012a5a:	3714      	adds	r7, #20
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a62:	4770      	bx	lr
 8012a64:	fffff800 	.word	0xfffff800

08012a68 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8012a68:	b480      	push	{r7}
 8012a6a:	b087      	sub	sp, #28
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	60f8      	str	r0, [r7, #12]
 8012a70:	460b      	mov	r3, r1
 8012a72:	607a      	str	r2, [r7, #4]
 8012a74:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	333c      	adds	r3, #60	@ 0x3c
 8012a7e:	3304      	adds	r3, #4
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012a84:	693b      	ldr	r3, [r7, #16]
 8012a86:	4a26      	ldr	r2, [pc, #152]	@ (8012b20 <USB_EP0_OutStart+0xb8>)
 8012a88:	4293      	cmp	r3, r2
 8012a8a:	d90a      	bls.n	8012aa2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012a98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012a9c:	d101      	bne.n	8012aa2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	e037      	b.n	8012b12 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012aa8:	461a      	mov	r2, r3
 8012aaa:	2300      	movs	r3, #0
 8012aac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012ab4:	691b      	ldr	r3, [r3, #16]
 8012ab6:	697a      	ldr	r2, [r7, #20]
 8012ab8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012abc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012ac0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012ac2:	697b      	ldr	r3, [r7, #20]
 8012ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012ac8:	691b      	ldr	r3, [r3, #16]
 8012aca:	697a      	ldr	r2, [r7, #20]
 8012acc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012ad0:	f043 0318 	orr.w	r3, r3, #24
 8012ad4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012ad6:	697b      	ldr	r3, [r7, #20]
 8012ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012adc:	691b      	ldr	r3, [r3, #16]
 8012ade:	697a      	ldr	r2, [r7, #20]
 8012ae0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012ae4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8012ae8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8012aea:	7afb      	ldrb	r3, [r7, #11]
 8012aec:	2b01      	cmp	r3, #1
 8012aee:	d10f      	bne.n	8012b10 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012af0:	697b      	ldr	r3, [r7, #20]
 8012af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012af6:	461a      	mov	r2, r3
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8012afc:	697b      	ldr	r3, [r7, #20]
 8012afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	697a      	ldr	r2, [r7, #20]
 8012b06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012b0a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8012b0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012b10:	2300      	movs	r3, #0
}
 8012b12:	4618      	mov	r0, r3
 8012b14:	371c      	adds	r7, #28
 8012b16:	46bd      	mov	sp, r7
 8012b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1c:	4770      	bx	lr
 8012b1e:	bf00      	nop
 8012b20:	4f54300a 	.word	0x4f54300a

08012b24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012b24:	b480      	push	{r7}
 8012b26:	b085      	sub	sp, #20
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	3301      	adds	r3, #1
 8012b34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012b3c:	d901      	bls.n	8012b42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012b3e:	2303      	movs	r3, #3
 8012b40:	e01b      	b.n	8012b7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	691b      	ldr	r3, [r3, #16]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	daf2      	bge.n	8012b30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	691b      	ldr	r3, [r3, #16]
 8012b52:	f043 0201 	orr.w	r2, r3, #1
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	3301      	adds	r3, #1
 8012b5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012b66:	d901      	bls.n	8012b6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012b68:	2303      	movs	r3, #3
 8012b6a:	e006      	b.n	8012b7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	691b      	ldr	r3, [r3, #16]
 8012b70:	f003 0301 	and.w	r3, r3, #1
 8012b74:	2b01      	cmp	r3, #1
 8012b76:	d0f0      	beq.n	8012b5a <USB_CoreReset+0x36>

  return HAL_OK;
 8012b78:	2300      	movs	r3, #0
}
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	3714      	adds	r7, #20
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b84:	4770      	bx	lr
	...

08012b88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b084      	sub	sp, #16
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
 8012b90:	460b      	mov	r3, r1
 8012b92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012b94:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8012b98:	f002 fd08 	bl	80155ac <USBD_static_malloc>
 8012b9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d109      	bne.n	8012bb8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	32b0      	adds	r2, #176	@ 0xb0
 8012bae:	2100      	movs	r1, #0
 8012bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012bb4:	2302      	movs	r3, #2
 8012bb6:	e0d4      	b.n	8012d62 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012bb8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8012bbc:	2100      	movs	r1, #0
 8012bbe:	68f8      	ldr	r0, [r7, #12]
 8012bc0:	f002 fd5a 	bl	8015678 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	32b0      	adds	r2, #176	@ 0xb0
 8012bce:	68f9      	ldr	r1, [r7, #12]
 8012bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	32b0      	adds	r2, #176	@ 0xb0
 8012bde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	7c1b      	ldrb	r3, [r3, #16]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d138      	bne.n	8012c62 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012bf0:	4b5e      	ldr	r3, [pc, #376]	@ (8012d6c <USBD_CDC_Init+0x1e4>)
 8012bf2:	7819      	ldrb	r1, [r3, #0]
 8012bf4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012bf8:	2202      	movs	r2, #2
 8012bfa:	6878      	ldr	r0, [r7, #4]
 8012bfc:	f002 fbb3 	bl	8015366 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012c00:	4b5a      	ldr	r3, [pc, #360]	@ (8012d6c <USBD_CDC_Init+0x1e4>)
 8012c02:	781b      	ldrb	r3, [r3, #0]
 8012c04:	f003 020f 	and.w	r2, r3, #15
 8012c08:	6879      	ldr	r1, [r7, #4]
 8012c0a:	4613      	mov	r3, r2
 8012c0c:	009b      	lsls	r3, r3, #2
 8012c0e:	4413      	add	r3, r2
 8012c10:	009b      	lsls	r3, r3, #2
 8012c12:	440b      	add	r3, r1
 8012c14:	3324      	adds	r3, #36	@ 0x24
 8012c16:	2201      	movs	r2, #1
 8012c18:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012c1a:	4b55      	ldr	r3, [pc, #340]	@ (8012d70 <USBD_CDC_Init+0x1e8>)
 8012c1c:	7819      	ldrb	r1, [r3, #0]
 8012c1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012c22:	2202      	movs	r2, #2
 8012c24:	6878      	ldr	r0, [r7, #4]
 8012c26:	f002 fb9e 	bl	8015366 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012c2a:	4b51      	ldr	r3, [pc, #324]	@ (8012d70 <USBD_CDC_Init+0x1e8>)
 8012c2c:	781b      	ldrb	r3, [r3, #0]
 8012c2e:	f003 020f 	and.w	r2, r3, #15
 8012c32:	6879      	ldr	r1, [r7, #4]
 8012c34:	4613      	mov	r3, r2
 8012c36:	009b      	lsls	r3, r3, #2
 8012c38:	4413      	add	r3, r2
 8012c3a:	009b      	lsls	r3, r3, #2
 8012c3c:	440b      	add	r3, r1
 8012c3e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012c42:	2201      	movs	r2, #1
 8012c44:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012c46:	4b4b      	ldr	r3, [pc, #300]	@ (8012d74 <USBD_CDC_Init+0x1ec>)
 8012c48:	781b      	ldrb	r3, [r3, #0]
 8012c4a:	f003 020f 	and.w	r2, r3, #15
 8012c4e:	6879      	ldr	r1, [r7, #4]
 8012c50:	4613      	mov	r3, r2
 8012c52:	009b      	lsls	r3, r3, #2
 8012c54:	4413      	add	r3, r2
 8012c56:	009b      	lsls	r3, r3, #2
 8012c58:	440b      	add	r3, r1
 8012c5a:	3326      	adds	r3, #38	@ 0x26
 8012c5c:	2210      	movs	r2, #16
 8012c5e:	801a      	strh	r2, [r3, #0]
 8012c60:	e035      	b.n	8012cce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012c62:	4b42      	ldr	r3, [pc, #264]	@ (8012d6c <USBD_CDC_Init+0x1e4>)
 8012c64:	7819      	ldrb	r1, [r3, #0]
 8012c66:	2340      	movs	r3, #64	@ 0x40
 8012c68:	2202      	movs	r2, #2
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f002 fb7b 	bl	8015366 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012c70:	4b3e      	ldr	r3, [pc, #248]	@ (8012d6c <USBD_CDC_Init+0x1e4>)
 8012c72:	781b      	ldrb	r3, [r3, #0]
 8012c74:	f003 020f 	and.w	r2, r3, #15
 8012c78:	6879      	ldr	r1, [r7, #4]
 8012c7a:	4613      	mov	r3, r2
 8012c7c:	009b      	lsls	r3, r3, #2
 8012c7e:	4413      	add	r3, r2
 8012c80:	009b      	lsls	r3, r3, #2
 8012c82:	440b      	add	r3, r1
 8012c84:	3324      	adds	r3, #36	@ 0x24
 8012c86:	2201      	movs	r2, #1
 8012c88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012c8a:	4b39      	ldr	r3, [pc, #228]	@ (8012d70 <USBD_CDC_Init+0x1e8>)
 8012c8c:	7819      	ldrb	r1, [r3, #0]
 8012c8e:	2340      	movs	r3, #64	@ 0x40
 8012c90:	2202      	movs	r2, #2
 8012c92:	6878      	ldr	r0, [r7, #4]
 8012c94:	f002 fb67 	bl	8015366 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012c98:	4b35      	ldr	r3, [pc, #212]	@ (8012d70 <USBD_CDC_Init+0x1e8>)
 8012c9a:	781b      	ldrb	r3, [r3, #0]
 8012c9c:	f003 020f 	and.w	r2, r3, #15
 8012ca0:	6879      	ldr	r1, [r7, #4]
 8012ca2:	4613      	mov	r3, r2
 8012ca4:	009b      	lsls	r3, r3, #2
 8012ca6:	4413      	add	r3, r2
 8012ca8:	009b      	lsls	r3, r3, #2
 8012caa:	440b      	add	r3, r1
 8012cac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012cb0:	2201      	movs	r2, #1
 8012cb2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8012d74 <USBD_CDC_Init+0x1ec>)
 8012cb6:	781b      	ldrb	r3, [r3, #0]
 8012cb8:	f003 020f 	and.w	r2, r3, #15
 8012cbc:	6879      	ldr	r1, [r7, #4]
 8012cbe:	4613      	mov	r3, r2
 8012cc0:	009b      	lsls	r3, r3, #2
 8012cc2:	4413      	add	r3, r2
 8012cc4:	009b      	lsls	r3, r3, #2
 8012cc6:	440b      	add	r3, r1
 8012cc8:	3326      	adds	r3, #38	@ 0x26
 8012cca:	2210      	movs	r2, #16
 8012ccc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012cce:	4b29      	ldr	r3, [pc, #164]	@ (8012d74 <USBD_CDC_Init+0x1ec>)
 8012cd0:	7819      	ldrb	r1, [r3, #0]
 8012cd2:	2308      	movs	r3, #8
 8012cd4:	2203      	movs	r2, #3
 8012cd6:	6878      	ldr	r0, [r7, #4]
 8012cd8:	f002 fb45 	bl	8015366 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012cdc:	4b25      	ldr	r3, [pc, #148]	@ (8012d74 <USBD_CDC_Init+0x1ec>)
 8012cde:	781b      	ldrb	r3, [r3, #0]
 8012ce0:	f003 020f 	and.w	r2, r3, #15
 8012ce4:	6879      	ldr	r1, [r7, #4]
 8012ce6:	4613      	mov	r3, r2
 8012ce8:	009b      	lsls	r3, r3, #2
 8012cea:	4413      	add	r3, r2
 8012cec:	009b      	lsls	r3, r3, #2
 8012cee:	440b      	add	r3, r1
 8012cf0:	3324      	adds	r3, #36	@ 0x24
 8012cf2:	2201      	movs	r2, #1
 8012cf4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012d04:	687a      	ldr	r2, [r7, #4]
 8012d06:	33b0      	adds	r3, #176	@ 0xb0
 8012d08:	009b      	lsls	r3, r3, #2
 8012d0a:	4413      	add	r3, r2
 8012d0c:	685b      	ldr	r3, [r3, #4]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	2200      	movs	r2, #0
 8012d16:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d101      	bne.n	8012d30 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8012d2c:	2302      	movs	r3, #2
 8012d2e:	e018      	b.n	8012d62 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	7c1b      	ldrb	r3, [r3, #16]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d10a      	bne.n	8012d4e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012d38:	4b0d      	ldr	r3, [pc, #52]	@ (8012d70 <USBD_CDC_Init+0x1e8>)
 8012d3a:	7819      	ldrb	r1, [r3, #0]
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012d42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012d46:	6878      	ldr	r0, [r7, #4]
 8012d48:	f002 fbfc 	bl	8015544 <USBD_LL_PrepareReceive>
 8012d4c:	e008      	b.n	8012d60 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012d4e:	4b08      	ldr	r3, [pc, #32]	@ (8012d70 <USBD_CDC_Init+0x1e8>)
 8012d50:	7819      	ldrb	r1, [r3, #0]
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012d58:	2340      	movs	r3, #64	@ 0x40
 8012d5a:	6878      	ldr	r0, [r7, #4]
 8012d5c:	f002 fbf2 	bl	8015544 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012d60:	2300      	movs	r3, #0
}
 8012d62:	4618      	mov	r0, r3
 8012d64:	3710      	adds	r7, #16
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}
 8012d6a:	bf00      	nop
 8012d6c:	2400009f 	.word	0x2400009f
 8012d70:	240000a0 	.word	0x240000a0
 8012d74:	240000a1 	.word	0x240000a1

08012d78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b082      	sub	sp, #8
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
 8012d80:	460b      	mov	r3, r1
 8012d82:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8012d84:	4b3a      	ldr	r3, [pc, #232]	@ (8012e70 <USBD_CDC_DeInit+0xf8>)
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	4619      	mov	r1, r3
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f002 fb11 	bl	80153b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8012d90:	4b37      	ldr	r3, [pc, #220]	@ (8012e70 <USBD_CDC_DeInit+0xf8>)
 8012d92:	781b      	ldrb	r3, [r3, #0]
 8012d94:	f003 020f 	and.w	r2, r3, #15
 8012d98:	6879      	ldr	r1, [r7, #4]
 8012d9a:	4613      	mov	r3, r2
 8012d9c:	009b      	lsls	r3, r3, #2
 8012d9e:	4413      	add	r3, r2
 8012da0:	009b      	lsls	r3, r3, #2
 8012da2:	440b      	add	r3, r1
 8012da4:	3324      	adds	r3, #36	@ 0x24
 8012da6:	2200      	movs	r2, #0
 8012da8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8012daa:	4b32      	ldr	r3, [pc, #200]	@ (8012e74 <USBD_CDC_DeInit+0xfc>)
 8012dac:	781b      	ldrb	r3, [r3, #0]
 8012dae:	4619      	mov	r1, r3
 8012db0:	6878      	ldr	r0, [r7, #4]
 8012db2:	f002 fafe 	bl	80153b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8012db6:	4b2f      	ldr	r3, [pc, #188]	@ (8012e74 <USBD_CDC_DeInit+0xfc>)
 8012db8:	781b      	ldrb	r3, [r3, #0]
 8012dba:	f003 020f 	and.w	r2, r3, #15
 8012dbe:	6879      	ldr	r1, [r7, #4]
 8012dc0:	4613      	mov	r3, r2
 8012dc2:	009b      	lsls	r3, r3, #2
 8012dc4:	4413      	add	r3, r2
 8012dc6:	009b      	lsls	r3, r3, #2
 8012dc8:	440b      	add	r3, r1
 8012dca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012dce:	2200      	movs	r2, #0
 8012dd0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8012dd2:	4b29      	ldr	r3, [pc, #164]	@ (8012e78 <USBD_CDC_DeInit+0x100>)
 8012dd4:	781b      	ldrb	r3, [r3, #0]
 8012dd6:	4619      	mov	r1, r3
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	f002 faea 	bl	80153b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8012dde:	4b26      	ldr	r3, [pc, #152]	@ (8012e78 <USBD_CDC_DeInit+0x100>)
 8012de0:	781b      	ldrb	r3, [r3, #0]
 8012de2:	f003 020f 	and.w	r2, r3, #15
 8012de6:	6879      	ldr	r1, [r7, #4]
 8012de8:	4613      	mov	r3, r2
 8012dea:	009b      	lsls	r3, r3, #2
 8012dec:	4413      	add	r3, r2
 8012dee:	009b      	lsls	r3, r3, #2
 8012df0:	440b      	add	r3, r1
 8012df2:	3324      	adds	r3, #36	@ 0x24
 8012df4:	2200      	movs	r2, #0
 8012df6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8012df8:	4b1f      	ldr	r3, [pc, #124]	@ (8012e78 <USBD_CDC_DeInit+0x100>)
 8012dfa:	781b      	ldrb	r3, [r3, #0]
 8012dfc:	f003 020f 	and.w	r2, r3, #15
 8012e00:	6879      	ldr	r1, [r7, #4]
 8012e02:	4613      	mov	r3, r2
 8012e04:	009b      	lsls	r3, r3, #2
 8012e06:	4413      	add	r3, r2
 8012e08:	009b      	lsls	r3, r3, #2
 8012e0a:	440b      	add	r3, r1
 8012e0c:	3326      	adds	r3, #38	@ 0x26
 8012e0e:	2200      	movs	r2, #0
 8012e10:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	32b0      	adds	r2, #176	@ 0xb0
 8012e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d01f      	beq.n	8012e64 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012e2a:	687a      	ldr	r2, [r7, #4]
 8012e2c:	33b0      	adds	r3, #176	@ 0xb0
 8012e2e:	009b      	lsls	r3, r3, #2
 8012e30:	4413      	add	r3, r2
 8012e32:	685b      	ldr	r3, [r3, #4]
 8012e34:	685b      	ldr	r3, [r3, #4]
 8012e36:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	32b0      	adds	r2, #176	@ 0xb0
 8012e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e46:	4618      	mov	r0, r3
 8012e48:	f002 fbbe 	bl	80155c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	32b0      	adds	r2, #176	@ 0xb0
 8012e56:	2100      	movs	r1, #0
 8012e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2200      	movs	r2, #0
 8012e60:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012e64:	2300      	movs	r3, #0
}
 8012e66:	4618      	mov	r0, r3
 8012e68:	3708      	adds	r7, #8
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bd80      	pop	{r7, pc}
 8012e6e:	bf00      	nop
 8012e70:	2400009f 	.word	0x2400009f
 8012e74:	240000a0 	.word	0x240000a0
 8012e78:	240000a1 	.word	0x240000a1

08012e7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b086      	sub	sp, #24
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
 8012e84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	32b0      	adds	r2, #176	@ 0xb0
 8012e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e94:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012e96:	2300      	movs	r3, #0
 8012e98:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012ea2:	693b      	ldr	r3, [r7, #16]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d101      	bne.n	8012eac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8012ea8:	2303      	movs	r3, #3
 8012eaa:	e0bf      	b.n	801302c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	781b      	ldrb	r3, [r3, #0]
 8012eb0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d050      	beq.n	8012f5a <USBD_CDC_Setup+0xde>
 8012eb8:	2b20      	cmp	r3, #32
 8012eba:	f040 80af 	bne.w	801301c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	88db      	ldrh	r3, [r3, #6]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d03a      	beq.n	8012f3c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012ec6:	683b      	ldr	r3, [r7, #0]
 8012ec8:	781b      	ldrb	r3, [r3, #0]
 8012eca:	b25b      	sxtb	r3, r3
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	da1b      	bge.n	8012f08 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012ed6:	687a      	ldr	r2, [r7, #4]
 8012ed8:	33b0      	adds	r3, #176	@ 0xb0
 8012eda:	009b      	lsls	r3, r3, #2
 8012edc:	4413      	add	r3, r2
 8012ede:	685b      	ldr	r3, [r3, #4]
 8012ee0:	689b      	ldr	r3, [r3, #8]
 8012ee2:	683a      	ldr	r2, [r7, #0]
 8012ee4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8012ee6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012ee8:	683a      	ldr	r2, [r7, #0]
 8012eea:	88d2      	ldrh	r2, [r2, #6]
 8012eec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012eee:	683b      	ldr	r3, [r7, #0]
 8012ef0:	88db      	ldrh	r3, [r3, #6]
 8012ef2:	2b07      	cmp	r3, #7
 8012ef4:	bf28      	it	cs
 8012ef6:	2307      	movcs	r3, #7
 8012ef8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012efa:	693b      	ldr	r3, [r7, #16]
 8012efc:	89fa      	ldrh	r2, [r7, #14]
 8012efe:	4619      	mov	r1, r3
 8012f00:	6878      	ldr	r0, [r7, #4]
 8012f02:	f001 fdbd 	bl	8014a80 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8012f06:	e090      	b.n	801302a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	785a      	ldrb	r2, [r3, #1]
 8012f0c:	693b      	ldr	r3, [r7, #16]
 8012f0e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8012f12:	683b      	ldr	r3, [r7, #0]
 8012f14:	88db      	ldrh	r3, [r3, #6]
 8012f16:	2b3f      	cmp	r3, #63	@ 0x3f
 8012f18:	d803      	bhi.n	8012f22 <USBD_CDC_Setup+0xa6>
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	88db      	ldrh	r3, [r3, #6]
 8012f1e:	b2da      	uxtb	r2, r3
 8012f20:	e000      	b.n	8012f24 <USBD_CDC_Setup+0xa8>
 8012f22:	2240      	movs	r2, #64	@ 0x40
 8012f24:	693b      	ldr	r3, [r7, #16]
 8012f26:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8012f2a:	6939      	ldr	r1, [r7, #16]
 8012f2c:	693b      	ldr	r3, [r7, #16]
 8012f2e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8012f32:	461a      	mov	r2, r3
 8012f34:	6878      	ldr	r0, [r7, #4]
 8012f36:	f001 fdcf 	bl	8014ad8 <USBD_CtlPrepareRx>
      break;
 8012f3a:	e076      	b.n	801302a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012f42:	687a      	ldr	r2, [r7, #4]
 8012f44:	33b0      	adds	r3, #176	@ 0xb0
 8012f46:	009b      	lsls	r3, r3, #2
 8012f48:	4413      	add	r3, r2
 8012f4a:	685b      	ldr	r3, [r3, #4]
 8012f4c:	689b      	ldr	r3, [r3, #8]
 8012f4e:	683a      	ldr	r2, [r7, #0]
 8012f50:	7850      	ldrb	r0, [r2, #1]
 8012f52:	2200      	movs	r2, #0
 8012f54:	6839      	ldr	r1, [r7, #0]
 8012f56:	4798      	blx	r3
      break;
 8012f58:	e067      	b.n	801302a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012f5a:	683b      	ldr	r3, [r7, #0]
 8012f5c:	785b      	ldrb	r3, [r3, #1]
 8012f5e:	2b0b      	cmp	r3, #11
 8012f60:	d851      	bhi.n	8013006 <USBD_CDC_Setup+0x18a>
 8012f62:	a201      	add	r2, pc, #4	@ (adr r2, 8012f68 <USBD_CDC_Setup+0xec>)
 8012f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f68:	08012f99 	.word	0x08012f99
 8012f6c:	08013015 	.word	0x08013015
 8012f70:	08013007 	.word	0x08013007
 8012f74:	08013007 	.word	0x08013007
 8012f78:	08013007 	.word	0x08013007
 8012f7c:	08013007 	.word	0x08013007
 8012f80:	08013007 	.word	0x08013007
 8012f84:	08013007 	.word	0x08013007
 8012f88:	08013007 	.word	0x08013007
 8012f8c:	08013007 	.word	0x08013007
 8012f90:	08012fc3 	.word	0x08012fc3
 8012f94:	08012fed 	.word	0x08012fed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f9e:	b2db      	uxtb	r3, r3
 8012fa0:	2b03      	cmp	r3, #3
 8012fa2:	d107      	bne.n	8012fb4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012fa4:	f107 030a 	add.w	r3, r7, #10
 8012fa8:	2202      	movs	r2, #2
 8012faa:	4619      	mov	r1, r3
 8012fac:	6878      	ldr	r0, [r7, #4]
 8012fae:	f001 fd67 	bl	8014a80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012fb2:	e032      	b.n	801301a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012fb4:	6839      	ldr	r1, [r7, #0]
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f001 fce5 	bl	8014986 <USBD_CtlError>
            ret = USBD_FAIL;
 8012fbc:	2303      	movs	r3, #3
 8012fbe:	75fb      	strb	r3, [r7, #23]
          break;
 8012fc0:	e02b      	b.n	801301a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012fc8:	b2db      	uxtb	r3, r3
 8012fca:	2b03      	cmp	r3, #3
 8012fcc:	d107      	bne.n	8012fde <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012fce:	f107 030d 	add.w	r3, r7, #13
 8012fd2:	2201      	movs	r2, #1
 8012fd4:	4619      	mov	r1, r3
 8012fd6:	6878      	ldr	r0, [r7, #4]
 8012fd8:	f001 fd52 	bl	8014a80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012fdc:	e01d      	b.n	801301a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012fde:	6839      	ldr	r1, [r7, #0]
 8012fe0:	6878      	ldr	r0, [r7, #4]
 8012fe2:	f001 fcd0 	bl	8014986 <USBD_CtlError>
            ret = USBD_FAIL;
 8012fe6:	2303      	movs	r3, #3
 8012fe8:	75fb      	strb	r3, [r7, #23]
          break;
 8012fea:	e016      	b.n	801301a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ff2:	b2db      	uxtb	r3, r3
 8012ff4:	2b03      	cmp	r3, #3
 8012ff6:	d00f      	beq.n	8013018 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8012ff8:	6839      	ldr	r1, [r7, #0]
 8012ffa:	6878      	ldr	r0, [r7, #4]
 8012ffc:	f001 fcc3 	bl	8014986 <USBD_CtlError>
            ret = USBD_FAIL;
 8013000:	2303      	movs	r3, #3
 8013002:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013004:	e008      	b.n	8013018 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013006:	6839      	ldr	r1, [r7, #0]
 8013008:	6878      	ldr	r0, [r7, #4]
 801300a:	f001 fcbc 	bl	8014986 <USBD_CtlError>
          ret = USBD_FAIL;
 801300e:	2303      	movs	r3, #3
 8013010:	75fb      	strb	r3, [r7, #23]
          break;
 8013012:	e002      	b.n	801301a <USBD_CDC_Setup+0x19e>
          break;
 8013014:	bf00      	nop
 8013016:	e008      	b.n	801302a <USBD_CDC_Setup+0x1ae>
          break;
 8013018:	bf00      	nop
      }
      break;
 801301a:	e006      	b.n	801302a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801301c:	6839      	ldr	r1, [r7, #0]
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f001 fcb1 	bl	8014986 <USBD_CtlError>
      ret = USBD_FAIL;
 8013024:	2303      	movs	r3, #3
 8013026:	75fb      	strb	r3, [r7, #23]
      break;
 8013028:	bf00      	nop
  }

  return (uint8_t)ret;
 801302a:	7dfb      	ldrb	r3, [r7, #23]
}
 801302c:	4618      	mov	r0, r3
 801302e:	3718      	adds	r7, #24
 8013030:	46bd      	mov	sp, r7
 8013032:	bd80      	pop	{r7, pc}

08013034 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b084      	sub	sp, #16
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
 801303c:	460b      	mov	r3, r1
 801303e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013046:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	32b0      	adds	r2, #176	@ 0xb0
 8013052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d101      	bne.n	801305e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801305a:	2303      	movs	r3, #3
 801305c:	e065      	b.n	801312a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	32b0      	adds	r2, #176	@ 0xb0
 8013068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801306c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801306e:	78fb      	ldrb	r3, [r7, #3]
 8013070:	f003 020f 	and.w	r2, r3, #15
 8013074:	6879      	ldr	r1, [r7, #4]
 8013076:	4613      	mov	r3, r2
 8013078:	009b      	lsls	r3, r3, #2
 801307a:	4413      	add	r3, r2
 801307c:	009b      	lsls	r3, r3, #2
 801307e:	440b      	add	r3, r1
 8013080:	3318      	adds	r3, #24
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d02f      	beq.n	80130e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013088:	78fb      	ldrb	r3, [r7, #3]
 801308a:	f003 020f 	and.w	r2, r3, #15
 801308e:	6879      	ldr	r1, [r7, #4]
 8013090:	4613      	mov	r3, r2
 8013092:	009b      	lsls	r3, r3, #2
 8013094:	4413      	add	r3, r2
 8013096:	009b      	lsls	r3, r3, #2
 8013098:	440b      	add	r3, r1
 801309a:	3318      	adds	r3, #24
 801309c:	681a      	ldr	r2, [r3, #0]
 801309e:	78fb      	ldrb	r3, [r7, #3]
 80130a0:	f003 010f 	and.w	r1, r3, #15
 80130a4:	68f8      	ldr	r0, [r7, #12]
 80130a6:	460b      	mov	r3, r1
 80130a8:	00db      	lsls	r3, r3, #3
 80130aa:	440b      	add	r3, r1
 80130ac:	009b      	lsls	r3, r3, #2
 80130ae:	4403      	add	r3, r0
 80130b0:	331c      	adds	r3, #28
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80130b8:	fb01 f303 	mul.w	r3, r1, r3
 80130bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d112      	bne.n	80130e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80130c2:	78fb      	ldrb	r3, [r7, #3]
 80130c4:	f003 020f 	and.w	r2, r3, #15
 80130c8:	6879      	ldr	r1, [r7, #4]
 80130ca:	4613      	mov	r3, r2
 80130cc:	009b      	lsls	r3, r3, #2
 80130ce:	4413      	add	r3, r2
 80130d0:	009b      	lsls	r3, r3, #2
 80130d2:	440b      	add	r3, r1
 80130d4:	3318      	adds	r3, #24
 80130d6:	2200      	movs	r2, #0
 80130d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80130da:	78f9      	ldrb	r1, [r7, #3]
 80130dc:	2300      	movs	r3, #0
 80130de:	2200      	movs	r2, #0
 80130e0:	6878      	ldr	r0, [r7, #4]
 80130e2:	f002 fa0e 	bl	8015502 <USBD_LL_Transmit>
 80130e6:	e01f      	b.n	8013128 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80130e8:	68bb      	ldr	r3, [r7, #8]
 80130ea:	2200      	movs	r2, #0
 80130ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80130f6:	687a      	ldr	r2, [r7, #4]
 80130f8:	33b0      	adds	r3, #176	@ 0xb0
 80130fa:	009b      	lsls	r3, r3, #2
 80130fc:	4413      	add	r3, r2
 80130fe:	685b      	ldr	r3, [r3, #4]
 8013100:	691b      	ldr	r3, [r3, #16]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d010      	beq.n	8013128 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801310c:	687a      	ldr	r2, [r7, #4]
 801310e:	33b0      	adds	r3, #176	@ 0xb0
 8013110:	009b      	lsls	r3, r3, #2
 8013112:	4413      	add	r3, r2
 8013114:	685b      	ldr	r3, [r3, #4]
 8013116:	691b      	ldr	r3, [r3, #16]
 8013118:	68ba      	ldr	r2, [r7, #8]
 801311a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801311e:	68ba      	ldr	r2, [r7, #8]
 8013120:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8013124:	78fa      	ldrb	r2, [r7, #3]
 8013126:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013128:	2300      	movs	r3, #0
}
 801312a:	4618      	mov	r0, r3
 801312c:	3710      	adds	r7, #16
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}

08013132 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013132:	b580      	push	{r7, lr}
 8013134:	b084      	sub	sp, #16
 8013136:	af00      	add	r7, sp, #0
 8013138:	6078      	str	r0, [r7, #4]
 801313a:	460b      	mov	r3, r1
 801313c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	32b0      	adds	r2, #176	@ 0xb0
 8013148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801314c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	32b0      	adds	r2, #176	@ 0xb0
 8013158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d101      	bne.n	8013164 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013160:	2303      	movs	r3, #3
 8013162:	e01a      	b.n	801319a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013164:	78fb      	ldrb	r3, [r7, #3]
 8013166:	4619      	mov	r1, r3
 8013168:	6878      	ldr	r0, [r7, #4]
 801316a:	f002 fa0c 	bl	8015586 <USBD_LL_GetRxDataSize>
 801316e:	4602      	mov	r2, r0
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801317c:	687a      	ldr	r2, [r7, #4]
 801317e:	33b0      	adds	r3, #176	@ 0xb0
 8013180:	009b      	lsls	r3, r3, #2
 8013182:	4413      	add	r3, r2
 8013184:	685b      	ldr	r3, [r3, #4]
 8013186:	68db      	ldr	r3, [r3, #12]
 8013188:	68fa      	ldr	r2, [r7, #12]
 801318a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801318e:	68fa      	ldr	r2, [r7, #12]
 8013190:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8013194:	4611      	mov	r1, r2
 8013196:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013198:	2300      	movs	r3, #0
}
 801319a:	4618      	mov	r0, r3
 801319c:	3710      	adds	r7, #16
 801319e:	46bd      	mov	sp, r7
 80131a0:	bd80      	pop	{r7, pc}

080131a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80131a2:	b580      	push	{r7, lr}
 80131a4:	b084      	sub	sp, #16
 80131a6:	af00      	add	r7, sp, #0
 80131a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	32b0      	adds	r2, #176	@ 0xb0
 80131b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d101      	bne.n	80131c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80131c0:	2303      	movs	r3, #3
 80131c2:	e024      	b.n	801320e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80131ca:	687a      	ldr	r2, [r7, #4]
 80131cc:	33b0      	adds	r3, #176	@ 0xb0
 80131ce:	009b      	lsls	r3, r3, #2
 80131d0:	4413      	add	r3, r2
 80131d2:	685b      	ldr	r3, [r3, #4]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d019      	beq.n	801320c <USBD_CDC_EP0_RxReady+0x6a>
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80131de:	2bff      	cmp	r3, #255	@ 0xff
 80131e0:	d014      	beq.n	801320c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80131e8:	687a      	ldr	r2, [r7, #4]
 80131ea:	33b0      	adds	r3, #176	@ 0xb0
 80131ec:	009b      	lsls	r3, r3, #2
 80131ee:	4413      	add	r3, r2
 80131f0:	685b      	ldr	r3, [r3, #4]
 80131f2:	689b      	ldr	r3, [r3, #8]
 80131f4:	68fa      	ldr	r2, [r7, #12]
 80131f6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80131fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80131fc:	68fa      	ldr	r2, [r7, #12]
 80131fe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013202:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	22ff      	movs	r2, #255	@ 0xff
 8013208:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801320c:	2300      	movs	r3, #0
}
 801320e:	4618      	mov	r0, r3
 8013210:	3710      	adds	r7, #16
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}
	...

08013218 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b086      	sub	sp, #24
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013220:	2182      	movs	r1, #130	@ 0x82
 8013222:	4818      	ldr	r0, [pc, #96]	@ (8013284 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013224:	f000 fd4f 	bl	8013cc6 <USBD_GetEpDesc>
 8013228:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801322a:	2101      	movs	r1, #1
 801322c:	4815      	ldr	r0, [pc, #84]	@ (8013284 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801322e:	f000 fd4a 	bl	8013cc6 <USBD_GetEpDesc>
 8013232:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013234:	2181      	movs	r1, #129	@ 0x81
 8013236:	4813      	ldr	r0, [pc, #76]	@ (8013284 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013238:	f000 fd45 	bl	8013cc6 <USBD_GetEpDesc>
 801323c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801323e:	697b      	ldr	r3, [r7, #20]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d002      	beq.n	801324a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013244:	697b      	ldr	r3, [r7, #20]
 8013246:	2210      	movs	r2, #16
 8013248:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801324a:	693b      	ldr	r3, [r7, #16]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d006      	beq.n	801325e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013250:	693b      	ldr	r3, [r7, #16]
 8013252:	2200      	movs	r2, #0
 8013254:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013258:	711a      	strb	r2, [r3, #4]
 801325a:	2200      	movs	r2, #0
 801325c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d006      	beq.n	8013272 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	2200      	movs	r2, #0
 8013268:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801326c:	711a      	strb	r2, [r3, #4]
 801326e:	2200      	movs	r2, #0
 8013270:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	2243      	movs	r2, #67	@ 0x43
 8013276:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013278:	4b02      	ldr	r3, [pc, #8]	@ (8013284 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801327a:	4618      	mov	r0, r3
 801327c:	3718      	adds	r7, #24
 801327e:	46bd      	mov	sp, r7
 8013280:	bd80      	pop	{r7, pc}
 8013282:	bf00      	nop
 8013284:	2400005c 	.word	0x2400005c

08013288 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b086      	sub	sp, #24
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013290:	2182      	movs	r1, #130	@ 0x82
 8013292:	4818      	ldr	r0, [pc, #96]	@ (80132f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013294:	f000 fd17 	bl	8013cc6 <USBD_GetEpDesc>
 8013298:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801329a:	2101      	movs	r1, #1
 801329c:	4815      	ldr	r0, [pc, #84]	@ (80132f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801329e:	f000 fd12 	bl	8013cc6 <USBD_GetEpDesc>
 80132a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80132a4:	2181      	movs	r1, #129	@ 0x81
 80132a6:	4813      	ldr	r0, [pc, #76]	@ (80132f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80132a8:	f000 fd0d 	bl	8013cc6 <USBD_GetEpDesc>
 80132ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80132ae:	697b      	ldr	r3, [r7, #20]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d002      	beq.n	80132ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80132b4:	697b      	ldr	r3, [r7, #20]
 80132b6:	2210      	movs	r2, #16
 80132b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d006      	beq.n	80132ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80132c0:	693b      	ldr	r3, [r7, #16]
 80132c2:	2200      	movs	r2, #0
 80132c4:	711a      	strb	r2, [r3, #4]
 80132c6:	2200      	movs	r2, #0
 80132c8:	f042 0202 	orr.w	r2, r2, #2
 80132cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d006      	beq.n	80132e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	2200      	movs	r2, #0
 80132d8:	711a      	strb	r2, [r3, #4]
 80132da:	2200      	movs	r2, #0
 80132dc:	f042 0202 	orr.w	r2, r2, #2
 80132e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	2243      	movs	r2, #67	@ 0x43
 80132e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80132e8:	4b02      	ldr	r3, [pc, #8]	@ (80132f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80132ea:	4618      	mov	r0, r3
 80132ec:	3718      	adds	r7, #24
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bd80      	pop	{r7, pc}
 80132f2:	bf00      	nop
 80132f4:	2400005c 	.word	0x2400005c

080132f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b086      	sub	sp, #24
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013300:	2182      	movs	r1, #130	@ 0x82
 8013302:	4818      	ldr	r0, [pc, #96]	@ (8013364 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013304:	f000 fcdf 	bl	8013cc6 <USBD_GetEpDesc>
 8013308:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801330a:	2101      	movs	r1, #1
 801330c:	4815      	ldr	r0, [pc, #84]	@ (8013364 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801330e:	f000 fcda 	bl	8013cc6 <USBD_GetEpDesc>
 8013312:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013314:	2181      	movs	r1, #129	@ 0x81
 8013316:	4813      	ldr	r0, [pc, #76]	@ (8013364 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013318:	f000 fcd5 	bl	8013cc6 <USBD_GetEpDesc>
 801331c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801331e:	697b      	ldr	r3, [r7, #20]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d002      	beq.n	801332a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013324:	697b      	ldr	r3, [r7, #20]
 8013326:	2210      	movs	r2, #16
 8013328:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801332a:	693b      	ldr	r3, [r7, #16]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d006      	beq.n	801333e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013330:	693b      	ldr	r3, [r7, #16]
 8013332:	2200      	movs	r2, #0
 8013334:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013338:	711a      	strb	r2, [r3, #4]
 801333a:	2200      	movs	r2, #0
 801333c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d006      	beq.n	8013352 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	2200      	movs	r2, #0
 8013348:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801334c:	711a      	strb	r2, [r3, #4]
 801334e:	2200      	movs	r2, #0
 8013350:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	2243      	movs	r2, #67	@ 0x43
 8013356:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013358:	4b02      	ldr	r3, [pc, #8]	@ (8013364 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801335a:	4618      	mov	r0, r3
 801335c:	3718      	adds	r7, #24
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}
 8013362:	bf00      	nop
 8013364:	2400005c 	.word	0x2400005c

08013368 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013368:	b480      	push	{r7}
 801336a:	b083      	sub	sp, #12
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	220a      	movs	r2, #10
 8013374:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013376:	4b03      	ldr	r3, [pc, #12]	@ (8013384 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013378:	4618      	mov	r0, r3
 801337a:	370c      	adds	r7, #12
 801337c:	46bd      	mov	sp, r7
 801337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013382:	4770      	bx	lr
 8013384:	24000018 	.word	0x24000018

08013388 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013388:	b480      	push	{r7}
 801338a:	b083      	sub	sp, #12
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
 8013390:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013392:	683b      	ldr	r3, [r7, #0]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d101      	bne.n	801339c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013398:	2303      	movs	r3, #3
 801339a:	e009      	b.n	80133b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80133a2:	687a      	ldr	r2, [r7, #4]
 80133a4:	33b0      	adds	r3, #176	@ 0xb0
 80133a6:	009b      	lsls	r3, r3, #2
 80133a8:	4413      	add	r3, r2
 80133aa:	683a      	ldr	r2, [r7, #0]
 80133ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80133ae:	2300      	movs	r3, #0
}
 80133b0:	4618      	mov	r0, r3
 80133b2:	370c      	adds	r7, #12
 80133b4:	46bd      	mov	sp, r7
 80133b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ba:	4770      	bx	lr

080133bc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80133bc:	b480      	push	{r7}
 80133be:	b087      	sub	sp, #28
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	60f8      	str	r0, [r7, #12]
 80133c4:	60b9      	str	r1, [r7, #8]
 80133c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	32b0      	adds	r2, #176	@ 0xb0
 80133d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133d6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80133d8:	697b      	ldr	r3, [r7, #20]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d101      	bne.n	80133e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80133de:	2303      	movs	r3, #3
 80133e0:	e008      	b.n	80133f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80133e2:	697b      	ldr	r3, [r7, #20]
 80133e4:	68ba      	ldr	r2, [r7, #8]
 80133e6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80133ea:	697b      	ldr	r3, [r7, #20]
 80133ec:	687a      	ldr	r2, [r7, #4]
 80133ee:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80133f2:	2300      	movs	r3, #0
}
 80133f4:	4618      	mov	r0, r3
 80133f6:	371c      	adds	r7, #28
 80133f8:	46bd      	mov	sp, r7
 80133fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fe:	4770      	bx	lr

08013400 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013400:	b480      	push	{r7}
 8013402:	b085      	sub	sp, #20
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
 8013408:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	32b0      	adds	r2, #176	@ 0xb0
 8013414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013418:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d101      	bne.n	8013424 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013420:	2303      	movs	r3, #3
 8013422:	e004      	b.n	801342e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	683a      	ldr	r2, [r7, #0]
 8013428:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801342c:	2300      	movs	r3, #0
}
 801342e:	4618      	mov	r0, r3
 8013430:	3714      	adds	r7, #20
 8013432:	46bd      	mov	sp, r7
 8013434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013438:	4770      	bx	lr
	...

0801343c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b084      	sub	sp, #16
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	32b0      	adds	r2, #176	@ 0xb0
 801344e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013452:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013454:	2301      	movs	r3, #1
 8013456:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013458:	68bb      	ldr	r3, [r7, #8]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d101      	bne.n	8013462 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801345e:	2303      	movs	r3, #3
 8013460:	e025      	b.n	80134ae <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8013462:	68bb      	ldr	r3, [r7, #8]
 8013464:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013468:	2b00      	cmp	r3, #0
 801346a:	d11f      	bne.n	80134ac <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801346c:	68bb      	ldr	r3, [r7, #8]
 801346e:	2201      	movs	r2, #1
 8013470:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013474:	4b10      	ldr	r3, [pc, #64]	@ (80134b8 <USBD_CDC_TransmitPacket+0x7c>)
 8013476:	781b      	ldrb	r3, [r3, #0]
 8013478:	f003 020f 	and.w	r2, r3, #15
 801347c:	68bb      	ldr	r3, [r7, #8]
 801347e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8013482:	6878      	ldr	r0, [r7, #4]
 8013484:	4613      	mov	r3, r2
 8013486:	009b      	lsls	r3, r3, #2
 8013488:	4413      	add	r3, r2
 801348a:	009b      	lsls	r3, r3, #2
 801348c:	4403      	add	r3, r0
 801348e:	3318      	adds	r3, #24
 8013490:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8013492:	4b09      	ldr	r3, [pc, #36]	@ (80134b8 <USBD_CDC_TransmitPacket+0x7c>)
 8013494:	7819      	ldrb	r1, [r3, #0]
 8013496:	68bb      	ldr	r3, [r7, #8]
 8013498:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801349c:	68bb      	ldr	r3, [r7, #8]
 801349e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80134a2:	6878      	ldr	r0, [r7, #4]
 80134a4:	f002 f82d 	bl	8015502 <USBD_LL_Transmit>

    ret = USBD_OK;
 80134a8:	2300      	movs	r3, #0
 80134aa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80134ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80134ae:	4618      	mov	r0, r3
 80134b0:	3710      	adds	r7, #16
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}
 80134b6:	bf00      	nop
 80134b8:	2400009f 	.word	0x2400009f

080134bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b084      	sub	sp, #16
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	32b0      	adds	r2, #176	@ 0xb0
 80134ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	32b0      	adds	r2, #176	@ 0xb0
 80134de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d101      	bne.n	80134ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80134e6:	2303      	movs	r3, #3
 80134e8:	e018      	b.n	801351c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	7c1b      	ldrb	r3, [r3, #16]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d10a      	bne.n	8013508 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80134f2:	4b0c      	ldr	r3, [pc, #48]	@ (8013524 <USBD_CDC_ReceivePacket+0x68>)
 80134f4:	7819      	ldrb	r1, [r3, #0]
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80134fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013500:	6878      	ldr	r0, [r7, #4]
 8013502:	f002 f81f 	bl	8015544 <USBD_LL_PrepareReceive>
 8013506:	e008      	b.n	801351a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013508:	4b06      	ldr	r3, [pc, #24]	@ (8013524 <USBD_CDC_ReceivePacket+0x68>)
 801350a:	7819      	ldrb	r1, [r3, #0]
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013512:	2340      	movs	r3, #64	@ 0x40
 8013514:	6878      	ldr	r0, [r7, #4]
 8013516:	f002 f815 	bl	8015544 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801351a:	2300      	movs	r3, #0
}
 801351c:	4618      	mov	r0, r3
 801351e:	3710      	adds	r7, #16
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}
 8013524:	240000a0 	.word	0x240000a0

08013528 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b086      	sub	sp, #24
 801352c:	af00      	add	r7, sp, #0
 801352e:	60f8      	str	r0, [r7, #12]
 8013530:	60b9      	str	r1, [r7, #8]
 8013532:	4613      	mov	r3, r2
 8013534:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d101      	bne.n	8013540 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801353c:	2303      	movs	r3, #3
 801353e:	e01f      	b.n	8013580 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	2200      	movs	r2, #0
 8013544:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	2200      	movs	r2, #0
 801354c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	2200      	movs	r2, #0
 8013554:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013558:	68bb      	ldr	r3, [r7, #8]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d003      	beq.n	8013566 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	68ba      	ldr	r2, [r7, #8]
 8013562:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	2201      	movs	r2, #1
 801356a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	79fa      	ldrb	r2, [r7, #7]
 8013572:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013574:	68f8      	ldr	r0, [r7, #12]
 8013576:	f001 fe8b 	bl	8015290 <USBD_LL_Init>
 801357a:	4603      	mov	r3, r0
 801357c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801357e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013580:	4618      	mov	r0, r3
 8013582:	3718      	adds	r7, #24
 8013584:	46bd      	mov	sp, r7
 8013586:	bd80      	pop	{r7, pc}

08013588 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b084      	sub	sp, #16
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
 8013590:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013592:	2300      	movs	r3, #0
 8013594:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d101      	bne.n	80135a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801359c:	2303      	movs	r3, #3
 801359e:	e025      	b.n	80135ec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	683a      	ldr	r2, [r7, #0]
 80135a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	32ae      	adds	r2, #174	@ 0xae
 80135b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d00f      	beq.n	80135dc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	32ae      	adds	r2, #174	@ 0xae
 80135c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135cc:	f107 020e 	add.w	r2, r7, #14
 80135d0:	4610      	mov	r0, r2
 80135d2:	4798      	blx	r3
 80135d4:	4602      	mov	r2, r0
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80135e2:	1c5a      	adds	r2, r3, #1
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80135ea:	2300      	movs	r3, #0
}
 80135ec:	4618      	mov	r0, r3
 80135ee:	3710      	adds	r7, #16
 80135f0:	46bd      	mov	sp, r7
 80135f2:	bd80      	pop	{r7, pc}

080135f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b082      	sub	sp, #8
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80135fc:	6878      	ldr	r0, [r7, #4]
 80135fe:	f001 fe97 	bl	8015330 <USBD_LL_Start>
 8013602:	4603      	mov	r3, r0
}
 8013604:	4618      	mov	r0, r3
 8013606:	3708      	adds	r7, #8
 8013608:	46bd      	mov	sp, r7
 801360a:	bd80      	pop	{r7, pc}

0801360c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801360c:	b480      	push	{r7}
 801360e:	b083      	sub	sp, #12
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013614:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013616:	4618      	mov	r0, r3
 8013618:	370c      	adds	r7, #12
 801361a:	46bd      	mov	sp, r7
 801361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013620:	4770      	bx	lr

08013622 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013622:	b580      	push	{r7, lr}
 8013624:	b084      	sub	sp, #16
 8013626:	af00      	add	r7, sp, #0
 8013628:	6078      	str	r0, [r7, #4]
 801362a:	460b      	mov	r3, r1
 801362c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801362e:	2300      	movs	r3, #0
 8013630:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013638:	2b00      	cmp	r3, #0
 801363a:	d009      	beq.n	8013650 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	78fa      	ldrb	r2, [r7, #3]
 8013646:	4611      	mov	r1, r2
 8013648:	6878      	ldr	r0, [r7, #4]
 801364a:	4798      	blx	r3
 801364c:	4603      	mov	r3, r0
 801364e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013650:	7bfb      	ldrb	r3, [r7, #15]
}
 8013652:	4618      	mov	r0, r3
 8013654:	3710      	adds	r7, #16
 8013656:	46bd      	mov	sp, r7
 8013658:	bd80      	pop	{r7, pc}

0801365a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801365a:	b580      	push	{r7, lr}
 801365c:	b084      	sub	sp, #16
 801365e:	af00      	add	r7, sp, #0
 8013660:	6078      	str	r0, [r7, #4]
 8013662:	460b      	mov	r3, r1
 8013664:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013666:	2300      	movs	r3, #0
 8013668:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013670:	685b      	ldr	r3, [r3, #4]
 8013672:	78fa      	ldrb	r2, [r7, #3]
 8013674:	4611      	mov	r1, r2
 8013676:	6878      	ldr	r0, [r7, #4]
 8013678:	4798      	blx	r3
 801367a:	4603      	mov	r3, r0
 801367c:	2b00      	cmp	r3, #0
 801367e:	d001      	beq.n	8013684 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013680:	2303      	movs	r3, #3
 8013682:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013684:	7bfb      	ldrb	r3, [r7, #15]
}
 8013686:	4618      	mov	r0, r3
 8013688:	3710      	adds	r7, #16
 801368a:	46bd      	mov	sp, r7
 801368c:	bd80      	pop	{r7, pc}

0801368e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801368e:	b580      	push	{r7, lr}
 8013690:	b084      	sub	sp, #16
 8013692:	af00      	add	r7, sp, #0
 8013694:	6078      	str	r0, [r7, #4]
 8013696:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801369e:	6839      	ldr	r1, [r7, #0]
 80136a0:	4618      	mov	r0, r3
 80136a2:	f001 f936 	bl	8014912 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	2201      	movs	r2, #1
 80136aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80136b4:	461a      	mov	r2, r3
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80136c2:	f003 031f 	and.w	r3, r3, #31
 80136c6:	2b02      	cmp	r3, #2
 80136c8:	d01a      	beq.n	8013700 <USBD_LL_SetupStage+0x72>
 80136ca:	2b02      	cmp	r3, #2
 80136cc:	d822      	bhi.n	8013714 <USBD_LL_SetupStage+0x86>
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d002      	beq.n	80136d8 <USBD_LL_SetupStage+0x4a>
 80136d2:	2b01      	cmp	r3, #1
 80136d4:	d00a      	beq.n	80136ec <USBD_LL_SetupStage+0x5e>
 80136d6:	e01d      	b.n	8013714 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80136de:	4619      	mov	r1, r3
 80136e0:	6878      	ldr	r0, [r7, #4]
 80136e2:	f000 fb63 	bl	8013dac <USBD_StdDevReq>
 80136e6:	4603      	mov	r3, r0
 80136e8:	73fb      	strb	r3, [r7, #15]
      break;
 80136ea:	e020      	b.n	801372e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80136f2:	4619      	mov	r1, r3
 80136f4:	6878      	ldr	r0, [r7, #4]
 80136f6:	f000 fbcb 	bl	8013e90 <USBD_StdItfReq>
 80136fa:	4603      	mov	r3, r0
 80136fc:	73fb      	strb	r3, [r7, #15]
      break;
 80136fe:	e016      	b.n	801372e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013706:	4619      	mov	r1, r3
 8013708:	6878      	ldr	r0, [r7, #4]
 801370a:	f000 fc2d 	bl	8013f68 <USBD_StdEPReq>
 801370e:	4603      	mov	r3, r0
 8013710:	73fb      	strb	r3, [r7, #15]
      break;
 8013712:	e00c      	b.n	801372e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801371a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801371e:	b2db      	uxtb	r3, r3
 8013720:	4619      	mov	r1, r3
 8013722:	6878      	ldr	r0, [r7, #4]
 8013724:	f001 fe64 	bl	80153f0 <USBD_LL_StallEP>
 8013728:	4603      	mov	r3, r0
 801372a:	73fb      	strb	r3, [r7, #15]
      break;
 801372c:	bf00      	nop
  }

  return ret;
 801372e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013730:	4618      	mov	r0, r3
 8013732:	3710      	adds	r7, #16
 8013734:	46bd      	mov	sp, r7
 8013736:	bd80      	pop	{r7, pc}

08013738 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013738:	b580      	push	{r7, lr}
 801373a:	b086      	sub	sp, #24
 801373c:	af00      	add	r7, sp, #0
 801373e:	60f8      	str	r0, [r7, #12]
 8013740:	460b      	mov	r3, r1
 8013742:	607a      	str	r2, [r7, #4]
 8013744:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013746:	2300      	movs	r3, #0
 8013748:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801374a:	7afb      	ldrb	r3, [r7, #11]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d16e      	bne.n	801382e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8013756:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801375e:	2b03      	cmp	r3, #3
 8013760:	f040 8098 	bne.w	8013894 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013764:	693b      	ldr	r3, [r7, #16]
 8013766:	689a      	ldr	r2, [r3, #8]
 8013768:	693b      	ldr	r3, [r7, #16]
 801376a:	68db      	ldr	r3, [r3, #12]
 801376c:	429a      	cmp	r2, r3
 801376e:	d913      	bls.n	8013798 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013770:	693b      	ldr	r3, [r7, #16]
 8013772:	689a      	ldr	r2, [r3, #8]
 8013774:	693b      	ldr	r3, [r7, #16]
 8013776:	68db      	ldr	r3, [r3, #12]
 8013778:	1ad2      	subs	r2, r2, r3
 801377a:	693b      	ldr	r3, [r7, #16]
 801377c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801377e:	693b      	ldr	r3, [r7, #16]
 8013780:	68da      	ldr	r2, [r3, #12]
 8013782:	693b      	ldr	r3, [r7, #16]
 8013784:	689b      	ldr	r3, [r3, #8]
 8013786:	4293      	cmp	r3, r2
 8013788:	bf28      	it	cs
 801378a:	4613      	movcs	r3, r2
 801378c:	461a      	mov	r2, r3
 801378e:	6879      	ldr	r1, [r7, #4]
 8013790:	68f8      	ldr	r0, [r7, #12]
 8013792:	f001 f9be 	bl	8014b12 <USBD_CtlContinueRx>
 8013796:	e07d      	b.n	8013894 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801379e:	f003 031f 	and.w	r3, r3, #31
 80137a2:	2b02      	cmp	r3, #2
 80137a4:	d014      	beq.n	80137d0 <USBD_LL_DataOutStage+0x98>
 80137a6:	2b02      	cmp	r3, #2
 80137a8:	d81d      	bhi.n	80137e6 <USBD_LL_DataOutStage+0xae>
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d002      	beq.n	80137b4 <USBD_LL_DataOutStage+0x7c>
 80137ae:	2b01      	cmp	r3, #1
 80137b0:	d003      	beq.n	80137ba <USBD_LL_DataOutStage+0x82>
 80137b2:	e018      	b.n	80137e6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80137b4:	2300      	movs	r3, #0
 80137b6:	75bb      	strb	r3, [r7, #22]
            break;
 80137b8:	e018      	b.n	80137ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80137c0:	b2db      	uxtb	r3, r3
 80137c2:	4619      	mov	r1, r3
 80137c4:	68f8      	ldr	r0, [r7, #12]
 80137c6:	f000 fa64 	bl	8013c92 <USBD_CoreFindIF>
 80137ca:	4603      	mov	r3, r0
 80137cc:	75bb      	strb	r3, [r7, #22]
            break;
 80137ce:	e00d      	b.n	80137ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80137d6:	b2db      	uxtb	r3, r3
 80137d8:	4619      	mov	r1, r3
 80137da:	68f8      	ldr	r0, [r7, #12]
 80137dc:	f000 fa66 	bl	8013cac <USBD_CoreFindEP>
 80137e0:	4603      	mov	r3, r0
 80137e2:	75bb      	strb	r3, [r7, #22]
            break;
 80137e4:	e002      	b.n	80137ec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80137e6:	2300      	movs	r3, #0
 80137e8:	75bb      	strb	r3, [r7, #22]
            break;
 80137ea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80137ec:	7dbb      	ldrb	r3, [r7, #22]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d119      	bne.n	8013826 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80137f8:	b2db      	uxtb	r3, r3
 80137fa:	2b03      	cmp	r3, #3
 80137fc:	d113      	bne.n	8013826 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80137fe:	7dba      	ldrb	r2, [r7, #22]
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	32ae      	adds	r2, #174	@ 0xae
 8013804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013808:	691b      	ldr	r3, [r3, #16]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d00b      	beq.n	8013826 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801380e:	7dba      	ldrb	r2, [r7, #22]
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013816:	7dba      	ldrb	r2, [r7, #22]
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	32ae      	adds	r2, #174	@ 0xae
 801381c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013820:	691b      	ldr	r3, [r3, #16]
 8013822:	68f8      	ldr	r0, [r7, #12]
 8013824:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013826:	68f8      	ldr	r0, [r7, #12]
 8013828:	f001 f984 	bl	8014b34 <USBD_CtlSendStatus>
 801382c:	e032      	b.n	8013894 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801382e:	7afb      	ldrb	r3, [r7, #11]
 8013830:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013834:	b2db      	uxtb	r3, r3
 8013836:	4619      	mov	r1, r3
 8013838:	68f8      	ldr	r0, [r7, #12]
 801383a:	f000 fa37 	bl	8013cac <USBD_CoreFindEP>
 801383e:	4603      	mov	r3, r0
 8013840:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013842:	7dbb      	ldrb	r3, [r7, #22]
 8013844:	2bff      	cmp	r3, #255	@ 0xff
 8013846:	d025      	beq.n	8013894 <USBD_LL_DataOutStage+0x15c>
 8013848:	7dbb      	ldrb	r3, [r7, #22]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d122      	bne.n	8013894 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013854:	b2db      	uxtb	r3, r3
 8013856:	2b03      	cmp	r3, #3
 8013858:	d117      	bne.n	801388a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801385a:	7dba      	ldrb	r2, [r7, #22]
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	32ae      	adds	r2, #174	@ 0xae
 8013860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013864:	699b      	ldr	r3, [r3, #24]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d00f      	beq.n	801388a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801386a:	7dba      	ldrb	r2, [r7, #22]
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013872:	7dba      	ldrb	r2, [r7, #22]
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	32ae      	adds	r2, #174	@ 0xae
 8013878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801387c:	699b      	ldr	r3, [r3, #24]
 801387e:	7afa      	ldrb	r2, [r7, #11]
 8013880:	4611      	mov	r1, r2
 8013882:	68f8      	ldr	r0, [r7, #12]
 8013884:	4798      	blx	r3
 8013886:	4603      	mov	r3, r0
 8013888:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801388a:	7dfb      	ldrb	r3, [r7, #23]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d001      	beq.n	8013894 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013890:	7dfb      	ldrb	r3, [r7, #23]
 8013892:	e000      	b.n	8013896 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013894:	2300      	movs	r3, #0
}
 8013896:	4618      	mov	r0, r3
 8013898:	3718      	adds	r7, #24
 801389a:	46bd      	mov	sp, r7
 801389c:	bd80      	pop	{r7, pc}

0801389e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801389e:	b580      	push	{r7, lr}
 80138a0:	b086      	sub	sp, #24
 80138a2:	af00      	add	r7, sp, #0
 80138a4:	60f8      	str	r0, [r7, #12]
 80138a6:	460b      	mov	r3, r1
 80138a8:	607a      	str	r2, [r7, #4]
 80138aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80138ac:	7afb      	ldrb	r3, [r7, #11]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d16f      	bne.n	8013992 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	3314      	adds	r3, #20
 80138b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80138be:	2b02      	cmp	r3, #2
 80138c0:	d15a      	bne.n	8013978 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80138c2:	693b      	ldr	r3, [r7, #16]
 80138c4:	689a      	ldr	r2, [r3, #8]
 80138c6:	693b      	ldr	r3, [r7, #16]
 80138c8:	68db      	ldr	r3, [r3, #12]
 80138ca:	429a      	cmp	r2, r3
 80138cc:	d914      	bls.n	80138f8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80138ce:	693b      	ldr	r3, [r7, #16]
 80138d0:	689a      	ldr	r2, [r3, #8]
 80138d2:	693b      	ldr	r3, [r7, #16]
 80138d4:	68db      	ldr	r3, [r3, #12]
 80138d6:	1ad2      	subs	r2, r2, r3
 80138d8:	693b      	ldr	r3, [r7, #16]
 80138da:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80138dc:	693b      	ldr	r3, [r7, #16]
 80138de:	689b      	ldr	r3, [r3, #8]
 80138e0:	461a      	mov	r2, r3
 80138e2:	6879      	ldr	r1, [r7, #4]
 80138e4:	68f8      	ldr	r0, [r7, #12]
 80138e6:	f001 f8e6 	bl	8014ab6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80138ea:	2300      	movs	r3, #0
 80138ec:	2200      	movs	r2, #0
 80138ee:	2100      	movs	r1, #0
 80138f0:	68f8      	ldr	r0, [r7, #12]
 80138f2:	f001 fe27 	bl	8015544 <USBD_LL_PrepareReceive>
 80138f6:	e03f      	b.n	8013978 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80138f8:	693b      	ldr	r3, [r7, #16]
 80138fa:	68da      	ldr	r2, [r3, #12]
 80138fc:	693b      	ldr	r3, [r7, #16]
 80138fe:	689b      	ldr	r3, [r3, #8]
 8013900:	429a      	cmp	r2, r3
 8013902:	d11c      	bne.n	801393e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013904:	693b      	ldr	r3, [r7, #16]
 8013906:	685a      	ldr	r2, [r3, #4]
 8013908:	693b      	ldr	r3, [r7, #16]
 801390a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801390c:	429a      	cmp	r2, r3
 801390e:	d316      	bcc.n	801393e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013910:	693b      	ldr	r3, [r7, #16]
 8013912:	685a      	ldr	r2, [r3, #4]
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801391a:	429a      	cmp	r2, r3
 801391c:	d20f      	bcs.n	801393e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801391e:	2200      	movs	r2, #0
 8013920:	2100      	movs	r1, #0
 8013922:	68f8      	ldr	r0, [r7, #12]
 8013924:	f001 f8c7 	bl	8014ab6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	2200      	movs	r2, #0
 801392c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013930:	2300      	movs	r3, #0
 8013932:	2200      	movs	r2, #0
 8013934:	2100      	movs	r1, #0
 8013936:	68f8      	ldr	r0, [r7, #12]
 8013938:	f001 fe04 	bl	8015544 <USBD_LL_PrepareReceive>
 801393c:	e01c      	b.n	8013978 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013944:	b2db      	uxtb	r3, r3
 8013946:	2b03      	cmp	r3, #3
 8013948:	d10f      	bne.n	801396a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013950:	68db      	ldr	r3, [r3, #12]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d009      	beq.n	801396a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	2200      	movs	r2, #0
 801395a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013964:	68db      	ldr	r3, [r3, #12]
 8013966:	68f8      	ldr	r0, [r7, #12]
 8013968:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801396a:	2180      	movs	r1, #128	@ 0x80
 801396c:	68f8      	ldr	r0, [r7, #12]
 801396e:	f001 fd3f 	bl	80153f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013972:	68f8      	ldr	r0, [r7, #12]
 8013974:	f001 f8f1 	bl	8014b5a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801397e:	2b00      	cmp	r3, #0
 8013980:	d03a      	beq.n	80139f8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013982:	68f8      	ldr	r0, [r7, #12]
 8013984:	f7ff fe42 	bl	801360c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	2200      	movs	r2, #0
 801398c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8013990:	e032      	b.n	80139f8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013992:	7afb      	ldrb	r3, [r7, #11]
 8013994:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013998:	b2db      	uxtb	r3, r3
 801399a:	4619      	mov	r1, r3
 801399c:	68f8      	ldr	r0, [r7, #12]
 801399e:	f000 f985 	bl	8013cac <USBD_CoreFindEP>
 80139a2:	4603      	mov	r3, r0
 80139a4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80139a6:	7dfb      	ldrb	r3, [r7, #23]
 80139a8:	2bff      	cmp	r3, #255	@ 0xff
 80139aa:	d025      	beq.n	80139f8 <USBD_LL_DataInStage+0x15a>
 80139ac:	7dfb      	ldrb	r3, [r7, #23]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d122      	bne.n	80139f8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80139b8:	b2db      	uxtb	r3, r3
 80139ba:	2b03      	cmp	r3, #3
 80139bc:	d11c      	bne.n	80139f8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80139be:	7dfa      	ldrb	r2, [r7, #23]
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	32ae      	adds	r2, #174	@ 0xae
 80139c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139c8:	695b      	ldr	r3, [r3, #20]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d014      	beq.n	80139f8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80139ce:	7dfa      	ldrb	r2, [r7, #23]
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80139d6:	7dfa      	ldrb	r2, [r7, #23]
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	32ae      	adds	r2, #174	@ 0xae
 80139dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139e0:	695b      	ldr	r3, [r3, #20]
 80139e2:	7afa      	ldrb	r2, [r7, #11]
 80139e4:	4611      	mov	r1, r2
 80139e6:	68f8      	ldr	r0, [r7, #12]
 80139e8:	4798      	blx	r3
 80139ea:	4603      	mov	r3, r0
 80139ec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80139ee:	7dbb      	ldrb	r3, [r7, #22]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d001      	beq.n	80139f8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80139f4:	7dbb      	ldrb	r3, [r7, #22]
 80139f6:	e000      	b.n	80139fa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80139f8:	2300      	movs	r3, #0
}
 80139fa:	4618      	mov	r0, r3
 80139fc:	3718      	adds	r7, #24
 80139fe:	46bd      	mov	sp, r7
 8013a00:	bd80      	pop	{r7, pc}

08013a02 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013a02:	b580      	push	{r7, lr}
 8013a04:	b084      	sub	sp, #16
 8013a06:	af00      	add	r7, sp, #0
 8013a08:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	2201      	movs	r2, #1
 8013a12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	2200      	movs	r2, #0
 8013a1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	2200      	movs	r2, #0
 8013a22:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	2200      	movs	r2, #0
 8013a28:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	2200      	movs	r2, #0
 8013a30:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d014      	beq.n	8013a68 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a44:	685b      	ldr	r3, [r3, #4]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d00e      	beq.n	8013a68 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a50:	685b      	ldr	r3, [r3, #4]
 8013a52:	687a      	ldr	r2, [r7, #4]
 8013a54:	6852      	ldr	r2, [r2, #4]
 8013a56:	b2d2      	uxtb	r2, r2
 8013a58:	4611      	mov	r1, r2
 8013a5a:	6878      	ldr	r0, [r7, #4]
 8013a5c:	4798      	blx	r3
 8013a5e:	4603      	mov	r3, r0
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d001      	beq.n	8013a68 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013a64:	2303      	movs	r3, #3
 8013a66:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013a68:	2340      	movs	r3, #64	@ 0x40
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	2100      	movs	r1, #0
 8013a6e:	6878      	ldr	r0, [r7, #4]
 8013a70:	f001 fc79 	bl	8015366 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	2201      	movs	r2, #1
 8013a78:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	2240      	movs	r2, #64	@ 0x40
 8013a80:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013a84:	2340      	movs	r3, #64	@ 0x40
 8013a86:	2200      	movs	r2, #0
 8013a88:	2180      	movs	r1, #128	@ 0x80
 8013a8a:	6878      	ldr	r0, [r7, #4]
 8013a8c:	f001 fc6b 	bl	8015366 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	2201      	movs	r2, #1
 8013a94:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	2240      	movs	r2, #64	@ 0x40
 8013a9a:	621a      	str	r2, [r3, #32]

  return ret;
 8013a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	3710      	adds	r7, #16
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	bd80      	pop	{r7, pc}

08013aa6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013aa6:	b480      	push	{r7}
 8013aa8:	b083      	sub	sp, #12
 8013aaa:	af00      	add	r7, sp, #0
 8013aac:	6078      	str	r0, [r7, #4]
 8013aae:	460b      	mov	r3, r1
 8013ab0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	78fa      	ldrb	r2, [r7, #3]
 8013ab6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013ab8:	2300      	movs	r3, #0
}
 8013aba:	4618      	mov	r0, r3
 8013abc:	370c      	adds	r7, #12
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac4:	4770      	bx	lr

08013ac6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013ac6:	b480      	push	{r7}
 8013ac8:	b083      	sub	sp, #12
 8013aca:	af00      	add	r7, sp, #0
 8013acc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ad4:	b2db      	uxtb	r3, r3
 8013ad6:	2b04      	cmp	r3, #4
 8013ad8:	d006      	beq.n	8013ae8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ae0:	b2da      	uxtb	r2, r3
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	2204      	movs	r2, #4
 8013aec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8013af0:	2300      	movs	r3, #0
}
 8013af2:	4618      	mov	r0, r3
 8013af4:	370c      	adds	r7, #12
 8013af6:	46bd      	mov	sp, r7
 8013af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afc:	4770      	bx	lr

08013afe <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013afe:	b480      	push	{r7}
 8013b00:	b083      	sub	sp, #12
 8013b02:	af00      	add	r7, sp, #0
 8013b04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b0c:	b2db      	uxtb	r3, r3
 8013b0e:	2b04      	cmp	r3, #4
 8013b10:	d106      	bne.n	8013b20 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8013b18:	b2da      	uxtb	r2, r3
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013b20:	2300      	movs	r3, #0
}
 8013b22:	4618      	mov	r0, r3
 8013b24:	370c      	adds	r7, #12
 8013b26:	46bd      	mov	sp, r7
 8013b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2c:	4770      	bx	lr

08013b2e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013b2e:	b580      	push	{r7, lr}
 8013b30:	b082      	sub	sp, #8
 8013b32:	af00      	add	r7, sp, #0
 8013b34:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b3c:	b2db      	uxtb	r3, r3
 8013b3e:	2b03      	cmp	r3, #3
 8013b40:	d110      	bne.n	8013b64 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d00b      	beq.n	8013b64 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013b52:	69db      	ldr	r3, [r3, #28]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d005      	beq.n	8013b64 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013b5e:	69db      	ldr	r3, [r3, #28]
 8013b60:	6878      	ldr	r0, [r7, #4]
 8013b62:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013b64:	2300      	movs	r3, #0
}
 8013b66:	4618      	mov	r0, r3
 8013b68:	3708      	adds	r7, #8
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	bd80      	pop	{r7, pc}

08013b6e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013b6e:	b580      	push	{r7, lr}
 8013b70:	b082      	sub	sp, #8
 8013b72:	af00      	add	r7, sp, #0
 8013b74:	6078      	str	r0, [r7, #4]
 8013b76:	460b      	mov	r3, r1
 8013b78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	32ae      	adds	r2, #174	@ 0xae
 8013b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d101      	bne.n	8013b90 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8013b8c:	2303      	movs	r3, #3
 8013b8e:	e01c      	b.n	8013bca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b96:	b2db      	uxtb	r3, r3
 8013b98:	2b03      	cmp	r3, #3
 8013b9a:	d115      	bne.n	8013bc8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	32ae      	adds	r2, #174	@ 0xae
 8013ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013baa:	6a1b      	ldr	r3, [r3, #32]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d00b      	beq.n	8013bc8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	32ae      	adds	r2, #174	@ 0xae
 8013bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bbe:	6a1b      	ldr	r3, [r3, #32]
 8013bc0:	78fa      	ldrb	r2, [r7, #3]
 8013bc2:	4611      	mov	r1, r2
 8013bc4:	6878      	ldr	r0, [r7, #4]
 8013bc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013bc8:	2300      	movs	r3, #0
}
 8013bca:	4618      	mov	r0, r3
 8013bcc:	3708      	adds	r7, #8
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bd80      	pop	{r7, pc}

08013bd2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013bd2:	b580      	push	{r7, lr}
 8013bd4:	b082      	sub	sp, #8
 8013bd6:	af00      	add	r7, sp, #0
 8013bd8:	6078      	str	r0, [r7, #4]
 8013bda:	460b      	mov	r3, r1
 8013bdc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	32ae      	adds	r2, #174	@ 0xae
 8013be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d101      	bne.n	8013bf4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8013bf0:	2303      	movs	r3, #3
 8013bf2:	e01c      	b.n	8013c2e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013bfa:	b2db      	uxtb	r3, r3
 8013bfc:	2b03      	cmp	r3, #3
 8013bfe:	d115      	bne.n	8013c2c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	32ae      	adds	r2, #174	@ 0xae
 8013c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d00b      	beq.n	8013c2c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	32ae      	adds	r2, #174	@ 0xae
 8013c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c24:	78fa      	ldrb	r2, [r7, #3]
 8013c26:	4611      	mov	r1, r2
 8013c28:	6878      	ldr	r0, [r7, #4]
 8013c2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013c2c:	2300      	movs	r3, #0
}
 8013c2e:	4618      	mov	r0, r3
 8013c30:	3708      	adds	r7, #8
 8013c32:	46bd      	mov	sp, r7
 8013c34:	bd80      	pop	{r7, pc}

08013c36 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8013c36:	b480      	push	{r7}
 8013c38:	b083      	sub	sp, #12
 8013c3a:	af00      	add	r7, sp, #0
 8013c3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013c3e:	2300      	movs	r3, #0
}
 8013c40:	4618      	mov	r0, r3
 8013c42:	370c      	adds	r7, #12
 8013c44:	46bd      	mov	sp, r7
 8013c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4a:	4770      	bx	lr

08013c4c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b084      	sub	sp, #16
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8013c54:	2300      	movs	r3, #0
 8013c56:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	2201      	movs	r2, #1
 8013c5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d00e      	beq.n	8013c88 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013c70:	685b      	ldr	r3, [r3, #4]
 8013c72:	687a      	ldr	r2, [r7, #4]
 8013c74:	6852      	ldr	r2, [r2, #4]
 8013c76:	b2d2      	uxtb	r2, r2
 8013c78:	4611      	mov	r1, r2
 8013c7a:	6878      	ldr	r0, [r7, #4]
 8013c7c:	4798      	blx	r3
 8013c7e:	4603      	mov	r3, r0
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d001      	beq.n	8013c88 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8013c84:	2303      	movs	r3, #3
 8013c86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	3710      	adds	r7, #16
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}

08013c92 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013c92:	b480      	push	{r7}
 8013c94:	b083      	sub	sp, #12
 8013c96:	af00      	add	r7, sp, #0
 8013c98:	6078      	str	r0, [r7, #4]
 8013c9a:	460b      	mov	r3, r1
 8013c9c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013c9e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	370c      	adds	r7, #12
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013caa:	4770      	bx	lr

08013cac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013cac:	b480      	push	{r7}
 8013cae:	b083      	sub	sp, #12
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
 8013cb4:	460b      	mov	r3, r1
 8013cb6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013cb8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013cba:	4618      	mov	r0, r3
 8013cbc:	370c      	adds	r7, #12
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc4:	4770      	bx	lr

08013cc6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013cc6:	b580      	push	{r7, lr}
 8013cc8:	b086      	sub	sp, #24
 8013cca:	af00      	add	r7, sp, #0
 8013ccc:	6078      	str	r0, [r7, #4]
 8013cce:	460b      	mov	r3, r1
 8013cd0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013cda:	2300      	movs	r3, #0
 8013cdc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	885b      	ldrh	r3, [r3, #2]
 8013ce2:	b29b      	uxth	r3, r3
 8013ce4:	68fa      	ldr	r2, [r7, #12]
 8013ce6:	7812      	ldrb	r2, [r2, #0]
 8013ce8:	4293      	cmp	r3, r2
 8013cea:	d91f      	bls.n	8013d2c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	781b      	ldrb	r3, [r3, #0]
 8013cf0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013cf2:	e013      	b.n	8013d1c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013cf4:	f107 030a 	add.w	r3, r7, #10
 8013cf8:	4619      	mov	r1, r3
 8013cfa:	6978      	ldr	r0, [r7, #20]
 8013cfc:	f000 f81b 	bl	8013d36 <USBD_GetNextDesc>
 8013d00:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013d02:	697b      	ldr	r3, [r7, #20]
 8013d04:	785b      	ldrb	r3, [r3, #1]
 8013d06:	2b05      	cmp	r3, #5
 8013d08:	d108      	bne.n	8013d1c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013d0a:	697b      	ldr	r3, [r7, #20]
 8013d0c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013d0e:	693b      	ldr	r3, [r7, #16]
 8013d10:	789b      	ldrb	r3, [r3, #2]
 8013d12:	78fa      	ldrb	r2, [r7, #3]
 8013d14:	429a      	cmp	r2, r3
 8013d16:	d008      	beq.n	8013d2a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013d18:	2300      	movs	r3, #0
 8013d1a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	885b      	ldrh	r3, [r3, #2]
 8013d20:	b29a      	uxth	r2, r3
 8013d22:	897b      	ldrh	r3, [r7, #10]
 8013d24:	429a      	cmp	r2, r3
 8013d26:	d8e5      	bhi.n	8013cf4 <USBD_GetEpDesc+0x2e>
 8013d28:	e000      	b.n	8013d2c <USBD_GetEpDesc+0x66>
          break;
 8013d2a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013d2c:	693b      	ldr	r3, [r7, #16]
}
 8013d2e:	4618      	mov	r0, r3
 8013d30:	3718      	adds	r7, #24
 8013d32:	46bd      	mov	sp, r7
 8013d34:	bd80      	pop	{r7, pc}

08013d36 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013d36:	b480      	push	{r7}
 8013d38:	b085      	sub	sp, #20
 8013d3a:	af00      	add	r7, sp, #0
 8013d3c:	6078      	str	r0, [r7, #4]
 8013d3e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013d44:	683b      	ldr	r3, [r7, #0]
 8013d46:	881b      	ldrh	r3, [r3, #0]
 8013d48:	68fa      	ldr	r2, [r7, #12]
 8013d4a:	7812      	ldrb	r2, [r2, #0]
 8013d4c:	4413      	add	r3, r2
 8013d4e:	b29a      	uxth	r2, r3
 8013d50:	683b      	ldr	r3, [r7, #0]
 8013d52:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	781b      	ldrb	r3, [r3, #0]
 8013d58:	461a      	mov	r2, r3
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	4413      	add	r3, r2
 8013d5e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013d60:	68fb      	ldr	r3, [r7, #12]
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	3714      	adds	r7, #20
 8013d66:	46bd      	mov	sp, r7
 8013d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d6c:	4770      	bx	lr

08013d6e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013d6e:	b480      	push	{r7}
 8013d70:	b087      	sub	sp, #28
 8013d72:	af00      	add	r7, sp, #0
 8013d74:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	781b      	ldrb	r3, [r3, #0]
 8013d7e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013d80:	697b      	ldr	r3, [r7, #20]
 8013d82:	3301      	adds	r3, #1
 8013d84:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013d86:	697b      	ldr	r3, [r7, #20]
 8013d88:	781b      	ldrb	r3, [r3, #0]
 8013d8a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013d8c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8013d90:	021b      	lsls	r3, r3, #8
 8013d92:	b21a      	sxth	r2, r3
 8013d94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013d98:	4313      	orrs	r3, r2
 8013d9a:	b21b      	sxth	r3, r3
 8013d9c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013d9e:	89fb      	ldrh	r3, [r7, #14]
}
 8013da0:	4618      	mov	r0, r3
 8013da2:	371c      	adds	r7, #28
 8013da4:	46bd      	mov	sp, r7
 8013da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013daa:	4770      	bx	lr

08013dac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b084      	sub	sp, #16
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
 8013db4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013db6:	2300      	movs	r3, #0
 8013db8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013dba:	683b      	ldr	r3, [r7, #0]
 8013dbc:	781b      	ldrb	r3, [r3, #0]
 8013dbe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013dc2:	2b40      	cmp	r3, #64	@ 0x40
 8013dc4:	d005      	beq.n	8013dd2 <USBD_StdDevReq+0x26>
 8013dc6:	2b40      	cmp	r3, #64	@ 0x40
 8013dc8:	d857      	bhi.n	8013e7a <USBD_StdDevReq+0xce>
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d00f      	beq.n	8013dee <USBD_StdDevReq+0x42>
 8013dce:	2b20      	cmp	r3, #32
 8013dd0:	d153      	bne.n	8013e7a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	32ae      	adds	r2, #174	@ 0xae
 8013ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013de0:	689b      	ldr	r3, [r3, #8]
 8013de2:	6839      	ldr	r1, [r7, #0]
 8013de4:	6878      	ldr	r0, [r7, #4]
 8013de6:	4798      	blx	r3
 8013de8:	4603      	mov	r3, r0
 8013dea:	73fb      	strb	r3, [r7, #15]
      break;
 8013dec:	e04a      	b.n	8013e84 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013dee:	683b      	ldr	r3, [r7, #0]
 8013df0:	785b      	ldrb	r3, [r3, #1]
 8013df2:	2b09      	cmp	r3, #9
 8013df4:	d83b      	bhi.n	8013e6e <USBD_StdDevReq+0xc2>
 8013df6:	a201      	add	r2, pc, #4	@ (adr r2, 8013dfc <USBD_StdDevReq+0x50>)
 8013df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dfc:	08013e51 	.word	0x08013e51
 8013e00:	08013e65 	.word	0x08013e65
 8013e04:	08013e6f 	.word	0x08013e6f
 8013e08:	08013e5b 	.word	0x08013e5b
 8013e0c:	08013e6f 	.word	0x08013e6f
 8013e10:	08013e2f 	.word	0x08013e2f
 8013e14:	08013e25 	.word	0x08013e25
 8013e18:	08013e6f 	.word	0x08013e6f
 8013e1c:	08013e47 	.word	0x08013e47
 8013e20:	08013e39 	.word	0x08013e39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013e24:	6839      	ldr	r1, [r7, #0]
 8013e26:	6878      	ldr	r0, [r7, #4]
 8013e28:	f000 fa3c 	bl	80142a4 <USBD_GetDescriptor>
          break;
 8013e2c:	e024      	b.n	8013e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013e2e:	6839      	ldr	r1, [r7, #0]
 8013e30:	6878      	ldr	r0, [r7, #4]
 8013e32:	f000 fbcb 	bl	80145cc <USBD_SetAddress>
          break;
 8013e36:	e01f      	b.n	8013e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013e38:	6839      	ldr	r1, [r7, #0]
 8013e3a:	6878      	ldr	r0, [r7, #4]
 8013e3c:	f000 fc0a 	bl	8014654 <USBD_SetConfig>
 8013e40:	4603      	mov	r3, r0
 8013e42:	73fb      	strb	r3, [r7, #15]
          break;
 8013e44:	e018      	b.n	8013e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013e46:	6839      	ldr	r1, [r7, #0]
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	f000 fcad 	bl	80147a8 <USBD_GetConfig>
          break;
 8013e4e:	e013      	b.n	8013e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013e50:	6839      	ldr	r1, [r7, #0]
 8013e52:	6878      	ldr	r0, [r7, #4]
 8013e54:	f000 fcde 	bl	8014814 <USBD_GetStatus>
          break;
 8013e58:	e00e      	b.n	8013e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013e5a:	6839      	ldr	r1, [r7, #0]
 8013e5c:	6878      	ldr	r0, [r7, #4]
 8013e5e:	f000 fd0d 	bl	801487c <USBD_SetFeature>
          break;
 8013e62:	e009      	b.n	8013e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013e64:	6839      	ldr	r1, [r7, #0]
 8013e66:	6878      	ldr	r0, [r7, #4]
 8013e68:	f000 fd31 	bl	80148ce <USBD_ClrFeature>
          break;
 8013e6c:	e004      	b.n	8013e78 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8013e6e:	6839      	ldr	r1, [r7, #0]
 8013e70:	6878      	ldr	r0, [r7, #4]
 8013e72:	f000 fd88 	bl	8014986 <USBD_CtlError>
          break;
 8013e76:	bf00      	nop
      }
      break;
 8013e78:	e004      	b.n	8013e84 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8013e7a:	6839      	ldr	r1, [r7, #0]
 8013e7c:	6878      	ldr	r0, [r7, #4]
 8013e7e:	f000 fd82 	bl	8014986 <USBD_CtlError>
      break;
 8013e82:	bf00      	nop
  }

  return ret;
 8013e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e86:	4618      	mov	r0, r3
 8013e88:	3710      	adds	r7, #16
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	bd80      	pop	{r7, pc}
 8013e8e:	bf00      	nop

08013e90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b084      	sub	sp, #16
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
 8013e98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013e9e:	683b      	ldr	r3, [r7, #0]
 8013ea0:	781b      	ldrb	r3, [r3, #0]
 8013ea2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013ea6:	2b40      	cmp	r3, #64	@ 0x40
 8013ea8:	d005      	beq.n	8013eb6 <USBD_StdItfReq+0x26>
 8013eaa:	2b40      	cmp	r3, #64	@ 0x40
 8013eac:	d852      	bhi.n	8013f54 <USBD_StdItfReq+0xc4>
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d001      	beq.n	8013eb6 <USBD_StdItfReq+0x26>
 8013eb2:	2b20      	cmp	r3, #32
 8013eb4:	d14e      	bne.n	8013f54 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ebc:	b2db      	uxtb	r3, r3
 8013ebe:	3b01      	subs	r3, #1
 8013ec0:	2b02      	cmp	r3, #2
 8013ec2:	d840      	bhi.n	8013f46 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013ec4:	683b      	ldr	r3, [r7, #0]
 8013ec6:	889b      	ldrh	r3, [r3, #4]
 8013ec8:	b2db      	uxtb	r3, r3
 8013eca:	2b01      	cmp	r3, #1
 8013ecc:	d836      	bhi.n	8013f3c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8013ece:	683b      	ldr	r3, [r7, #0]
 8013ed0:	889b      	ldrh	r3, [r3, #4]
 8013ed2:	b2db      	uxtb	r3, r3
 8013ed4:	4619      	mov	r1, r3
 8013ed6:	6878      	ldr	r0, [r7, #4]
 8013ed8:	f7ff fedb 	bl	8013c92 <USBD_CoreFindIF>
 8013edc:	4603      	mov	r3, r0
 8013ede:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013ee0:	7bbb      	ldrb	r3, [r7, #14]
 8013ee2:	2bff      	cmp	r3, #255	@ 0xff
 8013ee4:	d01d      	beq.n	8013f22 <USBD_StdItfReq+0x92>
 8013ee6:	7bbb      	ldrb	r3, [r7, #14]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d11a      	bne.n	8013f22 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013eec:	7bba      	ldrb	r2, [r7, #14]
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	32ae      	adds	r2, #174	@ 0xae
 8013ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ef6:	689b      	ldr	r3, [r3, #8]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d00f      	beq.n	8013f1c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8013efc:	7bba      	ldrb	r2, [r7, #14]
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013f04:	7bba      	ldrb	r2, [r7, #14]
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	32ae      	adds	r2, #174	@ 0xae
 8013f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f0e:	689b      	ldr	r3, [r3, #8]
 8013f10:	6839      	ldr	r1, [r7, #0]
 8013f12:	6878      	ldr	r0, [r7, #4]
 8013f14:	4798      	blx	r3
 8013f16:	4603      	mov	r3, r0
 8013f18:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013f1a:	e004      	b.n	8013f26 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013f1c:	2303      	movs	r3, #3
 8013f1e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013f20:	e001      	b.n	8013f26 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8013f22:	2303      	movs	r3, #3
 8013f24:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013f26:	683b      	ldr	r3, [r7, #0]
 8013f28:	88db      	ldrh	r3, [r3, #6]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d110      	bne.n	8013f50 <USBD_StdItfReq+0xc0>
 8013f2e:	7bfb      	ldrb	r3, [r7, #15]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d10d      	bne.n	8013f50 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013f34:	6878      	ldr	r0, [r7, #4]
 8013f36:	f000 fdfd 	bl	8014b34 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013f3a:	e009      	b.n	8013f50 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8013f3c:	6839      	ldr	r1, [r7, #0]
 8013f3e:	6878      	ldr	r0, [r7, #4]
 8013f40:	f000 fd21 	bl	8014986 <USBD_CtlError>
          break;
 8013f44:	e004      	b.n	8013f50 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8013f46:	6839      	ldr	r1, [r7, #0]
 8013f48:	6878      	ldr	r0, [r7, #4]
 8013f4a:	f000 fd1c 	bl	8014986 <USBD_CtlError>
          break;
 8013f4e:	e000      	b.n	8013f52 <USBD_StdItfReq+0xc2>
          break;
 8013f50:	bf00      	nop
      }
      break;
 8013f52:	e004      	b.n	8013f5e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013f54:	6839      	ldr	r1, [r7, #0]
 8013f56:	6878      	ldr	r0, [r7, #4]
 8013f58:	f000 fd15 	bl	8014986 <USBD_CtlError>
      break;
 8013f5c:	bf00      	nop
  }

  return ret;
 8013f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f60:	4618      	mov	r0, r3
 8013f62:	3710      	adds	r7, #16
 8013f64:	46bd      	mov	sp, r7
 8013f66:	bd80      	pop	{r7, pc}

08013f68 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b084      	sub	sp, #16
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
 8013f70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8013f72:	2300      	movs	r3, #0
 8013f74:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	889b      	ldrh	r3, [r3, #4]
 8013f7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013f7c:	683b      	ldr	r3, [r7, #0]
 8013f7e:	781b      	ldrb	r3, [r3, #0]
 8013f80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013f84:	2b40      	cmp	r3, #64	@ 0x40
 8013f86:	d007      	beq.n	8013f98 <USBD_StdEPReq+0x30>
 8013f88:	2b40      	cmp	r3, #64	@ 0x40
 8013f8a:	f200 817f 	bhi.w	801428c <USBD_StdEPReq+0x324>
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d02a      	beq.n	8013fe8 <USBD_StdEPReq+0x80>
 8013f92:	2b20      	cmp	r3, #32
 8013f94:	f040 817a 	bne.w	801428c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013f98:	7bbb      	ldrb	r3, [r7, #14]
 8013f9a:	4619      	mov	r1, r3
 8013f9c:	6878      	ldr	r0, [r7, #4]
 8013f9e:	f7ff fe85 	bl	8013cac <USBD_CoreFindEP>
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013fa6:	7b7b      	ldrb	r3, [r7, #13]
 8013fa8:	2bff      	cmp	r3, #255	@ 0xff
 8013faa:	f000 8174 	beq.w	8014296 <USBD_StdEPReq+0x32e>
 8013fae:	7b7b      	ldrb	r3, [r7, #13]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	f040 8170 	bne.w	8014296 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8013fb6:	7b7a      	ldrb	r2, [r7, #13]
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8013fbe:	7b7a      	ldrb	r2, [r7, #13]
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	32ae      	adds	r2, #174	@ 0xae
 8013fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fc8:	689b      	ldr	r3, [r3, #8]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	f000 8163 	beq.w	8014296 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013fd0:	7b7a      	ldrb	r2, [r7, #13]
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	32ae      	adds	r2, #174	@ 0xae
 8013fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fda:	689b      	ldr	r3, [r3, #8]
 8013fdc:	6839      	ldr	r1, [r7, #0]
 8013fde:	6878      	ldr	r0, [r7, #4]
 8013fe0:	4798      	blx	r3
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8013fe6:	e156      	b.n	8014296 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	785b      	ldrb	r3, [r3, #1]
 8013fec:	2b03      	cmp	r3, #3
 8013fee:	d008      	beq.n	8014002 <USBD_StdEPReq+0x9a>
 8013ff0:	2b03      	cmp	r3, #3
 8013ff2:	f300 8145 	bgt.w	8014280 <USBD_StdEPReq+0x318>
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	f000 809b 	beq.w	8014132 <USBD_StdEPReq+0x1ca>
 8013ffc:	2b01      	cmp	r3, #1
 8013ffe:	d03c      	beq.n	801407a <USBD_StdEPReq+0x112>
 8014000:	e13e      	b.n	8014280 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014008:	b2db      	uxtb	r3, r3
 801400a:	2b02      	cmp	r3, #2
 801400c:	d002      	beq.n	8014014 <USBD_StdEPReq+0xac>
 801400e:	2b03      	cmp	r3, #3
 8014010:	d016      	beq.n	8014040 <USBD_StdEPReq+0xd8>
 8014012:	e02c      	b.n	801406e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014014:	7bbb      	ldrb	r3, [r7, #14]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d00d      	beq.n	8014036 <USBD_StdEPReq+0xce>
 801401a:	7bbb      	ldrb	r3, [r7, #14]
 801401c:	2b80      	cmp	r3, #128	@ 0x80
 801401e:	d00a      	beq.n	8014036 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014020:	7bbb      	ldrb	r3, [r7, #14]
 8014022:	4619      	mov	r1, r3
 8014024:	6878      	ldr	r0, [r7, #4]
 8014026:	f001 f9e3 	bl	80153f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801402a:	2180      	movs	r1, #128	@ 0x80
 801402c:	6878      	ldr	r0, [r7, #4]
 801402e:	f001 f9df 	bl	80153f0 <USBD_LL_StallEP>
 8014032:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014034:	e020      	b.n	8014078 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8014036:	6839      	ldr	r1, [r7, #0]
 8014038:	6878      	ldr	r0, [r7, #4]
 801403a:	f000 fca4 	bl	8014986 <USBD_CtlError>
              break;
 801403e:	e01b      	b.n	8014078 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014040:	683b      	ldr	r3, [r7, #0]
 8014042:	885b      	ldrh	r3, [r3, #2]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d10e      	bne.n	8014066 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014048:	7bbb      	ldrb	r3, [r7, #14]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d00b      	beq.n	8014066 <USBD_StdEPReq+0xfe>
 801404e:	7bbb      	ldrb	r3, [r7, #14]
 8014050:	2b80      	cmp	r3, #128	@ 0x80
 8014052:	d008      	beq.n	8014066 <USBD_StdEPReq+0xfe>
 8014054:	683b      	ldr	r3, [r7, #0]
 8014056:	88db      	ldrh	r3, [r3, #6]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d104      	bne.n	8014066 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801405c:	7bbb      	ldrb	r3, [r7, #14]
 801405e:	4619      	mov	r1, r3
 8014060:	6878      	ldr	r0, [r7, #4]
 8014062:	f001 f9c5 	bl	80153f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014066:	6878      	ldr	r0, [r7, #4]
 8014068:	f000 fd64 	bl	8014b34 <USBD_CtlSendStatus>

              break;
 801406c:	e004      	b.n	8014078 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801406e:	6839      	ldr	r1, [r7, #0]
 8014070:	6878      	ldr	r0, [r7, #4]
 8014072:	f000 fc88 	bl	8014986 <USBD_CtlError>
              break;
 8014076:	bf00      	nop
          }
          break;
 8014078:	e107      	b.n	801428a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014080:	b2db      	uxtb	r3, r3
 8014082:	2b02      	cmp	r3, #2
 8014084:	d002      	beq.n	801408c <USBD_StdEPReq+0x124>
 8014086:	2b03      	cmp	r3, #3
 8014088:	d016      	beq.n	80140b8 <USBD_StdEPReq+0x150>
 801408a:	e04b      	b.n	8014124 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801408c:	7bbb      	ldrb	r3, [r7, #14]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d00d      	beq.n	80140ae <USBD_StdEPReq+0x146>
 8014092:	7bbb      	ldrb	r3, [r7, #14]
 8014094:	2b80      	cmp	r3, #128	@ 0x80
 8014096:	d00a      	beq.n	80140ae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014098:	7bbb      	ldrb	r3, [r7, #14]
 801409a:	4619      	mov	r1, r3
 801409c:	6878      	ldr	r0, [r7, #4]
 801409e:	f001 f9a7 	bl	80153f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80140a2:	2180      	movs	r1, #128	@ 0x80
 80140a4:	6878      	ldr	r0, [r7, #4]
 80140a6:	f001 f9a3 	bl	80153f0 <USBD_LL_StallEP>
 80140aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80140ac:	e040      	b.n	8014130 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80140ae:	6839      	ldr	r1, [r7, #0]
 80140b0:	6878      	ldr	r0, [r7, #4]
 80140b2:	f000 fc68 	bl	8014986 <USBD_CtlError>
              break;
 80140b6:	e03b      	b.n	8014130 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80140b8:	683b      	ldr	r3, [r7, #0]
 80140ba:	885b      	ldrh	r3, [r3, #2]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d136      	bne.n	801412e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80140c0:	7bbb      	ldrb	r3, [r7, #14]
 80140c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d004      	beq.n	80140d4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80140ca:	7bbb      	ldrb	r3, [r7, #14]
 80140cc:	4619      	mov	r1, r3
 80140ce:	6878      	ldr	r0, [r7, #4]
 80140d0:	f001 f9ad 	bl	801542e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80140d4:	6878      	ldr	r0, [r7, #4]
 80140d6:	f000 fd2d 	bl	8014b34 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80140da:	7bbb      	ldrb	r3, [r7, #14]
 80140dc:	4619      	mov	r1, r3
 80140de:	6878      	ldr	r0, [r7, #4]
 80140e0:	f7ff fde4 	bl	8013cac <USBD_CoreFindEP>
 80140e4:	4603      	mov	r3, r0
 80140e6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80140e8:	7b7b      	ldrb	r3, [r7, #13]
 80140ea:	2bff      	cmp	r3, #255	@ 0xff
 80140ec:	d01f      	beq.n	801412e <USBD_StdEPReq+0x1c6>
 80140ee:	7b7b      	ldrb	r3, [r7, #13]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d11c      	bne.n	801412e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80140f4:	7b7a      	ldrb	r2, [r7, #13]
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80140fc:	7b7a      	ldrb	r2, [r7, #13]
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	32ae      	adds	r2, #174	@ 0xae
 8014102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014106:	689b      	ldr	r3, [r3, #8]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d010      	beq.n	801412e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801410c:	7b7a      	ldrb	r2, [r7, #13]
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	32ae      	adds	r2, #174	@ 0xae
 8014112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014116:	689b      	ldr	r3, [r3, #8]
 8014118:	6839      	ldr	r1, [r7, #0]
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	4798      	blx	r3
 801411e:	4603      	mov	r3, r0
 8014120:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8014122:	e004      	b.n	801412e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014124:	6839      	ldr	r1, [r7, #0]
 8014126:	6878      	ldr	r0, [r7, #4]
 8014128:	f000 fc2d 	bl	8014986 <USBD_CtlError>
              break;
 801412c:	e000      	b.n	8014130 <USBD_StdEPReq+0x1c8>
              break;
 801412e:	bf00      	nop
          }
          break;
 8014130:	e0ab      	b.n	801428a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014138:	b2db      	uxtb	r3, r3
 801413a:	2b02      	cmp	r3, #2
 801413c:	d002      	beq.n	8014144 <USBD_StdEPReq+0x1dc>
 801413e:	2b03      	cmp	r3, #3
 8014140:	d032      	beq.n	80141a8 <USBD_StdEPReq+0x240>
 8014142:	e097      	b.n	8014274 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014144:	7bbb      	ldrb	r3, [r7, #14]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d007      	beq.n	801415a <USBD_StdEPReq+0x1f2>
 801414a:	7bbb      	ldrb	r3, [r7, #14]
 801414c:	2b80      	cmp	r3, #128	@ 0x80
 801414e:	d004      	beq.n	801415a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014150:	6839      	ldr	r1, [r7, #0]
 8014152:	6878      	ldr	r0, [r7, #4]
 8014154:	f000 fc17 	bl	8014986 <USBD_CtlError>
                break;
 8014158:	e091      	b.n	801427e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801415a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801415e:	2b00      	cmp	r3, #0
 8014160:	da0b      	bge.n	801417a <USBD_StdEPReq+0x212>
 8014162:	7bbb      	ldrb	r3, [r7, #14]
 8014164:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014168:	4613      	mov	r3, r2
 801416a:	009b      	lsls	r3, r3, #2
 801416c:	4413      	add	r3, r2
 801416e:	009b      	lsls	r3, r3, #2
 8014170:	3310      	adds	r3, #16
 8014172:	687a      	ldr	r2, [r7, #4]
 8014174:	4413      	add	r3, r2
 8014176:	3304      	adds	r3, #4
 8014178:	e00b      	b.n	8014192 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801417a:	7bbb      	ldrb	r3, [r7, #14]
 801417c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014180:	4613      	mov	r3, r2
 8014182:	009b      	lsls	r3, r3, #2
 8014184:	4413      	add	r3, r2
 8014186:	009b      	lsls	r3, r3, #2
 8014188:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801418c:	687a      	ldr	r2, [r7, #4]
 801418e:	4413      	add	r3, r2
 8014190:	3304      	adds	r3, #4
 8014192:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014194:	68bb      	ldr	r3, [r7, #8]
 8014196:	2200      	movs	r2, #0
 8014198:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801419a:	68bb      	ldr	r3, [r7, #8]
 801419c:	2202      	movs	r2, #2
 801419e:	4619      	mov	r1, r3
 80141a0:	6878      	ldr	r0, [r7, #4]
 80141a2:	f000 fc6d 	bl	8014a80 <USBD_CtlSendData>
              break;
 80141a6:	e06a      	b.n	801427e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80141a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	da11      	bge.n	80141d4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80141b0:	7bbb      	ldrb	r3, [r7, #14]
 80141b2:	f003 020f 	and.w	r2, r3, #15
 80141b6:	6879      	ldr	r1, [r7, #4]
 80141b8:	4613      	mov	r3, r2
 80141ba:	009b      	lsls	r3, r3, #2
 80141bc:	4413      	add	r3, r2
 80141be:	009b      	lsls	r3, r3, #2
 80141c0:	440b      	add	r3, r1
 80141c2:	3324      	adds	r3, #36	@ 0x24
 80141c4:	881b      	ldrh	r3, [r3, #0]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d117      	bne.n	80141fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80141ca:	6839      	ldr	r1, [r7, #0]
 80141cc:	6878      	ldr	r0, [r7, #4]
 80141ce:	f000 fbda 	bl	8014986 <USBD_CtlError>
                  break;
 80141d2:	e054      	b.n	801427e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80141d4:	7bbb      	ldrb	r3, [r7, #14]
 80141d6:	f003 020f 	and.w	r2, r3, #15
 80141da:	6879      	ldr	r1, [r7, #4]
 80141dc:	4613      	mov	r3, r2
 80141de:	009b      	lsls	r3, r3, #2
 80141e0:	4413      	add	r3, r2
 80141e2:	009b      	lsls	r3, r3, #2
 80141e4:	440b      	add	r3, r1
 80141e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80141ea:	881b      	ldrh	r3, [r3, #0]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d104      	bne.n	80141fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80141f0:	6839      	ldr	r1, [r7, #0]
 80141f2:	6878      	ldr	r0, [r7, #4]
 80141f4:	f000 fbc7 	bl	8014986 <USBD_CtlError>
                  break;
 80141f8:	e041      	b.n	801427e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80141fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	da0b      	bge.n	801421a <USBD_StdEPReq+0x2b2>
 8014202:	7bbb      	ldrb	r3, [r7, #14]
 8014204:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014208:	4613      	mov	r3, r2
 801420a:	009b      	lsls	r3, r3, #2
 801420c:	4413      	add	r3, r2
 801420e:	009b      	lsls	r3, r3, #2
 8014210:	3310      	adds	r3, #16
 8014212:	687a      	ldr	r2, [r7, #4]
 8014214:	4413      	add	r3, r2
 8014216:	3304      	adds	r3, #4
 8014218:	e00b      	b.n	8014232 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801421a:	7bbb      	ldrb	r3, [r7, #14]
 801421c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014220:	4613      	mov	r3, r2
 8014222:	009b      	lsls	r3, r3, #2
 8014224:	4413      	add	r3, r2
 8014226:	009b      	lsls	r3, r3, #2
 8014228:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801422c:	687a      	ldr	r2, [r7, #4]
 801422e:	4413      	add	r3, r2
 8014230:	3304      	adds	r3, #4
 8014232:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014234:	7bbb      	ldrb	r3, [r7, #14]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d002      	beq.n	8014240 <USBD_StdEPReq+0x2d8>
 801423a:	7bbb      	ldrb	r3, [r7, #14]
 801423c:	2b80      	cmp	r3, #128	@ 0x80
 801423e:	d103      	bne.n	8014248 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8014240:	68bb      	ldr	r3, [r7, #8]
 8014242:	2200      	movs	r2, #0
 8014244:	601a      	str	r2, [r3, #0]
 8014246:	e00e      	b.n	8014266 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014248:	7bbb      	ldrb	r3, [r7, #14]
 801424a:	4619      	mov	r1, r3
 801424c:	6878      	ldr	r0, [r7, #4]
 801424e:	f001 f90d 	bl	801546c <USBD_LL_IsStallEP>
 8014252:	4603      	mov	r3, r0
 8014254:	2b00      	cmp	r3, #0
 8014256:	d003      	beq.n	8014260 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014258:	68bb      	ldr	r3, [r7, #8]
 801425a:	2201      	movs	r2, #1
 801425c:	601a      	str	r2, [r3, #0]
 801425e:	e002      	b.n	8014266 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014260:	68bb      	ldr	r3, [r7, #8]
 8014262:	2200      	movs	r2, #0
 8014264:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014266:	68bb      	ldr	r3, [r7, #8]
 8014268:	2202      	movs	r2, #2
 801426a:	4619      	mov	r1, r3
 801426c:	6878      	ldr	r0, [r7, #4]
 801426e:	f000 fc07 	bl	8014a80 <USBD_CtlSendData>
              break;
 8014272:	e004      	b.n	801427e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014274:	6839      	ldr	r1, [r7, #0]
 8014276:	6878      	ldr	r0, [r7, #4]
 8014278:	f000 fb85 	bl	8014986 <USBD_CtlError>
              break;
 801427c:	bf00      	nop
          }
          break;
 801427e:	e004      	b.n	801428a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014280:	6839      	ldr	r1, [r7, #0]
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f000 fb7f 	bl	8014986 <USBD_CtlError>
          break;
 8014288:	bf00      	nop
      }
      break;
 801428a:	e005      	b.n	8014298 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801428c:	6839      	ldr	r1, [r7, #0]
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	f000 fb79 	bl	8014986 <USBD_CtlError>
      break;
 8014294:	e000      	b.n	8014298 <USBD_StdEPReq+0x330>
      break;
 8014296:	bf00      	nop
  }

  return ret;
 8014298:	7bfb      	ldrb	r3, [r7, #15]
}
 801429a:	4618      	mov	r0, r3
 801429c:	3710      	adds	r7, #16
 801429e:	46bd      	mov	sp, r7
 80142a0:	bd80      	pop	{r7, pc}
	...

080142a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b084      	sub	sp, #16
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
 80142ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80142ae:	2300      	movs	r3, #0
 80142b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80142b2:	2300      	movs	r3, #0
 80142b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80142b6:	2300      	movs	r3, #0
 80142b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80142ba:	683b      	ldr	r3, [r7, #0]
 80142bc:	885b      	ldrh	r3, [r3, #2]
 80142be:	0a1b      	lsrs	r3, r3, #8
 80142c0:	b29b      	uxth	r3, r3
 80142c2:	3b01      	subs	r3, #1
 80142c4:	2b0e      	cmp	r3, #14
 80142c6:	f200 8152 	bhi.w	801456e <USBD_GetDescriptor+0x2ca>
 80142ca:	a201      	add	r2, pc, #4	@ (adr r2, 80142d0 <USBD_GetDescriptor+0x2c>)
 80142cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142d0:	08014341 	.word	0x08014341
 80142d4:	08014359 	.word	0x08014359
 80142d8:	08014399 	.word	0x08014399
 80142dc:	0801456f 	.word	0x0801456f
 80142e0:	0801456f 	.word	0x0801456f
 80142e4:	0801450f 	.word	0x0801450f
 80142e8:	0801453b 	.word	0x0801453b
 80142ec:	0801456f 	.word	0x0801456f
 80142f0:	0801456f 	.word	0x0801456f
 80142f4:	0801456f 	.word	0x0801456f
 80142f8:	0801456f 	.word	0x0801456f
 80142fc:	0801456f 	.word	0x0801456f
 8014300:	0801456f 	.word	0x0801456f
 8014304:	0801456f 	.word	0x0801456f
 8014308:	0801430d 	.word	0x0801430d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014312:	69db      	ldr	r3, [r3, #28]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d00b      	beq.n	8014330 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801431e:	69db      	ldr	r3, [r3, #28]
 8014320:	687a      	ldr	r2, [r7, #4]
 8014322:	7c12      	ldrb	r2, [r2, #16]
 8014324:	f107 0108 	add.w	r1, r7, #8
 8014328:	4610      	mov	r0, r2
 801432a:	4798      	blx	r3
 801432c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801432e:	e126      	b.n	801457e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014330:	6839      	ldr	r1, [r7, #0]
 8014332:	6878      	ldr	r0, [r7, #4]
 8014334:	f000 fb27 	bl	8014986 <USBD_CtlError>
        err++;
 8014338:	7afb      	ldrb	r3, [r7, #11]
 801433a:	3301      	adds	r3, #1
 801433c:	72fb      	strb	r3, [r7, #11]
      break;
 801433e:	e11e      	b.n	801457e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	687a      	ldr	r2, [r7, #4]
 801434a:	7c12      	ldrb	r2, [r2, #16]
 801434c:	f107 0108 	add.w	r1, r7, #8
 8014350:	4610      	mov	r0, r2
 8014352:	4798      	blx	r3
 8014354:	60f8      	str	r0, [r7, #12]
      break;
 8014356:	e112      	b.n	801457e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	7c1b      	ldrb	r3, [r3, #16]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d10d      	bne.n	801437c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014368:	f107 0208 	add.w	r2, r7, #8
 801436c:	4610      	mov	r0, r2
 801436e:	4798      	blx	r3
 8014370:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	3301      	adds	r3, #1
 8014376:	2202      	movs	r2, #2
 8014378:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801437a:	e100      	b.n	801457e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014384:	f107 0208 	add.w	r2, r7, #8
 8014388:	4610      	mov	r0, r2
 801438a:	4798      	blx	r3
 801438c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	3301      	adds	r3, #1
 8014392:	2202      	movs	r2, #2
 8014394:	701a      	strb	r2, [r3, #0]
      break;
 8014396:	e0f2      	b.n	801457e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014398:	683b      	ldr	r3, [r7, #0]
 801439a:	885b      	ldrh	r3, [r3, #2]
 801439c:	b2db      	uxtb	r3, r3
 801439e:	2b05      	cmp	r3, #5
 80143a0:	f200 80ac 	bhi.w	80144fc <USBD_GetDescriptor+0x258>
 80143a4:	a201      	add	r2, pc, #4	@ (adr r2, 80143ac <USBD_GetDescriptor+0x108>)
 80143a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143aa:	bf00      	nop
 80143ac:	080143c5 	.word	0x080143c5
 80143b0:	080143f9 	.word	0x080143f9
 80143b4:	0801442d 	.word	0x0801442d
 80143b8:	08014461 	.word	0x08014461
 80143bc:	08014495 	.word	0x08014495
 80143c0:	080144c9 	.word	0x080144c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80143ca:	685b      	ldr	r3, [r3, #4]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d00b      	beq.n	80143e8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80143d6:	685b      	ldr	r3, [r3, #4]
 80143d8:	687a      	ldr	r2, [r7, #4]
 80143da:	7c12      	ldrb	r2, [r2, #16]
 80143dc:	f107 0108 	add.w	r1, r7, #8
 80143e0:	4610      	mov	r0, r2
 80143e2:	4798      	blx	r3
 80143e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80143e6:	e091      	b.n	801450c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80143e8:	6839      	ldr	r1, [r7, #0]
 80143ea:	6878      	ldr	r0, [r7, #4]
 80143ec:	f000 facb 	bl	8014986 <USBD_CtlError>
            err++;
 80143f0:	7afb      	ldrb	r3, [r7, #11]
 80143f2:	3301      	adds	r3, #1
 80143f4:	72fb      	strb	r3, [r7, #11]
          break;
 80143f6:	e089      	b.n	801450c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80143fe:	689b      	ldr	r3, [r3, #8]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d00b      	beq.n	801441c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801440a:	689b      	ldr	r3, [r3, #8]
 801440c:	687a      	ldr	r2, [r7, #4]
 801440e:	7c12      	ldrb	r2, [r2, #16]
 8014410:	f107 0108 	add.w	r1, r7, #8
 8014414:	4610      	mov	r0, r2
 8014416:	4798      	blx	r3
 8014418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801441a:	e077      	b.n	801450c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801441c:	6839      	ldr	r1, [r7, #0]
 801441e:	6878      	ldr	r0, [r7, #4]
 8014420:	f000 fab1 	bl	8014986 <USBD_CtlError>
            err++;
 8014424:	7afb      	ldrb	r3, [r7, #11]
 8014426:	3301      	adds	r3, #1
 8014428:	72fb      	strb	r3, [r7, #11]
          break;
 801442a:	e06f      	b.n	801450c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014432:	68db      	ldr	r3, [r3, #12]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d00b      	beq.n	8014450 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801443e:	68db      	ldr	r3, [r3, #12]
 8014440:	687a      	ldr	r2, [r7, #4]
 8014442:	7c12      	ldrb	r2, [r2, #16]
 8014444:	f107 0108 	add.w	r1, r7, #8
 8014448:	4610      	mov	r0, r2
 801444a:	4798      	blx	r3
 801444c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801444e:	e05d      	b.n	801450c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014450:	6839      	ldr	r1, [r7, #0]
 8014452:	6878      	ldr	r0, [r7, #4]
 8014454:	f000 fa97 	bl	8014986 <USBD_CtlError>
            err++;
 8014458:	7afb      	ldrb	r3, [r7, #11]
 801445a:	3301      	adds	r3, #1
 801445c:	72fb      	strb	r3, [r7, #11]
          break;
 801445e:	e055      	b.n	801450c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014466:	691b      	ldr	r3, [r3, #16]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d00b      	beq.n	8014484 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014472:	691b      	ldr	r3, [r3, #16]
 8014474:	687a      	ldr	r2, [r7, #4]
 8014476:	7c12      	ldrb	r2, [r2, #16]
 8014478:	f107 0108 	add.w	r1, r7, #8
 801447c:	4610      	mov	r0, r2
 801447e:	4798      	blx	r3
 8014480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014482:	e043      	b.n	801450c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014484:	6839      	ldr	r1, [r7, #0]
 8014486:	6878      	ldr	r0, [r7, #4]
 8014488:	f000 fa7d 	bl	8014986 <USBD_CtlError>
            err++;
 801448c:	7afb      	ldrb	r3, [r7, #11]
 801448e:	3301      	adds	r3, #1
 8014490:	72fb      	strb	r3, [r7, #11]
          break;
 8014492:	e03b      	b.n	801450c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801449a:	695b      	ldr	r3, [r3, #20]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d00b      	beq.n	80144b8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80144a6:	695b      	ldr	r3, [r3, #20]
 80144a8:	687a      	ldr	r2, [r7, #4]
 80144aa:	7c12      	ldrb	r2, [r2, #16]
 80144ac:	f107 0108 	add.w	r1, r7, #8
 80144b0:	4610      	mov	r0, r2
 80144b2:	4798      	blx	r3
 80144b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80144b6:	e029      	b.n	801450c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80144b8:	6839      	ldr	r1, [r7, #0]
 80144ba:	6878      	ldr	r0, [r7, #4]
 80144bc:	f000 fa63 	bl	8014986 <USBD_CtlError>
            err++;
 80144c0:	7afb      	ldrb	r3, [r7, #11]
 80144c2:	3301      	adds	r3, #1
 80144c4:	72fb      	strb	r3, [r7, #11]
          break;
 80144c6:	e021      	b.n	801450c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80144ce:	699b      	ldr	r3, [r3, #24]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d00b      	beq.n	80144ec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80144da:	699b      	ldr	r3, [r3, #24]
 80144dc:	687a      	ldr	r2, [r7, #4]
 80144de:	7c12      	ldrb	r2, [r2, #16]
 80144e0:	f107 0108 	add.w	r1, r7, #8
 80144e4:	4610      	mov	r0, r2
 80144e6:	4798      	blx	r3
 80144e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80144ea:	e00f      	b.n	801450c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80144ec:	6839      	ldr	r1, [r7, #0]
 80144ee:	6878      	ldr	r0, [r7, #4]
 80144f0:	f000 fa49 	bl	8014986 <USBD_CtlError>
            err++;
 80144f4:	7afb      	ldrb	r3, [r7, #11]
 80144f6:	3301      	adds	r3, #1
 80144f8:	72fb      	strb	r3, [r7, #11]
          break;
 80144fa:	e007      	b.n	801450c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80144fc:	6839      	ldr	r1, [r7, #0]
 80144fe:	6878      	ldr	r0, [r7, #4]
 8014500:	f000 fa41 	bl	8014986 <USBD_CtlError>
          err++;
 8014504:	7afb      	ldrb	r3, [r7, #11]
 8014506:	3301      	adds	r3, #1
 8014508:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801450a:	bf00      	nop
      }
      break;
 801450c:	e037      	b.n	801457e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	7c1b      	ldrb	r3, [r3, #16]
 8014512:	2b00      	cmp	r3, #0
 8014514:	d109      	bne.n	801452a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801451c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801451e:	f107 0208 	add.w	r2, r7, #8
 8014522:	4610      	mov	r0, r2
 8014524:	4798      	blx	r3
 8014526:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014528:	e029      	b.n	801457e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801452a:	6839      	ldr	r1, [r7, #0]
 801452c:	6878      	ldr	r0, [r7, #4]
 801452e:	f000 fa2a 	bl	8014986 <USBD_CtlError>
        err++;
 8014532:	7afb      	ldrb	r3, [r7, #11]
 8014534:	3301      	adds	r3, #1
 8014536:	72fb      	strb	r3, [r7, #11]
      break;
 8014538:	e021      	b.n	801457e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	7c1b      	ldrb	r3, [r3, #16]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d10d      	bne.n	801455e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801454a:	f107 0208 	add.w	r2, r7, #8
 801454e:	4610      	mov	r0, r2
 8014550:	4798      	blx	r3
 8014552:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	3301      	adds	r3, #1
 8014558:	2207      	movs	r2, #7
 801455a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801455c:	e00f      	b.n	801457e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801455e:	6839      	ldr	r1, [r7, #0]
 8014560:	6878      	ldr	r0, [r7, #4]
 8014562:	f000 fa10 	bl	8014986 <USBD_CtlError>
        err++;
 8014566:	7afb      	ldrb	r3, [r7, #11]
 8014568:	3301      	adds	r3, #1
 801456a:	72fb      	strb	r3, [r7, #11]
      break;
 801456c:	e007      	b.n	801457e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801456e:	6839      	ldr	r1, [r7, #0]
 8014570:	6878      	ldr	r0, [r7, #4]
 8014572:	f000 fa08 	bl	8014986 <USBD_CtlError>
      err++;
 8014576:	7afb      	ldrb	r3, [r7, #11]
 8014578:	3301      	adds	r3, #1
 801457a:	72fb      	strb	r3, [r7, #11]
      break;
 801457c:	bf00      	nop
  }

  if (err != 0U)
 801457e:	7afb      	ldrb	r3, [r7, #11]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d11e      	bne.n	80145c2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014584:	683b      	ldr	r3, [r7, #0]
 8014586:	88db      	ldrh	r3, [r3, #6]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d016      	beq.n	80145ba <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801458c:	893b      	ldrh	r3, [r7, #8]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d00e      	beq.n	80145b0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8014592:	683b      	ldr	r3, [r7, #0]
 8014594:	88da      	ldrh	r2, [r3, #6]
 8014596:	893b      	ldrh	r3, [r7, #8]
 8014598:	4293      	cmp	r3, r2
 801459a:	bf28      	it	cs
 801459c:	4613      	movcs	r3, r2
 801459e:	b29b      	uxth	r3, r3
 80145a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80145a2:	893b      	ldrh	r3, [r7, #8]
 80145a4:	461a      	mov	r2, r3
 80145a6:	68f9      	ldr	r1, [r7, #12]
 80145a8:	6878      	ldr	r0, [r7, #4]
 80145aa:	f000 fa69 	bl	8014a80 <USBD_CtlSendData>
 80145ae:	e009      	b.n	80145c4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80145b0:	6839      	ldr	r1, [r7, #0]
 80145b2:	6878      	ldr	r0, [r7, #4]
 80145b4:	f000 f9e7 	bl	8014986 <USBD_CtlError>
 80145b8:	e004      	b.n	80145c4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80145ba:	6878      	ldr	r0, [r7, #4]
 80145bc:	f000 faba 	bl	8014b34 <USBD_CtlSendStatus>
 80145c0:	e000      	b.n	80145c4 <USBD_GetDescriptor+0x320>
    return;
 80145c2:	bf00      	nop
  }
}
 80145c4:	3710      	adds	r7, #16
 80145c6:	46bd      	mov	sp, r7
 80145c8:	bd80      	pop	{r7, pc}
 80145ca:	bf00      	nop

080145cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b084      	sub	sp, #16
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
 80145d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80145d6:	683b      	ldr	r3, [r7, #0]
 80145d8:	889b      	ldrh	r3, [r3, #4]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d131      	bne.n	8014642 <USBD_SetAddress+0x76>
 80145de:	683b      	ldr	r3, [r7, #0]
 80145e0:	88db      	ldrh	r3, [r3, #6]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d12d      	bne.n	8014642 <USBD_SetAddress+0x76>
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	885b      	ldrh	r3, [r3, #2]
 80145ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80145ec:	d829      	bhi.n	8014642 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80145ee:	683b      	ldr	r3, [r7, #0]
 80145f0:	885b      	ldrh	r3, [r3, #2]
 80145f2:	b2db      	uxtb	r3, r3
 80145f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80145f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014600:	b2db      	uxtb	r3, r3
 8014602:	2b03      	cmp	r3, #3
 8014604:	d104      	bne.n	8014610 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014606:	6839      	ldr	r1, [r7, #0]
 8014608:	6878      	ldr	r0, [r7, #4]
 801460a:	f000 f9bc 	bl	8014986 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801460e:	e01d      	b.n	801464c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	7bfa      	ldrb	r2, [r7, #15]
 8014614:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014618:	7bfb      	ldrb	r3, [r7, #15]
 801461a:	4619      	mov	r1, r3
 801461c:	6878      	ldr	r0, [r7, #4]
 801461e:	f000 ff51 	bl	80154c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014622:	6878      	ldr	r0, [r7, #4]
 8014624:	f000 fa86 	bl	8014b34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014628:	7bfb      	ldrb	r3, [r7, #15]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d004      	beq.n	8014638 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	2202      	movs	r2, #2
 8014632:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014636:	e009      	b.n	801464c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	2201      	movs	r2, #1
 801463c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014640:	e004      	b.n	801464c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014642:	6839      	ldr	r1, [r7, #0]
 8014644:	6878      	ldr	r0, [r7, #4]
 8014646:	f000 f99e 	bl	8014986 <USBD_CtlError>
  }
}
 801464a:	bf00      	nop
 801464c:	bf00      	nop
 801464e:	3710      	adds	r7, #16
 8014650:	46bd      	mov	sp, r7
 8014652:	bd80      	pop	{r7, pc}

08014654 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b084      	sub	sp, #16
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801465e:	2300      	movs	r3, #0
 8014660:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014662:	683b      	ldr	r3, [r7, #0]
 8014664:	885b      	ldrh	r3, [r3, #2]
 8014666:	b2da      	uxtb	r2, r3
 8014668:	4b4e      	ldr	r3, [pc, #312]	@ (80147a4 <USBD_SetConfig+0x150>)
 801466a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801466c:	4b4d      	ldr	r3, [pc, #308]	@ (80147a4 <USBD_SetConfig+0x150>)
 801466e:	781b      	ldrb	r3, [r3, #0]
 8014670:	2b01      	cmp	r3, #1
 8014672:	d905      	bls.n	8014680 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014674:	6839      	ldr	r1, [r7, #0]
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f000 f985 	bl	8014986 <USBD_CtlError>
    return USBD_FAIL;
 801467c:	2303      	movs	r3, #3
 801467e:	e08c      	b.n	801479a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014686:	b2db      	uxtb	r3, r3
 8014688:	2b02      	cmp	r3, #2
 801468a:	d002      	beq.n	8014692 <USBD_SetConfig+0x3e>
 801468c:	2b03      	cmp	r3, #3
 801468e:	d029      	beq.n	80146e4 <USBD_SetConfig+0x90>
 8014690:	e075      	b.n	801477e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014692:	4b44      	ldr	r3, [pc, #272]	@ (80147a4 <USBD_SetConfig+0x150>)
 8014694:	781b      	ldrb	r3, [r3, #0]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d020      	beq.n	80146dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801469a:	4b42      	ldr	r3, [pc, #264]	@ (80147a4 <USBD_SetConfig+0x150>)
 801469c:	781b      	ldrb	r3, [r3, #0]
 801469e:	461a      	mov	r2, r3
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80146a4:	4b3f      	ldr	r3, [pc, #252]	@ (80147a4 <USBD_SetConfig+0x150>)
 80146a6:	781b      	ldrb	r3, [r3, #0]
 80146a8:	4619      	mov	r1, r3
 80146aa:	6878      	ldr	r0, [r7, #4]
 80146ac:	f7fe ffb9 	bl	8013622 <USBD_SetClassConfig>
 80146b0:	4603      	mov	r3, r0
 80146b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80146b4:	7bfb      	ldrb	r3, [r7, #15]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d008      	beq.n	80146cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80146ba:	6839      	ldr	r1, [r7, #0]
 80146bc:	6878      	ldr	r0, [r7, #4]
 80146be:	f000 f962 	bl	8014986 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	2202      	movs	r2, #2
 80146c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80146ca:	e065      	b.n	8014798 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80146cc:	6878      	ldr	r0, [r7, #4]
 80146ce:	f000 fa31 	bl	8014b34 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	2203      	movs	r2, #3
 80146d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80146da:	e05d      	b.n	8014798 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80146dc:	6878      	ldr	r0, [r7, #4]
 80146de:	f000 fa29 	bl	8014b34 <USBD_CtlSendStatus>
      break;
 80146e2:	e059      	b.n	8014798 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80146e4:	4b2f      	ldr	r3, [pc, #188]	@ (80147a4 <USBD_SetConfig+0x150>)
 80146e6:	781b      	ldrb	r3, [r3, #0]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d112      	bne.n	8014712 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	2202      	movs	r2, #2
 80146f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80146f4:	4b2b      	ldr	r3, [pc, #172]	@ (80147a4 <USBD_SetConfig+0x150>)
 80146f6:	781b      	ldrb	r3, [r3, #0]
 80146f8:	461a      	mov	r2, r3
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80146fe:	4b29      	ldr	r3, [pc, #164]	@ (80147a4 <USBD_SetConfig+0x150>)
 8014700:	781b      	ldrb	r3, [r3, #0]
 8014702:	4619      	mov	r1, r3
 8014704:	6878      	ldr	r0, [r7, #4]
 8014706:	f7fe ffa8 	bl	801365a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801470a:	6878      	ldr	r0, [r7, #4]
 801470c:	f000 fa12 	bl	8014b34 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014710:	e042      	b.n	8014798 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014712:	4b24      	ldr	r3, [pc, #144]	@ (80147a4 <USBD_SetConfig+0x150>)
 8014714:	781b      	ldrb	r3, [r3, #0]
 8014716:	461a      	mov	r2, r3
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	685b      	ldr	r3, [r3, #4]
 801471c:	429a      	cmp	r2, r3
 801471e:	d02a      	beq.n	8014776 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	685b      	ldr	r3, [r3, #4]
 8014724:	b2db      	uxtb	r3, r3
 8014726:	4619      	mov	r1, r3
 8014728:	6878      	ldr	r0, [r7, #4]
 801472a:	f7fe ff96 	bl	801365a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801472e:	4b1d      	ldr	r3, [pc, #116]	@ (80147a4 <USBD_SetConfig+0x150>)
 8014730:	781b      	ldrb	r3, [r3, #0]
 8014732:	461a      	mov	r2, r3
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014738:	4b1a      	ldr	r3, [pc, #104]	@ (80147a4 <USBD_SetConfig+0x150>)
 801473a:	781b      	ldrb	r3, [r3, #0]
 801473c:	4619      	mov	r1, r3
 801473e:	6878      	ldr	r0, [r7, #4]
 8014740:	f7fe ff6f 	bl	8013622 <USBD_SetClassConfig>
 8014744:	4603      	mov	r3, r0
 8014746:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014748:	7bfb      	ldrb	r3, [r7, #15]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d00f      	beq.n	801476e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801474e:	6839      	ldr	r1, [r7, #0]
 8014750:	6878      	ldr	r0, [r7, #4]
 8014752:	f000 f918 	bl	8014986 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	685b      	ldr	r3, [r3, #4]
 801475a:	b2db      	uxtb	r3, r3
 801475c:	4619      	mov	r1, r3
 801475e:	6878      	ldr	r0, [r7, #4]
 8014760:	f7fe ff7b 	bl	801365a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	2202      	movs	r2, #2
 8014768:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801476c:	e014      	b.n	8014798 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801476e:	6878      	ldr	r0, [r7, #4]
 8014770:	f000 f9e0 	bl	8014b34 <USBD_CtlSendStatus>
      break;
 8014774:	e010      	b.n	8014798 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014776:	6878      	ldr	r0, [r7, #4]
 8014778:	f000 f9dc 	bl	8014b34 <USBD_CtlSendStatus>
      break;
 801477c:	e00c      	b.n	8014798 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801477e:	6839      	ldr	r1, [r7, #0]
 8014780:	6878      	ldr	r0, [r7, #4]
 8014782:	f000 f900 	bl	8014986 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014786:	4b07      	ldr	r3, [pc, #28]	@ (80147a4 <USBD_SetConfig+0x150>)
 8014788:	781b      	ldrb	r3, [r3, #0]
 801478a:	4619      	mov	r1, r3
 801478c:	6878      	ldr	r0, [r7, #4]
 801478e:	f7fe ff64 	bl	801365a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014792:	2303      	movs	r3, #3
 8014794:	73fb      	strb	r3, [r7, #15]
      break;
 8014796:	bf00      	nop
  }

  return ret;
 8014798:	7bfb      	ldrb	r3, [r7, #15]
}
 801479a:	4618      	mov	r0, r3
 801479c:	3710      	adds	r7, #16
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}
 80147a2:	bf00      	nop
 80147a4:	24009cb8 	.word	0x24009cb8

080147a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b082      	sub	sp, #8
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
 80147b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80147b2:	683b      	ldr	r3, [r7, #0]
 80147b4:	88db      	ldrh	r3, [r3, #6]
 80147b6:	2b01      	cmp	r3, #1
 80147b8:	d004      	beq.n	80147c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80147ba:	6839      	ldr	r1, [r7, #0]
 80147bc:	6878      	ldr	r0, [r7, #4]
 80147be:	f000 f8e2 	bl	8014986 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80147c2:	e023      	b.n	801480c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80147ca:	b2db      	uxtb	r3, r3
 80147cc:	2b02      	cmp	r3, #2
 80147ce:	dc02      	bgt.n	80147d6 <USBD_GetConfig+0x2e>
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	dc03      	bgt.n	80147dc <USBD_GetConfig+0x34>
 80147d4:	e015      	b.n	8014802 <USBD_GetConfig+0x5a>
 80147d6:	2b03      	cmp	r3, #3
 80147d8:	d00b      	beq.n	80147f2 <USBD_GetConfig+0x4a>
 80147da:	e012      	b.n	8014802 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	2200      	movs	r2, #0
 80147e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	3308      	adds	r3, #8
 80147e6:	2201      	movs	r2, #1
 80147e8:	4619      	mov	r1, r3
 80147ea:	6878      	ldr	r0, [r7, #4]
 80147ec:	f000 f948 	bl	8014a80 <USBD_CtlSendData>
        break;
 80147f0:	e00c      	b.n	801480c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	3304      	adds	r3, #4
 80147f6:	2201      	movs	r2, #1
 80147f8:	4619      	mov	r1, r3
 80147fa:	6878      	ldr	r0, [r7, #4]
 80147fc:	f000 f940 	bl	8014a80 <USBD_CtlSendData>
        break;
 8014800:	e004      	b.n	801480c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014802:	6839      	ldr	r1, [r7, #0]
 8014804:	6878      	ldr	r0, [r7, #4]
 8014806:	f000 f8be 	bl	8014986 <USBD_CtlError>
        break;
 801480a:	bf00      	nop
}
 801480c:	bf00      	nop
 801480e:	3708      	adds	r7, #8
 8014810:	46bd      	mov	sp, r7
 8014812:	bd80      	pop	{r7, pc}

08014814 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014814:	b580      	push	{r7, lr}
 8014816:	b082      	sub	sp, #8
 8014818:	af00      	add	r7, sp, #0
 801481a:	6078      	str	r0, [r7, #4]
 801481c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014824:	b2db      	uxtb	r3, r3
 8014826:	3b01      	subs	r3, #1
 8014828:	2b02      	cmp	r3, #2
 801482a:	d81e      	bhi.n	801486a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801482c:	683b      	ldr	r3, [r7, #0]
 801482e:	88db      	ldrh	r3, [r3, #6]
 8014830:	2b02      	cmp	r3, #2
 8014832:	d004      	beq.n	801483e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014834:	6839      	ldr	r1, [r7, #0]
 8014836:	6878      	ldr	r0, [r7, #4]
 8014838:	f000 f8a5 	bl	8014986 <USBD_CtlError>
        break;
 801483c:	e01a      	b.n	8014874 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	2201      	movs	r2, #1
 8014842:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801484a:	2b00      	cmp	r3, #0
 801484c:	d005      	beq.n	801485a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	68db      	ldr	r3, [r3, #12]
 8014852:	f043 0202 	orr.w	r2, r3, #2
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	330c      	adds	r3, #12
 801485e:	2202      	movs	r2, #2
 8014860:	4619      	mov	r1, r3
 8014862:	6878      	ldr	r0, [r7, #4]
 8014864:	f000 f90c 	bl	8014a80 <USBD_CtlSendData>
      break;
 8014868:	e004      	b.n	8014874 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801486a:	6839      	ldr	r1, [r7, #0]
 801486c:	6878      	ldr	r0, [r7, #4]
 801486e:	f000 f88a 	bl	8014986 <USBD_CtlError>
      break;
 8014872:	bf00      	nop
  }
}
 8014874:	bf00      	nop
 8014876:	3708      	adds	r7, #8
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}

0801487c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b082      	sub	sp, #8
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
 8014884:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014886:	683b      	ldr	r3, [r7, #0]
 8014888:	885b      	ldrh	r3, [r3, #2]
 801488a:	2b01      	cmp	r3, #1
 801488c:	d107      	bne.n	801489e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	2201      	movs	r2, #1
 8014892:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f000 f94c 	bl	8014b34 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801489c:	e013      	b.n	80148c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801489e:	683b      	ldr	r3, [r7, #0]
 80148a0:	885b      	ldrh	r3, [r3, #2]
 80148a2:	2b02      	cmp	r3, #2
 80148a4:	d10b      	bne.n	80148be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80148a6:	683b      	ldr	r3, [r7, #0]
 80148a8:	889b      	ldrh	r3, [r3, #4]
 80148aa:	0a1b      	lsrs	r3, r3, #8
 80148ac:	b29b      	uxth	r3, r3
 80148ae:	b2da      	uxtb	r2, r3
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80148b6:	6878      	ldr	r0, [r7, #4]
 80148b8:	f000 f93c 	bl	8014b34 <USBD_CtlSendStatus>
}
 80148bc:	e003      	b.n	80148c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80148be:	6839      	ldr	r1, [r7, #0]
 80148c0:	6878      	ldr	r0, [r7, #4]
 80148c2:	f000 f860 	bl	8014986 <USBD_CtlError>
}
 80148c6:	bf00      	nop
 80148c8:	3708      	adds	r7, #8
 80148ca:	46bd      	mov	sp, r7
 80148cc:	bd80      	pop	{r7, pc}

080148ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148ce:	b580      	push	{r7, lr}
 80148d0:	b082      	sub	sp, #8
 80148d2:	af00      	add	r7, sp, #0
 80148d4:	6078      	str	r0, [r7, #4]
 80148d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80148de:	b2db      	uxtb	r3, r3
 80148e0:	3b01      	subs	r3, #1
 80148e2:	2b02      	cmp	r3, #2
 80148e4:	d80b      	bhi.n	80148fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80148e6:	683b      	ldr	r3, [r7, #0]
 80148e8:	885b      	ldrh	r3, [r3, #2]
 80148ea:	2b01      	cmp	r3, #1
 80148ec:	d10c      	bne.n	8014908 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	2200      	movs	r2, #0
 80148f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80148f6:	6878      	ldr	r0, [r7, #4]
 80148f8:	f000 f91c 	bl	8014b34 <USBD_CtlSendStatus>
      }
      break;
 80148fc:	e004      	b.n	8014908 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80148fe:	6839      	ldr	r1, [r7, #0]
 8014900:	6878      	ldr	r0, [r7, #4]
 8014902:	f000 f840 	bl	8014986 <USBD_CtlError>
      break;
 8014906:	e000      	b.n	801490a <USBD_ClrFeature+0x3c>
      break;
 8014908:	bf00      	nop
  }
}
 801490a:	bf00      	nop
 801490c:	3708      	adds	r7, #8
 801490e:	46bd      	mov	sp, r7
 8014910:	bd80      	pop	{r7, pc}

08014912 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014912:	b580      	push	{r7, lr}
 8014914:	b084      	sub	sp, #16
 8014916:	af00      	add	r7, sp, #0
 8014918:	6078      	str	r0, [r7, #4]
 801491a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801491c:	683b      	ldr	r3, [r7, #0]
 801491e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	781a      	ldrb	r2, [r3, #0]
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	3301      	adds	r3, #1
 801492c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	781a      	ldrb	r2, [r3, #0]
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	3301      	adds	r3, #1
 801493a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801493c:	68f8      	ldr	r0, [r7, #12]
 801493e:	f7ff fa16 	bl	8013d6e <SWAPBYTE>
 8014942:	4603      	mov	r3, r0
 8014944:	461a      	mov	r2, r3
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	3301      	adds	r3, #1
 801494e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	3301      	adds	r3, #1
 8014954:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014956:	68f8      	ldr	r0, [r7, #12]
 8014958:	f7ff fa09 	bl	8013d6e <SWAPBYTE>
 801495c:	4603      	mov	r3, r0
 801495e:	461a      	mov	r2, r3
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	3301      	adds	r3, #1
 8014968:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	3301      	adds	r3, #1
 801496e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014970:	68f8      	ldr	r0, [r7, #12]
 8014972:	f7ff f9fc 	bl	8013d6e <SWAPBYTE>
 8014976:	4603      	mov	r3, r0
 8014978:	461a      	mov	r2, r3
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	80da      	strh	r2, [r3, #6]
}
 801497e:	bf00      	nop
 8014980:	3710      	adds	r7, #16
 8014982:	46bd      	mov	sp, r7
 8014984:	bd80      	pop	{r7, pc}

08014986 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014986:	b580      	push	{r7, lr}
 8014988:	b082      	sub	sp, #8
 801498a:	af00      	add	r7, sp, #0
 801498c:	6078      	str	r0, [r7, #4]
 801498e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014990:	2180      	movs	r1, #128	@ 0x80
 8014992:	6878      	ldr	r0, [r7, #4]
 8014994:	f000 fd2c 	bl	80153f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014998:	2100      	movs	r1, #0
 801499a:	6878      	ldr	r0, [r7, #4]
 801499c:	f000 fd28 	bl	80153f0 <USBD_LL_StallEP>
}
 80149a0:	bf00      	nop
 80149a2:	3708      	adds	r7, #8
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}

080149a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b086      	sub	sp, #24
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	60f8      	str	r0, [r7, #12]
 80149b0:	60b9      	str	r1, [r7, #8]
 80149b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80149b4:	2300      	movs	r3, #0
 80149b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d042      	beq.n	8014a44 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80149c2:	6938      	ldr	r0, [r7, #16]
 80149c4:	f000 f842 	bl	8014a4c <USBD_GetLen>
 80149c8:	4603      	mov	r3, r0
 80149ca:	3301      	adds	r3, #1
 80149cc:	005b      	lsls	r3, r3, #1
 80149ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80149d2:	d808      	bhi.n	80149e6 <USBD_GetString+0x3e>
 80149d4:	6938      	ldr	r0, [r7, #16]
 80149d6:	f000 f839 	bl	8014a4c <USBD_GetLen>
 80149da:	4603      	mov	r3, r0
 80149dc:	3301      	adds	r3, #1
 80149de:	b29b      	uxth	r3, r3
 80149e0:	005b      	lsls	r3, r3, #1
 80149e2:	b29a      	uxth	r2, r3
 80149e4:	e001      	b.n	80149ea <USBD_GetString+0x42>
 80149e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80149ee:	7dfb      	ldrb	r3, [r7, #23]
 80149f0:	68ba      	ldr	r2, [r7, #8]
 80149f2:	4413      	add	r3, r2
 80149f4:	687a      	ldr	r2, [r7, #4]
 80149f6:	7812      	ldrb	r2, [r2, #0]
 80149f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80149fa:	7dfb      	ldrb	r3, [r7, #23]
 80149fc:	3301      	adds	r3, #1
 80149fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014a00:	7dfb      	ldrb	r3, [r7, #23]
 8014a02:	68ba      	ldr	r2, [r7, #8]
 8014a04:	4413      	add	r3, r2
 8014a06:	2203      	movs	r2, #3
 8014a08:	701a      	strb	r2, [r3, #0]
  idx++;
 8014a0a:	7dfb      	ldrb	r3, [r7, #23]
 8014a0c:	3301      	adds	r3, #1
 8014a0e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014a10:	e013      	b.n	8014a3a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8014a12:	7dfb      	ldrb	r3, [r7, #23]
 8014a14:	68ba      	ldr	r2, [r7, #8]
 8014a16:	4413      	add	r3, r2
 8014a18:	693a      	ldr	r2, [r7, #16]
 8014a1a:	7812      	ldrb	r2, [r2, #0]
 8014a1c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014a1e:	693b      	ldr	r3, [r7, #16]
 8014a20:	3301      	adds	r3, #1
 8014a22:	613b      	str	r3, [r7, #16]
    idx++;
 8014a24:	7dfb      	ldrb	r3, [r7, #23]
 8014a26:	3301      	adds	r3, #1
 8014a28:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014a2a:	7dfb      	ldrb	r3, [r7, #23]
 8014a2c:	68ba      	ldr	r2, [r7, #8]
 8014a2e:	4413      	add	r3, r2
 8014a30:	2200      	movs	r2, #0
 8014a32:	701a      	strb	r2, [r3, #0]
    idx++;
 8014a34:	7dfb      	ldrb	r3, [r7, #23]
 8014a36:	3301      	adds	r3, #1
 8014a38:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014a3a:	693b      	ldr	r3, [r7, #16]
 8014a3c:	781b      	ldrb	r3, [r3, #0]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d1e7      	bne.n	8014a12 <USBD_GetString+0x6a>
 8014a42:	e000      	b.n	8014a46 <USBD_GetString+0x9e>
    return;
 8014a44:	bf00      	nop
  }
}
 8014a46:	3718      	adds	r7, #24
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	bd80      	pop	{r7, pc}

08014a4c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014a4c:	b480      	push	{r7}
 8014a4e:	b085      	sub	sp, #20
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014a54:	2300      	movs	r3, #0
 8014a56:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014a5c:	e005      	b.n	8014a6a <USBD_GetLen+0x1e>
  {
    len++;
 8014a5e:	7bfb      	ldrb	r3, [r7, #15]
 8014a60:	3301      	adds	r3, #1
 8014a62:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014a64:	68bb      	ldr	r3, [r7, #8]
 8014a66:	3301      	adds	r3, #1
 8014a68:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014a6a:	68bb      	ldr	r3, [r7, #8]
 8014a6c:	781b      	ldrb	r3, [r3, #0]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d1f5      	bne.n	8014a5e <USBD_GetLen+0x12>
  }

  return len;
 8014a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a74:	4618      	mov	r0, r3
 8014a76:	3714      	adds	r7, #20
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7e:	4770      	bx	lr

08014a80 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b084      	sub	sp, #16
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	60f8      	str	r0, [r7, #12]
 8014a88:	60b9      	str	r1, [r7, #8]
 8014a8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	2202      	movs	r2, #2
 8014a90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	687a      	ldr	r2, [r7, #4]
 8014a98:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	687a      	ldr	r2, [r7, #4]
 8014a9e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	68ba      	ldr	r2, [r7, #8]
 8014aa4:	2100      	movs	r1, #0
 8014aa6:	68f8      	ldr	r0, [r7, #12]
 8014aa8:	f000 fd2b 	bl	8015502 <USBD_LL_Transmit>

  return USBD_OK;
 8014aac:	2300      	movs	r3, #0
}
 8014aae:	4618      	mov	r0, r3
 8014ab0:	3710      	adds	r7, #16
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	bd80      	pop	{r7, pc}

08014ab6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014ab6:	b580      	push	{r7, lr}
 8014ab8:	b084      	sub	sp, #16
 8014aba:	af00      	add	r7, sp, #0
 8014abc:	60f8      	str	r0, [r7, #12]
 8014abe:	60b9      	str	r1, [r7, #8]
 8014ac0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	68ba      	ldr	r2, [r7, #8]
 8014ac6:	2100      	movs	r1, #0
 8014ac8:	68f8      	ldr	r0, [r7, #12]
 8014aca:	f000 fd1a 	bl	8015502 <USBD_LL_Transmit>

  return USBD_OK;
 8014ace:	2300      	movs	r3, #0
}
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	3710      	adds	r7, #16
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	bd80      	pop	{r7, pc}

08014ad8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b084      	sub	sp, #16
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	60f8      	str	r0, [r7, #12]
 8014ae0:	60b9      	str	r1, [r7, #8]
 8014ae2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	2203      	movs	r2, #3
 8014ae8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	687a      	ldr	r2, [r7, #4]
 8014af0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	687a      	ldr	r2, [r7, #4]
 8014af8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	68ba      	ldr	r2, [r7, #8]
 8014b00:	2100      	movs	r1, #0
 8014b02:	68f8      	ldr	r0, [r7, #12]
 8014b04:	f000 fd1e 	bl	8015544 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014b08:	2300      	movs	r3, #0
}
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	3710      	adds	r7, #16
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bd80      	pop	{r7, pc}

08014b12 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014b12:	b580      	push	{r7, lr}
 8014b14:	b084      	sub	sp, #16
 8014b16:	af00      	add	r7, sp, #0
 8014b18:	60f8      	str	r0, [r7, #12]
 8014b1a:	60b9      	str	r1, [r7, #8]
 8014b1c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	68ba      	ldr	r2, [r7, #8]
 8014b22:	2100      	movs	r1, #0
 8014b24:	68f8      	ldr	r0, [r7, #12]
 8014b26:	f000 fd0d 	bl	8015544 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014b2a:	2300      	movs	r3, #0
}
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	3710      	adds	r7, #16
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bd80      	pop	{r7, pc}

08014b34 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b082      	sub	sp, #8
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	2204      	movs	r2, #4
 8014b40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014b44:	2300      	movs	r3, #0
 8014b46:	2200      	movs	r2, #0
 8014b48:	2100      	movs	r1, #0
 8014b4a:	6878      	ldr	r0, [r7, #4]
 8014b4c:	f000 fcd9 	bl	8015502 <USBD_LL_Transmit>

  return USBD_OK;
 8014b50:	2300      	movs	r3, #0
}
 8014b52:	4618      	mov	r0, r3
 8014b54:	3708      	adds	r7, #8
 8014b56:	46bd      	mov	sp, r7
 8014b58:	bd80      	pop	{r7, pc}

08014b5a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014b5a:	b580      	push	{r7, lr}
 8014b5c:	b082      	sub	sp, #8
 8014b5e:	af00      	add	r7, sp, #0
 8014b60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	2205      	movs	r2, #5
 8014b66:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	2100      	movs	r1, #0
 8014b70:	6878      	ldr	r0, [r7, #4]
 8014b72:	f000 fce7 	bl	8015544 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014b76:	2300      	movs	r3, #0
}
 8014b78:	4618      	mov	r0, r3
 8014b7a:	3708      	adds	r7, #8
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	bd80      	pop	{r7, pc}

08014b80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014b84:	2200      	movs	r2, #0
 8014b86:	4918      	ldr	r1, [pc, #96]	@ (8014be8 <MX_USB_DEVICE_Init+0x68>)
 8014b88:	4818      	ldr	r0, [pc, #96]	@ (8014bec <MX_USB_DEVICE_Init+0x6c>)
 8014b8a:	f7fe fccd 	bl	8013528 <USBD_Init>
 8014b8e:	4603      	mov	r3, r0
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d001      	beq.n	8014b98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014b94:	f7ec fd88 	bl	80016a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014b98:	4915      	ldr	r1, [pc, #84]	@ (8014bf0 <MX_USB_DEVICE_Init+0x70>)
 8014b9a:	4814      	ldr	r0, [pc, #80]	@ (8014bec <MX_USB_DEVICE_Init+0x6c>)
 8014b9c:	f7fe fcf4 	bl	8013588 <USBD_RegisterClass>
 8014ba0:	4603      	mov	r3, r0
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d001      	beq.n	8014baa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014ba6:	f7ec fd7f 	bl	80016a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014baa:	4912      	ldr	r1, [pc, #72]	@ (8014bf4 <MX_USB_DEVICE_Init+0x74>)
 8014bac:	480f      	ldr	r0, [pc, #60]	@ (8014bec <MX_USB_DEVICE_Init+0x6c>)
 8014bae:	f7fe fbeb 	bl	8013388 <USBD_CDC_RegisterInterface>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d001      	beq.n	8014bbc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014bb8:	f7ec fd76 	bl	80016a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014bbc:	480b      	ldr	r0, [pc, #44]	@ (8014bec <MX_USB_DEVICE_Init+0x6c>)
 8014bbe:	f7fe fd19 	bl	80135f4 <USBD_Start>
 8014bc2:	4603      	mov	r3, r0
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d001      	beq.n	8014bcc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014bc8:	f7ec fd6e 	bl	80016a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8014bcc:	f7f7 fae6 	bl	800c19c <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 8014bd0:	4b06      	ldr	r3, [pc, #24]	@ (8014bec <MX_USB_DEVICE_Init+0x6c>)
 8014bd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014bd6:	4a05      	ldr	r2, [pc, #20]	@ (8014bec <MX_USB_DEVICE_Init+0x6c>)
 8014bd8:	33b0      	adds	r3, #176	@ 0xb0
 8014bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014bde:	4a06      	ldr	r2, [pc, #24]	@ (8014bf8 <MX_USB_DEVICE_Init+0x78>)
 8014be0:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014be2:	bf00      	nop
 8014be4:	bd80      	pop	{r7, pc}
 8014be6:	bf00      	nop
 8014be8:	240000b8 	.word	0x240000b8
 8014bec:	24009cbc 	.word	0x24009cbc
 8014bf0:	24000024 	.word	0x24000024
 8014bf4:	240000a4 	.word	0x240000a4
 8014bf8:	24009f98 	.word	0x24009f98

08014bfc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014c00:	2200      	movs	r2, #0
 8014c02:	4905      	ldr	r1, [pc, #20]	@ (8014c18 <CDC_Init_FS+0x1c>)
 8014c04:	4805      	ldr	r0, [pc, #20]	@ (8014c1c <CDC_Init_FS+0x20>)
 8014c06:	f7fe fbd9 	bl	80133bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014c0a:	4905      	ldr	r1, [pc, #20]	@ (8014c20 <CDC_Init_FS+0x24>)
 8014c0c:	4803      	ldr	r0, [pc, #12]	@ (8014c1c <CDC_Init_FS+0x20>)
 8014c0e:	f7fe fbf7 	bl	8013400 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014c12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014c14:	4618      	mov	r0, r3
 8014c16:	bd80      	pop	{r7, pc}
 8014c18:	2400a79c 	.word	0x2400a79c
 8014c1c:	24009cbc 	.word	0x24009cbc
 8014c20:	24009f9c 	.word	0x24009f9c

08014c24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014c24:	b480      	push	{r7}
 8014c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014c28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c32:	4770      	bx	lr

08014c34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014c34:	b480      	push	{r7}
 8014c36:	b083      	sub	sp, #12
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	4603      	mov	r3, r0
 8014c3c:	6039      	str	r1, [r7, #0]
 8014c3e:	71fb      	strb	r3, [r7, #7]
 8014c40:	4613      	mov	r3, r2
 8014c42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014c44:	79fb      	ldrb	r3, [r7, #7]
 8014c46:	2b23      	cmp	r3, #35	@ 0x23
 8014c48:	d84a      	bhi.n	8014ce0 <CDC_Control_FS+0xac>
 8014c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8014c50 <CDC_Control_FS+0x1c>)
 8014c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c50:	08014ce1 	.word	0x08014ce1
 8014c54:	08014ce1 	.word	0x08014ce1
 8014c58:	08014ce1 	.word	0x08014ce1
 8014c5c:	08014ce1 	.word	0x08014ce1
 8014c60:	08014ce1 	.word	0x08014ce1
 8014c64:	08014ce1 	.word	0x08014ce1
 8014c68:	08014ce1 	.word	0x08014ce1
 8014c6c:	08014ce1 	.word	0x08014ce1
 8014c70:	08014ce1 	.word	0x08014ce1
 8014c74:	08014ce1 	.word	0x08014ce1
 8014c78:	08014ce1 	.word	0x08014ce1
 8014c7c:	08014ce1 	.word	0x08014ce1
 8014c80:	08014ce1 	.word	0x08014ce1
 8014c84:	08014ce1 	.word	0x08014ce1
 8014c88:	08014ce1 	.word	0x08014ce1
 8014c8c:	08014ce1 	.word	0x08014ce1
 8014c90:	08014ce1 	.word	0x08014ce1
 8014c94:	08014ce1 	.word	0x08014ce1
 8014c98:	08014ce1 	.word	0x08014ce1
 8014c9c:	08014ce1 	.word	0x08014ce1
 8014ca0:	08014ce1 	.word	0x08014ce1
 8014ca4:	08014ce1 	.word	0x08014ce1
 8014ca8:	08014ce1 	.word	0x08014ce1
 8014cac:	08014ce1 	.word	0x08014ce1
 8014cb0:	08014ce1 	.word	0x08014ce1
 8014cb4:	08014ce1 	.word	0x08014ce1
 8014cb8:	08014ce1 	.word	0x08014ce1
 8014cbc:	08014ce1 	.word	0x08014ce1
 8014cc0:	08014ce1 	.word	0x08014ce1
 8014cc4:	08014ce1 	.word	0x08014ce1
 8014cc8:	08014ce1 	.word	0x08014ce1
 8014ccc:	08014ce1 	.word	0x08014ce1
 8014cd0:	08014ce1 	.word	0x08014ce1
 8014cd4:	08014ce1 	.word	0x08014ce1
 8014cd8:	08014ce1 	.word	0x08014ce1
 8014cdc:	08014ce1 	.word	0x08014ce1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014ce0:	bf00      	nop
  }

  return (USBD_OK);
 8014ce2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	370c      	adds	r7, #12
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cee:	4770      	bx	lr

08014cf0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b082      	sub	sp, #8
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
 8014cf8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014cfa:	6879      	ldr	r1, [r7, #4]
 8014cfc:	480a      	ldr	r0, [pc, #40]	@ (8014d28 <CDC_Receive_FS+0x38>)
 8014cfe:	f7fe fb7f 	bl	8013400 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014d02:	4809      	ldr	r0, [pc, #36]	@ (8014d28 <CDC_Receive_FS+0x38>)
 8014d04:	f7fe fbda 	bl	80134bc <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 8014d08:	4b08      	ldr	r3, [pc, #32]	@ (8014d2c <CDC_Receive_FS+0x3c>)
 8014d0a:	2201      	movs	r2, #1
 8014d0c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, Buf, *Len, 100);
 8014d0e:	683b      	ldr	r3, [r7, #0]
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	b29a      	uxth	r2, r3
 8014d14:	2364      	movs	r3, #100	@ 0x64
 8014d16:	6879      	ldr	r1, [r7, #4]
 8014d18:	4805      	ldr	r0, [pc, #20]	@ (8014d30 <CDC_Receive_FS+0x40>)
 8014d1a:	f7fb fac1 	bl	80102a0 <HAL_UART_Transmit>

	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 8014d1e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014d20:	4618      	mov	r0, r3
 8014d22:	3708      	adds	r7, #8
 8014d24:	46bd      	mov	sp, r7
 8014d26:	bd80      	pop	{r7, pc}
 8014d28:	24009cbc 	.word	0x24009cbc
 8014d2c:	240006c0 	.word	0x240006c0
 8014d30:	240005c8 	.word	0x240005c8

08014d34 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b084      	sub	sp, #16
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
 8014d3c:	460b      	mov	r3, r1
 8014d3e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014d40:	2300      	movs	r3, #0
 8014d42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014d44:	4b0d      	ldr	r3, [pc, #52]	@ (8014d7c <CDC_Transmit_FS+0x48>)
 8014d46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014d4a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014d4c:	68bb      	ldr	r3, [r7, #8]
 8014d4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d001      	beq.n	8014d5a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8014d56:	2301      	movs	r3, #1
 8014d58:	e00b      	b.n	8014d72 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8014d5a:	887b      	ldrh	r3, [r7, #2]
 8014d5c:	461a      	mov	r2, r3
 8014d5e:	6879      	ldr	r1, [r7, #4]
 8014d60:	4806      	ldr	r0, [pc, #24]	@ (8014d7c <CDC_Transmit_FS+0x48>)
 8014d62:	f7fe fb2b 	bl	80133bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014d66:	4805      	ldr	r0, [pc, #20]	@ (8014d7c <CDC_Transmit_FS+0x48>)
 8014d68:	f7fe fb68 	bl	801343c <USBD_CDC_TransmitPacket>
 8014d6c:	4603      	mov	r3, r0
 8014d6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d72:	4618      	mov	r0, r3
 8014d74:	3710      	adds	r7, #16
 8014d76:	46bd      	mov	sp, r7
 8014d78:	bd80      	pop	{r7, pc}
 8014d7a:	bf00      	nop
 8014d7c:	24009cbc 	.word	0x24009cbc

08014d80 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014d80:	b480      	push	{r7}
 8014d82:	b087      	sub	sp, #28
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	60f8      	str	r0, [r7, #12]
 8014d88:	60b9      	str	r1, [r7, #8]
 8014d8a:	4613      	mov	r3, r2
 8014d8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014d8e:	2300      	movs	r3, #0
 8014d90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014d92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014d96:	4618      	mov	r0, r3
 8014d98:	371c      	adds	r7, #28
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da0:	4770      	bx	lr
	...

08014da4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014da4:	b480      	push	{r7}
 8014da6:	b083      	sub	sp, #12
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	4603      	mov	r3, r0
 8014dac:	6039      	str	r1, [r7, #0]
 8014dae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014db0:	683b      	ldr	r3, [r7, #0]
 8014db2:	2212      	movs	r2, #18
 8014db4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014db6:	4b03      	ldr	r3, [pc, #12]	@ (8014dc4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8014db8:	4618      	mov	r0, r3
 8014dba:	370c      	adds	r7, #12
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc2:	4770      	bx	lr
 8014dc4:	240000d8 	.word	0x240000d8

08014dc8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014dc8:	b480      	push	{r7}
 8014dca:	b083      	sub	sp, #12
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	4603      	mov	r3, r0
 8014dd0:	6039      	str	r1, [r7, #0]
 8014dd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014dd4:	683b      	ldr	r3, [r7, #0]
 8014dd6:	2204      	movs	r2, #4
 8014dd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014dda:	4b03      	ldr	r3, [pc, #12]	@ (8014de8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014ddc:	4618      	mov	r0, r3
 8014dde:	370c      	adds	r7, #12
 8014de0:	46bd      	mov	sp, r7
 8014de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de6:	4770      	bx	lr
 8014de8:	240000ec 	.word	0x240000ec

08014dec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b082      	sub	sp, #8
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	4603      	mov	r3, r0
 8014df4:	6039      	str	r1, [r7, #0]
 8014df6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014df8:	79fb      	ldrb	r3, [r7, #7]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d105      	bne.n	8014e0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014dfe:	683a      	ldr	r2, [r7, #0]
 8014e00:	4907      	ldr	r1, [pc, #28]	@ (8014e20 <USBD_FS_ProductStrDescriptor+0x34>)
 8014e02:	4808      	ldr	r0, [pc, #32]	@ (8014e24 <USBD_FS_ProductStrDescriptor+0x38>)
 8014e04:	f7ff fdd0 	bl	80149a8 <USBD_GetString>
 8014e08:	e004      	b.n	8014e14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014e0a:	683a      	ldr	r2, [r7, #0]
 8014e0c:	4904      	ldr	r1, [pc, #16]	@ (8014e20 <USBD_FS_ProductStrDescriptor+0x34>)
 8014e0e:	4805      	ldr	r0, [pc, #20]	@ (8014e24 <USBD_FS_ProductStrDescriptor+0x38>)
 8014e10:	f7ff fdca 	bl	80149a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014e14:	4b02      	ldr	r3, [pc, #8]	@ (8014e20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014e16:	4618      	mov	r0, r3
 8014e18:	3708      	adds	r7, #8
 8014e1a:	46bd      	mov	sp, r7
 8014e1c:	bd80      	pop	{r7, pc}
 8014e1e:	bf00      	nop
 8014e20:	2400af9c 	.word	0x2400af9c
 8014e24:	080160e0 	.word	0x080160e0

08014e28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b082      	sub	sp, #8
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	4603      	mov	r3, r0
 8014e30:	6039      	str	r1, [r7, #0]
 8014e32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014e34:	683a      	ldr	r2, [r7, #0]
 8014e36:	4904      	ldr	r1, [pc, #16]	@ (8014e48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014e38:	4804      	ldr	r0, [pc, #16]	@ (8014e4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014e3a:	f7ff fdb5 	bl	80149a8 <USBD_GetString>
  return USBD_StrDesc;
 8014e3e:	4b02      	ldr	r3, [pc, #8]	@ (8014e48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014e40:	4618      	mov	r0, r3
 8014e42:	3708      	adds	r7, #8
 8014e44:	46bd      	mov	sp, r7
 8014e46:	bd80      	pop	{r7, pc}
 8014e48:	2400af9c 	.word	0x2400af9c
 8014e4c:	080160f8 	.word	0x080160f8

08014e50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b082      	sub	sp, #8
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	4603      	mov	r3, r0
 8014e58:	6039      	str	r1, [r7, #0]
 8014e5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014e5c:	683b      	ldr	r3, [r7, #0]
 8014e5e:	221a      	movs	r2, #26
 8014e60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014e62:	f000 f843 	bl	8014eec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014e66:	4b02      	ldr	r3, [pc, #8]	@ (8014e70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014e68:	4618      	mov	r0, r3
 8014e6a:	3708      	adds	r7, #8
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	bd80      	pop	{r7, pc}
 8014e70:	240000f0 	.word	0x240000f0

08014e74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b082      	sub	sp, #8
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	6039      	str	r1, [r7, #0]
 8014e7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014e80:	79fb      	ldrb	r3, [r7, #7]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d105      	bne.n	8014e92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014e86:	683a      	ldr	r2, [r7, #0]
 8014e88:	4907      	ldr	r1, [pc, #28]	@ (8014ea8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014e8a:	4808      	ldr	r0, [pc, #32]	@ (8014eac <USBD_FS_ConfigStrDescriptor+0x38>)
 8014e8c:	f7ff fd8c 	bl	80149a8 <USBD_GetString>
 8014e90:	e004      	b.n	8014e9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014e92:	683a      	ldr	r2, [r7, #0]
 8014e94:	4904      	ldr	r1, [pc, #16]	@ (8014ea8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014e96:	4805      	ldr	r0, [pc, #20]	@ (8014eac <USBD_FS_ConfigStrDescriptor+0x38>)
 8014e98:	f7ff fd86 	bl	80149a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014e9c:	4b02      	ldr	r3, [pc, #8]	@ (8014ea8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	3708      	adds	r7, #8
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	bd80      	pop	{r7, pc}
 8014ea6:	bf00      	nop
 8014ea8:	2400af9c 	.word	0x2400af9c
 8014eac:	0801610c 	.word	0x0801610c

08014eb0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b082      	sub	sp, #8
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	6039      	str	r1, [r7, #0]
 8014eba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014ebc:	79fb      	ldrb	r3, [r7, #7]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d105      	bne.n	8014ece <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014ec2:	683a      	ldr	r2, [r7, #0]
 8014ec4:	4907      	ldr	r1, [pc, #28]	@ (8014ee4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014ec6:	4808      	ldr	r0, [pc, #32]	@ (8014ee8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014ec8:	f7ff fd6e 	bl	80149a8 <USBD_GetString>
 8014ecc:	e004      	b.n	8014ed8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014ece:	683a      	ldr	r2, [r7, #0]
 8014ed0:	4904      	ldr	r1, [pc, #16]	@ (8014ee4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014ed2:	4805      	ldr	r0, [pc, #20]	@ (8014ee8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014ed4:	f7ff fd68 	bl	80149a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014ed8:	4b02      	ldr	r3, [pc, #8]	@ (8014ee4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014eda:	4618      	mov	r0, r3
 8014edc:	3708      	adds	r7, #8
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
 8014ee2:	bf00      	nop
 8014ee4:	2400af9c 	.word	0x2400af9c
 8014ee8:	08016118 	.word	0x08016118

08014eec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b084      	sub	sp, #16
 8014ef0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8014f30 <Get_SerialNum+0x44>)
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8014f34 <Get_SerialNum+0x48>)
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014efe:	4b0e      	ldr	r3, [pc, #56]	@ (8014f38 <Get_SerialNum+0x4c>)
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014f04:	68fa      	ldr	r2, [r7, #12]
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	4413      	add	r3, r2
 8014f0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d009      	beq.n	8014f26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014f12:	2208      	movs	r2, #8
 8014f14:	4909      	ldr	r1, [pc, #36]	@ (8014f3c <Get_SerialNum+0x50>)
 8014f16:	68f8      	ldr	r0, [r7, #12]
 8014f18:	f000 f814 	bl	8014f44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014f1c:	2204      	movs	r2, #4
 8014f1e:	4908      	ldr	r1, [pc, #32]	@ (8014f40 <Get_SerialNum+0x54>)
 8014f20:	68b8      	ldr	r0, [r7, #8]
 8014f22:	f000 f80f 	bl	8014f44 <IntToUnicode>
  }
}
 8014f26:	bf00      	nop
 8014f28:	3710      	adds	r7, #16
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	bd80      	pop	{r7, pc}
 8014f2e:	bf00      	nop
 8014f30:	1ff1e800 	.word	0x1ff1e800
 8014f34:	1ff1e804 	.word	0x1ff1e804
 8014f38:	1ff1e808 	.word	0x1ff1e808
 8014f3c:	240000f2 	.word	0x240000f2
 8014f40:	24000102 	.word	0x24000102

08014f44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014f44:	b480      	push	{r7}
 8014f46:	b087      	sub	sp, #28
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	60f8      	str	r0, [r7, #12]
 8014f4c:	60b9      	str	r1, [r7, #8]
 8014f4e:	4613      	mov	r3, r2
 8014f50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014f52:	2300      	movs	r3, #0
 8014f54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014f56:	2300      	movs	r3, #0
 8014f58:	75fb      	strb	r3, [r7, #23]
 8014f5a:	e027      	b.n	8014fac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	0f1b      	lsrs	r3, r3, #28
 8014f60:	2b09      	cmp	r3, #9
 8014f62:	d80b      	bhi.n	8014f7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	0f1b      	lsrs	r3, r3, #28
 8014f68:	b2da      	uxtb	r2, r3
 8014f6a:	7dfb      	ldrb	r3, [r7, #23]
 8014f6c:	005b      	lsls	r3, r3, #1
 8014f6e:	4619      	mov	r1, r3
 8014f70:	68bb      	ldr	r3, [r7, #8]
 8014f72:	440b      	add	r3, r1
 8014f74:	3230      	adds	r2, #48	@ 0x30
 8014f76:	b2d2      	uxtb	r2, r2
 8014f78:	701a      	strb	r2, [r3, #0]
 8014f7a:	e00a      	b.n	8014f92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	0f1b      	lsrs	r3, r3, #28
 8014f80:	b2da      	uxtb	r2, r3
 8014f82:	7dfb      	ldrb	r3, [r7, #23]
 8014f84:	005b      	lsls	r3, r3, #1
 8014f86:	4619      	mov	r1, r3
 8014f88:	68bb      	ldr	r3, [r7, #8]
 8014f8a:	440b      	add	r3, r1
 8014f8c:	3237      	adds	r2, #55	@ 0x37
 8014f8e:	b2d2      	uxtb	r2, r2
 8014f90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	011b      	lsls	r3, r3, #4
 8014f96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014f98:	7dfb      	ldrb	r3, [r7, #23]
 8014f9a:	005b      	lsls	r3, r3, #1
 8014f9c:	3301      	adds	r3, #1
 8014f9e:	68ba      	ldr	r2, [r7, #8]
 8014fa0:	4413      	add	r3, r2
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014fa6:	7dfb      	ldrb	r3, [r7, #23]
 8014fa8:	3301      	adds	r3, #1
 8014faa:	75fb      	strb	r3, [r7, #23]
 8014fac:	7dfa      	ldrb	r2, [r7, #23]
 8014fae:	79fb      	ldrb	r3, [r7, #7]
 8014fb0:	429a      	cmp	r2, r3
 8014fb2:	d3d3      	bcc.n	8014f5c <IntToUnicode+0x18>
  }
}
 8014fb4:	bf00      	nop
 8014fb6:	bf00      	nop
 8014fb8:	371c      	adds	r7, #28
 8014fba:	46bd      	mov	sp, r7
 8014fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc0:	4770      	bx	lr
	...

08014fc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b0ba      	sub	sp, #232	@ 0xe8
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014fcc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	601a      	str	r2, [r3, #0]
 8014fd4:	605a      	str	r2, [r3, #4]
 8014fd6:	609a      	str	r2, [r3, #8]
 8014fd8:	60da      	str	r2, [r3, #12]
 8014fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014fdc:	f107 0310 	add.w	r3, r7, #16
 8014fe0:	22c0      	movs	r2, #192	@ 0xc0
 8014fe2:	2100      	movs	r1, #0
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	f000 fb47 	bl	8015678 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	4a2c      	ldr	r2, [pc, #176]	@ (80150a0 <HAL_PCD_MspInit+0xdc>)
 8014ff0:	4293      	cmp	r3, r2
 8014ff2:	d151      	bne.n	8015098 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8014ff4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8014ff8:	f04f 0300 	mov.w	r3, #0
 8014ffc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8015000:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8015004:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015008:	f107 0310 	add.w	r3, r7, #16
 801500c:	4618      	mov	r0, r3
 801500e:	f7f8 f8bb 	bl	800d188 <HAL_RCCEx_PeriphCLKConfig>
 8015012:	4603      	mov	r3, r0
 8015014:	2b00      	cmp	r3, #0
 8015016:	d001      	beq.n	801501c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8015018:	f7ec fb46 	bl	80016a8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801501c:	f7f7 f8be 	bl	800c19c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015020:	4b20      	ldr	r3, [pc, #128]	@ (80150a4 <HAL_PCD_MspInit+0xe0>)
 8015022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015026:	4a1f      	ldr	r2, [pc, #124]	@ (80150a4 <HAL_PCD_MspInit+0xe0>)
 8015028:	f043 0301 	orr.w	r3, r3, #1
 801502c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8015030:	4b1c      	ldr	r3, [pc, #112]	@ (80150a4 <HAL_PCD_MspInit+0xe0>)
 8015032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015036:	f003 0301 	and.w	r3, r3, #1
 801503a:	60fb      	str	r3, [r7, #12]
 801503c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801503e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8015042:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015046:	2302      	movs	r3, #2
 8015048:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801504c:	2300      	movs	r3, #0
 801504e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015052:	2300      	movs	r3, #0
 8015054:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8015058:	230a      	movs	r3, #10
 801505a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801505e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8015062:	4619      	mov	r1, r3
 8015064:	4810      	ldr	r0, [pc, #64]	@ (80150a8 <HAL_PCD_MspInit+0xe4>)
 8015066:	f7f1 f9cb 	bl	8006400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801506a:	4b0e      	ldr	r3, [pc, #56]	@ (80150a4 <HAL_PCD_MspInit+0xe0>)
 801506c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8015070:	4a0c      	ldr	r2, [pc, #48]	@ (80150a4 <HAL_PCD_MspInit+0xe0>)
 8015072:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015076:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801507a:	4b0a      	ldr	r3, [pc, #40]	@ (80150a4 <HAL_PCD_MspInit+0xe0>)
 801507c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8015080:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015084:	60bb      	str	r3, [r7, #8]
 8015086:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8015088:	2200      	movs	r2, #0
 801508a:	2100      	movs	r1, #0
 801508c:	2065      	movs	r0, #101	@ 0x65
 801508e:	f7ed fb24 	bl	80026da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015092:	2065      	movs	r0, #101	@ 0x65
 8015094:	f7ed fb3b 	bl	800270e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015098:	bf00      	nop
 801509a:	37e8      	adds	r7, #232	@ 0xe8
 801509c:	46bd      	mov	sp, r7
 801509e:	bd80      	pop	{r7, pc}
 80150a0:	40080000 	.word	0x40080000
 80150a4:	58024400 	.word	0x58024400
 80150a8:	58020000 	.word	0x58020000

080150ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b082      	sub	sp, #8
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80150c0:	4619      	mov	r1, r3
 80150c2:	4610      	mov	r0, r2
 80150c4:	f7fe fae3 	bl	801368e <USBD_LL_SetupStage>
}
 80150c8:	bf00      	nop
 80150ca:	3708      	adds	r7, #8
 80150cc:	46bd      	mov	sp, r7
 80150ce:	bd80      	pop	{r7, pc}

080150d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b082      	sub	sp, #8
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
 80150d8:	460b      	mov	r3, r1
 80150da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80150e2:	78fa      	ldrb	r2, [r7, #3]
 80150e4:	6879      	ldr	r1, [r7, #4]
 80150e6:	4613      	mov	r3, r2
 80150e8:	00db      	lsls	r3, r3, #3
 80150ea:	4413      	add	r3, r2
 80150ec:	009b      	lsls	r3, r3, #2
 80150ee:	440b      	add	r3, r1
 80150f0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80150f4:	681a      	ldr	r2, [r3, #0]
 80150f6:	78fb      	ldrb	r3, [r7, #3]
 80150f8:	4619      	mov	r1, r3
 80150fa:	f7fe fb1d 	bl	8013738 <USBD_LL_DataOutStage>
}
 80150fe:	bf00      	nop
 8015100:	3708      	adds	r7, #8
 8015102:	46bd      	mov	sp, r7
 8015104:	bd80      	pop	{r7, pc}

08015106 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015106:	b580      	push	{r7, lr}
 8015108:	b082      	sub	sp, #8
 801510a:	af00      	add	r7, sp, #0
 801510c:	6078      	str	r0, [r7, #4]
 801510e:	460b      	mov	r3, r1
 8015110:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8015118:	78fa      	ldrb	r2, [r7, #3]
 801511a:	6879      	ldr	r1, [r7, #4]
 801511c:	4613      	mov	r3, r2
 801511e:	00db      	lsls	r3, r3, #3
 8015120:	4413      	add	r3, r2
 8015122:	009b      	lsls	r3, r3, #2
 8015124:	440b      	add	r3, r1
 8015126:	3320      	adds	r3, #32
 8015128:	681a      	ldr	r2, [r3, #0]
 801512a:	78fb      	ldrb	r3, [r7, #3]
 801512c:	4619      	mov	r1, r3
 801512e:	f7fe fbb6 	bl	801389e <USBD_LL_DataInStage>
}
 8015132:	bf00      	nop
 8015134:	3708      	adds	r7, #8
 8015136:	46bd      	mov	sp, r7
 8015138:	bd80      	pop	{r7, pc}

0801513a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801513a:	b580      	push	{r7, lr}
 801513c:	b082      	sub	sp, #8
 801513e:	af00      	add	r7, sp, #0
 8015140:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015148:	4618      	mov	r0, r3
 801514a:	f7fe fcf0 	bl	8013b2e <USBD_LL_SOF>
}
 801514e:	bf00      	nop
 8015150:	3708      	adds	r7, #8
 8015152:	46bd      	mov	sp, r7
 8015154:	bd80      	pop	{r7, pc}

08015156 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015156:	b580      	push	{r7, lr}
 8015158:	b084      	sub	sp, #16
 801515a:	af00      	add	r7, sp, #0
 801515c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801515e:	2301      	movs	r3, #1
 8015160:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	79db      	ldrb	r3, [r3, #7]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d102      	bne.n	8015170 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801516a:	2300      	movs	r3, #0
 801516c:	73fb      	strb	r3, [r7, #15]
 801516e:	e008      	b.n	8015182 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	79db      	ldrb	r3, [r3, #7]
 8015174:	2b02      	cmp	r3, #2
 8015176:	d102      	bne.n	801517e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015178:	2301      	movs	r3, #1
 801517a:	73fb      	strb	r3, [r7, #15]
 801517c:	e001      	b.n	8015182 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801517e:	f7ec fa93 	bl	80016a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015188:	7bfa      	ldrb	r2, [r7, #15]
 801518a:	4611      	mov	r1, r2
 801518c:	4618      	mov	r0, r3
 801518e:	f7fe fc8a 	bl	8013aa6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015198:	4618      	mov	r0, r3
 801519a:	f7fe fc32 	bl	8013a02 <USBD_LL_Reset>
}
 801519e:	bf00      	nop
 80151a0:	3710      	adds	r7, #16
 80151a2:	46bd      	mov	sp, r7
 80151a4:	bd80      	pop	{r7, pc}
	...

080151a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b082      	sub	sp, #8
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80151b6:	4618      	mov	r0, r3
 80151b8:	f7fe fc85 	bl	8013ac6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	687a      	ldr	r2, [r7, #4]
 80151c8:	6812      	ldr	r2, [r2, #0]
 80151ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80151ce:	f043 0301 	orr.w	r3, r3, #1
 80151d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	7adb      	ldrb	r3, [r3, #11]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d005      	beq.n	80151e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80151dc:	4b04      	ldr	r3, [pc, #16]	@ (80151f0 <HAL_PCD_SuspendCallback+0x48>)
 80151de:	691b      	ldr	r3, [r3, #16]
 80151e0:	4a03      	ldr	r2, [pc, #12]	@ (80151f0 <HAL_PCD_SuspendCallback+0x48>)
 80151e2:	f043 0306 	orr.w	r3, r3, #6
 80151e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80151e8:	bf00      	nop
 80151ea:	3708      	adds	r7, #8
 80151ec:	46bd      	mov	sp, r7
 80151ee:	bd80      	pop	{r7, pc}
 80151f0:	e000ed00 	.word	0xe000ed00

080151f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b082      	sub	sp, #8
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015202:	4618      	mov	r0, r3
 8015204:	f7fe fc7b 	bl	8013afe <USBD_LL_Resume>
}
 8015208:	bf00      	nop
 801520a:	3708      	adds	r7, #8
 801520c:	46bd      	mov	sp, r7
 801520e:	bd80      	pop	{r7, pc}

08015210 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b082      	sub	sp, #8
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
 8015218:	460b      	mov	r3, r1
 801521a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015222:	78fa      	ldrb	r2, [r7, #3]
 8015224:	4611      	mov	r1, r2
 8015226:	4618      	mov	r0, r3
 8015228:	f7fe fcd3 	bl	8013bd2 <USBD_LL_IsoOUTIncomplete>
}
 801522c:	bf00      	nop
 801522e:	3708      	adds	r7, #8
 8015230:	46bd      	mov	sp, r7
 8015232:	bd80      	pop	{r7, pc}

08015234 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b082      	sub	sp, #8
 8015238:	af00      	add	r7, sp, #0
 801523a:	6078      	str	r0, [r7, #4]
 801523c:	460b      	mov	r3, r1
 801523e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015246:	78fa      	ldrb	r2, [r7, #3]
 8015248:	4611      	mov	r1, r2
 801524a:	4618      	mov	r0, r3
 801524c:	f7fe fc8f 	bl	8013b6e <USBD_LL_IsoINIncomplete>
}
 8015250:	bf00      	nop
 8015252:	3708      	adds	r7, #8
 8015254:	46bd      	mov	sp, r7
 8015256:	bd80      	pop	{r7, pc}

08015258 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b082      	sub	sp, #8
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015266:	4618      	mov	r0, r3
 8015268:	f7fe fce5 	bl	8013c36 <USBD_LL_DevConnected>
}
 801526c:	bf00      	nop
 801526e:	3708      	adds	r7, #8
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}

08015274 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b082      	sub	sp, #8
 8015278:	af00      	add	r7, sp, #0
 801527a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015282:	4618      	mov	r0, r3
 8015284:	f7fe fce2 	bl	8013c4c <USBD_LL_DevDisconnected>
}
 8015288:	bf00      	nop
 801528a:	3708      	adds	r7, #8
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}

08015290 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b082      	sub	sp, #8
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	781b      	ldrb	r3, [r3, #0]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d13e      	bne.n	801531e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80152a0:	4a21      	ldr	r2, [pc, #132]	@ (8015328 <USBD_LL_Init+0x98>)
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	4a1f      	ldr	r2, [pc, #124]	@ (8015328 <USBD_LL_Init+0x98>)
 80152ac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80152b0:	4b1d      	ldr	r3, [pc, #116]	@ (8015328 <USBD_LL_Init+0x98>)
 80152b2:	4a1e      	ldr	r2, [pc, #120]	@ (801532c <USBD_LL_Init+0x9c>)
 80152b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80152b6:	4b1c      	ldr	r3, [pc, #112]	@ (8015328 <USBD_LL_Init+0x98>)
 80152b8:	2209      	movs	r2, #9
 80152ba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80152bc:	4b1a      	ldr	r3, [pc, #104]	@ (8015328 <USBD_LL_Init+0x98>)
 80152be:	2202      	movs	r2, #2
 80152c0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80152c2:	4b19      	ldr	r3, [pc, #100]	@ (8015328 <USBD_LL_Init+0x98>)
 80152c4:	2200      	movs	r2, #0
 80152c6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80152c8:	4b17      	ldr	r3, [pc, #92]	@ (8015328 <USBD_LL_Init+0x98>)
 80152ca:	2202      	movs	r2, #2
 80152cc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80152ce:	4b16      	ldr	r3, [pc, #88]	@ (8015328 <USBD_LL_Init+0x98>)
 80152d0:	2200      	movs	r2, #0
 80152d2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80152d4:	4b14      	ldr	r3, [pc, #80]	@ (8015328 <USBD_LL_Init+0x98>)
 80152d6:	2200      	movs	r2, #0
 80152d8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80152da:	4b13      	ldr	r3, [pc, #76]	@ (8015328 <USBD_LL_Init+0x98>)
 80152dc:	2200      	movs	r2, #0
 80152de:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80152e0:	4b11      	ldr	r3, [pc, #68]	@ (8015328 <USBD_LL_Init+0x98>)
 80152e2:	2200      	movs	r2, #0
 80152e4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80152e6:	4b10      	ldr	r3, [pc, #64]	@ (8015328 <USBD_LL_Init+0x98>)
 80152e8:	2200      	movs	r2, #0
 80152ea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80152ec:	4b0e      	ldr	r3, [pc, #56]	@ (8015328 <USBD_LL_Init+0x98>)
 80152ee:	2200      	movs	r2, #0
 80152f0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80152f2:	480d      	ldr	r0, [pc, #52]	@ (8015328 <USBD_LL_Init+0x98>)
 80152f4:	f7f5 fc78 	bl	800abe8 <HAL_PCD_Init>
 80152f8:	4603      	mov	r3, r0
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d001      	beq.n	8015302 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80152fe:	f7ec f9d3 	bl	80016a8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015302:	2180      	movs	r1, #128	@ 0x80
 8015304:	4808      	ldr	r0, [pc, #32]	@ (8015328 <USBD_LL_Init+0x98>)
 8015306:	f7f6 fece 	bl	800c0a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801530a:	2240      	movs	r2, #64	@ 0x40
 801530c:	2100      	movs	r1, #0
 801530e:	4806      	ldr	r0, [pc, #24]	@ (8015328 <USBD_LL_Init+0x98>)
 8015310:	f7f6 fe82 	bl	800c018 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015314:	2280      	movs	r2, #128	@ 0x80
 8015316:	2101      	movs	r1, #1
 8015318:	4803      	ldr	r0, [pc, #12]	@ (8015328 <USBD_LL_Init+0x98>)
 801531a:	f7f6 fe7d 	bl	800c018 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801531e:	2300      	movs	r3, #0
}
 8015320:	4618      	mov	r0, r3
 8015322:	3708      	adds	r7, #8
 8015324:	46bd      	mov	sp, r7
 8015326:	bd80      	pop	{r7, pc}
 8015328:	2400b19c 	.word	0x2400b19c
 801532c:	40080000 	.word	0x40080000

08015330 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b084      	sub	sp, #16
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015338:	2300      	movs	r3, #0
 801533a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801533c:	2300      	movs	r3, #0
 801533e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015346:	4618      	mov	r0, r3
 8015348:	f7f5 fd5a 	bl	800ae00 <HAL_PCD_Start>
 801534c:	4603      	mov	r3, r0
 801534e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015350:	7bfb      	ldrb	r3, [r7, #15]
 8015352:	4618      	mov	r0, r3
 8015354:	f000 f942 	bl	80155dc <USBD_Get_USB_Status>
 8015358:	4603      	mov	r3, r0
 801535a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801535c:	7bbb      	ldrb	r3, [r7, #14]
}
 801535e:	4618      	mov	r0, r3
 8015360:	3710      	adds	r7, #16
 8015362:	46bd      	mov	sp, r7
 8015364:	bd80      	pop	{r7, pc}

08015366 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015366:	b580      	push	{r7, lr}
 8015368:	b084      	sub	sp, #16
 801536a:	af00      	add	r7, sp, #0
 801536c:	6078      	str	r0, [r7, #4]
 801536e:	4608      	mov	r0, r1
 8015370:	4611      	mov	r1, r2
 8015372:	461a      	mov	r2, r3
 8015374:	4603      	mov	r3, r0
 8015376:	70fb      	strb	r3, [r7, #3]
 8015378:	460b      	mov	r3, r1
 801537a:	70bb      	strb	r3, [r7, #2]
 801537c:	4613      	mov	r3, r2
 801537e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015380:	2300      	movs	r3, #0
 8015382:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015384:	2300      	movs	r3, #0
 8015386:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801538e:	78bb      	ldrb	r3, [r7, #2]
 8015390:	883a      	ldrh	r2, [r7, #0]
 8015392:	78f9      	ldrb	r1, [r7, #3]
 8015394:	f7f6 fa5b 	bl	800b84e <HAL_PCD_EP_Open>
 8015398:	4603      	mov	r3, r0
 801539a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801539c:	7bfb      	ldrb	r3, [r7, #15]
 801539e:	4618      	mov	r0, r3
 80153a0:	f000 f91c 	bl	80155dc <USBD_Get_USB_Status>
 80153a4:	4603      	mov	r3, r0
 80153a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80153a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	3710      	adds	r7, #16
 80153ae:	46bd      	mov	sp, r7
 80153b0:	bd80      	pop	{r7, pc}

080153b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80153b2:	b580      	push	{r7, lr}
 80153b4:	b084      	sub	sp, #16
 80153b6:	af00      	add	r7, sp, #0
 80153b8:	6078      	str	r0, [r7, #4]
 80153ba:	460b      	mov	r3, r1
 80153bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80153be:	2300      	movs	r3, #0
 80153c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80153c2:	2300      	movs	r3, #0
 80153c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80153cc:	78fa      	ldrb	r2, [r7, #3]
 80153ce:	4611      	mov	r1, r2
 80153d0:	4618      	mov	r0, r3
 80153d2:	f7f6 faa6 	bl	800b922 <HAL_PCD_EP_Close>
 80153d6:	4603      	mov	r3, r0
 80153d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80153da:	7bfb      	ldrb	r3, [r7, #15]
 80153dc:	4618      	mov	r0, r3
 80153de:	f000 f8fd 	bl	80155dc <USBD_Get_USB_Status>
 80153e2:	4603      	mov	r3, r0
 80153e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80153e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80153e8:	4618      	mov	r0, r3
 80153ea:	3710      	adds	r7, #16
 80153ec:	46bd      	mov	sp, r7
 80153ee:	bd80      	pop	{r7, pc}

080153f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b084      	sub	sp, #16
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
 80153f8:	460b      	mov	r3, r1
 80153fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80153fc:	2300      	movs	r3, #0
 80153fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015400:	2300      	movs	r3, #0
 8015402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801540a:	78fa      	ldrb	r2, [r7, #3]
 801540c:	4611      	mov	r1, r2
 801540e:	4618      	mov	r0, r3
 8015410:	f7f6 fb5e 	bl	800bad0 <HAL_PCD_EP_SetStall>
 8015414:	4603      	mov	r3, r0
 8015416:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015418:	7bfb      	ldrb	r3, [r7, #15]
 801541a:	4618      	mov	r0, r3
 801541c:	f000 f8de 	bl	80155dc <USBD_Get_USB_Status>
 8015420:	4603      	mov	r3, r0
 8015422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015424:	7bbb      	ldrb	r3, [r7, #14]
}
 8015426:	4618      	mov	r0, r3
 8015428:	3710      	adds	r7, #16
 801542a:	46bd      	mov	sp, r7
 801542c:	bd80      	pop	{r7, pc}

0801542e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801542e:	b580      	push	{r7, lr}
 8015430:	b084      	sub	sp, #16
 8015432:	af00      	add	r7, sp, #0
 8015434:	6078      	str	r0, [r7, #4]
 8015436:	460b      	mov	r3, r1
 8015438:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801543a:	2300      	movs	r3, #0
 801543c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801543e:	2300      	movs	r3, #0
 8015440:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015448:	78fa      	ldrb	r2, [r7, #3]
 801544a:	4611      	mov	r1, r2
 801544c:	4618      	mov	r0, r3
 801544e:	f7f6 fba2 	bl	800bb96 <HAL_PCD_EP_ClrStall>
 8015452:	4603      	mov	r3, r0
 8015454:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015456:	7bfb      	ldrb	r3, [r7, #15]
 8015458:	4618      	mov	r0, r3
 801545a:	f000 f8bf 	bl	80155dc <USBD_Get_USB_Status>
 801545e:	4603      	mov	r3, r0
 8015460:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015462:	7bbb      	ldrb	r3, [r7, #14]
}
 8015464:	4618      	mov	r0, r3
 8015466:	3710      	adds	r7, #16
 8015468:	46bd      	mov	sp, r7
 801546a:	bd80      	pop	{r7, pc}

0801546c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801546c:	b480      	push	{r7}
 801546e:	b085      	sub	sp, #20
 8015470:	af00      	add	r7, sp, #0
 8015472:	6078      	str	r0, [r7, #4]
 8015474:	460b      	mov	r3, r1
 8015476:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801547e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015480:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015484:	2b00      	cmp	r3, #0
 8015486:	da0b      	bge.n	80154a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015488:	78fb      	ldrb	r3, [r7, #3]
 801548a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801548e:	68f9      	ldr	r1, [r7, #12]
 8015490:	4613      	mov	r3, r2
 8015492:	00db      	lsls	r3, r3, #3
 8015494:	4413      	add	r3, r2
 8015496:	009b      	lsls	r3, r3, #2
 8015498:	440b      	add	r3, r1
 801549a:	3316      	adds	r3, #22
 801549c:	781b      	ldrb	r3, [r3, #0]
 801549e:	e00b      	b.n	80154b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80154a0:	78fb      	ldrb	r3, [r7, #3]
 80154a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80154a6:	68f9      	ldr	r1, [r7, #12]
 80154a8:	4613      	mov	r3, r2
 80154aa:	00db      	lsls	r3, r3, #3
 80154ac:	4413      	add	r3, r2
 80154ae:	009b      	lsls	r3, r3, #2
 80154b0:	440b      	add	r3, r1
 80154b2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80154b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80154b8:	4618      	mov	r0, r3
 80154ba:	3714      	adds	r7, #20
 80154bc:	46bd      	mov	sp, r7
 80154be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c2:	4770      	bx	lr

080154c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b084      	sub	sp, #16
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	6078      	str	r0, [r7, #4]
 80154cc:	460b      	mov	r3, r1
 80154ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80154d0:	2300      	movs	r3, #0
 80154d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80154d4:	2300      	movs	r3, #0
 80154d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80154de:	78fa      	ldrb	r2, [r7, #3]
 80154e0:	4611      	mov	r1, r2
 80154e2:	4618      	mov	r0, r3
 80154e4:	f7f6 f98f 	bl	800b806 <HAL_PCD_SetAddress>
 80154e8:	4603      	mov	r3, r0
 80154ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80154ec:	7bfb      	ldrb	r3, [r7, #15]
 80154ee:	4618      	mov	r0, r3
 80154f0:	f000 f874 	bl	80155dc <USBD_Get_USB_Status>
 80154f4:	4603      	mov	r3, r0
 80154f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80154f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80154fa:	4618      	mov	r0, r3
 80154fc:	3710      	adds	r7, #16
 80154fe:	46bd      	mov	sp, r7
 8015500:	bd80      	pop	{r7, pc}

08015502 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015502:	b580      	push	{r7, lr}
 8015504:	b086      	sub	sp, #24
 8015506:	af00      	add	r7, sp, #0
 8015508:	60f8      	str	r0, [r7, #12]
 801550a:	607a      	str	r2, [r7, #4]
 801550c:	603b      	str	r3, [r7, #0]
 801550e:	460b      	mov	r3, r1
 8015510:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015512:	2300      	movs	r3, #0
 8015514:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015516:	2300      	movs	r3, #0
 8015518:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015520:	7af9      	ldrb	r1, [r7, #11]
 8015522:	683b      	ldr	r3, [r7, #0]
 8015524:	687a      	ldr	r2, [r7, #4]
 8015526:	f7f6 fa99 	bl	800ba5c <HAL_PCD_EP_Transmit>
 801552a:	4603      	mov	r3, r0
 801552c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801552e:	7dfb      	ldrb	r3, [r7, #23]
 8015530:	4618      	mov	r0, r3
 8015532:	f000 f853 	bl	80155dc <USBD_Get_USB_Status>
 8015536:	4603      	mov	r3, r0
 8015538:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801553a:	7dbb      	ldrb	r3, [r7, #22]
}
 801553c:	4618      	mov	r0, r3
 801553e:	3718      	adds	r7, #24
 8015540:	46bd      	mov	sp, r7
 8015542:	bd80      	pop	{r7, pc}

08015544 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015544:	b580      	push	{r7, lr}
 8015546:	b086      	sub	sp, #24
 8015548:	af00      	add	r7, sp, #0
 801554a:	60f8      	str	r0, [r7, #12]
 801554c:	607a      	str	r2, [r7, #4]
 801554e:	603b      	str	r3, [r7, #0]
 8015550:	460b      	mov	r3, r1
 8015552:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015554:	2300      	movs	r3, #0
 8015556:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015558:	2300      	movs	r3, #0
 801555a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015562:	7af9      	ldrb	r1, [r7, #11]
 8015564:	683b      	ldr	r3, [r7, #0]
 8015566:	687a      	ldr	r2, [r7, #4]
 8015568:	f7f6 fa25 	bl	800b9b6 <HAL_PCD_EP_Receive>
 801556c:	4603      	mov	r3, r0
 801556e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015570:	7dfb      	ldrb	r3, [r7, #23]
 8015572:	4618      	mov	r0, r3
 8015574:	f000 f832 	bl	80155dc <USBD_Get_USB_Status>
 8015578:	4603      	mov	r3, r0
 801557a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801557c:	7dbb      	ldrb	r3, [r7, #22]
}
 801557e:	4618      	mov	r0, r3
 8015580:	3718      	adds	r7, #24
 8015582:	46bd      	mov	sp, r7
 8015584:	bd80      	pop	{r7, pc}

08015586 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015586:	b580      	push	{r7, lr}
 8015588:	b082      	sub	sp, #8
 801558a:	af00      	add	r7, sp, #0
 801558c:	6078      	str	r0, [r7, #4]
 801558e:	460b      	mov	r3, r1
 8015590:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015598:	78fa      	ldrb	r2, [r7, #3]
 801559a:	4611      	mov	r1, r2
 801559c:	4618      	mov	r0, r3
 801559e:	f7f6 fa45 	bl	800ba2c <HAL_PCD_EP_GetRxCount>
 80155a2:	4603      	mov	r3, r0
}
 80155a4:	4618      	mov	r0, r3
 80155a6:	3708      	adds	r7, #8
 80155a8:	46bd      	mov	sp, r7
 80155aa:	bd80      	pop	{r7, pc}

080155ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80155ac:	b480      	push	{r7}
 80155ae:	b083      	sub	sp, #12
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80155b4:	4b03      	ldr	r3, [pc, #12]	@ (80155c4 <USBD_static_malloc+0x18>)
}
 80155b6:	4618      	mov	r0, r3
 80155b8:	370c      	adds	r7, #12
 80155ba:	46bd      	mov	sp, r7
 80155bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c0:	4770      	bx	lr
 80155c2:	bf00      	nop
 80155c4:	2400b680 	.word	0x2400b680

080155c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80155c8:	b480      	push	{r7}
 80155ca:	b083      	sub	sp, #12
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80155d0:	bf00      	nop
 80155d2:	370c      	adds	r7, #12
 80155d4:	46bd      	mov	sp, r7
 80155d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155da:	4770      	bx	lr

080155dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80155dc:	b480      	push	{r7}
 80155de:	b085      	sub	sp, #20
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	4603      	mov	r3, r0
 80155e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80155e6:	2300      	movs	r3, #0
 80155e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80155ea:	79fb      	ldrb	r3, [r7, #7]
 80155ec:	2b03      	cmp	r3, #3
 80155ee:	d817      	bhi.n	8015620 <USBD_Get_USB_Status+0x44>
 80155f0:	a201      	add	r2, pc, #4	@ (adr r2, 80155f8 <USBD_Get_USB_Status+0x1c>)
 80155f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155f6:	bf00      	nop
 80155f8:	08015609 	.word	0x08015609
 80155fc:	0801560f 	.word	0x0801560f
 8015600:	08015615 	.word	0x08015615
 8015604:	0801561b 	.word	0x0801561b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015608:	2300      	movs	r3, #0
 801560a:	73fb      	strb	r3, [r7, #15]
    break;
 801560c:	e00b      	b.n	8015626 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801560e:	2303      	movs	r3, #3
 8015610:	73fb      	strb	r3, [r7, #15]
    break;
 8015612:	e008      	b.n	8015626 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015614:	2301      	movs	r3, #1
 8015616:	73fb      	strb	r3, [r7, #15]
    break;
 8015618:	e005      	b.n	8015626 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801561a:	2303      	movs	r3, #3
 801561c:	73fb      	strb	r3, [r7, #15]
    break;
 801561e:	e002      	b.n	8015626 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015620:	2303      	movs	r3, #3
 8015622:	73fb      	strb	r3, [r7, #15]
    break;
 8015624:	bf00      	nop
  }
  return usb_status;
 8015626:	7bfb      	ldrb	r3, [r7, #15]
}
 8015628:	4618      	mov	r0, r3
 801562a:	3714      	adds	r7, #20
 801562c:	46bd      	mov	sp, r7
 801562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015632:	4770      	bx	lr

08015634 <siprintf>:
 8015634:	b40e      	push	{r1, r2, r3}
 8015636:	b510      	push	{r4, lr}
 8015638:	b09d      	sub	sp, #116	@ 0x74
 801563a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801563c:	9002      	str	r0, [sp, #8]
 801563e:	9006      	str	r0, [sp, #24]
 8015640:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015644:	480a      	ldr	r0, [pc, #40]	@ (8015670 <siprintf+0x3c>)
 8015646:	9107      	str	r1, [sp, #28]
 8015648:	9104      	str	r1, [sp, #16]
 801564a:	490a      	ldr	r1, [pc, #40]	@ (8015674 <siprintf+0x40>)
 801564c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015650:	9105      	str	r1, [sp, #20]
 8015652:	2400      	movs	r4, #0
 8015654:	a902      	add	r1, sp, #8
 8015656:	6800      	ldr	r0, [r0, #0]
 8015658:	9301      	str	r3, [sp, #4]
 801565a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801565c:	f000 f9a2 	bl	80159a4 <_svfiprintf_r>
 8015660:	9b02      	ldr	r3, [sp, #8]
 8015662:	701c      	strb	r4, [r3, #0]
 8015664:	b01d      	add	sp, #116	@ 0x74
 8015666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801566a:	b003      	add	sp, #12
 801566c:	4770      	bx	lr
 801566e:	bf00      	nop
 8015670:	2400010c 	.word	0x2400010c
 8015674:	ffff0208 	.word	0xffff0208

08015678 <memset>:
 8015678:	4402      	add	r2, r0
 801567a:	4603      	mov	r3, r0
 801567c:	4293      	cmp	r3, r2
 801567e:	d100      	bne.n	8015682 <memset+0xa>
 8015680:	4770      	bx	lr
 8015682:	f803 1b01 	strb.w	r1, [r3], #1
 8015686:	e7f9      	b.n	801567c <memset+0x4>

08015688 <__errno>:
 8015688:	4b01      	ldr	r3, [pc, #4]	@ (8015690 <__errno+0x8>)
 801568a:	6818      	ldr	r0, [r3, #0]
 801568c:	4770      	bx	lr
 801568e:	bf00      	nop
 8015690:	2400010c 	.word	0x2400010c

08015694 <__libc_init_array>:
 8015694:	b570      	push	{r4, r5, r6, lr}
 8015696:	4d0d      	ldr	r5, [pc, #52]	@ (80156cc <__libc_init_array+0x38>)
 8015698:	4c0d      	ldr	r4, [pc, #52]	@ (80156d0 <__libc_init_array+0x3c>)
 801569a:	1b64      	subs	r4, r4, r5
 801569c:	10a4      	asrs	r4, r4, #2
 801569e:	2600      	movs	r6, #0
 80156a0:	42a6      	cmp	r6, r4
 80156a2:	d109      	bne.n	80156b8 <__libc_init_array+0x24>
 80156a4:	4d0b      	ldr	r5, [pc, #44]	@ (80156d4 <__libc_init_array+0x40>)
 80156a6:	4c0c      	ldr	r4, [pc, #48]	@ (80156d8 <__libc_init_array+0x44>)
 80156a8:	f000 fc64 	bl	8015f74 <_init>
 80156ac:	1b64      	subs	r4, r4, r5
 80156ae:	10a4      	asrs	r4, r4, #2
 80156b0:	2600      	movs	r6, #0
 80156b2:	42a6      	cmp	r6, r4
 80156b4:	d105      	bne.n	80156c2 <__libc_init_array+0x2e>
 80156b6:	bd70      	pop	{r4, r5, r6, pc}
 80156b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80156bc:	4798      	blx	r3
 80156be:	3601      	adds	r6, #1
 80156c0:	e7ee      	b.n	80156a0 <__libc_init_array+0xc>
 80156c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80156c6:	4798      	blx	r3
 80156c8:	3601      	adds	r6, #1
 80156ca:	e7f2      	b.n	80156b2 <__libc_init_array+0x1e>
 80156cc:	08016404 	.word	0x08016404
 80156d0:	08016404 	.word	0x08016404
 80156d4:	08016404 	.word	0x08016404
 80156d8:	08016408 	.word	0x08016408

080156dc <__retarget_lock_acquire_recursive>:
 80156dc:	4770      	bx	lr

080156de <__retarget_lock_release_recursive>:
 80156de:	4770      	bx	lr

080156e0 <memcpy>:
 80156e0:	440a      	add	r2, r1
 80156e2:	4291      	cmp	r1, r2
 80156e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80156e8:	d100      	bne.n	80156ec <memcpy+0xc>
 80156ea:	4770      	bx	lr
 80156ec:	b510      	push	{r4, lr}
 80156ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80156f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80156f6:	4291      	cmp	r1, r2
 80156f8:	d1f9      	bne.n	80156ee <memcpy+0xe>
 80156fa:	bd10      	pop	{r4, pc}

080156fc <_free_r>:
 80156fc:	b538      	push	{r3, r4, r5, lr}
 80156fe:	4605      	mov	r5, r0
 8015700:	2900      	cmp	r1, #0
 8015702:	d041      	beq.n	8015788 <_free_r+0x8c>
 8015704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015708:	1f0c      	subs	r4, r1, #4
 801570a:	2b00      	cmp	r3, #0
 801570c:	bfb8      	it	lt
 801570e:	18e4      	addlt	r4, r4, r3
 8015710:	f000 f8e0 	bl	80158d4 <__malloc_lock>
 8015714:	4a1d      	ldr	r2, [pc, #116]	@ (801578c <_free_r+0x90>)
 8015716:	6813      	ldr	r3, [r2, #0]
 8015718:	b933      	cbnz	r3, 8015728 <_free_r+0x2c>
 801571a:	6063      	str	r3, [r4, #4]
 801571c:	6014      	str	r4, [r2, #0]
 801571e:	4628      	mov	r0, r5
 8015720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015724:	f000 b8dc 	b.w	80158e0 <__malloc_unlock>
 8015728:	42a3      	cmp	r3, r4
 801572a:	d908      	bls.n	801573e <_free_r+0x42>
 801572c:	6820      	ldr	r0, [r4, #0]
 801572e:	1821      	adds	r1, r4, r0
 8015730:	428b      	cmp	r3, r1
 8015732:	bf01      	itttt	eq
 8015734:	6819      	ldreq	r1, [r3, #0]
 8015736:	685b      	ldreq	r3, [r3, #4]
 8015738:	1809      	addeq	r1, r1, r0
 801573a:	6021      	streq	r1, [r4, #0]
 801573c:	e7ed      	b.n	801571a <_free_r+0x1e>
 801573e:	461a      	mov	r2, r3
 8015740:	685b      	ldr	r3, [r3, #4]
 8015742:	b10b      	cbz	r3, 8015748 <_free_r+0x4c>
 8015744:	42a3      	cmp	r3, r4
 8015746:	d9fa      	bls.n	801573e <_free_r+0x42>
 8015748:	6811      	ldr	r1, [r2, #0]
 801574a:	1850      	adds	r0, r2, r1
 801574c:	42a0      	cmp	r0, r4
 801574e:	d10b      	bne.n	8015768 <_free_r+0x6c>
 8015750:	6820      	ldr	r0, [r4, #0]
 8015752:	4401      	add	r1, r0
 8015754:	1850      	adds	r0, r2, r1
 8015756:	4283      	cmp	r3, r0
 8015758:	6011      	str	r1, [r2, #0]
 801575a:	d1e0      	bne.n	801571e <_free_r+0x22>
 801575c:	6818      	ldr	r0, [r3, #0]
 801575e:	685b      	ldr	r3, [r3, #4]
 8015760:	6053      	str	r3, [r2, #4]
 8015762:	4408      	add	r0, r1
 8015764:	6010      	str	r0, [r2, #0]
 8015766:	e7da      	b.n	801571e <_free_r+0x22>
 8015768:	d902      	bls.n	8015770 <_free_r+0x74>
 801576a:	230c      	movs	r3, #12
 801576c:	602b      	str	r3, [r5, #0]
 801576e:	e7d6      	b.n	801571e <_free_r+0x22>
 8015770:	6820      	ldr	r0, [r4, #0]
 8015772:	1821      	adds	r1, r4, r0
 8015774:	428b      	cmp	r3, r1
 8015776:	bf04      	itt	eq
 8015778:	6819      	ldreq	r1, [r3, #0]
 801577a:	685b      	ldreq	r3, [r3, #4]
 801577c:	6063      	str	r3, [r4, #4]
 801577e:	bf04      	itt	eq
 8015780:	1809      	addeq	r1, r1, r0
 8015782:	6021      	streq	r1, [r4, #0]
 8015784:	6054      	str	r4, [r2, #4]
 8015786:	e7ca      	b.n	801571e <_free_r+0x22>
 8015788:	bd38      	pop	{r3, r4, r5, pc}
 801578a:	bf00      	nop
 801578c:	2400b9e4 	.word	0x2400b9e4

08015790 <sbrk_aligned>:
 8015790:	b570      	push	{r4, r5, r6, lr}
 8015792:	4e0f      	ldr	r6, [pc, #60]	@ (80157d0 <sbrk_aligned+0x40>)
 8015794:	460c      	mov	r4, r1
 8015796:	6831      	ldr	r1, [r6, #0]
 8015798:	4605      	mov	r5, r0
 801579a:	b911      	cbnz	r1, 80157a2 <sbrk_aligned+0x12>
 801579c:	f000 fba4 	bl	8015ee8 <_sbrk_r>
 80157a0:	6030      	str	r0, [r6, #0]
 80157a2:	4621      	mov	r1, r4
 80157a4:	4628      	mov	r0, r5
 80157a6:	f000 fb9f 	bl	8015ee8 <_sbrk_r>
 80157aa:	1c43      	adds	r3, r0, #1
 80157ac:	d103      	bne.n	80157b6 <sbrk_aligned+0x26>
 80157ae:	f04f 34ff 	mov.w	r4, #4294967295
 80157b2:	4620      	mov	r0, r4
 80157b4:	bd70      	pop	{r4, r5, r6, pc}
 80157b6:	1cc4      	adds	r4, r0, #3
 80157b8:	f024 0403 	bic.w	r4, r4, #3
 80157bc:	42a0      	cmp	r0, r4
 80157be:	d0f8      	beq.n	80157b2 <sbrk_aligned+0x22>
 80157c0:	1a21      	subs	r1, r4, r0
 80157c2:	4628      	mov	r0, r5
 80157c4:	f000 fb90 	bl	8015ee8 <_sbrk_r>
 80157c8:	3001      	adds	r0, #1
 80157ca:	d1f2      	bne.n	80157b2 <sbrk_aligned+0x22>
 80157cc:	e7ef      	b.n	80157ae <sbrk_aligned+0x1e>
 80157ce:	bf00      	nop
 80157d0:	2400b9e0 	.word	0x2400b9e0

080157d4 <_malloc_r>:
 80157d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80157d8:	1ccd      	adds	r5, r1, #3
 80157da:	f025 0503 	bic.w	r5, r5, #3
 80157de:	3508      	adds	r5, #8
 80157e0:	2d0c      	cmp	r5, #12
 80157e2:	bf38      	it	cc
 80157e4:	250c      	movcc	r5, #12
 80157e6:	2d00      	cmp	r5, #0
 80157e8:	4606      	mov	r6, r0
 80157ea:	db01      	blt.n	80157f0 <_malloc_r+0x1c>
 80157ec:	42a9      	cmp	r1, r5
 80157ee:	d904      	bls.n	80157fa <_malloc_r+0x26>
 80157f0:	230c      	movs	r3, #12
 80157f2:	6033      	str	r3, [r6, #0]
 80157f4:	2000      	movs	r0, #0
 80157f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80157fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80158d0 <_malloc_r+0xfc>
 80157fe:	f000 f869 	bl	80158d4 <__malloc_lock>
 8015802:	f8d8 3000 	ldr.w	r3, [r8]
 8015806:	461c      	mov	r4, r3
 8015808:	bb44      	cbnz	r4, 801585c <_malloc_r+0x88>
 801580a:	4629      	mov	r1, r5
 801580c:	4630      	mov	r0, r6
 801580e:	f7ff ffbf 	bl	8015790 <sbrk_aligned>
 8015812:	1c43      	adds	r3, r0, #1
 8015814:	4604      	mov	r4, r0
 8015816:	d158      	bne.n	80158ca <_malloc_r+0xf6>
 8015818:	f8d8 4000 	ldr.w	r4, [r8]
 801581c:	4627      	mov	r7, r4
 801581e:	2f00      	cmp	r7, #0
 8015820:	d143      	bne.n	80158aa <_malloc_r+0xd6>
 8015822:	2c00      	cmp	r4, #0
 8015824:	d04b      	beq.n	80158be <_malloc_r+0xea>
 8015826:	6823      	ldr	r3, [r4, #0]
 8015828:	4639      	mov	r1, r7
 801582a:	4630      	mov	r0, r6
 801582c:	eb04 0903 	add.w	r9, r4, r3
 8015830:	f000 fb5a 	bl	8015ee8 <_sbrk_r>
 8015834:	4581      	cmp	r9, r0
 8015836:	d142      	bne.n	80158be <_malloc_r+0xea>
 8015838:	6821      	ldr	r1, [r4, #0]
 801583a:	1a6d      	subs	r5, r5, r1
 801583c:	4629      	mov	r1, r5
 801583e:	4630      	mov	r0, r6
 8015840:	f7ff ffa6 	bl	8015790 <sbrk_aligned>
 8015844:	3001      	adds	r0, #1
 8015846:	d03a      	beq.n	80158be <_malloc_r+0xea>
 8015848:	6823      	ldr	r3, [r4, #0]
 801584a:	442b      	add	r3, r5
 801584c:	6023      	str	r3, [r4, #0]
 801584e:	f8d8 3000 	ldr.w	r3, [r8]
 8015852:	685a      	ldr	r2, [r3, #4]
 8015854:	bb62      	cbnz	r2, 80158b0 <_malloc_r+0xdc>
 8015856:	f8c8 7000 	str.w	r7, [r8]
 801585a:	e00f      	b.n	801587c <_malloc_r+0xa8>
 801585c:	6822      	ldr	r2, [r4, #0]
 801585e:	1b52      	subs	r2, r2, r5
 8015860:	d420      	bmi.n	80158a4 <_malloc_r+0xd0>
 8015862:	2a0b      	cmp	r2, #11
 8015864:	d917      	bls.n	8015896 <_malloc_r+0xc2>
 8015866:	1961      	adds	r1, r4, r5
 8015868:	42a3      	cmp	r3, r4
 801586a:	6025      	str	r5, [r4, #0]
 801586c:	bf18      	it	ne
 801586e:	6059      	strne	r1, [r3, #4]
 8015870:	6863      	ldr	r3, [r4, #4]
 8015872:	bf08      	it	eq
 8015874:	f8c8 1000 	streq.w	r1, [r8]
 8015878:	5162      	str	r2, [r4, r5]
 801587a:	604b      	str	r3, [r1, #4]
 801587c:	4630      	mov	r0, r6
 801587e:	f000 f82f 	bl	80158e0 <__malloc_unlock>
 8015882:	f104 000b 	add.w	r0, r4, #11
 8015886:	1d23      	adds	r3, r4, #4
 8015888:	f020 0007 	bic.w	r0, r0, #7
 801588c:	1ac2      	subs	r2, r0, r3
 801588e:	bf1c      	itt	ne
 8015890:	1a1b      	subne	r3, r3, r0
 8015892:	50a3      	strne	r3, [r4, r2]
 8015894:	e7af      	b.n	80157f6 <_malloc_r+0x22>
 8015896:	6862      	ldr	r2, [r4, #4]
 8015898:	42a3      	cmp	r3, r4
 801589a:	bf0c      	ite	eq
 801589c:	f8c8 2000 	streq.w	r2, [r8]
 80158a0:	605a      	strne	r2, [r3, #4]
 80158a2:	e7eb      	b.n	801587c <_malloc_r+0xa8>
 80158a4:	4623      	mov	r3, r4
 80158a6:	6864      	ldr	r4, [r4, #4]
 80158a8:	e7ae      	b.n	8015808 <_malloc_r+0x34>
 80158aa:	463c      	mov	r4, r7
 80158ac:	687f      	ldr	r7, [r7, #4]
 80158ae:	e7b6      	b.n	801581e <_malloc_r+0x4a>
 80158b0:	461a      	mov	r2, r3
 80158b2:	685b      	ldr	r3, [r3, #4]
 80158b4:	42a3      	cmp	r3, r4
 80158b6:	d1fb      	bne.n	80158b0 <_malloc_r+0xdc>
 80158b8:	2300      	movs	r3, #0
 80158ba:	6053      	str	r3, [r2, #4]
 80158bc:	e7de      	b.n	801587c <_malloc_r+0xa8>
 80158be:	230c      	movs	r3, #12
 80158c0:	6033      	str	r3, [r6, #0]
 80158c2:	4630      	mov	r0, r6
 80158c4:	f000 f80c 	bl	80158e0 <__malloc_unlock>
 80158c8:	e794      	b.n	80157f4 <_malloc_r+0x20>
 80158ca:	6005      	str	r5, [r0, #0]
 80158cc:	e7d6      	b.n	801587c <_malloc_r+0xa8>
 80158ce:	bf00      	nop
 80158d0:	2400b9e4 	.word	0x2400b9e4

080158d4 <__malloc_lock>:
 80158d4:	4801      	ldr	r0, [pc, #4]	@ (80158dc <__malloc_lock+0x8>)
 80158d6:	f7ff bf01 	b.w	80156dc <__retarget_lock_acquire_recursive>
 80158da:	bf00      	nop
 80158dc:	2400b9dc 	.word	0x2400b9dc

080158e0 <__malloc_unlock>:
 80158e0:	4801      	ldr	r0, [pc, #4]	@ (80158e8 <__malloc_unlock+0x8>)
 80158e2:	f7ff befc 	b.w	80156de <__retarget_lock_release_recursive>
 80158e6:	bf00      	nop
 80158e8:	2400b9dc 	.word	0x2400b9dc

080158ec <__ssputs_r>:
 80158ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158f0:	688e      	ldr	r6, [r1, #8]
 80158f2:	461f      	mov	r7, r3
 80158f4:	42be      	cmp	r6, r7
 80158f6:	680b      	ldr	r3, [r1, #0]
 80158f8:	4682      	mov	sl, r0
 80158fa:	460c      	mov	r4, r1
 80158fc:	4690      	mov	r8, r2
 80158fe:	d82d      	bhi.n	801595c <__ssputs_r+0x70>
 8015900:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015904:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015908:	d026      	beq.n	8015958 <__ssputs_r+0x6c>
 801590a:	6965      	ldr	r5, [r4, #20]
 801590c:	6909      	ldr	r1, [r1, #16]
 801590e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015912:	eba3 0901 	sub.w	r9, r3, r1
 8015916:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801591a:	1c7b      	adds	r3, r7, #1
 801591c:	444b      	add	r3, r9
 801591e:	106d      	asrs	r5, r5, #1
 8015920:	429d      	cmp	r5, r3
 8015922:	bf38      	it	cc
 8015924:	461d      	movcc	r5, r3
 8015926:	0553      	lsls	r3, r2, #21
 8015928:	d527      	bpl.n	801597a <__ssputs_r+0x8e>
 801592a:	4629      	mov	r1, r5
 801592c:	f7ff ff52 	bl	80157d4 <_malloc_r>
 8015930:	4606      	mov	r6, r0
 8015932:	b360      	cbz	r0, 801598e <__ssputs_r+0xa2>
 8015934:	6921      	ldr	r1, [r4, #16]
 8015936:	464a      	mov	r2, r9
 8015938:	f7ff fed2 	bl	80156e0 <memcpy>
 801593c:	89a3      	ldrh	r3, [r4, #12]
 801593e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015946:	81a3      	strh	r3, [r4, #12]
 8015948:	6126      	str	r6, [r4, #16]
 801594a:	6165      	str	r5, [r4, #20]
 801594c:	444e      	add	r6, r9
 801594e:	eba5 0509 	sub.w	r5, r5, r9
 8015952:	6026      	str	r6, [r4, #0]
 8015954:	60a5      	str	r5, [r4, #8]
 8015956:	463e      	mov	r6, r7
 8015958:	42be      	cmp	r6, r7
 801595a:	d900      	bls.n	801595e <__ssputs_r+0x72>
 801595c:	463e      	mov	r6, r7
 801595e:	6820      	ldr	r0, [r4, #0]
 8015960:	4632      	mov	r2, r6
 8015962:	4641      	mov	r1, r8
 8015964:	f000 faa6 	bl	8015eb4 <memmove>
 8015968:	68a3      	ldr	r3, [r4, #8]
 801596a:	1b9b      	subs	r3, r3, r6
 801596c:	60a3      	str	r3, [r4, #8]
 801596e:	6823      	ldr	r3, [r4, #0]
 8015970:	4433      	add	r3, r6
 8015972:	6023      	str	r3, [r4, #0]
 8015974:	2000      	movs	r0, #0
 8015976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801597a:	462a      	mov	r2, r5
 801597c:	f000 fac4 	bl	8015f08 <_realloc_r>
 8015980:	4606      	mov	r6, r0
 8015982:	2800      	cmp	r0, #0
 8015984:	d1e0      	bne.n	8015948 <__ssputs_r+0x5c>
 8015986:	6921      	ldr	r1, [r4, #16]
 8015988:	4650      	mov	r0, sl
 801598a:	f7ff feb7 	bl	80156fc <_free_r>
 801598e:	230c      	movs	r3, #12
 8015990:	f8ca 3000 	str.w	r3, [sl]
 8015994:	89a3      	ldrh	r3, [r4, #12]
 8015996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801599a:	81a3      	strh	r3, [r4, #12]
 801599c:	f04f 30ff 	mov.w	r0, #4294967295
 80159a0:	e7e9      	b.n	8015976 <__ssputs_r+0x8a>
	...

080159a4 <_svfiprintf_r>:
 80159a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159a8:	4698      	mov	r8, r3
 80159aa:	898b      	ldrh	r3, [r1, #12]
 80159ac:	061b      	lsls	r3, r3, #24
 80159ae:	b09d      	sub	sp, #116	@ 0x74
 80159b0:	4607      	mov	r7, r0
 80159b2:	460d      	mov	r5, r1
 80159b4:	4614      	mov	r4, r2
 80159b6:	d510      	bpl.n	80159da <_svfiprintf_r+0x36>
 80159b8:	690b      	ldr	r3, [r1, #16]
 80159ba:	b973      	cbnz	r3, 80159da <_svfiprintf_r+0x36>
 80159bc:	2140      	movs	r1, #64	@ 0x40
 80159be:	f7ff ff09 	bl	80157d4 <_malloc_r>
 80159c2:	6028      	str	r0, [r5, #0]
 80159c4:	6128      	str	r0, [r5, #16]
 80159c6:	b930      	cbnz	r0, 80159d6 <_svfiprintf_r+0x32>
 80159c8:	230c      	movs	r3, #12
 80159ca:	603b      	str	r3, [r7, #0]
 80159cc:	f04f 30ff 	mov.w	r0, #4294967295
 80159d0:	b01d      	add	sp, #116	@ 0x74
 80159d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159d6:	2340      	movs	r3, #64	@ 0x40
 80159d8:	616b      	str	r3, [r5, #20]
 80159da:	2300      	movs	r3, #0
 80159dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80159de:	2320      	movs	r3, #32
 80159e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80159e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80159e8:	2330      	movs	r3, #48	@ 0x30
 80159ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015b88 <_svfiprintf_r+0x1e4>
 80159ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80159f2:	f04f 0901 	mov.w	r9, #1
 80159f6:	4623      	mov	r3, r4
 80159f8:	469a      	mov	sl, r3
 80159fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80159fe:	b10a      	cbz	r2, 8015a04 <_svfiprintf_r+0x60>
 8015a00:	2a25      	cmp	r2, #37	@ 0x25
 8015a02:	d1f9      	bne.n	80159f8 <_svfiprintf_r+0x54>
 8015a04:	ebba 0b04 	subs.w	fp, sl, r4
 8015a08:	d00b      	beq.n	8015a22 <_svfiprintf_r+0x7e>
 8015a0a:	465b      	mov	r3, fp
 8015a0c:	4622      	mov	r2, r4
 8015a0e:	4629      	mov	r1, r5
 8015a10:	4638      	mov	r0, r7
 8015a12:	f7ff ff6b 	bl	80158ec <__ssputs_r>
 8015a16:	3001      	adds	r0, #1
 8015a18:	f000 80a7 	beq.w	8015b6a <_svfiprintf_r+0x1c6>
 8015a1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015a1e:	445a      	add	r2, fp
 8015a20:	9209      	str	r2, [sp, #36]	@ 0x24
 8015a22:	f89a 3000 	ldrb.w	r3, [sl]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	f000 809f 	beq.w	8015b6a <_svfiprintf_r+0x1c6>
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8015a32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015a36:	f10a 0a01 	add.w	sl, sl, #1
 8015a3a:	9304      	str	r3, [sp, #16]
 8015a3c:	9307      	str	r3, [sp, #28]
 8015a3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015a42:	931a      	str	r3, [sp, #104]	@ 0x68
 8015a44:	4654      	mov	r4, sl
 8015a46:	2205      	movs	r2, #5
 8015a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a4c:	484e      	ldr	r0, [pc, #312]	@ (8015b88 <_svfiprintf_r+0x1e4>)
 8015a4e:	f7ea fc4f 	bl	80002f0 <memchr>
 8015a52:	9a04      	ldr	r2, [sp, #16]
 8015a54:	b9d8      	cbnz	r0, 8015a8e <_svfiprintf_r+0xea>
 8015a56:	06d0      	lsls	r0, r2, #27
 8015a58:	bf44      	itt	mi
 8015a5a:	2320      	movmi	r3, #32
 8015a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015a60:	0711      	lsls	r1, r2, #28
 8015a62:	bf44      	itt	mi
 8015a64:	232b      	movmi	r3, #43	@ 0x2b
 8015a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8015a6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015a70:	d015      	beq.n	8015a9e <_svfiprintf_r+0xfa>
 8015a72:	9a07      	ldr	r2, [sp, #28]
 8015a74:	4654      	mov	r4, sl
 8015a76:	2000      	movs	r0, #0
 8015a78:	f04f 0c0a 	mov.w	ip, #10
 8015a7c:	4621      	mov	r1, r4
 8015a7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015a82:	3b30      	subs	r3, #48	@ 0x30
 8015a84:	2b09      	cmp	r3, #9
 8015a86:	d94b      	bls.n	8015b20 <_svfiprintf_r+0x17c>
 8015a88:	b1b0      	cbz	r0, 8015ab8 <_svfiprintf_r+0x114>
 8015a8a:	9207      	str	r2, [sp, #28]
 8015a8c:	e014      	b.n	8015ab8 <_svfiprintf_r+0x114>
 8015a8e:	eba0 0308 	sub.w	r3, r0, r8
 8015a92:	fa09 f303 	lsl.w	r3, r9, r3
 8015a96:	4313      	orrs	r3, r2
 8015a98:	9304      	str	r3, [sp, #16]
 8015a9a:	46a2      	mov	sl, r4
 8015a9c:	e7d2      	b.n	8015a44 <_svfiprintf_r+0xa0>
 8015a9e:	9b03      	ldr	r3, [sp, #12]
 8015aa0:	1d19      	adds	r1, r3, #4
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	9103      	str	r1, [sp, #12]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	bfbb      	ittet	lt
 8015aaa:	425b      	neglt	r3, r3
 8015aac:	f042 0202 	orrlt.w	r2, r2, #2
 8015ab0:	9307      	strge	r3, [sp, #28]
 8015ab2:	9307      	strlt	r3, [sp, #28]
 8015ab4:	bfb8      	it	lt
 8015ab6:	9204      	strlt	r2, [sp, #16]
 8015ab8:	7823      	ldrb	r3, [r4, #0]
 8015aba:	2b2e      	cmp	r3, #46	@ 0x2e
 8015abc:	d10a      	bne.n	8015ad4 <_svfiprintf_r+0x130>
 8015abe:	7863      	ldrb	r3, [r4, #1]
 8015ac0:	2b2a      	cmp	r3, #42	@ 0x2a
 8015ac2:	d132      	bne.n	8015b2a <_svfiprintf_r+0x186>
 8015ac4:	9b03      	ldr	r3, [sp, #12]
 8015ac6:	1d1a      	adds	r2, r3, #4
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	9203      	str	r2, [sp, #12]
 8015acc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015ad0:	3402      	adds	r4, #2
 8015ad2:	9305      	str	r3, [sp, #20]
 8015ad4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015b98 <_svfiprintf_r+0x1f4>
 8015ad8:	7821      	ldrb	r1, [r4, #0]
 8015ada:	2203      	movs	r2, #3
 8015adc:	4650      	mov	r0, sl
 8015ade:	f7ea fc07 	bl	80002f0 <memchr>
 8015ae2:	b138      	cbz	r0, 8015af4 <_svfiprintf_r+0x150>
 8015ae4:	9b04      	ldr	r3, [sp, #16]
 8015ae6:	eba0 000a 	sub.w	r0, r0, sl
 8015aea:	2240      	movs	r2, #64	@ 0x40
 8015aec:	4082      	lsls	r2, r0
 8015aee:	4313      	orrs	r3, r2
 8015af0:	3401      	adds	r4, #1
 8015af2:	9304      	str	r3, [sp, #16]
 8015af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015af8:	4824      	ldr	r0, [pc, #144]	@ (8015b8c <_svfiprintf_r+0x1e8>)
 8015afa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015afe:	2206      	movs	r2, #6
 8015b00:	f7ea fbf6 	bl	80002f0 <memchr>
 8015b04:	2800      	cmp	r0, #0
 8015b06:	d036      	beq.n	8015b76 <_svfiprintf_r+0x1d2>
 8015b08:	4b21      	ldr	r3, [pc, #132]	@ (8015b90 <_svfiprintf_r+0x1ec>)
 8015b0a:	bb1b      	cbnz	r3, 8015b54 <_svfiprintf_r+0x1b0>
 8015b0c:	9b03      	ldr	r3, [sp, #12]
 8015b0e:	3307      	adds	r3, #7
 8015b10:	f023 0307 	bic.w	r3, r3, #7
 8015b14:	3308      	adds	r3, #8
 8015b16:	9303      	str	r3, [sp, #12]
 8015b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b1a:	4433      	add	r3, r6
 8015b1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015b1e:	e76a      	b.n	80159f6 <_svfiprintf_r+0x52>
 8015b20:	fb0c 3202 	mla	r2, ip, r2, r3
 8015b24:	460c      	mov	r4, r1
 8015b26:	2001      	movs	r0, #1
 8015b28:	e7a8      	b.n	8015a7c <_svfiprintf_r+0xd8>
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	3401      	adds	r4, #1
 8015b2e:	9305      	str	r3, [sp, #20]
 8015b30:	4619      	mov	r1, r3
 8015b32:	f04f 0c0a 	mov.w	ip, #10
 8015b36:	4620      	mov	r0, r4
 8015b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015b3c:	3a30      	subs	r2, #48	@ 0x30
 8015b3e:	2a09      	cmp	r2, #9
 8015b40:	d903      	bls.n	8015b4a <_svfiprintf_r+0x1a6>
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d0c6      	beq.n	8015ad4 <_svfiprintf_r+0x130>
 8015b46:	9105      	str	r1, [sp, #20]
 8015b48:	e7c4      	b.n	8015ad4 <_svfiprintf_r+0x130>
 8015b4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8015b4e:	4604      	mov	r4, r0
 8015b50:	2301      	movs	r3, #1
 8015b52:	e7f0      	b.n	8015b36 <_svfiprintf_r+0x192>
 8015b54:	ab03      	add	r3, sp, #12
 8015b56:	9300      	str	r3, [sp, #0]
 8015b58:	462a      	mov	r2, r5
 8015b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8015b94 <_svfiprintf_r+0x1f0>)
 8015b5c:	a904      	add	r1, sp, #16
 8015b5e:	4638      	mov	r0, r7
 8015b60:	f3af 8000 	nop.w
 8015b64:	1c42      	adds	r2, r0, #1
 8015b66:	4606      	mov	r6, r0
 8015b68:	d1d6      	bne.n	8015b18 <_svfiprintf_r+0x174>
 8015b6a:	89ab      	ldrh	r3, [r5, #12]
 8015b6c:	065b      	lsls	r3, r3, #25
 8015b6e:	f53f af2d 	bmi.w	80159cc <_svfiprintf_r+0x28>
 8015b72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015b74:	e72c      	b.n	80159d0 <_svfiprintf_r+0x2c>
 8015b76:	ab03      	add	r3, sp, #12
 8015b78:	9300      	str	r3, [sp, #0]
 8015b7a:	462a      	mov	r2, r5
 8015b7c:	4b05      	ldr	r3, [pc, #20]	@ (8015b94 <_svfiprintf_r+0x1f0>)
 8015b7e:	a904      	add	r1, sp, #16
 8015b80:	4638      	mov	r0, r7
 8015b82:	f000 f879 	bl	8015c78 <_printf_i>
 8015b86:	e7ed      	b.n	8015b64 <_svfiprintf_r+0x1c0>
 8015b88:	080163c8 	.word	0x080163c8
 8015b8c:	080163d2 	.word	0x080163d2
 8015b90:	00000000 	.word	0x00000000
 8015b94:	080158ed 	.word	0x080158ed
 8015b98:	080163ce 	.word	0x080163ce

08015b9c <_printf_common>:
 8015b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ba0:	4616      	mov	r6, r2
 8015ba2:	4698      	mov	r8, r3
 8015ba4:	688a      	ldr	r2, [r1, #8]
 8015ba6:	690b      	ldr	r3, [r1, #16]
 8015ba8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015bac:	4293      	cmp	r3, r2
 8015bae:	bfb8      	it	lt
 8015bb0:	4613      	movlt	r3, r2
 8015bb2:	6033      	str	r3, [r6, #0]
 8015bb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015bb8:	4607      	mov	r7, r0
 8015bba:	460c      	mov	r4, r1
 8015bbc:	b10a      	cbz	r2, 8015bc2 <_printf_common+0x26>
 8015bbe:	3301      	adds	r3, #1
 8015bc0:	6033      	str	r3, [r6, #0]
 8015bc2:	6823      	ldr	r3, [r4, #0]
 8015bc4:	0699      	lsls	r1, r3, #26
 8015bc6:	bf42      	ittt	mi
 8015bc8:	6833      	ldrmi	r3, [r6, #0]
 8015bca:	3302      	addmi	r3, #2
 8015bcc:	6033      	strmi	r3, [r6, #0]
 8015bce:	6825      	ldr	r5, [r4, #0]
 8015bd0:	f015 0506 	ands.w	r5, r5, #6
 8015bd4:	d106      	bne.n	8015be4 <_printf_common+0x48>
 8015bd6:	f104 0a19 	add.w	sl, r4, #25
 8015bda:	68e3      	ldr	r3, [r4, #12]
 8015bdc:	6832      	ldr	r2, [r6, #0]
 8015bde:	1a9b      	subs	r3, r3, r2
 8015be0:	42ab      	cmp	r3, r5
 8015be2:	dc26      	bgt.n	8015c32 <_printf_common+0x96>
 8015be4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015be8:	6822      	ldr	r2, [r4, #0]
 8015bea:	3b00      	subs	r3, #0
 8015bec:	bf18      	it	ne
 8015bee:	2301      	movne	r3, #1
 8015bf0:	0692      	lsls	r2, r2, #26
 8015bf2:	d42b      	bmi.n	8015c4c <_printf_common+0xb0>
 8015bf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015bf8:	4641      	mov	r1, r8
 8015bfa:	4638      	mov	r0, r7
 8015bfc:	47c8      	blx	r9
 8015bfe:	3001      	adds	r0, #1
 8015c00:	d01e      	beq.n	8015c40 <_printf_common+0xa4>
 8015c02:	6823      	ldr	r3, [r4, #0]
 8015c04:	6922      	ldr	r2, [r4, #16]
 8015c06:	f003 0306 	and.w	r3, r3, #6
 8015c0a:	2b04      	cmp	r3, #4
 8015c0c:	bf02      	ittt	eq
 8015c0e:	68e5      	ldreq	r5, [r4, #12]
 8015c10:	6833      	ldreq	r3, [r6, #0]
 8015c12:	1aed      	subeq	r5, r5, r3
 8015c14:	68a3      	ldr	r3, [r4, #8]
 8015c16:	bf0c      	ite	eq
 8015c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015c1c:	2500      	movne	r5, #0
 8015c1e:	4293      	cmp	r3, r2
 8015c20:	bfc4      	itt	gt
 8015c22:	1a9b      	subgt	r3, r3, r2
 8015c24:	18ed      	addgt	r5, r5, r3
 8015c26:	2600      	movs	r6, #0
 8015c28:	341a      	adds	r4, #26
 8015c2a:	42b5      	cmp	r5, r6
 8015c2c:	d11a      	bne.n	8015c64 <_printf_common+0xc8>
 8015c2e:	2000      	movs	r0, #0
 8015c30:	e008      	b.n	8015c44 <_printf_common+0xa8>
 8015c32:	2301      	movs	r3, #1
 8015c34:	4652      	mov	r2, sl
 8015c36:	4641      	mov	r1, r8
 8015c38:	4638      	mov	r0, r7
 8015c3a:	47c8      	blx	r9
 8015c3c:	3001      	adds	r0, #1
 8015c3e:	d103      	bne.n	8015c48 <_printf_common+0xac>
 8015c40:	f04f 30ff 	mov.w	r0, #4294967295
 8015c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c48:	3501      	adds	r5, #1
 8015c4a:	e7c6      	b.n	8015bda <_printf_common+0x3e>
 8015c4c:	18e1      	adds	r1, r4, r3
 8015c4e:	1c5a      	adds	r2, r3, #1
 8015c50:	2030      	movs	r0, #48	@ 0x30
 8015c52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015c56:	4422      	add	r2, r4
 8015c58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015c5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015c60:	3302      	adds	r3, #2
 8015c62:	e7c7      	b.n	8015bf4 <_printf_common+0x58>
 8015c64:	2301      	movs	r3, #1
 8015c66:	4622      	mov	r2, r4
 8015c68:	4641      	mov	r1, r8
 8015c6a:	4638      	mov	r0, r7
 8015c6c:	47c8      	blx	r9
 8015c6e:	3001      	adds	r0, #1
 8015c70:	d0e6      	beq.n	8015c40 <_printf_common+0xa4>
 8015c72:	3601      	adds	r6, #1
 8015c74:	e7d9      	b.n	8015c2a <_printf_common+0x8e>
	...

08015c78 <_printf_i>:
 8015c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015c7c:	7e0f      	ldrb	r7, [r1, #24]
 8015c7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015c80:	2f78      	cmp	r7, #120	@ 0x78
 8015c82:	4691      	mov	r9, r2
 8015c84:	4680      	mov	r8, r0
 8015c86:	460c      	mov	r4, r1
 8015c88:	469a      	mov	sl, r3
 8015c8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015c8e:	d807      	bhi.n	8015ca0 <_printf_i+0x28>
 8015c90:	2f62      	cmp	r7, #98	@ 0x62
 8015c92:	d80a      	bhi.n	8015caa <_printf_i+0x32>
 8015c94:	2f00      	cmp	r7, #0
 8015c96:	f000 80d1 	beq.w	8015e3c <_printf_i+0x1c4>
 8015c9a:	2f58      	cmp	r7, #88	@ 0x58
 8015c9c:	f000 80b8 	beq.w	8015e10 <_printf_i+0x198>
 8015ca0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015ca4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015ca8:	e03a      	b.n	8015d20 <_printf_i+0xa8>
 8015caa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015cae:	2b15      	cmp	r3, #21
 8015cb0:	d8f6      	bhi.n	8015ca0 <_printf_i+0x28>
 8015cb2:	a101      	add	r1, pc, #4	@ (adr r1, 8015cb8 <_printf_i+0x40>)
 8015cb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015cb8:	08015d11 	.word	0x08015d11
 8015cbc:	08015d25 	.word	0x08015d25
 8015cc0:	08015ca1 	.word	0x08015ca1
 8015cc4:	08015ca1 	.word	0x08015ca1
 8015cc8:	08015ca1 	.word	0x08015ca1
 8015ccc:	08015ca1 	.word	0x08015ca1
 8015cd0:	08015d25 	.word	0x08015d25
 8015cd4:	08015ca1 	.word	0x08015ca1
 8015cd8:	08015ca1 	.word	0x08015ca1
 8015cdc:	08015ca1 	.word	0x08015ca1
 8015ce0:	08015ca1 	.word	0x08015ca1
 8015ce4:	08015e23 	.word	0x08015e23
 8015ce8:	08015d4f 	.word	0x08015d4f
 8015cec:	08015ddd 	.word	0x08015ddd
 8015cf0:	08015ca1 	.word	0x08015ca1
 8015cf4:	08015ca1 	.word	0x08015ca1
 8015cf8:	08015e45 	.word	0x08015e45
 8015cfc:	08015ca1 	.word	0x08015ca1
 8015d00:	08015d4f 	.word	0x08015d4f
 8015d04:	08015ca1 	.word	0x08015ca1
 8015d08:	08015ca1 	.word	0x08015ca1
 8015d0c:	08015de5 	.word	0x08015de5
 8015d10:	6833      	ldr	r3, [r6, #0]
 8015d12:	1d1a      	adds	r2, r3, #4
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	6032      	str	r2, [r6, #0]
 8015d18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015d1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015d20:	2301      	movs	r3, #1
 8015d22:	e09c      	b.n	8015e5e <_printf_i+0x1e6>
 8015d24:	6833      	ldr	r3, [r6, #0]
 8015d26:	6820      	ldr	r0, [r4, #0]
 8015d28:	1d19      	adds	r1, r3, #4
 8015d2a:	6031      	str	r1, [r6, #0]
 8015d2c:	0606      	lsls	r6, r0, #24
 8015d2e:	d501      	bpl.n	8015d34 <_printf_i+0xbc>
 8015d30:	681d      	ldr	r5, [r3, #0]
 8015d32:	e003      	b.n	8015d3c <_printf_i+0xc4>
 8015d34:	0645      	lsls	r5, r0, #25
 8015d36:	d5fb      	bpl.n	8015d30 <_printf_i+0xb8>
 8015d38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015d3c:	2d00      	cmp	r5, #0
 8015d3e:	da03      	bge.n	8015d48 <_printf_i+0xd0>
 8015d40:	232d      	movs	r3, #45	@ 0x2d
 8015d42:	426d      	negs	r5, r5
 8015d44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015d48:	4858      	ldr	r0, [pc, #352]	@ (8015eac <_printf_i+0x234>)
 8015d4a:	230a      	movs	r3, #10
 8015d4c:	e011      	b.n	8015d72 <_printf_i+0xfa>
 8015d4e:	6821      	ldr	r1, [r4, #0]
 8015d50:	6833      	ldr	r3, [r6, #0]
 8015d52:	0608      	lsls	r0, r1, #24
 8015d54:	f853 5b04 	ldr.w	r5, [r3], #4
 8015d58:	d402      	bmi.n	8015d60 <_printf_i+0xe8>
 8015d5a:	0649      	lsls	r1, r1, #25
 8015d5c:	bf48      	it	mi
 8015d5e:	b2ad      	uxthmi	r5, r5
 8015d60:	2f6f      	cmp	r7, #111	@ 0x6f
 8015d62:	4852      	ldr	r0, [pc, #328]	@ (8015eac <_printf_i+0x234>)
 8015d64:	6033      	str	r3, [r6, #0]
 8015d66:	bf14      	ite	ne
 8015d68:	230a      	movne	r3, #10
 8015d6a:	2308      	moveq	r3, #8
 8015d6c:	2100      	movs	r1, #0
 8015d6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015d72:	6866      	ldr	r6, [r4, #4]
 8015d74:	60a6      	str	r6, [r4, #8]
 8015d76:	2e00      	cmp	r6, #0
 8015d78:	db05      	blt.n	8015d86 <_printf_i+0x10e>
 8015d7a:	6821      	ldr	r1, [r4, #0]
 8015d7c:	432e      	orrs	r6, r5
 8015d7e:	f021 0104 	bic.w	r1, r1, #4
 8015d82:	6021      	str	r1, [r4, #0]
 8015d84:	d04b      	beq.n	8015e1e <_printf_i+0x1a6>
 8015d86:	4616      	mov	r6, r2
 8015d88:	fbb5 f1f3 	udiv	r1, r5, r3
 8015d8c:	fb03 5711 	mls	r7, r3, r1, r5
 8015d90:	5dc7      	ldrb	r7, [r0, r7]
 8015d92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015d96:	462f      	mov	r7, r5
 8015d98:	42bb      	cmp	r3, r7
 8015d9a:	460d      	mov	r5, r1
 8015d9c:	d9f4      	bls.n	8015d88 <_printf_i+0x110>
 8015d9e:	2b08      	cmp	r3, #8
 8015da0:	d10b      	bne.n	8015dba <_printf_i+0x142>
 8015da2:	6823      	ldr	r3, [r4, #0]
 8015da4:	07df      	lsls	r7, r3, #31
 8015da6:	d508      	bpl.n	8015dba <_printf_i+0x142>
 8015da8:	6923      	ldr	r3, [r4, #16]
 8015daa:	6861      	ldr	r1, [r4, #4]
 8015dac:	4299      	cmp	r1, r3
 8015dae:	bfde      	ittt	le
 8015db0:	2330      	movle	r3, #48	@ 0x30
 8015db2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015db6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015dba:	1b92      	subs	r2, r2, r6
 8015dbc:	6122      	str	r2, [r4, #16]
 8015dbe:	f8cd a000 	str.w	sl, [sp]
 8015dc2:	464b      	mov	r3, r9
 8015dc4:	aa03      	add	r2, sp, #12
 8015dc6:	4621      	mov	r1, r4
 8015dc8:	4640      	mov	r0, r8
 8015dca:	f7ff fee7 	bl	8015b9c <_printf_common>
 8015dce:	3001      	adds	r0, #1
 8015dd0:	d14a      	bne.n	8015e68 <_printf_i+0x1f0>
 8015dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8015dd6:	b004      	add	sp, #16
 8015dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ddc:	6823      	ldr	r3, [r4, #0]
 8015dde:	f043 0320 	orr.w	r3, r3, #32
 8015de2:	6023      	str	r3, [r4, #0]
 8015de4:	4832      	ldr	r0, [pc, #200]	@ (8015eb0 <_printf_i+0x238>)
 8015de6:	2778      	movs	r7, #120	@ 0x78
 8015de8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015dec:	6823      	ldr	r3, [r4, #0]
 8015dee:	6831      	ldr	r1, [r6, #0]
 8015df0:	061f      	lsls	r7, r3, #24
 8015df2:	f851 5b04 	ldr.w	r5, [r1], #4
 8015df6:	d402      	bmi.n	8015dfe <_printf_i+0x186>
 8015df8:	065f      	lsls	r7, r3, #25
 8015dfa:	bf48      	it	mi
 8015dfc:	b2ad      	uxthmi	r5, r5
 8015dfe:	6031      	str	r1, [r6, #0]
 8015e00:	07d9      	lsls	r1, r3, #31
 8015e02:	bf44      	itt	mi
 8015e04:	f043 0320 	orrmi.w	r3, r3, #32
 8015e08:	6023      	strmi	r3, [r4, #0]
 8015e0a:	b11d      	cbz	r5, 8015e14 <_printf_i+0x19c>
 8015e0c:	2310      	movs	r3, #16
 8015e0e:	e7ad      	b.n	8015d6c <_printf_i+0xf4>
 8015e10:	4826      	ldr	r0, [pc, #152]	@ (8015eac <_printf_i+0x234>)
 8015e12:	e7e9      	b.n	8015de8 <_printf_i+0x170>
 8015e14:	6823      	ldr	r3, [r4, #0]
 8015e16:	f023 0320 	bic.w	r3, r3, #32
 8015e1a:	6023      	str	r3, [r4, #0]
 8015e1c:	e7f6      	b.n	8015e0c <_printf_i+0x194>
 8015e1e:	4616      	mov	r6, r2
 8015e20:	e7bd      	b.n	8015d9e <_printf_i+0x126>
 8015e22:	6833      	ldr	r3, [r6, #0]
 8015e24:	6825      	ldr	r5, [r4, #0]
 8015e26:	6961      	ldr	r1, [r4, #20]
 8015e28:	1d18      	adds	r0, r3, #4
 8015e2a:	6030      	str	r0, [r6, #0]
 8015e2c:	062e      	lsls	r6, r5, #24
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	d501      	bpl.n	8015e36 <_printf_i+0x1be>
 8015e32:	6019      	str	r1, [r3, #0]
 8015e34:	e002      	b.n	8015e3c <_printf_i+0x1c4>
 8015e36:	0668      	lsls	r0, r5, #25
 8015e38:	d5fb      	bpl.n	8015e32 <_printf_i+0x1ba>
 8015e3a:	8019      	strh	r1, [r3, #0]
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	6123      	str	r3, [r4, #16]
 8015e40:	4616      	mov	r6, r2
 8015e42:	e7bc      	b.n	8015dbe <_printf_i+0x146>
 8015e44:	6833      	ldr	r3, [r6, #0]
 8015e46:	1d1a      	adds	r2, r3, #4
 8015e48:	6032      	str	r2, [r6, #0]
 8015e4a:	681e      	ldr	r6, [r3, #0]
 8015e4c:	6862      	ldr	r2, [r4, #4]
 8015e4e:	2100      	movs	r1, #0
 8015e50:	4630      	mov	r0, r6
 8015e52:	f7ea fa4d 	bl	80002f0 <memchr>
 8015e56:	b108      	cbz	r0, 8015e5c <_printf_i+0x1e4>
 8015e58:	1b80      	subs	r0, r0, r6
 8015e5a:	6060      	str	r0, [r4, #4]
 8015e5c:	6863      	ldr	r3, [r4, #4]
 8015e5e:	6123      	str	r3, [r4, #16]
 8015e60:	2300      	movs	r3, #0
 8015e62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015e66:	e7aa      	b.n	8015dbe <_printf_i+0x146>
 8015e68:	6923      	ldr	r3, [r4, #16]
 8015e6a:	4632      	mov	r2, r6
 8015e6c:	4649      	mov	r1, r9
 8015e6e:	4640      	mov	r0, r8
 8015e70:	47d0      	blx	sl
 8015e72:	3001      	adds	r0, #1
 8015e74:	d0ad      	beq.n	8015dd2 <_printf_i+0x15a>
 8015e76:	6823      	ldr	r3, [r4, #0]
 8015e78:	079b      	lsls	r3, r3, #30
 8015e7a:	d413      	bmi.n	8015ea4 <_printf_i+0x22c>
 8015e7c:	68e0      	ldr	r0, [r4, #12]
 8015e7e:	9b03      	ldr	r3, [sp, #12]
 8015e80:	4298      	cmp	r0, r3
 8015e82:	bfb8      	it	lt
 8015e84:	4618      	movlt	r0, r3
 8015e86:	e7a6      	b.n	8015dd6 <_printf_i+0x15e>
 8015e88:	2301      	movs	r3, #1
 8015e8a:	4632      	mov	r2, r6
 8015e8c:	4649      	mov	r1, r9
 8015e8e:	4640      	mov	r0, r8
 8015e90:	47d0      	blx	sl
 8015e92:	3001      	adds	r0, #1
 8015e94:	d09d      	beq.n	8015dd2 <_printf_i+0x15a>
 8015e96:	3501      	adds	r5, #1
 8015e98:	68e3      	ldr	r3, [r4, #12]
 8015e9a:	9903      	ldr	r1, [sp, #12]
 8015e9c:	1a5b      	subs	r3, r3, r1
 8015e9e:	42ab      	cmp	r3, r5
 8015ea0:	dcf2      	bgt.n	8015e88 <_printf_i+0x210>
 8015ea2:	e7eb      	b.n	8015e7c <_printf_i+0x204>
 8015ea4:	2500      	movs	r5, #0
 8015ea6:	f104 0619 	add.w	r6, r4, #25
 8015eaa:	e7f5      	b.n	8015e98 <_printf_i+0x220>
 8015eac:	080163d9 	.word	0x080163d9
 8015eb0:	080163ea 	.word	0x080163ea

08015eb4 <memmove>:
 8015eb4:	4288      	cmp	r0, r1
 8015eb6:	b510      	push	{r4, lr}
 8015eb8:	eb01 0402 	add.w	r4, r1, r2
 8015ebc:	d902      	bls.n	8015ec4 <memmove+0x10>
 8015ebe:	4284      	cmp	r4, r0
 8015ec0:	4623      	mov	r3, r4
 8015ec2:	d807      	bhi.n	8015ed4 <memmove+0x20>
 8015ec4:	1e43      	subs	r3, r0, #1
 8015ec6:	42a1      	cmp	r1, r4
 8015ec8:	d008      	beq.n	8015edc <memmove+0x28>
 8015eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015ece:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015ed2:	e7f8      	b.n	8015ec6 <memmove+0x12>
 8015ed4:	4402      	add	r2, r0
 8015ed6:	4601      	mov	r1, r0
 8015ed8:	428a      	cmp	r2, r1
 8015eda:	d100      	bne.n	8015ede <memmove+0x2a>
 8015edc:	bd10      	pop	{r4, pc}
 8015ede:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015ee2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015ee6:	e7f7      	b.n	8015ed8 <memmove+0x24>

08015ee8 <_sbrk_r>:
 8015ee8:	b538      	push	{r3, r4, r5, lr}
 8015eea:	4d06      	ldr	r5, [pc, #24]	@ (8015f04 <_sbrk_r+0x1c>)
 8015eec:	2300      	movs	r3, #0
 8015eee:	4604      	mov	r4, r0
 8015ef0:	4608      	mov	r0, r1
 8015ef2:	602b      	str	r3, [r5, #0]
 8015ef4:	f7ec f93a 	bl	800216c <_sbrk>
 8015ef8:	1c43      	adds	r3, r0, #1
 8015efa:	d102      	bne.n	8015f02 <_sbrk_r+0x1a>
 8015efc:	682b      	ldr	r3, [r5, #0]
 8015efe:	b103      	cbz	r3, 8015f02 <_sbrk_r+0x1a>
 8015f00:	6023      	str	r3, [r4, #0]
 8015f02:	bd38      	pop	{r3, r4, r5, pc}
 8015f04:	2400b9d8 	.word	0x2400b9d8

08015f08 <_realloc_r>:
 8015f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f0c:	4607      	mov	r7, r0
 8015f0e:	4614      	mov	r4, r2
 8015f10:	460d      	mov	r5, r1
 8015f12:	b921      	cbnz	r1, 8015f1e <_realloc_r+0x16>
 8015f14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f18:	4611      	mov	r1, r2
 8015f1a:	f7ff bc5b 	b.w	80157d4 <_malloc_r>
 8015f1e:	b92a      	cbnz	r2, 8015f2c <_realloc_r+0x24>
 8015f20:	f7ff fbec 	bl	80156fc <_free_r>
 8015f24:	4625      	mov	r5, r4
 8015f26:	4628      	mov	r0, r5
 8015f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f2c:	f000 f81a 	bl	8015f64 <_malloc_usable_size_r>
 8015f30:	4284      	cmp	r4, r0
 8015f32:	4606      	mov	r6, r0
 8015f34:	d802      	bhi.n	8015f3c <_realloc_r+0x34>
 8015f36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015f3a:	d8f4      	bhi.n	8015f26 <_realloc_r+0x1e>
 8015f3c:	4621      	mov	r1, r4
 8015f3e:	4638      	mov	r0, r7
 8015f40:	f7ff fc48 	bl	80157d4 <_malloc_r>
 8015f44:	4680      	mov	r8, r0
 8015f46:	b908      	cbnz	r0, 8015f4c <_realloc_r+0x44>
 8015f48:	4645      	mov	r5, r8
 8015f4a:	e7ec      	b.n	8015f26 <_realloc_r+0x1e>
 8015f4c:	42b4      	cmp	r4, r6
 8015f4e:	4622      	mov	r2, r4
 8015f50:	4629      	mov	r1, r5
 8015f52:	bf28      	it	cs
 8015f54:	4632      	movcs	r2, r6
 8015f56:	f7ff fbc3 	bl	80156e0 <memcpy>
 8015f5a:	4629      	mov	r1, r5
 8015f5c:	4638      	mov	r0, r7
 8015f5e:	f7ff fbcd 	bl	80156fc <_free_r>
 8015f62:	e7f1      	b.n	8015f48 <_realloc_r+0x40>

08015f64 <_malloc_usable_size_r>:
 8015f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f68:	1f18      	subs	r0, r3, #4
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	bfbc      	itt	lt
 8015f6e:	580b      	ldrlt	r3, [r1, r0]
 8015f70:	18c0      	addlt	r0, r0, r3
 8015f72:	4770      	bx	lr

08015f74 <_init>:
 8015f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f76:	bf00      	nop
 8015f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f7a:	bc08      	pop	{r3}
 8015f7c:	469e      	mov	lr, r3
 8015f7e:	4770      	bx	lr

08015f80 <_fini>:
 8015f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f82:	bf00      	nop
 8015f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f86:	bc08      	pop	{r3}
 8015f88:	469e      	mov	lr, r3
 8015f8a:	4770      	bx	lr
